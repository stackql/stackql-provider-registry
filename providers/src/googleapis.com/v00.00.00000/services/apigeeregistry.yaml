openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Apigee Registry API
  description: ''
  version: v1
  x-discovery-doc-revision: '20230726'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/apigee/docs/api-hub/what-is-api-hub'
servers:
  - url: 'https://apigeeregistry.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      type: object
      id: ListOperationsResponse
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
          type: array
    TagApiSpecRevisionRequest:
      type: object
      description: Request message for TagApiSpecRevision.
      id: TagApiSpecRevisionRequest
      properties:
        tag:
          description: 'Required. The tag to apply. The tag should be at most 40 characters, and match `a-z{3,39}`.'
          type: string
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      type: object
      properties:
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
        metadata:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
        response:
          description: 'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
      id: Operation
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
      type: object
      properties:
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
          type: integer
        details:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
    ListApisResponse:
      type: object
      description: Response message for ListApis.
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        apis:
          description: The APIs from the specified publisher.
          items:
            $ref: '#/components/schemas/Api'
          type: array
      id: ListApisResponse
    Config:
      properties:
        location:
          type: string
          description: Output only. The GCP location where the Instance resides.
          readOnly: true
        cmekKeyName:
          type: string
          description: 'Required. The Customer Managed Encryption Key (CMEK) used for data encryption. The CMEK name should follow the format of `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`, where the `location` must match InstanceConfig.location.'
      type: object
      id: Config
      description: Available configurations to provision an Instance.
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          type: array
          items:
            type: string
      id: TestIamPermissionsRequest
      type: object
    ListApiDeploymentsResponse:
      description: Response message for ListApiDeployments.
      id: ListApiDeploymentsResponse
      type: object
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        apiDeployments:
          type: array
          items:
            $ref: '#/components/schemas/ApiDeployment'
          description: The deployments from the specified publisher.
    Empty:
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
      id: Empty
    OperationMetadata:
      properties:
        apiVersion:
          type: string
          description: API version used to start the operation.
        endTime:
          description: The time the operation finished running.
          type: string
          format: google-datetime
        verb:
          description: Name of the verb executed by the operation.
          type: string
        cancellationRequested:
          type: boolean
          description: 'Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
        target:
          description: Server-defined resource path for the target of the operation.
          type: string
        createTime:
          format: google-datetime
          type: string
          description: The time the operation was created.
        statusMessage:
          type: string
          description: 'Human-readable status of the operation, if any.'
      type: object
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
    ListApiVersionsResponse:
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        apiVersions:
          items:
            $ref: '#/components/schemas/ApiVersion'
          type: array
          description: The versions from the specified publisher.
      id: ListApiVersionsResponse
      type: object
      description: Response message for ListApiVersions.
    Build:
      properties:
        commitId:
          description: Output only. Commit ID of the latest commit in the build.
          type: string
          readOnly: true
        commitTime:
          description: Output only. Commit time of the latest commit in the build.
          readOnly: true
          type: string
          format: google-datetime
        repo:
          description: 'Output only. Path of the open source repository: github.com/apigee/registry.'
          readOnly: true
          type: string
      type: object
      id: Build
      description: Build information of the Instance if it's in `ACTIVE` state.
    ListLocationsResponse:
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          items:
            $ref: '#/components/schemas/Location'
          type: array
          description: A list of locations that matches the specified filter in the request.
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
      type: object
    ListArtifactsResponse:
      id: ListArtifactsResponse
      type: object
      description: Response message for ListArtifacts.
      properties:
        artifacts:
          description: The artifacts from the specified publisher.
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
    RollbackApiDeploymentRequest:
      type: object
      properties:
        revisionId:
          description: 'Required. The revision ID to roll back to. It must be a revision of the same deployment. Example: `c7cfa2a8`'
          type: string
      id: RollbackApiDeploymentRequest
      description: Request message for RollbackApiDeployment.
    Instance:
      properties:
        state:
          readOnly: true
          enumDescriptions:
            - The default value. This value is used if the state is omitted.
            - The Instance has not been initialized or has been deleted.
            - The Instance is being created.
            - The Instance has been created and is ready for use.
            - The Instance is being updated.
            - The Instance is being deleted.
            - The Instance encountered an error during a state change.
          description: Output only. The current state of the Instance.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - INACTIVE
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - FAILED
        name:
          description: 'Format: `projects/*/locations/*/instance`. Currently only `locations/global` is supported.'
          type: string
        updateTime:
          type: string
          description: Output only. Last update timestamp.
          format: google-datetime
          readOnly: true
        build:
          $ref: '#/components/schemas/Build'
          readOnly: true
          description: Output only. Build info of the Instance if it's in `ACTIVE` state.
        config:
          description: Required. Config of the Instance.
          $ref: '#/components/schemas/Config'
        createTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. Creation timestamp.
        stateMessage:
          type: string
          readOnly: true
          description: Output only. Extra information of Instance.State if the state is `FAILED`.
      type: object
      description: 'An Instance represents the instance resources of the Registry. Currently, only one instance is allowed for each project.'
      id: Instance
    ListApiDeploymentRevisionsResponse:
      id: ListApiDeploymentRevisionsResponse
      description: Response message for ListApiDeploymentRevisionsResponse.
      properties:
        apiDeployments:
          description: The revisions of the deployment.
          items:
            $ref: '#/components/schemas/ApiDeployment'
          type: array
        nextPageToken:
          type: string
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
      id: TestIamPermissionsResponse
      type: object
    ApiDeployment:
      id: ApiDeployment
      description: Describes a service running at particular address that provides a particular version of an API. ApiDeployments have revisions which correspond to different configurations of a single deployment in time. Revision identifiers should be updated whenever the served API spec or endpoint address changes.
      properties:
        revisionUpdateTime:
          format: google-datetime
          readOnly: true
          type: string
          description: 'Output only. Last update timestamp: when the represented revision was last modified.'
        intendedAudience:
          description: Text briefly identifying the intended audience of the API. Changes to this value will not affect the revision.
          type: string
        revisionId:
          type: string
          readOnly: true
          description: Output only. Immutable. The revision ID of the deployment. A new revision is committed whenever the deployment contents are changed. The format is an 8-character hexadecimal string.
        apiSpecRevision:
          description: 'The full resource name (including revision ID) of the spec of the API being served by the deployment. Changes to this value will update the revision. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec@revision}`'
          type: string
        endpointUri:
          description: The address where the deployment is serving. Changes to this value will update the revision.
          type: string
        displayName:
          type: string
          description: Human-meaningful name.
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.'
        accessGuidance:
          type: string
          description: Text briefly describing how to access the endpoint. Changes to this value will not affect the revision.
        name:
          description: Resource name.
          type: string
        description:
          type: string
          description: A detailed description.
        revisionCreateTime:
          type: string
          description: Output only. Revision creation timestamp; when the represented revision was created.
          readOnly: true
          format: google-datetime
        externalChannelUri:
          type: string
          description: 'The address of the external channel of the API (e.g., the Developer Portal). Changes to this value will not affect the revision.'
        annotations:
          type: object
          additionalProperties:
            type: string
          description: 'Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.'
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. Creation timestamp; when the deployment resource was created.
      type: object
    HttpBody:
      description: 'Message that represents an arbitrary HTTP body. It should only be used for payload formats that can''t be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.'
      type: object
      id: HttpBody
      properties:
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          type: string
        extensions:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          type: array
          description: Application specific response metadata. Must be set in the first response for streaming APIs.
        contentType:
          description: The HTTP Content-Type header value specifying the content type of the body.
          type: string
    ListApiSpecsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        apiSpecs:
          description: The specs from the specified publisher.
          type: array
          items:
            $ref: '#/components/schemas/ApiSpec'
      id: ListApiSpecsResponse
      description: Response message for ListApiSpecs.
    ApiSpec:
      type: object
      id: ApiSpec
      properties:
        sourceUri:
          description: The original source URI of the spec (if one exists). This is an external location that can be used for reference purposes but which may not be authoritative since this external resource may change after the spec is retrieved.
          type: string
        mimeType:
          description: 'A style (format) descriptor for this spec that is specified as a [Media Type](https://en.wikipedia.org/wiki/Media_type). Possible values include `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and `application/vnd.apigee.graphql`, with possible suffixes representing compression types. These hypothetical names are defined in the vendor tree defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").'
          type: string
        sizeBytes:
          type: integer
          format: int32
          readOnly: true
          description: 'Output only. The size of the spec file in bytes. If the spec is gzipped, this is the size of the uncompressed spec.'
        labels:
          type: object
          description: 'Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.'
          additionalProperties:
            type: string
        hash:
          description: 'Output only. A SHA-256 hash of the spec''s contents. If the spec is gzipped, this is the hash of the uncompressed spec.'
          type: string
          readOnly: true
        filename:
          type: string
          description: A possibly-hierarchical name used to refer to the spec from other specs.
        name:
          description: Resource name.
          type: string
        createTime:
          type: string
          readOnly: true
          description: Output only. Creation timestamp; when the spec resource was created.
          format: google-datetime
        contents:
          format: byte
          type: string
          description: 'Input only. The contents of the spec. Provided by API callers when specs are created or updated. To access the contents of a spec, use GetApiSpecContents.'
        description:
          type: string
          description: A detailed description.
        revisionUpdateTime:
          format: google-datetime
          readOnly: true
          description: 'Output only. Last update timestamp: when the represented revision was last modified.'
          type: string
        revisionId:
          type: string
          description: Output only. Immutable. The revision ID of the spec. A new revision is committed whenever the spec contents are changed. The format is an 8-character hexadecimal string.
          readOnly: true
        annotations:
          type: object
          description: 'Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.'
          additionalProperties:
            type: string
        revisionCreateTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. Revision creation timestamp; when the represented revision was created.
      description: 'Describes a version of an API in a structured way. ApiSpecs provide formal descriptions that consumers can use to use a version. ApiSpec resources are intended to be fully-resolved descriptions of an ApiVersion. When specs consist of multiple files, these should be bundled together (e.g., in a zip archive) and stored as a unit. Multiple specs can exist to provide representations in different API description formats. Synchronization of these representations would be provided by tooling and background services.'
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      properties:
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata. For example the available capacity at the given location.
          type: object
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        labels:
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
      type: object
    Artifact:
      description: 'Artifacts of resources. Artifacts are unique (single-value) per resource and are used to store metadata that is too large or numerous to be stored directly on the resource. Since artifacts are stored separately from parent resources, they should generally be used for metadata that is needed infrequently, i.e., not for display in primary views of the resource but perhaps displayed or downloaded upon request. The `ListArtifacts` method allows artifacts to be quickly enumerated and checked for presence without downloading their (potentially-large) contents.'
      type: object
      properties:
        updateTime:
          description: Output only. Last update timestamp.
          format: google-datetime
          readOnly: true
          type: string
        contents:
          format: byte
          description: 'Input only. The contents of the artifact. Provided by API callers when artifacts are created or replaced. To access the contents of an artifact, use GetArtifactContents.'
          type: string
        sizeBytes:
          readOnly: true
          type: integer
          description: 'Output only. The size of the artifact in bytes. If the artifact is gzipped, this is the size of the uncompressed artifact.'
          format: int32
        annotations:
          description: 'Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.'
          type: object
          additionalProperties:
            type: string
        name:
          type: string
          description: Resource name.
        mimeType:
          type: string
          description: 'A content type specifier for the artifact. Content type specifiers are Media Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema" parameter that specifies a schema for the stored information. Content types can specify compression. Currently only GZip compression is supported (indicated with "+gzip").'
        createTime:
          description: Output only. Creation timestamp.
          type: string
          format: google-datetime
          readOnly: true
        labels:
          type: object
          description: 'Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with "registry.googleapis.com/" and cannot be changed.'
          additionalProperties:
            type: string
        hash:
          description: 'Output only. A SHA-256 hash of the artifact''s contents. If the artifact is gzipped, this is the hash of the uncompressed artifact.'
          type: string
          readOnly: true
      id: Artifact
    RollbackApiSpecRequest:
      description: Request message for RollbackApiSpec.
      type: object
      properties:
        revisionId:
          type: string
          description: 'Required. The revision ID to roll back to. It must be a revision of the same spec. Example: `c7cfa2a8`'
      id: RollbackApiSpecRequest
    Api:
      description: A top-level description of an API. Produced by producers and are commitments to provide services.
      id: Api
      type: object
      properties:
        updateTime:
          description: Output only. Last update timestamp.
          format: google-datetime
          readOnly: true
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.'
        recommendedVersion:
          description: 'The recommended version of the API. Format: `projects/{project}/locations/{location}/apis/{api}/versions/{version}`'
          type: string
        recommendedDeployment:
          type: string
          description: 'The recommended deployment of the API. Format: `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`'
        name:
          description: Resource name.
          type: string
        availability:
          type: string
          description: 'A user-definable description of the availability of this service. Format: free-form, but we expect single words that describe availability, e.g., "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".'
        description:
          description: A detailed description.
          type: string
        displayName:
          description: Human-meaningful name.
          type: string
        annotations:
          description: 'Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.'
          additionalProperties:
            type: string
          type: object
        createTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Creation timestamp.
    ApiVersion:
      type: object
      description: Describes a particular version of an API. ApiVersions are what consumers actually use.
      id: ApiVersion
      properties:
        primarySpec:
          description: 'The primary spec for this version. Format: projects/{project}/locations/{location}/apis/{api}/versions/{version}/specs/{spec}'
          type: string
        createTime:
          format: google-datetime
          description: Output only. Creation timestamp.
          readOnly: true
          type: string
        state:
          type: string
          description: 'A user-definable description of the lifecycle phase of this API version. Format: free-form, but we expect single words that describe API maturity, e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION", "DEPRECATED", "RETIRED".'
        annotations:
          type: object
          description: 'Annotations attach non-identifying metadata to resources. Annotation keys and values are less restricted than those of labels, but should be generally used for small values of broad interest. Larger, topic- specific metadata should be stored in Artifacts.'
          additionalProperties:
            type: string
        labels:
          additionalProperties:
            type: string
          type: object
          description: 'Labels attach identifying metadata to resources. Identifying metadata can be used to filter list operations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one resource (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with `apigeeregistry.googleapis.com/` and cannot be changed.'
        description:
          description: A detailed description.
          type: string
        displayName:
          type: string
          description: Human-meaningful name.
        name:
          type: string
          description: Resource name.
        updateTime:
          type: string
          description: Output only. Last update timestamp.
          format: google-datetime
          readOnly: true
    ListApiSpecRevisionsResponse:
      type: object
      description: Response message for ListApiSpecRevisionsResponse.
      id: ListApiSpecRevisionsResponse
      properties:
        nextPageToken:
          type: string
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        apiSpecs:
          description: The revisions of the spec.
          type: array
          items:
            $ref: '#/components/schemas/ApiSpec'
    TagApiDeploymentRevisionRequest:
      id: TagApiDeploymentRevisionRequest
      type: object
      properties:
        tag:
          type: string
          description: 'Required. The tag to apply. The tag should be at most 40 characters, and match `a-z{3,39}`.'
      description: Request message for TagApiDeploymentRevision.
    Binding:
      description: 'Associates `members`, or principals, with a `role`.'
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        members:
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
          type: array
          items:
            type: string
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
      id: Binding
      type: object
    Policy:
      type: object
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      id: Policy
      properties:
        version:
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          format: int32
          type: integer
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          type: array
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
        etag:
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
    CancelOperationRequest:
      properties: {}
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
    Expr:
      type: object
      properties:
        description:
          type: string
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      id: Expr
  parameters:
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    locations:
      id: google.apigeeregistry.locations
      name: locations
      title: Locations
      methods:
        projects_locations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_list'
        insert: []
        update: []
        delete: []
    operations:
      id: google.apigeeregistry.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
    runtime_iam_policies:
      id: google.apigeeregistry.runtime_iam_policies
      name: runtime_iam_policies
      title: Runtime Iam Policies
      methods:
        projects_locations_runtime_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1runtime:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_runtime_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1runtime:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_runtime_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1runtime:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_runtime_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1runtime:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/runtime_iam_policies/methods/projects_locations_runtime_get_iam_policy'
        insert: []
        update: []
        delete: []
    instances_iam_policies:
      id: google.apigeeregistry.instances_iam_policies
      name: instances_iam_policies
      title: Instances Iam Policies
      methods:
        projects_locations_instances_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_instances_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_instances_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_instances_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instances_iam_policies/methods/projects_locations_instances_get_iam_policy'
        insert: []
        update: []
        delete: []
    instances:
      id: google.apigeeregistry.instances
      name: instances
      title: Instances
      methods:
        projects_locations_instances_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_instances_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_instances_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instances/methods/projects_locations_instances_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/instances/methods/projects_locations_instances_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/projects_locations_instances_delete'
    artifacts_iam_policies:
      id: google.apigeeregistry.artifacts_iam_policies
      name: artifacts_iam_policies
      title: Artifacts Iam Policies
      methods:
        projects_locations_artifacts_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_versions_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_versions_specs_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_artifacts_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/artifacts_iam_policies/methods/projects_locations_apis_versions_specs_artifacts_get_iam_policy'
          - $ref: '#/components/x-stackQL-resources/artifacts_iam_policies/methods/projects_locations_apis_versions_artifacts_get_iam_policy'
          - $ref: '#/components/x-stackQL-resources/artifacts_iam_policies/methods/projects_locations_apis_artifacts_get_iam_policy'
          - $ref: '#/components/x-stackQL-resources/artifacts_iam_policies/methods/projects_locations_artifacts_get_iam_policy'
        insert: []
        update: []
        delete: []
    artifacts:
      id: google.apigeeregistry.artifacts
      name: artifacts
      title: Artifacts
      methods:
        projects_locations_artifacts_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_replace_artifact:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.artifacts
        _projects_locations_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_artifacts_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_replace_artifact:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.artifacts
        _projects_locations_apis_versions_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.artifacts
        _projects_locations_apis_versions_specs_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_replace_artifact:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.artifacts
        _projects_locations_apis_deployments_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_replace_artifact:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts~1{artifactsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts~1{artifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts~1{artifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_replace_artifact:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.artifacts
        _projects_locations_apis_artifacts_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_specs_artifacts_get'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_artifacts_get'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_specs_artifacts_list'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_deployments_artifacts_get'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_artifacts_list'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_deployments_artifacts_list'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_artifacts_get'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_artifacts_get'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_artifacts_list'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_artifacts_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_specs_artifacts_create'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_artifacts_create'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_deployments_artifacts_create'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_artifacts_create'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_artifacts_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_specs_artifacts_delete'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_versions_artifacts_delete'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_deployments_artifacts_delete'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_apis_artifacts_delete'
          - $ref: '#/components/x-stackQL-resources/artifacts/methods/projects_locations_artifacts_delete'
    artifacts_contents:
      id: google.apigeeregistry.artifacts_contents
      name: artifacts_contents
      title: Artifacts Contents
      methods:
        projects_locations_artifacts_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1artifacts~1{artifactsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_artifacts_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1artifacts~1{artifactsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_artifacts_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}~1artifacts~1{artifactsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_artifacts_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}~1artifacts~1{artifactsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_artifacts_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1artifacts~1{artifactsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/artifacts_contents/methods/projects_locations_apis_versions_specs_artifacts_get_contents'
          - $ref: '#/components/x-stackQL-resources/artifacts_contents/methods/projects_locations_apis_versions_artifacts_get_contents'
          - $ref: '#/components/x-stackQL-resources/artifacts_contents/methods/projects_locations_apis_deployments_artifacts_get_contents'
          - $ref: '#/components/x-stackQL-resources/artifacts_contents/methods/projects_locations_apis_artifacts_get_contents'
          - $ref: '#/components/x-stackQL-resources/artifacts_contents/methods/projects_locations_artifacts_get_contents'
        insert: []
        update: []
        delete: []
    specs_contents:
      id: google.apigeeregistry.specs_contents
      name: specs_contents
      title: Specs Contents
      methods:
        projects_locations_apis_versions_specs_get_contents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:getContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/specs_contents/methods/projects_locations_apis_versions_specs_get_contents'
        insert: []
        update: []
        delete: []
    specs_iam_policies:
      id: google.apigeeregistry.specs_iam_policies
      name: specs_iam_policies
      title: Specs Iam Policies
      methods:
        projects_locations_apis_versions_specs_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_versions_specs_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/specs_iam_policies/methods/projects_locations_apis_versions_specs_get_iam_policy'
        insert: []
        update: []
        delete: []
    specs:
      id: google.apigeeregistry.specs
      name: specs
      title: Specs
      methods:
        projects_locations_apis_versions_specs_tag_revision:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:tagRevision/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_rollback:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:rollback/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apiSpecs
        _projects_locations_apis_versions_specs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_specs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/specs/methods/projects_locations_apis_versions_specs_get'
          - $ref: '#/components/x-stackQL-resources/specs/methods/projects_locations_apis_versions_specs_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/specs/methods/projects_locations_apis_versions_specs_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/specs/methods/projects_locations_apis_versions_specs_delete'
    specs_revision:
      id: google.apigeeregistry.specs_revision
      name: specs_revision
      title: Specs Revision
      methods:
        projects_locations_apis_versions_specs_delete_revision:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:deleteRevision/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/specs_revision/methods/projects_locations_apis_versions_specs_delete_revision'
    specs_revisions:
      id: google.apigeeregistry.specs_revisions
      name: specs_revisions
      title: Specs Revisions
      methods:
        projects_locations_apis_versions_specs_list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apiSpecs
        _projects_locations_apis_versions_specs_list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}~1specs~1{specsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/specs_revisions/methods/projects_locations_apis_versions_specs_list_revisions'
        insert: []
        update: []
        delete: []
    versions:
      id: google.apigeeregistry.versions
      name: versions
      title: Versions
      methods:
        projects_locations_apis_versions_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apiVersions
        _projects_locations_apis_versions_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/projects_locations_apis_versions_get'
          - $ref: '#/components/x-stackQL-resources/versions/methods/projects_locations_apis_versions_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/versions/methods/projects_locations_apis_versions_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/projects_locations_apis_versions_delete'
    versions_iam_policies:
      id: google.apigeeregistry.versions_iam_policies
      name: versions_iam_policies
      title: Versions Iam Policies
      methods:
        projects_locations_apis_versions_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_versions_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_versions_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1versions~1{versionsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions_iam_policies/methods/projects_locations_apis_versions_get_iam_policy'
        insert: []
        update: []
        delete: []
    deployments_iam_policies:
      id: google.apigeeregistry.deployments_iam_policies
      name: deployments_iam_policies
      title: Deployments Iam Policies
      methods:
        projects_locations_apis_deployments_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_deployments_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/deployments_iam_policies/methods/projects_locations_apis_deployments_get_iam_policy'
        insert: []
        update: []
        delete: []
    deployments:
      id: google.apigeeregistry.deployments
      name: deployments
      title: Deployments
      methods:
        projects_locations_apis_deployments_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apiDeployments
        _projects_locations_apis_deployments_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_tag_revision:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:tagRevision/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_deployments_rollback:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:rollback/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/projects_locations_apis_deployments_get'
          - $ref: '#/components/x-stackQL-resources/deployments/methods/projects_locations_apis_deployments_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/projects_locations_apis_deployments_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/projects_locations_apis_deployments_delete'
    deployments_revision:
      id: google.apigeeregistry.deployments_revision
      name: deployments_revision
      title: Deployments Revision
      methods:
        projects_locations_apis_deployments_delete_revision:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:deleteRevision/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/deployments_revision/methods/projects_locations_apis_deployments_delete_revision'
    deployments_revisions:
      id: google.apigeeregistry.deployments_revisions
      name: deployments_revisions
      title: Deployments Revisions
      methods:
        projects_locations_apis_deployments_list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apiDeployments
        _projects_locations_apis_deployments_list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}~1deployments~1{deploymentsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/deployments_revisions/methods/projects_locations_apis_deployments_list_revisions'
        insert: []
        update: []
        delete: []
    apis:
      id: google.apigeeregistry.apis
      name: apis
      title: Apis
      methods:
        projects_locations_apis_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.apis
        _projects_locations_apis_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/apis/methods/projects_locations_apis_get'
          - $ref: '#/components/x-stackQL-resources/apis/methods/projects_locations_apis_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/apis/methods/projects_locations_apis_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/apis/methods/projects_locations_apis_delete'
    apis_iam_policies:
      id: google.apigeeregistry.apis_iam_policies
      name: apis_iam_policies
      title: Apis Iam Policies
      methods:
        projects_locations_apis_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_apis_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _projects_locations_apis_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1apis~1{apisId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/apis_iam_policies/methods/projects_locations_apis_get_iam_policy'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
    get:
      description: Gets information about a location.
      operationId: apigeeregistry.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: projects_locations_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: apigeeregistry.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: projects_locations_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: apigeeregistry.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: apigeeregistry.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: apigeeregistry.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: apigeeregistry.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/runtime:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.runtime.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: runtime_iam_policies
      x-stackQL-method: projects_locations_runtime_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/runtime:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.runtime.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: runtime_iam_policies
      x-stackQL-method: projects_locations_runtime_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/runtime:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.runtime.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: runtime_iam_policies
      x-stackQL-method: projects_locations_runtime_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.instances.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances_iam_policies
      x-stackQL-method: projects_locations_instances_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}':
    parameters: *ref_1
    delete:
      description: Deletes the Registry instance.
      operationId: apigeeregistry.projects.locations.instances.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances
      x-stackQL-method: projects_locations_instances_delete
      x-stackQL-verb: delete
    get:
      description: Gets details of a single Instance.
      operationId: apigeeregistry.projects.locations.instances.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances
      x-stackQL-method: projects_locations_instances_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/instances':
    parameters: *ref_1
    post:
      description: Provisions instance resources for the Registry.
      operationId: apigeeregistry.projects.locations.instances.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: instanceId
          schema:
            type: string
      x-stackQL-resource: instances
      x-stackQL-method: projects_locations_instances_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.instances.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: instances_iam_policies
      x-stackQL-method: projects_locations_instances_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.instances.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances_iam_policies
      x-stackQL-method: projects_locations_instances_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts/{artifactsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.artifacts.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_artifacts_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts/{artifactsId}':
    parameters: *ref_1
    delete:
      description: Removes a specified artifact.
      operationId: apigeeregistry.projects.locations.artifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_artifacts_delete
      x-stackQL-verb: delete
    get:
      description: Returns a specified artifact.
      operationId: apigeeregistry.projects.locations.artifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_artifacts_get
      x-stackQL-verb: select
    put:
      description: Used to replace a specified artifact.
      operationId: apigeeregistry.projects.locations.artifacts.replaceArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_artifacts_replace_artifact
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts':
    parameters: *ref_1
    get:
      description: Returns matching artifacts.
      operationId: apigeeregistry.projects.locations.artifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_artifacts_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.artifacts
    post:
      description: Creates a specified artifact.
      operationId: apigeeregistry.projects.locations.artifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: artifactId
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_artifacts_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts/{artifactsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.artifacts.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_artifacts_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts/{artifactsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.artifacts.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_artifacts_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/artifacts/{artifactsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.artifacts.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_contents
      x-stackQL-method: projects_locations_artifacts_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts/{artifactsId}':
    parameters: *ref_1
    delete:
      description: Removes a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_artifacts_delete
      x-stackQL-verb: delete
    get:
      description: Returns a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_artifacts_get
      x-stackQL-verb: select
    put:
      description: Used to replace a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.replaceArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_artifacts_replace_artifact
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts/{artifactsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_contents
      x-stackQL-method: projects_locations_apis_versions_artifacts_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts/{artifactsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_artifacts_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts':
    parameters: *ref_1
    get:
      description: Returns matching artifacts.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_artifacts_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.artifacts
    post:
      description: Creates a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: artifactId
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_artifacts_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts/{artifactsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_artifacts_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/artifacts/{artifactsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.versions.artifacts.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_artifacts_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified spec. If specs are stored with GZip compression, the default behavior is to return the spec uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs_contents
      x-stackQL-method: projects_locations_apis_versions_specs_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:tagRevision':
    parameters: *ref_1
    post:
      description: Adds a tag to a specified revision of a spec.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.tagRevision
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagApiSpecRevisionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_tag_revision
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:deleteRevision':
    parameters: *ref_1
    delete:
      description: Deletes a revision of a spec.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.deleteRevision
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs_revision
      x-stackQL-method: projects_locations_apis_versions_specs_delete_revision
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}':
    parameters: *ref_1
    patch:
      description: Used to modify a specified spec.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpec'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_patch
      x-stackQL-verb: exec
    delete:
      description: 'Removes a specified spec, all revisions, and all child resources (e.g., artifacts).'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_delete
      x-stackQL-verb: delete
    get:
      description: Returns a specified spec.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:rollback':
    parameters: *ref_1
    post:
      description: Sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackApiSpecRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_rollback
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs':
    parameters: *ref_1
    get:
      description: Returns matching specs.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiSpecsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apiSpecs
    post:
      description: Creates a specified spec.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpec'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpec'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: apiSpecId
          schema:
            type: string
      x-stackQL-resource: specs
      x-stackQL-method: projects_locations_apis_versions_specs_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:listRevisions':
    parameters: *ref_1
    get:
      description: Lists all revisions of a spec. Revisions are returned in descending order of revision creation time.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.listRevisions
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiSpecRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: specs_revisions
      x-stackQL-method: projects_locations_apis_versions_specs_list_revisions
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apiSpecs
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: specs_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts/{artifactsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts':
    parameters: *ref_1
    get:
      description: Returns matching artifacts.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.artifacts
    post:
      description: Creates a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: query
          name: artifactId
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts/{artifactsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts/{artifactsId}':
    parameters: *ref_1
    delete:
      description: Removes a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_delete
      x-stackQL-verb: delete
    get:
      description: Returns a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_get
      x-stackQL-verb: select
    put:
      description: Used to replace a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.replaceArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_replace_artifact
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts/{artifactsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}/specs/{specsId}/artifacts/{artifactsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.apis.versions.specs.artifacts.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: path
          name: specsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_contents
      x-stackQL-method: projects_locations_apis_versions_specs_artifacts_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}':
    parameters: *ref_1
    get:
      description: Returns a specified version.
      operationId: apigeeregistry.projects.locations.apis.versions.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: projects_locations_apis_versions_get
      x-stackQL-verb: select
    patch:
      description: Used to modify a specified version.
      operationId: apigeeregistry.projects.locations.apis.versions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiVersion'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: projects_locations_apis_versions_patch
      x-stackQL-verb: exec
    delete:
      description: Removes a specified version and all of the resources that it owns.
      operationId: apigeeregistry.projects.locations.apis.versions.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: versions
      x-stackQL-method: projects_locations_apis_versions_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions':
    parameters: *ref_1
    get:
      description: Returns matching versions.
      operationId: apigeeregistry.projects.locations.apis.versions.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: projects_locations_apis_versions_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apiVersions
    post:
      description: Creates a specified version.
      operationId: apigeeregistry.projects.locations.apis.versions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiVersion'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: apiVersionId
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: projects_locations_apis_versions_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.versions.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: versions_iam_policies
      x-stackQL-method: projects_locations_apis_versions_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.versions.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: versions_iam_policies
      x-stackQL-method: projects_locations_apis_versions_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/versions/{versionsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.versions.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: versions_iam_policies
      x-stackQL-method: projects_locations_apis_versions_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.deployments.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments_iam_policies
      x-stackQL-method: projects_locations_apis_deployments_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}':
    parameters: *ref_1
    patch:
      description: Used to modify a specified deployment.
      operationId: apigeeregistry.projects.locations.apis.deployments.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiDeployment'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_patch
      x-stackQL-verb: exec
    delete:
      description: 'Removes a specified deployment, all revisions, and all child resources (e.g., artifacts).'
      operationId: apigeeregistry.projects.locations.apis.deployments.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_delete
      x-stackQL-verb: delete
    get:
      description: Returns a specified deployment.
      operationId: apigeeregistry.projects.locations.apis.deployments.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.deployments.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: deployments_iam_policies
      x-stackQL-method: projects_locations_apis_deployments_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.deployments.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments_iam_policies
      x-stackQL-method: projects_locations_apis_deployments_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments':
    parameters: *ref_1
    get:
      description: Returns matching deployments.
      operationId: apigeeregistry.projects.locations.apis.deployments.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiDeploymentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apiDeployments
    post:
      description: Creates a specified deployment.
      operationId: apigeeregistry.projects.locations.apis.deployments.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiDeployment'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: apiDeploymentId
          schema:
            type: string
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:deleteRevision':
    parameters: *ref_1
    delete:
      description: Deletes a revision of a deployment.
      operationId: apigeeregistry.projects.locations.apis.deployments.deleteRevision
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments_revision
      x-stackQL-method: projects_locations_apis_deployments_delete_revision
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:tagRevision':
    parameters: *ref_1
    post:
      description: Adds a tag to a specified revision of a deployment.
      operationId: apigeeregistry.projects.locations.apis.deployments.tagRevision
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagApiDeploymentRevisionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_tag_revision
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:rollback':
    parameters: *ref_1
    post:
      description: Sets the current revision to a specified prior revision. Note that this creates a new revision with a new revision ID.
      operationId: apigeeregistry.projects.locations.apis.deployments.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackApiDeploymentRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: deployments
      x-stackQL-method: projects_locations_apis_deployments_rollback
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}:listRevisions':
    parameters: *ref_1
    get:
      description: Lists all revisions of a deployment. Revisions are returned in descending order of revision creation time.
      operationId: apigeeregistry.projects.locations.apis.deployments.listRevisions
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiDeploymentRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: deployments_revisions
      x-stackQL-method: projects_locations_apis_deployments_list_revisions
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apiDeployments
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}/artifacts/{artifactsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_contents
      x-stackQL-method: projects_locations_apis_deployments_artifacts_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}/artifacts':
    parameters: *ref_1
    get:
      description: Returns matching artifacts.
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_deployments_artifacts_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.artifacts
    post:
      description: Creates a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: query
          name: artifactId
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_deployments_artifacts_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/deployments/{deploymentsId}/artifacts/{artifactsId}':
    parameters: *ref_1
    put:
      description: Used to replace a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.replaceArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_deployments_artifacts_replace_artifact
      x-stackQL-verb: exec
    get:
      description: Returns a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_deployments_artifacts_get
      x-stackQL-verb: select
    delete:
      description: Removes a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.deployments.artifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: deploymentsId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_deployments_artifacts_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts/{artifactsId}':
    parameters: *ref_1
    get:
      description: Returns a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.artifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_artifacts_get
      x-stackQL-verb: select
    put:
      description: Used to replace a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.artifacts.replaceArtifact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_artifacts_replace_artifact
      x-stackQL-verb: exec
    delete:
      description: Removes a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.artifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_artifacts_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts/{artifactsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.artifacts.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_artifacts_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts/{artifactsId}:getContents':
    parameters: *ref_1
    get:
      description: 'Returns the contents of a specified artifact. If artifacts are stored with GZip compression, the default behavior is to return the artifact uncompressed (the mime_type response field indicates the exact format returned).'
      operationId: apigeeregistry.projects.locations.apis.artifacts.getContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_contents
      x-stackQL-method: projects_locations_apis_artifacts_get_contents
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts':
    parameters: *ref_1
    post:
      description: Creates a specified artifact.
      operationId: apigeeregistry.projects.locations.apis.artifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: artifactId
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_artifacts_create
      x-stackQL-verb: insert
    get:
      description: Returns matching artifacts.
      operationId: apigeeregistry.projects.locations.apis.artifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: artifacts
      x-stackQL-method: projects_locations_apis_artifacts_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.artifacts
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts/{artifactsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.artifacts.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_artifacts_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/artifacts/{artifactsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.artifacts.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: path
          name: artifactsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: artifacts_iam_policies
      x-stackQL-method: projects_locations_apis_artifacts_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/apis':
    parameters: *ref_1
    get:
      description: Returns matching APIs.
      operationId: apigeeregistry.projects.locations.apis.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApisResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: apis
      x-stackQL-method: projects_locations_apis_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.apis
    post:
      description: Creates a specified API.
      operationId: apigeeregistry.projects.locations.apis.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Api'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: apiId
          schema:
            type: string
      x-stackQL-resource: apis
      x-stackQL-method: projects_locations_apis_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}':
    parameters: *ref_1
    get:
      description: Returns a specified API.
      operationId: apigeeregistry.projects.locations.apis.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
      x-stackQL-resource: apis
      x-stackQL-method: projects_locations_apis_get
      x-stackQL-verb: select
    patch:
      description: Used to modify a specified API.
      operationId: apigeeregistry.projects.locations.apis.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Api'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Api'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
      x-stackQL-resource: apis
      x-stackQL-method: projects_locations_apis_patch
      x-stackQL-verb: exec
    delete:
      description: Removes a specified API and all of the resources that it owns.
      operationId: apigeeregistry.projects.locations.apis.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: apis
      x-stackQL-method: projects_locations_apis_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: apigeeregistry.projects.locations.apis.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
      x-stackQL-resource: apis_iam_policies
      x-stackQL-method: projects_locations_apis_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: apigeeregistry.projects.locations.apis.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
      x-stackQL-resource: apis_iam_policies
      x-stackQL-method: projects_locations_apis_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: apigeeregistry.projects.locations.apis.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: apisId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: apis_iam_policies
      x-stackQL-method: projects_locations_apis_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
