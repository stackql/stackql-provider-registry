openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Dataproc Metastore API
  description: The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
  version: v1
  x-discovery-doc-revision: '20230807'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/dataproc-metastore/docs'
servers:
  - url: 'https://metastore.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    QueryMetadataRequest:
      type: object
      id: QueryMetadataRequest
      description: Request message for DataprocMetastore.QueryMetadata.
      properties:
        query:
          type: string
          description: Required. A read-only SQL query to execute against the metadata database. The query cannot change or mutate the data.
    Expr:
      type: object
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      properties:
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
    TestIamPermissionsResponse:
      description: Response message for TestIamPermissions method.
      id: TestIamPermissionsResponse
      properties:
        permissions:
          items:
            type: string
          description: A subset of TestPermissionsRequest.permissions that the caller is allowed.
          type: array
      type: object
    AuditConfig:
      properties:
        service:
          description: 'Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.'
          type: string
        auditLogConfigs:
          type: array
          description: The configuration for logging of each type of permission.
          items:
            $ref: '#/components/schemas/AuditLogConfig'
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.'
      type: object
      id: AuditConfig
    ListServicesResponse:
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
          description: The services in the specified location.
        nextPageToken:
          type: string
          description: 'A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          description: Locations that could not be reached.
          items:
            type: string
          type: array
      id: ListServicesResponse
      type: object
      description: Response message for DataprocMetastore.ListServices.
    MoveTableToDatabaseRequest:
      id: MoveTableToDatabaseRequest
      properties:
        destinationDbName:
          description: Required. The name of the database where the table should be moved.
          type: string
        dbName:
          type: string
          description: Required. The name of the database where the table resides.
        tableName:
          description: Required. The name of the table to be moved.
          type: string
      description: Request message for DataprocMetastore.MoveTableToDatabase.
      type: object
    Secret:
      properties:
        cloudSecret:
          description: 'The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.'
          type: string
      id: Secret
      description: A securely stored value.
      type: object
    MetadataManagementActivity:
      properties:
        metadataExports:
          description: Output only. The latest metadata exports of the metastore service.
          readOnly: true
          items:
            $ref: '#/components/schemas/MetadataExport'
          type: array
        restores:
          items:
            $ref: '#/components/schemas/Restore'
          description: Output only. The latest restores of the metastore service.
          readOnly: true
          type: array
      type: object
      description: The metadata management activities of the metastore service.
      id: MetadataManagementActivity
    SetIamPolicyRequest:
      description: Request message for SetIamPolicy method.
      id: SetIamPolicyRequest
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
        updateMask:
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:paths: "bindings, etag"'
          format: google-fieldmask
          type: string
      type: object
    MetadataImport:
      properties:
        createTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. The time when the metadata import was started.
        name:
          description: 'Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.'
          type: string
        description:
          type: string
          description: The description of the metadata import.
        endTime:
          type: string
          description: Output only. The time when the metadata import finished.
          readOnly: true
          format: google-datetime
        state:
          description: Output only. The current state of the metadata import.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - UPDATING
            - FAILED
          enumDescriptions:
            - The state of the metadata import is unknown.
            - The metadata import is running.
            - The metadata import completed successfully.
            - The metadata import is being updated.
            - 'The metadata import failed, and attempted metadata changes were rolled back.'
          readOnly: true
          type: string
        databaseDump:
          description: Immutable. A database dump from a pre-existing metastore's database.
          $ref: '#/components/schemas/DatabaseDump'
        updateTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time when the metadata import was last updated.
      id: MetadataImport
      type: object
      description: A metastore resource that imports metadata.
    HiveMetastoreVersion:
      id: HiveMetastoreVersion
      properties:
        version:
          description: The semantic version of the Hive Metastore software.
          type: string
        isDefault:
          type: boolean
          description: Whether version will be chosen by the server if a metastore service is created with a HiveMetastoreConfig that omits the version.
      description: A specification of a supported version of the Hive Metastore software.
      type: object
    ScalingConfig:
      id: ScalingConfig
      type: object
      description: Represents the scaling configuration of a metastore service.
      properties:
        instanceSize:
          enum:
            - INSTANCE_SIZE_UNSPECIFIED
            - EXTRA_SMALL
            - SMALL
            - MEDIUM
            - LARGE
            - EXTRA_LARGE
          type: string
          description: 'An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))'
          enumDescriptions:
            - Unspecified instance size
            - 'Extra small instance size, maps to a scaling factor of 0.1.'
            - 'Small instance size, maps to a scaling factor of 0.5.'
            - 'Medium instance size, maps to a scaling factor of 1.0.'
            - 'Large instance size, maps to a scaling factor of 3.0.'
            - 'Extra large instance size, maps to a scaling factor of 6.0.'
        scalingFactor:
          type: number
          format: float
          description: 'Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.'
    Restore:
      type: object
      description: The details of a metadata restore operation.
      properties:
        backup:
          type: string
          description: 'Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.'
          readOnly: true
        details:
          description: 'Output only. The restore details containing the revision of the service to be restored to, in format of JSON.'
          readOnly: true
          type: string
        type:
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          type: string
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
          description: Output only. The type of restore.
          readOnly: true
        endTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time when the restore ended.
        startTime:
          type: string
          format: google-datetime
          description: Output only. The time when the restore started.
          readOnly: true
        state:
          description: Output only. The current state of the restore.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
          type: string
          enumDescriptions:
            - The state of the metadata restore is unknown.
            - The metadata restore is running.
            - The metadata restore completed successfully.
            - The metadata restore failed.
            - The metadata restore is cancelled.
          readOnly: true
      id: Restore
    AlterMetadataResourceLocationRequest:
      id: AlterMetadataResourceLocationRequest
      type: object
      description: Request message for DataprocMetastore.AlterMetadataResourceLocation.
      properties:
        resourceName:
          type: string
          description: 'Required. The relative metadata resource name in the following format.databases/{database_id} or databases/{database_id}/tables/{table_id} or databases/{database_id}/tables/{table_id}/partitions/{partition_id}'
        locationUri:
          description: Required. The new location URI for the metadata resource.
          type: string
    AuditLogConfig:
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      type: object
      properties:
        logType:
          type: string
          description: The log type that this config enables.
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
        exemptedMembers:
          items:
            type: string
          type: array
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
      id: AuditLogConfig
    ListBackupsResponse:
      type: object
      description: Response message for DataprocMetastore.ListBackups.
      id: ListBackupsResponse
      properties:
        nextPageToken:
          description: 'A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
        backups:
          items:
            $ref: '#/components/schemas/Backup'
          description: The backups of the specified service.
          type: array
    TestIamPermissionsRequest:
      description: Request message for TestIamPermissions method.
      type: object
      properties:
        permissions:
          type: array
          description: 'The set of permissions to check for the resource. Permissions with wildcards (such as * or storage.*) are not allowed. For more information see IAM Overview (https://cloud.google.com/iam/docs/overview#permissions).'
          items:
            type: string
      id: TestIamPermissionsRequest
    EncryptionConfig:
      description: Encryption settings for the service.
      properties:
        kmsKey:
          description: 'The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.'
          type: string
      id: EncryptionConfig
      type: object
    ListMetadataImportsResponse:
      id: ListMetadataImportsResponse
      properties:
        nextPageToken:
          type: string
          description: 'A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
        metadataImports:
          items:
            $ref: '#/components/schemas/MetadataImport'
          type: array
          description: The imports in the specified service.
      type: object
      description: Response message for DataprocMetastore.ListMetadataImports.
    MoveTableToDatabaseResponse:
      description: Response message for DataprocMetastore.MoveTableToDatabase.
      type: object
      id: MoveTableToDatabaseResponse
      properties: {}
    Federation:
      id: Federation
      description: Represents a federation of multiple backend metastores.
      properties:
        name:
          description: 'Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.'
          type: string
        endpointUri:
          readOnly: true
          description: Output only. The federation endpoint.
          type: string
        state:
          enumDescriptions:
            - The state of the metastore federation is unknown.
            - The metastore federation is in the process of being created.
            - The metastore federation is running and ready to serve queries.
            - The metastore federation is being updated. It remains usable but cannot accept additional update requests or be deleted at this time.
            - The metastore federation is undergoing deletion. It cannot be used.
            - The metastore federation has encountered an error and cannot be used. The metastore federation should be deleted.
          readOnly: true
          description: Output only. The current state of the federation.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - ERROR
        stateMessage:
          description: 'Output only. Additional information about the current state of the metastore federation, if available.'
          type: string
          readOnly: true
        updateTime:
          description: Output only. The time when the metastore federation was last updated.
          type: string
          readOnly: true
          format: google-datetime
        createTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time when the metastore federation was created.
        backendMetastores:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BackendMetastore'
          description: A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
        uid:
          description: Output only. The globally unique resource identifier of the metastore federation.
          type: string
          readOnly: true
        labels:
          additionalProperties:
            type: string
          type: object
          description: User-defined labels for the metastore federation.
        version:
          description: Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
          type: string
      type: object
    Empty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } '
      id: Empty
      properties: {}
      type: object
    TelemetryConfig:
      properties:
        logFormat:
          description: The output format of the Dataproc Metastore service's logs.
          enumDescriptions:
            - The LOG_FORMAT is not set.
            - Logging output uses the legacy textPayload format.
            - Logging output uses the jsonPayload format.
          type: string
          enum:
            - LOG_FORMAT_UNSPECIFIED
            - LEGACY
            - JSON
      id: TelemetryConfig
      type: object
      description: Telemetry Configuration for the Dataproc Metastore service.
    AlterMetadataResourceLocationResponse:
      properties: {}
      type: object
      id: AlterMetadataResourceLocationResponse
      description: Response message for DataprocMetastore.AlterMetadataResourceLocation.
    Status:
      description: 'The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).'
      id: Status
      type: object
      properties:
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        code:
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
    AuxiliaryVersionConfig:
      id: AuxiliaryVersionConfig
      description: Configuration information for the auxiliary service versions.
      properties:
        configOverrides:
          type: object
          additionalProperties:
            type: string
          description: 'A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version''s overrides. If keys are present in both the auxiliary version''s overrides and the primary version''s overrides, the value from the auxiliary version''s overrides takes precedence.'
        networkConfig:
          $ref: '#/components/schemas/NetworkConfig'
          readOnly: true
          description: Output only. The network configuration contains the endpoint URI(s) of the auxiliary Hive metastore service.
        version:
          description: The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
          type: string
      type: object
    Location:
      id: Location
      properties:
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"'
          type: string
        locationId:
          type: string
          description: 'The canonical id for this location. For example: "us-east1".'
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} '
          additionalProperties:
            type: string
          type: object
      description: A resource that represents a Google Cloud location.
      type: object
    Backup:
      description: The details of a backup resource.
      type: object
      id: Backup
      properties:
        restoringServices:
          readOnly: true
          description: Output only. Services that are restoring from the backup.
          type: array
          items:
            type: string
        state:
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - DELETING
            - ACTIVE
            - FAILED
            - RESTORING
          type: string
          description: Output only. The current state of the backup.
          readOnly: true
          enumDescriptions:
            - The state of the backup is unknown.
            - The backup is being created.
            - The backup is being deleted.
            - The backup is active and ready to use.
            - The backup failed.
            - The backup is being restored.
        endTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The time when the backup finished creating.
        serviceRevision:
          readOnly: true
          $ref: '#/components/schemas/Service'
          description: Output only. The revision of the service at the time of backup.
        description:
          type: string
          description: The description of the backup.
        name:
          description: 'Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}'
          type: string
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time when the backup was started.
          readOnly: true
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      id: CancelOperationRequest
      type: object
    MaintenanceWindow:
      type: object
      properties:
        dayOfWeek:
          enum:
            - DAY_OF_WEEK_UNSPECIFIED
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
          enumDescriptions:
            - The day of the week is unspecified.
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          type: string
          description: 'The day of week, when the window starts.'
        hourOfDay:
          description: The hour of day (0-23) when the window starts.
          format: int32
          type: integer
      id: MaintenanceWindow
      description: Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
    MetadataExport:
      description: The details of a metadata export operation.
      type: object
      properties:
        destinationGcsUri:
          type: string
          description: 'Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.'
          readOnly: true
        endTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time when the export ended.
        databaseDumpType:
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          readOnly: true
          description: Output only. The type of the database dump.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
        startTime:
          format: google-datetime
          description: Output only. The time when the export started.
          type: string
          readOnly: true
        state:
          enumDescriptions:
            - The state of the metadata export is unknown.
            - The metadata export is running.
            - The metadata export completed successfully.
            - The metadata export failed.
            - The metadata export is cancelled.
          readOnly: true
          description: Output only. The current state of the export.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
      id: MetadataExport
    RestoreServiceRequest:
      description: Request message for DataprocMetastore.Restore.
      properties:
        restoreType:
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
          description: 'Optional. The type of restore. If unspecified, defaults to METADATA_ONLY.'
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          type: string
        backup:
          type: string
          description: 'Required. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.'
        requestId:
          description: 'Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.'
          type: string
      id: RestoreServiceRequest
      type: object
    ErrorDetails:
      id: ErrorDetails
      properties:
        details:
          description: Additional structured details about this error.Keys define the failure items. Value describes the exception or details of the item.
          additionalProperties:
            type: string
          type: object
      type: object
      description: Error details in public error message for DataprocMetastore.QueryMetadata.
    LocationMetadata:
      properties:
        supportedHiveMetastoreVersions:
          description: The versions of Hive Metastore that can be used when creating a new metastore service in this location. The server guarantees that exactly one HiveMetastoreVersion in the list will set is_default.
          type: array
          items:
            $ref: '#/components/schemas/HiveMetastoreVersion'
      description: Metadata about the service in a location.
      id: LocationMetadata
      type: object
    Consumer:
      type: object
      description: 'Contains information of the customer''s network configurations.Next available ID: 5'
      properties:
        subnetwork:
          type: string
          description: 'Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service''s endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet''s primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}'
        endpointUri:
          readOnly: true
          type: string
          description: Output only. The URI of the endpoint used to access the metastore service.
      id: Consumer
    Policy:
      properties:
        bindings:
          type: array
          description: 'Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.'
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          items:
            $ref: '#/components/schemas/AuditConfig'
          type: array
          description: Specifies cloud audit logging configuration for this policy.
        version:
          format: int32
          type: integer
          description: 'Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).'
        etag:
          type: string
          description: 'etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.'
          format: byte
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).'
      id: Policy
      type: object
    Service:
      description: A managed metastore service that serves metadata queries.
      properties:
        uid:
          description: Output only. The globally unique resource identifier of the metastore service.
          type: string
          readOnly: true
        releaseChannel:
          enumDescriptions:
            - Release channel is not specified.
            - 'The CANARY release channel contains the newest features, which may be unstable and subject to unresolved issues with no known workarounds. Services using the CANARY release channel are not subject to any SLAs.'
            - The STABLE release channel contains features that are considered stable and have been validated for production use.
          enum:
            - RELEASE_CHANNEL_UNSPECIFIED
            - CANARY
            - STABLE
          type: string
          description: 'Immutable. The release channel of the service. If unspecified, defaults to STABLE.'
        network:
          description: 'Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.'
          type: string
        hiveMetastoreConfig:
          description: Configuration information specific to running Hive metastore software as the metastore service.
          $ref: '#/components/schemas/HiveMetastoreConfig'
        state:
          description: Output only. The current state of the metastore service.
          type: string
          enumDescriptions:
            - The state of the metastore service is unknown.
            - The metastore service is in the process of being created.
            - The metastore service is running and ready to serve queries.
            - The metastore service is entering suspension. Its query-serving availability may cease unexpectedly.
            - The metastore service is suspended and unable to serve queries.
            - The metastore service is being updated. It remains usable but cannot accept additional update requests or be deleted at this time.
            - The metastore service is undergoing deletion. It cannot be used.
            - The metastore service has encountered an error and cannot be used. The metastore service should be deleted.
          readOnly: true
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - UPDATING
            - DELETING
            - ERROR
        databaseType:
          enumDescriptions:
            - The DATABASE_TYPE is not set.
            - MySQL is used to persist the metastore data.
            - Spanner is used to persist the metastore data.
          type: string
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
            - SPANNER
          description: Immutable. The database type that the Metastore service stores its data.
        stateMessage:
          readOnly: true
          description: 'Output only. Additional information about the current state of the metastore service, if available.'
          type: string
        tier:
          description: The tier of the service.
          enumDescriptions:
            - The tier is not set.
            - The developer tier provides limited scalability and no fault tolerance. Good for low-cost proof-of-concept.
            - 'The enterprise tier provides multi-zone high availability, and sufficient scalability for enterprise-level Dataproc Metastore workloads.'
          enum:
            - TIER_UNSPECIFIED
            - DEVELOPER
            - ENTERPRISE
          type: string
        createTime:
          readOnly: true
          type: string
          description: Output only. The time when the metastore service was created.
          format: google-datetime
        scalingConfig:
          $ref: '#/components/schemas/ScalingConfig'
          description: Scaling configuration of the metastore service.
        networkConfig:
          description: The configuration specifying the network settings for the Dataproc Metastore service.
          $ref: '#/components/schemas/NetworkConfig'
        endpointUri:
          description: Output only. The URI of the endpoint used to access the metastore service.
          type: string
          readOnly: true
        metadataManagementActivity:
          readOnly: true
          description: Output only. The metadata management activities of the metastore service.
          $ref: '#/components/schemas/MetadataManagementActivity'
        encryptionConfig:
          $ref: '#/components/schemas/EncryptionConfig'
          description: Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
        port:
          description: 'The TCP port at which the metastore service is reached. Default: 9083.'
          type: integer
          format: int32
        maintenanceWindow:
          description: The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
          $ref: '#/components/schemas/MaintenanceWindow'
        name:
          description: 'Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.'
          type: string
        artifactGcsUri:
          type: string
          readOnly: true
          description: 'Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.'
        updateTime:
          type: string
          description: Output only. The time when the metastore service was last updated.
          format: google-datetime
          readOnly: true
        telemetryConfig:
          description: The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
          $ref: '#/components/schemas/TelemetryConfig'
        labels:
          description: User-defined labels for the metastore service.
          additionalProperties:
            type: string
          type: object
      type: object
      id: Service
    DatabaseDump:
      description: A specification of the location of and metadata about a database dump from a relational database management system.
      id: DatabaseDump
      type: object
      properties:
        gcsUri:
          description: 'A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.'
          type: string
        databaseType:
          deprecated: true
          type: string
          description: The type of the database.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
          enumDescriptions:
            - The type of the source database is unknown.
            - The type of the source database is MySQL.
        sourceDatabase:
          description: The name of the source database.
          deprecated: true
          type: string
        type:
          description: 'Optional. The type of the database dump. If unspecified, defaults to MYSQL.'
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
    ListLocationsResponse:
      id: ListLocationsResponse
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          items:
            $ref: '#/components/schemas/Location'
          type: array
          description: A list of locations that matches the specified filter in the request.
      description: The response message for Locations.ListLocations.
    Binding:
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).'
        role:
          description: 'Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.'
          type: string
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.'
      id: Binding
      description: 'Associates members, or principals, with a role.'
      type: object
    KerberosConfig:
      description: Configuration information for a Kerberos principal.
      properties:
        krb5ConfigGcsUri:
          type: string
          description: 'A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.'
        keytab:
          description: A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
          $ref: '#/components/schemas/Secret'
        principal:
          type: string
          description: 'A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.'
      type: object
      id: KerberosConfig
    ExportMetadataRequest:
      description: Request message for DataprocMetastore.ExportMetadata.
      type: object
      properties:
        requestId:
          description: 'Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.'
          type: string
        databaseDumpType:
          type: string
          description: 'Optional. The type of the database dump. If unspecified, defaults to MYSQL.'
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
        destinationGcsFolder:
          type: string
          description: 'A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.'
      id: ExportMetadataRequest
    OperationMetadata:
      description: Represents the metadata of a long-running operation.
      type: object
      id: OperationMetadata
      properties:
        verb:
          readOnly: true
          description: Output only. Name of the verb executed by the operation.
          type: string
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        apiVersion:
          type: string
          description: Output only. API version used to start the operation.
          readOnly: true
        target:
          readOnly: true
          type: string
          description: Output only. Server-defined resource path for the target of the operation.
        statusMessage:
          type: string
          readOnly: true
          description: 'Output only. Human-readable status of the operation, if any.'
        endTime:
          type: string
          description: Output only. The time the operation finished running.
          readOnly: true
          format: google-datetime
        requestedCancellation:
          type: boolean
          description: 'Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.'
          readOnly: true
    Operation:
      properties:
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.'
          type: string
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        done:
          type: boolean
          description: 'If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.'
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.'
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      id: ListOperationsResponse
      type: object
      properties:
        operations:
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
    BackendMetastore:
      description: Represents a backend metastore for the federation.
      type: object
      properties:
        name:
          type: string
          description: 'The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}'
        metastoreType:
          enumDescriptions:
            - The metastore type is not set.
            - The backend metastore is BigQuery.
            - The backend metastore is Dataproc Metastore.
          enum:
            - METASTORE_TYPE_UNSPECIFIED
            - BIGQUERY
            - DATAPROC_METASTORE
          description: The type of the backend metastore.
          type: string
      id: BackendMetastore
    NetworkConfig:
      type: object
      id: NetworkConfig
      properties:
        consumers:
          description: Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
          type: array
          items:
            $ref: '#/components/schemas/Consumer'
      description: 'Network configuration for the Dataproc Metastore service.Next available ID: 4'
    ListFederationsResponse:
      properties:
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
        federations:
          items:
            $ref: '#/components/schemas/Federation'
          type: array
          description: The services in the specified location.
        nextPageToken:
          type: string
          description: 'A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.'
      id: ListFederationsResponse
      type: object
      description: Response message for ListFederations
    HiveMetastoreConfig:
      description: Specifies configuration information specific to running Hive metastore software as the metastore service.
      properties:
        version:
          description: Immutable. The Hive metastore schema version.
          type: string
        endpointProtocol:
          enum:
            - ENDPOINT_PROTOCOL_UNSPECIFIED
            - THRIFT
            - GRPC
          enumDescriptions:
            - The protocol is not set.
            - Use the legacy Apache Thrift protocol for the metastore service endpoint.
            - Use the modernized gRPC protocol for the metastore service endpoint.
          description: 'The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.'
          type: string
        kerberosConfig:
          $ref: '#/components/schemas/KerberosConfig'
          description: 'Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field''s path (hive_metastore_config.kerberos_config) in the request''s update_mask while omitting this field from the request''s service.'
        auxiliaryVersions:
          additionalProperties:
            $ref: '#/components/schemas/AuxiliaryVersionConfig'
          description: 'A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service''s primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.'
          type: object
        configOverrides:
          type: object
          additionalProperties:
            type: string
          description: A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
      type: object
      id: HiveMetastoreConfig
    QueryMetadataResponse:
      description: Response message for DataprocMetastore.QueryMetadata.
      type: object
      properties:
        resultManifestUri:
          description: The manifest URI is link to a JSON instance in Cloud Storage. This instance manifests immediately along with QueryMetadataResponse. The content of the URI is not retriable until the long-running operation query against the metadata finishes.
          type: string
      id: QueryMetadataResponse
  parameters:
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    locations:
      id: google.metastore.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    backups_iam_policies:
      id: google.metastore.backups_iam_policies
      name: backups_iam_policies
      title: Backups Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    backups:
      id: google.metastore.backups
      name: backups
      title: Backups
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.backups
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups/methods/get'
          - $ref: '#/components/x-stackQL-resources/backups/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/backups/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/backups/methods/delete'
    metadata_imports:
      id: google.metastore.metadata_imports
      name: metadata_imports
      title: Metadata Imports
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.metadataImports
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/get'
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/create'
        update: []
        delete: []
    services:
      id: google.metastore.services
      name: services
      title: Services
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        restore:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_metadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:queryMetadata/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        alter_location:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:alterLocation/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export_metadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:exportMetadata/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.services
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        move_table_to_database:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:moveTableToDatabase/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services/methods/get'
          - $ref: '#/components/x-stackQL-resources/services/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/delete'
    services_iam_policies:
      id: google.metastore.services_iam_policies
      name: services_iam_policies
      title: Services Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    federations_iam_policies:
      id: google.metastore.federations_iam_policies
      name: federations_iam_policies
      title: Federations Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/federations_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    federations:
      id: google.metastore.federations
      name: federations
      title: Federations
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.federations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/federations/methods/get'
          - $ref: '#/components/x-stackQL-resources/federations/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/federations/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/federations/methods/delete'
    operations:
      id: google.metastore.operations
      name: operations
      title: Operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
paths:
  '/v1/projects/{projectsId}/locations':
    parameters: &ref_1
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
    get:
      description: Lists information about the supported locations for this service.
      operationId: metastore.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: metastore.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.backups.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: backups_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}':
    parameters: *ref_1
    get:
      description: Gets details of a single backup.
      operationId: metastore.projects.locations.services.backups.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a single backup.
      operationId: metastore.projects.locations.services.backups.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.'
      operationId: metastore.projects.locations.services.backups.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups':
    parameters: *ref_1
    post:
      description: Creates a new backup in a given project and location.
      operationId: metastore.projects.locations.services.backups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: backupId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists backups in a service.
      operationId: metastore.projects.locations.services.backups.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.backups
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports':
    parameters: *ref_1
    get:
      description: Lists imports in a service.
      operationId: metastore.projects.locations.services.metadataImports.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetadataImportsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.metadataImports
    post:
      description: Creates a new MetadataImport in a given project and location.
      operationId: metastore.projects.locations.services.metadataImports.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: metadataImportId
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports/{metadataImportsId}':
    parameters: *ref_1
    patch:
      description: Updates a single import. Only the description field of MetadataImport is supported to be updated.
      operationId: metastore.projects.locations.services.metadataImports.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets details of a single import.
      operationId: metastore.projects.locations.services.metadataImports.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataImport'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}':
    parameters: *ref_1
    delete:
      description: Deletes a single service.
      operationId: metastore.projects.locations.services.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the details of a single service.
      operationId: metastore.projects.locations.services.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates the parameters of a single service.
      operationId: metastore.projects.locations.services.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:restore':
    parameters: *ref_1
    post:
      description: Restores a service from a backup.
      operationId: metastore.projects.locations.services.restore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreServiceRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: restore
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:queryMetadata':
    parameters: *ref_1
    post:
      description: Query DPMS metadata.
      operationId: metastore.projects.locations.services.queryMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryMetadataRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: query_metadata
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: metastore.projects.locations.services.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:alterLocation':
    parameters: *ref_1
    post:
      description: 'Alter metadata resource location. The metadata resource can be a database, table, or partition. This functionality only updates the parent directory for the respective metadata resource and does not transfer any existing data to the new location.'
      operationId: metastore.projects.locations.services.alterLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlterMetadataResourceLocationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: alter_location
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:exportMetadata':
    parameters: *ref_1
    post:
      description: Exports metadata from a service.
      operationId: metastore.projects.locations.services.exportMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMetadataRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: export_metadata
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services':
    parameters: *ref_1
    post:
      description: Creates a metastore service in a project and location.
      operationId: metastore.projects.locations.services.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: serviceId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists services in a project and location.
      operationId: metastore.projects.locations.services.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServicesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.services
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.'
      operationId: metastore.projects.locations.services.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:moveTableToDatabase':
    parameters: *ref_1
    post:
      description: Move a table to another database.
      operationId: metastore.projects.locations.services.moveTableToDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTableToDatabaseRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-method: move_table_to_database
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: services_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: metastore.projects.locations.federations.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/federations':
    parameters: *ref_1
    post:
      description: Creates a metastore federation in a project and location.
      operationId: metastore.projects.locations.federations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: federationId
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists federations in a project and location.
      operationId: metastore.projects.locations.federations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFederationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.federations
  '/v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}':
    parameters: *ref_1
    delete:
      description: Deletes a single federation.
      operationId: metastore.projects.locations.federations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the fields of a federation.
      operationId: metastore.projects.locations.federations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets the details of a single federation.
      operationId: metastore.projects.locations.federations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Federation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.'
      operationId: metastore.projects.locations.federations.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.federations.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: federations_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: metastore.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns google.rpc.Code.UNIMPLEMENTED.'
      operationId: metastore.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns UNIMPLEMENTED.'
      operationId: metastore.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.'
      operationId: metastore.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
