openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Dataproc Metastore API
  description: >-
    The Dataproc Metastore API is used to manage the lifecycle and configuration
    of metastore services.
  version: v1
  x-discovery-doc-revision: '20240910'
  x-generated-date: '2024-09-19'
externalDocs:
  url: https://cloud.google.com/dataproc-metastore/docs
servers:
  - url: https://metastore.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the name should be a resource name ending with
            operations/{unique_id}.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is false, it means the operation is still in progress.
            If true, the operation is completed, and either error or response is
            available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as Delete, the response is
            google.protobuf.Empty. If the original method is standard
            Get/Create/Update, the response should be the resource. For other
            methods, the response should have the type XxxResponse, where Xxx is
            the original method name. For example, if the original method name
            is TakeSnapshot(), the inferred response type is
            TakeSnapshotResponse.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The Status type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by gRPC (https://github.com/grpc). Each Status message contains
        three pieces of data: error code, error message, and error details.You
        can find out more about this error model and how to work with it in the
        API Design Guide (https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    ListFederationsResponse:
      id: ListFederationsResponse
      description: Response message for ListFederations
      type: object
      properties:
        federations:
          description: The services in the specified location.
          type: array
          items:
            $ref: '#/components/schemas/Federation'
        nextPageToken:
          description: >-
            A token that can be sent as page_token to retrieve the next page. If
            this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Federation:
      id: Federation
      description: Represents a federation of multiple backend metastores.
      type: object
      properties:
        name:
          description: >-
            Immutable. The relative resource name of the federation, of the
            form:
            projects/{project_number}/locations/{location_id}/federations/{federation_id}`.
          type: string
        createTime:
          description: Output only. The time when the metastore federation was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: >-
            Output only. The time when the metastore federation was last
            updated.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: User-defined labels for the metastore federation.
          type: object
          additionalProperties:
            type: string
        version:
          description: >-
            Immutable. The Apache Hive metastore version of the federation. All
            backend metastore versions must be compatible with the federation
            version.
          type: string
        backendMetastores:
          description: >-
            A map from BackendMetastore rank to BackendMetastores from which the
            federation service serves metadata at query time. The map key
            represents the order in which BackendMetastores should be evaluated
            to resolve database names at query time and should be greater than
            or equal to zero. A BackendMetastore with a lower number will be
            evaluated before a BackendMetastore with a higher number.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BackendMetastore'
        endpointUri:
          description: Output only. The federation endpoint.
          readOnly: true
          type: string
        state:
          description: Output only. The current state of the federation.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the metastore federation is unknown.
            - The metastore federation is in the process of being created.
            - The metastore federation is running and ready to serve queries.
            - >-
              The metastore federation is being updated. It remains usable but
              cannot accept additional update requests or be deleted at this
              time.
            - >-
              The metastore federation is undergoing deletion. It cannot be
              used.
            - >-
              The metastore federation has encountered an error and cannot be
              used. The metastore federation should be deleted.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - ERROR
        stateMessage:
          description: >-
            Output only. Additional information about the current state of the
            metastore federation, if available.
          readOnly: true
          type: string
        uid:
          description: >-
            Output only. The globally unique resource identifier of the
            metastore federation.
          readOnly: true
          type: string
    BackendMetastore:
      id: BackendMetastore
      description: Represents a backend metastore for the federation.
      type: object
      properties:
        name:
          description: >-
            The relative resource name of the metastore that is being federated.
            The formats of the relative resource names for the currently
            supported metastores are listed below: BigQuery
            projects/{project_id} Dataproc Metastore
            projects/{project_id}/locations/{location}/services/{service_id}
          type: string
        metastoreType:
          description: The type of the backend metastore.
          type: string
          enumDescriptions:
            - The metastore type is not set.
            - The backend metastore is BigQuery.
            - The backend metastore is Dataproc Metastore.
          enum:
            - METASTORE_TYPE_UNSPECIFIED
            - BIGQUERY
            - DATAPROC_METASTORE
    ListServicesResponse:
      id: ListServicesResponse
      description: Response message for DataprocMetastore.ListServices.
      type: object
      properties:
        services:
          description: The services in the specified location.
          type: array
          items:
            $ref: '#/components/schemas/Service'
        nextPageToken:
          description: >-
            A token that can be sent as page_token to retrieve the next page. If
            this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Service:
      id: Service
      description: A managed metastore service that serves metadata queries.
      type: object
      properties:
        hiveMetastoreConfig:
          description: >-
            Configuration information specific to running Hive metastore
            software as the metastore service.
          $ref: '#/components/schemas/HiveMetastoreConfig'
        name:
          description: >-
            Immutable. The relative resource name of the metastore service, in
            the following
            format:projects/{project_number}/locations/{location_id}/services/{service_id}.
          type: string
        createTime:
          description: Output only. The time when the metastore service was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the metastore service was last updated.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: User-defined labels for the metastore service.
          type: object
          additionalProperties:
            type: string
        network:
          description: >-
            Immutable. The relative resource name of the VPC network on which
            the instance can be accessed. It is specified in the following
            form:projects/{project_number}/global/networks/{network_id}.
          type: string
        endpointUri:
          description: >-
            Output only. The URI of the endpoint used to access the metastore
            service.
          readOnly: true
          type: string
        port:
          description: >-
            The TCP port at which the metastore service is reached. Default:
            9083.
          type: integer
          format: int32
        state:
          description: Output only. The current state of the metastore service.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the metastore service is unknown.
            - The metastore service is in the process of being created.
            - The metastore service is running and ready to serve queries.
            - >-
              The metastore service is entering suspension. Its query-serving
              availability may cease unexpectedly.
            - The metastore service is suspended and unable to serve queries.
            - >-
              The metastore service is being updated. It remains usable but
              cannot accept additional update requests or be deleted at this
              time.
            - The metastore service is undergoing deletion. It cannot be used.
            - >-
              The metastore service has encountered an error and cannot be used.
              The metastore service should be deleted.
            - The Dataproc Metastore service 2 is being scaled up or down.
            - The metastore service is processing a managed migration.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - UPDATING
            - DELETING
            - ERROR
            - AUTOSCALING
            - MIGRATING
        stateMessage:
          description: >-
            Output only. Additional information about the current state of the
            metastore service, if available.
          readOnly: true
          type: string
        artifactGcsUri:
          description: >-
            Output only. A Cloud Storage URI (starting with gs://) that
            specifies where artifacts related to the metastore service are
            stored.
          readOnly: true
          type: string
        tier:
          description: The tier of the service.
          type: string
          enumDescriptions:
            - The tier is not set.
            - >-
              The developer tier provides limited scalability and no fault
              tolerance. Good for low-cost proof-of-concept.
            - >-
              The enterprise tier provides multi-zone high availability, and
              sufficient scalability for enterprise-level Dataproc Metastore
              workloads.
          enum:
            - TIER_UNSPECIFIED
            - DEVELOPER
            - ENTERPRISE
        metadataIntegration:
          description: >-
            Optional. The setting that defines how metastore metadata should be
            integrated with external services and systems.
          $ref: '#/components/schemas/MetadataIntegration'
        maintenanceWindow:
          description: >-
            The one hour maintenance window of the metastore service. This
            specifies when the service can be restarted for maintenance purposes
            in UTC time. Maintenance window is not needed for services with the
            SPANNER database type.
          $ref: '#/components/schemas/MaintenanceWindow'
        uid:
          description: >-
            Output only. The globally unique resource identifier of the
            metastore service.
          readOnly: true
          type: string
        metadataManagementActivity:
          description: >-
            Output only. The metadata management activities of the metastore
            service.
          readOnly: true
          $ref: '#/components/schemas/MetadataManagementActivity'
        releaseChannel:
          description: >-
            Immutable. The release channel of the service. If unspecified,
            defaults to STABLE.
          type: string
          enumDescriptions:
            - Release channel is not specified.
            - >-
              The CANARY release channel contains the newest features, which may
              be unstable and subject to unresolved issues with no known
              workarounds. Services using the CANARY release channel are not
              subject to any SLAs.
            - >-
              The STABLE release channel contains features that are considered
              stable and have been validated for production use.
          enum:
            - RELEASE_CHANNEL_UNSPECIFIED
            - CANARY
            - STABLE
        encryptionConfig:
          description: >-
            Immutable. Information used to configure the Dataproc Metastore
            service to encrypt customer data at rest. Cannot be updated.
          $ref: '#/components/schemas/EncryptionConfig'
        networkConfig:
          description: >-
            The configuration specifying the network settings for the Dataproc
            Metastore service.
          $ref: '#/components/schemas/NetworkConfig'
        databaseType:
          description: >-
            Immutable. The database type that the Metastore service stores its
            data.
          type: string
          enumDescriptions:
            - The DATABASE_TYPE is not set.
            - MySQL is used to persist the metastore data.
            - Spanner is used to persist the metastore data.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
            - SPANNER
        telemetryConfig:
          description: >-
            The configuration specifying telemetry settings for the Dataproc
            Metastore service. If unspecified defaults to JSON.
          $ref: '#/components/schemas/TelemetryConfig'
        scalingConfig:
          description: Scaling configuration of the metastore service.
          $ref: '#/components/schemas/ScalingConfig'
        scheduledBackup:
          description: >-
            Optional. The configuration of scheduled backup for the metastore
            service.
          $ref: '#/components/schemas/ScheduledBackup'
        deletionProtection:
          description: >-
            Optional. Indicates if the dataproc metastore should be protected
            against accidental deletions.
          type: boolean
    HiveMetastoreConfig:
      id: HiveMetastoreConfig
      description: >-
        Specifies configuration information specific to running Hive metastore
        software as the metastore service.
      type: object
      properties:
        version:
          description: Immutable. The Hive metastore schema version.
          type: string
        configOverrides:
          description: >-
            A mapping of Hive metastore configuration key-value pairs to apply
            to the Hive metastore (configured in hive-site.xml). The mappings
            override system defaults (some keys cannot be overridden). These
            overrides are also applied to auxiliary versions and can be further
            customized in the auxiliary version's AuxiliaryVersionConfig.
          type: object
          additionalProperties:
            type: string
        kerberosConfig:
          description: >-
            Information used to configure the Hive metastore service as a
            service principal in a Kerberos realm. To disable Kerberos, use the
            UpdateService method and specify this field's path
            (hive_metastore_config.kerberos_config) in the request's update_mask
            while omitting this field from the request's service.
          $ref: '#/components/schemas/KerberosConfig'
        endpointProtocol:
          description: >-
            The protocol to use for the metastore service endpoint. If
            unspecified, defaults to THRIFT.
          type: string
          enumDescriptions:
            - The protocol is not set.
            - >-
              Use the legacy Apache Thrift protocol for the metastore service
              endpoint.
            - >-
              Use the modernized gRPC protocol for the metastore service
              endpoint.
          enum:
            - ENDPOINT_PROTOCOL_UNSPECIFIED
            - THRIFT
            - GRPC
        auxiliaryVersions:
          description: >-
            A mapping of Hive metastore version to the auxiliary version
            configuration. When specified, a secondary Hive metastore service is
            created along with the primary service. All auxiliary versions must
            be less than the service's primary version. The key is the auxiliary
            service name and it must match the regular expression a-z?. This
            means that the first character must be a lowercase letter, and all
            the following characters must be hyphens, lowercase letters, or
            digits, except the last character, which cannot be a hyphen.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AuxiliaryVersionConfig'
    KerberosConfig:
      id: KerberosConfig
      description: Configuration information for a Kerberos principal.
      type: object
      properties:
        keytab:
          description: >-
            A Kerberos keytab file that can be used to authenticate a service
            principal with a Kerberos Key Distribution Center (KDC).
          $ref: '#/components/schemas/Secret'
        principal:
          description: >-
            A Kerberos principal that exists in the both the keytab the KDC to
            authenticate as. A typical principal is of the form
            primary/instance@REALM, but there is no exact format.
          type: string
        krb5ConfigGcsUri:
          description: >-
            A Cloud Storage URI that specifies the path to a krb5.conf file. It
            is of the form gs://{bucket_name}/path/to/krb5.conf, although the
            file does not need to be named krb5.conf explicitly.
          type: string
    Secret:
      id: Secret
      description: A securely stored value.
      type: object
      properties:
        cloudSecret:
          description: >-
            The relative resource name of a Secret Manager secret version, in
            the following
            form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
          type: string
    AuxiliaryVersionConfig:
      id: AuxiliaryVersionConfig
      description: Configuration information for the auxiliary service versions.
      type: object
      properties:
        version:
          description: >-
            The Hive metastore version of the auxiliary service. It must be less
            than the primary Hive metastore service's version.
          type: string
        configOverrides:
          description: >-
            A mapping of Hive metastore configuration key-value pairs to apply
            to the auxiliary Hive metastore (configured in hive-site.xml) in
            addition to the primary version's overrides. If keys are present in
            both the auxiliary version's overrides and the primary version's
            overrides, the value from the auxiliary version's overrides takes
            precedence.
          type: object
          additionalProperties:
            type: string
        networkConfig:
          description: >-
            Output only. The network configuration contains the endpoint URI(s)
            of the auxiliary Hive metastore service.
          readOnly: true
          $ref: '#/components/schemas/NetworkConfig'
    NetworkConfig:
      id: NetworkConfig
      description: Network configuration for the Dataproc Metastore service.
      type: object
      properties:
        consumers:
          description: >-
            Immutable. The consumer-side network configuration for the Dataproc
            Metastore instance.
          type: array
          items:
            $ref: '#/components/schemas/Consumer'
    Consumer:
      id: Consumer
      description: Contains information of the customer's network configurations.
      type: object
      properties:
        subnetwork:
          description: >-
            Immutable. The subnetwork of the customer project from which an IP
            address is reserved and used as the Dataproc Metastore service's
            endpoint. It is accessible to hosts in the subnet and to all hosts
            in a subnet in the same region and same network. There must be at
            least one IP address available in the subnet's primary range. The
            subnet is specified in the following
            form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
          type: string
        endpointUri:
          description: >-
            Output only. The URI of the endpoint used to access the metastore
            service.
          readOnly: true
          type: string
        endpointLocation:
          description: >-
            Output only. The location of the endpoint URI. Format:
            projects/{project}/locations/{location}.
          readOnly: true
          type: string
    MetadataIntegration:
      id: MetadataIntegration
      description: >-
        Specifies how metastore metadata should be integrated with external
        services.
      type: object
      properties:
        dataCatalogConfig:
          description: Optional. The integration config for the Data Catalog service.
          $ref: '#/components/schemas/DataCatalogConfig'
    DataCatalogConfig:
      id: DataCatalogConfig
      description: >-
        Specifies how metastore metadata should be integrated with the Data
        Catalog service.
      type: object
      properties:
        enabled:
          description: >-
            Optional. Defines whether the metastore metadata should be synced to
            Data Catalog. The default value is to disable syncing metastore
            metadata to Data Catalog.
          type: boolean
    MaintenanceWindow:
      id: MaintenanceWindow
      description: >-
        Maintenance window. This specifies when Dataproc Metastore may perform
        system maintenance operation to the service.
      type: object
      properties:
        hourOfDay:
          description: The hour of day (0-23) when the window starts.
          type: integer
          format: int32
        dayOfWeek:
          description: The day of week, when the window starts.
          type: string
          enumDescriptions:
            - The day of the week is unspecified.
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          enum:
            - DAY_OF_WEEK_UNSPECIFIED
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
    MetadataManagementActivity:
      id: MetadataManagementActivity
      description: The metadata management activities of the metastore service.
      type: object
      properties:
        metadataExports:
          description: Output only. The latest metadata exports of the metastore service.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/MetadataExport'
        restores:
          description: Output only. The latest restores of the metastore service.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Restore'
    MetadataExport:
      id: MetadataExport
      description: The details of a metadata export operation.
      type: object
      properties:
        destinationGcsUri:
          description: >-
            Output only. A Cloud Storage URI of a folder that metadata are
            exported to, in the form of gs:////, where is automatically
            generated.
          readOnly: true
          type: string
        startTime:
          description: Output only. The time when the export started.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time when the export ended.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the export.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the metadata export is unknown.
            - The metadata export is running.
            - The metadata export completed successfully.
            - The metadata export failed.
            - The metadata export is cancelled.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
        databaseDumpType:
          description: Output only. The type of the database dump.
          readOnly: true
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
    Restore:
      id: Restore
      description: The details of a metadata restore operation.
      type: object
      properties:
        startTime:
          description: Output only. The time when the restore started.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time when the restore ended.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the restore.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the metadata restore is unknown.
            - The metadata restore is running.
            - The metadata restore completed successfully.
            - The metadata restore failed.
            - The metadata restore is cancelled.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
        backup:
          description: >-
            Output only. The relative resource name of the metastore service
            backup to restore from, in the following
            form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
          readOnly: true
          type: string
        type:
          description: Output only. The type of restore.
          readOnly: true
          type: string
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
        details:
          description: >-
            Output only. The restore details containing the revision of the
            service to be restored to, in format of JSON.
          readOnly: true
          type: string
        backupLocation:
          description: >-
            Optional. A Cloud Storage URI specifying where the backup artifacts
            are stored, in the format gs:///.
          type: string
    EncryptionConfig:
      id: EncryptionConfig
      description: Encryption settings for the service.
      type: object
      properties:
        kmsKey:
          description: >-
            The fully qualified customer provided Cloud KMS key name to use for
            customer data encryption, in the following
            format:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
          type: string
    TelemetryConfig:
      id: TelemetryConfig
      description: Telemetry Configuration for the Dataproc Metastore service.
      type: object
      properties:
        logFormat:
          description: The output format of the Dataproc Metastore service's logs.
          type: string
          enumDescriptions:
            - The LOG_FORMAT is not set.
            - Logging output uses the legacy textPayload format.
            - Logging output uses the jsonPayload format.
          enum:
            - LOG_FORMAT_UNSPECIFIED
            - LEGACY
            - JSON
    ScalingConfig:
      id: ScalingConfig
      description: Represents the scaling configuration of a metastore service.
      type: object
      properties:
        instanceSize:
          description: >-
            An enum of readable instance sizes, with each instance size mapping
            to a float value (e.g. InstanceSize.EXTRA_SMALL =
            scaling_factor(0.1))
          type: string
          enumDescriptions:
            - Unspecified instance size
            - Extra small instance size, maps to a scaling factor of 0.1.
            - Small instance size, maps to a scaling factor of 0.5.
            - Medium instance size, maps to a scaling factor of 1.0.
            - Large instance size, maps to a scaling factor of 3.0.
            - Extra large instance size, maps to a scaling factor of 6.0.
          enum:
            - INSTANCE_SIZE_UNSPECIFIED
            - EXTRA_SMALL
            - SMALL
            - MEDIUM
            - LARGE
            - EXTRA_LARGE
        scalingFactor:
          description: >-
            Scaling factor, increments of 0.1 for values less than 1.0, and
            increments of 1.0 for values greater than 1.0.
          type: number
          format: float
        autoscalingConfig:
          description: Optional. The autoscaling configuration.
          $ref: '#/components/schemas/AutoscalingConfig'
    AutoscalingConfig:
      id: AutoscalingConfig
      description: Represents the autoscaling configuration of a metastore service.
      type: object
      properties:
        autoscalingFactor:
          description: >-
            Output only. The scaling factor of a service with autoscaling
            enabled.
          readOnly: true
          type: number
          format: float
        autoscalingEnabled:
          description: Optional. Whether or not autoscaling is enabled for this service.
          type: boolean
        limitConfig:
          description: Optional. The LimitConfig of the service.
          $ref: '#/components/schemas/LimitConfig'
    LimitConfig:
      id: LimitConfig
      description: Represents the autoscaling limit configuration of a metastore service.
      type: object
      properties:
        maxScalingFactor:
          description: >-
            Optional. The highest scaling factor that the service should be
            autoscaled to.
          type: number
          format: float
        minScalingFactor:
          description: >-
            Optional. The lowest scaling factor that the service should be
            autoscaled to.
          type: number
          format: float
    ScheduledBackup:
      id: ScheduledBackup
      description: This specifies the configuration of scheduled backup.
      type: object
      properties:
        enabled:
          description: >-
            Optional. Defines whether the scheduled backup is enabled. The
            default value is false.
          type: boolean
        cronSchedule:
          description: >-
            Optional. The scheduled interval in Cron format, see
            https://en.wikipedia.org/wiki/Cron The default is empty: scheduled
            backup is not enabled. Must be specified to enable scheduled
            backups.
          type: string
        timeZone:
          description: >-
            Optional. Specifies the time zone to be used when interpreting
            cron_schedule. Must be a time zone name from the time zone database
            (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g.
            America/Los_Angeles or Africa/Abidjan. If left unspecified, the
            default is UTC.
          type: string
        nextScheduledTime:
          description: >-
            Output only. The time when the next backups execution is scheduled
            to start.
          readOnly: true
          type: string
          format: google-datetime
        backupLocation:
          description: >-
            Optional. A Cloud Storage URI of a folder, in the format gs:///. A
            sub-folder containing backup files will be stored below it.
          type: string
        latestBackup:
          description: Output only. The details of the latest scheduled backup.
          readOnly: true
          $ref: '#/components/schemas/LatestBackup'
    LatestBackup:
      id: LatestBackup
      description: The details of the latest scheduled backup.
      type: object
      properties:
        backupId:
          description: >-
            Output only. The ID of an in-progress scheduled backup. Empty if no
            backup is in progress.
          readOnly: true
          type: string
        startTime:
          description: Output only. The time when the backup was started.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the backup.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the backup is unknown.
            - The backup is in progress.
            - The backup completed.
            - The backup failed.
          enum:
            - STATE_UNSPECIFIED
            - IN_PROGRESS
            - SUCCEEDED
            - FAILED
        duration:
          description: Output only. The duration of the backup completion.
          readOnly: true
          type: string
          format: google-duration
    ListMetadataImportsResponse:
      id: ListMetadataImportsResponse
      description: Response message for DataprocMetastore.ListMetadataImports.
      type: object
      properties:
        metadataImports:
          description: The imports in the specified service.
          type: array
          items:
            $ref: '#/components/schemas/MetadataImport'
        nextPageToken:
          description: >-
            A token that can be sent as page_token to retrieve the next page. If
            this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    MetadataImport:
      id: MetadataImport
      description: A metastore resource that imports metadata.
      type: object
      properties:
        databaseDump:
          description: Immutable. A database dump from a pre-existing metastore's database.
          $ref: '#/components/schemas/DatabaseDump'
        name:
          description: >-
            Immutable. The relative resource name of the metadata import, of the
            form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
          type: string
        description:
          description: The description of the metadata import.
          type: string
        createTime:
          description: Output only. The time when the metadata import was started.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the metadata import was last updated.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time when the metadata import finished.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the metadata import.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the metadata import is unknown.
            - The metadata import is running.
            - The metadata import completed successfully.
            - The metadata import is being updated.
            - >-
              The metadata import failed, and attempted metadata changes were
              rolled back.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - UPDATING
            - FAILED
    DatabaseDump:
      id: DatabaseDump
      description: >-
        A specification of the location of and metadata about a database dump
        from a relational database management system.
      type: object
      properties:
        databaseType:
          description: The type of the database.
          deprecated: true
          type: string
          enumDescriptions:
            - The type of the source database is unknown.
            - The type of the source database is MySQL.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
        gcsUri:
          description: >-
            A Cloud Storage object or folder URI that specifies the source from
            which to import metadata. It must begin with gs://.
          type: string
        sourceDatabase:
          description: The name of the source database.
          deprecated: true
          type: string
        type:
          description: >-
            Optional. The type of the database dump. If unspecified, defaults to
            MYSQL.
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
    ExportMetadataRequest:
      id: ExportMetadataRequest
      description: Request message for DataprocMetastore.ExportMetadata.
      type: object
      properties:
        destinationGcsFolder:
          description: >-
            A Cloud Storage URI of a folder, in the format gs:///. A sub-folder
            containing exported files will be created below it.
          type: string
        requestId:
          description: >-
            Optional. A request ID. Specify a unique request ID to allow the
            server to ignore the request if it has completed. The server will
            ignore subsequent requests that provide a duplicate request ID for
            at least 60 minutes after the first request.For example, if an
            initial request times out, followed by another request with the same
            request ID, the server ignores the second request to prevent the
            creation of duplicate commitments.The request ID must be a valid
            UUID
            (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
            A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
          type: string
        databaseDumpType:
          description: >-
            Optional. The type of the database dump. If unspecified, defaults to
            MYSQL.
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
    RestoreServiceRequest:
      id: RestoreServiceRequest
      description: Request message for DataprocMetastore.Restore.
      type: object
      properties:
        backup:
          description: >-
            Optional. The relative resource name of the metastore service backup
            to restore from, in the following
            form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
            Mutually exclusive with backup_location, and exactly one of the two
            must be set.
          type: string
        backupLocation:
          description: >-
            Optional. A Cloud Storage URI specifying the location of the backup
            artifacts, namely - backup avro files under "avro/",
            backup_metastore.json and service.json, in the following form:gs://.
            Mutually exclusive with backup, and exactly one of the two must be
            set.
          type: string
        restoreType:
          description: >-
            Optional. The type of restore. If unspecified, defaults to
            METADATA_ONLY.
          type: string
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
        requestId:
          description: >-
            Optional. A request ID. Specify a unique request ID to allow the
            server to ignore the request if it has completed. The server will
            ignore subsequent requests that provide a duplicate request ID for
            at least 60 minutes after the first request.For example, if an
            initial request times out, followed by another request with the same
            request ID, the server ignores the second request to prevent the
            creation of duplicate commitments.The request ID must be a valid
            UUID
            (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
            A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
          type: string
    ListBackupsResponse:
      id: ListBackupsResponse
      description: Response message for DataprocMetastore.ListBackups.
      type: object
      properties:
        backups:
          description: The backups of the specified service.
          type: array
          items:
            $ref: '#/components/schemas/Backup'
        nextPageToken:
          description: >-
            A token that can be sent as page_token to retrieve the next page. If
            this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Backup:
      id: Backup
      description: The details of a backup resource.
      type: object
      properties:
        name:
          description: >-
            Immutable. The relative resource name of the backup, in the
            following
            form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}
          type: string
        createTime:
          description: Output only. The time when the backup was started.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time when the backup finished creating.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the backup.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the backup is unknown.
            - The backup is being created.
            - The backup is being deleted.
            - The backup is active and ready to use.
            - The backup failed.
            - The backup is being restored.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - DELETING
            - ACTIVE
            - FAILED
            - RESTORING
        serviceRevision:
          description: Output only. The revision of the service at the time of backup.
          readOnly: true
          $ref: '#/components/schemas/Service'
        description:
          description: The description of the backup.
          type: string
        restoringServices:
          description: Output only. Services that are restoring from the backup.
          readOnly: true
          type: array
          items:
            type: string
    QueryMetadataRequest:
      id: QueryMetadataRequest
      description: Request message for DataprocMetastore.QueryMetadata.
      type: object
      properties:
        query:
          description: >-
            Required. A read-only SQL query to execute against the metadata
            database. The query cannot change or mutate the data.
          type: string
    MoveTableToDatabaseRequest:
      id: MoveTableToDatabaseRequest
      description: Request message for DataprocMetastore.MoveTableToDatabase.
      type: object
      properties:
        tableName:
          description: Required. The name of the table to be moved.
          type: string
        dbName:
          description: Required. The name of the database where the table resides.
          type: string
        destinationDbName:
          description: Required. The name of the database where the table should be moved.
          type: string
    AlterMetadataResourceLocationRequest:
      id: AlterMetadataResourceLocationRequest
      description: Request message for DataprocMetastore.AlterMetadataResourceLocation.
      type: object
      properties:
        resourceName:
          description: >-
            Required. The relative metadata resource name in the following
            format.databases/{database_id} or
            databases/{database_id}/tables/{table_id} or
            databases/{database_id}/tables/{table_id}/partitions/{partition_id}
          type: string
        locationUri:
          description: Required. The new location URI for the metadata resource.
          type: string
    AlterTablePropertiesRequest:
      id: AlterTablePropertiesRequest
      description: Request message for DataprocMetastore.AlterTableProperties.
      type: object
      properties:
        tableName:
          description: >-
            Required. The name of the table containing the properties you're
            altering in the following
            format.databases/{database_id}/tables/{table_id}
          type: string
        updateMask:
          description: >-
            A field mask that specifies the metadata table properties that are
            overwritten by the update. Fields specified in the update_mask are
            relative to the resource (not to the full request). A field is
            overwritten if it is in the mask.For example, given the target
            properties: properties { a: 1 b: 2 } And an update properties:
            properties { a: 2 b: 3 c: 4 } then if the field mask is:paths:
            "properties.b", "properties.c"then the result will be: properties {
            a: 1 b: 3 c: 4 } 
          type: string
          format: google-fieldmask
        properties:
          description: >-
            A map that describes the desired values to mutate. If update_mask is
            empty, the properties will not update. Otherwise, the properties
            only alters the value whose associated paths exist in the update
            mask
          type: object
          additionalProperties:
            type: string
    StartMigrationRequest:
      id: StartMigrationRequest
      description: Request message for DataprocMetastore.StartMigration.
      type: object
      properties:
        migrationExecution:
          description: Required. The configuration details for the migration.
          $ref: '#/components/schemas/MigrationExecution'
        requestId:
          description: >-
            Optional. A request ID. Specify a unique request ID to allow the
            server to ignore the request if it has completed. The server will
            ignore subsequent requests that provide a duplicate request ID for
            at least 60 minutes after the first request.For example, if an
            initial request times out, followed by another request with the same
            request ID, the server ignores the second request to prevent the
            creation of duplicate commitments.The request ID must be a valid
            UUID
            (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
          type: string
    MigrationExecution:
      id: MigrationExecution
      description: The details of a migration execution resource.
      type: object
      properties:
        cloudSqlMigrationConfig:
          description: >-
            Configuration information specific to migrating from self-managed
            hive metastore on Google Cloud using Cloud SQL as the backend
            database to Dataproc Metastore.
          $ref: '#/components/schemas/CloudSQLMigrationConfig'
        name:
          description: >-
            Output only. The relative resource name of the migration execution,
            in the following form:
            projects/{project_number}/locations/{location_id}/services/{service_id}/migrationExecutions/{migration_execution_id}
          readOnly: true
          type: string
        createTime:
          description: Output only. The time when the migration execution was started.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time when the migration execution finished.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the migration execution.
          readOnly: true
          type: string
          enumDescriptions:
            - The state of the migration execution is unknown.
            - The migration execution is starting.
            - The migration execution is running.
            - The migration execution is in the process of being cancelled.
            - The migration execution is awaiting user action.
            - The migration execution has completed successfully.
            - The migration execution has failed.
            - The migration execution is cancelled.
            - The migration execution is being deleted.
          enum:
            - STATE_UNSPECIFIED
            - STARTING
            - RUNNING
            - CANCELLING
            - AWAITING_USER_ACTION
            - SUCCEEDED
            - FAILED
            - CANCELLED
            - DELETING
        phase:
          description: Output only. The current phase of the migration execution.
          readOnly: true
          type: string
          enumDescriptions:
            - The phase of the migration execution is unknown.
            - >-
              Replication phase refers to the migration phase when Dataproc
              Metastore is running a pipeline to replicate changes in the
              customer database to its backend database. During this phase,
              Dataproc Metastore uses the customer database as the hive
              metastore backend database.
            - >-
              Cutover phase refers to the migration phase when Dataproc
              Metastore switches to using its own backend database. Migration
              enters this phase when customer is done migrating all their
              clusters/workloads to Dataproc Metastore and triggers
              CompleteMigration.
          enum:
            - PHASE_UNSPECIFIED
            - REPLICATION
            - CUTOVER
        stateMessage:
          description: >-
            Output only. Additional information about the current state of the
            migration execution.
          readOnly: true
          type: string
    CloudSQLMigrationConfig:
      id: CloudSQLMigrationConfig
      description: >-
        Configuration information for migrating from self-managed hive metastore
        on Google Cloud using Cloud SQL as the backend database to Dataproc
        Metastore.
      type: object
      properties:
        cdcConfig:
          description: >-
            Required. Configuration information to start the Change Data Capture
            (CDC) streams from customer database to backend database of Dataproc
            Metastore. Dataproc Metastore switches to using its backend database
            after the cutover phase of migration.
          $ref: '#/components/schemas/CdcConfig'
        cloudSqlConnectionConfig:
          description: >-
            Required. Configuration information to establish customer database
            connection before the cutover phase of migration
          $ref: '#/components/schemas/CloudSQLConnectionConfig'
    CdcConfig:
      id: CdcConfig
      description: >-
        Configuration information to start the Change Data Capture (CDC) streams
        from customer database to backend database of Dataproc Metastore.
      type: object
      properties:
        vpcNetwork:
          description: >-
            Required. Fully qualified name of the Cloud SQL instance's VPC
            network or the shared VPC network that Datastream will peer to, in
            the following format:
            projects/{project_id}/locations/global/networks/{network_id}. More
            context in
            https://cloud.google.com/datastream/docs/network-connectivity-options#privateconnectivity
          type: string
        subnetIpRange:
          description: Required. A /29 CIDR IP range for peering with datastream.
          type: string
        username:
          description: >-
            Required. The username that the Datastream service should use for
            the MySQL connection.
          type: string
        password:
          description: >-
            Required. Input only. The password for the user that Datastream
            service should use for the MySQL connection. This field is not
            returned on request.
          type: string
        reverseProxySubnet:
          description: >-
            Required. The URL of the subnetwork resource to create the VM
            instance hosting the reverse proxy in. More context in
            https://cloud.google.com/datastream/docs/private-connectivity#reverse-csql-proxy
            The subnetwork should reside in the network provided in the request
            that Datastream will peer to and should be in the same region as
            Datastream, in the following format.
            projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork_id}
          type: string
        bucket:
          description: >-
            Optional. The bucket to write the intermediate stream event data in.
            The bucket name must be without any prefix like "gs://". See the
            bucket naming requirements
            (https://cloud.google.com/storage/docs/buckets#naming). This field
            is optional. If not set, the Artifacts Cloud Storage bucket will be
            used.
          type: string
        rootPath:
          description: >-
            Optional. The root path inside the Cloud Storage bucket. The stream
            event data will be written to this path. The default value is
            /migration.
          type: string
    CloudSQLConnectionConfig:
      id: CloudSQLConnectionConfig
      description: >-
        Configuration information to establish customer database connection
        before the cutover phase of migration
      type: object
      properties:
        instanceConnectionName:
          description: >-
            Required. Cloud SQL database connection name
            (project_id:region:instance_name)
          type: string
        ipAddress:
          description: Required. The private IP address of the Cloud SQL instance.
          type: string
        port:
          description: Required. The network port of the database.
          type: integer
          format: int32
        hiveDatabaseName:
          description: Required. The hive database name.
          type: string
        username:
          description: >-
            Required. The username that Dataproc Metastore service will use to
            connect to the database.
          type: string
        password:
          description: >-
            Required. Input only. The password for the user that Dataproc
            Metastore service will be using to connect to the database. This
            field is not returned on request.
          type: string
        proxySubnet:
          description: >-
            Required. The relative resource name of the subnetwork to deploy the
            SOCKS5 proxy service in. The subnetwork should reside in a network
            through which the Cloud SQL instance is accessible. The resource
            name should be in the format,
            projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork_id}
          type: string
        natSubnet:
          description: >-
            Required. The relative resource name of the subnetwork to be used
            for Private Service Connect. Note that this cannot be a regular
            subnet and is used only for NAT.
            (https://cloud.google.com/vpc/docs/about-vpc-hosted-services#psc-subnets)
            This subnet is used to publish the SOCKS5 proxy service. The subnet
            size must be at least /29 and it should reside in a network through
            which the Cloud SQL instance is accessible. The resource name should
            be in the format,
            projects/{project_id}/regions/{region_id}/subnetworks/{subnetwork_id}
          type: string
    CompleteMigrationRequest:
      id: CompleteMigrationRequest
      description: Request message for DataprocMetastore.CompleteMigration.
      type: object
      properties: {}
    CancelMigrationRequest:
      id: CancelMigrationRequest
      description: Request message for DataprocMetastore.CancelMigration.
      type: object
      properties: {}
    ListMigrationExecutionsResponse:
      id: ListMigrationExecutionsResponse
      description: Response message for DataprocMetastore.ListMigrationExecutions.
      type: object
      properties:
        migrationExecutions:
          description: The migration executions on the specified service.
          type: array
          items:
            $ref: '#/components/schemas/MigrationExecution'
        nextPageToken:
          description: >-
            A token that can be sent as page_token to retrieve the next page. If
            this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            "projects/example-project/locations/us-east1"
          type: string
        locationId:
          description: 'The canonical id for this location. For example: "us-east1".'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"} 
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for SetIamPolicy method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the resource. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used:paths: "bindings, etag"
          type: string
          format: google-fieldmask
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources.A Policy is a collection of
        bindings. A binding binds one or more members, or principals, to a
        single role. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A role is a named list of
        permissions; each role can be an IAM predefined role or a user-created
        custom role.For some types of Google Cloud resources, a binding can also
        specify a condition, which is a logical expression that allows access to
        a resource only if the expression evaluates to true. A condition can add
        constraints based on attributes of the request, the resource, or both.
        To learn which resources support conditions in their IAM policies, see
        the IAM documentation
        (https://cloud.google.com/iam/help/conditions/resource-policies).JSON
        example: { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: -
        user:mike@example.com - group:admins@example.com - domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For
        a description of IAM and its features, see the IAM documentation
        (https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy.Valid values are 0, 1, and 3.
            Requests that specify an invalid value are rejected.Any operation
            that affects conditional role bindings must specify version 3. This
            requirement applies to the following operations: Getting a policy
            that includes a conditional role binding Adding a conditional role
            binding to a policy Changing a conditional role binding in a policy
            Removing any role binding, with or without a condition, from a
            policy that includes conditionsImportant: If you use IAM Conditions,
            you must include the etag field whenever you call setIamPolicy. If
            you omit this field, then IAM allows you to overwrite a version 3
            policy with a version 1 policy, and all of the conditions in the
            version 3 policy are lost.If a policy does not include any
            conditions, operations on that policy may specify any valid version
            or leave the field unset.To learn which resources support conditions
            in their IAM policies, see the IAM documentation
            (https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of members, or principals, with a role.
            Optionally, may specify a condition that determines how and when the
            bindings are applied. Each of the bindings must contain at least one
            principal.The bindings in a Policy can refer to up to 1,500
            principals; up to 250 of these principals can be Google groups. Each
            occurrence of a principal counts towards these limits. For example,
            if the bindings grant 50 different roles to user:alice@example.com,
            and not to any other principal, then you can add another 1,450
            principals to the bindings in the Policy.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            etag is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the etag in
            the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An etag is returned in the response to
            getIamPolicy, and systems are expected to put that etag in the
            request to setIamPolicy to ensure that their change will be applied
            to the same version of the policy.Important: If you use IAM
            Conditions, you must include the etag field whenever you call
            setIamPolicy. If you omit this field, then IAM allows you to
            overwrite a version 3 policy with a version 1 policy, and all of the
            conditions in the version 3 policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates members, or principals, with a role.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of members, or principals. For
            example, roles/viewer, roles/editor, or roles/owner.For an overview
            of the IAM roles and permissions, see the IAM documentation
            (https://cloud.google.com/iam/docs/roles-overview). For a list of
            the available pre-defined roles, see here
            (https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. members can have the following values: allUsers: A special
            identifier that represents anyone who is on the internet; with or
            without a Google account. allAuthenticatedUsers: A special
            identifier that represents anyone who is authenticated with a Google
            account or a service account. Does not include identities that come
            from external identity providers (IdPs) through identity federation.
            user:{emailid}: An email address that represents a specific Google
            account. For example, alice@example.com . serviceAccount:{emailid}:
            An email address that represents a Google service account. For
            example, my-other-app@appspot.gserviceaccount.com.
            serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]:
            An identifier for a Kubernetes service account
            (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa].
            group:{emailid}: An email address that represents a Google group.
            For example, admins@example.com. domain:{domain}: The G Suite domain
            (primary) that represents all the users of that domain. For example,
            google.com or example.com.
            principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}:
            A single identity in a workforce identity pool.
            principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}:
            All workforce identities in a group.
            principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}:
            All workforce identities with a specific attribute value.
            principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*:
            All identities in a workforce identity pool.
            principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}:
            A single identity in a workload identity pool.
            principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}:
            A workload identity pool group.
            principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}:
            All identities in a workload identity pool with a certain attribute.
            principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*:
            All identities in a workload identity pool.
            deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique
            identifier) representing a user that has been recently deleted. For
            example, alice@example.com?uid=123456789012345678901. If the user is
            recovered, this value reverts to user:{emailid} and the recovered
            user retains the role in the binding.
            deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901.
            If the service account is undeleted, this value reverts to
            serviceAccount:{emailid} and the undeleted service account retains
            the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An
            email address (plus unique identifier) representing a Google group
            that has been recently deleted. For example,
            admins@example.com?uid=123456789012345678901. If the group is
            recovered, this value reverts to group:{emailid} and the recovered
            group retains the role in the binding.
            deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}:
            Deleted single identity in a workforce identity pool. For example,
            deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding.If the condition
            evaluates to true, then this binding applies to the current
            request.If the condition evaluates to false, then this binding does
            not apply to the current request. However, a different role binding
            might grant the same role to one or more of the principals in this
            binding.To learn which resources support conditions in their IAM
            policies, see the IAM documentation
            (https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec.Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs.If there are AuditConfigs for both allServices and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted.Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        jose@example.com from DATA_READ logging, and aliya@example.com from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, storage.googleapis.com, cloudsql.googleapis.com.
            allServices is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for TestIamPermissions method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the resource. Permissions with
            wildcards (such as * or storage.*) are not allowed. For more
            information see IAM Overview
            (https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for TestIamPermissions method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of TestPermissionsRequest.permissions that the caller is
            allowed.
          type: array
          items:
            type: string
    LocationMetadata:
      id: LocationMetadata
      description: Metadata about the service in a location.
      type: object
      properties:
        supportedHiveMetastoreVersions:
          description: >-
            The versions of Hive Metastore that can be used when creating a new
            metastore service in this location. The server guarantees that
            exactly one HiveMetastoreVersion in the list will set is_default.
          type: array
          items:
            $ref: '#/components/schemas/HiveMetastoreVersion'
        multiRegionMetadata:
          description: The multi-region metadata if the current region is a multi-region.
          $ref: '#/components/schemas/MultiRegionMetadata'
        customRegionMetadata:
          description: >-
            Possible configurations supported if the current region is a custom
            region.
          type: array
          items:
            $ref: '#/components/schemas/CustomRegionMetadata'
    HiveMetastoreVersion:
      id: HiveMetastoreVersion
      description: A specification of a supported version of the Hive Metastore software.
      type: object
      properties:
        version:
          description: The semantic version of the Hive Metastore software.
          type: string
        isDefault:
          description: >-
            Whether version will be chosen by the server if a metastore service
            is created with a HiveMetastoreConfig that omits the version.
          type: boolean
    MultiRegionMetadata:
      id: MultiRegionMetadata
      description: >-
        The metadata for the multi-region that includes the constituent regions.
        The metadata is only populated if the region is multi-region. For single
        region or custom dual region, it will be empty.
      type: object
      properties:
        constituentRegions:
          description: The regions constituting the multi-region.
          type: array
          items:
            type: string
    CustomRegionMetadata:
      id: CustomRegionMetadata
      description: >-
        Metadata about a custom region. This is only populated if the region is
        a custom region. For single/multi regions, it will be empty.
      type: object
      properties:
        requiredReadWriteRegions:
          description: The read-write regions for this custom region.
          type: array
          items:
            type: string
        optionalReadOnlyRegions:
          description: The read-only regions for this custom region.
          type: array
          items:
            type: string
        witnessRegion:
          description: The Spanner witness region for this custom region.
          type: string
    OperationMetadata:
      id: OperationMetadata
      description: Represents the metadata of a long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the caller has requested
            cancellation of the operation. Operations that have successfully
            been cancelled have Operation.error value with a
            google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
    QueryMetadataResponse:
      id: QueryMetadataResponse
      description: Response message for DataprocMetastore.QueryMetadata.
      type: object
      properties:
        resultManifestUri:
          description: >-
            The manifest URI is link to a JSON instance in Cloud Storage. This
            instance manifests immediately along with QueryMetadataResponse. The
            content of the URI is not retriable until the long-running operation
            query against the metadata finishes.
          type: string
    MoveTableToDatabaseResponse:
      id: MoveTableToDatabaseResponse
      description: Response message for DataprocMetastore.MoveTableToDatabase.
      type: object
      properties: {}
    AlterMetadataResourceLocationResponse:
      id: AlterMetadataResourceLocationResponse
      description: Response message for DataprocMetastore.AlterMetadataResourceLocation.
      type: object
      properties: {}
    ErrorDetails:
      id: ErrorDetails
      description: >-
        Error details in public error message for
        DataprocMetastore.QueryMetadata.
      type: object
      properties:
        details:
          description: >-
            Additional structured details about this error.Keys define the
            failure items. Value describes the exception or details of the item.
          type: object
          additionalProperties:
            type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.metastore.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.metastore.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    federations:
      id: google.metastore.federations
      name: federations
      title: Federations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.federations
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/federations/methods/get'
          - $ref: '#/components/x-stackQL-resources/federations/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/federations/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/federations/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/federations/methods/delete'
    federations_iam_policies:
      id: google.metastore.federations_iam_policies
      name: federations_iam_policies
      title: Federations_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/federations_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/federations_iam_policies/methods/set_iam_policy
        delete: []
    services:
      id: google.metastore.services
      name: services
      title: Services
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.services
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export_metadata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:exportMetadata/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        restore:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:restore/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_metadata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:queryMetadata/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        move_table_to_database:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:moveTableToDatabase/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        alter_location:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:alterLocation/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        alter_table_properties:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:alterTableProperties/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        start_migration:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:startMigration/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        complete_migration:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:completeMigration/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel_migration:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:cancelMigration/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services/methods/get'
          - $ref: '#/components/x-stackQL-resources/services/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/services/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/delete'
    services_iam_policies:
      id: google.metastore.services_iam_policies
      name: services_iam_policies
      title: Services_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/services_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/services_iam_policies/methods/set_iam_policy
        delete: []
    metadata_imports:
      id: google.metastore.metadata_imports
      name: metadata_imports
      title: Metadata_imports
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.metadataImports
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/get'
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/patch'
        replace: []
        delete: []
    backups:
      id: google.metastore.backups
      name: backups
      title: Backups
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.backups
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups/methods/get'
          - $ref: '#/components/x-stackQL-resources/backups/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/backups/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/backups/methods/delete'
    backups_iam_policies:
      id: google.metastore.backups_iam_policies
      name: backups_iam_policies
      title: Backups_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/backups_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/backups_iam_policies/methods/set_iam_policy
        delete: []
    migration_executions:
      id: google.metastore.migration_executions
      name: migration_executions
      title: Migration_executions
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1migrationExecutions~1{migrationExecutionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1migrationExecutions~1{migrationExecutionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1migrationExecutions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.migrationExecutions
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/migration_executions/methods/get'
          - $ref: '#/components/x-stackQL-resources/migration_executions/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/migration_executions/methods/delete
    databases_iam_policies:
      id: google.metastore.databases_iam_policies
      name: databases_iam_policies
      title: Databases_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1databases~1{databasesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1databases~1{databasesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/databases_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/databases_iam_policies/methods/set_iam_policy
        delete: []
    tables_iam_policies:
      id: google.metastore.tables_iam_policies
      name: tables_iam_policies
      title: Tables_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1databases~1{databasesId}~1tables~1{tablesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1databases~1{databasesId}~1tables~1{tablesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/tables_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/tables_iam_policies/methods/set_iam_policy
        delete: []
paths:
  /v1/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: metastore.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: metastore.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns UNIMPLEMENTED.
      operationId: metastore.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: metastore.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        google.rpc.Code.UNIMPLEMENTED.
      operationId: metastore.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to Code.CANCELLED.
      operationId: metastore.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/federations:
    parameters: *ref_1
    get:
      description: Lists federations in a project and location.
      operationId: metastore.projects.locations.federations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFederationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a metastore federation in a project and location.
      operationId: metastore.projects.locations.federations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: federationId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:
    parameters: *ref_1
    get:
      description: Gets the details of a single federation.
      operationId: metastore.projects.locations.federations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Federation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the fields of a federation.
      operationId: metastore.projects.locations.federations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single federation.
      operationId: metastore.projects.locations.federations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
        PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.federations.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.federations.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a NOT_FOUND error.Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: metastore.projects.locations.federations.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services:
    parameters: *ref_1
    get:
      description: Lists services in a project and location.
      operationId: metastore.projects.locations.services.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServicesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a metastore service in a project and location.
      operationId: metastore.projects.locations.services.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: serviceId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:
    parameters: *ref_1
    get:
      description: Gets the details of a single service.
      operationId: metastore.projects.locations.services.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
    patch:
      description: Updates the parameters of a single service.
      operationId: metastore.projects.locations.services.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single service.
      operationId: metastore.projects.locations.services.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:exportMetadata:
    parameters: *ref_1
    post:
      description: Exports metadata from a service.
      operationId: metastore.projects.locations.services.exportMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMetadataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:restore:
    parameters: *ref_1
    post:
      description: Restores a service from a backup.
      operationId: metastore.projects.locations.services.restore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreServiceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:queryMetadata:
    parameters: *ref_1
    post:
      description: Query Dataproc Metastore metadata.
      operationId: metastore.projects.locations.services.queryMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryMetadataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:moveTableToDatabase:
    parameters: *ref_1
    post:
      description: Move a table to another database.
      operationId: metastore.projects.locations.services.moveTableToDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveTableToDatabaseRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:alterLocation:
    parameters: *ref_1
    post:
      description: >-
        Alter metadata resource location. The metadata resource can be a
        database, table, or partition. This functionality only updates the
        parent directory for the respective metadata resource and does not
        transfer any existing data to the new location.
      operationId: metastore.projects.locations.services.alterLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlterMetadataResourceLocationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:alterTableProperties:
    parameters: *ref_1
    post:
      description: Alter metadata table properties.
      operationId: metastore.projects.locations.services.alterTableProperties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlterTablePropertiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:startMigration:
    parameters: *ref_1
    post:
      description: Starts the Managed Migration process.
      operationId: metastore.projects.locations.services.startMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartMigrationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:completeMigration:
    parameters: *ref_1
    post:
      description: >-
        Completes the managed migration process. The Dataproc Metastore service
        will switch to using its own backend database after successful
        migration.
      operationId: metastore.projects.locations.services.completeMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteMigrationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:cancelMigration:
    parameters: *ref_1
    post:
      description: Cancels the ongoing Managed Migration process.
      operationId: metastore.projects.locations.services.cancelMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelMigrationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
        PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a NOT_FOUND error.Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: metastore.projects.locations.services.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports:
    parameters: *ref_1
    get:
      description: Lists imports in a service.
      operationId: metastore.projects.locations.services.metadataImports.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetadataImportsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a new MetadataImport in a given project and location.
      operationId: metastore.projects.locations.services.metadataImports.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: metadataImportId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports/{metadataImportsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single import.
      operationId: metastore.projects.locations.services.metadataImports.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataImport'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates a single import. Only the description field of MetadataImport is
        supported to be updated.
      operationId: metastore.projects.locations.services.metadataImports.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups:
    parameters: *ref_1
    get:
      description: Lists backups in a service.
      operationId: metastore.projects.locations.services.backups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a new backup in a given project and location.
      operationId: metastore.projects.locations.services.backups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: backupId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single backup.
      operationId: metastore.projects.locations.services.backups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
    delete:
      description: Deletes a single backup.
      operationId: metastore.projects.locations.services.backups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
        PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.backups.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.backups.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/migrationExecutions/{migrationExecutionsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single migration execution.
      operationId: metastore.projects.locations.services.migrationExecutions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrationExecution'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: migrationExecutionsId
          required: true
          schema:
            type: string
    delete:
      description: Deletes a single migration execution.
      operationId: metastore.projects.locations.services.migrationExecutions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: migrationExecutionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/migrationExecutions:
    parameters: *ref_1
    get:
      description: Lists migration executions on a service.
      operationId: metastore.projects.locations.services.migrationExecutions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMigrationExecutionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
        PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.databases.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.databases.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}/tables/{tablesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and
        PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.databases.tables.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}/tables/{tablesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.databases.tables.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
