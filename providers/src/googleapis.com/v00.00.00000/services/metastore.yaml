openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Dataproc Metastore API
  description: The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.
  version: v1
  x-discovery-doc-revision: '20221208'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://cloud.google.com/dataproc-metastore/docs
servers:
  - url: https://metastore.googleapis.com
components:
  schemas:
    CancelOperationRequest:
      type: object
      properties: {}
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
    ListFederationsResponse:
      id: ListFederationsResponse
      description: Response message for ListFederations
      properties:
        nextPageToken:
          description: A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        federations:
          description: The services in the specified location.
          items:
            $ref: '#/components/schemas/Federation'
          type: array
      type: object
    Expr:
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec.Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      type: object
      properties:
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        description:
          type: string
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        title:
          type: string
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
    HiveMetastoreVersion:
      id: HiveMetastoreVersion
      description: A specification of a supported version of the Hive Metastore software.
      type: object
      properties:
        isDefault:
          type: boolean
          description: Whether version will be chosen by the server if a metastore service is created with a HiveMetastoreConfig that omits the version.
        version:
          description: The semantic version of the Hive Metastore software.
          type: string
    KerberosConfig:
      properties:
        keytab:
          description: A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
          $ref: '#/components/schemas/Secret'
        principal:
          type: string
          description: A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.
        krb5ConfigGcsUri:
          description: A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
          type: string
      description: Configuration information for a Kerberos principal.
      type: object
      id: KerberosConfig
    MetadataExport:
      id: MetadataExport
      type: object
      description: The details of a metadata export operation.
      properties:
        destinationGcsUri:
          readOnly: true
          type: string
          description: Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.
        databaseDumpType:
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
          description: Output only. The type of the database dump.
          readOnly: true
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
        state:
          type: string
          enumDescriptions:
            - The state of the metadata export is unknown.
            - The metadata export is running.
            - The metadata export completed successfully.
            - The metadata export failed.
            - The metadata export is cancelled.
          readOnly: true
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
          description: Output only. The current state of the export.
        endTime:
          readOnly: true
          description: Output only. The time when the export ended.
          type: string
          format: google-datetime
        startTime:
          description: Output only. The time when the export started.
          type: string
          readOnly: true
          format: google-datetime
    TestIamPermissionsRequest:
      type: object
      properties:
        permissions:
          description: The set of permissions to check for the resource. Permissions with wildcards (such as * or storage.*) are not allowed. For more information see IAM Overview (https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
      id: TestIamPermissionsRequest
      description: Request message for TestIamPermissions method.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
        updateMask:
          type: string
          format: google-fieldmask
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:paths: "bindings, etag"'
      description: Request message for SetIamPolicy method.
    ListBackupsResponse:
      id: ListBackupsResponse
      properties:
        nextPageToken:
          description: A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        backups:
          description: The backups of the specified service.
          items:
            $ref: '#/components/schemas/Backup'
          type: array
        unreachable:
          description: Locations that could not be reached.
          items:
            type: string
          type: array
      type: object
      description: Response message for DataprocMetastore.ListBackups.
    ListOperationsResponse:
      properties:
        operations:
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        nextPageToken:
          type: string
          description: The standard List next-page token.
      description: The response message for Operations.ListOperations.
      type: object
      id: ListOperationsResponse
    Policy:
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.A Policy is a collection of bindings. A binding binds one or more members, or principals, to a single role. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A role is a named list of permissions; each role can be an IAM predefined role or a user-created custom role.For some types of Google Cloud resources, a binding can also specify a condition, which is a logical expression that allows access to a resource only if the expression evaluates to true. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).JSON example: { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } YAML example: bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the IAM documentation (https://cloud.google.com/iam/docs/).'
      type: object
      id: Policy
      properties:
        auditConfigs:
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
          description: Specifies cloud audit logging configuration for this policy.
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
          description: Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
        etag:
          description: 'etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.'
          format: byte
          type: string
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).'
    MetadataManagementActivity:
      description: The metadata management activities of the metastore service.
      properties:
        restores:
          type: array
          items:
            $ref: '#/components/schemas/Restore'
          description: Output only. The latest restores of the metastore service.
          readOnly: true
        metadataExports:
          items:
            $ref: '#/components/schemas/MetadataExport'
          description: Output only. The latest metadata exports of the metastore service.
          type: array
          readOnly: true
      type: object
      id: MetadataManagementActivity
    Operation:
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        metadata:
          type: object
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        name:
          type: string
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
        done:
          type: boolean
          description: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      type: object
    NetworkConfig:
      id: NetworkConfig
      description: Network configuration for the Dataproc Metastore service.
      properties:
        consumers:
          type: array
          items:
            $ref: '#/components/schemas/Consumer'
          description: Immutable. The consumer-side network configuration for the Dataproc Metastore instance.
      type: object
    Location:
      description: A resource that represents Google Cloud Platform location.
      id: Location
      properties:
        displayName:
          description: The friendly name for this location, typically a nearby city name. For example, "Tokyo".
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} '
        locationId:
          description: 'The canonical id for this location. For example: "us-east1".'
          type: string
        metadata:
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"'
      type: object
    Restore:
      id: Restore
      type: object
      description: The details of a metadata restore operation.
      properties:
        type:
          description: Output only. The type of restore.
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          type: string
          readOnly: true
        state:
          description: Output only. The current state of the restore.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - CANCELLED
          enumDescriptions:
            - The state of the metadata restore is unknown.
            - The metadata restore is running.
            - The metadata restore completed successfully.
            - The metadata restore failed.
            - The metadata restore is cancelled.
          type: string
          readOnly: true
        startTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. The time when the restore started.
        backup:
          description: Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
          readOnly: true
          type: string
        details:
          description: Output only. The restore details containing the revision of the service to be restored to, in format of JSON.
          type: string
          readOnly: true
        endTime:
          type: string
          format: google-datetime
          description: Output only. The time when the restore ended.
          readOnly: true
    Status:
      properties:
        code:
          format: int32
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
        details:
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
      description: 'The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).'
      type: object
      id: Status
    Federation:
      type: object
      id: Federation
      properties:
        version:
          description: Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
          type: string
        updateTime:
          type: string
          readOnly: true
          description: Output only. The time when the metastore federation was last updated.
          format: google-datetime
        state:
          enumDescriptions:
            - The state of the metastore federation is unknown.
            - The metastore federation is in the process of being created.
            - The metastore federation is running and ready to serve queries.
            - The metastore federation is being updated. It remains usable but cannot accept additional update requests or be deleted at this time.
            - The metastore federation is undergoing deletion. It cannot be used.
            - The metastore federation has encountered an error and cannot be used. The metastore federation should be deleted.
          description: Output only. The current state of the federation.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - ERROR
          readOnly: true
        stateMessage:
          type: string
          description: Output only. Additional information about the current state of the metastore federation, if available.
          readOnly: true
        backendMetastores:
          additionalProperties:
            $ref: '#/components/schemas/BackendMetastore'
          description: A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
          type: object
        labels:
          type: object
          additionalProperties:
            type: string
          description: User-defined labels for the metastore federation.
        name:
          description: 'Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.'
          type: string
        createTime:
          type: string
          readOnly: true
          description: Output only. The time when the metastore federation was created.
          format: google-datetime
        uid:
          readOnly: true
          description: Output only. The globally unique resource identifier of the metastore federation.
          type: string
        endpointUri:
          description: Output only. The federation endpoint.
          readOnly: true
          type: string
      description: Represents a federation of multiple backend metastores.
    OperationMetadata:
      properties:
        statusMessage:
          type: string
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
        requestedCancellation:
          readOnly: true
          type: boolean
          description: Output only. Identifies whether the caller has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
        target:
          description: Output only. Server-defined resource path for the target of the operation.
          type: string
          readOnly: true
        createTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The time the operation was created.
        apiVersion:
          readOnly: true
          type: string
          description: Output only. API version used to start the operation.
        endTime:
          description: Output only. The time the operation finished running.
          format: google-datetime
          readOnly: true
          type: string
        verb:
          type: string
          readOnly: true
          description: Output only. Name of the verb executed by the operation.
      id: OperationMetadata
      description: Represents the metadata of a long-running operation.
      type: object
    Secret:
      description: A securely stored value.
      type: object
      properties:
        cloudSecret:
          description: The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.
          type: string
      id: Secret
    BackendMetastore:
      type: object
      id: BackendMetastore
      description: Represents a backend metastore for the federation.
      properties:
        name:
          type: string
          description: 'The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex projects/{project_id}/locations/{location}/lakes/{lake_id} BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}'
        metastoreType:
          type: string
          enum:
            - METASTORE_TYPE_UNSPECIFIED
            - DATAPROC_METASTORE
          description: The type of the backend metastore.
          enumDescriptions:
            - The metastore type is not set.
            - The backend metastore is Dataproc Metastore.
    MetadataImport:
      description: A metastore resource that imports metadata.
      properties:
        createTime:
          format: google-datetime
          description: Output only. The time when the metadata import was started.
          readOnly: true
          type: string
        endTime:
          readOnly: true
          description: Output only. The time when the metadata import finished.
          type: string
          format: google-datetime
        state:
          readOnly: true
          type: string
          description: Output only. The current state of the metadata import.
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - UPDATING
            - FAILED
          enumDescriptions:
            - The state of the metadata import is unknown.
            - The metadata import is running.
            - The metadata import completed successfully.
            - The metadata import is being updated.
            - The metadata import failed, and attempted metadata changes were rolled back.
        name:
          type: string
          description: Immutable. The relative resource name of the metadata import, of the form:projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{metadata_import_id}.
        updateTime:
          description: Output only. The time when the metadata import was last updated.
          readOnly: true
          format: google-datetime
          type: string
        description:
          description: The description of the metadata import.
          type: string
        databaseDump:
          description: Immutable. A database dump from a pre-existing metastore's database.
          $ref: '#/components/schemas/DatabaseDump'
      id: MetadataImport
      type: object
    RestoreServiceRequest:
      description: Request message for DataprocMetastore.Restore.
      properties:
        restoreType:
          type: string
          enumDescriptions:
            - The restore type is unknown.
            - The service's metadata and configuration are restored.
            - Only the service's metadata is restored.
          description: Optional. The type of restore. If unspecified, defaults to METADATA_ONLY.
          enum:
            - RESTORE_TYPE_UNSPECIFIED
            - FULL
            - METADATA_ONLY
        backup:
          description: Required. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.
          type: string
        requestId:
          type: string
          description: Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
      id: RestoreServiceRequest
      type: object
    HiveMetastoreConfig:
      type: object
      id: HiveMetastoreConfig
      description: Specifies configuration information specific to running Hive metastore software as the metastore service.
      properties:
        version:
          type: string
          description: Immutable. The Hive metastore schema version.
        configOverrides:
          type: object
          additionalProperties:
            type: string
          description: A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.
        kerberosConfig:
          $ref: '#/components/schemas/KerberosConfig'
          description: Information used to configure the Hive metastore service as a service principal in a Kerberos realm. To disable Kerberos, use the UpdateService method and specify this field's path (hive_metastore_config.kerberos_config) in the request's update_mask while omitting this field from the request's service.
    Binding:
      description: Associates members, or principals, with a role.
      properties:
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com.'
        condition:
          description: The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
        role:
          type: string
          description: Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.
      id: Binding
      type: object
    AuditLogConfig:
      id: AuditLogConfig
      type: object
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      properties:
        logType:
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          type: string
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          description: The log type that this config enables.
        exemptedMembers:
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    DatabaseDump:
      id: DatabaseDump
      type: object
      properties:
        sourceDatabase:
          description: The name of the source database.
          type: string
        databaseType:
          enumDescriptions:
            - The type of the source database is unknown.
            - The type of the source database is MySQL.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
          type: string
          description: The type of the database.
        gcsUri:
          description: A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
          type: string
        type:
          description: Optional. The type of the database dump. If unspecified, defaults to MYSQL.
          type: string
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
      description: A specification of the location of and metadata about a database dump from a relational database management system.
    Service:
      description: A managed metastore service that serves metadata queries.
      id: Service
      type: object
      properties:
        stateMessage:
          type: string
          readOnly: true
          description: Output only. Additional information about the current state of the metastore service, if available.
        maintenanceWindow:
          description: The one hour maintenance window of the metastore service. This specifies when the service can be restarted for maintenance purposes in UTC time. Maintenance window is not needed for services with the SPANNER database type.
          $ref: '#/components/schemas/MaintenanceWindow'
        tier:
          description: The tier of the service.
          type: string
          enumDescriptions:
            - The tier is not set.
            - The developer tier provides limited scalability and no fault tolerance. Good for low-cost proof-of-concept.
            - The enterprise tier provides multi-zone high availability, and sufficient scalability for enterprise-level Dataproc Metastore workloads.
          enum:
            - TIER_UNSPECIFIED
            - DEVELOPER
            - ENTERPRISE
        encryptionConfig:
          $ref: '#/components/schemas/EncryptionConfig'
          description: Immutable. Information used to configure the Dataproc Metastore service to encrypt customer data at rest. Cannot be updated.
        endpointUri:
          description: Output only. The URI of the endpoint used to access the metastore service.
          type: string
          readOnly: true
        metadataManagementActivity:
          description: Output only. The metadata management activities of the metastore service.
          readOnly: true
          $ref: '#/components/schemas/MetadataManagementActivity'
        name:
          type: string
          description: Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.
        updateTime:
          format: google-datetime
          description: Output only. The time when the metastore service was last updated.
          readOnly: true
          type: string
        releaseChannel:
          type: string
          description: Immutable. The release channel of the service. If unspecified, defaults to STABLE.
          enumDescriptions:
            - Release channel is not specified.
            - The CANARY release channel contains the newest features, which may be unstable and subject to unresolved issues with no known workarounds. Services using the CANARY release channel are not subject to any SLAs.
            - The STABLE release channel contains features that are considered stable and have been validated for production use.
          enum:
            - RELEASE_CHANNEL_UNSPECIFIED
            - CANARY
            - STABLE
        uid:
          readOnly: true
          type: string
          description: Output only. The globally unique resource identifier of the metastore service.
        databaseType:
          description: Immutable. The database type that the Metastore service stores its data.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - MYSQL
            - SPANNER
          type: string
          enumDescriptions:
            - The DATABASE_TYPE is not set.
            - MySQL is used to persist the metastore data.
            - Spanner is used to persist the metastore data.
        state:
          readOnly: true
          enumDescriptions:
            - The state of the metastore service is unknown.
            - The metastore service is in the process of being created.
            - The metastore service is running and ready to serve queries.
            - The metastore service is entering suspension. Its query-serving availability may cease unexpectedly.
            - The metastore service is suspended and unable to serve queries.
            - The metastore service is being updated. It remains usable but cannot accept additional update requests or be deleted at this time.
            - The metastore service is undergoing deletion. It cannot be used.
            - The metastore service has encountered an error and cannot be used. The metastore service should be deleted.
          description: Output only. The current state of the metastore service.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - UPDATING
            - DELETING
            - ERROR
          type: string
        hiveMetastoreConfig:
          $ref: '#/components/schemas/HiveMetastoreConfig'
          description: Configuration information specific to running Hive metastore software as the metastore service.
        labels:
          description: User-defined labels for the metastore service.
          additionalProperties:
            type: string
          type: object
        networkConfig:
          description: The configuration specifying the network settings for the Dataproc Metastore service.
          $ref: '#/components/schemas/NetworkConfig'
        telemetryConfig:
          description: The configuration specifying telemetry settings for the Dataproc Metastore service. If unspecified defaults to JSON.
          $ref: '#/components/schemas/TelemetryConfig'
        network:
          description: Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.
          type: string
        artifactGcsUri:
          type: string
          readOnly: true
          description: Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
        createTime:
          description: Output only. The time when the metastore service was created.
          type: string
          readOnly: true
          format: google-datetime
        port:
          type: integer
          format: int32
          description: 'The TCP port at which the metastore service is reached. Default: 9083.'
    ListServicesResponse:
      properties:
        services:
          description: The services in the specified location.
          type: array
          items:
            $ref: '#/components/schemas/Service'
        nextPageToken:
          type: string
          description: A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
        unreachable:
          items:
            type: string
          description: Locations that could not be reached.
          type: array
      type: object
      description: Response message for DataprocMetastore.ListServices.
      id: ListServicesResponse
    LocationMetadata:
      id: LocationMetadata
      type: object
      properties:
        supportedHiveMetastoreVersions:
          description: The versions of Hive Metastore that can be used when creating a new metastore service in this location. The server guarantees that exactly one HiveMetastoreVersion in the list will set is_default.
          items:
            $ref: '#/components/schemas/HiveMetastoreVersion'
          type: array
      description: Metadata about the service in a location.
    ExportMetadataRequest:
      type: object
      id: ExportMetadataRequest
      properties:
        databaseDumpType:
          enumDescriptions:
            - The type of the database dump is unknown.
            - Database dump is a MySQL dump file.
            - Database dump contains Avro files.
          description: Optional. The type of the database dump. If unspecified, defaults to MYSQL.
          enum:
            - TYPE_UNSPECIFIED
            - MYSQL
            - AVRO
          type: string
        destinationGcsFolder:
          type: string
          description: A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing exported files will be created below it.
        requestId:
          type: string
          description: Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format). A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
      description: Request message for DataprocMetastore.ExportMetadata.
    AuditConfig:
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs.If there are AuditConfigs for both allServices and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted.Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.'
      properties:
        auditLogConfigs:
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          description: The configuration for logging of each type of permission.
          type: array
        service:
          type: string
          description: Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.
      id: AuditConfig
      type: object
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      properties:
        nextPageToken:
          type: string
          description: The standard List next-page token.
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: A list of locations that matches the specified filter in the request.
      type: object
    Consumer:
      properties:
        endpointUri:
          description: Output only. The URI of the endpoint used to access the metastore service.
          type: string
          readOnly: true
        subnetwork:
          type: string
          description: Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}
      id: Consumer
      description: Contains information of the customer's network configurations.
      type: object
    EncryptionConfig:
      id: EncryptionConfig
      type: object
      description: Encryption settings for the service.
      properties:
        kmsKey:
          type: string
          description: The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.
    Backup:
      type: object
      description: The details of a backup resource.
      properties:
        state:
          enumDescriptions:
            - The state of the backup is unknown.
            - The backup is being created.
            - The backup is being deleted.
            - The backup is active and ready to use.
            - The backup failed.
            - The backup is being restored.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - DELETING
            - ACTIVE
            - FAILED
            - RESTORING
          readOnly: true
          type: string
          description: Output only. The current state of the backup.
        name:
          type: string
          description: Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}
        endTime:
          format: google-datetime
          description: Output only. The time when the backup finished creating.
          type: string
          readOnly: true
        serviceRevision:
          readOnly: true
          description: Output only. The revision of the service at the time of backup.
          $ref: '#/components/schemas/Service'
        description:
          description: The description of the backup.
          type: string
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The time when the backup was started.
        restoringServices:
          items:
            type: string
          readOnly: true
          description: Output only. Services that are restoring from the backup.
          type: array
      id: Backup
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      properties:
        permissions:
          items:
            type: string
          type: array
          description: A subset of TestPermissionsRequest.permissions that the caller is allowed.
      type: object
      description: Response message for TestIamPermissions method.
    Empty:
      properties: {}
      id: Empty
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } '
    ListMetadataImportsResponse:
      properties:
        nextPageToken:
          type: string
          description: A token that can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
        metadataImports:
          description: The imports in the specified service.
          items:
            $ref: '#/components/schemas/MetadataImport'
          type: array
        unreachable:
          items:
            type: string
          description: Locations that could not be reached.
          type: array
      description: Response message for DataprocMetastore.ListMetadataImports.
      id: ListMetadataImportsResponse
      type: object
    MaintenanceWindow:
      type: object
      description: Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.
      properties:
        dayOfWeek:
          type: string
          enum:
            - DAY_OF_WEEK_UNSPECIFIED
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
          enumDescriptions:
            - The day of the week is unspecified.
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          description: The day of week, when the window starts.
        hourOfDay:
          format: int32
          type: integer
          description: The hour of day (0-23) when the window starts.
      id: MaintenanceWindow
    TelemetryConfig:
      id: TelemetryConfig
      properties:
        logFormat:
          type: string
          enum:
            - LOG_FORMAT_UNSPECIFIED
            - LEGACY
            - JSON
          enumDescriptions:
            - The LOG_FORMAT is not set.
            - Logging output uses the legacy textPayload format.
            - Logging output uses the jsonPayload format.
          description: The output format of the Dataproc Metastore service's logs.
      type: object
      description: Telemetry Configuration for the Dataproc Metastore service.
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    operations:
      id: google.metastore.operations
      name: operations
      title: Operations
      methods:
        cancel:
          operation:
            $ref: '#/paths/~1v1~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
    federations:
      id: google.metastore.federations
      name: federations
      title: Federations
      methods:
        projects_locations_federations_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/federations/methods/projects_locations_federations_get'
          - $ref: '#/components/x-stackQL-resources/federations/methods/projects_locations_federations_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/federations/methods/projects_locations_federations_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/federations/methods/projects_locations_federations_delete'
    federations_iam_policies:
      id: google.metastore.federations_iam_policies
      name: federations_iam_policies
      title: Federations_iam_policies
      methods:
        projects_locations_federations_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_federations_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/federations_iam_policies/methods/projects_locations_federations_getIamPolicy'
        insert: []
        update: []
        delete: []
    services:
      id: google.metastore.services
      name: services
      title: Services
      methods:
        projects_locations_services_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_restore:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_exportMetadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:exportMetadata/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services/methods/projects_locations_services_get'
          - $ref: '#/components/x-stackQL-resources/services/methods/projects_locations_services_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/projects_locations_services_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/projects_locations_services_delete'
    services_iam_policies:
      id: google.metastore.services_iam_policies
      name: services_iam_policies
      title: Services_iam_policies
      methods:
        projects_locations_services_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services_iam_policies/methods/projects_locations_services_getIamPolicy'
        insert: []
        update: []
        delete: []
    metadata_imports:
      id: google.metastore.metadata_imports
      name: metadata_imports
      title: Metadata_imports
      methods:
        projects_locations_services_metadataImports_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_metadataImports_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_metadataImports_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_metadataImports_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1metadataImports~1{metadataImportsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/projects_locations_services_metadataImports_get'
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/projects_locations_services_metadataImports_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/metadata_imports/methods/projects_locations_services_metadataImports_create'
        update: []
        delete: []
    backups_iam_policies:
      id: google.metastore.backups_iam_policies
      name: backups_iam_policies
      title: Backups_iam_policies
      methods:
        projects_locations_services_backups_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_backups_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups_iam_policies/methods/projects_locations_services_backups_getIamPolicy'
        insert: []
        update: []
        delete: []
    backups:
      id: google.metastore.backups
      name: backups
      title: Backups
      methods:
        projects_locations_services_backups_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_backups_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_backups_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_services_backups_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups/methods/projects_locations_services_backups_get'
          - $ref: '#/components/x-stackQL-resources/backups/methods/projects_locations_services_backups_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/backups/methods/projects_locations_services_backups_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/backups/methods/projects_locations_services_backups_delete'
    locations:
      id: google.metastore.locations
      name: locations
      title: Locations
      methods:
        projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: locations
        projects_locations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_list'
        insert: []
        update: []
        delete: []
    federations_iam_bindings:
      id: google.metastore.federations_iam_bindings
      name: federations_iam_bindings
      title: federations_iam_bindings
      methods:
        projects_locations_federations_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/federations_iam_bindings/methods/projects_locations_federations_getIamPolicy'
    federations_iam_audit_configs:
      id: google.metastore.federations_iam_audit_configs
      name: federations_iam_audit_configs
      title: federations_iam_audit_configs
      methods:
        projects_locations_federations_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1federations~1{federationsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: auditConfigs
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/federations_iam_audit_configs/methods/projects_locations_federations_getIamPolicy'
    services_iam_bindings:
      id: google.metastore.services_iam_bindings
      name: services_iam_bindings
      title: services_iam_bindings
      methods:
        projects_locations_services_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/services_iam_bindings/methods/projects_locations_services_getIamPolicy'
    services_iam_audit_configs:
      id: google.metastore.services_iam_audit_configs
      name: services_iam_audit_configs
      title: services_iam_audit_configs
      methods:
        projects_locations_services_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: auditConfigs
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/services_iam_audit_configs/methods/projects_locations_services_getIamPolicy'
    backups_iam_bindings:
      id: google.metastore.backups_iam_bindings
      name: backups_iam_bindings
      title: backups_iam_bindings
      methods:
        projects_locations_services_backups_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/backups_iam_bindings/methods/projects_locations_services_backups_getIamPolicy'
    backups_iam_audit_configs:
      id: google.metastore.backups_iam_audit_configs
      name: backups_iam_audit_configs
      title: backups_iam_audit_configs
      methods:
        projects_locations_services_backups_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1{servicesId}~1backups~1{backupsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: auditConfigs
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/backups_iam_audit_configs/methods/projects_locations_services_backups_getIamPolicy'
paths:
  /v1/operations/{operationsId}:cancel:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
      operationId: metastore.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/federations:
    parameters: *ref_1
    post:
      description: Creates a metastore federation in a project and location.
      operationId: metastore.projects.locations.federations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: federationId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-verb: insert
    get:
      description: Lists federations in a project and location.
      operationId: metastore.projects.locations.federations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFederationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: metastore.projects.locations.federations.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.federations.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: federations_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.federations.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/federations/{federationsId}:
    parameters: *ref_1
    patch:
      description: Updates the fields of a federation.
      operationId: metastore.projects.locations.federations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Federation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-verb: exec
    get:
      description: Gets the details of a single federation.
      operationId: metastore.projects.locations.federations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Federation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-verb: select
    delete:
      description: Deletes a single federation.
      operationId: metastore.projects.locations.federations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: federationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: federations
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/services:
    parameters: *ref_1
    post:
      description: Creates a metastore service in a project and location.
      operationId: metastore.projects.locations.services.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: serviceId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: insert
    get:
      description: Lists services in a project and location.
      operationId: metastore.projects.locations.services.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServicesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:
    parameters: *ref_1
    get:
      description: Gets the details of a single service.
      operationId: metastore.projects.locations.services.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: select
    patch:
      description: Updates the parameters of a single service.
      operationId: metastore.projects.locations.services.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: exec
    delete:
      description: Deletes a single service.
      operationId: metastore.projects.locations.services.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:restore:
    parameters: *ref_1
    post:
      description: Restores a service from a backup.
      operationId: metastore.projects.locations.services.restore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreServiceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:exportMetadata:
    parameters: *ref_1
    post:
      description: Exports metadata from a service.
      operationId: metastore.projects.locations.services.exportMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMetadataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: metastore.projects.locations.services.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
      x-stackQL-resource: services_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports:
    parameters: *ref_1
    get:
      description: Lists imports in a service.
      operationId: metastore.projects.locations.services.metadataImports.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetadataImportsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-verb: select
    post:
      description: Creates a new MetadataImport in a given project and location.
      operationId: metastore.projects.locations.services.metadataImports.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: metadataImportId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports/{metadataImportsId}:
    parameters: *ref_1
    patch:
      description: Updates a single import. Only the description field of MetadataImport is supported to be updated.
      operationId: metastore.projects.locations.services.metadataImports.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataImport'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-verb: exec
    get:
      description: Gets details of a single import.
      operationId: metastore.projects.locations.services.metadataImports.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataImport'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: metadataImportsId
          required: true
          schema:
            type: string
      x-stackQL-resource: metadata_imports
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
      operationId: metastore.projects.locations.services.backups.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single backup.
      operationId: metastore.projects.locations.services.backups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-verb: select
    delete:
      description: Deletes a single backup.
      operationId: metastore.projects.locations.services.backups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: metastore.projects.locations.services.backups.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: backups_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups:
    parameters: *ref_1
    get:
      description: Lists backups in a service.
      operationId: metastore.projects.locations.services.backups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-verb: select
    post:
      description: Creates a new backup in a given project and location.
      operationId: metastore.projects.locations.services.backups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Backup'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: servicesId
          required: true
          schema:
            type: string
        - in: query
          name: backupId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as "/v1/{name=users/*}/operations" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: metastore.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
      operationId: metastore.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: metastore.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: metastore.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: metastore.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
