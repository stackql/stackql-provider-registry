openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Artifact Registry API
  description: Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
  version: v1
  x-discovery-doc-revision: '20230809'
  x-generated-date: '2023-08-17'
externalDocs:
  url: 'https://cloud.google.com/artifacts/docs/'
servers:
  - url: 'https://artifactregistry.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform.read-only': View your data across Google Cloud services and see the email address of your Google Account
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    UploadGoModuleMetadata:
      type: object
      description: The operation metadata for uploading go modules.
      id: UploadGoModuleMetadata
      properties: {}
    ImportGoogetArtifactsRequest:
      description: The request to import new googet artifacts.
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
      type: object
      id: ImportGoogetArtifactsRequest
    Operation:
      type: object
      id: Operation
      properties:
        response:
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
        metadata:
          type: object
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
      description: This resource represents a long-running operation that is the result of a network API call.
    VPCSCConfig:
      properties:
        vpcscPolicy:
          description: The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).
          enumDescriptions:
            - VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined. When VPS SC policy is not defined - the Service will use the default behavior (VPCSC_DENY).
            - VPCSC_DENY - repository will block the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.
            - VPCSC_ALLOW - repository will allow the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.
          enum:
            - VPCSC_POLICY_UNSPECIFIED
            - DENY
            - ALLOW
          type: string
        name:
          type: string
          description: 'The name of the project''s VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set'
      type: object
      description: The Artifact Registry VPC SC config that apply to a Project.
      id: VPCSCConfig
    UploadYumArtifactMediaResponse:
      id: UploadYumArtifactMediaResponse
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      type: object
      description: The response to upload an artifact.
    NpmPackage:
      description: NpmPackage represents an npm artifact.
      id: NpmPackage
      type: object
      properties:
        tags:
          items:
            type: string
          type: array
          description: Tags attached to this package.
        packageName:
          description: Package for the artifact.
          type: string
        version:
          type: string
          description: Version of this package.
        updateTime:
          type: string
          description: Output only. Time the package was updated.
          format: google-datetime
          readOnly: true
        createTime:
          readOnly: true
          type: string
          description: Output only. Time the package was created.
          format: google-datetime
        name:
          description: 'Required. registry_location, project_id, repository_name and npm_package forms a unique package For example, "projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/ npm_test:1.0.0", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and npm_test:1.0.0" is the npm package.'
          type: string
    OperationMetadata:
      properties: {}
      description: 'Metadata type for longrunning-operations, currently empty.'
      id: OperationMetadata
      type: object
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository:
      properties:
        repositoryBase:
          description: A common public repository base for Apt.
          enumDescriptions:
            - Unspecified repository base.
            - Debian.
            - Ubuntu LTS/Pro.
          type: string
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - DEBIAN
            - UBUNTU
        repositoryPath:
          description: A custom field to define a path to a specific repository from the base.
          type: string
      description: Publicly available Apt repositories constructed from a common repository base and a custom repository path.
      type: object
      id: GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository
    UploadAptArtifactResponse:
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
      properties:
        aptArtifacts:
          items:
            $ref: '#/components/schemas/AptArtifact'
          type: array
          description: The Apt artifacts updated.
      type: object
      id: UploadAptArtifactResponse
    ImportAptArtifactsMetadata:
      properties: {}
      description: The operation metadata for importing artifacts.
      type: object
      id: ImportAptArtifactsMetadata
    ListFilesResponse:
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of files, or empty if there are no more files to return.'
        files:
          description: The files returned.
          type: array
          items:
            $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
      type: object
      id: ListFilesResponse
      description: The response from listing files.
    ImportGoogetArtifactsGcsSource:
      id: ImportGoogetArtifactsGcsSource
      properties:
        uris:
          description: 'Cloud Storage paths URI (e.g., `gs://my_bucket/my_object`).'
          type: array
          items:
            type: string
        useWildcards:
          type: boolean
          description: Supports URI wildcards for matching multiple objects from a single URI.
      description: Google Cloud Storage location where the artifacts currently reside.
      type: object
    UploadGoogetArtifactRequest:
      properties: {}
      type: object
      id: UploadGoogetArtifactRequest
      description: The request to upload an artifact.
    CleanupPolicyCondition:
      description: 'CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.'
      id: CleanupPolicyCondition
      type: object
      properties:
        packageNamePrefixes:
          type: array
          description: Match versions by package prefix. Applied on any prefix match.
          items:
            type: string
        olderThan:
          description: Match versions older than a duration.
          format: google-duration
          type: string
        versionAge:
          deprecated: true
          type: string
          format: google-duration
          description: 'DEPRECATED: Use older_than.'
        tagState:
          type: string
          enum:
            - TAG_STATE_UNSPECIFIED
            - TAGGED
            - UNTAGGED
            - ANY
          enumDescriptions:
            - Tag status not specified.
            - Applies to tagged versions only.
            - Applies to untagged versions only.
            - Applies to all versions.
          description: Match versions by tag status.
        newerThan:
          description: Match versions newer than a duration.
          format: google-duration
          type: string
        versionNamePrefixes:
          type: array
          description: Match versions by version name prefix. Applied on any prefix match.
          items:
            type: string
        tagPrefixes:
          description: Match versions by tag prefix. Applied on any prefix match.
          items:
            type: string
          type: array
    ImportAptArtifactsErrorInfo:
      description: Error information explaining why a package was not imported.
      type: object
      properties:
        error:
          description: The detailed error status.
          $ref: '#/components/schemas/Status'
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
      id: ImportAptArtifactsErrorInfo
    PythonPackage:
      id: PythonPackage
      properties:
        name:
          description: 'Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, "projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and python_package:1.0.0" is the python package.'
          type: string
        updateTime:
          format: google-datetime
          description: Output only. Time the package was updated.
          readOnly: true
          type: string
        packageName:
          description: Package for the artifact.
          type: string
        uri:
          type: string
          description: 'Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz'
        createTime:
          readOnly: true
          description: Output only. Time the package was created.
          format: google-datetime
          type: string
        version:
          description: Version of this package.
          type: string
      type: object
      description: PythonPackage represents a python artifact.
    ImportYumArtifactsErrorInfo:
      properties:
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
        error:
          $ref: '#/components/schemas/Status'
          description: The detailed error status.
      description: Error information explaining why a package was not imported.
      type: object
      id: ImportYumArtifactsErrorInfo
    Hash:
      id: Hash
      type: object
      properties:
        type:
          enum:
            - HASH_TYPE_UNSPECIFIED
            - SHA256
            - MD5
          enumDescriptions:
            - Unspecified.
            - SHA256 hash.
            - MD5 hash.
          type: string
          description: The algorithm used to compute the hash value.
        value:
          format: byte
          type: string
          description: The hash value.
      description: A hash of file content.
    BatchDeleteVersionsMetadata:
      properties:
        failedVersions:
          type: array
          items:
            type: string
          description: The versions the operation failed to delete.
      description: The metadata of an LRO from deleting multiple versions.
      type: object
      id: BatchDeleteVersionsMetadata
    VirtualRepositoryConfig:
      description: Virtual repository configuration.
      properties:
        upstreamPolicies:
          items:
            $ref: '#/components/schemas/UpstreamPolicy'
          description: Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
          type: array
      id: VirtualRepositoryConfig
      type: object
    RemoteRepositoryConfig:
      type: object
      id: RemoteRepositoryConfig
      description: Remote repository configuration.
      properties:
        npmRepository:
          $ref: '#/components/schemas/NpmRepository'
          description: Specific settings for an Npm remote repository.
        aptRepository:
          description: Specific settings for an Apt remote repository.
          $ref: '#/components/schemas/AptRepository'
        dockerRepository:
          $ref: '#/components/schemas/DockerRepository'
          description: Specific settings for a Docker remote repository.
        yumRepository:
          description: Specific settings for a Yum remote repository.
          $ref: '#/components/schemas/YumRepository'
        mavenRepository:
          $ref: '#/components/schemas/MavenRepository'
          description: Specific settings for a Maven remote repository.
        pythonRepository:
          description: Specific settings for a Python remote repository.
          $ref: '#/components/schemas/PythonRepository'
        description:
          description: The description of the remote source.
          type: string
    Version:
      id: Version
      type: object
      properties:
        name:
          description: 'The name of the version, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1". If the package or version ID parts contain slashes, the slashes are escaped.'
          type: string
        updateTime:
          type: string
          description: The time when the version was last updated.
          format: google-datetime
        metadata:
          type: object
          readOnly: true
          description: 'Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact'
          additionalProperties:
            description: Properties of the object.
            type: any
        description:
          description: 'Optional. Description of the version, as specified in its metadata.'
          type: string
        relatedTags:
          description: Output only. A list of related tags. Will contain up to 100 tags that reference this version.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        createTime:
          type: string
          format: google-datetime
          description: The time when the version was created.
      description: 'The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.'
    UploadYumArtifactResponse:
      properties:
        yumArtifacts:
          items:
            $ref: '#/components/schemas/YumArtifact'
          description: The Apt artifacts updated.
          type: array
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
      type: object
      id: UploadYumArtifactResponse
    MavenArtifact:
      description: MavenArtifact represents a maven artifact.
      type: object
      properties:
        artifactId:
          description: Artifact ID for the artifact.
          type: string
        groupId:
          type: string
          description: 'Group ID for the artifact. Example: com.google.guava'
        createTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Time the artifact was created.
        pomUri:
          type: string
          description: 'Required. URL to access the pom file of the artifact. Example: us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom'
        name:
          type: string
          description: 'Required. registry_location, project_id, repository_name and maven_artifact forms a unique artifact For example, "projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/ com.google.guava:guava:31.0-jre", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "com.google.guava:guava:31.0-jre" is the maven artifact.'
        version:
          description: Version of this artifact.
          type: string
        updateTime:
          type: string
          description: Output only. Time the artifact was updated.
          readOnly: true
          format: google-datetime
      id: MavenArtifact
    ListPythonPackagesResponse:
      properties:
        pythonPackages:
          description: The python packages returned.
          type: array
          items:
            $ref: '#/components/schemas/PythonPackage'
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
      type: object
      id: ListPythonPackagesResponse
      description: The response from listing python packages.
    UploadAptArtifactMetadata:
      type: object
      id: UploadAptArtifactMetadata
      description: The operation metadata for uploading artifacts.
      properties: {}
    KfpArtifact:
      description: A detailed representation of a KFP artifact.
      id: KfpArtifact
      properties:
        version:
          type: string
          description: The version associated with the KFP artifact. Must follow the Semantic Versioning standard.
        name:
          description: 'Output only. Resource name of the KFP artifact. Since users don''t directly interact with this resource, the name will be derived from the associated version. For example, when version = ".../versions/sha256:abcdef...", the name will be ".../kfpArtifacts/sha256:abcdef...".'
          type: string
          readOnly: true
      type: object
    UploadGoogetArtifactResponse:
      type: object
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
      properties:
        googetArtifacts:
          type: array
          description: The GooGet artifacts updated.
          items:
            $ref: '#/components/schemas/GoogetArtifact'
      id: UploadGoogetArtifactResponse
    CleanupPolicy:
      id: CleanupPolicy
      properties:
        mostRecentVersions:
          description: Policy condition for retaining a minimum number of versions. May only be specified with a Keep action.
          $ref: '#/components/schemas/CleanupPolicyMostRecentVersions'
        condition:
          $ref: '#/components/schemas/CleanupPolicyCondition'
          description: Policy condition for matching versions.
        action:
          enumDescriptions:
            - Action not specified.
            - Delete action.
            - Keep action.
          enum:
            - ACTION_UNSPECIFIED
            - DELETE
            - KEEP
          type: string
          description: Policy action.
        id:
          type: string
          description: The user-provided ID of the cleanup policy.
      description: Artifact policy configuration for repository cleanup policies.
      type: object
    Repository:
      description: A Repository for storing artifacts with a specific format.
      type: object
      properties:
        cleanupPolicies:
          description: Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
          additionalProperties:
            $ref: '#/components/schemas/CleanupPolicy'
          type: object
        kmsKeyName:
          description: 'The Cloud KMS resource name of the customer managed encryption key that''s used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.'
          type: string
        updateTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time when the repository was last updated.
        mode:
          enum:
            - MODE_UNSPECIFIED
            - STANDARD_REPOSITORY
            - VIRTUAL_REPOSITORY
            - REMOTE_REPOSITORY
          enumDescriptions:
            - Unspecified mode.
            - A standard repository storing artifacts.
            - A virtual repository to serve artifacts from one or more sources.
            - A remote repository to serve artifacts from a remote source.
          type: string
          description: The mode of the repository.
        createTime:
          type: string
          description: Output only. The time when the repository was created.
          format: google-datetime
          readOnly: true
        cleanupPolicyDryRun:
          type: boolean
          description: 'Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.'
        description:
          description: The user-provided description of the repository.
          type: string
        mavenConfig:
          $ref: '#/components/schemas/MavenRepositoryConfig'
          description: Maven repository config contains repository level configuration for the repositories of maven type.
        labels:
          additionalProperties:
            type: string
          description: 'Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.'
          type: object
        remoteRepositoryConfig:
          $ref: '#/components/schemas/RemoteRepositoryConfig'
          description: Configuration specific for a Remote Repository.
        format:
          description: The format of packages that are stored in the repository.
          type: string
          enumDescriptions:
            - Unspecified package format.
            - Docker package format.
            - Maven package format.
            - NPM package format.
            - APT package format.
            - YUM package format.
            - GooGet package format.
            - Python package format.
            - Kubeflow Pipelines package format.
            - Go package format.
          enum:
            - FORMAT_UNSPECIFIED
            - DOCKER
            - MAVEN
            - NPM
            - APT
            - YUM
            - GOOGET
            - PYTHON
            - KFP
            - GO
        dockerConfig:
          $ref: '#/components/schemas/DockerRepositoryConfig'
          description: Docker repository config contains repository level configuration for the repositories of docker type.
        sbomConfig:
          description: Optional. Config and state for sbom generation for resources within this Repository.
          $ref: '#/components/schemas/SbomConfig'
        sizeBytes:
          format: int64
          type: string
          readOnly: true
          description: 'Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.'
        virtualRepositoryConfig:
          description: Configuration specific for a Virtual Repository.
          $ref: '#/components/schemas/VirtualRepositoryConfig'
        satisfiesPzs:
          readOnly: true
          description: 'Output only. If set, the repository satisfies physical zone separation.'
          type: boolean
        name:
          description: 'The name of the repository, for example: "projects/p1/locations/us-central1/repositories/repo1".'
          type: string
      id: Repository
    Empty:
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
      type: object
    ImportYumArtifactsRequest:
      description: The request to import new yum artifacts.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
      id: ImportYumArtifactsRequest
    ProjectSettings:
      type: object
      properties:
        name:
          description: 'The name of the project''s settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set'
          type: string
        legacyRedirectionState:
          enum:
            - REDIRECTION_STATE_UNSPECIFIED
            - REDIRECTION_FROM_GCR_IO_DISABLED
            - REDIRECTION_FROM_GCR_IO_ENABLED
            - REDIRECTION_FROM_GCR_IO_FINALIZED
          type: string
          enumDescriptions:
            - No redirection status has been set.
            - Redirection is disabled.
            - Redirection is enabled.
            - 'Redirection is enabled, and has been finalized so cannot be reverted.'
          description: The redirection state of the legacy repositories in this project.
          enumDeprecated:
            - false
            - false
            - false
            - true
      description: The Artifact Registry settings that apply to a Project.
      id: ProjectSettings
    UploadGoogetArtifactMediaResponse:
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      type: object
      description: The response to upload an artifact.
      id: UploadGoogetArtifactMediaResponse
    ImportAptArtifactsGcsSource:
      id: ImportAptArtifactsGcsSource
      type: object
      description: Google Cloud Storage location where the artifacts currently reside.
      properties:
        useWildcards:
          type: boolean
          description: Supports URI wildcards for matching multiple objects from a single URI.
        uris:
          description: 'Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
          items:
            type: string
          type: array
    YumRepository:
      id: YumRepository
      properties:
        publicRepository:
          description: One of the publicly available Yum repositories supported by Artifact Registry.
          $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository'
      description: Configuration for a Yum remote repository.
      type: object
    ImportYumArtifactsMetadata:
      id: ImportYumArtifactsMetadata
      type: object
      properties: {}
      description: The operation metadata for importing artifacts.
    Expr:
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      type: object
      properties:
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        description:
          type: string
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
    AptArtifact:
      id: AptArtifact
      properties:
        packageType:
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
          readOnly: true
          enumDescriptions:
            - Package type is not specified.
            - Binary package.
            - Source package.
          type: string
          description: Output only. An artifact is a binary or source package.
        name:
          type: string
          description: Output only. The Artifact Registry resource name of the artifact.
          readOnly: true
        controlFile:
          format: byte
          description: Output only. Contents of the artifact's control metadata file.
          type: string
          readOnly: true
        architecture:
          type: string
          description: Output only. Operating system architecture of the artifact.
          readOnly: true
        packageName:
          description: Output only. The Apt package name of the artifact.
          readOnly: true
          type: string
        component:
          description: Output only. Repository component of the artifact.
          type: string
          readOnly: true
      description: 'A detailed representation of an Apt artifact. Information in the record is derived from the archive''s control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html'
      type: object
    Package:
      properties:
        createTime:
          type: string
          format: google-datetime
          description: The time when the package was created.
        name:
          type: string
          description: 'The name of the package, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the slashes are escaped.'
        updateTime:
          type: string
          description: The time when the package was last updated. This includes publishing a new version of the package.
          format: google-datetime
        displayName:
          description: The display name of the package.
          type: string
      type: object
      description: Packages are named collections of versions.
      id: Package
    CleanupPolicyMostRecentVersions:
      properties:
        packageNamePrefixes:
          items:
            type: string
          type: array
          description: List of package name prefixes that will apply this rule.
        keepCount:
          description: Minimum number of versions to keep.
          format: int32
          type: integer
      description: CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.
      id: CleanupPolicyMostRecentVersions
      type: object
    ListVersionsResponse:
      type: object
      id: ListVersionsResponse
      description: The response from listing versions.
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of versions, or empty if there are no more versions to return.'
        versions:
          description: The versions returned.
          type: array
          items:
            $ref: '#/components/schemas/Version'
    SbomConfig:
      type: object
      properties:
        enablementConfig:
          enumDescriptions:
            - Unspecified config was not set. This will be interpreted as DISABLED.
            - 'Inherited indicates the repository is allowed for SBOM generation, however the actual state will be inherited from the API enablement state.'
            - Disabled indicates the repository will not generate SBOMs.
          enum:
            - ENABLEMENT_CONFIG_UNSPECIFIED
            - INHERITED
            - DISABLED
          type: string
          description: Optional. Config for whether this repository has sbom generation disabled.
        lastEnableTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The last time this repository config was set to INHERITED.
      description: 'Config for whether to generate SBOMs for resources in this repository, as well as output fields describing current state.'
      id: SbomConfig
    ListRepositoriesResponse:
      id: ListRepositoriesResponse
      type: object
      properties:
        nextPageToken:
          description: 'The token to retrieve the next page of repositories, or empty if there are no more repositories to return.'
          type: string
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/Repository'
          description: The repositories returned.
      description: The response from listing repositories.
    ImportGoogetArtifactsResponse:
      description: The response message from importing artifacts.
      properties:
        googetArtifacts:
          description: The GooGet artifacts updated.
          items:
            $ref: '#/components/schemas/GoogetArtifact'
          type: array
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ImportGoogetArtifactsErrorInfo'
          description: Detailed error info for packages that were not imported.
      id: ImportGoogetArtifactsResponse
      type: object
    GoModule:
      id: GoModule
      properties:
        version:
          description: 'The version of the Go module. Must be a valid canonical version as defined in https://go.dev/ref/mod#glos-canonical-version.'
          type: string
        createTime:
          description: Output only. The time when the Go module is created.
          readOnly: true
          type: string
          format: google-datetime
        name:
          description: The resource name of a Go module.
          type: string
        updateTime:
          type: string
          format: google-datetime
          description: Output only. The time when the Go module is updated.
          readOnly: true
      description: GoModule represents a Go module.
      type: object
    PythonRepository:
      type: object
      description: Configuration for a Python remote repository.
      id: PythonRepository
      properties:
        publicRepository:
          description: One of the publicly available Python repositories supported by Artifact Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - PyPI.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - PYPI
    YumArtifact:
      type: object
      properties:
        architecture:
          type: string
          readOnly: true
          description: Output only. Operating system architecture of the artifact.
        name:
          type: string
          readOnly: true
          description: Output only. The Artifact Registry resource name of the artifact.
        packageType:
          description: Output only. An artifact is a binary or source package.
          readOnly: true
          type: string
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
          enumDescriptions:
            - Package type is not specified.
            - Binary package (.rpm).
            - Source package (.srpm).
        packageName:
          description: Output only. The yum package name of the artifact.
          type: string
          readOnly: true
      description: A detailed representation of a Yum artifact.
      id: YumArtifact
    NpmRepository:
      type: object
      id: NpmRepository
      properties:
        publicRepository:
          description: One of the publicly available Npm repositories supported by Artifact Registry.
          enumDescriptions:
            - Unspecified repository.
            - npmjs.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - NPMJS
          type: string
      description: Configuration for a Npm remote repository.
    UploadYumArtifactRequest:
      description: The request to upload an artifact.
      properties: {}
      id: UploadYumArtifactRequest
      type: object
    ImportGoogetArtifactsErrorInfo:
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: The detailed error status.
        gcsSource:
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
          description: Google Cloud Storage location requested.
      description: Error information explaining why a package was not imported.
      id: ImportGoogetArtifactsErrorInfo
      type: object
    ListNpmPackagesResponse:
      id: ListNpmPackagesResponse
      description: The response from listing npm packages.
      properties:
        npmPackages:
          description: The npm packages returned.
          items:
            $ref: '#/components/schemas/NpmPackage'
          type: array
        nextPageToken:
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
          type: string
      type: object
    UpstreamPolicy:
      id: UpstreamPolicy
      description: Artifact policy configuration for the repository contents.
      type: object
      properties:
        id:
          description: The user-provided ID of the upstream policy.
          type: string
        priority:
          description: Entries with a greater priority value take precedence in the pull order.
          type: integer
          format: int32
        repository:
          description: 'A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".'
          type: string
    DockerRepositoryConfig:
      id: DockerRepositoryConfig
      properties:
        immutableTags:
          type: boolean
          description: 'The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.'
      type: object
      description: DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
    MavenRepository:
      id: MavenRepository
      properties:
        publicRepository:
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - MAVEN_CENTRAL
          description: One of the publicly available Maven repositories supported by Artifact Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - Maven Central.
      type: object
      description: Configuration for a Maven remote repository.
    ListTagsResponse:
      description: The response from listing tags.
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of tags, or empty if there are no more tags to return.'
        tags:
          type: array
          description: The tags returned.
          items:
            $ref: '#/components/schemas/Tag'
      id: ListTagsResponse
      type: object
    GoogleDevtoolsArtifactregistryV1File:
      description: Files store content that is potentially associated with Packages or Versions.
      id: GoogleDevtoolsArtifactregistryV1File
      type: object
      properties:
        name:
          description: 'The name of the file, for example: "projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt". If the file ID part contains slashes, they are escaped.'
          type: string
        owner:
          description: 'The name of the Package or Version that owns this file, if any.'
          type: string
        createTime:
          type: string
          description: Output only. The time when the File was created.
          readOnly: true
          format: google-datetime
        fetchTime:
          description: Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote.
          readOnly: true
          format: google-datetime
          type: string
        hashes:
          type: array
          description: The hashes of the file content.
          items:
            $ref: '#/components/schemas/Hash'
        sizeBytes:
          type: string
          description: The size of the File in bytes.
          format: int64
        updateTime:
          description: Output only. The time when the File was last updated.
          readOnly: true
          type: string
          format: google-datetime
    DockerRepository:
      properties:
        publicRepository:
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - DOCKER_HUB
          type: string
          enumDescriptions:
            - Unspecified repository.
            - Docker Hub.
          description: One of the publicly available Docker repositories supported by Artifact Registry.
      description: Configuration for a Docker remote repository.
      id: DockerRepository
      type: object
    Policy:
      type: object
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
          type: string
    ListPackagesResponse:
      type: object
      id: ListPackagesResponse
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of packages, or empty if there are no more packages to return.'
        packages:
          items:
            $ref: '#/components/schemas/Package'
          type: array
          description: The packages returned.
      description: The response from listing packages.
    Binding:
      type: object
      id: Binding
      description: 'Associates `members`, or principals, with a `role`.'
      properties:
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
        condition:
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          $ref: '#/components/schemas/Expr'
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
      type: object
      id: SetIamPolicyRequest
    AptRepository:
      properties:
        publicRepository:
          description: One of the publicly available Apt repositories supported by Artifact Registry.
          $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository'
      description: Configuration for an Apt remote repository.
      id: AptRepository
      type: object
    UploadKfpArtifactMetadata:
      id: UploadKfpArtifactMetadata
      description: The operation metadata for uploading KFP artifacts.
      properties: {}
      type: object
    ImportAptArtifactsRequest:
      description: The request to import new apt artifacts.
      id: ImportAptArtifactsRequest
      type: object
      properties:
        gcsSource:
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
          description: Google Cloud Storage location where input content is located.
    Tag:
      type: object
      id: Tag
      description: Tags point to a version and represent an alternative name that can be used to access the version.
      properties:
        version:
          description: 'The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811" If the package or version ID parts contain slashes, the slashes are escaped.'
          type: string
        name:
          type: string
          description: 'The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\-._~:@], anything else must be URL encoded.'
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository:
      id: GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository
      type: object
      properties:
        repositoryPath:
          type: string
          description: A custom field to define a path to a specific repository from the base.
        repositoryBase:
          description: A common public repository base for Yum.
          type: string
          enumDescriptions:
            - Unspecified repository base.
            - CentOS.
            - CentOS Debug.
            - CentOS Vault.
            - CentOS Stream.
            - Rocky.
            - Fedora Extra Packages for Enterprise Linux (EPEL).
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - CENTOS
            - CENTOS_DEBUG
            - CENTOS_VAULT
            - CENTOS_STREAM
            - ROCKY
            - EPEL
      description: Publicly available Yum repositories constructed from a common repository base and a custom repository path.
    UploadAptArtifactMediaResponse:
      type: object
      id: UploadAptArtifactMediaResponse
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      description: The response to upload an artifact.
    ImportAptArtifactsResponse:
      id: ImportAptArtifactsResponse
      type: object
      properties:
        aptArtifacts:
          items:
            $ref: '#/components/schemas/AptArtifact'
          type: array
          description: The Apt artifacts imported.
        errors:
          description: Detailed error info for packages that were not imported.
          items:
            $ref: '#/components/schemas/ImportAptArtifactsErrorInfo'
          type: array
      description: The response message from importing APT artifacts.
    ImportGoogetArtifactsMetadata:
      properties: {}
      id: ImportGoogetArtifactsMetadata
      description: The operation metadata for importing artifacts.
      type: object
    UploadKfpArtifactMediaResponse:
      id: UploadKfpArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
          description: Operation that will be returned to the user.
    BatchDeleteVersionsRequest:
      type: object
      properties:
        names:
          description: Required. The names of the versions to delete. A maximum of 10000 versions can be deleted in a batch.
          items:
            type: string
          type: array
        validateOnly:
          description: 'If true, the request is performed without deleting data, following AIP-163.'
          type: boolean
      id: BatchDeleteVersionsRequest
      description: The request to delete multiple versions across a repository.
    Location:
      properties:
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
        metadata:
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        displayName:
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
          type: string
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
      type: object
      id: Location
      description: A resource that represents a Google Cloud location.
    MavenRepositoryConfig:
      id: MavenRepositoryConfig
      type: object
      description: MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
      properties:
        versionPolicy:
          enumDescriptions:
            - 'VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.'
            - RELEASE - repository will accept only Release versions.
            - SNAPSHOT - repository will accept only Snapshot versions.
          description: Version policy defines the versions that the registry will accept.
          enum:
            - VERSION_POLICY_UNSPECIFIED
            - RELEASE
            - SNAPSHOT
          type: string
        allowSnapshotOverwrites:
          description: The repository with this flag will allow publishing the same snapshot versions.
          type: boolean
    GoogetArtifact:
      description: A detailed representation of a GooGet artifact.
      type: object
      properties:
        packageName:
          readOnly: true
          description: Output only. The GooGet package name of the artifact.
          type: string
        architecture:
          description: Output only. Operating system architecture of the artifact.
          type: string
          readOnly: true
        name:
          readOnly: true
          description: Output only. The Artifact Registry resource name of the artifact.
          type: string
      id: GoogetArtifact
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      properties:
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          type: array
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
          format: int32
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
      id: Status
    ImportYumArtifactsResponse:
      id: ImportYumArtifactsResponse
      properties:
        errors:
          description: Detailed error info for packages that were not imported.
          items:
            $ref: '#/components/schemas/ImportYumArtifactsErrorInfo'
          type: array
        yumArtifacts:
          description: The yum artifacts imported.
          items:
            $ref: '#/components/schemas/YumArtifact'
          type: array
      type: object
      description: The response message from importing YUM artifacts.
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
      type: object
      id: TestIamPermissionsResponse
    ListMavenArtifactsResponse:
      type: object
      properties:
        mavenArtifacts:
          description: The maven artifacts returned.
          items:
            $ref: '#/components/schemas/MavenArtifact'
          type: array
        nextPageToken:
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
          type: string
      description: The response from listing maven artifacts.
      id: ListMavenArtifactsResponse
    UploadGoModuleRequest:
      id: UploadGoModuleRequest
      description: The request to upload a Go module.
      properties: {}
      type: object
    DockerImage:
      properties:
        imageSizeBytes:
          description: Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.
          format: int64
          type: string
        tags:
          description: Tags attached to this image.
          items:
            type: string
          type: array
        updateTime:
          description: Output only. The time when the docker image was last updated.
          readOnly: true
          format: google-datetime
          type: string
        uri:
          type: string
          description: 'Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf'
        buildTime:
          description: 'The time this image was built. This field is returned as the ''metadata.buildTime'' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.'
          type: string
          format: google-datetime
        mediaType:
          type: string
          description: 'Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json". This field is returned as the ''metadata.mediaType'' field in the Version resource.'
        uploadTime:
          type: string
          description: Time the image was uploaded.
          format: google-datetime
        name:
          description: 'Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image''s digest.'
          type: string
      id: DockerImage
      type: object
      description: 'DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime'
    UploadAptArtifactRequest:
      properties: {}
      id: UploadAptArtifactRequest
      description: The request to upload an artifact.
      type: object
    TestIamPermissionsRequest:
      properties:
        permissions:
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          items:
            type: string
          type: array
      type: object
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
    ListLocationsResponse:
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          items:
            $ref: '#/components/schemas/Location'
          type: array
          description: A list of locations that matches the specified filter in the request.
      description: The response message for Locations.ListLocations.
      type: object
      id: ListLocationsResponse
    UploadYumArtifactMetadata:
      type: object
      id: UploadYumArtifactMetadata
      description: The operation metadata for uploading artifacts.
      properties: {}
    ImportYumArtifactsGcsSource:
      type: object
      properties:
        useWildcards:
          description: Supports URI wildcards for matching multiple objects from a single URI.
          type: boolean
        uris:
          description: 'Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
          type: array
          items:
            type: string
      description: Google Cloud Storage location where the artifacts currently reside.
      id: ImportYumArtifactsGcsSource
    UploadGoModuleMediaResponse:
      id: UploadGoModuleMediaResponse
      description: The response to upload a Go module.
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
          description: Operation to be returned to the user.
    UploadGoogetArtifactMetadata:
      properties: {}
      id: UploadGoogetArtifactMetadata
      type: object
      description: The operation metadata for uploading artifacts.
    UploadKfpArtifactRequest:
      id: UploadKfpArtifactRequest
      type: object
      properties:
        tags:
          items:
            type: string
          type: array
          description: Tags to be created with the version.
        description:
          description: Description of the package version.
          type: string
      description: The request to upload an artifact.
    ListDockerImagesResponse:
      type: object
      description: The response from listing docker images.
      properties:
        dockerImages:
          type: array
          description: The docker images returned.
          items:
            $ref: '#/components/schemas/DockerImage'
        nextPageToken:
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
          type: string
      id: ListDockerImagesResponse
  parameters:
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
  x-stackQL-resources:
    project_settings:
      id: google.artifactregistry.project_settings
      name: project_settings
      title: Project Settings
      methods:
        get_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/project_settings/methods/get_project_settings'
        insert: []
        update: []
        delete: []
    vpcsc_config:
      id: google.artifactregistry.vpcsc_config
      name: vpcsc_config
      title: Vpcsc Config
      methods:
        update_vpcsc_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_vpcsc_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vpcsc_config/methods/get_vpcsc_config'
        insert: []
        update: []
        delete: []
    locations:
      id: google.artifactregistry.locations
      name: locations
      title: Locations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    operations:
      id: google.artifactregistry.operations
      name: operations
      title: Operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    repositories:
      id: google.artifactregistry.repositories
      name: repositories
      title: Repositories
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/delete'
    repositories_iam_policies:
      id: google.artifactregistry.repositories_iam_policies
      name: repositories_iam_policies
      title: Repositories Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    docker_images:
      id: google.artifactregistry.docker_images
      name: docker_images
      title: Docker Images
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dockerImages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages~1{dockerImagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/list'
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/get'
        insert: []
        update: []
        delete: []
    python_packages:
      id: google.artifactregistry.python_packages
      name: python_packages
      title: Python Packages
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages~1{pythonPackagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.pythonPackages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/list'
        insert: []
        update: []
        delete: []
    yum_artifacts:
      id: google.artifactregistry.yum_artifacts
      name: yum_artifacts
      title: Yum Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    maven_artifacts:
      id: google.artifactregistry.maven_artifacts
      name: maven_artifacts
      title: Maven Artifacts
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.mavenArtifacts
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts~1{mavenArtifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/list'
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/get'
        insert: []
        update: []
        delete: []
    googet_artifacts:
      id: google.artifactregistry.googet_artifacts
      name: googet_artifacts
      title: Googet Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    packages:
      id: google.artifactregistry.packages
      name: packages
      title: Packages
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.packages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/packages/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/packages/methods/delete'
    versions:
      id: google.artifactregistry.versions
      name: versions
      title: Versions
      methods:
        batch_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions:batchDelete/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.versions
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/delete'
    tags:
      id: google.artifactregistry.tags
      name: tags
      title: Tags
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/get'
          - $ref: '#/components/x-stackQL-resources/tags/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/delete'
    files:
      id: google.artifactregistry.files
      name: files
      title: Files
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files~1{filesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.files
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/files/methods/get'
          - $ref: '#/components/x-stackQL-resources/files/methods/list'
        insert: []
        update: []
        delete: []
    kfp_artifacts:
      id: google.artifactregistry.kfp_artifacts
      name: kfp_artifacts
      title: Kfp Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1kfpArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    apt_artifacts:
      id: google.artifactregistry.apt_artifacts
      name: apt_artifacts
      title: Apt Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    npm_packages:
      id: google.artifactregistry.npm_packages
      name: npm_packages
      title: Npm Packages
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.npmPackages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages~1{npmPackagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/list'
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/get'
        insert: []
        update: []
        delete: []
    go_modules:
      id: google.artifactregistry.go_modules
      name: go_modules
      title: Go Modules
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1goModules:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/projectSettings':
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    get:
      description: Retrieves the Settings for the Project.
      operationId: artifactregistry.projects.getProjectSettings
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: project_settings
      x-stackQL-method: get_project_settings
      x-stackQL-verb: select
    patch:
      description: Updates the Settings for the Project.
      operationId: artifactregistry.projects.updateProjectSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettings'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: project_settings
      x-stackQL-method: update_project_settings
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig':
    parameters: *ref_1
    patch:
      description: Updates the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.updateVpcscConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPCSCConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: vpcsc_config
      x-stackQL-method: update_vpcsc_config
      x-stackQL-verb: exec
    get:
      description: Retrieves the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.getVpcscConfig
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: vpcsc_config
      x-stackQL-method: get_vpcsc_config
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: artifactregistry.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: artifactregistry.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: artifactregistry.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories':
    parameters: *ref_1
    get:
      description: Lists repositories.
      operationId: artifactregistry.projects.locations.repositories.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: repositories
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.repositories
    post:
      description: Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
      operationId: artifactregistry.projects.locations.repositories.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: repositoryId
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}':
    parameters: *ref_1
    patch:
      description: Updates a repository.
      operationId: artifactregistry.projects.locations.repositories.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.
      operationId: artifactregistry.projects.locations.repositories.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets a repository.
      operationId: artifactregistry.projects.locations.repositories.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: Updates the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: Tests if the caller has a list of permissions on a resource.
      operationId: artifactregistry.projects.locations.repositories.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages':
    parameters: *ref_1
    get:
      description: Lists docker images.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDockerImagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: docker_images
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.dockerImages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}':
    parameters: *ref_1
    get:
      description: Gets a docker image.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerImage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: dockerImagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: docker_images
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}':
    parameters: *ref_1
    get:
      description: Gets a python package.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PythonPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: pythonPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: python_packages
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages':
    parameters: *ref_1
    get:
      description: Lists python packages.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPythonPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: python_packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.pythonPackages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadYumArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadYumArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: yum_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportYumArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: yum_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts':
    parameters: *ref_1
    get:
      description: Lists maven artifacts.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMavenArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: maven_artifacts
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.mavenArtifacts
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}':
    parameters: *ref_1
    get:
      description: Gets a maven artifact.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: mavenArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: maven_artifacts
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoogetArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoogetArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: googet_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportGoogetArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: googet_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}':
    parameters: *ref_1
    delete:
      description: Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: packages
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets a package.
      operationId: artifactregistry.projects.locations.repositories.packages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: packages
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages':
    parameters: *ref_1
    get:
      description: Lists packages.
      operationId: artifactregistry.projects.locations.repositories.packages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.packages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions:batchDelete':
    parameters: *ref_1
    post:
      description: Deletes multiple versions across a repository. The returned operation will complete once the versions have been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.batchDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteVersionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: batch_delete
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}':
    parameters: *ref_1
    get:
      description: Gets a version
      operationId: artifactregistry.projects.locations.repositories.packages.versions.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: get
      x-stackQL-verb: exec
    delete:
      description: Deletes a version and all of its content. The returned operation will complete once the version has been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: versions
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions':
    parameters: *ref_1
    get:
      description: Lists versions.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.versions
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}':
    parameters: *ref_1
    delete:
      description: Deletes a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags':
    parameters: *ref_1
    get:
      description: Lists tags.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.tags
    post:
      description: Creates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: tagId
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}':
    parameters: *ref_1
    get:
      description: Gets a file.
      operationId: artifactregistry.projects.locations.repositories.files.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: filesId
          required: true
          schema:
            type: string
      x-stackQL-resource: files
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files':
    parameters: *ref_1
    get:
      description: Lists files.
      operationId: artifactregistry.projects.locations.repositories.files.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: files
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.files
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.'
      operationId: artifactregistry.projects.locations.repositories.kfpArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadKfpArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadKfpArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: kfp_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAptArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAptArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: apt_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAptArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: apt_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages':
    parameters: *ref_1
    get:
      description: Lists npm packages.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNpmPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: npm_packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.npmPackages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}':
    parameters: *ref_1
    get:
      description: Gets a npm package.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NpmPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: npmPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: npm_packages
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/goModules:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a Go module. The returned Operation will complete once the Go module is uploaded. Package, Version, and File resources are created based on the uploaded Go module.'
      operationId: artifactregistry.projects.locations.repositories.goModules.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoModuleRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoModuleMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: go_modules
      x-stackQL-method: upload
      x-stackQL-verb: exec
