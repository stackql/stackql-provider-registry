openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Artifact Registry API
  description: Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
  version: v1
  x-discovery-doc-revision: '20230816'
  x-generated-date: '2023-08-22'
externalDocs:
  url: 'https://cloud.google.com/artifacts/docs/'
servers:
  - url: 'https://artifactregistry.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
            'https://www.googleapis.com/auth/cloud-platform.read-only': View your data across Google Cloud services and see the email address of your Google Account
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
      type: object
      properties:
        permissions:
          type: array
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
    TestIamPermissionsRequest:
      type: object
      properties:
        permissions:
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          type: array
          items:
            type: string
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
    ImportGoogetArtifactsMetadata:
      id: ImportGoogetArtifactsMetadata
      description: The operation metadata for importing artifacts.
      type: object
      properties: {}
    UploadYumArtifactMetadata:
      properties: {}
      description: The operation metadata for uploading artifacts.
      type: object
      id: UploadYumArtifactMetadata
    ImportAptArtifactsErrorInfo:
      type: object
      id: ImportAptArtifactsErrorInfo
      description: Error information explaining why a package was not imported.
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: The detailed error status.
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
    PythonRepository:
      description: Configuration for a Python remote repository.
      properties:
        publicRepository:
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - PYPI
          enumDescriptions:
            - Unspecified repository.
            - PyPI.
          description: One of the publicly available Python repositories supported by Artifact Registry.
          type: string
      id: PythonRepository
      type: object
    ListFilesResponse:
      description: The response from listing files.
      id: ListFilesResponse
      properties:
        files:
          items:
            $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
          type: array
          description: The files returned.
        nextPageToken:
          description: 'The token to retrieve the next page of files, or empty if there are no more files to return.'
          type: string
      type: object
    UploadAptArtifactRequest:
      id: UploadAptArtifactRequest
      type: object
      description: The request to upload an artifact.
      properties: {}
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      type: object
      properties:
        metadata:
          type: object
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
        response:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
      id: Operation
    ImportAptArtifactsResponse:
      type: object
      properties:
        aptArtifacts:
          items:
            $ref: '#/components/schemas/AptArtifact'
          description: The Apt artifacts imported.
          type: array
        errors:
          items:
            $ref: '#/components/schemas/ImportAptArtifactsErrorInfo'
          description: Detailed error info for packages that were not imported.
          type: array
      description: The response message from importing APT artifacts.
      id: ImportAptArtifactsResponse
    Location:
      id: Location
      type: object
      properties:
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        metadata:
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
          type: string
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
          type: object
      description: A resource that represents a Google Cloud location.
    ListNpmPackagesResponse:
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
        npmPackages:
          description: The npm packages returned.
          items:
            $ref: '#/components/schemas/NpmPackage'
          type: array
      description: The response from listing npm packages.
      id: ListNpmPackagesResponse
      type: object
    ImportGoogetArtifactsRequest:
      description: The request to import new googet artifacts.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
      id: ImportGoogetArtifactsRequest
    UploadKfpArtifactRequest:
      type: object
      id: UploadKfpArtifactRequest
      description: The request to upload an artifact.
      properties:
        description:
          type: string
          description: Description of the package version.
        tags:
          description: Tags to be created with the version.
          items:
            type: string
          type: array
    UploadGoogetArtifactResponse:
      type: object
      properties:
        googetArtifacts:
          type: array
          description: The GooGet artifacts updated.
          items:
            $ref: '#/components/schemas/GoogetArtifact'
      id: UploadGoogetArtifactResponse
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
    UploadGoModuleMediaResponse:
      description: The response to upload a Go module.
      id: UploadGoModuleMediaResponse
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      type: object
    ListPackagesResponse:
      description: The response from listing packages.
      id: ListPackagesResponse
      type: object
      properties:
        packages:
          description: The packages returned.
          type: array
          items:
            $ref: '#/components/schemas/Package'
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of packages, or empty if there are no more packages to return.'
    MavenArtifact:
      id: MavenArtifact
      properties:
        pomUri:
          type: string
          description: 'Required. URL to access the pom file of the artifact. Example: us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom'
        version:
          type: string
          description: Version of this artifact.
        artifactId:
          description: Artifact ID for the artifact.
          type: string
        name:
          description: 'Required. registry_location, project_id, repository_name and maven_artifact forms a unique artifact For example, "projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/ com.google.guava:guava:31.0-jre", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "com.google.guava:guava:31.0-jre" is the maven artifact.'
          type: string
        updateTime:
          readOnly: true
          description: Output only. Time the artifact was updated.
          format: google-datetime
          type: string
        createTime:
          type: string
          readOnly: true
          description: Output only. Time the artifact was created.
          format: google-datetime
        groupId:
          description: 'Group ID for the artifact. Example: com.google.guava'
          type: string
      type: object
      description: MavenArtifact represents a maven artifact.
    ImportYumArtifactsMetadata:
      description: The operation metadata for importing artifacts.
      type: object
      id: ImportYumArtifactsMetadata
      properties: {}
    UploadYumArtifactMediaResponse:
      id: UploadYumArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
          description: Operation to be returned to the user.
    Repository:
      description: A Repository for storing artifacts with a specific format.
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
          description: 'Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.'
        kmsKeyName:
          description: 'The Cloud KMS resource name of the customer managed encryption key that''s used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.'
          type: string
        sbomConfig:
          description: Optional. Config and state for sbom generation for resources within this Repository.
          $ref: '#/components/schemas/SbomConfig'
        name:
          type: string
          description: 'The name of the repository, for example: "projects/p1/locations/us-central1/repositories/repo1".'
        sizeBytes:
          format: int64
          readOnly: true
          description: 'Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.'
          type: string
        cleanupPolicyDryRun:
          type: boolean
          description: 'Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.'
        virtualRepositoryConfig:
          $ref: '#/components/schemas/VirtualRepositoryConfig'
          description: Configuration specific for a Virtual Repository.
        createTime:
          readOnly: true
          description: Output only. The time when the repository was created.
          type: string
          format: google-datetime
        dockerConfig:
          description: Docker repository config contains repository level configuration for the repositories of docker type.
          $ref: '#/components/schemas/DockerRepositoryConfig'
        description:
          type: string
          description: The user-provided description of the repository.
        mavenConfig:
          $ref: '#/components/schemas/MavenRepositoryConfig'
          description: Maven repository config contains repository level configuration for the repositories of maven type.
        remoteRepositoryConfig:
          description: Configuration specific for a Remote Repository.
          $ref: '#/components/schemas/RemoteRepositoryConfig'
        updateTime:
          readOnly: true
          format: google-datetime
          description: Output only. The time when the repository was last updated.
          type: string
        format:
          enumDescriptions:
            - Unspecified package format.
            - Docker package format.
            - Maven package format.
            - NPM package format.
            - APT package format.
            - YUM package format.
            - GooGet package format.
            - Python package format.
            - Kubeflow Pipelines package format.
            - Go package format.
          type: string
          description: The format of packages that are stored in the repository.
          enum:
            - FORMAT_UNSPECIFIED
            - DOCKER
            - MAVEN
            - NPM
            - APT
            - YUM
            - GOOGET
            - PYTHON
            - KFP
            - GO
        satisfiesPzs:
          readOnly: true
          type: boolean
          description: 'Output only. If set, the repository satisfies physical zone separation.'
        mode:
          enumDescriptions:
            - Unspecified mode.
            - A standard repository storing artifacts.
            - A virtual repository to serve artifacts from one or more sources.
            - A remote repository to serve artifacts from a remote source.
          enum:
            - MODE_UNSPECIFIED
            - STANDARD_REPOSITORY
            - VIRTUAL_REPOSITORY
            - REMOTE_REPOSITORY
          description: The mode of the repository.
          type: string
        cleanupPolicies:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CleanupPolicy'
          description: Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
      id: Repository
      type: object
    DockerRepository:
      properties:
        publicRepository:
          enumDescriptions:
            - Unspecified repository.
            - Docker Hub.
          type: string
          description: One of the publicly available Docker repositories supported by Artifact Registry.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - DOCKER_HUB
      id: DockerRepository
      type: object
      description: Configuration for a Docker remote repository.
    Tag:
      description: Tags point to a version and represent an alternative name that can be used to access the version.
      properties:
        name:
          type: string
          description: 'The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\-._~:@], anything else must be URL encoded.'
        version:
          description: 'The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811" If the package or version ID parts contain slashes, the slashes are escaped.'
          type: string
      id: Tag
      type: object
    ImportGoogetArtifactsErrorInfo:
      id: ImportGoogetArtifactsErrorInfo
      description: Error information explaining why a package was not imported.
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: The detailed error status.
        gcsSource:
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
          description: Google Cloud Storage location requested.
      type: object
    Policy:
      type: object
      properties:
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          type: string
          format: byte
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
    CleanupPolicy:
      type: object
      description: Artifact policy configuration for repository cleanup policies.
      id: CleanupPolicy
      properties:
        id:
          type: string
          description: The user-provided ID of the cleanup policy.
        condition:
          $ref: '#/components/schemas/CleanupPolicyCondition'
          description: Policy condition for matching versions.
        mostRecentVersions:
          description: Policy condition for retaining a minimum number of versions. May only be specified with a Keep action.
          $ref: '#/components/schemas/CleanupPolicyMostRecentVersions'
        action:
          enumDescriptions:
            - Action not specified.
            - Delete action.
            - Keep action.
          enum:
            - ACTION_UNSPECIFIED
            - DELETE
            - KEEP
          type: string
          description: Policy action.
    ImportAptArtifactsRequest:
      id: ImportAptArtifactsRequest
      properties:
        gcsSource:
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
          description: Google Cloud Storage location where input content is located.
      type: object
      description: The request to import new apt artifacts.
    SbomConfig:
      properties:
        lastEnableTime:
          description: Output only. The last time this repository config was set to INHERITED.
          format: google-datetime
          readOnly: true
          type: string
        enablementConfig:
          enum:
            - ENABLEMENT_CONFIG_UNSPECIFIED
            - INHERITED
            - DISABLED
          enumDescriptions:
            - Unspecified config was not set. This will be interpreted as DISABLED.
            - 'Inherited indicates the repository is allowed for SBOM generation, however the actual state will be inherited from the API enablement state.'
            - Disabled indicates the repository will not generate SBOMs.
          description: Optional. Config for whether this repository has sbom generation disabled.
          type: string
      description: 'Config for whether to generate SBOMs for resources in this repository, as well as output fields describing current state.'
      type: object
      id: SbomConfig
    RemoteRepositoryConfig:
      type: object
      id: RemoteRepositoryConfig
      description: Remote repository configuration.
      properties:
        npmRepository:
          description: Specific settings for an Npm remote repository.
          $ref: '#/components/schemas/NpmRepository'
        description:
          type: string
          description: The description of the remote source.
        yumRepository:
          description: Specific settings for a Yum remote repository.
          $ref: '#/components/schemas/YumRepository'
        aptRepository:
          description: Specific settings for an Apt remote repository.
          $ref: '#/components/schemas/AptRepository'
        pythonRepository:
          description: Specific settings for a Python remote repository.
          $ref: '#/components/schemas/PythonRepository'
        mavenRepository:
          description: Specific settings for a Maven remote repository.
          $ref: '#/components/schemas/MavenRepository'
        dockerRepository:
          $ref: '#/components/schemas/DockerRepository'
          description: Specific settings for a Docker remote repository.
    AptRepository:
      description: Configuration for an Apt remote repository.
      type: object
      id: AptRepository
      properties:
        publicRepository:
          $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository'
          description: One of the publicly available Apt repositories supported by Artifact Registry.
    Binding:
      description: 'Associates `members`, or principals, with a `role`.'
      properties:
        condition:
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          $ref: '#/components/schemas/Expr'
        members:
          type: array
          items:
            type: string
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
      id: Binding
      type: object
    KfpArtifact:
      properties:
        version:
          description: The version associated with the KFP artifact. Must follow the Semantic Versioning standard.
          type: string
        name:
          description: 'Output only. Resource name of the KFP artifact. Since users don''t directly interact with this resource, the name will be derived from the associated version. For example, when version = ".../versions/sha256:abcdef...", the name will be ".../kfpArtifacts/sha256:abcdef...".'
          type: string
          readOnly: true
      type: object
      id: KfpArtifact
      description: A detailed representation of a KFP artifact.
    ImportAptArtifactsMetadata:
      type: object
      description: The operation metadata for importing artifacts.
      properties: {}
      id: ImportAptArtifactsMetadata
    Expr:
      properties:
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        description:
          type: string
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        title:
          type: string
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
      type: object
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    DockerImage:
      description: 'DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime'
      id: DockerImage
      properties:
        buildTime:
          type: string
          format: google-datetime
          description: 'The time this image was built. This field is returned as the ''metadata.buildTime'' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.'
        uri:
          description: 'Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf'
          type: string
        uploadTime:
          format: google-datetime
          type: string
          description: Time the image was uploaded.
        tags:
          type: array
          description: Tags attached to this image.
          items:
            type: string
        updateTime:
          format: google-datetime
          type: string
          description: Output only. The time when the docker image was last updated.
          readOnly: true
        mediaType:
          description: 'Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json". This field is returned as the ''metadata.mediaType'' field in the Version resource.'
          type: string
        name:
          description: 'Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image''s digest.'
          type: string
        imageSizeBytes:
          type: string
          format: int64
          description: Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.
      type: object
    BatchDeleteVersionsRequest:
      properties:
        validateOnly:
          description: 'If true, the request is performed without deleting data, following AIP-163.'
          type: boolean
        names:
          type: array
          description: Required. The names of the versions to delete. A maximum of 10000 versions can be deleted in a batch.
          items:
            type: string
      id: BatchDeleteVersionsRequest
      type: object
      description: The request to delete multiple versions across a repository.
    OperationMetadata:
      id: OperationMetadata
      description: 'Metadata type for longrunning-operations, currently empty.'
      type: object
      properties: {}
    Empty:
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
      properties: {}
    UploadKfpArtifactMediaResponse:
      id: UploadKfpArtifactMediaResponse
      type: object
      description: The response to upload an artifact.
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
          description: Operation that will be returned to the user.
    PythonPackage:
      properties:
        name:
          type: string
          description: 'Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, "projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and python_package:1.0.0" is the python package.'
        version:
          type: string
          description: Version of this package.
        createTime:
          format: google-datetime
          type: string
          description: Output only. Time the package was created.
          readOnly: true
        packageName:
          type: string
          description: Package for the artifact.
        uri:
          type: string
          description: 'Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz'
        updateTime:
          description: Output only. Time the package was updated.
          readOnly: true
          format: google-datetime
          type: string
      type: object
      id: PythonPackage
      description: PythonPackage represents a python artifact.
    ImportYumArtifactsErrorInfo:
      properties:
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
        error:
          description: The detailed error status.
          $ref: '#/components/schemas/Status'
      description: Error information explaining why a package was not imported.
      id: ImportYumArtifactsErrorInfo
      type: object
    Status:
      type: object
      properties:
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          type: array
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
          format: int32
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    UploadAptArtifactMediaResponse:
      id: UploadAptArtifactMediaResponse
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      type: object
      description: The response to upload an artifact.
    BatchDeleteVersionsMetadata:
      properties:
        failedVersions:
          items:
            type: string
          description: The versions the operation failed to delete.
          type: array
      description: The metadata of an LRO from deleting multiple versions.
      type: object
      id: BatchDeleteVersionsMetadata
    ListRepositoriesResponse:
      description: The response from listing repositories.
      type: object
      id: ListRepositoriesResponse
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/Repository'
          type: array
          description: The repositories returned.
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of repositories, or empty if there are no more repositories to return.'
    ListDockerImagesResponse:
      id: ListDockerImagesResponse
      type: object
      properties:
        dockerImages:
          items:
            $ref: '#/components/schemas/DockerImage'
          description: The docker images returned.
          type: array
        nextPageToken:
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
          type: string
      description: The response from listing docker images.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
      type: object
    Version:
      description: 'The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.'
      type: object
      id: Version
      properties:
        name:
          description: 'The name of the version, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1". If the package or version ID parts contain slashes, the slashes are escaped.'
          type: string
        description:
          description: 'Optional. Description of the version, as specified in its metadata.'
          type: string
        createTime:
          description: The time when the version was created.
          type: string
          format: google-datetime
        updateTime:
          description: The time when the version was last updated.
          format: google-datetime
          type: string
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object.
          description: 'Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact'
          type: object
          readOnly: true
        relatedTags:
          items:
            $ref: '#/components/schemas/Tag'
          description: Output only. A list of related tags. Will contain up to 100 tags that reference this version.
          type: array
    NpmRepository:
      type: object
      description: Configuration for a Npm remote repository.
      properties:
        publicRepository:
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - NPMJS
          enumDescriptions:
            - Unspecified repository.
            - npmjs.
          type: string
          description: One of the publicly available Npm repositories supported by Artifact Registry.
      id: NpmRepository
    GoogetArtifact:
      description: A detailed representation of a GooGet artifact.
      type: object
      properties:
        packageName:
          description: Output only. The GooGet package name of the artifact.
          type: string
          readOnly: true
        name:
          readOnly: true
          description: Output only. The Artifact Registry resource name of the artifact.
          type: string
        architecture:
          readOnly: true
          type: string
          description: Output only. Operating system architecture of the artifact.
      id: GoogetArtifact
    ProjectSettings:
      id: ProjectSettings
      properties:
        name:
          type: string
          description: 'The name of the project''s settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set'
        legacyRedirectionState:
          enumDescriptions:
            - No redirection status has been set.
            - Redirection is disabled.
            - Redirection is enabled.
            - 'Redirection is enabled, and has been finalized so cannot be reverted.'
          enumDeprecated:
            - false
            - false
            - false
            - true
          description: The redirection state of the legacy repositories in this project.
          enum:
            - REDIRECTION_STATE_UNSPECIFIED
            - REDIRECTION_FROM_GCR_IO_DISABLED
            - REDIRECTION_FROM_GCR_IO_ENABLED
            - REDIRECTION_FROM_GCR_IO_FINALIZED
          type: string
      description: The Artifact Registry settings that apply to a Project.
      type: object
    YumArtifact:
      id: YumArtifact
      properties:
        architecture:
          description: Output only. Operating system architecture of the artifact.
          type: string
          readOnly: true
        name:
          description: Output only. The Artifact Registry resource name of the artifact.
          type: string
          readOnly: true
        packageType:
          type: string
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
          enumDescriptions:
            - Package type is not specified.
            - Binary package (.rpm).
            - Source package (.srpm).
          description: Output only. An artifact is a binary or source package.
          readOnly: true
        packageName:
          type: string
          readOnly: true
          description: Output only. The yum package name of the artifact.
      description: A detailed representation of a Yum artifact.
      type: object
    ListPythonPackagesResponse:
      id: ListPythonPackagesResponse
      description: The response from listing python packages.
      type: object
      properties:
        pythonPackages:
          description: The python packages returned.
          type: array
          items:
            $ref: '#/components/schemas/PythonPackage'
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
    UploadYumArtifactRequest:
      type: object
      id: UploadYumArtifactRequest
      description: The request to upload an artifact.
      properties: {}
    MavenRepository:
      properties:
        publicRepository:
          description: One of the publicly available Maven repositories supported by Artifact Registry.
          enumDescriptions:
            - Unspecified repository.
            - Maven Central.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - MAVEN_CENTRAL
          type: string
      description: Configuration for a Maven remote repository.
      id: MavenRepository
      type: object
    NpmPackage:
      properties:
        name:
          type: string
          description: 'Required. registry_location, project_id, repository_name and npm_package forms a unique package For example, "projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/ npm_test:1.0.0", where "us-west4" is the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and npm_test:1.0.0" is the npm package.'
        updateTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Time the package was updated.
        createTime:
          format: google-datetime
          description: Output only. Time the package was created.
          readOnly: true
          type: string
        tags:
          items:
            type: string
          type: array
          description: Tags attached to this package.
        packageName:
          description: Package for the artifact.
          type: string
        version:
          type: string
          description: Version of this package.
      description: NpmPackage represents an npm artifact.
      type: object
      id: NpmPackage
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository:
      description: Publicly available Apt repositories constructed from a common repository base and a custom repository path.
      properties:
        repositoryPath:
          description: A custom field to define a path to a specific repository from the base.
          type: string
        repositoryBase:
          enumDescriptions:
            - Unspecified repository base.
            - Debian.
            - Ubuntu LTS/Pro.
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - DEBIAN
            - UBUNTU
          type: string
          description: A common public repository base for Apt.
      id: GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository
      type: object
    Hash:
      id: Hash
      properties:
        value:
          type: string
          description: The hash value.
          format: byte
        type:
          type: string
          description: The algorithm used to compute the hash value.
          enumDescriptions:
            - Unspecified.
            - SHA256 hash.
            - MD5 hash.
          enum:
            - HASH_TYPE_UNSPECIFIED
            - SHA256
            - MD5
      description: A hash of file content.
      type: object
    UploadAptArtifactResponse:
      type: object
      properties:
        aptArtifacts:
          items:
            $ref: '#/components/schemas/AptArtifact'
          type: array
          description: The Apt artifacts updated.
      id: UploadAptArtifactResponse
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
    UploadYumArtifactResponse:
      type: object
      id: UploadYumArtifactResponse
      description: The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
      properties:
        yumArtifacts:
          items:
            $ref: '#/components/schemas/YumArtifact'
          type: array
          description: The Apt artifacts updated.
    GoogleDevtoolsArtifactregistryV1File:
      type: object
      properties:
        sizeBytes:
          description: The size of the File in bytes.
          format: int64
          type: string
        name:
          type: string
          description: 'The name of the file, for example: "projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt". If the file ID part contains slashes, they are escaped.'
        hashes:
          description: The hashes of the file content.
          type: array
          items:
            $ref: '#/components/schemas/Hash'
        owner:
          description: 'The name of the Package or Version that owns this file, if any.'
          type: string
        updateTime:
          description: Output only. The time when the File was last updated.
          type: string
          readOnly: true
          format: google-datetime
        fetchTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The time when the last attempt to refresh the file's data was made. Only set when the repository is remote.
        createTime:
          type: string
          format: google-datetime
          description: Output only. The time when the File was created.
          readOnly: true
      id: GoogleDevtoolsArtifactregistryV1File
      description: Files store content that is potentially associated with Packages or Versions.
    UploadGoogetArtifactMetadata:
      type: object
      id: UploadGoogetArtifactMetadata
      properties: {}
      description: The operation metadata for uploading artifacts.
    ListTagsResponse:
      id: ListTagsResponse
      description: The response from listing tags.
      properties:
        nextPageToken:
          description: 'The token to retrieve the next page of tags, or empty if there are no more tags to return.'
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: The tags returned.
      type: object
    YumRepository:
      description: Configuration for a Yum remote repository.
      id: YumRepository
      properties:
        publicRepository:
          description: One of the publicly available Yum repositories supported by Artifact Registry.
          $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository'
      type: object
    AptArtifact:
      description: 'A detailed representation of an Apt artifact. Information in the record is derived from the archive''s control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html'
      type: object
      id: AptArtifact
      properties:
        name:
          readOnly: true
          type: string
          description: Output only. The Artifact Registry resource name of the artifact.
        packageName:
          description: Output only. The Apt package name of the artifact.
          readOnly: true
          type: string
        architecture:
          description: Output only. Operating system architecture of the artifact.
          type: string
          readOnly: true
        controlFile:
          format: byte
          type: string
          description: Output only. Contents of the artifact's control metadata file.
          readOnly: true
        packageType:
          readOnly: true
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
          description: Output only. An artifact is a binary or source package.
          enumDescriptions:
            - Package type is not specified.
            - Binary package.
            - Source package.
          type: string
        component:
          type: string
          description: Output only. Repository component of the artifact.
          readOnly: true
    ImportYumArtifactsResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/ImportYumArtifactsErrorInfo'
          description: Detailed error info for packages that were not imported.
          type: array
        yumArtifacts:
          items:
            $ref: '#/components/schemas/YumArtifact'
          type: array
          description: The yum artifacts imported.
      type: object
      description: The response message from importing YUM artifacts.
      id: ImportYumArtifactsResponse
    ListVersionsResponse:
      description: The response from listing versions.
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'The token to retrieve the next page of versions, or empty if there are no more versions to return.'
        versions:
          description: The versions returned.
          type: array
          items:
            $ref: '#/components/schemas/Version'
      id: ListVersionsResponse
    GoModule:
      type: object
      properties:
        version:
          description: 'The version of the Go module. Must be a valid canonical version as defined in https://go.dev/ref/mod#glos-canonical-version.'
          type: string
        createTime:
          type: string
          description: Output only. The time when the Go module is created.
          format: google-datetime
          readOnly: true
        updateTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The time when the Go module is updated.
        name:
          type: string
          description: The resource name of a Go module.
      description: GoModule represents a Go module.
      id: GoModule
    CleanupPolicyCondition:
      type: object
      description: 'CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.'
      properties:
        olderThan:
          description: Match versions older than a duration.
          type: string
          format: google-duration
        newerThan:
          description: Match versions newer than a duration.
          type: string
          format: google-duration
        versionNamePrefixes:
          items:
            type: string
          description: Match versions by version name prefix. Applied on any prefix match.
          type: array
        packageNamePrefixes:
          type: array
          description: Match versions by package prefix. Applied on any prefix match.
          items:
            type: string
        versionAge:
          description: 'DEPRECATED: Use older_than.'
          deprecated: true
          type: string
          format: google-duration
        tagState:
          description: Match versions by tag status.
          type: string
          enum:
            - TAG_STATE_UNSPECIFIED
            - TAGGED
            - UNTAGGED
            - ANY
          enumDescriptions:
            - Tag status not specified.
            - Applies to tagged versions only.
            - Applies to untagged versions only.
            - Applies to all versions.
        tagPrefixes:
          type: array
          items:
            type: string
          description: Match versions by tag prefix. Applied on any prefix match.
      id: CleanupPolicyCondition
    UploadGoogetArtifactMediaResponse:
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
      type: object
      description: The response to upload an artifact.
      id: UploadGoogetArtifactMediaResponse
    ListMavenArtifactsResponse:
      description: The response from listing maven artifacts.
      type: object
      properties:
        mavenArtifacts:
          description: The maven artifacts returned.
          type: array
          items:
            $ref: '#/components/schemas/MavenArtifact'
        nextPageToken:
          description: 'The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return.'
          type: string
      id: ListMavenArtifactsResponse
    ImportAptArtifactsGcsSource:
      type: object
      id: ImportAptArtifactsGcsSource
      description: Google Cloud Storage location where the artifacts currently reside.
      properties:
        useWildcards:
          description: Supports URI wildcards for matching multiple objects from a single URI.
          type: boolean
        uris:
          type: array
          items:
            type: string
          description: 'Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
    MavenRepositoryConfig:
      id: MavenRepositoryConfig
      type: object
      description: MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.
      properties:
        versionPolicy:
          type: string
          description: Version policy defines the versions that the registry will accept.
          enum:
            - VERSION_POLICY_UNSPECIFIED
            - RELEASE
            - SNAPSHOT
          enumDescriptions:
            - 'VERSION_POLICY_UNSPECIFIED - the version policy is not defined. When the version policy is not defined, no validation is performed for the versions.'
            - RELEASE - repository will accept only Release versions.
            - SNAPSHOT - repository will accept only Snapshot versions.
        allowSnapshotOverwrites:
          description: The repository with this flag will allow publishing the same snapshot versions.
          type: boolean
    ImportGoogetArtifactsGcsSource:
      id: ImportGoogetArtifactsGcsSource
      type: object
      properties:
        useWildcards:
          description: Supports URI wildcards for matching multiple objects from a single URI.
          type: boolean
        uris:
          type: array
          items:
            type: string
          description: 'Cloud Storage paths URI (e.g., `gs://my_bucket/my_object`).'
      description: Google Cloud Storage location where the artifacts currently reside.
    CleanupPolicyMostRecentVersions:
      properties:
        keepCount:
          description: Minimum number of versions to keep.
          type: integer
          format: int32
        packageNamePrefixes:
          description: List of package name prefixes that will apply this rule.
          type: array
          items:
            type: string
      type: object
      description: CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.
      id: CleanupPolicyMostRecentVersions
    ImportGoogetArtifactsResponse:
      type: object
      id: ImportGoogetArtifactsResponse
      description: The response message from importing artifacts.
      properties:
        googetArtifacts:
          items:
            $ref: '#/components/schemas/GoogetArtifact'
          type: array
          description: The GooGet artifacts updated.
        errors:
          description: Detailed error info for packages that were not imported.
          items:
            $ref: '#/components/schemas/ImportGoogetArtifactsErrorInfo'
          type: array
    ImportYumArtifactsGcsSource:
      description: Google Cloud Storage location where the artifacts currently reside.
      id: ImportYumArtifactsGcsSource
      type: object
      properties:
        useWildcards:
          description: Supports URI wildcards for matching multiple objects from a single URI.
          type: boolean
        uris:
          type: array
          items:
            type: string
          description: 'Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
    UploadAptArtifactMetadata:
      description: The operation metadata for uploading artifacts.
      properties: {}
      type: object
      id: UploadAptArtifactMetadata
    Package:
      description: Packages are named collections of versions.
      type: object
      properties:
        displayName:
          description: The display name of the package.
          type: string
        name:
          type: string
          description: 'The name of the package, for example: `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`. If the package ID part contains slashes, the slashes are escaped.'
        updateTime:
          description: The time when the package was last updated. This includes publishing a new version of the package.
          format: google-datetime
          type: string
        createTime:
          description: The time when the package was created.
          type: string
          format: google-datetime
      id: Package
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          type: array
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
      id: ListLocationsResponse
    UploadGoModuleMetadata:
      type: object
      description: The operation metadata for uploading go modules.
      properties: {}
      id: UploadGoModuleMetadata
    VPCSCConfig:
      properties:
        name:
          description: 'The name of the project''s VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set'
          type: string
        vpcscPolicy:
          enum:
            - VPCSC_POLICY_UNSPECIFIED
            - DENY
            - ALLOW
          description: The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).
          enumDescriptions:
            - VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined. When VPS SC policy is not defined - the Service will use the default behavior (VPCSC_DENY).
            - VPCSC_DENY - repository will block the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.
            - VPCSC_ALLOW - repository will allow the requests to the Upstreams for the Remote Repositories if the resource is in the perimeter.
          type: string
      type: object
      id: VPCSCConfig
      description: The Artifact Registry VPC SC config that apply to a Project.
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository:
      id: GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository
      properties:
        repositoryPath:
          type: string
          description: A custom field to define a path to a specific repository from the base.
        repositoryBase:
          enumDescriptions:
            - Unspecified repository base.
            - CentOS.
            - CentOS Debug.
            - CentOS Vault.
            - CentOS Stream.
            - Rocky.
            - Fedora Extra Packages for Enterprise Linux (EPEL).
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - CENTOS
            - CENTOS_DEBUG
            - CENTOS_VAULT
            - CENTOS_STREAM
            - ROCKY
            - EPEL
          type: string
          description: A common public repository base for Yum.
      description: Publicly available Yum repositories constructed from a common repository base and a custom repository path.
      type: object
    UpstreamPolicy:
      properties:
        repository:
          description: 'A reference to the repository resource, for example: "projects/p1/locations/us-central1/repositories/repo1".'
          type: string
        priority:
          type: integer
          format: int32
          description: Entries with a greater priority value take precedence in the pull order.
        id:
          description: The user-provided ID of the upstream policy.
          type: string
      id: UpstreamPolicy
      type: object
      description: Artifact policy configuration for the repository contents.
    UploadGoogetArtifactRequest:
      id: UploadGoogetArtifactRequest
      properties: {}
      type: object
      description: The request to upload an artifact.
    ImportYumArtifactsRequest:
      properties:
        gcsSource:
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
          description: Google Cloud Storage location where input content is located.
      type: object
      id: ImportYumArtifactsRequest
      description: The request to import new yum artifacts.
    UploadKfpArtifactMetadata:
      description: The operation metadata for uploading KFP artifacts.
      properties: {}
      id: UploadKfpArtifactMetadata
      type: object
    DockerRepositoryConfig:
      description: DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.
      type: object
      properties:
        immutableTags:
          description: 'The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.'
          type: boolean
      id: DockerRepositoryConfig
    VirtualRepositoryConfig:
      type: object
      description: Virtual repository configuration.
      id: VirtualRepositoryConfig
      properties:
        upstreamPolicies:
          type: array
          items:
            $ref: '#/components/schemas/UpstreamPolicy'
          description: Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.
    UploadGoModuleRequest:
      description: The request to upload a Go module.
      type: object
      id: UploadGoModuleRequest
      properties: {}
  parameters:
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    vpcsc_config:
      id: google.artifactregistry.vpcsc_config
      name: vpcsc_config
      title: Vpcsc Config
      methods:
        get_vpcsc_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_vpcsc_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vpcsc_config/methods/get_vpcsc_config'
        insert: []
        update: []
        delete: []
    locations:
      id: google.artifactregistry.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
        insert: []
        update: []
        delete: []
    python_packages:
      id: google.artifactregistry.python_packages
      name: python_packages
      title: Python Packages
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.pythonPackages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages~1{pythonPackagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/list'
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/get'
        insert: []
        update: []
        delete: []
    maven_artifacts:
      id: google.artifactregistry.maven_artifacts
      name: maven_artifacts
      title: Maven Artifacts
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.mavenArtifacts
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts~1{mavenArtifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/list'
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/get'
        insert: []
        update: []
        delete: []
    files:
      id: google.artifactregistry.files
      name: files
      title: Files
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.files
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files~1{filesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/files/methods/list'
          - $ref: '#/components/x-stackQL-resources/files/methods/get'
        insert: []
        update: []
        delete: []
    tags:
      id: google.artifactregistry.tags
      name: tags
      title: Tags
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/get'
          - $ref: '#/components/x-stackQL-resources/tags/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/delete'
    versions:
      id: google.artifactregistry.versions
      name: versions
      title: Versions
      methods:
        batch_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions:batchDelete/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.versions
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/versions/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/delete'
    packages:
      id: google.artifactregistry.packages
      name: packages
      title: Packages
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.packages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/packages/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/packages/methods/delete'
    googet_artifacts:
      id: google.artifactregistry.googet_artifacts
      name: googet_artifacts
      title: Googet Artifacts
      methods:
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    kfp_artifacts:
      id: google.artifactregistry.kfp_artifacts
      name: kfp_artifacts
      title: Kfp Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1kfpArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    apt_artifacts:
      id: google.artifactregistry.apt_artifacts
      name: apt_artifacts
      title: Apt Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    npm_packages:
      id: google.artifactregistry.npm_packages
      name: npm_packages
      title: Npm Packages
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.npmPackages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages~1{npmPackagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/list'
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/get'
        insert: []
        update: []
        delete: []
    docker_images:
      id: google.artifactregistry.docker_images
      name: docker_images
      title: Docker Images
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages~1{dockerImagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dockerImages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/get'
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/list'
        insert: []
        update: []
        delete: []
    yum_artifacts:
      id: google.artifactregistry.yum_artifacts
      name: yum_artifacts
      title: Yum Artifacts
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    go_modules:
      id: google.artifactregistry.go_modules
      name: go_modules
      title: Go Modules
      methods:
        upload:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1goModules:create/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    repositories_iam_policies:
      id: google.artifactregistry.repositories_iam_policies
      name: repositories_iam_policies
      title: Repositories Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    repositories:
      id: google.artifactregistry.repositories
      name: repositories
      title: Repositories
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/get'
          - $ref: '#/components/x-stackQL-resources/repositories/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/delete'
    operations:
      id: google.artifactregistry.operations
      name: operations
      title: Operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
        insert: []
        update: []
        delete: []
    project_settings:
      id: google.artifactregistry.project_settings
      name: project_settings
      title: Project Settings
      methods:
        get_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/project_settings/methods/get_project_settings'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig':
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
    get:
      description: Retrieves the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.getVpcscConfig
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: vpcsc_config
      x-stackQL-method: get_vpcsc_config
      x-stackQL-verb: select
    patch:
      description: Updates the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.updateVpcscConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPCSCConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: vpcsc_config
      x-stackQL-method: update_vpcsc_config
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: artifactregistry.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: artifactregistry.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages':
    parameters: *ref_1
    get:
      description: Lists python packages.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPythonPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: python_packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.pythonPackages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}':
    parameters: *ref_1
    get:
      description: Gets a python package.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PythonPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: pythonPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: python_packages
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts':
    parameters: *ref_1
    get:
      description: Lists maven artifacts.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMavenArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: maven_artifacts
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.mavenArtifacts
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}':
    parameters: *ref_1
    get:
      description: Gets a maven artifact.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: mavenArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: maven_artifacts
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files':
    parameters: *ref_1
    get:
      description: Lists files.
      operationId: artifactregistry.projects.locations.repositories.files.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: files
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.files
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}':
    parameters: *ref_1
    get:
      description: Gets a file.
      operationId: artifactregistry.projects.locations.repositories.files.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: filesId
          required: true
          schema:
            type: string
      x-stackQL-resource: files
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}':
    parameters: *ref_1
    delete:
      description: Deletes a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags':
    parameters: *ref_1
    get:
      description: Lists tags.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.tags
    post:
      description: Creates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: tagId
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions:batchDelete':
    parameters: *ref_1
    post:
      description: Deletes multiple versions across a repository. The returned operation will complete once the versions have been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.batchDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteVersionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: batch_delete
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}':
    parameters: *ref_1
    get:
      description: Gets a version
      operationId: artifactregistry.projects.locations.repositories.packages.versions.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a version and all of its content. The returned operation will complete once the version has been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: versions
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions':
    parameters: *ref_1
    get:
      description: Lists versions.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: versions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.versions
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}':
    parameters: *ref_1
    get:
      description: Gets a package.
      operationId: artifactregistry.projects.locations.repositories.packages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: packages
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: packages
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages':
    parameters: *ref_1
    get:
      description: Lists packages.
      operationId: artifactregistry.projects.locations.repositories.packages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.packages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports GooGet artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportGoogetArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: googet_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a GooGet artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoogetArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoogetArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: googet_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a KFP artifact. The returned Operation will complete once the resource is uploaded. Package, Version, and File resources will be created based on the uploaded artifact. Uploaded artifacts that conflict with existing resources will be overwritten.'
      operationId: artifactregistry.projects.locations.repositories.kfpArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadKfpArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadKfpArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: kfp_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAptArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAptArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: apt_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAptArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: apt_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages':
    parameters: *ref_1
    get:
      description: Lists npm packages.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNpmPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: npm_packages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.npmPackages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}':
    parameters: *ref_1
    get:
      description: Gets a npm package.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NpmPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: npmPackagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: npm_packages
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}':
    parameters: *ref_1
    get:
      description: Gets a docker image.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerImage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: dockerImagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: docker_images
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages':
    parameters: *ref_1
    get:
      description: Lists docker images.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDockerImagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: docker_images
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.dockerImages
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadYumArtifactRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadYumArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: yum_artifacts
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import':
    parameters: *ref_1
    post:
      description: 'Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.'
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportYumArtifactsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: yum_artifacts
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/goModules:create':
    parameters: *ref_1
    post:
      description: 'Directly uploads a Go module. The returned Operation will complete once the Go module is uploaded. Package, Version, and File resources are created based on the uploaded Go module.'
      operationId: artifactregistry.projects.locations.repositories.goModules.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoModuleRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoModuleMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: go_modules
      x-stackQL-method: upload
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}':
    parameters: *ref_1
    get:
      description: Gets a repository.
      operationId: artifactregistry.projects.locations.repositories.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.
      operationId: artifactregistry.projects.locations.repositories.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates a repository.
      operationId: artifactregistry.projects.locations.repositories.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories':
    parameters: *ref_1
    get:
      description: Lists repositories.
      operationId: artifactregistry.projects.locations.repositories.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.repositories
    post:
      description: Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
      operationId: artifactregistry.projects.locations.repositories.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: repositoryId
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: Tests if the caller has a list of permissions on a resource.
      operationId: artifactregistry.projects.locations.repositories.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: Updates the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: artifactregistry.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/projectSettings':
    parameters: *ref_1
    get:
      description: Retrieves the Settings for the Project.
      operationId: artifactregistry.projects.getProjectSettings
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: project_settings
      x-stackQL-method: get_project_settings
      x-stackQL-verb: select
    patch:
      description: Updates the Settings for the Project.
      operationId: artifactregistry.projects.updateProjectSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettings'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: project_settings
      x-stackQL-method: update_project_settings
      x-stackQL-verb: exec
