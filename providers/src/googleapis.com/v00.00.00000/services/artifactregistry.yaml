openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Artifact Registry API
  description: >-
    Store and manage build artifacts in a scalable and integrated service built
    on Google infrastructure.
  version: v1
  x-discovery-doc-revision: '20240520'
  x-generated-date: '2024-06-03'
externalDocs:
  url: https://cloud.google.com/artifacts/docs/
servers:
  - url: https://artifactregistry.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/cloud-platform.read-only: >-
              View your data across Google Cloud services and see the email
              address of your Google Account
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    ListDockerImagesResponse:
      id: ListDockerImagesResponse
      description: The response from listing docker images.
      type: object
      properties:
        dockerImages:
          description: The docker images returned.
          type: array
          items:
            $ref: '#/components/schemas/DockerImage'
        nextPageToken:
          description: >-
            The token to retrieve the next page of artifacts, or empty if there
            are no more artifacts to return.
          type: string
    DockerImage:
      id: DockerImage
      description: >-
        DockerImage represents a docker artifact. The following fields are
        returned as untyped metadata in the Version resource, using camelcase
        keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType *
        buildTime
      type: object
      properties:
        name:
          description: >-
            Required. registry_location, project_id, repository_name and image
            id forms a unique image
            name:`projects//locations//repository//dockerImages/`. For example,
            "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/
            nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf",
            where "us-west4" is the registry_location, "test-project" is the
            project_id, "test-repo" is the repository_name and
            "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf"
            is the image's digest.
          type: string
        uri:
          description: >-
            Required. URL to access the image. Example:
            us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
          type: string
        tags:
          description: Tags attached to this image.
          type: array
          items:
            type: string
        imageSizeBytes:
          description: >-
            Calculated size of the image. This field is returned as the
            'metadata.imageSizeBytes' field in the Version resource.
          type: string
          format: int64
        uploadTime:
          description: Time the image was uploaded.
          type: string
          format: google-datetime
        mediaType:
          description: >-
            Media type of this image, e.g.
            "application/vnd.docker.distribution.manifest.v2+json". This field
            is returned as the 'metadata.mediaType' field in the Version
            resource.
          type: string
        buildTime:
          description: >-
            The time this image was built. This field is returned as the
            'metadata.buildTime' field in the Version resource. The build time
            is returned to the client as an RFC 3339 string, which can be easily
            used with the JavaScript Date constructor.
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the docker image was last updated.
          readOnly: true
          type: string
          format: google-datetime
    ListMavenArtifactsResponse:
      id: ListMavenArtifactsResponse
      description: The response from listing maven artifacts.
      type: object
      properties:
        mavenArtifacts:
          description: The maven artifacts returned.
          type: array
          items:
            $ref: '#/components/schemas/MavenArtifact'
        nextPageToken:
          description: >-
            The token to retrieve the next page of artifacts, or empty if there
            are no more artifacts to return.
          type: string
    MavenArtifact:
      id: MavenArtifact
      description: MavenArtifact represents a maven artifact.
      type: object
      properties:
        name:
          description: >-
            Required. registry_location, project_id, repository_name and
            maven_artifact forms a unique artifact For example,
            "projects/test-project/locations/us-west4/repositories/test-repo/mavenArtifacts/
            com.google.guava:guava:31.0-jre", where "us-west4" is the
            registry_location, "test-project" is the project_id, "test-repo" is
            the repository_name and "com.google.guava:guava:31.0-jre" is the
            maven artifact.
          type: string
        pomUri:
          description: >-
            Required. URL to access the pom file of the artifact. Example:
            us-west4-maven.pkg.dev/test-project/test-repo/com/google/guava/guava/31.0/guava-31.0.pom
          type: string
        groupId:
          description: 'Group ID for the artifact. Example: com.google.guava'
          type: string
        artifactId:
          description: Artifact ID for the artifact.
          type: string
        version:
          description: Version of this artifact.
          type: string
        createTime:
          description: Output only. Time the artifact was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. Time the artifact was updated.
          readOnly: true
          type: string
          format: google-datetime
    ListNpmPackagesResponse:
      id: ListNpmPackagesResponse
      description: The response from listing npm packages.
      type: object
      properties:
        npmPackages:
          description: The npm packages returned.
          type: array
          items:
            $ref: '#/components/schemas/NpmPackage'
        nextPageToken:
          description: >-
            The token to retrieve the next page of artifacts, or empty if there
            are no more artifacts to return.
          type: string
    NpmPackage:
      id: NpmPackage
      description: NpmPackage represents an npm artifact.
      type: object
      properties:
        name:
          description: >-
            Required. registry_location, project_id, repository_name and
            npm_package forms a unique package For example,
            "projects/test-project/locations/us-west4/repositories/test-repo/npmPackages/
            npm_test:1.0.0", where "us-west4" is the registry_location,
            "test-project" is the project_id, "test-repo" is the repository_name
            and npm_test:1.0.0" is the npm package.
          type: string
        packageName:
          description: Package for the artifact.
          type: string
        version:
          description: Version of this package.
          type: string
        tags:
          description: Tags attached to this package.
          type: array
          items:
            type: string
        createTime:
          description: Output only. Time the package was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. Time the package was updated.
          readOnly: true
          type: string
          format: google-datetime
    ListPythonPackagesResponse:
      id: ListPythonPackagesResponse
      description: The response from listing python packages.
      type: object
      properties:
        pythonPackages:
          description: The python packages returned.
          type: array
          items:
            $ref: '#/components/schemas/PythonPackage'
        nextPageToken:
          description: >-
            The token to retrieve the next page of artifacts, or empty if there
            are no more artifacts to return.
          type: string
    PythonPackage:
      id: PythonPackage
      description: PythonPackage represents a python artifact.
      type: object
      properties:
        name:
          description: >-
            Required. registry_location, project_id, repository_name and
            python_package forms a unique package
            name:`projects//locations//repository//pythonPackages/`. For
            example,
            "projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/
            python_package:1.0.0", where "us-west4" is the registry_location,
            "test-project" is the project_id, "test-repo" is the repository_name
            and python_package:1.0.0" is the python package.
          type: string
        uri:
          description: >-
            Required. URL to access the package. Example:
            us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz
          type: string
        packageName:
          description: Package for the artifact.
          type: string
        version:
          description: Version of this package.
          type: string
        createTime:
          description: Output only. Time the package was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. Time the package was updated.
          readOnly: true
          type: string
          format: google-datetime
    ImportAptArtifactsRequest:
      id: ImportAptArtifactsRequest
      description: The request to import new apt artifacts.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
    ImportAptArtifactsGcsSource:
      id: ImportAptArtifactsGcsSource
      description: Google Cloud Storage location where the artifacts currently reside.
      type: object
      properties:
        uris:
          description: Cloud Storage paths URI (e.g., gs://my_bucket//my_object).
          type: array
          items:
            type: string
        useWildcards:
          description: >-
            Supports URI wildcards for matching multiple objects from a single
            URI.
          type: boolean
    ImportYumArtifactsRequest:
      id: ImportYumArtifactsRequest
      description: The request to import new yum artifacts.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
    ImportYumArtifactsGcsSource:
      id: ImportYumArtifactsGcsSource
      description: Google Cloud Storage location where the artifacts currently reside.
      type: object
      properties:
        uris:
          description: Cloud Storage paths URI (e.g., gs://my_bucket//my_object).
          type: array
          items:
            type: string
        useWildcards:
          description: >-
            Supports URI wildcards for matching multiple objects from a single
            URI.
          type: boolean
    ImportGoogetArtifactsRequest:
      id: ImportGoogetArtifactsRequest
      description: The request to import new googet artifacts.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location where input content is located.
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
    ImportGoogetArtifactsGcsSource:
      id: ImportGoogetArtifactsGcsSource
      description: Google Cloud Storage location where the artifacts currently reside.
      type: object
      properties:
        uris:
          description: Cloud Storage paths URI (e.g., `gs://my_bucket/my_object`).
          type: array
          items:
            type: string
        useWildcards:
          description: >-
            Supports URI wildcards for matching multiple objects from a single
            URI.
          type: boolean
    UploadAptArtifactRequest:
      id: UploadAptArtifactRequest
      description: The request to upload an artifact.
      type: object
      properties: {}
    UploadAptArtifactMediaResponse:
      id: UploadAptArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
    UploadYumArtifactRequest:
      id: UploadYumArtifactRequest
      description: The request to upload an artifact.
      type: object
      properties: {}
    UploadYumArtifactMediaResponse:
      id: UploadYumArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
    UploadGenericArtifactRequest:
      id: UploadGenericArtifactRequest
      description: >-
        The request to upload a generic artifact. The created GenericArtifact
        will have the resource name
        {parent}/genericArtifacts/package_id:version_id. The created file will
        have the resource name {parent}/files/package_id:version_id:filename.
      type: object
      properties:
        packageId:
          description: >-
            The ID of the package of the generic artifact. If the package does
            not exist, a new package will be created. The `package_id` must
            start with a letter, end with a letter or number, only contain
            letters, numbers, hyphens and periods i.e. [a-z0-9-.], and cannot
            exceed 256 characters.
          type: string
        versionId:
          description: >-
            The ID of the version of the generic artifact. If the version does
            not exist, a new version will be created. The version_id must start
            and end with a letter or number, can only contain lowercase letters,
            numbers, hyphens and periods, i.e. [a-z0-9-.] and cannot exceed a
            total of 128 characters. Creating a version called `latest` is not
            allowed.
          type: string
        filename:
          description: >-
            The name of the file of the generic artifact to be uploaded. E.g.
            `example-file.zip` The filename is limited to letters, numbers, and
            url safe characters, i.e. [a-zA-Z0-9-_.~@].
          type: string
    UploadGenericArtifactMediaResponse:
      id: UploadGenericArtifactMediaResponse
      description: The response to upload a generic artifact.
      type: object
      properties:
        operation:
          description: Operation that will be returned to the user.
          $ref: '#/components/schemas/Operation'
    UploadKfpArtifactRequest:
      id: UploadKfpArtifactRequest
      description: The request to upload an artifact.
      type: object
      properties:
        tags:
          description: Tags to be created with the version.
          type: array
          items:
            type: string
        description:
          description: Description of the package version.
          type: string
    UploadKfpArtifactMediaResponse:
      id: UploadKfpArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          description: Operation that will be returned to the user.
          $ref: '#/components/schemas/Operation'
    UploadGoModuleRequest:
      id: UploadGoModuleRequest
      description: The request to upload a Go module.
      type: object
      properties: {}
    UploadGoModuleMediaResponse:
      id: UploadGoModuleMediaResponse
      description: The response to upload a Go module.
      type: object
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
    UploadGoogetArtifactRequest:
      id: UploadGoogetArtifactRequest
      description: The request to upload an artifact.
      type: object
      properties: {}
    UploadGoogetArtifactMediaResponse:
      id: UploadGoogetArtifactMediaResponse
      description: The response to upload an artifact.
      type: object
      properties:
        operation:
          description: Operation to be returned to the user.
          $ref: '#/components/schemas/Operation'
    ListRepositoriesResponse:
      id: ListRepositoriesResponse
      description: The response from listing repositories.
      type: object
      properties:
        repositories:
          description: The repositories returned.
          type: array
          items:
            $ref: '#/components/schemas/Repository'
        nextPageToken:
          description: >-
            The token to retrieve the next page of repositories, or empty if
            there are no more repositories to return.
          type: string
    Repository:
      id: Repository
      description: A Repository for storing artifacts with a specific format.
      type: object
      properties:
        mavenConfig:
          description: >-
            Maven repository config contains repository level configuration for
            the repositories of maven type.
          $ref: '#/components/schemas/MavenRepositoryConfig'
        dockerConfig:
          description: >-
            Docker repository config contains repository level configuration for
            the repositories of docker type.
          $ref: '#/components/schemas/DockerRepositoryConfig'
        virtualRepositoryConfig:
          description: Configuration specific for a Virtual Repository.
          $ref: '#/components/schemas/VirtualRepositoryConfig'
        remoteRepositoryConfig:
          description: Configuration specific for a Remote Repository.
          $ref: '#/components/schemas/RemoteRepositoryConfig'
        name:
          description: >-
            The name of the repository, for example:
            `projects/p1/locations/us-central1/repositories/repo1`. For each
            location in a project, repository names must be unique.
          type: string
        format:
          description: Optional. The format of packages that are stored in the repository.
          type: string
          enumDescriptions:
            - Unspecified package format.
            - Docker package format.
            - Maven package format.
            - NPM package format.
            - APT package format.
            - YUM package format.
            - GooGet package format.
            - Python package format.
            - Kubeflow Pipelines package format.
            - Go package format.
            - Generic package format.
          enum:
            - FORMAT_UNSPECIFIED
            - DOCKER
            - MAVEN
            - NPM
            - APT
            - YUM
            - GOOGET
            - PYTHON
            - KFP
            - GO
            - GENERIC
        description:
          description: The user-provided description of the repository.
          type: string
        labels:
          description: >-
            Labels with user-defined metadata. This field may contain up to 64
            entries. Label keys and values may be no longer than 63 characters.
            Label keys must begin with a lowercase letter and may only contain
            lowercase letters, numeric characters, underscores, and dashes.
          type: object
          additionalProperties:
            type: string
        createTime:
          description: Output only. The time when the repository was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the repository was last updated.
          readOnly: true
          type: string
          format: google-datetime
        kmsKeyName:
          description: >-
            The Cloud KMS resource name of the customer managed encryption key
            that's used to encrypt the contents of the Repository. Has the form:
            `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`.
            This value may not be changed after the Repository has been created.
          type: string
        mode:
          description: Optional. The mode of the repository.
          type: string
          enumDescriptions:
            - Unspecified mode.
            - A standard repository storing artifacts.
            - A virtual repository to serve artifacts from one or more sources.
            - A remote repository to serve artifacts from a remote source.
            - An AOSS repository provides artifacts from AOSS upstreams.
            - Replacement of AOSS_REPOSITORY.
          enum:
            - MODE_UNSPECIFIED
            - STANDARD_REPOSITORY
            - VIRTUAL_REPOSITORY
            - REMOTE_REPOSITORY
            - AOSS_REPOSITORY
            - ASSURED_OSS_REPOSITORY
        cleanupPolicies:
          description: >-
            Optional. Cleanup policies for this repository. Cleanup policies
            indicate when certain package versions can be automatically deleted.
            Map keys are policy IDs supplied by users during policy creation.
            They must unique within a repository and be under 128 characters in
            length.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CleanupPolicy'
        sizeBytes:
          description: >-
            Output only. The size, in bytes, of all artifact storage in this
            repository. Repositories that are generally available or in public
            preview use this to calculate storage costs.
          readOnly: true
          type: string
          format: int64
        satisfiesPzs:
          description: >-
            Output only. If set, the repository satisfies physical zone
            separation.
          readOnly: true
          type: boolean
        cleanupPolicyDryRun:
          description: >-
            Optional. If true, the cleanup pipeline is prevented from deleting
            versions in this repository.
          type: boolean
        disallowUnspecifiedMode:
          description: >-
            Optional. If this is true, an unspecified repo type will be treated
            as error rather than defaulting to standard.
          type: boolean
        satisfiesPzi:
          description: >-
            Output only. If set, the repository satisfies physical zone
            isolation.
          readOnly: true
          type: boolean
    MavenRepositoryConfig:
      id: MavenRepositoryConfig
      description: >-
        MavenRepositoryConfig is maven related repository details. Provides
        additional configuration details for repositories of the maven format
        type.
      type: object
      properties:
        allowSnapshotOverwrites:
          description: >-
            The repository with this flag will allow publishing the same
            snapshot versions.
          type: boolean
        versionPolicy:
          description: Version policy defines the versions that the registry will accept.
          type: string
          enumDescriptions:
            - >-
              VERSION_POLICY_UNSPECIFIED - the version policy is not defined.
              When the version policy is not defined, no validation is performed
              for the versions.
            - RELEASE - repository will accept only Release versions.
            - SNAPSHOT - repository will accept only Snapshot versions.
          enum:
            - VERSION_POLICY_UNSPECIFIED
            - RELEASE
            - SNAPSHOT
    DockerRepositoryConfig:
      id: DockerRepositoryConfig
      description: >-
        DockerRepositoryConfig is docker related repository details. Provides
        additional configuration details for repositories of the docker format
        type.
      type: object
      properties:
        immutableTags:
          description: >-
            The repository which enabled this flag prevents all tags from being
            modified, moved or deleted. This does not prevent tags from being
            created.
          type: boolean
    VirtualRepositoryConfig:
      id: VirtualRepositoryConfig
      description: Virtual repository configuration.
      type: object
      properties:
        upstreamPolicies:
          description: >-
            Policies that configure the upstream artifacts distributed by the
            Virtual Repository. Upstream policies cannot be set on a standard
            repository.
          type: array
          items:
            $ref: '#/components/schemas/UpstreamPolicy'
    UpstreamPolicy:
      id: UpstreamPolicy
      description: Artifact policy configuration for the repository contents.
      type: object
      properties:
        id:
          description: The user-provided ID of the upstream policy.
          type: string
        repository:
          description: >-
            A reference to the repository resource, for example:
            `projects/p1/locations/us-central1/repositories/repo1`.
          type: string
        priority:
          description: >-
            Entries with a greater priority value take precedence in the pull
            order.
          type: integer
          format: int32
    RemoteRepositoryConfig:
      id: RemoteRepositoryConfig
      description: Remote repository configuration.
      type: object
      properties:
        dockerRepository:
          description: Specific settings for a Docker remote repository.
          $ref: '#/components/schemas/DockerRepository'
        mavenRepository:
          description: Specific settings for a Maven remote repository.
          $ref: '#/components/schemas/MavenRepository'
        npmRepository:
          description: Specific settings for an Npm remote repository.
          $ref: '#/components/schemas/NpmRepository'
        pythonRepository:
          description: Specific settings for a Python remote repository.
          $ref: '#/components/schemas/PythonRepository'
        aptRepository:
          description: Specific settings for an Apt remote repository.
          $ref: '#/components/schemas/AptRepository'
        yumRepository:
          description: Specific settings for a Yum remote repository.
          $ref: '#/components/schemas/YumRepository'
        description:
          description: The description of the remote source.
          type: string
        upstreamCredentials:
          description: Optional. The credentials used to access the remote repository.
          $ref: '#/components/schemas/UpstreamCredentials'
        disableUpstreamValidation:
          description: >-
            Input only. A create/update remote repo option to avoid making a
            HEAD/GET request to validate a remote repo and any supplied upstream
            credentials.
          type: boolean
    DockerRepository:
      id: DockerRepository
      description: Configuration for a Docker remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Docker repositories supported by
            Artifact Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - Docker Hub.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - DOCKER_HUB
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigDockerRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigDockerRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigDockerRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the custom remote repository, for ex:
            "https://registry-1.docker.io".
          type: string
    MavenRepository:
      id: MavenRepository
      description: Configuration for a Maven remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Maven repositories supported by
            Artifact Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - Maven Central.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - MAVEN_CENTRAL
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigMavenRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigMavenRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigMavenRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the upstream remote repository, for
            ex: "https://my.maven.registry/".
          type: string
    NpmRepository:
      id: NpmRepository
      description: Configuration for a Npm remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Npm repositories supported by Artifact
            Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - npmjs.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - NPMJS
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigNpmRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigNpmRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigNpmRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the upstream remote repository, for
            ex: "https://my.npm.registry/".
          type: string
    PythonRepository:
      id: PythonRepository
      description: Configuration for a Python remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Python repositories supported by
            Artifact Registry.
          type: string
          enumDescriptions:
            - Unspecified repository.
            - PyPI.
          enum:
            - PUBLIC_REPOSITORY_UNSPECIFIED
            - PYPI
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigPythonRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigPythonRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigPythonRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the upstream remote repository, for
            ex: "https://my.python.registry/".
          type: string
    AptRepository:
      id: AptRepository
      description: Configuration for an Apt remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Apt repositories supported by Artifact
            Registry.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository
      description: >-
        Publicly available Apt repositories constructed from a common repository
        base and a custom repository path.
      type: object
      properties:
        repositoryBase:
          description: A common public repository base for Apt.
          type: string
          enumDescriptions:
            - Unspecified repository base.
            - Debian.
            - Ubuntu LTS/Pro.
            - Archived Debian.
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - DEBIAN
            - UBUNTU
            - DEBIAN_SNAPSHOT
        repositoryPath:
          description: >-
            A custom field to define a path to a specific repository from the
            base.
          type: string
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the upstream remote repository, for
            ex: "https://my.apt.registry/".
          type: string
    YumRepository:
      id: YumRepository
      description: Configuration for a Yum remote repository.
      type: object
      properties:
        publicRepository:
          description: >-
            One of the publicly available Yum repositories supported by Artifact
            Registry.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository
        customRepository:
          description: Customer-specified remote repository.
          $ref: >-
            #/components/schemas/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryCustomRepository
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository
      description: >-
        Publicly available Yum repositories constructed from a common repository
        base and a custom repository path.
      type: object
      properties:
        repositoryBase:
          description: A common public repository base for Yum.
          type: string
          enumDescriptions:
            - Unspecified repository base.
            - CentOS.
            - CentOS Debug.
            - CentOS Vault.
            - CentOS Stream.
            - Rocky.
            - Fedora Extra Packages for Enterprise Linux (EPEL).
          enum:
            - REPOSITORY_BASE_UNSPECIFIED
            - CENTOS
            - CENTOS_DEBUG
            - CENTOS_VAULT
            - CENTOS_STREAM
            - ROCKY
            - EPEL
        repositoryPath:
          description: >-
            A custom field to define a path to a specific repository from the
            base.
          type: string
    GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryCustomRepository:
      id: >-
        GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryCustomRepository
      description: Customer-specified publicly available remote repository.
      type: object
      properties:
        uri:
          description: >-
            An http/https uri reference to the upstream remote repository, for
            ex: "https://my.yum.registry/".
          type: string
    UpstreamCredentials:
      id: UpstreamCredentials
      description: The credentials to access the remote repository.
      type: object
      properties:
        usernamePasswordCredentials:
          description: Use username and password to access the remote repository.
          $ref: '#/components/schemas/UsernamePasswordCredentials'
    UsernamePasswordCredentials:
      id: UsernamePasswordCredentials
      description: Username and password credentials.
      type: object
      properties:
        username:
          description: The username to access the remote repository.
          type: string
        passwordSecretVersion:
          description: >-
            The Secret Manager key version that holds the password to access the
            remote repository. Must be in the format of
            `projects/{project}/secrets/{secret}/versions/{version}`.
          type: string
    CleanupPolicy:
      id: CleanupPolicy
      description: Artifact policy configuration for repository cleanup policies.
      type: object
      properties:
        condition:
          description: Policy condition for matching versions.
          $ref: '#/components/schemas/CleanupPolicyCondition'
        mostRecentVersions:
          description: >-
            Policy condition for retaining a minimum number of versions. May
            only be specified with a Keep action.
          $ref: '#/components/schemas/CleanupPolicyMostRecentVersions'
        id:
          description: The user-provided ID of the cleanup policy.
          type: string
        action:
          description: Policy action.
          type: string
          enumDescriptions:
            - Action not specified.
            - Delete action.
            - Keep action.
          enum:
            - ACTION_UNSPECIFIED
            - DELETE
            - KEEP
    CleanupPolicyCondition:
      id: CleanupPolicyCondition
      description: >-
        CleanupPolicyCondition is a set of conditions attached to a
        CleanupPolicy. If multiple entries are set, all must be satisfied for
        the condition to be satisfied.
      type: object
      properties:
        tagState:
          description: Match versions by tag status.
          type: string
          enumDescriptions:
            - Tag status not specified.
            - Applies to tagged versions only.
            - Applies to untagged versions only.
            - Applies to all versions.
          enum:
            - TAG_STATE_UNSPECIFIED
            - TAGGED
            - UNTAGGED
            - ANY
        tagPrefixes:
          description: Match versions by tag prefix. Applied on any prefix match.
          type: array
          items:
            type: string
        versionNamePrefixes:
          description: Match versions by version name prefix. Applied on any prefix match.
          type: array
          items:
            type: string
        packageNamePrefixes:
          description: Match versions by package prefix. Applied on any prefix match.
          type: array
          items:
            type: string
        olderThan:
          description: Match versions older than a duration.
          type: string
          format: google-duration
        newerThan:
          description: Match versions newer than a duration.
          type: string
          format: google-duration
    CleanupPolicyMostRecentVersions:
      id: CleanupPolicyMostRecentVersions
      description: >-
        CleanupPolicyMostRecentVersions is an alternate condition of a
        CleanupPolicy for retaining a minimum number of versions.
      type: object
      properties:
        packageNamePrefixes:
          description: List of package name prefixes that will apply this rule.
          type: array
          items:
            type: string
        keepCount:
          description: Minimum number of versions to keep.
          type: integer
          format: int32
    ListPackagesResponse:
      id: ListPackagesResponse
      description: The response from listing packages.
      type: object
      properties:
        packages:
          description: The packages returned.
          type: array
          items:
            $ref: '#/components/schemas/Package'
        nextPageToken:
          description: >-
            The token to retrieve the next page of packages, or empty if there
            are no more packages to return.
          type: string
    Package:
      id: Package
      description: Packages are named collections of versions.
      type: object
      properties:
        name:
          description: >-
            The name of the package, for example:
            `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
            If the package ID part contains slashes, the slashes are escaped.
          type: string
        displayName:
          description: The display name of the package.
          type: string
        createTime:
          description: The time when the package was created.
          type: string
          format: google-datetime
        updateTime:
          description: >-
            The time when the package was last updated. This includes publishing
            a new version of the package.
          type: string
          format: google-datetime
        annotations:
          description: Optional. Client specified annotations.
          type: object
          additionalProperties:
            type: string
    ListVersionsResponse:
      id: ListVersionsResponse
      description: The response from listing versions.
      type: object
      properties:
        versions:
          description: The versions returned.
          type: array
          items:
            $ref: '#/components/schemas/Version'
        nextPageToken:
          description: >-
            The token to retrieve the next page of versions, or empty if there
            are no more versions to return.
          type: string
    Version:
      id: Version
      description: >-
        The body of a version resource. A version resource represents a
        collection of components, such as files and other data. This may
        correspond to a version in many package management schemes.
      type: object
      properties:
        name:
          description: >-
            The name of the version, for example:
            "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1".
            If the package or version ID parts contain slashes, the slashes are
            escaped.
          type: string
        description:
          description: Optional. Description of the version, as specified in its metadata.
          type: string
        createTime:
          description: The time when the version was created.
          type: string
          format: google-datetime
        updateTime:
          description: The time when the version was last updated.
          type: string
          format: google-datetime
        relatedTags:
          description: >-
            Output only. A list of related tags. Will contain up to 100 tags
            that reference this version.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        metadata:
          description: >-
            Output only. Repository-specific Metadata stored against this
            version. The fields returned are defined by the underlying
            repository-specific resource. Currently, the resources could be:
            DockerImage MavenArtifact
          readOnly: true
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
    Tag:
      id: Tag
      description: >-
        Tags point to a version and represent an alternative name that can be
        used to access the version.
      type: object
      properties:
        name:
          description: >-
            The name of the tag, for example:
            "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1".
            If the package part contains slashes, the slashes are escaped. The
            tag part can only have characters in [a-zA-Z0-9\-._~:@], anything
            else must be URL encoded.
          type: string
        version:
          description: >-
            The name of the version the tag refers to, for example:
            "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811"
            If the package or version ID parts contain slashes, the slashes are
            escaped.
          type: string
    BatchDeleteVersionsRequest:
      id: BatchDeleteVersionsRequest
      description: The request to delete multiple versions across a repository.
      type: object
      properties:
        names:
          description: >-
            Required. The names of the versions to delete. A maximum of 10000
            versions can be deleted in a batch.
          type: array
          items:
            type: string
        validateOnly:
          description: >-
            If true, the request is performed without deleting data, following
            AIP-163.
          type: boolean
    ListFilesResponse:
      id: ListFilesResponse
      description: The response from listing files.
      type: object
      properties:
        files:
          description: The files returned.
          type: array
          items:
            $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
        nextPageToken:
          description: >-
            The token to retrieve the next page of files, or empty if there are
            no more files to return.
          type: string
    GoogleDevtoolsArtifactregistryV1File:
      id: GoogleDevtoolsArtifactregistryV1File
      description: >-
        Files store content that is potentially associated with Packages or
        Versions.
      type: object
      properties:
        name:
          description: >-
            The name of the file, for example:
            `projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt`.
            If the file ID part contains slashes, they are escaped.
          type: string
        sizeBytes:
          description: The size of the File in bytes.
          type: string
          format: int64
        hashes:
          description: The hashes of the file content.
          type: array
          items:
            $ref: '#/components/schemas/Hash'
        createTime:
          description: Output only. The time when the File was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the File was last updated.
          readOnly: true
          type: string
          format: google-datetime
        owner:
          description: The name of the Package or Version that owns this file, if any.
          type: string
        fetchTime:
          description: >-
            Output only. The time when the last attempt to refresh the file's
            data was made. Only set when the repository is remote.
          readOnly: true
          type: string
          format: google-datetime
    Hash:
      id: Hash
      description: A hash of file content.
      type: object
      properties:
        type:
          description: The algorithm used to compute the hash value.
          type: string
          enumDescriptions:
            - Unspecified.
            - SHA256 hash.
            - MD5 hash.
          enum:
            - HASH_TYPE_UNSPECIFIED
            - SHA256
            - MD5
        value:
          description: The hash value.
          type: string
          format: byte
    DownloadFileResponse:
      id: DownloadFileResponse
      description: The response to download a file.
      type: object
      properties: {}
    ListTagsResponse:
      id: ListTagsResponse
      description: The response from listing tags.
      type: object
      properties:
        tags:
          description: The tags returned.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        nextPageToken:
          description: >-
            The token to retrieve the next page of tags, or empty if there are
            no more tags to return.
          type: string
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
    ProjectSettings:
      id: ProjectSettings
      description: The Artifact Registry settings that apply to a Project.
      type: object
      properties:
        name:
          description: >-
            The name of the project's settings. Always of the form:
            projects/{project-id}/projectSettings In update request: never set
            In response: always set
          type: string
        legacyRedirectionState:
          description: The redirection state of the legacy repositories in this project.
          type: string
          enumDescriptions:
            - No redirection status has been set.
            - Redirection is disabled.
            - Redirection is enabled.
            - >-
              Redirection is enabled, and has been finalized so cannot be
              reverted.
            - Redirection is enabled and missing images are copied from GCR
          enumDeprecated:
            - false
            - false
            - false
            - true
            - false
          enum:
            - REDIRECTION_STATE_UNSPECIFIED
            - REDIRECTION_FROM_GCR_IO_DISABLED
            - REDIRECTION_FROM_GCR_IO_ENABLED
            - REDIRECTION_FROM_GCR_IO_FINALIZED
            - REDIRECTION_FROM_GCR_IO_ENABLED_AND_COPYING
    VPCSCConfig:
      id: VPCSCConfig
      description: The Artifact Registry VPC SC config that apply to a Project.
      type: object
      properties:
        name:
          description: >-
            The name of the project's VPC SC Config. Always of the form:
            projects/{projectID}/locations/{location}/vpcscConfig In update
            request: never set In response: always set
          type: string
        vpcscPolicy:
          description: >-
            The project per location VPC SC policy that defines the VPC SC
            behavior for the Remote Repository (Allow/Deny).
          type: string
          enumDescriptions:
            - >-
              VPCSC_POLICY_UNSPECIFIED - the VPS SC policy is not defined. When
              VPS SC policy is not defined - the Service will use the default
              behavior (VPCSC_DENY).
            - >-
              VPCSC_DENY - repository will block the requests to the Upstreams
              for the Remote Repositories if the resource is in the perimeter.
            - >-
              VPCSC_ALLOW - repository will allow the requests to the Upstreams
              for the Remote Repositories if the resource is in the perimeter.
          enum:
            - VPCSC_POLICY_UNSPECIFIED
            - DENY
            - ALLOW
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    ImportAptArtifactsResponse:
      id: ImportAptArtifactsResponse
      description: The response message from importing APT artifacts.
      type: object
      properties:
        aptArtifacts:
          description: The Apt artifacts imported.
          type: array
          items:
            $ref: '#/components/schemas/AptArtifact'
        errors:
          description: Detailed error info for packages that were not imported.
          type: array
          items:
            $ref: '#/components/schemas/ImportAptArtifactsErrorInfo'
    AptArtifact:
      id: AptArtifact
      description: >-
        A detailed representation of an Apt artifact. Information in the record
        is derived from the archive's control file. See
        https://www.debian.org/doc/debian-policy/ch-controlfields.html
      type: object
      properties:
        name:
          description: Output only. The Artifact Registry resource name of the artifact.
          readOnly: true
          type: string
        packageName:
          description: Output only. The Apt package name of the artifact.
          readOnly: true
          type: string
        packageType:
          description: Output only. An artifact is a binary or source package.
          readOnly: true
          type: string
          enumDescriptions:
            - Package type is not specified.
            - Binary package.
            - Source package.
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
        architecture:
          description: Output only. Operating system architecture of the artifact.
          readOnly: true
          type: string
        component:
          description: Output only. Repository component of the artifact.
          readOnly: true
          type: string
        controlFile:
          description: Output only. Contents of the artifact's control metadata file.
          readOnly: true
          type: string
          format: byte
    ImportAptArtifactsErrorInfo:
      id: ImportAptArtifactsErrorInfo
      description: Error information explaining why a package was not imported.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportAptArtifactsGcsSource'
        error:
          description: The detailed error status.
          $ref: '#/components/schemas/Status'
    ImportAptArtifactsMetadata:
      id: ImportAptArtifactsMetadata
      description: The operation metadata for importing artifacts.
      type: object
      properties: {}
    UploadAptArtifactResponse:
      id: UploadAptArtifactResponse
      description: >-
        The response of the completed artifact upload operation. This response
        is contained in the Operation and available to users.
      type: object
      properties:
        aptArtifacts:
          description: The Apt artifacts updated.
          type: array
          items:
            $ref: '#/components/schemas/AptArtifact'
    UploadAptArtifactMetadata:
      id: UploadAptArtifactMetadata
      description: The operation metadata for uploading artifacts.
      type: object
      properties: {}
    ImportYumArtifactsResponse:
      id: ImportYumArtifactsResponse
      description: The response message from importing YUM artifacts.
      type: object
      properties:
        yumArtifacts:
          description: The yum artifacts imported.
          type: array
          items:
            $ref: '#/components/schemas/YumArtifact'
        errors:
          description: Detailed error info for packages that were not imported.
          type: array
          items:
            $ref: '#/components/schemas/ImportYumArtifactsErrorInfo'
    YumArtifact:
      id: YumArtifact
      description: A detailed representation of a Yum artifact.
      type: object
      properties:
        name:
          description: Output only. The Artifact Registry resource name of the artifact.
          readOnly: true
          type: string
        packageName:
          description: Output only. The yum package name of the artifact.
          readOnly: true
          type: string
        packageType:
          description: Output only. An artifact is a binary or source package.
          readOnly: true
          type: string
          enumDescriptions:
            - Package type is not specified.
            - Binary package (.rpm).
            - Source package (.srpm).
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - BINARY
            - SOURCE
        architecture:
          description: Output only. Operating system architecture of the artifact.
          readOnly: true
          type: string
    ImportYumArtifactsErrorInfo:
      id: ImportYumArtifactsErrorInfo
      description: Error information explaining why a package was not imported.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportYumArtifactsGcsSource'
        error:
          description: The detailed error status.
          $ref: '#/components/schemas/Status'
    ImportYumArtifactsMetadata:
      id: ImportYumArtifactsMetadata
      description: The operation metadata for importing artifacts.
      type: object
      properties: {}
    UploadYumArtifactResponse:
      id: UploadYumArtifactResponse
      description: >-
        The response of the completed artifact upload operation. This response
        is contained in the Operation and available to users.
      type: object
      properties:
        yumArtifacts:
          description: The Yum artifacts updated.
          type: array
          items:
            $ref: '#/components/schemas/YumArtifact'
    UploadYumArtifactMetadata:
      id: UploadYumArtifactMetadata
      description: The operation metadata for uploading artifacts.
      type: object
      properties: {}
    ImportGoogetArtifactsResponse:
      id: ImportGoogetArtifactsResponse
      description: The response message from importing artifacts.
      type: object
      properties:
        googetArtifacts:
          description: The GooGet artifacts updated.
          type: array
          items:
            $ref: '#/components/schemas/GoogetArtifact'
        errors:
          description: Detailed error info for packages that were not imported.
          type: array
          items:
            $ref: '#/components/schemas/ImportGoogetArtifactsErrorInfo'
    GoogetArtifact:
      id: GoogetArtifact
      description: A detailed representation of a GooGet artifact.
      type: object
      properties:
        name:
          description: Output only. The Artifact Registry resource name of the artifact.
          readOnly: true
          type: string
        packageName:
          description: Output only. The GooGet package name of the artifact.
          readOnly: true
          type: string
        architecture:
          description: Output only. Operating system architecture of the artifact.
          readOnly: true
          type: string
    ImportGoogetArtifactsErrorInfo:
      id: ImportGoogetArtifactsErrorInfo
      description: Error information explaining why a package was not imported.
      type: object
      properties:
        gcsSource:
          description: Google Cloud Storage location requested.
          $ref: '#/components/schemas/ImportGoogetArtifactsGcsSource'
        error:
          description: The detailed error status.
          $ref: '#/components/schemas/Status'
    ImportGoogetArtifactsMetadata:
      id: ImportGoogetArtifactsMetadata
      description: The operation metadata for importing artifacts.
      type: object
      properties: {}
    UploadGoogetArtifactResponse:
      id: UploadGoogetArtifactResponse
      description: >-
        The response of the completed artifact upload operation. This response
        is contained in the Operation and available to users.
      type: object
      properties:
        googetArtifacts:
          description: The GooGet artifacts updated.
          type: array
          items:
            $ref: '#/components/schemas/GoogetArtifact'
    UploadGoogetArtifactMetadata:
      id: UploadGoogetArtifactMetadata
      description: The operation metadata for uploading artifacts.
      type: object
      properties: {}
    KfpArtifact:
      id: KfpArtifact
      description: A detailed representation of a KFP artifact.
      type: object
      properties:
        name:
          description: >-
            Output only. Resource name of the KFP artifact. Since users don't
            directly interact with this resource, the name will be derived from
            the associated version. For example, when version =
            ".../versions/sha256:abcdef...", the name will be
            ".../kfpArtifacts/sha256:abcdef...".
          readOnly: true
          type: string
        version:
          description: >-
            The version associated with the KFP artifact. Must follow the
            Semantic Versioning standard.
          type: string
    UploadKfpArtifactMetadata:
      id: UploadKfpArtifactMetadata
      description: The operation metadata for uploading KFP artifacts.
      type: object
      properties: {}
    GenericArtifact:
      id: GenericArtifact
      description: GenericArtifact represents a generic artifact
      type: object
      properties:
        name:
          description: >-
            Resource name of the generic artifact. project, location,
            repository, package_id and version_id create a unique generic
            artifact. i.e.
            "projects/test-project/locations/us-west4/repositories/test-repo/
            genericArtifacts/package_id:version_id"
          type: string
        version:
          description: The version of the generic artifact.
          type: string
        createTime:
          description: Output only. The time when the Generic module is created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the Generic module is updated.
          readOnly: true
          type: string
          format: google-datetime
    UploadGenericArtifactMetadata:
      id: UploadGenericArtifactMetadata
      description: The operation metadata for uploading generic artifacts.
      type: object
      properties: {}
    GoModule:
      id: GoModule
      description: GoModule represents a Go module.
      type: object
      properties:
        name:
          description: The resource name of a Go module.
          type: string
        version:
          description: >-
            The version of the Go module. Must be a valid canonical version as
            defined in https://go.dev/ref/mod#glos-canonical-version.
          type: string
        createTime:
          description: Output only. The time when the Go module is created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the Go module is updated.
          readOnly: true
          type: string
          format: google-datetime
    UploadGoModuleMetadata:
      id: UploadGoModuleMetadata
      description: The operation metadata for uploading go modules.
      type: object
      properties: {}
    OperationMetadata:
      id: OperationMetadata
      description: Metadata type for longrunning-operations, currently empty.
      type: object
      properties: {}
    BatchDeleteVersionsMetadata:
      id: BatchDeleteVersionsMetadata
      description: The metadata of an LRO from deleting multiple versions.
      type: object
      properties:
        failedVersions:
          description: The versions the operation failed to delete.
          type: array
          items:
            type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    project_settings:
      id: google.artifactregistry.project_settings
      name: project_settings
      title: Project_settings
      methods:
        get_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_project_settings:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1projectSettings/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/project_settings/methods/get_project_settings
        insert: []
        update: []
        delete: []
    vpcsc_config:
      id: google.artifactregistry.vpcsc_config
      name: vpcsc_config
      title: Vpcsc_config
      methods:
        get_vpcsc_config:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_vpcsc_config:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1vpcscConfig/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/vpcsc_config/methods/get_vpcsc_config
        insert: []
        update: []
        delete: []
    locations:
      id: google.artifactregistry.locations
      name: locations
      title: Locations
      methods:
        _list:
          operation: &ref_1
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response: &ref_2
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        list:
          operation: *ref_1
          response: *ref_2
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    operations:
      id: google.artifactregistry.operations
      name: operations
      title: Operations
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
        insert: []
        update: []
        delete: []
    repositories:
      id: google.artifactregistry.repositories
      name: repositories
      title: Repositories
      methods:
        _list:
          operation: &ref_3
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get
          response: &ref_4
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        list:
          operation: *ref_3
          response: *ref_4
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/get'
          - $ref: '#/components/x-stackQL-resources/repositories/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/delete'
    repositories_iam_policies:
      id: google.artifactregistry.repositories_iam_policies
      name: repositories_iam_policies
      title: Repositories_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        _get_iam_policy:
          operation: &ref_5
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get
          response: &ref_6
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        get_iam_policy:
          operation: *ref_5
          response: *ref_6
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/repositories_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        delete: []
    docker_images:
      id: google.artifactregistry.docker_images
      name: docker_images
      title: Docker_images
      methods:
        _list:
          operation: &ref_7
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages/get
          response: &ref_8
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dockerImages
        list:
          operation: *ref_7
          response: *ref_8
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1dockerImages~1{dockerImagesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/get'
          - $ref: '#/components/x-stackQL-resources/docker_images/methods/list'
        insert: []
        update: []
        delete: []
    maven_artifacts:
      id: google.artifactregistry.maven_artifacts
      name: maven_artifacts
      title: Maven_artifacts
      methods:
        _list:
          operation: &ref_9
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts/get
          response: &ref_10
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.mavenArtifacts
        list:
          operation: *ref_9
          response: *ref_10
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1mavenArtifacts~1{mavenArtifactsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/get'
          - $ref: '#/components/x-stackQL-resources/maven_artifacts/methods/list'
        insert: []
        update: []
        delete: []
    npm_packages:
      id: google.artifactregistry.npm_packages
      name: npm_packages
      title: Npm_packages
      methods:
        _list:
          operation: &ref_11
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages/get
          response: &ref_12
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.npmPackages
        list:
          operation: *ref_11
          response: *ref_12
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1npmPackages~1{npmPackagesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/npm_packages/methods/list'
        insert: []
        update: []
        delete: []
    python_packages:
      id: google.artifactregistry.python_packages
      name: python_packages
      title: Python_packages
      methods:
        _list:
          operation: &ref_13
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages/get
          response: &ref_14
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.pythonPackages
        list:
          operation: *ref_13
          response: *ref_14
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1pythonPackages~1{pythonPackagesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/python_packages/methods/list'
        insert: []
        update: []
        delete: []
    apt_artifacts:
      id: google.artifactregistry.apt_artifacts
      name: apt_artifacts
      title: Apt_artifacts
      methods:
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1aptArtifacts:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    yum_artifacts:
      id: google.artifactregistry.yum_artifacts
      name: yum_artifacts
      title: Yum_artifacts
      methods:
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1yumArtifacts:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    googet_artifacts:
      id: google.artifactregistry.googet_artifacts
      name: googet_artifacts
      title: Googet_artifacts
      methods:
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1googetArtifacts:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    generic_artifacts:
      id: google.artifactregistry.generic_artifacts
      name: generic_artifacts
      title: Generic_artifacts
      methods:
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1genericArtifacts:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    kfp_artifacts:
      id: google.artifactregistry.kfp_artifacts
      name: kfp_artifacts
      title: Kfp_artifacts
      methods:
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1kfpArtifacts:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    go_modules:
      id: google.artifactregistry.go_modules
      name: go_modules
      title: Go_modules
      methods:
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1goModules:create/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    packages:
      id: google.artifactregistry.packages
      name: packages
      title: Packages
      methods:
        _list:
          operation: &ref_15
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages/get
          response: &ref_16
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.packages
        list:
          operation: *ref_15
          response: *ref_16
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/packages/methods/get'
          - $ref: '#/components/x-stackQL-resources/packages/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/packages/methods/patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/packages/methods/delete'
    versions:
      id: google.artifactregistry.versions
      name: versions
      title: Versions
      methods:
        _list:
          operation: &ref_17
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions/get
          response: &ref_18
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.versions
        list:
          operation: *ref_17
          response: *ref_18
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions~1{versionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1versions:batchDelete/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/versions/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/delete'
    tags:
      id: google.artifactregistry.tags
      name: tags
      title: Tags
      methods:
        _list:
          operation: &ref_19
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/get
          response: &ref_20
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tags
        list:
          operation: *ref_19
          response: *ref_20
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1packages~1{packagesId}~1tags~1{tagsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/get'
          - $ref: '#/components/x-stackQL-resources/tags/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/tags/methods/patch'
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/delete'
    files:
      id: google.artifactregistry.files
      name: files
      title: Files
      methods:
        _list:
          operation: &ref_21
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files/get
          response: &ref_22
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.files
        list:
          operation: *ref_21
          response: *ref_22
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files~1{filesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files~1{filesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        download:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1files~1{filesId}:download/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/files/methods/get'
          - $ref: '#/components/x-stackQL-resources/files/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/files/methods/delete'
paths:
  /v1/projects/{projectsId}/projectSettings:
    parameters: &ref_23
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Retrieves the Settings for the Project.
      operationId: artifactregistry.projects.getProjectSettings
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the Settings for the Project.
      operationId: artifactregistry.projects.updateProjectSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSettings'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSettings'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/vpcscConfig:
    parameters: *ref_23
    get:
      description: Retrieves the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.getVpcscConfig
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the VPCSC Config for the Project.
      operationId: artifactregistry.projects.locations.updateVpcscConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VPCSCConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VPCSCConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations:
    parameters: *ref_23
    get:
      description: Lists information about the supported locations for this service.
      operationId: artifactregistry.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_23
    get:
      description: Gets information about a location.
      operationId: artifactregistry.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_23
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: artifactregistry.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories:
    parameters: *ref_23
    get:
      description: Lists repositories.
      operationId: artifactregistry.projects.locations.repositories.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: >-
        Creates a repository. The returned Operation will finish once the
        repository has been created. Its response will be the created
        Repository.
      operationId: artifactregistry.projects.locations.repositories.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: repositoryId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:
    parameters: *ref_23
    get:
      description: Gets a repository.
      operationId: artifactregistry.projects.locations.repositories.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
    patch:
      description: Updates a repository.
      operationId: artifactregistry.projects.locations.repositories.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: >-
        Deletes a repository and all of its contents. The returned Operation
        will finish once the repository has been deleted. It will not have any
        Operation metadata and will return a google.protobuf.Empty response.
      operationId: artifactregistry.projects.locations.repositories.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy:
    parameters: *ref_23
    post:
      description: Updates the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy:
    parameters: *ref_23
    get:
      description: Gets the IAM policy for a given resource.
      operationId: artifactregistry.projects.locations.repositories.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions:
    parameters: *ref_23
    post:
      description: Tests if the caller has a list of permissions on a resource.
      operationId: artifactregistry.projects.locations.repositories.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages:
    parameters: *ref_23
    get:
      description: Lists docker images.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDockerImagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}:
    parameters: *ref_23
    get:
      description: Gets a docker image.
      operationId: artifactregistry.projects.locations.repositories.dockerImages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DockerImage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: dockerImagesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts:
    parameters: *ref_23
    get:
      description: Lists maven artifacts.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMavenArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/mavenArtifacts/{mavenArtifactsId}:
    parameters: *ref_23
    get:
      description: Gets a maven artifact.
      operationId: artifactregistry.projects.locations.repositories.mavenArtifacts.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: mavenArtifactsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages:
    parameters: *ref_23
    get:
      description: Lists npm packages.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNpmPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/npmPackages/{npmPackagesId}:
    parameters: *ref_23
    get:
      description: Gets a npm package.
      operationId: artifactregistry.projects.locations.repositories.npmPackages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NpmPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: npmPackagesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages:
    parameters: *ref_23
    get:
      description: Lists python packages.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPythonPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/pythonPackages/{pythonPackagesId}:
    parameters: *ref_23
    get:
      description: Gets a python package.
      operationId: artifactregistry.projects.locations.repositories.pythonPackages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PythonPackage'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: pythonPackagesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import:
    parameters: *ref_23
    post:
      description: >-
        Imports Apt artifacts. The returned Operation will complete once the
        resources are imported. Package, Version, and File resources are created
        based on the imported artifacts. Imported artifacts that conflict with
        existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAptArtifactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads an Apt artifact. The returned Operation will complete
        once the resources are uploaded. Package, Version, and File resources
        are created based on the imported artifact. Imported artifacts that
        conflict with existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.aptArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAptArtifactRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadAptArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import:
    parameters: *ref_23
    post:
      description: >-
        Imports Yum (RPM) artifacts. The returned Operation will complete once
        the resources are imported. Package, Version, and File resources are
        created based on the imported artifacts. Imported artifacts that
        conflict with existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportYumArtifactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads a Yum artifact. The returned Operation will complete
        once the resources are uploaded. Package, Version, and File resources
        are created based on the imported artifact. Imported artifacts that
        conflict with existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.yumArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadYumArtifactRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadYumArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:import:
    parameters: *ref_23
    post:
      description: >-
        Imports GooGet artifacts. The returned Operation will complete once the
        resources are imported. Package, Version, and File resources are created
        based on the imported artifacts. Imported artifacts that conflict with
        existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportGoogetArtifactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/googetArtifacts:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads a GooGet artifact. The returned Operation will complete
        once the resources are uploaded. Package, Version, and File resources
        are created based on the imported artifact. Imported artifacts that
        conflict with existing resources are ignored.
      operationId: artifactregistry.projects.locations.repositories.googetArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoogetArtifactRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoogetArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/genericArtifacts:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads a Generic artifact. The returned operation will
        complete once the resources are uploaded. Package, version, and file
        resources are created based on the uploaded artifact. Uploaded artifacts
        that conflict with existing resources will raise an `ALREADY_EXISTS`
        error.
      operationId: artifactregistry.projects.locations.repositories.genericArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGenericArtifactRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGenericArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/kfpArtifacts:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads a KFP artifact. The returned Operation will complete
        once the resource is uploaded. Package, Version, and File resources will
        be created based on the uploaded artifact. Uploaded artifacts that
        conflict with existing resources will be overwritten.
      operationId: artifactregistry.projects.locations.repositories.kfpArtifacts.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadKfpArtifactRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadKfpArtifactMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/goModules:create:
    parameters: *ref_23
    post:
      description: >-
        Directly uploads a Go module. The returned Operation will complete once
        the Go module is uploaded. Package, Version, and File resources are
        created based on the uploaded Go module.
      operationId: artifactregistry.projects.locations.repositories.goModules.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadGoModuleRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadGoModuleMediaResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages:
    parameters: *ref_23
    get:
      description: Lists packages.
      operationId: artifactregistry.projects.locations.repositories.packages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}:
    parameters: *ref_23
    get:
      description: Gets a package.
      operationId: artifactregistry.projects.locations.repositories.packages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a package and all of its versions and tags. The returned
        operation will complete once the package has been deleted.
      operationId: artifactregistry.projects.locations.repositories.packages.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
    patch:
      description: Updates a package.
      operationId: artifactregistry.projects.locations.repositories.packages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Package'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions:
    parameters: *ref_23
    get:
      description: Lists versions.
      operationId: artifactregistry.projects.locations.repositories.packages.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}:
    parameters: *ref_23
    get:
      description: Gets a version
      operationId: artifactregistry.projects.locations.repositories.packages.versions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
    delete:
      description: >-
        Deletes a version and all of its content. The returned operation will
        complete once the version has been deleted.
      operationId: >-
        artifactregistry.projects.locations.repositories.packages.versions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions:batchDelete:
    parameters: *ref_23
    post:
      description: >-
        Deletes multiple versions across a repository. The returned operation
        will complete once the versions have been deleted.
      operationId: >-
        artifactregistry.projects.locations.repositories.packages.versions.batchDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteVersionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags:
    parameters: *ref_23
    get:
      description: Lists tags.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: query
          name: tagId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}:
    parameters: *ref_23
    get:
      description: Gets a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
    patch:
      description: Updates a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a tag.
      operationId: artifactregistry.projects.locations.repositories.packages.tags.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: packagesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files:
    parameters: *ref_23
    get:
      description: Lists files.
      operationId: artifactregistry.projects.locations.repositories.files.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}:
    parameters: *ref_23
    get:
      description: Gets a file.
      operationId: artifactregistry.projects.locations.repositories.files.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDevtoolsArtifactregistryV1File'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: filesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a file and all of its content. It is only allowed on generic
        repositories. The returned operation will complete once the file has
        been deleted.
      operationId: artifactregistry.projects.locations.repositories.files.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: filesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}:download:
    parameters: *ref_23
    get:
      description: Download a file.
      operationId: artifactregistry.projects.locations.repositories.files.download
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadFileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: filesId
          required: true
          schema:
            type: string
