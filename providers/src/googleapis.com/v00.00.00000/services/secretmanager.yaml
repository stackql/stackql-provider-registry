openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Secret Manager API
  description: >-
    Stores sensitive data such as API keys, passwords, and certificates.
    Provides convenience while improving security. 
  version: v1
  x-discovery-doc-revision: '20250711'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/secret-manager/
servers:
  - url: https://secretmanager.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    ListSecretsResponse:
      id: ListSecretsResponse
      description: Response message for SecretManagerService.ListSecrets.
      type: object
      properties:
        secrets:
          description: The list of Secrets sorted in reverse by create_time (newest first).
          type: array
          items:
            $ref: '#/components/schemas/Secret'
        nextPageToken:
          description: >-
            A token to retrieve the next page of results. Pass this value in
            ListSecretsRequest.page_token to retrieve the next page.
          type: string
        totalSize:
          description: >-
            The total number of Secrets but 0 when the ListSecretsRequest.filter
            field is set.
          type: integer
          format: int32
    Secret:
      id: Secret
      description: >-
        A Secret is a logical secret whose value and versions can be accessed. A
        Secret is made up of zero or more SecretVersions that represent the
        secret data.
      type: object
      properties:
        name:
          description: >-
            Output only. The resource name of the Secret in the format
            `projects/*/secrets/*`.
          readOnly: true
          type: string
        replication:
          description: >-
            Optional. Immutable. The replication policy of the secret data
            attached to the Secret. The replication policy cannot be changed
            after the Secret has been created.
          $ref: '#/components/schemas/Replication'
        createTime:
          description: Output only. The time at which the Secret was created.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: >-
            The labels assigned to this Secret. Label keys must be between 1 and
            63 characters long, have a UTF-8 encoding of maximum 128 bytes, and
            must conform to the following PCRE regular expression:
            `\p{Ll}\p{Lo}{0,62}` Label values must be between 0 and 63
            characters long, have a UTF-8 encoding of maximum 128 bytes, and
            must conform to the following PCRE regular expression:
            `[\p{Ll}\p{Lo}\p{N}_-]{0,63}` No more than 64 labels can be assigned
            to a given resource.
          type: object
          additionalProperties:
            type: string
        topics:
          description: >-
            Optional. A list of up to 10 Pub/Sub topics to which messages are
            published when control plane operations are called on the secret or
            its versions.
          type: array
          items:
            $ref: '#/components/schemas/Topic'
        expireTime:
          description: >-
            Optional. Timestamp in UTC when the Secret is scheduled to expire.
            This is always provided on output, regardless of what was sent on
            input.
          type: string
          format: google-datetime
        ttl:
          description: Input only. The TTL for the Secret.
          type: string
          format: google-duration
        etag:
          description: Optional. Etag of the currently stored Secret.
          type: string
        rotation:
          description: >-
            Optional. Rotation policy attached to the Secret. May be excluded if
            there is no rotation policy.
          $ref: '#/components/schemas/Rotation'
        versionAliases:
          description: >-
            Optional. Mapping from version alias to version name. A version
            alias is a string with a maximum length of 63 characters and can
            contain uppercase and lowercase letters, numerals, and the hyphen
            (`-`) and underscore ('_') characters. An alias string must start
            with a letter and cannot be the string 'latest' or 'NEW'. No more
            than 50 aliases can be assigned to a given secret. Version-Alias
            pairs will be viewable via GetSecret and modifiable via
            UpdateSecret. Access by alias is only be supported on
            GetSecretVersion and AccessSecretVersion.
          type: object
          additionalProperties:
            type: string
            format: int64
        annotations:
          description: >-
            Optional. Custom metadata about the secret. Annotations are distinct
            from various forms of labels. Annotations exist to allow client
            tools to store their own state information without requiring a
            database. Annotation keys must be between 1 and 63 characters long,
            have a UTF-8 encoding of maximum 128 bytes, begin and end with an
            alphanumeric character ([a-z0-9A-Z]), and may have dashes (-),
            underscores (_), dots (.), and alphanumerics in between these
            symbols. The total size of annotation keys and values must be less
            than 16KiB.
          type: object
          additionalProperties:
            type: string
        versionDestroyTtl:
          description: >-
            Optional. Secret Version TTL after destruction request This is a
            part of the Delayed secret version destroy feature. For secret with
            TTL>0, version destruction doesn't happen immediately on calling
            destroy instead the version goes to a disabled state and destruction
            happens after the TTL expires.
          type: string
          format: google-duration
        customerManagedEncryption:
          description: >-
            Optional. The customer-managed encryption configuration of the
            regionalized secrets. If no configuration is provided,
            Google-managed default encryption is used. Updates to the Secret
            encryption configuration only apply to SecretVersions added
            afterwards. They do not apply retroactively to existing
            SecretVersions.
          $ref: '#/components/schemas/CustomerManagedEncryption'
        tags:
          description: >-
            Optional. Input only. Immutable. Mapping of Tag keys/values directly
            bound to this resource. For example: "123/environment":
            "production", "123/costCenter": "marketing" Tags are used to
            organize and group resources. Tags can be used to control policy
            evaluation for the resource.
          type: object
          additionalProperties:
            type: string
    Replication:
      id: Replication
      description: >-
        A policy that defines the replication and encryption configuration of
        data.
      type: object
      properties:
        automatic:
          description: >-
            The Secret will automatically be replicated without any
            restrictions.
          $ref: '#/components/schemas/Automatic'
        userManaged:
          description: The Secret will only be replicated into the locations specified.
          $ref: '#/components/schemas/UserManaged'
    Automatic:
      id: Automatic
      description: >-
        A replication policy that replicates the Secret payload without any
        restrictions.
      type: object
      properties:
        customerManagedEncryption:
          description: >-
            Optional. The customer-managed encryption configuration of the
            Secret. If no configuration is provided, Google-managed default
            encryption is used. Updates to the Secret encryption configuration
            only apply to SecretVersions added afterwards. They do not apply
            retroactively to existing SecretVersions.
          $ref: '#/components/schemas/CustomerManagedEncryption'
    CustomerManagedEncryption:
      id: CustomerManagedEncryption
      description: >-
        Configuration for encrypting secret payloads using customer-managed
        encryption keys (CMEK).
      type: object
      properties:
        kmsKeyName:
          description: >-
            Required. The resource name of the Cloud KMS CryptoKey used to
            encrypt secret payloads. For secrets using the UserManaged
            replication policy type, Cloud KMS CryptoKeys must reside in the
            same location as the replica location. For secrets using the
            Automatic replication policy type, Cloud KMS CryptoKeys must reside
            in `global`. The expected format is
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
          type: string
    UserManaged:
      id: UserManaged
      description: >-
        A replication policy that replicates the Secret payload into the
        locations specified in Replication.UserManaged.replicas
      type: object
      properties:
        replicas:
          description: Required. The list of Replicas for this Secret. Cannot be empty.
          type: array
          items:
            $ref: '#/components/schemas/Replica'
    Replica:
      id: Replica
      description: Represents a Replica for this Secret.
      type: object
      properties:
        location:
          description: >-
            The canonical IDs of the location to replicate data. For example:
            `"us-east1"`.
          type: string
        customerManagedEncryption:
          description: >-
            Optional. The customer-managed encryption configuration of the
            User-Managed Replica. If no configuration is provided,
            Google-managed default encryption is used. Updates to the Secret
            encryption configuration only apply to SecretVersions added
            afterwards. They do not apply retroactively to existing
            SecretVersions.
          $ref: '#/components/schemas/CustomerManagedEncryption'
    Topic:
      id: Topic
      description: >-
        A Pub/Sub topic which Secret Manager will publish to when control plane
        events occur on this secret.
      type: object
      properties:
        name:
          description: >-
            Identifier. The resource name of the Pub/Sub topic that will be
            published to, in the following format: `projects/*/topics/*`. For
            publication to succeed, the Secret Manager service agent must have
            the `pubsub.topic.publish` permission on the topic. The Pub/Sub
            Publisher role (`roles/pubsub.publisher`) includes this permission.
          type: string
    Rotation:
      id: Rotation
      description: >-
        The rotation time and period for a Secret. At next_rotation_time, Secret
        Manager will send a Pub/Sub notification to the topics configured on the
        Secret. Secret.topics must be set to configure rotation.
      type: object
      properties:
        nextRotationTime:
          description: >-
            Optional. Timestamp in UTC at which the Secret is scheduled to
            rotate. Cannot be set to less than 300s (5 min) in the future and at
            most 3153600000s (100 years). next_rotation_time MUST be set if
            rotation_period is set.
          type: string
          format: google-datetime
        rotationPeriod:
          description: >-
            Input only. The Duration between rotation notifications. Must be in
            seconds and at least 3600s (1h) and at most 3153600000s (100 years).
            If rotation_period is set, next_rotation_time must be set.
            next_rotation_time will be advanced by this period when the service
            automatically sends rotation notifications.
          type: string
          format: google-duration
    AddSecretVersionRequest:
      id: AddSecretVersionRequest
      description: Request message for SecretManagerService.AddSecretVersion.
      type: object
      properties:
        payload:
          description: Required. The secret payload of the SecretVersion.
          $ref: '#/components/schemas/SecretPayload'
    SecretPayload:
      id: SecretPayload
      description: >-
        A secret payload resource in the Secret Manager API. This contains the
        sensitive secret payload that is associated with a SecretVersion.
      type: object
      properties:
        data:
          description: The secret data. Must be no larger than 64KiB.
          type: string
          format: byte
        dataCrc32c:
          description: >-
            Optional. If specified, SecretManagerService will verify the
            integrity of the received data on
            SecretManagerService.AddSecretVersion calls using the crc32c
            checksum and store it to include in future
            SecretManagerService.AccessSecretVersion responses. If a checksum is
            not provided in the SecretManagerService.AddSecretVersion request,
            the SecretManagerService will generate and store one for you. The
            CRC32C value is encoded as a Int64 for compatibility, and can be
            safely downconverted to uint32 in languages that support this type.
            https://cloud.google.com/apis/design/design_patterns#integer_types
          type: string
          format: int64
    SecretVersion:
      id: SecretVersion
      description: A secret version resource in the Secret Manager API.
      type: object
      properties:
        name:
          description: >-
            Output only. The resource name of the SecretVersion in the format
            `projects/*/secrets/*/versions/*`. SecretVersion IDs in a Secret
            start at 1 and are incremented for each subsequent version of the
            secret.
          readOnly: true
          type: string
        createTime:
          description: Output only. The time at which the SecretVersion was created.
          readOnly: true
          type: string
          format: google-datetime
        destroyTime:
          description: >-
            Output only. The time this SecretVersion was destroyed. Only present
            if state is DESTROYED.
          readOnly: true
          type: string
          format: google-datetime
        state:
          description: Output only. The current state of the SecretVersion.
          readOnly: true
          type: string
          enumDescriptions:
            - Not specified. This value is unused and invalid.
            - The SecretVersion may be accessed.
            - >-
              The SecretVersion may not be accessed, but the secret data is
              still available and can be placed back into the ENABLED state.
            - >-
              The SecretVersion is destroyed and the secret data is no longer
              stored. A version may not leave this state once entered.
          enum:
            - STATE_UNSPECIFIED
            - ENABLED
            - DISABLED
            - DESTROYED
        replicationStatus:
          description: The replication status of the SecretVersion.
          $ref: '#/components/schemas/ReplicationStatus'
        etag:
          description: Output only. Etag of the currently stored SecretVersion.
          readOnly: true
          type: string
        clientSpecifiedPayloadChecksum:
          description: >-
            Output only. True if payload checksum specified in SecretPayload
            object has been received by SecretManagerService on
            SecretManagerService.AddSecretVersion.
          readOnly: true
          type: boolean
        scheduledDestroyTime:
          description: >-
            Optional. Output only. Scheduled destroy time for secret version.
            This is a part of the Delayed secret version destroy feature. For a
            Secret with a valid version destroy TTL, when a secert version is
            destroyed, version is moved to disabled state and it is scheduled
            for destruction Version is destroyed only after the
            scheduled_destroy_time.
          readOnly: true
          type: string
          format: google-datetime
        customerManagedEncryption:
          description: >-
            Output only. The customer-managed encryption status of the
            SecretVersion. Only populated if customer-managed encryption is used
            and Secret is a regionalized secret.
          readOnly: true
          $ref: '#/components/schemas/CustomerManagedEncryptionStatus'
    ReplicationStatus:
      id: ReplicationStatus
      description: The replication status of a SecretVersion.
      type: object
      properties:
        automatic:
          description: >-
            Describes the replication status of a SecretVersion with automatic
            replication. Only populated if the parent Secret has an automatic
            replication policy.
          $ref: '#/components/schemas/AutomaticStatus'
        userManaged:
          description: >-
            Describes the replication status of a SecretVersion with
            user-managed replication. Only populated if the parent Secret has a
            user-managed replication policy.
          $ref: '#/components/schemas/UserManagedStatus'
    AutomaticStatus:
      id: AutomaticStatus
      description: >-
        The replication status of a SecretVersion using automatic replication.
        Only populated if the parent Secret has an automatic replication policy.
      type: object
      properties:
        customerManagedEncryption:
          description: >-
            Output only. The customer-managed encryption status of the
            SecretVersion. Only populated if customer-managed encryption is
            used.
          readOnly: true
          $ref: '#/components/schemas/CustomerManagedEncryptionStatus'
    CustomerManagedEncryptionStatus:
      id: CustomerManagedEncryptionStatus
      description: Describes the status of customer-managed encryption.
      type: object
      properties:
        kmsKeyVersionName:
          description: >-
            Required. The resource name of the Cloud KMS CryptoKeyVersion used
            to encrypt the secret payload, in the following format:
            `projects/*/locations/*/keyRings/*/cryptoKeys/*/versions/*`.
          type: string
    UserManagedStatus:
      id: UserManagedStatus
      description: >-
        The replication status of a SecretVersion using user-managed
        replication. Only populated if the parent Secret has a user-managed
        replication policy.
      type: object
      properties:
        replicas:
          description: Output only. The list of replica statuses for the SecretVersion.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ReplicaStatus'
    ReplicaStatus:
      id: ReplicaStatus
      description: Describes the status of a user-managed replica for the SecretVersion.
      type: object
      properties:
        location:
          description: >-
            Output only. The canonical ID of the replica location. For example:
            `"us-east1"`.
          readOnly: true
          type: string
        customerManagedEncryption:
          description: >-
            Output only. The customer-managed encryption status of the
            SecretVersion. Only populated if customer-managed encryption is
            used.
          readOnly: true
          $ref: '#/components/schemas/CustomerManagedEncryptionStatus'
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    ListSecretVersionsResponse:
      id: ListSecretVersionsResponse
      description: Response message for SecretManagerService.ListSecretVersions.
      type: object
      properties:
        versions:
          description: >-
            The list of SecretVersions sorted in reverse by create_time (newest
            first).
          type: array
          items:
            $ref: '#/components/schemas/SecretVersion'
        nextPageToken:
          description: >-
            A token to retrieve the next page of results. Pass this value in
            ListSecretVersionsRequest.page_token to retrieve the next page.
          type: string
        totalSize:
          description: >-
            The total number of SecretVersions but 0 when the
            ListSecretsRequest.filter field is set.
          type: integer
          format: int32
    AccessSecretVersionResponse:
      id: AccessSecretVersionResponse
      description: Response message for SecretManagerService.AccessSecretVersion.
      type: object
      properties:
        name:
          description: >-
            The resource name of the SecretVersion in the format
            `projects/*/secrets/*/versions/*` or
            `projects/*/locations/*/secrets/*/versions/*`.
          type: string
        payload:
          description: Secret payload
          $ref: '#/components/schemas/SecretPayload'
    DisableSecretVersionRequest:
      id: DisableSecretVersionRequest
      description: Request message for SecretManagerService.DisableSecretVersion.
      type: object
      properties:
        etag:
          description: >-
            Optional. Etag of the SecretVersion. The request succeeds if it
            matches the etag of the currently stored secret version object. If
            the etag is omitted, the request succeeds.
          type: string
    EnableSecretVersionRequest:
      id: EnableSecretVersionRequest
      description: Request message for SecretManagerService.EnableSecretVersion.
      type: object
      properties:
        etag:
          description: >-
            Optional. Etag of the SecretVersion. The request succeeds if it
            matches the etag of the currently stored secret version object. If
            the etag is omitted, the request succeeds.
          type: string
    DestroySecretVersionRequest:
      id: DestroySecretVersionRequest
      description: Request message for SecretManagerService.DestroySecretVersion.
      type: object
      properties:
        etag:
          description: >-
            Optional. Etag of the SecretVersion. The request succeeds if it
            matches the etag of the currently stored secret version object. If
            the etag is omitted, the request succeeds.
          type: string
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.secretmanager.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    secrets:
      id: google.secretmanager.secrets
      name: secrets
      title: Secrets
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1secrets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.secrets
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1secrets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/secrets/methods/get'
          - $ref: '#/components/x-stackQL-resources/secrets/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/secrets/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/secrets/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/secrets/methods/delete'
    secrets_version:
      id: google.secretmanager.secrets_version
      name: secrets_version
      title: Secrets_version
      methods:
        add_version:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}:addVersion/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/secrets_version/methods/add_version
        update: []
        replace: []
        delete: []
    secrets_iam_policies:
      id: google.secretmanager.secrets_iam_policies
      name: secrets_iam_policies
      title: Secrets_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/secrets_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/secrets_iam_policies/methods/set_iam_policy
        delete: []
    versions:
      id: google.secretmanager.versions
      name: versions
      title: Versions
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.versions
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions~1{versionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        access:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions~1{versionsId}:access/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disable:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions~1{versionsId}:disable/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        enable:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions~1{versionsId}:enable/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        destroy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1secrets~1{secretsId}~1versions~1{versionsId}:destroy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/versions/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/destroy'
paths:
  /v1/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: secretmanager.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: extraLocationTypes
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: secretmanager.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets:
    parameters: *ref_1
    get:
      description: Lists Secrets.
      operationId: secretmanager.projects.locations.secrets.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Creates a new Secret containing no SecretVersions.
      operationId: secretmanager.projects.locations.secrets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: secretId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}:addVersion:
    parameters: *ref_1
    post:
      description: >-
        Creates a new SecretVersion containing secret data and attaches it to an
        existing Secret.
      operationId: secretmanager.projects.locations.secrets.addVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}:
    parameters: *ref_1
    get:
      description: Gets metadata for a given Secret.
      operationId: secretmanager.projects.locations.secrets.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
    patch:
      description: Updates metadata of an existing Secret.
      operationId: secretmanager.projects.locations.secrets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a Secret.
      operationId: secretmanager.projects.locations.secrets.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified secret. Replaces any
        existing policy. Permissions on SecretVersions are enforced according to
        the policy set on the associated Secret.
      operationId: secretmanager.projects.locations.secrets.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a secret. Returns empty policy if the
        secret exists and does not have a policy set.
      operationId: secretmanager.projects.locations.secrets.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has for the specified secret. If the
        secret does not exist, this call returns an empty set of permissions,
        not a NOT_FOUND error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: secretmanager.projects.locations.secrets.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions:
    parameters: *ref_1
    get:
      description: Lists SecretVersions. This call does not return secret data.
      operationId: secretmanager.projects.locations.secrets.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions/{versionsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets metadata for a SecretVersion.
        `projects/*/secrets/*/versions/latest` is an alias to the most recently
        created SecretVersion.
      operationId: secretmanager.projects.locations.secrets.versions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions/{versionsId}:access:
    parameters: *ref_1
    get:
      description: >-
        Accesses a SecretVersion. This call returns the secret data.
        `projects/*/secrets/*/versions/latest` is an alias to the most recently
        created SecretVersion.
      operationId: secretmanager.projects.locations.secrets.versions.access
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessSecretVersionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions/{versionsId}:disable:
    parameters: *ref_1
    post:
      description: >-
        Disables a SecretVersion. Sets the state of the SecretVersion to
        DISABLED.
      operationId: secretmanager.projects.locations.secrets.versions.disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions/{versionsId}:enable:
    parameters: *ref_1
    post:
      description: Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.
      operationId: secretmanager.projects.locations.secrets.versions.enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/secrets/{secretsId}/versions/{versionsId}:destroy:
    parameters: *ref_1
    post:
      description: >-
        Destroys a SecretVersion. Sets the state of the SecretVersion to
        DESTROYED and irrevocably destroys the secret data.
      operationId: secretmanager.projects.locations.secrets.versions.destroy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroySecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets:
    parameters: *ref_1
    get:
      description: Lists Secrets.
      operationId: secretmanager.projects.secrets.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Creates a new Secret containing no SecretVersions.
      operationId: secretmanager.projects.secrets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: secretId
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}:addVersion:
    parameters: *ref_1
    post:
      description: >-
        Creates a new SecretVersion containing secret data and attaches it to an
        existing Secret.
      operationId: secretmanager.projects.secrets.addVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}:
    parameters: *ref_1
    get:
      description: Gets metadata for a given Secret.
      operationId: secretmanager.projects.secrets.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
    patch:
      description: Updates metadata of an existing Secret.
      operationId: secretmanager.projects.secrets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a Secret.
      operationId: secretmanager.projects.secrets.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified secret. Replaces any
        existing policy. Permissions on SecretVersions are enforced according to
        the policy set on the associated Secret.
      operationId: secretmanager.projects.secrets.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a secret. Returns empty policy if the
        secret exists and does not have a policy set.
      operationId: secretmanager.projects.secrets.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/secrets/{secretsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has for the specified secret. If the
        secret does not exist, this call returns an empty set of permissions,
        not a NOT_FOUND error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: secretmanager.projects.secrets.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions:
    parameters: *ref_1
    get:
      description: Lists SecretVersions. This call does not return secret data.
      operationId: secretmanager.projects.secrets.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets metadata for a SecretVersion.
        `projects/*/secrets/*/versions/latest` is an alias to the most recently
        created SecretVersion.
      operationId: secretmanager.projects.secrets.versions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:access:
    parameters: *ref_1
    get:
      description: >-
        Accesses a SecretVersion. This call returns the secret data.
        `projects/*/secrets/*/versions/latest` is an alias to the most recently
        created SecretVersion.
      operationId: secretmanager.projects.secrets.versions.access
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessSecretVersionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:disable:
    parameters: *ref_1
    post:
      description: >-
        Disables a SecretVersion. Sets the state of the SecretVersion to
        DISABLED.
      operationId: secretmanager.projects.secrets.versions.disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:enable:
    parameters: *ref_1
    post:
      description: Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.
      operationId: secretmanager.projects.secrets.versions.enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableSecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:destroy:
    parameters: *ref_1
    post:
      description: >-
        Destroys a SecretVersion. Sets the state of the SecretVersion to
        DESTROYED and irrevocably destroys the secret data.
      operationId: secretmanager.projects.secrets.versions.destroy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroySecretVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: secretsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
