openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Datastore API
  description: 'Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application. '
  version: v1
  x-discovery-doc-revision: '20230812'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/datastore/'
servers:
  - url: 'https://datastore.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/datastore': View and manage your Google Cloud Datastore data
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    KindExpression:
      id: KindExpression
      type: object
      description: A representation of a kind.
      properties:
        name:
          description: The name of the kind.
          type: string
    GqlQueryParameter:
      type: object
      description: A binding parameter for a GQL query.
      id: GqlQueryParameter
      properties:
        value:
          description: A value parameter.
          $ref: '#/components/schemas/Value'
        cursor:
          description: A query cursor. Query cursors are returned in query result batches.
          type: string
          format: byte
    ReserveIdsResponse:
      description: The response for Datastore.ReserveIds.
      id: ReserveIdsResponse
      type: object
      properties: {}
    Filter:
      id: Filter
      type: object
      description: A holder for any type of filter.
      properties:
        compositeFilter:
          description: A composite filter.
          $ref: '#/components/schemas/CompositeFilter'
        propertyFilter:
          $ref: '#/components/schemas/PropertyFilter'
          description: A filter on a property.
    Query:
      properties:
        startCursor:
          type: string
          description: 'A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).'
          format: byte
        filter:
          description: The filter to apply.
          $ref: '#/components/schemas/Filter'
        projection:
          description: The projection to return. Defaults to returning all properties.
          items:
            $ref: '#/components/schemas/Projection'
          type: array
        limit:
          description: The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.
          type: integer
          format: int32
        endCursor:
          description: 'An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).'
          type: string
          format: byte
        kind:
          type: array
          items:
            $ref: '#/components/schemas/KindExpression'
          description: 'The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.'
        order:
          description: 'The order to apply to the query results (if empty, order is unspecified).'
          type: array
          items:
            $ref: '#/components/schemas/PropertyOrder'
        distinctOn:
          items:
            $ref: '#/components/schemas/PropertyReference'
          type: array
          description: 'The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.'
        offset:
          type: integer
          format: int32
          description: 'The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.'
      description: A query for entities.
      type: object
      id: Query
    RunQueryResponse:
      type: object
      description: The response for Datastore.RunQuery.
      id: RunQueryResponse
      properties:
        batch:
          description: A batch of query results (always present).
          $ref: '#/components/schemas/QueryResultBatch'
        query:
          $ref: '#/components/schemas/Query'
          description: 'The parsed form of the `GqlQuery` from the request, if it was set.'
        transaction:
          format: byte
          description: The identifier of the transaction that was started as part of this RunQuery request. Set only when ReadOptions.new_transaction was set in RunQueryRequest.read_options.
          type: string
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
      type: object
      properties:
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        details:
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        code:
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
    GoogleDatastoreAdminV1beta1ExportEntitiesMetadata:
      properties:
        entityFilter:
          description: Description of which entities are being exported.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter'
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata'
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
          description: An estimate of the number of bytes processed.
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
        outputUrlPrefix:
          description: Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
          type: string
      type: object
      id: GoogleDatastoreAdminV1beta1ExportEntitiesMetadata
      description: Metadata for ExportEntities operations.
    TransactionOptions:
      type: object
      description: Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
      id: TransactionOptions
      properties:
        readOnly:
          $ref: '#/components/schemas/ReadOnly'
          description: The transaction should only allow reads.
        readWrite:
          $ref: '#/components/schemas/ReadWrite'
          description: The transaction should allow both reads and writes.
    Avg:
      properties:
        property:
          description: The property to aggregate on.
          $ref: '#/components/schemas/PropertyReference'
      id: Avg
      type: object
      description: 'Average of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.'
    GoogleLongrunningListOperationsResponse:
      id: GoogleLongrunningListOperationsResponse
      type: object
      properties:
        operations:
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/GoogleLongrunningOperation'
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      description: The response message for Operations.ListOperations.
    BeginTransactionRequest:
      properties:
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
        transactionOptions:
          $ref: '#/components/schemas/TransactionOptions'
          description: Options for a new transaction.
      id: BeginTransactionRequest
      type: object
      description: The request for Datastore.BeginTransaction.
    PropertyFilter:
      id: PropertyFilter
      properties:
        op:
          enumDescriptions:
            - Unspecified. This value must not be used.
            - 'The given `property` is less than the given `value`. Requires: * That `property` comes first in `order_by`.'
            - 'The given `property` is less than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.'
            - 'The given `property` is greater than the given `value`. Requires: * That `property` comes first in `order_by`.'
            - 'The given `property` is greater than or equal to the given `value`. Requires: * That `property` comes first in `order_by`.'
            - The given `property` is equal to the given `value`.
            - 'The given `property` is equal to at least one value in the given array. Requires: * That `value` is a non-empty `ArrayValue`, subject to disjunction limits. * No `NOT_IN` is in the same query.'
            - 'The given `property` is not equal to the given `value`. Requires: * No other `NOT_EQUAL` or `NOT_IN` is in the same query. * That `property` comes first in the `order_by`.'
            - 'Limit the result set to the given entity and its descendants. Requires: * That `value` is an entity key. * All evaluated disjunctions must have the same `HAS_ANCESTOR` filter.'
            - 'The value of the `property` is not in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `OR`, `IN`, `NOT_IN`, `NOT_EQUAL` is in the same query. * That `field` comes first in the `order_by`.'
          enum:
            - OPERATOR_UNSPECIFIED
            - LESS_THAN
            - LESS_THAN_OR_EQUAL
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL
            - EQUAL
            - IN
            - NOT_EQUAL
            - HAS_ANCESTOR
            - NOT_IN
          description: The operator to filter by.
          type: string
        property:
          $ref: '#/components/schemas/PropertyReference'
          description: The property to filter by.
        value:
          $ref: '#/components/schemas/Value'
          description: The value to compare the property to.
      description: A filter on a specific property.
      type: object
    AggregationResult:
      type: object
      properties:
        aggregateProperties:
          additionalProperties:
            $ref: '#/components/schemas/Value'
          type: object
          description: 'The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.'
      description: 'The result of a single bucket from a Datastore aggregation query. The keys of `aggregate_properties` are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result.'
      id: AggregationResult
    CompositeFilter:
      description: A filter that merges multiple other filters using the given operator.
      id: CompositeFilter
      type: object
      properties:
        filters:
          description: 'The list of filters to combine. Requires: * At least one filter is present.'
          items:
            $ref: '#/components/schemas/Filter'
          type: array
        op:
          description: The operator for combining multiple filters.
          enum:
            - OPERATOR_UNSPECIFIED
            - AND
            - OR
          type: string
          enumDescriptions:
            - Unspecified. This value must not be used.
            - The results are required to satisfy each of the combined filters.
            - Documents are required to satisfy at least one of the combined filters.
    MutationResult:
      id: MutationResult
      description: The result of applying a mutation.
      properties:
        updateTime:
          type: string
          format: google-datetime
          description: 'The update time of the entity on the server after processing the mutation. If the mutation doesn''t change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a ''delete''.'
        version:
          format: int64
          description: 'The version of the entity on the server after processing the mutation. If the mutation doesn''t change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.'
          type: string
        key:
          description: The automatically allocated key. Set only when the mutation allocated a key.
          $ref: '#/components/schemas/Key'
        createTime:
          description: The create time of the entity. This field will not be set after a 'delete'.
          type: string
          format: google-datetime
        conflictDetected:
          type: boolean
          description: Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.
      type: object
    RunAggregationQueryRequest:
      description: The request for Datastore.RunAggregationQuery.
      type: object
      id: RunAggregationQueryRequest
      properties:
        partitionId:
          description: 'Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.'
          $ref: '#/components/schemas/PartitionId'
        readOptions:
          description: The options for this query.
          $ref: '#/components/schemas/ReadOptions'
        gqlQuery:
          description: The GQL query to run. This query must be an aggregation query.
          $ref: '#/components/schemas/GqlQuery'
        databaseId:
          type: string
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
        aggregationQuery:
          $ref: '#/components/schemas/AggregationQuery'
          description: The query to run.
    GoogleDatastoreAdminV1ExportEntitiesRequest:
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: Client-assigned labels.
        outputUrlPrefix:
          type: string
          description: 'Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict.'
        entityFilter:
          description: Description of what data from the project is included in the export.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
      type: object
      id: GoogleDatastoreAdminV1ExportEntitiesRequest
      description: The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
    GoogleDatastoreAdminV1ExportEntitiesResponse:
      type: object
      description: The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
      id: GoogleDatastoreAdminV1ExportEntitiesResponse
      properties:
        outputUrl:
          description: Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
          type: string
    PropertyReference:
      description: A reference to a property relative to the kind expressions.
      id: PropertyReference
      properties:
        name:
          type: string
          description: 'The name of the property. If name includes "."s, it may be interpreted as a property name path.'
      type: object
    GoogleDatastoreAdminV1RedirectWritesStepDetails:
      type: object
      properties:
        concurrencyMode:
          type: string
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          description: Ths concurrency mode for this database.
          enumDescriptions:
            - Unspecified.
            - Pessimistic concurrency.
            - Optimistic concurrency.
            - Optimistic concurrency with entity groups.
      id: GoogleDatastoreAdminV1RedirectWritesStepDetails
      description: Details for the `REDIRECT_WRITES` step.
    GoogleDatastoreAdminV1EntityFilter:
      type: object
      id: GoogleDatastoreAdminV1EntityFilter
      description: 'Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=[''Foo'', ''Bar''], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=[''Foo'', ''Bar''], namespace_ids=[''''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=[''Foo'', ''Bar''], namespace_ids=['''', ''Baz''] The entire Baz namespace: kinds=[], namespace_ids=[''Baz'']'
      properties:
        kinds:
          type: array
          description: 'If empty, then this represents all kinds.'
          items:
            type: string
        namespaceIds:
          items:
            type: string
          description: 'An empty list represents all namespaces. This is the preferred usage for projects that don''t use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn''t want to include them. Each namespace in this list must be unique.'
          type: array
    GoogleDatastoreAdminV1PrepareStepDetails:
      description: Details for the `PREPARE` step.
      id: GoogleDatastoreAdminV1PrepareStepDetails
      properties:
        concurrencyMode:
          enumDescriptions:
            - Unspecified.
            - Pessimistic concurrency.
            - Optimistic concurrency.
            - Optimistic concurrency with entity groups.
          description: The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - PESSIMISTIC
            - OPTIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
          type: string
      type: object
    CommitRequest:
      properties:
        mode:
          type: string
          enumDescriptions:
            - Unspecified. This value must not be used.
            - 'Transactional: The mutations are either all applied, or none are applied. Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).'
            - 'Non-transactional: The mutations may not apply as all or none.'
          enum:
            - MODE_UNSPECIFIED
            - TRANSACTIONAL
            - NON_TRANSACTIONAL
          description: The type of commit to perform. Defaults to `TRANSACTIONAL`.
        singleUseTransaction:
          $ref: '#/components/schemas/TransactionOptions'
          description: 'Options for beginning a new transaction for this request. The transaction is committed when the request completes. If specified, TransactionOptions.mode must be TransactionOptions.ReadWrite.'
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
        transaction:
          type: string
          description: The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
          format: byte
        mutations:
          type: array
          items:
            $ref: '#/components/schemas/Mutation'
          description: 'The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.'
      id: CommitRequest
      description: The request for Datastore.Commit.
      type: object
    Empty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      type: object
      id: Empty
    GoogleDatastoreAdminV1beta1ImportEntitiesMetadata:
      description: Metadata for ImportEntities operations.
      id: GoogleDatastoreAdminV1beta1ImportEntitiesMetadata
      type: object
      properties:
        inputUrl:
          description: The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.
          type: string
        common:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1CommonMetadata'
          description: Metadata common to all Datastore Admin operations.
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1Progress'
          description: An estimate of the number of bytes processed.
        entityFilter:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1beta1EntityFilter'
          description: Description of which entities are being imported.
    AggregationResultBatch:
      id: AggregationResultBatch
      type: object
      properties:
        moreResults:
          enumDescriptions:
            - Unspecified. This value is never used.
            - There may be additional batches to fetch from this query.
            - 'The query is finished, but there may be more results after the limit.'
            - 'The query is finished, but there may be more results after the end cursor.'
            - 'The query is finished, and there are no more results.'
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
          type: string
          description: 'The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.'
        aggregationResults:
          type: array
          description: The aggregation results for this batch.
          items:
            $ref: '#/components/schemas/AggregationResult'
        readTime:
          format: google-datetime
          description: 'Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch''s read timestamp is valid for all preceding batches.'
          type: string
      description: A batch of aggregation results produced by an aggregation query.
    ReserveIdsRequest:
      properties:
        databaseId:
          type: string
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          description: Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated.
      id: ReserveIdsRequest
      description: The request for Datastore.ReserveIds.
      type: object
    BeginTransactionResponse:
      id: BeginTransactionResponse
      description: The response for Datastore.BeginTransaction.
      properties:
        transaction:
          description: The transaction identifier (always present).
          format: byte
          type: string
      type: object
    RollbackResponse:
      type: object
      id: RollbackResponse
      properties: {}
      description: The response for Datastore.Rollback. (an empty message).
    Mutation:
      description: A mutation to apply to an entity.
      properties:
        upsert:
          description: The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete.
          $ref: '#/components/schemas/Entity'
        delete:
          $ref: '#/components/schemas/Key'
          description: The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only.
        update:
          description: The entity to update. The entity must already exist. Must have a complete key path.
          $ref: '#/components/schemas/Entity'
        insert:
          $ref: '#/components/schemas/Entity'
          description: The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete.
        baseVersion:
          format: int64
          description: 'The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.'
          type: string
        updateTime:
          description: 'The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.'
          type: string
          format: google-datetime
      id: Mutation
      type: object
    ArrayValue:
      type: object
      id: ArrayValue
      description: An array value.
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
          description: Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'.
    QueryResultBatch:
      id: QueryResultBatch
      description: A batch of results produced by a query.
      type: object
      properties:
        skippedResults:
          description: 'The number of results skipped, typically because of an offset.'
          format: int32
          type: integer
        readTime:
          type: string
          format: google-datetime
          description: 'Read timestamp this batch was returned from. This applies to the range of results from the query''s `start_cursor` (or the beginning of the query if no cursor was given) to this batch''s `end_cursor` (not the query''s `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch''s read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.'
        moreResults:
          type: string
          description: The state of the query after the current batch.
          enum:
            - MORE_RESULTS_TYPE_UNSPECIFIED
            - NOT_FINISHED
            - MORE_RESULTS_AFTER_LIMIT
            - MORE_RESULTS_AFTER_CURSOR
            - NO_MORE_RESULTS
          enumDescriptions:
            - Unspecified. This value is never used.
            - There may be additional batches to fetch from this query.
            - 'The query is finished, but there may be more results after the limit.'
            - 'The query is finished, but there may be more results after the end cursor.'
            - 'The query is finished, and there are no more results.'
        endCursor:
          type: string
          description: A cursor that points to the position after the last result in the batch.
          format: byte
        skippedCursor:
          description: A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.
          type: string
          format: byte
        snapshotVersion:
          format: int64
          type: string
          description: 'The version number of the snapshot this batch was returned from. This applies to the range of results from the query''s `start_cursor` (or the beginning of the query if no cursor was given) to this batch''s `end_cursor` (not the query''s `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch''s snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.'
        entityResultType:
          description: The result type for every entity in `entity_results`.
          type: string
          enumDescriptions:
            - Unspecified. This value is never used.
            - The key and properties.
            - A projected subset of properties. The entity may have no key.
            - Only the key.
          enum:
            - RESULT_TYPE_UNSPECIFIED
            - FULL
            - PROJECTION
            - KEY_ONLY
        entityResults:
          type: array
          items:
            $ref: '#/components/schemas/EntityResult'
          description: The results for this batch.
    ReadWrite:
      id: ReadWrite
      properties:
        previousTransaction:
          type: string
          format: byte
          description: The transaction identifier of the transaction being retried.
      type: object
      description: Options specific to read / write transactions.
    GoogleDatastoreAdminV1MigrationProgressEvent:
      properties:
        redirectWritesStepDetails:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1RedirectWritesStepDetails'
          description: Details for the `REDIRECT_WRITES` step.
        step:
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          type: string
          description: The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.
          enumDescriptions:
            - Unspecified.
            - 'Pre-migration: the database is prepared for migration.'
            - Start of migration.
            - Writes are applied synchronously to at least one replica.
            - Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.
            - Eventually-consistent reads are redirected to Cloud Firestore.
            - Strongly-consistent reads are redirected to Cloud Firestore.
            - Writes are redirected to Cloud Firestore.
        prepareStepDetails:
          description: Details for the `PREPARE` step.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1PrepareStepDetails'
      description: 'An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).'
      id: GoogleDatastoreAdminV1MigrationProgressEvent
      type: object
    GoogleDatastoreAdminV1ImportEntitiesRequest:
      type: object
      id: GoogleDatastoreAdminV1ImportEntitiesRequest
      description: The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities.
      properties:
        entityFilter:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
          description: 'Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported.'
        labels:
          additionalProperties:
            type: string
          type: object
          description: Client-assigned labels.
        inputUrl:
          type: string
          description: 'Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url.'
    AllocateIdsRequest:
      description: The request for Datastore.AllocateIds.
      id: AllocateIdsRequest
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          description: Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only.
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
    LatLng:
      properties:
        latitude:
          format: double
          type: number
          description: 'The latitude in degrees. It must be in the range [-90.0, +90.0].'
        longitude:
          description: 'The longitude in degrees. It must be in the range [-180.0, +180.0].'
          format: double
          type: number
      type: object
      id: LatLng
      description: 'An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.'
    GoogleDatastoreAdminV1beta1ExportEntitiesResponse:
      type: object
      id: GoogleDatastoreAdminV1beta1ExportEntitiesResponse
      description: The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
      properties:
        outputUrl:
          type: string
          description: Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
    GoogleDatastoreAdminV1IndexOperationMetadata:
      id: GoogleDatastoreAdminV1IndexOperationMetadata
      description: Metadata for Index operations.
      properties:
        common:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
          description: Metadata common to all Datastore Admin operations.
        indexId:
          description: The index resource ID that this operation is acting on.
          type: string
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
      type: object
    ReadOnly:
      properties:
        readTime:
          description: 'Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
          format: google-datetime
          type: string
      id: ReadOnly
      description: Options specific to read-only transactions.
      type: object
    GoogleDatastoreAdminV1beta1Progress:
      description: Measures the progress of a particular metric.
      id: GoogleDatastoreAdminV1beta1Progress
      properties:
        workCompleted:
          type: string
          description: The amount of work that has been completed. Note that this may be greater than work_estimated.
          format: int64
        workEstimated:
          description: An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
          format: int64
          type: string
      type: object
    CommitResponse:
      type: object
      id: CommitResponse
      properties:
        indexUpdates:
          format: int32
          description: 'The number of index entries updated during the commit, or zero if none were updated.'
          type: integer
        commitTime:
          format: google-datetime
          description: The transaction commit timestamp. Not set for non-transactional commits.
          type: string
        mutationResults:
          type: array
          items:
            $ref: '#/components/schemas/MutationResult'
          description: The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.
      description: The response for Datastore.Commit.
    Aggregation:
      description: Defines an aggregation that produces a single result.
      type: object
      properties:
        count:
          description: Count aggregator.
          $ref: '#/components/schemas/Count'
        alias:
          type: string
          description: 'Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations.'
        sum:
          $ref: '#/components/schemas/Sum'
          description: Sum aggregator.
        avg:
          $ref: '#/components/schemas/Avg'
          description: Average aggregator.
      id: Aggregation
    GoogleLongrunningOperation:
      properties:
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          type: object
      id: GoogleLongrunningOperation
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
    RunQueryRequest:
      type: object
      id: RunQueryRequest
      description: The request for Datastore.RunQuery.
      properties:
        partitionId:
          $ref: '#/components/schemas/PartitionId'
          description: 'Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID.'
        gqlQuery:
          description: The GQL query to run. This query must be a non-aggregation query.
          $ref: '#/components/schemas/GqlQuery'
        query:
          description: The query to run.
          $ref: '#/components/schemas/Query'
        readOptions:
          description: The options for this query.
          $ref: '#/components/schemas/ReadOptions'
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
    GoogleDatastoreAdminV1ImportEntitiesMetadata:
      id: GoogleDatastoreAdminV1ImportEntitiesMetadata
      description: Metadata for ImportEntities operations.
      properties:
        common:
          description: Metadata common to all Datastore Admin operations.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
        progressBytes:
          description: An estimate of the number of bytes processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
        entityFilter:
          description: Description of which entities are being imported.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
        progressEntities:
          description: An estimate of the number of entities processed.
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
        inputUrl:
          type: string
          description: The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
      type: object
    LookupRequest:
      type: object
      properties:
        databaseId:
          type: string
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
        readOptions:
          $ref: '#/components/schemas/ReadOptions'
          description: The options for this lookup request.
        keys:
          items:
            $ref: '#/components/schemas/Key'
          description: Required. Keys of entities to look up.
          type: array
      id: LookupRequest
      description: The request for Datastore.Lookup.
    Projection:
      type: object
      properties:
        property:
          description: The property to project.
          $ref: '#/components/schemas/PropertyReference'
      description: A representation of a property in a projection.
      id: Projection
    PartitionId:
      type: object
      properties:
        namespaceId:
          type: string
          description: 'If not empty, the ID of the namespace to which the entities belong.'
        databaseId:
          description: 'If not empty, the ID of the database to which the entities belong.'
          type: string
        projectId:
          description: The ID of the project to which the entities belong.
          type: string
      id: PartitionId
      description: 'A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.'
    GoogleDatastoreAdminV1Progress:
      properties:
        workCompleted:
          description: The amount of work that has been completed. Note that this may be greater than work_estimated.
          type: string
          format: int64
        workEstimated:
          description: An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
          type: string
          format: int64
      description: Measures the progress of a particular metric.
      id: GoogleDatastoreAdminV1Progress
      type: object
    GoogleDatastoreAdminV1ListIndexesResponse:
      description: The response for google.datastore.admin.v1.DatastoreAdmin.ListIndexes.
      id: GoogleDatastoreAdminV1ListIndexesResponse
      type: object
      properties:
        indexes:
          description: The indexes.
          type: array
          items:
            $ref: '#/components/schemas/GoogleDatastoreAdminV1Index'
        nextPageToken:
          type: string
          description: The standard List next-page token.
    AllocateIdsResponse:
      type: object
      description: The response for Datastore.AllocateIds.
      id: AllocateIdsResponse
      properties:
        keys:
          description: 'The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.'
          items:
            $ref: '#/components/schemas/Key'
          type: array
    Count:
      properties:
        upTo:
          format: int64
          description: 'Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency, and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present.'
          type: string
      type: object
      description: Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.
      id: Count
    LookupResponse:
      properties:
        missing:
          description: Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          type: array
          items:
            $ref: '#/components/schemas/EntityResult'
        deferred:
          description: A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          type: array
          items:
            $ref: '#/components/schemas/Key'
        transaction:
          type: string
          description: The identifier of the transaction that was started as part of this Lookup request. Set only when ReadOptions.new_transaction was set in LookupRequest.read_options.
          format: byte
        readTime:
          type: string
          description: The time at which these entities were read or found missing.
          format: google-datetime
        found:
          description: Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
          type: array
          items:
            $ref: '#/components/schemas/EntityResult'
      id: LookupResponse
      description: The response for Datastore.Lookup.
      type: object
    GoogleDatastoreAdminV1ExportEntitiesMetadata:
      description: Metadata for ExportEntities operations.
      properties:
        progressBytes:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
          description: An estimate of the number of bytes processed.
        entityFilter:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1EntityFilter'
          description: Description of which entities are being exported.
        common:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1CommonMetadata'
          description: Metadata common to all Datastore Admin operations.
        outputUrlPrefix:
          type: string
          description: Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.
        progressEntities:
          $ref: '#/components/schemas/GoogleDatastoreAdminV1Progress'
          description: An estimate of the number of entities processed.
      type: object
      id: GoogleDatastoreAdminV1ExportEntitiesMetadata
    GoogleDatastoreAdminV1CommonMetadata:
      properties:
        endTime:
          format: google-datetime
          description: 'The time the operation ended, either successfully or otherwise.'
          type: string
        labels:
          description: The client-assigned labels which were provided when the operation was created. May also include additional labels.
          additionalProperties:
            type: string
          type: object
        startTime:
          format: google-datetime
          type: string
          description: The time that work began on the operation.
        operationType:
          enumDescriptions:
            - Unspecified.
            - ExportEntities.
            - ImportEntities.
            - CreateIndex.
            - DeleteIndex.
          type: string
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
            - CREATE_INDEX
            - DELETE_INDEX
          description: The type of the operation. Can be used as a filter in ListOperationsRequest.
        state:
          description: The current state of the Operation.
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          type: string
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
      type: object
      id: GoogleDatastoreAdminV1CommonMetadata
      description: Metadata common to all Datastore Admin operations.
    GoogleDatastoreAdminV1beta1EntityFilter:
      properties:
        namespaceIds:
          items:
            type: string
          description: 'An empty list represents all namespaces. This is the preferred usage for projects that don''t use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn''t want to include them. Each namespace in this list must be unique.'
          type: array
        kinds:
          items:
            type: string
          type: array
          description: 'If empty, then this represents all kinds.'
      description: 'Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=[''Foo'', ''Bar''], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=[''Foo'', ''Bar''], namespace_ids=[''''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=[''Foo'', ''Bar''], namespace_ids=['''', ''Baz''] The entire Baz namespace: kinds=[], namespace_ids=[''Baz'']'
      type: object
      id: GoogleDatastoreAdminV1beta1EntityFilter
    EntityResult:
      description: The result of fetching an entity from Datastore.
      type: object
      id: EntityResult
      properties:
        cursor:
          format: byte
          type: string
          description: A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.
        createTime:
          type: string
          description: 'The time at which the entity was created. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.'
          format: google-datetime
        version:
          type: string
          format: int64
          description: 'The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.'
        updateTime:
          format: google-datetime
          type: string
          description: 'The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.'
        entity:
          $ref: '#/components/schemas/Entity'
          description: The resulting entity.
    GoogleDatastoreAdminV1MigrationStateEvent:
      type: object
      id: GoogleDatastoreAdminV1MigrationStateEvent
      description: 'An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).'
      properties:
        state:
          enumDescriptions:
            - Unspecified.
            - The migration is running.
            - The migration is paused.
            - The migration is complete.
          description: The new state of the migration.
          type: string
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
    GoogleDatastoreAdminV1beta1CommonMetadata:
      description: Metadata common to all Datastore Admin operations.
      properties:
        operationType:
          description: The type of the operation. Can be used as a filter in ListOperationsRequest.
          enumDescriptions:
            - Unspecified.
            - ExportEntities.
            - ImportEntities.
          enum:
            - OPERATION_TYPE_UNSPECIFIED
            - EXPORT_ENTITIES
            - IMPORT_ENTITIES
          type: string
        labels:
          description: The client-assigned labels which were provided when the operation was created. May also include additional labels.
          type: object
          additionalProperties:
            type: string
        startTime:
          format: google-datetime
          type: string
          description: The time that work began on the operation.
        state:
          description: The current state of the Operation.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
        endTime:
          type: string
          format: google-datetime
          description: 'The time the operation ended, either successfully or otherwise.'
      type: object
      id: GoogleDatastoreAdminV1beta1CommonMetadata
    RollbackRequest:
      description: The request for Datastore.Rollback.
      id: RollbackRequest
      properties:
        transaction:
          description: 'Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.'
          format: byte
          type: string
        databaseId:
          description: The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
          type: string
      type: object
    ReadOptions:
      properties:
        readTime:
          format: google-datetime
          type: string
          description: 'Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
        transaction:
          format: byte
          description: The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.
          type: string
        readConsistency:
          enum:
            - READ_CONSISTENCY_UNSPECIFIED
            - STRONG
            - EVENTUAL
          description: The non-transactional read consistency to use.
          enumDescriptions:
            - Unspecified. This value must not be used.
            - Strong consistency.
            - Eventual consistency.
          type: string
        newTransaction:
          $ref: '#/components/schemas/TransactionOptions'
          description: Options for beginning a new transaction for this request. The new transaction identifier will be returned in the corresponding response as either LookupResponse.transaction or RunQueryResponse.transaction.
      description: The options shared by read requests.
      id: ReadOptions
      type: object
    PropertyOrder:
      properties:
        property:
          description: The property to order by.
          $ref: '#/components/schemas/PropertyReference'
        direction:
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          type: string
          description: The direction to order by. Defaults to `ASCENDING`.
          enumDescriptions:
            - Unspecified. This value must not be used.
            - Ascending.
            - Descending.
      id: PropertyOrder
      description: The desired order for a specific property.
      type: object
    GqlQuery:
      type: object
      properties:
        allowLiterals:
          description: 'When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = ''string literal''` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.'
          type: boolean
        namedBindings:
          description: 'For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `""`.'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GqlQueryParameter'
        positionalBindings:
          type: array
          items:
            $ref: '#/components/schemas/GqlQueryParameter'
          description: 'Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.'
        queryString:
          description: 'A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).'
          type: string
      description: 'A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).'
      id: GqlQuery
    AggregationQuery:
      id: AggregationQuery
      type: object
      properties:
        nestedQuery:
          description: Nested query for aggregation
          $ref: '#/components/schemas/Query'
        aggregations:
          items:
            $ref: '#/components/schemas/Aggregation'
          description: 'Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.'
          type: array
      description: Datastore query for running an aggregation over a Query.
    Sum:
      properties:
        property:
          description: The property to aggregate on.
          $ref: '#/components/schemas/PropertyReference'
      type: object
      id: Sum
      description: 'Sum of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.'
    Entity:
      type: object
      description: A Datastore data object. Must not exceed 1 MiB - 4 bytes.
      properties:
        key:
          $ref: '#/components/schemas/Key'
          description: 'The entity''s key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity''s kind is its key path''s last element''s kind, or null if it has no key.'
        properties:
          description: 'The entity''s properties. The map''s keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Value'
      id: Entity
    RunAggregationQueryResponse:
      properties:
        query:
          description: 'The parsed form of the `GqlQuery` from the request, if it was set.'
          $ref: '#/components/schemas/AggregationQuery'
        batch:
          $ref: '#/components/schemas/AggregationResultBatch'
          description: A batch of aggregation results. Always present.
        transaction:
          format: byte
          description: The identifier of the transaction that was started as part of this RunAggregationQuery request. Set only when ReadOptions.new_transaction was set in RunAggregationQueryRequest.read_options.
          type: string
      type: object
      id: RunAggregationQueryResponse
      description: The response for Datastore.RunAggregationQuery.
    GoogleDatastoreAdminV1IndexedProperty:
      properties:
        direction:
          enumDescriptions:
            - The direction is unspecified.
            - 'The property''s values are indexed so as to support sequencing in ascending order and also query by <, >, <=, >=, and =.'
            - 'The property''s values are indexed so as to support sequencing in descending order and also query by <, >, <=, >=, and =.'
          type: string
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          description: Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.
        name:
          type: string
          description: Required. The property name to index.
      description: A property of an index.
      type: object
      id: GoogleDatastoreAdminV1IndexedProperty
    PathElement:
      description: 'A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete.'
      id: PathElement
      properties:
        id:
          description: The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.
          type: string
          format: int64
        name:
          description: The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
          type: string
        kind:
          description: The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
          type: string
      type: object
    GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata:
      id: GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
      description: 'Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit "creation" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: "projects/{project_id}/operations/datastore-firestore-migration"'
      type: object
      properties:
        migrationStep:
          description: The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
          enum:
            - MIGRATION_STEP_UNSPECIFIED
            - PREPARE
            - START
            - APPLY_WRITES_SYNCHRONOUSLY
            - COPY_AND_VERIFY
            - REDIRECT_EVENTUALLY_CONSISTENT_READS
            - REDIRECT_STRONGLY_CONSISTENT_READS
            - REDIRECT_WRITES
          type: string
          enumDescriptions:
            - Unspecified.
            - 'Pre-migration: the database is prepared for migration.'
            - Start of migration.
            - Writes are applied synchronously to at least one replica.
            - Data is copied to Cloud Firestore and then verified to match the data in Cloud Datastore.
            - Eventually-consistent reads are redirected to Cloud Firestore.
            - Strongly-consistent reads are redirected to Cloud Firestore.
            - Writes are redirected to Cloud Firestore.
        migrationState:
          enum:
            - MIGRATION_STATE_UNSPECIFIED
            - RUNNING
            - PAUSED
            - COMPLETE
          type: string
          description: The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
          enumDescriptions:
            - Unspecified.
            - The migration is running.
            - The migration is paused.
            - The migration is complete.
    Value:
      type: object
      properties:
        arrayValue:
          description: An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`.
          $ref: '#/components/schemas/ArrayValue'
        integerValue:
          type: string
          format: int64
          description: An integer value.
        timestampValue:
          type: string
          description: 'A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.'
          format: google-datetime
        keyValue:
          description: A key value.
          $ref: '#/components/schemas/Key'
        nullValue:
          description: A null value.
          enumDescriptions:
            - Null value.
          type: string
          enum:
            - NULL_VALUE
        doubleValue:
          description: A double value.
          format: double
          type: number
        meaning:
          description: The `meaning` field should only be populated for backwards compatibility.
          format: int32
          type: integer
        geoPointValue:
          description: A geo point value representing a point on the surface of Earth.
          $ref: '#/components/schemas/LatLng'
        excludeFromIndexes:
          type: boolean
          description: If the value should be excluded from all indexes including those defined explicitly.
        stringValue:
          type: string
          description: 'A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.'
        blobValue:
          format: byte
          type: string
          description: 'A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.'
        entityValue:
          description: An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key.
          $ref: '#/components/schemas/Entity'
        booleanValue:
          type: boolean
          description: A boolean value.
      description: A message that can hold any of the supported value types and associated metadata.
      id: Value
    Key:
      id: Key
      description: 'A unique identifier for an entity. If a key''s partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.'
      type: object
      properties:
        path:
          type: array
          items:
            $ref: '#/components/schemas/PathElement'
          description: 'The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element''s _ancestors_. An entity path is always fully complete: *all* of the entity''s ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.'
        partitionId:
          $ref: '#/components/schemas/PartitionId'
          description: 'Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition.'
    GoogleDatastoreAdminV1Index:
      type: object
      description: Datastore composite index definition.
      id: GoogleDatastoreAdminV1Index
      properties:
        ancestor:
          enumDescriptions:
            - The ancestor mode is unspecified.
            - Do not include the entity's ancestors in the index.
            - Include all the entity's ancestors in the index.
          type: string
          description: Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.
          enum:
            - ANCESTOR_MODE_UNSPECIFIED
            - NONE
            - ALL_ANCESTORS
        kind:
          description: Required. The entity kind to which this index applies.
          type: string
        state:
          type: string
          readOnly: true
          enumDescriptions:
            - The state is unspecified.
            - 'The index is being created, and cannot be used by queries. There is an active long-running operation for the index. The index is updated when writing an entity. Some index data may exist.'
            - The index is ready to be used. The index is updated when writing an entity. The index is fully populated from all stored entities it applies to.
            - 'The index is being deleted, and cannot be used by queries. There is an active long-running operation for the index. The index is not updated when writing an entity. Some index data may exist.'
            - 'The index was being created or deleted, but something went wrong. The index cannot by used by queries. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing an entity. Some index data may exist.'
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - DELETING
            - ERROR
          description: Output only. The state of the index.
        properties:
          description: 'Required. An ordered sequence of property names and their index attributes. Requires: * A maximum of 100 properties.'
          items:
            $ref: '#/components/schemas/GoogleDatastoreAdminV1IndexedProperty'
          type: array
        indexId:
          type: string
          readOnly: true
          description: Output only. The resource ID of the index.
        projectId:
          description: Output only. Project ID.
          readOnly: true
          type: string
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  x-stackQL-resources:
    operations:
      id: google.datastore.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    indexes:
      id: google.datastore.indexes
      name: indexes
      title: Indexes
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1indexes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1indexes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.indexes
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1indexes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1indexes~1{indexId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1indexes~1{indexId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/get'
          - $ref: '#/components/x-stackQL-resources/indexes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/delete'
    projects:
      id: google.datastore.projects
      name: projects
      title: Projects
      methods:
        commit:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:commit/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        begin_transaction:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:beginTransaction/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rollback:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:rollback/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run_aggregation_query:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:runAggregationQuery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        lookup:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:lookup/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:export/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        allocate_ids:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:allocateIds/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run_query:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:runQuery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reserve_ids:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}:reserveIds/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/operations':
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: datastore.projects.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/operations/{operationsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: datastore.projects.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: datastore.projects.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: datastore.projects.operations.cancel
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectId}/indexes':
    parameters: *ref_1
    post:
      description: 'Creates the specified index. A newly created index''s initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.'
      operationId: datastore.projects.indexes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleDatastoreAdminV1Index'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.
      operationId: datastore.projects.indexes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDatastoreAdminV1ListIndexesResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: indexes
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.indexes
  '/v1/projects/{projectId}/indexes/{indexId}':
    parameters: *ref_1
    get:
      description: Gets an index.
      operationId: datastore.projects.indexes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleDatastoreAdminV1Index'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: indexId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: 'Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.'
      operationId: datastore.projects.indexes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: indexId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectId}:commit':
    parameters: *ref_1
    post:
      description: 'Commits a transaction, optionally creating, deleting or modifying some entities.'
      operationId: datastore.projects.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: commit
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:beginTransaction':
    parameters: *ref_1
    post:
      description: Begins a new transaction.
      operationId: datastore.projects.beginTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginTransactionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginTransactionResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: begin_transaction
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:rollback':
    parameters: *ref_1
    post:
      description: Rolls back a transaction.
      operationId: datastore.projects.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollbackResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: rollback
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:import':
    parameters: *ref_1
    post:
      description: 'Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.'
      operationId: datastore.projects.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleDatastoreAdminV1ImportEntitiesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:runAggregationQuery':
    parameters: *ref_1
    post:
      description: Runs an aggregation query.
      operationId: datastore.projects.runAggregationQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunAggregationQueryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAggregationQueryResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: run_aggregation_query
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:lookup':
    parameters: *ref_1
    post:
      description: Looks up entities by key.
      operationId: datastore.projects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: lookup
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:export':
    parameters: *ref_1
    post:
      description: 'Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.'
      operationId: datastore.projects.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleDatastoreAdminV1ExportEntitiesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: export
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:allocateIds':
    parameters: *ref_1
    post:
      description: 'Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.'
      operationId: datastore.projects.allocateIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateIdsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocateIdsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: allocate_ids
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:runQuery':
    parameters: *ref_1
    post:
      description: Queries for entities.
      operationId: datastore.projects.runQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunQueryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunQueryResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: run_query
      x-stackQL-verb: exec
  '/v1/projects/{projectId}:reserveIds':
    parameters: *ref_1
    post:
      description: Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
      operationId: datastore.projects.reserveIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReserveIdsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReserveIdsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: reserve_ids
      x-stackQL-verb: exec
