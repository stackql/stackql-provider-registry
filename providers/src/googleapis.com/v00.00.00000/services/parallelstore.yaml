openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Parallelstore API
  description: ''
  version: v1
  x-discovery-doc-revision: '20250804'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/parallelstore
servers:
  - url: https://parallelstore.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    GoogleProtobufEmpty:
      id: GoogleProtobufEmpty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    ListInstancesResponse:
      id: ListInstancesResponse
      description: Response from ListInstances.
      type: object
      properties:
        instances:
          description: The list of Parallelstore instances.
          type: array
          items:
            $ref: '#/components/schemas/Instance'
        nextPageToken:
          description: A token identifying a page of results the server should return.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Instance:
      id: Instance
      description: A Parallelstore instance.
      type: object
      properties:
        name:
          description: >-
            Identifier. The resource name of the instance, in the format
            `projects/{project}/locations/{location}/instances/{instance_id}`.
          type: string
        description:
          description: Optional. The description of the instance. 2048 characters or less.
          type: string
        state:
          description: Output only. The instance state.
          readOnly: true
          type: string
          enumDescriptions:
            - Not set.
            - The instance is being created.
            - The instance is available for use.
            - The instance is being deleted.
            - The instance is not usable.
            - The instance is being upgraded.
            - >-
              The instance is being repaired. This should only be used by
              instances using the `PERSISTENT` deployment type.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - DELETING
            - FAILED
            - UPGRADING
            - REPAIRING
        createTime:
          description: Output only. The time when the instance was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the instance was updated.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: >-
            Optional. Cloud Labels are a flexible and lightweight mechanism for
            organizing cloud resources into groups that reflect a customer's
            organizational needs and deployment strategies. See
            https://cloud.google.com/resource-manager/docs/labels-overview for
            details.
          type: object
          additionalProperties:
            type: string
        capacityGib:
          description: >-
            Required. Immutable. The instance's storage capacity in Gibibytes
            (GiB). Allowed values are between 12000 and 100000, in multiples of
            4000; e.g., 12000, 16000, 20000, ...
          type: string
          format: int64
        daosVersion:
          description: >-
            Output only. Deprecated: The version of DAOS software running in the
            instance.
          readOnly: true
          deprecated: true
          type: string
        accessPoints:
          description: >-
            Output only. A list of IPv4 addresses used for client side
            configuration.
          readOnly: true
          type: array
          items:
            type: string
        network:
          description: >-
            Optional. Immutable. The name of the Compute Engine [VPC
            network](https://cloud.google.com/vpc/docs/vpc) to which the
            instance is connected.
          type: string
        reservedIpRange:
          description: >-
            Optional. Immutable. The ID of the IP address range being used by
            the instance's VPC network. See [Configure a VPC
            network](https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc).
            If no ID is provided, all ranges are considered.
          type: string
        effectiveReservedIpRange:
          description: >-
            Output only. Immutable. The ID of the IP address range being used by
            the instance's VPC network. This field is populated by the service
            and contains the value currently used by the service.
          readOnly: true
          type: string
        fileStripeLevel:
          description: >-
            Optional. Immutable. Stripe level for files. Allowed values are: *
            `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size
            files. * `FILE_STRIPE_LEVEL_BALANCED`: balances performance for
            workloads involving a mix of small and large files. *
            `FILE_STRIPE_LEVEL_MAX`: higher throughput performance for larger
            files.
          type: string
          enumDescriptions:
            - >-
              If not set, FileStripeLevel will default to
              FILE_STRIPE_LEVEL_BALANCED
            - Minimum file striping
            - Medium file striping
            - Maximum file striping
          enum:
            - FILE_STRIPE_LEVEL_UNSPECIFIED
            - FILE_STRIPE_LEVEL_MIN
            - FILE_STRIPE_LEVEL_BALANCED
            - FILE_STRIPE_LEVEL_MAX
        directoryStripeLevel:
          description: >-
            Optional. Immutable. Stripe level for directories. Allowed values
            are: * `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories
            contain a small number of files. *
            `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance for
            workloads involving a mix of small and large directories. *
            `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a
            large number of files.
          type: string
          enumDescriptions:
            - >-
              If not set, DirectoryStripeLevel will default to
              DIRECTORY_STRIPE_LEVEL_MAX
            - Minimum directory striping
            - Medium directory striping
            - Maximum directory striping
          enum:
            - DIRECTORY_STRIPE_LEVEL_UNSPECIFIED
            - DIRECTORY_STRIPE_LEVEL_MIN
            - DIRECTORY_STRIPE_LEVEL_BALANCED
            - DIRECTORY_STRIPE_LEVEL_MAX
        deploymentType:
          description: >-
            Optional. Immutable. The deployment type of the instance. Allowed
            values are: * `SCRATCH`: the instance is a scratch instance. *
            `PERSISTENT`: the instance is a persistent instance.
          type: string
          enumDescriptions:
            - Default Deployment Type It is equivalent to SCRATCH
            - Scratch
            - Persistent
          enum:
            - DEPLOYMENT_TYPE_UNSPECIFIED
            - SCRATCH
            - PERSISTENT
    ImportDataRequest:
      id: ImportDataRequest
      description: Import data from Cloud Storage into a Parallelstore instance.
      type: object
      properties:
        sourceGcsBucket:
          description: >-
            The Cloud Storage source bucket and, optionally, path inside the
            bucket.
          $ref: '#/components/schemas/SourceGcsBucket'
        destinationParallelstore:
          description: Parallelstore destination.
          $ref: '#/components/schemas/DestinationParallelstore'
        requestId:
          description: >-
            Optional. An optional request ID to identify requests. Specify a
            unique request ID so that if you must retry your request, the server
            will know to ignore the request if it has already been completed.
            The server will guarantee that for at least 60 minutes since the
            first request. For example, consider a situation where you make an
            initial request and the request times out. If you make the request
            again with the same request ID, the server can check if original
            operation with the same request ID was received, and if so, will
            ignore the second request. This prevents clients from accidentally
            creating duplicate commitments. The request ID must be a valid UUID
            with the exception that zero UUID is not supported
            (00000000-0000-0000-0000-000000000000).
          type: string
        serviceAccount:
          description: >-
            Optional. User-specified service account credentials to be used when
            performing the transfer. Use one of the following formats: *
            `{EMAIL_ADDRESS_OR_UNIQUE_ID}` *
            `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
            * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}` If
            unspecified, the Parallelstore service agent is used:
            `service-@gcp-sa-parallelstore.iam.gserviceaccount.com`
          type: string
        metadataOptions:
          description: Optional. The transfer metadata options for the import data.
          $ref: '#/components/schemas/TransferMetadataOptions'
    SourceGcsBucket:
      id: SourceGcsBucket
      description: Cloud Storage as the source of a data transfer.
      type: object
      properties:
        uri:
          description: >-
            Required. URI to a Cloud Storage bucket in the format: `gs:///`. The
            path inside the bucket is optional.
          type: string
    DestinationParallelstore:
      id: DestinationParallelstore
      description: Parallelstore as the destination of a data transfer.
      type: object
      properties:
        path:
          description: >-
            Optional. Root directory path to the Paralellstore filesystem,
            starting with `/`. Defaults to `/` if unset.
          type: string
    TransferMetadataOptions:
      id: TransferMetadataOptions
      description: Transfer metadata options for the instance.
      type: object
      properties:
        uid:
          description: Optional. The UID preservation behavior.
          type: string
          enumDescriptions:
            - default is UID_NUMBER_PRESERVE.
            - Do not preserve UID during a transfer job.
            - Preserve UID that is in number format during a transfer job.
          enum:
            - UID_UNSPECIFIED
            - UID_SKIP
            - UID_NUMBER_PRESERVE
        gid:
          description: Optional. The GID preservation behavior.
          type: string
          enumDescriptions:
            - default is GID_NUMBER_PRESERVE.
            - Do not preserve GID during a transfer job.
            - Preserve GID that is in number format during a transfer job.
          enum:
            - GID_UNSPECIFIED
            - GID_SKIP
            - GID_NUMBER_PRESERVE
        mode:
          description: Optional. The mode preservation behavior.
          type: string
          enumDescriptions:
            - default is MODE_PRESERVE.
            - Do not preserve mode during a transfer job.
            - Preserve mode during a transfer job.
          enum:
            - MODE_UNSPECIFIED
            - MODE_SKIP
            - MODE_PRESERVE
    ExportDataRequest:
      id: ExportDataRequest
      description: Export data from Parallelstore to Cloud Storage.
      type: object
      properties:
        sourceParallelstore:
          description: Parallelstore source.
          $ref: '#/components/schemas/SourceParallelstore'
        destinationGcsBucket:
          description: Cloud Storage destination.
          $ref: '#/components/schemas/DestinationGcsBucket'
        requestId:
          description: >-
            Optional. An optional request ID to identify requests. Specify a
            unique request ID so that if you must retry your request, the server
            will know to ignore the request if it has already been completed.
            The server will guarantee that for at least 60 minutes since the
            first request. For example, consider a situation where you make an
            initial request and the request times out. If you make the request
            again with the same request ID, the server can check if original
            operation with the same request ID was received, and if so, will
            ignore the second request. This prevents clients from accidentally
            creating duplicate commitments. The request ID must be a valid UUID
            with the exception that zero UUID is not supported
            (00000000-0000-0000-0000-000000000000).
          type: string
        serviceAccount:
          description: >-
            Optional. User-specified Service Account (SA) credentials to be used
            when performing the transfer. Use one of the following formats: *
            `{EMAIL_ADDRESS_OR_UNIQUE_ID}` *
            `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
            * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}` If
            unspecified, the Parallelstore service agent is used:
            `service-@gcp-sa-parallelstore.iam.gserviceaccount.com`
          type: string
        metadataOptions:
          description: Optional. The metadata options for the export data.
          $ref: '#/components/schemas/TransferMetadataOptions'
    SourceParallelstore:
      id: SourceParallelstore
      description: Parallelstore as the source of a data transfer.
      type: object
      properties:
        path:
          description: >-
            Optional. Root directory path to the Paralellstore filesystem,
            starting with `/`. Defaults to `/` if unset.
          type: string
    DestinationGcsBucket:
      id: DestinationGcsBucket
      description: Cloud Storage as the destination of a data transfer.
      type: object
      properties:
        uri:
          description: >-
            Required. URI to a Cloud Storage bucket in the format: `gs:///`. The
            path inside the bucket is optional.
          type: string
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    OperationMetadata:
      id: OperationMetadata
      description: Long-running operation metadata.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
    ReconciliationOperationMetadata:
      id: ReconciliationOperationMetadata
      description: >-
        Operation metadata returned by the CLH during resource state
        reconciliation.
      type: object
      properties:
        deleteResource:
          description: DEPRECATED. Use exclusive_action instead.
          deprecated: true
          type: boolean
        exclusiveAction:
          description: Excluisive action returned by the CLH.
          type: string
          enumDescriptions:
            - Unknown repair action.
            - >-
              The resource has to be deleted. When using this bit, the CLH
              should fail the operation. DEPRECATED. Instead use DELETE_RESOURCE
              OperationSignal in SideChannel.
            - >-
              This resource could not be repaired but the repair should be tried
              again at a later time. This can happen if there is a dependency
              that needs to be resolved first- e.g. if a parent resource must be
              repaired before a child resource.
          enumDeprecated:
            - false
            - true
            - false
          enum:
            - UNKNOWN_REPAIR_ACTION
            - DELETE
            - RETRY
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.parallelstore.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.parallelstore.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    instances:
      id: google.parallelstore.instances
      name: instances
      title: Instances
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.instances
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import_data:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:importData/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export_data:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:exportData/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instances/methods/get'
          - $ref: '#/components/x-stackQL-resources/instances/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/instances/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/instances/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete'
paths:
  /v1/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: parallelstore.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: extraLocationTypes
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: parallelstore.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: parallelstore.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: parallelstore.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: parallelstore.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: parallelstore.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/instances:
    parameters: *ref_1
    get:
      description: Lists all instances in a given project and location.
      operationId: parallelstore.projects.locations.instances.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstancesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a Parallelstore instance in a given project and location.
      operationId: parallelstore.projects.locations.instances.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: instanceId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:
    parameters: *ref_1
    get:
      description: Gets details of a single instance.
      operationId: parallelstore.projects.locations.instances.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
    patch:
      description: Updates the parameters of a single instance.
      operationId: parallelstore.projects.locations.instances.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single instance.
      operationId: parallelstore.projects.locations.instances.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:importData:
    parameters: *ref_1
    post:
      description: Copies data from Cloud Storage to Parallelstore.
      operationId: parallelstore.projects.locations.instances.importData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:exportData:
    parameters: *ref_1
    post:
      description: Copies data from Parallelstore to Cloud Storage.
      operationId: parallelstore.projects.locations.instances.exportData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
