openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Debugger API
  description: 'Examines the call stack and variables of a running application without stopping or slowing it down. '
  version: v2
  x-discovery-doc-revision: '20230106'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://cloud.google.com/debugger
servers:
  - url: https://clouddebugger.googleapis.com
components:
  schemas:
    Empty:
      id: Empty
      type: object
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
    ExtendedSourceContext:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels with user defined metadata.
        context:
          description: Any source context.
          $ref: '#/components/schemas/SourceContext'
      id: ExtendedSourceContext
      description: An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
    CloudRepoSourceContext:
      type: object
      description: A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
      id: CloudRepoSourceContext
      properties:
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: An alias, which may be a branch or tag.
        revisionId:
          type: string
          description: A revision ID.
        repoId:
          $ref: '#/components/schemas/RepoId'
          description: The ID of the repo.
        aliasName:
          type: string
          description: The name of an alias (branch, tag, etc.).
    ProjectRepoId:
      properties:
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
        projectId:
          type: string
          description: The ID of the project.
      id: ProjectRepoId
      type: object
      description: Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
    CloudWorkspaceId:
      description: A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
      properties:
        name:
          type: string
          description: The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
        repoId:
          description: The ID of the repo containing the workspace.
          $ref: '#/components/schemas/RepoId'
      id: CloudWorkspaceId
      type: object
    StatusMessage:
      description: Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
      type: object
      properties:
        description:
          description: Status message text.
          $ref: '#/components/schemas/FormatMessage'
        isError:
          description: Distinguishes errors from informational messages.
          type: boolean
        refersTo:
          description: Reference to which the message applies.
          enumDescriptions:
            - Status doesn't refer to any particular input.
            - Status applies to the breakpoint and is related to its location.
            - Status applies to the breakpoint and is related to its condition.
            - Status applies to the breakpoint and is related to its expressions.
            - Status applies to the breakpoint and is related to its age.
            - Status applies to the breakpoint when the breakpoint failed to exit the canary state.
            - Status applies to the entire variable.
            - Status applies to variable value (variable name is valid).
          type: string
          enum:
            - UNSPECIFIED
            - BREAKPOINT_SOURCE_LOCATION
            - BREAKPOINT_CONDITION
            - BREAKPOINT_EXPRESSION
            - BREAKPOINT_AGE
            - BREAKPOINT_CANARY_FAILED
            - VARIABLE_NAME
            - VARIABLE_VALUE
      id: StatusMessage
    GerritSourceContext:
      id: GerritSourceContext
      type: object
      properties:
        gerritProject:
          description: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
          type: string
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: An alias, which may be a branch or tag.
        aliasName:
          description: The name of an alias (branch, tag, etc.).
          type: string
        revisionId:
          description: A revision (commit) ID.
          type: string
      description: A SourceContext referring to a Gerrit project.
    StackFrame:
      description: Represents a stack frame context.
      id: StackFrame
      properties:
        function:
          type: string
          description: Demangled function name at the call site.
        locals:
          description: Set of local variables at the stack frame location. Note that this might not be populated for all stack frames.
          type: array
          items:
            $ref: '#/components/schemas/Variable'
        arguments:
          items:
            $ref: '#/components/schemas/Variable'
          type: array
          description: Set of arguments passed to this function. Note that this might not be populated for all stack frames.
        location:
          description: Source location of the call site.
          $ref: '#/components/schemas/SourceLocation'
      type: object
    UpdateActiveBreakpointRequest:
      properties:
        breakpoint:
          description: Required. Updated breakpoint information. The field `id` must be set. The agent must echo all Breakpoint specification fields in the update.
          $ref: '#/components/schemas/Breakpoint'
      type: object
      id: UpdateActiveBreakpointRequest
      description: Request to update an active breakpoint.
    ListBreakpointsResponse:
      type: object
      id: ListBreakpointsResponse
      properties:
        nextWaitToken:
          description: A wait token that can be used in the next call to `list` (REST) or `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
          type: string
        breakpoints:
          type: array
          description: 'List of breakpoints matching the request. The fields `id` and `location` are guaranteed to be set on each breakpoint. The fields: `stack_frames`, `evaluated_expressions` and `variable_table` are cleared on each breakpoint regardless of its status.'
          items:
            $ref: '#/components/schemas/Breakpoint'
      description: Response for listing breakpoints.
    RegisterDebuggeeResponse:
      type: object
      id: RegisterDebuggeeResponse
      description: Response for registering a debuggee.
      properties:
        agentId:
          description: A unique ID generated for the agent. Each RegisterDebuggee request will generate a new agent ID.
          type: string
        debuggee:
          description: Debuggee resource. The field `id` is guaranteed to be set (in addition to the echoed fields). If the field `is_disabled` is set to `true`, the agent should disable itself by removing all breakpoints and detaching from the application. It should however continue to poll `RegisterDebuggee` until reenabled.
          $ref: '#/components/schemas/Debuggee'
    SourceContext:
      properties:
        cloudWorkspace:
          description: A SourceContext referring to a snapshot in a cloud workspace.
          $ref: '#/components/schemas/CloudWorkspaceSourceContext'
        git:
          description: A SourceContext referring to any third party Git repo (e.g. GitHub).
          $ref: '#/components/schemas/GitSourceContext'
        gerrit:
          $ref: '#/components/schemas/GerritSourceContext'
          description: A SourceContext referring to a Gerrit project.
        cloudRepo:
          $ref: '#/components/schemas/CloudRepoSourceContext'
          description: A SourceContext referring to a revision in a cloud repo.
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      type: object
      id: SourceContext
    Debuggee:
      properties:
        uniquifier:
          type: string
          description: Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
        sourceContexts:
          type: array
          items:
            $ref: '#/components/schemas/SourceContext'
          description: References to the locations and revisions of the source code used in the deployed application.
        extSourceContexts:
          type: array
          items:
            $ref: '#/components/schemas/ExtendedSourceContext'
          description: References to the locations and revisions of the source code used in the deployed application.
        isDisabled:
          type: boolean
          description: If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
        description:
          description: Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
          type: string
        isInactive:
          type: boolean
          description: If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
        project:
          type: string
          description: Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
        labels:
          description: A set of custom debuggee properties, populated by the agent, to be displayed to the user.
          type: object
          additionalProperties:
            type: string
        agentVersion:
          description: 'Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).'
          type: string
        id:
          type: string
          description: Unique identifier for the debuggee generated by the controller service.
        status:
          $ref: '#/components/schemas/StatusMessage'
          description: Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
        canaryMode:
          type: string
          description: Used when setting breakpoint canary for this debuggee.
          enum:
            - CANARY_MODE_UNSPECIFIED
            - CANARY_MODE_ALWAYS_ENABLED
            - CANARY_MODE_ALWAYS_DISABLED
            - CANARY_MODE_DEFAULT_ENABLED
            - CANARY_MODE_DEFAULT_DISABLED
          enumDescriptions:
            - CANARY_MODE_UNSPECIFIED is equivalent to CANARY_MODE_ALWAYS_DISABLED so that if the debuggee is not configured to use the canary feature, the feature will be disabled.
            - Always enable breakpoint canary regardless of the value of breakpoint's canary option.
            - Always disable breakpoint canary regardless of the value of breakpoint's canary option.
            - Depends on the breakpoint's canary option. Enable canary by default if the breakpoint's canary option is not specified.
            - Depends on the breakpoint's canary option. Disable canary by default if the breakpoint's canary option is not specified.
      id: Debuggee
      description: Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
      type: object
    ListDebuggeesResponse:
      type: object
      description: Response for listing debuggees.
      properties:
        debuggees:
          type: array
          description: List of debuggees accessible to the calling user. The fields `debuggee.id` and `description` are guaranteed to be set. The `description` field is a human readable field provided by agents and can be displayed to users.
          items:
            $ref: '#/components/schemas/Debuggee'
      id: ListDebuggeesResponse
    AliasContext:
      id: AliasContext
      description: An alias to a repo revision.
      properties:
        kind:
          description: The alias kind.
          type: string
          enumDescriptions:
            - Do not use.
            - Git tag
            - Git branch
            - OTHER is used to specify non-standard aliases, those not of the kinds above. For example, if a Git repo has a ref named "refs/foo/bar", it is considered to be of kind OTHER.
          enum:
            - ANY
            - FIXED
            - MOVABLE
            - OTHER
        name:
          description: The alias name.
          type: string
      type: object
    RepoId:
      properties:
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
      description: A unique identifier for a cloud repo.
      id: RepoId
      type: object
    SourceLocation:
      id: SourceLocation
      properties:
        path:
          description: Path to the source file within the source context of the target binary.
          type: string
        column:
          type: integer
          format: int32
          description: Column within a line. The first column in a line as the value `1`. Agents that do not support setting breakpoints on specific columns ignore this field.
        line:
          description: Line inside the file. The first line in the file has the value `1`.
          type: integer
          format: int32
      description: Represents a location in the source code.
      type: object
    FormatMessage:
      description: Represents a message with parameters.
      properties:
        parameters:
          type: array
          items:
            type: string
          description: Optional parameters to be embedded into the message.
        format:
          description: 'Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load ''$0'' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`'
          type: string
      id: FormatMessage
      type: object
    SetBreakpointResponse:
      id: SetBreakpointResponse
      properties:
        breakpoint:
          $ref: '#/components/schemas/Breakpoint'
          description: Breakpoint resource. The field `id` is guaranteed to be set (in addition to the echoed fields).
      description: Response for setting a breakpoint.
      type: object
    ListActiveBreakpointsResponse:
      type: object
      properties:
        waitExpired:
          description: If set to `true`, indicates that there is no change to the list of active breakpoints and the server-selected timeout has expired. The `breakpoints` field would be empty and should be ignored.
          type: boolean
        nextWaitToken:
          description: A token that can be used in the next method call to block until the list of breakpoints changes.
          type: string
        breakpoints:
          type: array
          items:
            $ref: '#/components/schemas/Breakpoint'
          description: List of all active breakpoints. The fields `id` and `location` are guaranteed to be set on each breakpoint.
      id: ListActiveBreakpointsResponse
      description: Response for listing active breakpoints.
    UpdateActiveBreakpointResponse:
      description: Response for updating an active breakpoint. The message is defined to allow future extensions.
      properties: {}
      id: UpdateActiveBreakpointResponse
      type: object
    Breakpoint:
      description: '------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.'
      type: object
      id: Breakpoint
      properties:
        status:
          description: 'Breakpoint status. The status includes an error flag and a human readable message. This field is usually unset. The message can be either informational or an error message. Regardless, clients should always display the text message back to the user. Error status indicates complete failure of the breakpoint. Example (non-final state): `Still loading symbols...` Examples (final state): * `Invalid line number` referring to location * `Field f not found in class C` referring to condition'
          $ref: '#/components/schemas/StatusMessage'
        variableTable:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
          description: The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.
        id:
          type: string
          description: Breakpoint identifier, unique in the scope of the debuggee.
        evaluatedExpressions:
          items:
            $ref: '#/components/schemas/Variable'
          type: array
          description: Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.
        logLevel:
          type: string
          description: Indicates the severity of the log. Only relevant when action is `LOG`.
          enumDescriptions:
            - Information log message.
            - Warning log message.
            - Error log message.
          enum:
            - INFO
            - WARNING
            - ERROR
        finalTime:
          type: string
          format: google-datetime
          description: Time this breakpoint was finalized as seen by the server in seconds resolution.
        canaryExpireTime:
          description: The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state.
          format: google-datetime
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: A set of custom breakpoint properties, populated by the agent, to be displayed to the user.
        state:
          enumDescriptions:
            - Breakpoint state UNSPECIFIED.
            - Enabling canary but no agents are available.
            - Enabling canary and successfully assigning canary agents.
            - Breakpoint rolling out to all agents.
            - Breakpoint is hit/complete/failed.
          type: string
          description: The current state of the breakpoint.
          enum:
            - STATE_UNSPECIFIED
            - STATE_CANARY_PENDING_AGENTS
            - STATE_CANARY_ACTIVE
            - STATE_ROLLING_TO_ALL
            - STATE_IS_FINAL
        expressions:
          type: array
          items:
            type: string
          description: List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.
        stackFrames:
          description: The stack at breakpoint time, where stack_frames[0] represents the most recently entered function.
          type: array
          items:
            $ref: '#/components/schemas/StackFrame'
        location:
          $ref: '#/components/schemas/SourceLocation'
          description: Breakpoint source location.
        action:
          enum:
            - CAPTURE
            - LOG
          enumDescriptions:
            - Capture stack frame and variables and update the breakpoint. The data is only captured once. After that the breakpoint is set in a final state.
            - Log each breakpoint hit. The breakpoint remains active until deleted or expired.
          type: string
          description: Action that the agent should perform when the code at the breakpoint location is hit.
        createTime:
          type: string
          format: google-datetime
          description: Time this breakpoint was created by the server in seconds resolution.
        isFinalState:
          description: When true, indicates that this is a final result and the breakpoint state will not change from here on.
          type: boolean
        logMessageFormat:
          type: string
          description: 'Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.'
        userEmail:
          type: string
          description: E-mail address of the user that created this breakpoint
        condition:
          description: Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.
          type: string
    RegisterDebuggeeRequest:
      id: RegisterDebuggeeRequest
      properties:
        debuggee:
          $ref: '#/components/schemas/Debuggee'
          description: Required. Debuggee information to register. The fields `project`, `uniquifier`, `description` and `agent_version` of the debuggee must be set.
      type: object
      description: Request to register a debuggee.
    GitSourceContext:
      id: GitSourceContext
      type: object
      properties:
        url:
          description: Git repository URL.
          type: string
        revisionId:
          type: string
          description: Git commit hash. required.
      description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
    CloudWorkspaceSourceContext:
      type: object
      id: CloudWorkspaceSourceContext
      description: A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
      properties:
        snapshotId:
          description: The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
          type: string
        workspaceId:
          description: The ID of the workspace.
          $ref: '#/components/schemas/CloudWorkspaceId'
    GetBreakpointResponse:
      id: GetBreakpointResponse
      type: object
      description: Response for getting breakpoint information.
      properties:
        breakpoint:
          $ref: '#/components/schemas/Breakpoint'
          description: Complete breakpoint state. The fields `id` and `location` are guaranteed to be set.
    Variable:
      properties:
        status:
          description: 'Status associated with the variable. This field will usually stay unset. A status of a single variable only applies to that variable or expression. The rest of breakpoint data still remains valid. Variables might be reported in error state even when breakpoint is not in final state. The message may refer to variable name with `refers_to` set to `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`. In either case variable value and members will be unset. Example of error message applied to name: `Invalid expression syntax`. Example of information message applied to value: `Not captured`. Examples of error message applied to value: * `Malformed string`, * `Field f not found in class C` * `Null pointer dereference`'
          $ref: '#/components/schemas/StatusMessage'
        members:
          description: Members contained or pointed to by the variable.
          items:
            $ref: '#/components/schemas/Variable'
          type: array
        varTableIndex:
          type: integer
          description: Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The `var_table_index` field is an index into `variable_table` in Breakpoint.
          format: int32
        name:
          description: Name of the variable, if any.
          type: string
        type:
          type: string
          description: Variable type (e.g. `MyClass`). If the variable is split with `var_table_index`, `type` goes next to `value`. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object.
        value:
          description: Simple value of the variable.
          type: string
      type: object
      id: Variable
      description: 'Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented: 1) A simple variable: int x = 5 { name: "x", value: "5", type: "int" } // Captured variable 2) A compound object: struct T { int m1; int m2; }; T x = { 3, 7 }; { // Captured variable name: "x", type: "T", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 3) A pointer where the pointee was captured: T x = { 3, 7 }; T* p = &x; { // Captured variable name: "p", type: "T*", value: "0x00500500", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 4) A pointer where the pointee was not captured: T* p = new T; { // Captured variable name: "p", type: "T*", value: "0x00400400" status { is_error: true, description { format: "unavailable" } } } The status should describe the reason for the missing value, such as ``, ``, ``. Note that a null pointer should not have members. 5) An unnamed value: int* p = new int(7); { // Captured variable name: "p", value: "0x00500500", type: "int*", members { value: "7", type: "int" } } 6) An unnamed pointer where the pointee was not captured: int* p = new int(7); int** pp = &p; { // Captured variable name: "pp", value: "0x00500500", type: "int**", members { value: "0x00400400", type: "int*" status { is_error: true, description: { format: "unavailable" } } } } } To optimize computation, memory and network traffic, variables that repeat in the output multiple times can be stored once in a shared variable table and be referenced using the `var_table_index` field. The variables stored in the shared table are nameless and are essentially a partition of the complete variable. To reconstruct the complete variable, merge the referencing variable with the referenced variable. When using the shared variable table, the following variables: T x = { 3, 7 }; T* p = &x; T& r = x; { name: "x", var_table_index: 3, type: "T" } // Captured variables { name: "p", value "0x00500500", type="T*", var_table_index: 3 } { name: "r", type="T&", var_table_index: 3 } { // Shared variable table entry #3: members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } Note that the pointer address is stored with the referencing variable and not with the referenced variable. This allows the referenced variable to be shared between pointers and references. The type field is optional. The debugger agent may or may not support it.'
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud_debugger: Use Stackdriver Debugger
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    debugger_debuggees_breakpoints:
      id: google.clouddebugger.debugger_debuggees_breakpoints
      name: debugger_debuggees_breakpoints
      title: Debugger_debuggees_breakpoints
      methods:
        set:
          operation:
            $ref: '#/paths/~1v2~1debugger~1debuggees~1{debuggeeId}~1breakpoints~1set/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v2~1debugger~1debuggees~1{debuggeeId}~1breakpoints~1{breakpointId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v2~1debugger~1debuggees~1{debuggeeId}~1breakpoints~1{breakpointId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v2~1debugger~1debuggees~1{debuggeeId}~1breakpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: breakpoints
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/debugger_debuggees_breakpoints/methods/get'
          - $ref: '#/components/x-stackQL-resources/debugger_debuggees_breakpoints/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/debugger_debuggees_breakpoints/methods/delete'
    debugger_debuggees:
      id: google.clouddebugger.debugger_debuggees
      name: debugger_debuggees
      title: Debugger_debuggees
      methods:
        list:
          operation:
            $ref: '#/paths/~1v2~1debugger~1debuggees/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: debuggees
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/debugger_debuggees/methods/list'
        insert: []
        update: []
        delete: []
    controller_debuggees_breakpoints:
      id: google.clouddebugger.controller_debuggees_breakpoints
      name: controller_debuggees_breakpoints
      title: Controller_debuggees_breakpoints
      methods:
        update:
          operation:
            $ref: '#/paths/~1v2~1controller~1debuggees~1{debuggeeId}~1breakpoints~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v2~1controller~1debuggees~1{debuggeeId}~1breakpoints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: breakpoints
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/controller_debuggees_breakpoints/methods/list'
        insert: []
        update: []
        delete: []
    controller_debuggees:
      id: google.clouddebugger.controller_debuggees
      name: controller_debuggees
      title: Controller_debuggees
      methods:
        register:
          operation:
            $ref: '#/paths/~1v2~1controller~1debuggees~1register/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  /v2/debugger/debuggees/{debuggeeId}/breakpoints/set:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: Sets the breakpoint to the debuggee.
      operationId: clouddebugger.debugger.debuggees.breakpoints.set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Breakpoint'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetBreakpointResponse'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: query
          name: clientVersion
          schema:
            type: string
        - in: query
          name: canaryOption
          schema:
            type: string
      x-stackQL-resource: debugger_debuggees_breakpoints
      x-stackQL-verb: exec
  /v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}:
    parameters: *ref_1
    delete:
      description: Deletes the breakpoint from the debuggee.
      operationId: clouddebugger.debugger.debuggees.breakpoints.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: path
          name: breakpointId
          required: true
          schema:
            type: string
        - in: query
          name: clientVersion
          schema:
            type: string
      x-stackQL-resource: debugger_debuggees_breakpoints
      x-stackQL-verb: delete
    get:
      description: Gets breakpoint information.
      operationId: clouddebugger.debugger.debuggees.breakpoints.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBreakpointResponse'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: path
          name: breakpointId
          required: true
          schema:
            type: string
        - in: query
          name: clientVersion
          schema:
            type: string
      x-stackQL-resource: debugger_debuggees_breakpoints
      x-stackQL-verb: select
  /v2/debugger/debuggees/{debuggeeId}/breakpoints:
    parameters: *ref_1
    get:
      description: Lists all breakpoints for the debuggee.
      operationId: clouddebugger.debugger.debuggees.breakpoints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBreakpointsResponse'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: query
          name: includeInactive
          schema:
            type: boolean
        - in: query
          name: stripResults
          schema:
            type: boolean
        - in: query
          name: includeAllUsers
          schema:
            type: boolean
        - in: query
          name: waitToken
          schema:
            type: string
        - in: query
          name: clientVersion
          schema:
            type: string
        - in: query
          name: action.value
          schema:
            type: string
      x-stackQL-resource: debugger_debuggees_breakpoints
      x-stackQL-verb: select
  /v2/debugger/debuggees:
    parameters: *ref_1
    get:
      description: Lists all the debuggees that the user has access to.
      operationId: clouddebugger.debugger.debuggees.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDebuggeesResponse'
      parameters:
        - in: query
          name: clientVersion
          schema:
            type: string
        - in: query
          name: project
          schema:
            type: string
        - in: query
          name: includeInactive
          schema:
            type: boolean
      x-stackQL-resource: debugger_debuggees
      x-stackQL-verb: select
  /v2/controller/debuggees/{debuggeeId}/breakpoints/{id}:
    parameters: *ref_1
    put:
      description: Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the `location`, `condition` and `expressions` fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.
      operationId: clouddebugger.controller.debuggees.breakpoints.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActiveBreakpointRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateActiveBreakpointResponse'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: controller_debuggees_breakpoints
      x-stackQL-verb: exec
  /v2/controller/debuggees/{debuggeeId}/breakpoints:
    parameters: *ref_1
    get:
      description: Returns the list of all active breakpoints for the debuggee. The breakpoint specification (`location`, `condition`, and `expressions` fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn't change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.
      operationId: clouddebugger.controller.debuggees.breakpoints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActiveBreakpointsResponse'
      parameters:
        - in: path
          name: debuggeeId
          required: true
          schema:
            type: string
        - in: query
          name: successOnTimeout
          schema:
            type: boolean
        - in: query
          name: agentId
          schema:
            type: string
        - in: query
          name: waitToken
          schema:
            type: string
      x-stackQL-resource: controller_debuggees_breakpoints
      x-stackQL-verb: select
  /v2/controller/debuggees/register:
    parameters: *ref_1
    post:
      description: Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.
      operationId: clouddebugger.controller.debuggees.register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDebuggeeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud_debugger
          Oauth2c:
            - https://www.googleapis.com/auth/cloud_debugger
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDebuggeeResponse'
      parameters: []
      x-stackQL-resource: controller_debuggees
      x-stackQL-verb: exec
