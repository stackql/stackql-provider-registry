openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Healthcare API
  description: 'Manage, store, and access healthcare data in Google Cloud Platform.'
  version: v1
  x-discovery-doc-revision: '20230814'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/healthcare'
servers:
  - url: 'https://healthcare.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
          type: string
          format: google-fieldmask
      description: Request message for `SetIamPolicy` method.
    Dataset:
      properties:
        timeZone:
          description: 'The default timezone used by this dataset. Must be a either a valid IANA time zone name such as "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources, such as HL7 messages, where no explicit timezone is specified.'
          type: string
        name:
          description: 'Resource name of the dataset, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.'
          type: string
      description: 'A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data.'
      id: Dataset
      type: object
    GoogleCloudHealthcareV1FhirBigQueryDestination:
      properties:
        writeDisposition:
          description: 'Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.'
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination tables are empty.
            - Erase all existing data in the destination tables before writing the FHIR resources.
            - Append data to the destination tables.
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
          type: string
        datasetUri:
          type: string
          description: 'BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.'
        force:
          description: 'If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.'
          type: boolean
        schemaConfig:
          $ref: '#/components/schemas/SchemaConfig'
          description: The configuration for the exported BigQuery schema.
      type: object
      id: GoogleCloudHealthcareV1FhirBigQueryDestination
      description: The configuration for exporting to BigQuery.
    PubsubDestination:
      properties:
        pubsubTopic:
          type: string
          description: 'The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that Pub/Sub messages are published on. Supplied by the client. The `PubsubMessage` contains the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail.'
      description: The Pub/Sub output destination. The Cloud Healthcare Service Agent requires the `roles/pubsub.publisher` Cloud IAM role on the Pub/Sub topic.
      type: object
      id: PubsubDestination
    GoogleCloudHealthcareV1DicomBigQueryDestination:
      id: GoogleCloudHealthcareV1DicomBigQueryDestination
      description: The BigQuery table where the server writes the output.
      properties:
        force:
          type: boolean
          description: 'Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.'
        writeDisposition:
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination table is empty.
            - Erase all existing data in the destination table before writing the instances.
            - Append data to the destination table.
          type: string
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
          description: 'Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.'
        tableUri:
          description: 'BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`'
          type: string
      type: object
    CancelOperationRequest:
      properties: {}
      description: The request message for Operations.CancelOperation.
      id: CancelOperationRequest
      type: object
    DeidentifyDicomStoreRequest:
      description: Creates a new DICOM store with sensitive information de-identified.
      id: DeidentifyDicomStoreRequest
      properties:
        gcsConfigUri:
          description: 'Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project''s Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.'
          type: string
        config:
          $ref: '#/components/schemas/DeidentifyConfig'
          description: Deidentify configuration. Only one of `config` and `gcs_config_uri` can be specified.
        filterConfig:
          description: Filter configuration.
          $ref: '#/components/schemas/DicomFilterConfig'
        destinationStore:
          type: string
          description: 'The name of the DICOM store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination DICOM store must not exist. * The caller must have the necessary permissions to create the destination DICOM store.'
      type: object
    ArchiveUserDataMappingRequest:
      properties: {}
      description: Archives the specified User data mapping.
      id: ArchiveUserDataMappingRequest
      type: object
    Field:
      description: A (sub) field of a type.
      type: object
      properties:
        type:
          description: The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
          type: string
        name:
          description: 'The name of the field. For example, "PID-1" or just "1".'
          type: string
        table:
          type: string
          description: 'The HL7v2 table this field refers to. For example, PID-15 (Patient''s Primary Language) usually refers to table "0296".'
        maxOccurs:
          format: int32
          type: integer
          description: The maximum number of times this field can be repeated. 0 or -1 means unbounded.
        minOccurs:
          description: The minimum number of times this field must be present/repeated.
          type: integer
          format: int32
      id: Field
    EntityMentionRelationship:
      type: object
      description: Defines directed relationship from one entity mention to another.
      id: EntityMentionRelationship
      properties:
        subjectId:
          description: subject_id is the id of the subject entity mention.
          type: string
        confidence:
          format: double
          type: number
          description: The model's confidence in this annotation. A number between 0 and 1.
        objectId:
          type: string
          description: object_id is the id of the object entity mention.
    ImportMessagesRequest:
      description: Request to import messages.
      id: ImportMessagesRequest
      properties:
        gcsSource:
          description: Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.
          $ref: '#/components/schemas/GcsSource'
      type: object
    ListMessagesResponse:
      type: object
      description: Lists the messages in the specified HL7v2 store.
      properties:
        nextPageToken:
          type: string
          description: Token to retrieve the next page of results or empty if there are no more results in the list.
        hl7V2Messages:
          type: array
          description: The returned Messages. Won't be more Messages than the value of page_size in the request. See view for populated fields.
          items:
            $ref: '#/components/schemas/Message'
      id: ListMessagesResponse
    Operation:
      type: object
      id: Operation
      properties:
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        response:
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
      description: This resource represents a long-running operation that is the result of a network API call.
    Hl7TypesConfig:
      type: object
      id: Hl7TypesConfig
      properties:
        type:
          type: array
          description: The HL7v2 type definitions.
          items:
            $ref: '#/components/schemas/Type'
        version:
          type: array
          description: The version selectors that this config applies to. A message must match ALL version sources to apply.
          items:
            $ref: '#/components/schemas/VersionSource'
      description: Root config for HL7v2 datatype definitions for a specific HL7v2 version.
    Empty:
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      type: object
    LinkedEntity:
      type: object
      properties:
        entityId:
          type: string
          description: 'entity_id is a concept unique identifier. These are prefixed by a string that identifies the entity coding system, followed by the unique identifier within that system. For example, "UMLS/C0000970". This also supports ad hoc entities, which are formed by normalizing entity mention content.'
      id: LinkedEntity
      description: 'EntityMentions can be linked to multiple entities using a LinkedEntity message lets us add other fields, e.g. confidence.'
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          items:
            type: string
          type: array
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
      id: TestIamPermissionsRequest
    RevokeConsentRequest:
      id: RevokeConsentRequest
      description: 'Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given Consent is in the `REVOKED` state, no new revision is committed.'
      type: object
      properties:
        consentArtifact:
          type: string
          description: 'Optional. The resource name of the Consent artifact that contains proof of the user''s revocation of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.'
    ListUserDataMappingsResponse:
      id: ListUserDataMappingsResponse
      properties:
        userDataMappings:
          type: array
          description: The returned User data mappings. The maximum number of User data mappings returned is determined by the value of page_size in the ListUserDataMappingsRequest.
          items:
            $ref: '#/components/schemas/UserDataMapping'
        nextPageToken:
          type: string
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
      type: object
    UserDataMapping:
      properties:
        archiveTime:
          description: Output only. Indicates the time when this mapping was archived.
          type: string
          readOnly: true
          format: google-datetime
        userId:
          type: string
          description: Required. User's UUID provided by the client.
        archived:
          type: boolean
          readOnly: true
          description: Output only. Indicates whether this mapping is archived.
        name:
          type: string
          description: 'Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.'
        dataId:
          description: Required. A unique identifier for the mapped resource.
          type: string
        resourceAttributes:
          description: 'Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field "values" in each Attribute.'
          items:
            $ref: '#/components/schemas/Attribute'
          type: array
      description: Maps a resource to the associated user and Attributes.
      type: object
      id: UserDataMapping
    AuditConfig:
      properties:
        service:
          type: string
          description: 'Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.'
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
      id: AuditConfig
      type: object
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
    GcsDestination:
      properties:
        uriPrefix:
          description: 'URI of an existing Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path.'
          type: string
        messageView:
          type: string
          enum:
            - MESSAGE_VIEW_UNSPECIFIED
            - RAW_ONLY
            - PARSED_ONLY
            - FULL
            - SCHEMATIZED_ONLY
            - BASIC
          description: 'Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.'
          enumDescriptions:
            - 'Not specified, equivalent to FULL.'
            - 'Server responses include all the message fields except parsed_data field, and schematized_data fields.'
            - 'Server responses include all the message fields except data field, and schematized_data fields.'
            - Server responses include all the message fields.
            - Server responses include all the message fields except data and parsed_data fields.
            - Server responses include only the name field.
        contentStructure:
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - MESSAGE_JSON
          enumDescriptions:
            - 'If the content structure is not specified, the default value `MESSAGE_JSON` will be used.'
            - Messages are printed using the JSON format returned from the `GetMessage` API. Messages are delimited with newlines.
          type: string
          description: The format of the exported HL7v2 message files.
      id: GcsDestination
      type: object
      description: The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.
    StreamConfig:
      id: StreamConfig
      properties:
        deidentifiedStoreDestination:
          description: 'The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project''s **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
          $ref: '#/components/schemas/DeidentifiedStoreDestination'
        resourceTypes:
          description: 'Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.'
          type: array
          items:
            type: string
        bigqueryDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirBigQueryDestination'
          description: 'The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn''t align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
      description: Contains configuration for streaming FHIR export.
      type: object
    InfoTypeTransformation:
      properties:
        replaceWithInfoTypeConfig:
          $ref: '#/components/schemas/ReplaceWithInfoTypeConfig'
          description: Config for replace with InfoType.
        infoTypes:
          description: 'InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.'
          items:
            type: string
          type: array
        cryptoHashConfig:
          description: Config for crypto hash.
          $ref: '#/components/schemas/CryptoHashConfig'
        characterMaskConfig:
          description: Config for character mask.
          $ref: '#/components/schemas/CharacterMaskConfig'
        dateShiftConfig:
          $ref: '#/components/schemas/DateShiftConfig'
          description: Config for date shift.
        redactConfig:
          description: Config for text redaction.
          $ref: '#/components/schemas/RedactConfig'
      type: object
      description: A transformation to apply to text that is identified as a specific info_type.
      id: InfoTypeTransformation
    IngestMessageResponse:
      id: IngestMessageResponse
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: Created message resource.
        hl7Ack:
          format: byte
          type: string
          description: HL7v2 ACK message.
      type: object
      description: Acknowledges that a message has been ingested into the specified HL7v2 store.
    KmsWrappedCryptoKey:
      id: KmsWrappedCryptoKey
      description: 'Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project''s Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).'
      type: object
      properties:
        wrappedKey:
          description: Required. The wrapped data crypto key.
          type: string
          format: byte
        cryptoKey:
          description: 'Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.'
          type: string
    FhirStore:
      properties:
        name:
          type: string
          description: 'Output only. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.'
        labels:
          description: 'User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.'
          type: object
          additionalProperties:
            type: string
        validationConfig:
          description: Configuration for how to validate incoming FHIR resources against configured profiles.
          $ref: '#/components/schemas/ValidationConfig'
        streamConfigs:
          items:
            $ref: '#/components/schemas/StreamConfig'
          type: array
          description: 'A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project''s **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.'
        disableResourceVersioning:
          type: boolean
          description: 'Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.'
        notificationConfigs:
          items:
            $ref: '#/components/schemas/FhirNotificationConfig'
          description: Specifies where and whether to send notifications upon changes to a FHIR store.
          type: array
        enableUpdateCreate:
          description: 'Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.'
          type: boolean
        complexDataTypeReferenceParsing:
          type: string
          enum:
            - COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED
            - DISABLED
            - ENABLED
          description: 'Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.'
          enumDescriptions:
            - No parsing behavior specified. This is the same as DISABLED for backwards compatibility.
            - References in complex data types are ignored.
            - References in complex data types are parsed.
        defaultSearchHandlingStrict:
          description: 'If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.'
          type: boolean
        notificationConfig:
          $ref: '#/components/schemas/NotificationConfig'
          deprecated: true
          description: 'Deprecated. Use `notification_configs` instead. If non-empty, publish all resource modifications of this FHIR store to this destination. The Pub/Sub message attributes contain a map with a string describing the action that has triggered the notification. For example, "action":"CreateResource".'
        version:
          type: string
          enumDescriptions:
            - Users must specify a version on store creation or an error is returned.
            - 'Draft Standard for Trial Use, [Release 2](https://www.hl7.org/fhir/DSTU2)'
            - 'Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)'
            - '[Release 4](https://www.hl7.org/fhir/R4)'
          enum:
            - VERSION_UNSPECIFIED
            - DSTU2
            - STU3
            - R4
          description: Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.
        disableReferentialIntegrity:
          description: 'Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.'
          type: boolean
      description: Represents a FHIR store.
      type: object
      id: FhirStore
    Status:
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
      type: object
    ListConsentArtifactsResponse:
      id: ListConsentArtifactsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
        consentArtifacts:
          description: The returned Consent artifacts. The maximum number of artifacts returned is determined by the value of page_size in the ListConsentArtifactsRequest.
          type: array
          items:
            $ref: '#/components/schemas/ConsentArtifact'
    FhirConfig:
      id: FhirConfig
      type: object
      properties:
        defaultKeepExtensions:
          description: 'The behaviour for handling FHIR extensions that aren''t otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.'
          type: boolean
        fieldMetadataList:
          type: array
          items:
            $ref: '#/components/schemas/FieldMetadata'
          description: Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
      description: Specifies how to handle de-identification of a FHIR store.
    DeidentifyFhirStoreRequest:
      description: Creates a new FHIR store with sensitive information de-identified.
      type: object
      id: DeidentifyFhirStoreRequest
      properties:
        resourceFilter:
          description: 'A filter specifying the resources to include in the output. If not specified, all resources are included in the output.'
          $ref: '#/components/schemas/FhirFilter'
        destinationStore:
          type: string
          description: 'The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same location. De-identifying data across multiple locations is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store.'
        gcsConfigUri:
          description: 'Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project''s Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.'
          type: string
        config:
          description: Deidentify configuration. Only one of `config` and `gcs_config_uri` can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        skipModifiedResources:
          type: boolean
          description: 'If true, skips resources that are created or modified after the de-identify operation is created.'
    ListOperationsResponse:
      properties:
        nextPageToken:
          type: string
          description: The standard List next-page token.
        operations:
          type: array
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
      description: The response message for Operations.ListOperations.
      type: object
      id: ListOperationsResponse
    QueryAccessibleDataResponse:
      description: Response for successful QueryAccessibleData operations. This structure is included in the response upon operation completion.
      id: QueryAccessibleDataResponse
      type: object
      properties:
        gcsUris:
          type: array
          items:
            type: string
          description: 'List of files, each of which contains a list of data_id(s) that are consented for a specified use in the request.'
    ImportResourcesRequest:
      description: Request to import resources.
      properties:
        gcsSource:
          description: Cloud Storage source data location and import configuration. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. Each Cloud Storage object should be a text file that contains the format specified in ContentStructure.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirGcsSource'
        contentStructure:
          type: string
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - BUNDLE
            - RESOURCE
            - BUNDLE_PRETTY
            - RESOURCE_PRETTY
          description: 'The content structure in the source location. If not specified, the server treats the input source files as BUNDLE.'
          enumDescriptions:
            - 'If the content structure is not specified, the default value `BUNDLE` is used.'
            - The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a bundle that contains one or more resources.
            - The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a single resource.
            - The entire file is one JSON bundle. The JSON can span multiple lines.
            - The entire file is one JSON resource. The JSON can span multiple lines.
      id: ImportResourcesRequest
      type: object
    Type:
      type: object
      description: A type definition for some HL7v2 type (incl. Segments and Datatypes).
      id: Type
      properties:
        primitive:
          description: 'If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.'
          enumDescriptions:
            - Not a primitive.
            - String primitive.
            - Element that can have unschematized children.
            - 'Like STRING, but all delimiters below this element are ignored.'
          type: string
          enum:
            - PRIMITIVE_UNSPECIFIED
            - STRING
            - VARIES
            - UNESCAPED_STRING
        name:
          type: string
          description: 'The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".'
        fields:
          description: The (sub) fields this type has (if not primitive).
          items:
            $ref: '#/components/schemas/Field'
          type: array
    Binding:
      properties:
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
        condition:
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          $ref: '#/components/schemas/Expr'
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
      description: 'Associates `members`, or principals, with a `role`.'
      id: Binding
      type: object
    ListConsentRevisionsResponse:
      id: ListConsentRevisionsResponse
      properties:
        nextPageToken:
          type: string
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
        consents:
          description: The returned Consent revisions. The maximum number of revisions returned is determined by the value of `page_size` in the ListConsentRevisionsRequest.
          type: array
          items:
            $ref: '#/components/schemas/Consent'
      type: object
    ExportMessagesRequest:
      properties:
        endTime:
          type: string
          description: 'The end of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to come after the `start_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.'
          format: google-datetime
        filter:
          description: 'Restricts messages exported to those matching a filter, only applicable to PubsubDestination and GcsDestination. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in the `yyyy-mm-dd` format. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, and is just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the `yyyy-mm-dd` date the message was sent in the dataset''s time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. Note: The filter will be applied to every message in the HL7v2 store whose `send_time` lies in the range defined by the `start_time` and the `end_time`. Even if the filter only matches a small set of messages, the export operation can still take a long time to finish when a lot of messages are between the specified `start_time` and `end_time` range.'
          type: string
        startTime:
          description: 'The start of the range in `send_time` (MSH.7, https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the `end_time` defined below. Only messages whose `send_time` lies in the range `start_time` (inclusive) to `end_time` (exclusive) are exported.'
          format: google-datetime
          type: string
        pubsubDestination:
          $ref: '#/components/schemas/PubsubDestination'
          description: Export messages to a Pub/Sub topic.
        gcsDestination:
          description: Export to a Cloud Storage destination.
          $ref: '#/components/schemas/GcsDestination'
      description: Request to schedule an export.
      type: object
      id: ExportMessagesRequest
    ArchiveUserDataMappingResponse:
      id: ArchiveUserDataMappingResponse
      description: Archives the specified User data mapping.
      properties: {}
      type: object
    GoogleCloudHealthcareV1FhirGcsSource:
      id: GoogleCloudHealthcareV1FhirGcsSource
      type: object
      description: Specifies the configuration for importing data from Cloud Storage.
      properties:
        uri:
          type: string
          description: 'Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.'
    ProgressCounter:
      type: object
      properties:
        failure:
          type: string
          description: The number of units that failed in the operation.
          format: int64
        success:
          type: string
          format: int64
          description: The number of units that succeeded in the operation.
        pending:
          description: The number of units that are pending in the operation.
          format: int64
          type: string
      id: ProgressCounter
      description: ProgressCounter provides counters to describe an operation's progress.
    GoogleCloudHealthcareV1ConsentPolicy:
      type: object
      id: GoogleCloudHealthcareV1ConsentPolicy
      properties:
        authorizationRule:
          $ref: '#/components/schemas/Expr'
          description: 'Required. The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).'
        resourceAttributes:
          items:
            $ref: '#/components/schemas/Attribute'
          description: 'The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.'
          type: array
      description: Represents a user's consent in terms of the resources that can be accessed and under what conditions.
    ConsentStore:
      id: ConsentStore
      description: Represents a consent store.
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources'
        defaultConsentTtl:
          format: google-duration
          description: Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.
          type: string
        enableConsentCreateOnUpdate:
          type: boolean
          description: 'Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.'
        name:
          type: string
          description: 'Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.'
      type: object
    ImportResourcesResponse:
      type: object
      description: Final response of importing resources. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.
      properties: {}
      id: ImportResourcesResponse
    Resources:
      properties:
        resources:
          description: 'List of resources IDs. For example, "Patient/1234".'
          type: array
          items:
            type: string
      type: object
      description: A list of FHIR resources.
      id: Resources
    Result:
      properties:
        dataId:
          type: string
          description: The unique identifier of the evaluated resource.
        consented:
          type: boolean
          description: Whether the resource is consented for the given use.
        consentDetails:
          type: object
          description: The resource names of all evaluated Consents mapped to their evaluation.
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
      id: Result
      type: object
      description: The consent evaluation result for a single `data_id`.
    SearchResourcesRequest:
      description: Request to search the resources in the specified FHIR store.
      id: SearchResourcesRequest
      type: object
      properties:
        resourceType:
          type: string
          description: 'The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).'
    Segment:
      id: Segment
      type: object
      properties:
        segmentId:
          description: 'A string that indicates the type of segment. For example, EVN or PID.'
          type: string
        setId:
          description: Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.
          type: string
        fields:
          description: 'A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: * (0.1, "hemoglobin") denotes that the first component of Field 0 has the value "hemoglobin". * (1.1.2, "CBC") denotes that the second sub-component of the first component of Field 1 has the value "CBC". * (1[0].1, "HbA1c") denotes that the first component of the first Instance of Field 1, which is repeated, has the value "HbA1c".'
          type: object
          additionalProperties:
            type: string
      description: A segment in a structured format.
    CharacterMaskConfig:
      id: CharacterMaskConfig
      properties:
        maskingCharacter:
          type: string
          description: 'Character to mask the sensitive values. If not supplied, defaults to "*".'
      type: object
      description: Mask a string by replacing its characters with a fixed character.
    Policy:
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      type: object
      id: Policy
      properties:
        etag:
          format: byte
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
        bindings:
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        version:
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          type: integer
          format: int32
        auditConfigs:
          type: array
          description: Specifies cloud audit logging configuration for this policy.
          items:
            $ref: '#/components/schemas/AuditConfig'
    EntityMention:
      properties:
        linkedEntities:
          items:
            $ref: '#/components/schemas/LinkedEntity'
          type: array
          description: linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.
        type:
          description: 'The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.'
          type: string
        text:
          description: text is the location of the entity mention in the document.
          $ref: '#/components/schemas/TextSpan'
        subject:
          description: 'The subject this entity mention relates to. Its value is one of: PATIENT, FAMILY_MEMBER, OTHER'
          $ref: '#/components/schemas/Feature'
        certaintyAssessment:
          $ref: '#/components/schemas/Feature'
          description: 'The certainty assessment of the entity mention. Its value is one of: LIKELY, SOMEWHAT_LIKELY, UNCERTAIN, SOMEWHAT_UNLIKELY, UNLIKELY, CONDITIONAL'
        mentionId:
          description: mention_id uniquely identifies each entity mention in a single response.
          type: string
        confidence:
          description: The model's confidence in this entity mention annotation. A number between 0 and 1.
          format: double
          type: number
        temporalAssessment:
          $ref: '#/components/schemas/Feature'
          description: 'How this entity mention relates to the subject temporally. Its value is one of: CURRENT, CLINICAL_HISTORY, FAMILY_HISTORY, UPCOMING, ALLERGY'
      type: object
      id: EntityMention
      description: An entity mention in the document.
    ExportResourcesRequest:
      properties:
        _type:
          description: 'String of comma-delimited FHIR resource types. If provided, only resources of the specified resource type(s) are exported.'
          type: string
        _since:
          description: 'If provided, only resources updated after this time are exported. The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example, `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be specified to the second and include a time zone.'
          type: string
        bigqueryDestination:
          description: 'The BigQuery output destination. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`. The output is one BigQuery table per resource type. Unlike when setting `BigQueryDestination` for `StreamConfig`, `ExportResources` does not create BigQuery views.'
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirBigQueryDestination'
        gcsDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirGcsDestination'
          description: 'The Cloud Storage output destination. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. The exported outputs are organized by FHIR resource types. The server creates one object per resource type. Each object contains newline delimited JSON, and each line is a FHIR resource.'
      type: object
      description: Request to export resources.
      id: ExportResourcesRequest
    ConsentEvaluation:
      description: The detailed evaluation of a particular Consent.
      type: object
      id: ConsentEvaluation
      properties:
        evaluationResult:
          description: The evaluation result.
          enum:
            - EVALUATION_RESULT_UNSPECIFIED
            - NOT_APPLICABLE
            - NO_MATCHING_POLICY
            - NO_SATISFIED_POLICY
            - HAS_SATISFIED_POLICY
          type: string
          enumDescriptions:
            - No evaluation result specified. This option is invalid.
            - 'The Consent is not applicable to the requested access determination. For example, the Consent does not apply to the user for which the access determination is requested, or it has a `state` of `REVOKED`, or it has expired.'
            - The Consent does not have a policy that matches the `resource_attributes` of the evaluated resource.
            - 'The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, but no `authorization_rule` was satisfied.'
            - 'The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, and at least one `authorization_rule` was satisfied.'
    Hl7SchemaConfig:
      id: Hl7SchemaConfig
      description: 'Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.'
      type: object
      properties:
        messageSchemaConfigs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaGroup'
          description: 'Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.'
        version:
          items:
            $ref: '#/components/schemas/VersionSource'
          type: array
          description: Each VersionSource is tested and only if they all match is the schema used for the message.
    DeidentifiedStoreDestination:
      description: Contains configuration for streaming de-identified FHIR export.
      id: DeidentifiedStoreDestination
      properties:
        store:
          description: 'The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.'
          type: string
        config:
          description: The configuration to use when de-identifying resources that are added to this store.
          $ref: '#/components/schemas/DeidentifyConfig'
      type: object
    GroupOrSegment:
      type: object
      description: Construct representing a logical group or a segment.
      id: GroupOrSegment
      properties:
        segment:
          $ref: '#/components/schemas/SchemaSegment'
        group:
          $ref: '#/components/schemas/SchemaGroup'
    SchemaGroup:
      type: object
      properties:
        minOccurs:
          type: integer
          description: The minimum number of times this group must be present/repeated.
          format: int32
        choice:
          type: boolean
          description: 'True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.'
        maxOccurs:
          description: The maximum number of times this group can be repeated. 0 or -1 means unbounded.
          type: integer
          format: int32
        members:
          description: Nested groups and/or segments.
          type: array
          items:
            $ref: '#/components/schemas/GroupOrSegment'
        name:
          type: string
          description: 'The name of this group. For example, "ORDER_DETAIL".'
      id: SchemaGroup
      description: An HL7v2 logical group construct.
    SchematizedData:
      properties:
        error:
          type: string
          description: The error output of the parser.
        data:
          type: string
          description: JSON output of the parser.
      description: The content of an HL7v2 message in a structured format as specified by a schema.
      id: SchematizedData
      type: object
    FhirStoreMetrics:
      id: FhirStoreMetrics
      description: List of metrics for a given FHIR store.
      type: object
      properties:
        metrics:
          description: List of FhirStoreMetric by resource type.
          type: array
          items:
            $ref: '#/components/schemas/FhirStoreMetric'
        name:
          description: 'The resource name of the FHIR store to get metrics for, in the format `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.'
          type: string
    ListLocationsResponse:
      type: object
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          type: array
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      type: object
      properties:
        permissions:
          items:
            type: string
          type: array
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
      description: Response message for `TestIamPermissions` method.
    ParserConfig:
      id: ParserConfig
      description: The configuration for the parser. It determines how the server parses the messages.
      properties:
        allowNullHeader:
          description: Determines whether messages with no header are allowed.
          type: boolean
        segmentTerminator:
          description: 'Byte(s) to use as the segment terminator. If this is unset, ''\r'' is used as segment terminator, matching the HL7 version 2 specification.'
          type: string
          format: byte
        schema:
          $ref: '#/components/schemas/SchemaPackage'
          description: 'Schemas used to parse messages in this store, if schematized parsing is desired.'
        version:
          enumDescriptions:
            - 'Unspecified parser version, equivalent to V1.'
            - 'The `parsed_data` includes every given non-empty message field except the Field Separator (MSH-1) field. As a result, the parsed MSH segment starts with the MSH-2 field and the field numbers are off-by-one with respect to the HL7 standard.'
            - The `parsed_data` includes every given non-empty message field.
            - 'This version is the same as V2, with the following change. The `parsed_data` contains unescaped escaped field separators, component separators, sub-component separators, repetition separators, escape characters, and truncation characters. If `schema` is specified, the schematized parser uses improved parsing heuristics compared to previous versions.'
          enum:
            - PARSER_VERSION_UNSPECIFIED
            - V1
            - V2
            - V3
          description: 'Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.'
          type: string
      type: object
    ExportMessagesResponse:
      type: object
      id: ExportMessagesResponse
      description: Final response for the export operation. This structure is included in the response to describe the detailed outcome.
      properties: {}
    SchemaSegment:
      properties:
        maxOccurs:
          description: The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
          format: int32
          type: integer
        minOccurs:
          type: integer
          format: int32
          description: The minimum number of times this segment can be present in this group.
        type:
          type: string
          description: 'The Segment type. For example, "PID".'
      description: An HL7v2 Segment.
      id: SchemaSegment
      type: object
    ListHl7V2StoresResponse:
      id: ListHl7V2StoresResponse
      type: object
      properties:
        hl7V2Stores:
          items:
            $ref: '#/components/schemas/Hl7V2Store'
          description: The returned HL7v2 stores. Won't be more HL7v2 stores than the value of page_size in the request.
          type: array
        nextPageToken:
          type: string
          description: Token to retrieve the next page of results or empty if there are no more results in the list.
      description: Lists the HL7v2 stores in the given dataset.
    RedactConfig:
      description: 'Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."'
      id: RedactConfig
      type: object
      properties: {}
    FhirNotificationConfig:
      type: object
      id: FhirNotificationConfig
      properties:
        sendFullResource:
          description: Whether to send full FHIR resource to this Pub/Sub topic.
          type: boolean
        sendPreviousResourceOnDelete:
          type: boolean
          description: 'Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.'
        pubsubTopic:
          type: string
          description: 'The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can''t be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).'
      description: Contains the configuration for FHIR notifications.
    NotificationConfig:
      description: Specifies where to send notifications upon changes to a data store.
      id: NotificationConfig
      properties:
        pubsubTopic:
          description: 'The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can''t be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren''t submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.'
          type: string
        sendForBulkImport:
          description: Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
          type: boolean
      type: object
    FhirFilter:
      description: Filter configuration.
      type: object
      properties:
        resources:
          description: 'List of resources to include in the output. If this list is empty or not specified, all resources are included in the output.'
          $ref: '#/components/schemas/Resources'
      id: FhirFilter
    ImportDicomDataRequest:
      description: Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite.
      id: ImportDicomDataRequest
      properties:
        gcsSource:
          description: Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomGcsSource'
      type: object
    IngestMessageRequest:
      type: object
      description: Ingests a message into the specified HL7v2 store.
      id: IngestMessageRequest
      properties:
        message:
          description: HL7v2 message to ingest.
          $ref: '#/components/schemas/Message'
    Entity:
      id: Entity
      properties:
        entityId:
          type: string
          description: 'entity_id is a first class field entity_id uniquely identifies this concept and its meta-vocabulary. For example, "UMLS/C0000970".'
        preferredTerm:
          type: string
          description: 'preferred_term is the preferred term for this concept. For example, "Acetaminophen". For ad hoc entities formed by normalization, this is the most popular unnormalized string.'
        vocabularyCodes:
          type: array
          items:
            type: string
          description: 'Vocabulary codes are first-class fields and differentiated from the concept unique identifier (entity_id). vocabulary_codes contains the representation of this concept in particular vocabularies, such as ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the vocabulary, followed by the unique code within that vocabulary. For example, "RXNORM/A10334543".'
      type: object
      description: The candidate entities that an entity mention could link to.
    GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary:
      description: Contains a summary of the DeidentifyFhirStore operation.
      id: GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary
      properties: {}
      type: object
    OperationMetadata:
      type: object
      description: OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.
      properties:
        endTime:
          format: google-datetime
          type: string
          description: The time at which execution was completed.
        logsUrl:
          description: 'A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).'
          type: string
        counter:
          $ref: '#/components/schemas/ProgressCounter'
        createTime:
          type: string
          description: The time at which the operation was created by the API.
          format: google-datetime
        apiMethodName:
          type: string
          description: The name of the API method that initiated the operation.
        cancelRequested:
          description: Specifies if cancellation was requested for the operation.
          type: boolean
      id: OperationMetadata
    DicomFilterConfig:
      id: DicomFilterConfig
      description: Specifies the filter configuration for DICOM resources.
      type: object
      properties:
        resourcePathsGcsUri:
          type: string
          description: 'The Cloud Storage location of the filter configuration file. The `gcs_uri` must be in the format `gs://bucket/path/to/object`. The filter configuration file must contain a list of resource paths separated by newline characters (\n or \r\n). Each resource path must be in the format "/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]" The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location.'
    GoogleCloudHealthcareV1DicomStreamConfig:
      id: GoogleCloudHealthcareV1DicomStreamConfig
      type: object
      description: StreamConfig specifies configuration for a streaming DICOM export.
      properties:
        bigqueryDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomBigQueryDestination'
          description: 'Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination''s table schema will be automatically updated in case a new instance''s data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
    AnalyzeEntitiesRequest:
      description: The request to analyze healthcare entities in a document.
      type: object
      properties:
        documentContent:
          description: document_content is a document to be annotated.
          type: string
        licensedVocabularies:
          items:
            enumDescriptions:
              - No licensed vocabulary specified.
              - ICD-10-CM vocabulary
              - SNOMED CT (US version) vocabulary
            type: string
            enum:
              - LICENSED_VOCABULARY_UNSPECIFIED
              - ICD10CM
              - SNOMEDCT_US
          type: array
          description: 'A list of licensed vocabularies to use in the request, in addition to the default unlicensed vocabularies.'
        alternativeOutputFormat:
          enumDescriptions:
            - No alternative output format is specified.
            - FHIR bundle output.
          description: Optional. Alternative output format to be generated based on the results of analysis.
          enum:
            - ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED
            - FHIR_BUNDLE
          type: string
      id: AnalyzeEntitiesRequest
    ConsentArtifact:
      description: Documentation of a user's consent.
      type: object
      properties:
        witnessSignature:
          $ref: '#/components/schemas/Signature'
          description: Optional. A signature from a witness.
        name:
          description: 'Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.'
          type: string
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        consentContentVersion:
          description: Optional. An string indicating the version of the consent information shown to the user.
          type: string
        consentContentScreenshots:
          description: 'Optional. Screenshots, PDFs, or other binary information documenting the user''s consent.'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        guardianSignature:
          description: Optional. A signature from a guardian.
          $ref: '#/components/schemas/Signature'
        metadata:
          type: object
          additionalProperties:
            type: string
          description: 'Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.'
        userSignature:
          $ref: '#/components/schemas/Signature'
          description: Optional. User's signature.
      id: ConsentArtifact
    Hl7V2NotificationConfig:
      properties:
        pubsubTopic:
          description: 'The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It''s guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
          type: string
        filter:
          type: string
          description: 'Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it''s just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset''s time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.'
      type: object
      id: Hl7V2NotificationConfig
      description: Specifies where and whether to send notifications upon changes to a data store.
    GoogleCloudHealthcareV1DicomGcsSource:
      id: GoogleCloudHealthcareV1DicomGcsSource
      type: object
      description: Specifies the configuration for importing data from Cloud Storage.
      properties:
        uri:
          type: string
          description: 'Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * ''*'' to match 0 or more non-separator characters * ''**'' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm extensions in `my-directory/` and its sub-directories. * ''?'' to match 1 character. All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata.'
    ConsentList:
      id: ConsentList
      type: object
      properties:
        consents:
          description: 'The resource names of the Consents to evaluate against, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.'
          items:
            type: string
          type: array
      description: List of resource names of Consent resources.
    CreateMessageRequest:
      id: CreateMessageRequest
      description: Creates a new message.
      type: object
      properties:
        message:
          description: HL7v2 message.
          $ref: '#/components/schemas/Message'
    GoogleCloudHealthcareV1ConsentGcsDestination:
      id: GoogleCloudHealthcareV1ConsentGcsDestination
      properties:
        uriPrefix:
          description: 'URI for a Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket and directory referenced in `uri_prefix`.'
          type: string
      description: The Cloud Storage location for export.
      type: object
    DicomStore:
      id: DicomStore
      description: Represents a DICOM store.
      type: object
      properties:
        labels:
          description: 'User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.'
          additionalProperties:
            type: string
          type: object
        streamConfigs:
          description: 'Optional. A list of streaming configs used to configure the destination of streaming exports for every DICOM instance insertion in this DICOM store. After a new config is added to `stream_configs`, DICOM instance insertions are streamed to the new destination. When a config is removed from `stream_configs`, the server stops streaming to that destination. Each config must contain a unique destination.'
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomStreamConfig'
          type: array
        notificationConfig:
          description: Notification destination for new DICOM instances. Supplied by the client.
          $ref: '#/components/schemas/NotificationConfig'
        name:
          type: string
          description: 'Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.'
    AttributeDefinition:
      id: AttributeDefinition
      type: object
      description: A client-defined consent attribute.
      properties:
        consentDefaultValues:
          description: 'Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.'
          type: array
          items:
            type: string
        name:
          description: 'Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.'
          type: string
        description:
          description: Optional. A description of the attribute.
          type: string
        category:
          type: string
          enum:
            - CATEGORY_UNSPECIFIED
            - RESOURCE
            - REQUEST
          enumDescriptions:
            - No category specified. This option is invalid.
            - 'Specify this category when this attribute describes the properties of resources. For example, data anonymity or data type.'
            - 'Specify this category when this attribute describes the properties of requests. For example, requester''s role or requester''s organization.'
          description: Required. The category of the attribute. The value of this field cannot be changed after creation.
        allowedValues:
          items:
            type: string
          description: Required. Possible values for the attribute. The number of allowed values must not exceed 500. An empty list is invalid. The list can only be expanded after creation.
          type: array
        dataMappingDefaultValue:
          description: 'Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.'
          type: string
    Location:
      id: Location
      properties:
        labels:
          type: object
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
        locationId:
          type: string
          description: 'The canonical id for this location. For example: `"us-east1"`.'
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        metadata:
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
      description: A resource that represents a Google Cloud location.
      type: object
    ListConsentsResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
        consents:
          items:
            $ref: '#/components/schemas/Consent'
          description: The returned Consents. The maximum number of Consents returned is determined by the value of page_size in the ListConsentsRequest.
          type: array
      id: ListConsentsResponse
    DeidentifyDatasetRequest:
      description: Redacts identifying information from the specified dataset.
      id: DeidentifyDatasetRequest
      type: object
      properties:
        config:
          description: Deidentify configuration. Only one of `config` and `gcs_config_uri` can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        destinationDataset:
          description: The name of the dataset resource to create and write the redacted data to. * The destination dataset must not exist. * The destination dataset must be in the same location as the source dataset. De-identifying data across multiple locations is not supported.
          type: string
        gcsConfigUri:
          description: 'Cloud Storage location to read the JSON cloud.healthcare.deidentify.DeidentifyConfig from, overriding the default config. Must be of the form `gs://{bucket_id}/path/to/object`. The Cloud Storage location must grant the Cloud IAM role `roles/storage.objectViewer` to the project''s Cloud Healthcare Service Agent service account. Only one of `config` and `gcs_config_uri` can be specified.'
          type: string
    GoogleCloudHealthcareV1FhirGcsDestination:
      type: object
      id: GoogleCloudHealthcareV1FhirGcsDestination
      properties:
        uriPrefix:
          description: 'URI for a Cloud Storage directory where result files should be written, in the format of `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.'
          type: string
      description: The configuration for exporting to Cloud Storage.
    GcsSource:
      properties:
        uri:
          type: string
          description: 'Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.'
      description: Specifies the configuration for importing data from Cloud Storage.
      id: GcsSource
      type: object
    CryptoHashConfig:
      description: 'Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).'
      type: object
      id: CryptoHashConfig
      properties:
        cryptoKey:
          format: byte
          type: string
          description: An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
        kmsWrapped:
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
          description: KMS wrapped key. Must not be set if `crypto_key` is set.
    ListDicomStoresResponse:
      description: Lists the DICOM stores in the given dataset.
      properties:
        dicomStores:
          items:
            $ref: '#/components/schemas/DicomStore'
          description: The returned DICOM stores. Won't be more DICOM stores than the value of page_size in the request.
          type: array
        nextPageToken:
          description: Token to retrieve the next page of results or empty if there are no more results in the list.
          type: string
      id: ListDicomStoresResponse
      type: object
    TagFilterList:
      type: object
      id: TagFilterList
      description: List of tags to be filtered.
      properties:
        tags:
          description: 'Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".'
          type: array
          items:
            type: string
    ExportResourcesResponse:
      type: object
      id: ExportResourcesResponse
      properties: {}
      description: Response when all resources export successfully. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.
    AnalyzeEntitiesResponse:
      id: AnalyzeEntitiesResponse
      type: object
      description: Includes recognized entity mentions and relationships between them.
      properties:
        relationships:
          description: relationships contains all the binary relationships that were identified between entity mentions within the provided document.
          type: array
          items:
            $ref: '#/components/schemas/EntityMentionRelationship'
        fhirBundle:
          type: string
          description: 'The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that includes all the entities, the entity mentions, and the relationships in JSON format.'
        entities:
          description: The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.
          items:
            $ref: '#/components/schemas/Entity'
          type: array
        entityMentions:
          type: array
          items:
            $ref: '#/components/schemas/EntityMention'
          description: The `entity_mentions` field contains all the annotated medical entities that were mentioned in the provided document.
    GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary:
      type: object
      description: Contains a summary of the DeidentifyDicomStore operation.
      id: GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary
      properties: {}
    ListConsentStoresResponse:
      id: ListConsentStoresResponse
      type: object
      properties:
        consentStores:
          items:
            $ref: '#/components/schemas/ConsentStore'
          description: The returned consent stores. The maximum number of stores returned is determined by the value of page_size in the ListConsentStoresRequest.
          type: array
        nextPageToken:
          type: string
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
    GoogleCloudHealthcareV1DicomGcsDestination:
      id: GoogleCloudHealthcareV1DicomGcsDestination
      properties:
        uriPrefix:
          type: string
          description: 'The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.'
        mimeType:
          description: 'MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000) - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png - application/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.'
          type: string
      description: The Cloud Storage location where the server writes the output and the export configuration.
      type: object
    Expr:
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      properties:
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
      type: object
      id: Expr
    SchemaPackage:
      description: A schema package contains a set of schemas and type definitions.
      id: SchemaPackage
      type: object
      properties:
        unexpectedSegmentHandling:
          description: Determines how unexpected segments (segments not matched to the schema) are handled.
          type: string
          enum:
            - UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED
            - FAIL
            - SKIP
            - PARSE
          enumDescriptions:
            - 'Unspecified handling mode, equivalent to FAIL.'
            - Unexpected segments fail to parse and return an error.
            - 'Unexpected segments do not fail, but are omitted from the output.'
            - 'Unexpected segments do not fail, but are parsed in place and added to the current group. If a segment has a type definition, it is used, otherwise it is parsed as VARIES.'
        types:
          items:
            $ref: '#/components/schemas/Hl7TypesConfig'
          type: array
          description: Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
        ignoreMinOccurs:
          type: boolean
          description: 'Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.'
        schematizedParsingType:
          enum:
            - SCHEMATIZED_PARSING_TYPE_UNSPECIFIED
            - SOFT_FAIL
            - HARD_FAIL
          description: Determines how messages that fail to parse are handled.
          type: string
          enumDescriptions:
            - 'Unspecified schematized parsing type, equivalent to `SOFT_FAIL`.'
            - Messages that fail to parse are still stored and ACKed but a parser error is stored in place of the schematized data.
            - Messages that fail to parse are rejected from ingestion/insertion and return an error code.
        schemas:
          description: Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
          type: array
          items:
            $ref: '#/components/schemas/Hl7SchemaConfig'
    Signature:
      id: Signature
      type: object
      description: User signature.
      properties:
        signatureTime:
          description: Optional. Timestamp of the signature.
          format: google-datetime
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
          description: 'Optional. Metadata associated with the user''s signature. For example, the user''s name or the user''s title.'
        image:
          description: Optional. An image of the user's signature.
          $ref: '#/components/schemas/Image'
        userId:
          type: string
          description: Required. User's UUID provided by the client.
    Consent:
      id: Consent
      description: Represents a user's consent.
      type: object
      properties:
        metadata:
          description: 'Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.'
          additionalProperties:
            type: string
          type: object
        ttl:
          description: Input only. The time to live for this Consent from when it is created.
          type: string
          format: google-duration
        revisionCreateTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The timestamp that the revision was created.
        name:
          description: 'Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.'
          type: string
        policies:
          description: Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1ConsentPolicy'
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        expireTime:
          format: google-datetime
          description: Timestamp in UTC of when this Consent is considered expired.
          type: string
        consentArtifact:
          type: string
          description: 'Required. The resource name of the Consent artifact that contains proof of the end user''s consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.'
        revisionId:
          readOnly: true
          description: 'Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent''s resource name.'
          type: string
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - ARCHIVED
            - REVOKED
            - DRAFT
            - REJECTED
          description: Required. Indicates the current state of this Consent.
          enumDescriptions:
            - No state specified. Treated as ACTIVE only at the time of resource creation.
            - The Consent is active and is considered when evaluating a user's consent on resources.
            - The archived state is currently not being used.
            - A revoked Consent is not considered when evaluating a user's consent on resources.
            - A draft Consent is not considered when evaluating a user's consent on resources unless explicitly specified.
            - 'When a draft Consent is rejected by a user, it is set to a rejected state. A rejected Consent is not considered when evaluating a user''s consent on resources.'
    Image:
      description: Raw bytes representing consent artifact content.
      type: object
      id: Image
      properties:
        gcsUri:
          type: string
          description: 'Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.'
        rawBytes:
          description: 'Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.'
          format: byte
          type: string
    ListFhirStoresResponse:
      type: object
      id: ListFhirStoresResponse
      properties:
        nextPageToken:
          type: string
          description: Token to retrieve the next page of results or empty if there are no more results in the list.
        fhirStores:
          description: The returned FHIR stores. Won't be more FHIR stores than the value of page_size in the request.
          items:
            $ref: '#/components/schemas/FhirStore'
          type: array
      description: Lists the FHIR stores in the given dataset.
    ValidationConfig:
      id: ValidationConfig
      properties:
        enabledImplementationGuides:
          type: array
          description: 'A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.'
          items:
            type: string
        disableRequiredFieldValidation:
          description: 'Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.'
          type: boolean
        disableReferenceTypeValidation:
          description: 'Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.'
          type: boolean
        disableFhirpathValidation:
          type: boolean
          description: 'Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.'
        disableProfileValidation:
          type: boolean
          description: Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
      type: object
      description: Contains the configuration for FHIR profiles and validation.
    QueryAccessibleDataRequest:
      id: QueryAccessibleDataRequest
      description: 'Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging] (https://cloud.google.com/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry).'
      type: object
      properties:
        requestAttributes:
          additionalProperties:
            type: string
          type: object
          description: The values of request attributes associated with this access request.
        resourceAttributes:
          additionalProperties:
            type: string
          description: 'Optional. The values of resource attributes associated with the type of resources being requested. If no values are specified, then all resource types are included in the output.'
          type: object
        gcsDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1ConsentGcsDestination'
          description: The Cloud Storage destination. The Cloud Healthcare API service account must have the `roles/storage.objectAdmin` Cloud IAM role for this Cloud Storage location.
    ImportDicomDataResponse:
      id: ImportDicomDataResponse
      description: Returns additional information in regards to a completed DICOM store import.
      properties: {}
      type: object
    Feature:
      description: A feature of an entity mention.
      id: Feature
      properties:
        value:
          type: string
          description: The value of this feature annotation. Its range depends on the type of the feature.
        confidence:
          description: The model's confidence in this feature annotation. A number between 0 and 1.
          format: double
          type: number
      type: object
    DeidentifyConfig:
      type: object
      description: 'Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.'
      properties:
        image:
          description: Configures de-identification of image pixels wherever they are found in the source_dataset.
          $ref: '#/components/schemas/ImageConfig'
        text:
          $ref: '#/components/schemas/TextConfig'
          description: Configures de-identification of text wherever it is found in the source_dataset.
        dicom:
          $ref: '#/components/schemas/DicomConfig'
          description: Configures de-id of application/DICOM content.
        fhir:
          $ref: '#/components/schemas/FhirConfig'
          description: Configures de-id of application/FHIR content.
        useRegionalDataProcessing:
          description: 'Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within `TextConfig`, and must also be excluded within `ImageConfig` if image redaction is required.'
          type: boolean
      id: DeidentifyConfig
    Attribute:
      properties:
        attributeDefinitionId:
          type: string
          description: Indicates the name of an attribute defined in the consent store.
        values:
          items:
            type: string
          description: 'Required. The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.'
          type: array
      type: object
      description: An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
      id: Attribute
    DeidentifySummary:
      description: Contains a summary of the Deidentify operation.
      properties: {}
      type: object
      id: DeidentifySummary
    DicomConfig:
      id: DicomConfig
      type: object
      properties:
        skipIdRedaction:
          type: boolean
          description: 'If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard''s reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual''s identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html'
        filterProfile:
          type: string
          enumDescriptions:
            - No tag filtration profile provided. Same as KEEP_ALL_PROFILE.
            - Keep only tags required to produce valid DICOM.
            - 'Remove tags based on DICOM Standard''s Attribute Confidentiality Basic Profile (DICOM Standard Edition 2018e) http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html.'
            - Keep all tags.
            - 'Inspects within tag contents and replaces sensitive text. The process can be configured using the TextConfig. Applies to all tags with the following Value Representation names: AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS'
          description: Tag filtering profile that determines which tags to keep/remove.
          enum:
            - TAG_FILTER_PROFILE_UNSPECIFIED
            - MINIMAL_KEEP_LIST_PROFILE
            - ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE
            - KEEP_ALL_PROFILE
            - DEIDENTIFY_TAG_CONTENTS
        removeList:
          $ref: '#/components/schemas/TagFilterList'
          description: List of tags to remove. Keep all other tags.
        keepList:
          description: List of tags to keep. Remove all other tags.
          $ref: '#/components/schemas/TagFilterList'
      description: Specifies the parameters needed for de-identification of DICOM stores.
    CheckDataAccessResponse:
      id: CheckDataAccessResponse
      properties:
        consentDetails:
          description: The resource names of all evaluated Consents mapped to their evaluation.
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
          type: object
        consented:
          description: Whether the requested resource is consented for the given use.
          type: boolean
      type: object
      description: Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.
    VersionSource:
      type: object
      id: VersionSource
      properties:
        value:
          description: 'The value to match with the field. For example, "My Application Name" or "2.3".'
          type: string
        mshField:
          type: string
          description: 'The field to extract from the MSH segment. For example, "3.1" or "18[1].1".'
      description: Describes a selector for extracting and matching an MSH field to a value.
    HttpBody:
      id: HttpBody
      properties:
        data:
          format: byte
          description: The HTTP request/response body as raw binary.
          type: string
        contentType:
          type: string
          description: The HTTP Content-Type header value specifying the content type of the body.
        extensions:
          description: Application specific response metadata. Must be set in the first response for streaming APIs.
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
      description: 'Message that represents an arbitrary HTTP body. It should only be used for payload formats that can''t be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.'
      type: object
    FieldMetadata:
      properties:
        paths:
          type: array
          description: 'List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.'
          items:
            type: string
        action:
          enum:
            - ACTION_UNSPECIFIED
            - TRANSFORM
            - INSPECT_AND_TRANSFORM
            - DO_NOT_TRANSFORM
          enumDescriptions:
            - No action specified.
            - Transform the entire field.
            - Inspect and transform any found PHI.
            - Do not transform.
          type: string
          description: Deidentify action for one field.
      id: FieldMetadata
      type: object
      description: 'Specifies FHIR paths to match, and how to handle de-identification of matching fields.'
    ListAttributeDefinitionsResponse:
      id: ListAttributeDefinitionsResponse
      properties:
        attributeDefinitions:
          items:
            $ref: '#/components/schemas/AttributeDefinition'
          description: The returned Attribute definitions. The maximum number of attributes returned is determined by the value of page_size in the ListAttributeDefinitionsRequest.
          type: array
        nextPageToken:
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
          type: string
      type: object
    TextSpan:
      id: TextSpan
      description: A span of text in the provided document.
      type: object
      properties:
        beginOffset:
          type: integer
          format: int32
          description: The unicode codepoint index of the beginning of this span.
        content:
          type: string
          description: The original text contained in this span.
    SchemaConfig:
      id: SchemaConfig
      type: object
      description: Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
      properties:
        lastUpdatedPartitionConfig:
          description: The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
          $ref: '#/components/schemas/TimePartitioning'
        recursiveStructureDepth:
          description: 'The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.'
          type: string
          format: int64
        schemaType:
          description: Specifies the output schema type. Schema type is required.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - ANALYTICS
            - ANALYTICS_V2
          type: string
          enumDescriptions:
            - No schema type specified. This type is unsupported.
            - 'Analytics schema defined by the FHIR community. See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md. BigQuery only allows a maximum of 10,000 columns per table. Due to this limitation, the server will not generate schemas for fields of type `Resource`, which can hold any resource type. The affected fields are `Parameters.parameter.resource`, `Bundle.entry.resource`, and `Bundle.entry.response.outcome`. Analytics schema does not gracefully handle extensions with one or more occurrences, anaytics schema also does not handle contained resource.'
            - 'Analytics V2, similar to schema defined by the FHIR community, with added support for extensions with one or more occurrences and contained resources in stringified JSON. Analytics V2 uses more space in the destination table than Analytics V1. It is generally recommended to use Analytics V2 over Analytics.'
    ImportMessagesResponse:
      id: ImportMessagesResponse
      type: object
      description: Final response of importing messages. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.
      properties: {}
    AuditLogConfig:
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      id: AuditLogConfig
      properties:
        exemptedMembers:
          items:
            type: string
          type: array
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        logType:
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          description: The log type that this config enables.
      type: object
    TextConfig:
      properties:
        excludeInfoTypes:
          description: 'InfoTypes to skip transforming, overriding `additional_transformations`.'
          type: array
          items:
            type: string
        transformations:
          description: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
          type: array
        additionalTransformations:
          type: array
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
          description: 'Transformations to apply to the detected data, overridden by `exclude_info_types`.'
      type: object
      id: TextConfig
    EvaluateUserConsentsRequest:
      id: EvaluateUserConsentsRequest
      description: 'Evaluate a user''s Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.'
      properties:
        requestAttributes:
          description: Required. The values of request attributes associated with this access request.
          additionalProperties:
            type: string
          type: object
        pageSize:
          type: integer
          description: 'Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.'
          format: int32
        consentList:
          $ref: '#/components/schemas/ConsentList'
          description: 'Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the User data mappings being evalauted, must exist in the current `consent_store`, and must have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If unspecified, all `ACTIVE` unexpired Consents in the current `consent_store` will be evaluated.'
        responseView:
          description: 'Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.'
          enumDescriptions:
            - No response view specified. The API will default to the BASIC view.
            - Only the `data_id` and `consented` fields are populated in the response.
            - 'All fields within the response are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation.'
          type: string
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
        userId:
          description: Required. User ID to evaluate consents for.
          type: string
        pageToken:
          description: 'Optional. Token to retrieve the next page of results, or empty to get the first page.'
          type: string
        resourceAttributes:
          type: object
          description: 'Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried.'
          additionalProperties:
            type: string
      type: object
    ActivateConsentRequest:
      type: object
      id: ActivateConsentRequest
      properties:
        consentArtifact:
          description: 'Required. The resource name of the Consent artifact that contains documentation of the user''s consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.'
          type: string
        expireTime:
          description: Timestamp in UTC of when this Consent is considered expired.
          format: google-datetime
          type: string
        ttl:
          description: The time to live for this Consent from when it is marked as active.
          format: google-duration
          type: string
      description: 'Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the given Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state.'
    RejectConsentRequest:
      type: object
      description: 'Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the given Consent is in the `REJECTED` state, no new revision is committed.'
      id: RejectConsentRequest
      properties:
        consentArtifact:
          description: 'Optional. The resource name of the Consent artifact that contains documentation of the user''s rejection of the draft Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.'
          type: string
    ReplaceWithInfoTypeConfig:
      type: object
      description: 'When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.'
      id: ReplaceWithInfoTypeConfig
      properties: {}
    ExportDicomDataRequest:
      id: ExportDicomDataRequest
      properties:
        bigqueryDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomBigQueryDestination'
          description: 'The BigQuery output destination. You can only export to a BigQuery dataset that''s in the same project as the DICOM store you''re exporting from. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`.'
        gcsDestination:
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomGcsDestination'
          description: The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.
      type: object
      description: 'Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.'
    ImageConfig:
      type: object
      id: ImageConfig
      description: Specifies how to handle de-identification of image pixels.
      properties:
        textRedactionMode:
          description: Determines how to redact text from image.
          type: string
          enumDescriptions:
            - No text redaction specified. Same as REDACT_NO_TEXT.
            - Redact all text.
            - 'Redact sensitive text. Uses the set of [Default DICOM InfoTypes](https://cloud.google.com/healthcare-api/docs/how-tos/dicom-deidentify#default_dicom_infotypes).'
            - Do not redact text.
          enum:
            - TEXT_REDACTION_MODE_UNSPECIFIED
            - REDACT_ALL_TEXT
            - REDACT_SENSITIVE_TEXT
            - REDACT_NO_TEXT
    EvaluateUserConsentsResponse:
      id: EvaluateUserConsentsResponse
      properties:
        results:
          type: array
          description: The consent evaluation result for each `data_id`.
          items:
            $ref: '#/components/schemas/Result'
        nextPageToken:
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list. This token is valid for 72 hours after it is created.'
          type: string
      type: object
    CheckDataAccessRequest:
      description: Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.
      properties:
        responseView:
          enumDescriptions:
            - No response view specified. The API will default to the BASIC view.
            - Only the `consented` field is populated in CheckDataAccessResponse.
            - 'All fields within CheckDataAccessResponse are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation.'
          description: 'Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.'
          type: string
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
        consentList:
          description: 'Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the evaluated User data mapping, must exist in the current `consent_store`, and have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If no selection is specified, the access request is evaluated against all `ACTIVE` unexpired Consents with the same `user_id` as the evaluated User data mapping.'
          $ref: '#/components/schemas/ConsentList'
        dataId:
          description: Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store.
          type: string
        requestAttributes:
          additionalProperties:
            type: string
          description: The values of request attributes associated with this access request.
          type: object
      id: CheckDataAccessRequest
      type: object
    ListDatasetsResponse:
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
          description: The first page of datasets.
        nextPageToken:
          description: 'Token to retrieve the next page of results, or empty if there are no more results in the list.'
          type: string
      description: Lists the available datasets.
      type: object
      id: ListDatasetsResponse
    Hl7V2Store:
      properties:
        parserConfig:
          description: The configuration for the parser. It determines how the server parses the messages.
          $ref: '#/components/schemas/ParserConfig'
        notificationConfigs:
          items:
            $ref: '#/components/schemas/Hl7V2NotificationConfig'
          type: array
          description: A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
        rejectDuplicateMessage:
          type: boolean
          description: 'Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.'
        labels:
          type: object
          description: 'User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.'
          additionalProperties:
            type: string
        name:
          type: string
          description: 'Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.'
      type: object
      description: Represents an HL7v2 store.
      id: Hl7V2Store
    PatientId:
      description: A patient identifier and associated type.
      type: object
      properties:
        type:
          description: 'ID type. For example, MRN or NHS.'
          type: string
        value:
          type: string
          description: The patient's unique identifier.
      id: PatientId
    ExportDicomDataResponse:
      id: ExportDicomDataResponse
      properties: {}
      type: object
      description: Returns additional information in regards to a completed DICOM store export.
    Message:
      description: 'A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.'
      id: Message
      properties:
        data:
          description: Raw message bytes.
          type: string
          format: byte
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. The datetime when the message was created. Set by the server.
          type: string
        sendTime:
          description: The datetime the sending application sent this message. MSH-7.
          type: string
          format: google-datetime
        parsedData:
          description: Output only. The parsed version of the raw message data.
          readOnly: true
          $ref: '#/components/schemas/ParsedData'
        schematizedData:
          $ref: '#/components/schemas/SchematizedData'
          description: The parsed version of the raw message data schematized according to this store's schemas and type definitions.
        labels:
          description: 'User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.'
          additionalProperties:
            type: string
          type: object
        messageType:
          type: string
          description: The message type for this message. MSH-9.1.
        patientIds:
          type: array
          description: 'All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.'
          items:
            $ref: '#/components/schemas/PatientId'
        sendFacility:
          description: The hospital that this message came from. MSH-4.
          type: string
        name:
          description: 'Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.'
          type: string
      type: object
    DateShiftConfig:
      description: Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
      type: object
      properties:
        kmsWrapped:
          description: 'KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.'
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
        cryptoKey:
          description: 'An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.'
          format: byte
          type: string
      id: DateShiftConfig
    ParsedData:
      id: ParsedData
      properties:
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
      type: object
      description: The content of a HL7v2 message in a structured format.
    TimePartitioning:
      description: Configuration for FHIR BigQuery time-partitioned tables.
      properties:
        type:
          type: string
          enumDescriptions:
            - Default unknown time.
            - Data partitioned by hour.
            - Data partitioned by day.
            - Data partitioned by month.
            - Data partitioned by year.
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - HOUR
            - DAY
            - MONTH
            - YEAR
          description: Type of partitioning.
        expirationMs:
          description: Number of milliseconds for which to keep the storage for a partition.
          format: int64
          type: string
      type: object
      id: TimePartitioning
    FhirStoreMetric:
      properties:
        count:
          description: The total count of FHIR resources in the store of this resource type.
          type: string
          format: int64
        resourceType:
          type: string
          description: The FHIR resource type this metric applies to.
        structuredStorageSizeBytes:
          type: string
          description: The total amount of structured storage used by FHIR resources of this resource type in the store.
          format: int64
      type: object
      description: Count of resources and total storage size by type for a given FHIR store.
      id: FhirStoreMetric
  parameters:
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  x-stackQL-resources:
    nlp:
      id: google.healthcare.nlp
      name: nlp
      title: Nlp
      methods:
        analyze_entities:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1nlp:analyzeEntities/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    hl7_v2_stores_iam_policies:
      id: google.healthcare.hl7_v2_stores_iam_policies
      name: hl7_v2_stores_iam_policies
      title: Hl7 V2 Stores Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    hl7_v2_stores:
      id: google.healthcare.hl7_v2_stores
      name: hl7_v2_stores
      title: Hl7 V2 Stores
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:export/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.hl7V2Stores
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/delete'
    messages:
      id: google.healthcare.messages
      name: messages
      title: Messages
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.hl7V2Messages
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        ingest:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages:ingest/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/messages/methods/get'
          - $ref: '#/components/x-stackQL-resources/messages/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/messages/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/messages/methods/delete'
    studies:
      id: google.healthcare.studies
      name: studies
      title: Studies
      methods:
        search_for_series:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        store_instances:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/studies/methods/delete'
    studies_study:
      id: google.healthcare.studies_study
      name: studies_study
      title: Studies Study
      methods:
        retrieve_study:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    studies_metadata:
      id: google.healthcare.studies_metadata
      name: studies_metadata
      title: Studies Metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1metadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    frames_rendered:
      id: google.healthcare.frames_rendered
      name: frames_rendered
      title: Frames Rendered
      methods:
        retrieve_rendered:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1frames~1{framesId}~1rendered/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    frames_frames:
      id: google.healthcare.frames_frames
      name: frames_frames
      title: Frames Frames
      methods:
        retrieve_frames:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1frames~1{framesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    instances:
      id: google.healthcare.instances
      name: instances
      title: Instances
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete'
    instances_instance:
      id: google.healthcare.instances_instance
      name: instances_instance
      title: Instances Instance
      methods:
        retrieve_instance:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    instances_rendered:
      id: google.healthcare.instances_rendered
      name: instances_rendered
      title: Instances Rendered
      methods:
        retrieve_rendered:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1rendered/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    instances_metadata:
      id: google.healthcare.instances_metadata
      name: instances_metadata
      title: Instances Metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1metadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    series_metadata:
      id: google.healthcare.series_metadata
      name: series_metadata
      title: Series Metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1metadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    series:
      id: google.healthcare.series
      name: series
      title: Series
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/series/methods/delete'
    series_series:
      id: google.healthcare.series_series
      name: series_series
      title: Series Series
      methods:
        retrieve_series:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    dicom_stores:
      id: google.healthcare.dicom_stores
      name: dicom_stores
      title: Dicom Stores
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dicomStores
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1instances/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:export/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_series:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1series/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deidentify:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:deidentify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_studies:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        store_instances:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/delete'
    dicom_stores_iam_policies:
      id: google.healthcare.dicom_stores_iam_policies
      name: dicom_stores_iam_policies
      title: Dicom Stores Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dicom_stores_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    fhir:
      id: google.healthcare.fhir
      name: fhir
      title: Fhir
      methods:
        search:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1_search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        history:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1_history/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_update:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        read:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vread:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1_history~1{_historyId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resource-validate:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1$validate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search-type:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{resourceType}~1_search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        execute_bundle:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        capabilities:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1metadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patient-everything:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Patient~1{PatientId}~1$everything/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resource-purge:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1$purge/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/delete'
    fhir_stores:
      id: google.healthcare.fhir_stores
      name: fhir_stores
      title: Fhir Stores
      methods:
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deidentify:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:deidentify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:export/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.fhirStores
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/delete'
    fhir_stores_iam_policies:
      id: google.healthcare.fhir_stores_iam_policies
      name: fhir_stores_iam_policies
      title: Fhir Stores Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/fhir_stores_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    fhir_stores_fhirstore_metrics:
      id: google.healthcare.fhir_stores_fhirstore_metrics
      name: fhir_stores_fhirstore_metrics
      title: Fhir Stores Fhirstore Metrics
      methods:
        get_fhirstore_metrics:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:getFHIRStoreMetrics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/fhir_stores_fhirstore_metrics/methods/get_fhirstore_metrics'
        insert: []
        update: []
        delete: []
    attribute_definitions:
      id: google.healthcare.attribute_definitions
      name: attribute_definitions
      title: Attribute Definitions
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.attributeDefinitions
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/attribute_definitions/methods/get'
          - $ref: '#/components/x-stackQL-resources/attribute_definitions/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/attribute_definitions/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/attribute_definitions/methods/delete'
    user_data_mappings:
      id: google.healthcare.user_data_mappings
      name: user_data_mappings
      title: User Data Mappings
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.userDataMappings
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        archive:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}:archive/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/get'
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/delete'
    consents_revisions:
      id: google.healthcare.consents_revisions
      name: consents_revisions
      title: Consents Revisions
      methods:
        list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consents
        _list_revisions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:listRevisions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consents_revisions/methods/list_revisions'
        insert: []
        update: []
        delete: []
    consents:
      id: google.healthcare.consents
      name: consents
      title: Consents
      methods:
        revoke:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:revoke/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        activate:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:activate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consents
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reject:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:reject/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consents/methods/get'
          - $ref: '#/components/x-stackQL-resources/consents/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consents/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consents/methods/delete'
    consents_revision:
      id: google.healthcare.consents_revision
      name: consents_revision
      title: Consents Revision
      methods:
        delete_revision:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:deleteRevision/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consents_revision/methods/delete_revision'
    consent_artifacts:
      id: google.healthcare.consent_artifacts
      name: consent_artifacts
      title: Consent Artifacts
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consentArtifacts
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts~1{consentArtifactsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts~1{consentArtifactsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/get'
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/delete'
    consent_stores:
      id: google.healthcare.consent_stores
      name: consent_stores
      title: Consent Stores
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_accessible_data:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:queryAccessibleData/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consentStores
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        evaluate_user_consents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:evaluateUserConsents/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_data_access:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:checkDataAccess/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/delete'
    consent_stores_iam_policies:
      id: google.healthcare.consent_stores_iam_policies
      name: consent_stores_iam_policies
      title: Consent Stores Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consent_stores_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    operations:
      id: google.healthcare.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete: []
    datasets_iam_policies:
      id: google.healthcare.datasets_iam_policies
      name: datasets_iam_policies
      title: Datasets Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/datasets_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    datasets:
      id: google.healthcare.datasets
      name: datasets
      title: Datasets
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.datasets
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deidentify:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:deidentify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/get'
          - $ref: '#/components/x-stackQL-resources/datasets/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/delete'
    locations:
      id: google.healthcare.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/services/nlp:analyzeEntities':
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: Analyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect entities.
      operationId: healthcare.projects.locations.services.nlp.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: nlp
      x-stackQL-method: analyze_entities
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}':
    parameters: *ref_1
    delete:
      description: Deletes the specified HL7v2 store and removes all messages that it contains.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets the specified HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:import':
    parameters: *ref_1
    post:
      description: 'Import messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2 store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a response of type ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessagesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:export':
    parameters: *ref_1
    post:
      description: 'Exports the messages to a destination. To filter messages to be exported, define a filter using the start and end time, relative to the message generation time (MSH.7). This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMessagesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: export
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores':
    parameters: *ref_1
    post:
      description: Creates a new HL7v2 store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: hl7V2StoreId
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists the HL7v2 stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHl7V2StoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.hl7V2Stores
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: hl7_v2_stores_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}':
    parameters: *ref_1
    get:
      description: Gets an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages':
    parameters: *ref_1
    post:
      description: 'Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: 'Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.hl7V2Messages
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest':
    parameters: *ref_1
    post:
      description: 'Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for replying to HL7v2 interface systems that expect these acknowledgments.'
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestMessageRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestMessageResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: messages
      x-stackQL-method: ingest
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series':
    parameters: *ref_1
    get:
      description: 'SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-method: search_for_series
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}':
    parameters: *ref_1
    post:
      description: 'StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-method: store_instances
      x-stackQL-verb: exec
    delete:
      description: 'DeleteStudy deletes all instances within the given study. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a study that is being deleted by an operation until the operation completes. For samples that show how to call DeleteStudy, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: 'RetrieveStudy returns all instances within the given study. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudy, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudy, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies_study
      x-stackQL-method: retrieve_study
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances':
    parameters: *ref_1
    get:
      description: 'SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies
      x-stackQL-method: search_for_instances
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata':
    parameters: *ref_1
    get:
      description: 'RetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: studies_metadata
      x-stackQL-method: retrieve_metadata
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered':
    parameters: *ref_1
    get:
      description: 'RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
      x-stackQL-resource: frames_rendered
      x-stackQL-method: retrieve_rendered
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}':
    parameters: *ref_1
    get:
      description: 'RetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}. For details on the implementation of RetrieveFrames, see [DICOM frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
      x-stackQL-resource: frames_frames
      x-stackQL-method: retrieve_frames
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}':
    parameters: *ref_1
    delete:
      description: 'DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: 'RetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) and [DICOM instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see [Retrieving an instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances_instance
      x-stackQL-method: retrieve_instance
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered':
    parameters: *ref_1
    get:
      description: 'RetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedInstance, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances_rendered
      x-stackQL-method: retrieve_rendered
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata':
    parameters: *ref_1
    get:
      description: 'RetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstanceMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
      x-stackQL-resource: instances_metadata
      x-stackQL-method: retrieve_metadata
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata':
    parameters: *ref_1
    get:
      description: 'RetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeriesMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series_metadata
      x-stackQL-method: retrieve_metadata
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}':
    parameters: *ref_1
    delete:
      description: 'DeleteSeries deletes all instances within the given study and series. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a series that is being deleted by an operation until the operation completes. For samples that show how to call DeleteSeries, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: 'RetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeries, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeries, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series_series
      x-stackQL-method: retrieve_series
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances':
    parameters: *ref_1
    get:
      description: 'SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: series
      x-stackQL-method: search_for_instances
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores':
    parameters: *ref_1
    get:
      description: Lists the DICOM stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDicomStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.dicomStores
    post:
      description: Creates a new DICOM store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: dicomStoreId
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances':
    parameters: *ref_1
    get:
      description: 'SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForInstances
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: search_for_instances
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export':
    parameters: *ref_1
    post:
      description: 'Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.dicomStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDicomDataRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: export
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}':
    parameters: *ref_1
    patch:
      description: Updates the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified DICOM store and removes all images that are contained within it.
      operationId: healthcare.projects.locations.datasets.dicomStores.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series':
    parameters: *ref_1
    get:
      description: 'SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForSeries
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: search_for_series
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:deidentify':
    parameters: *ref_1
    post:
      description: 'De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
      operationId: healthcare.projects.locations.datasets.dicomStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDicomStoreRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: deidentify
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies':
    parameters: *ref_1
    get:
      description: 'SearchForStudies returns a list of matching studies. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForStudies, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForStudies, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).'
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForStudies
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: search_for_studies
      x-stackQL-verb: exec
    post:
      description: 'StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).'
      operationId: healthcare.projects.locations.datasets.dicomStores.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: store_instances
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: dicom_stores_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import':
    parameters: *ref_1
    post:
      description: 'Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.dicomStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDicomDataRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: dicom_stores
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search':
    parameters: *ref_1
    post:
      description: 'Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server''s capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource''s definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn''t optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: search
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history':
    parameters: *ref_1
    get:
      description: 'Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see [Listing FHIR resource versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.history
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: query
          name: _at
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
        - in: query
          name: _since
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: history
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a FHIR resource that match an identifier search query. Implements the FHIR standard conditional delete interaction, limited to searching by resource identifier. If multiple resources match, 412 Precondition Failed error will be returned. Search term for identifier should be in the pattern identifier=system|value or identifier=value - similar to the search method on resources with a specific identifier. Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resource is moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `conditionalDelete`, see [Conditionally deleting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDelete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: conditional_delete
      x-stackQL-verb: exec
    patch:
      description: 'If a resource is found with the identifier specified in the query parameters, updates part of that resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard conditional patch interaction, limited to searching by resource identifier. DSTU2 doesn''t define a conditional patch method, but the server supports it in the same way it supports STU3. Search term for identifier should be in the pattern identifier=system|value or identifier=value - similar to the search method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalPatch`, see [Conditionally patching a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: conditional_patch
      x-stackQL-verb: exec
    put:
      description: 'If a resource is found with the identifier specified in the query parameters, updates the entire contents of that resource. Implements the FHIR standard conditional update interaction, limited to searching by resource identifier. Search term for identifier should be in the pattern identifier=system|value or identifier=value - similar to the search method on resources with a specific identifier. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. If the search criteria identify zero matches, and the supplied resource body contains an `id`, and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. If the search criteria identify zero matches, and the supplied resource body does not contain an `id`, the resource is created with a server-assigned ID as per the create method. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `conditionalUpdate`, see [Conditionally updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: conditional_update
      x-stackQL-verb: exec
    post:
      description: 'Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}':
    parameters: *ref_1
    put:
      description: 'Updates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: update
      x-stackQL-verb: exec
    patch:
      description: 'Updates part of an existing resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard patch interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn''t define a patch method, but the server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `patch`, see [Patching a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: 'Gets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see [Getting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.read
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: read
      x-stackQL-verb: exec
    delete:
      description: 'Deletes a FHIR resource. Implements the FHIR standard delete interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources will be moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `delete`, see [Deleting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}':
    parameters: *ref_1
    get:
      description: 'Gets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `vread`, see [Retrieving a FHIR resource version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.vread
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: path
          name: _historyId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: vread
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/$validate':
    parameters: *ref_1
    post:
      description: 'Validates an input FHIR resource''s conformance to its profiles and the profiles configured on the FHIR store. Implements the FHIR extended operation $validate ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate), [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate), or [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)). The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The `Parameters` input syntax is not supported. The `profile` query parameter can be used to request that the resource only be validated against a specific profile. If a profile with the given URL cannot be found in the FHIR store then an error is returned. Errors generated by validation contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: query
          name: profile
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: resource-validate
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{resourceType}/_search':
    parameters: *ref_1
    post:
      description: 'Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server''s capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource''s definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. The server might return fewer resources than requested to prevent excessively large responses. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changed, and the time when the change reflects in search results. The only exception is resource identifier data, which is indexed synchronously as a special index. As a result, searching using resource identifier is not subject to indexing delay. To use the special synchronous index, the search term for identifier should be in the pattern `identifier=[system]|[value]` or `identifier=[value]`, and any of the following search result parameters can be used: * `_count` * `_include` * `_revinclude` * `_summary` * `_elements` If your query contains any other search parameters, the standard asynchronous index will be used instead. Note that searching against the special index is optimized for resolving a small number of matches. The search isn''t optimized if your identifier search criteria matches a large number (i.e. more than 2,000) of resources. For a search query that will match a large number of resources, you can avoiding using the special synchronous index by including an additional `_sort` parameter in your query. Use `_sort=-_lastUpdated` if you want to keep the default sorting order. For samples and detailed information, see [Searching for FHIR resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search-type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: resourceType
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: search-type
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir':
    parameters: *ref_1
    post:
      description: 'Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction, the response body contains a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body contains a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method checks permissions for each request in the bundle. The `executeBundle` permission is required to call this method, but you must also grant sufficient permissions to execute the individual requests in the bundle. For example, if the bundle contains a request to create a FHIR resource, the caller must also have been granted the `healthcare.fhirResources.create` permission. You can use audit logs to view the permissions for `executeBundle` and each request in the bundle. For more information, see [Viewing Cloud Audit logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging). For samples that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: execute_bundle
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata':
    parameters: *ref_1
    get:
      description: 'Gets the FHIR capability statement ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html), [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a `CapabilityStatement` resource.'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.capabilities
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: capabilities
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything':
    parameters: *ref_1
    get:
      description: 'Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything), [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html), [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: PatientId
          required: true
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
        - in: query
          name: _type
          schema:
            type: string
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: patient-everything
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge':
    parameters: *ref_1
    delete:
      description: 'Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).'
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir
      x-stackQL-method: resource-purge
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import':
    parameters: *ref_1
    post:
      description: 'Imports resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it''s possible that successfully imported resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data is specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.fhirStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportResourcesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}':
    parameters: *ref_1
    patch:
      description: Updates the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified FHIR store and removes all resources within it.
      operationId: healthcare.projects.locations.datasets.fhirStores.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:deidentify':
    parameters: *ref_1
    post:
      description: 'De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).'
      operationId: healthcare.projects.locations.datasets.fhirStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyFhirStoreRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: deidentify
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getFHIRStoreMetrics':
    parameters: *ref_1
    get:
      description: Gets metrics associated with the FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.getFHIRStoreMetrics
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStoreMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores_fhirstore_metrics
      x-stackQL-method: get_fhirstore_metrics
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export':
    parameters: *ref_1
    post:
      description: 'Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.'
      operationId: healthcare.projects.locations.datasets.fhirStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportResourcesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: export
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores':
    parameters: *ref_1
    post:
      description: Creates a new FHIR store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: fhirStoreId
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists the FHIR stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFhirStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: fhir_stores
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.fhirStores
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent.'
      operationId: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the specified Attribute definition.
      operationId: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates the specified Attribute definition.
      operationId: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions':
    parameters: *ref_1
    get:
      description: Lists the Attribute definitions in the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAttributeDefinitionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.attributeDefinitions
    post:
      description: Creates a new Attribute definition in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: attributeDefinitionId
          schema:
            type: string
      x-stackQL-resource: attribute_definitions
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings':
    parameters: *ref_1
    get:
      description: Lists the User data mappings in the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserDataMappingsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.userDataMappings
    post:
      description: Creates a new User data mapping in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive':
    parameters: *ref_1
    post:
      description: Archives the specified User data mapping.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.archive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveUserDataMappingRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveUserDataMappingResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: archive
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}':
    parameters: *ref_1
    get:
      description: Gets the specified User data mapping.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes the specified User data mapping.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the specified User data mapping.
      operationId: healthcare.projects.locations.datasets.consentStores.userDataMappings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: user_data_mappings
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:listRevisions':
    parameters: *ref_1
    get:
      description: Lists the revisions of the specified Consent in reverse chronological order.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.listRevisions
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: consents_revisions
      x-stackQL-method: list_revisions
      x-stackQL-verb: select
      x-stackQL-objectKey: $.consents
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke':
    parameters: *ref_1
    post:
      description: 'Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.revoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeConsentRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: revoke
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:activate':
    parameters: *ref_1
    post:
      description: 'Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateConsentRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: activate
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}':
    parameters: *ref_1
    get:
      description: 'Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: 'Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related Consent artifact.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents':
    parameters: *ref_1
    post:
      description: Creates a new Consent in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: 'Lists the Consent in the given consent store, returning each Consent''s latest revision.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.consents
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:deleteRevision':
    parameters: *ref_1
    delete:
      description: Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.deleteRevision
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents_revision
      x-stackQL-method: delete_revision
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:reject':
    parameters: *ref_1
    post:
      description: 'Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.'
      operationId: healthcare.projects.locations.datasets.consentStores.consents.reject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectConsentRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consents
      x-stackQL-method: reject
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts':
    parameters: *ref_1
    post:
      description: Creates a new Consent artifact in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.consentArtifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentArtifact'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists the Consent artifacts in the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.consentArtifacts.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: consent_artifacts
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.consentArtifacts
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}':
    parameters: *ref_1
    get:
      description: Gets the specified Consent artifact.
      operationId: healthcare.projects.locations.datasets.consentStores.consentArtifacts.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent.
      operationId: healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_artifacts
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}':
    parameters: *ref_1
    delete:
      description: Deletes the specified consent store and removes all the consent store's data.
      operationId: healthcare.projects.locations.datasets.consentStores.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: healthcare.projects.locations.datasets.consentStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData':
    parameters: *ref_1
    post:
      description: 'Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. If the request is successful, a detailed response is returned of type QueryAccessibleDataResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @type: "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry" error: { code: 9 message: "failed to evaluate consent policy" } resourceName: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}" } logName: "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data" operation: { id: "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}" producer: "healthcare.googleapis.com/QueryAccessibleData" } receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id: "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}" project_id: "{project_id}" } type: "healthcare_consent_store" } severity: "ERROR" timestamp: "TIMESTAMP" ```'
      operationId: healthcare.projects.locations.datasets.consentStores.queryAccessibleData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryAccessibleDataRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: query_accessible_data
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.consentStores.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores':
    parameters: *ref_1
    get:
      description: Lists the consent stores in the specified dataset.
      operationId: healthcare.projects.locations.datasets.consentStores.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.consentStores
    post:
      description: Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.
      operationId: healthcare.projects.locations.datasets.consentStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: consentStoreId
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents':
    parameters: *ref_1
    post:
      description: 'Evaluates the user''s Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results.'
      operationId: healthcare.projects.locations.datasets.consentStores.evaluateUserConsents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateUserConsentsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateUserConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: evaluate_user_consents
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: healthcare.projects.locations.datasets.consentStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess':
    parameters: *ref_1
    post:
      description: Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use.
      operationId: healthcare.projects.locations.datasets.consentStores.checkDataAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckDataAccessRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDataAccessResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
      x-stackQL-resource: consent_stores
      x-stackQL-method: check_data_access
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: healthcare.projects.locations.datasets.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: healthcare.projects.locations.datasets.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: healthcare.projects.locations.datasets.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: healthcare.projects.locations.datasets.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets':
    parameters: *ref_1
    get:
      description: Lists the health datasets in the current project.
      operationId: healthcare.projects.locations.datasets.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: datasets
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.datasets
    post:
      description: Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: datasetId
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: healthcare.projects.locations.datasets.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}':
    parameters: *ref_1
    patch:
      description: Updates dataset metadata.
      operationId: healthcare.projects.locations.datasets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any).
      operationId: healthcare.projects.locations.datasets.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets any metadata associated with a dataset.
      operationId: healthcare.projects.locations.datasets.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify':
    parameters: *ref_1
    post:
      description: 'Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).'
      operationId: healthcare.projects.locations.datasets.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDatasetRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
      x-stackQL-resource: datasets
      x-stackQL-method: deidentify
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: healthcare.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: healthcare.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
