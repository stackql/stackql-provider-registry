openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Healthcare API
  description: Manage, store, and access healthcare data in Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20250724'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/healthcare
servers:
  - url: https://healthcare.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-healthcare: Read, write and manage healthcare data
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    ConsentStore:
      id: ConsentStore
      description: Represents a consent store.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the consent store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
            Cannot be changed after creation.
          type: string
        defaultConsentTtl:
          description: >-
            Optional. Default time to live for Consents created in this store.
            Must be at least 24 hours. Updating this field will not affect the
            expiration time of existing consents.
          type: string
          format: google-duration
        labels:
          description: >-
            Optional. User-supplied key-value pairs used to organize consent
            stores. Label keys must be between 1 and 63 characters long, have a
            UTF-8 encoding of maximum 128 bytes, and must conform to the
            following PCRE regular expression: \p{Ll}\p{Lo}{0,62}. Label values
            must be between 1 and 63 characters long, have a UTF-8 encoding of
            maximum 128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}. No more than 64 labels can
            be associated with a given store. For more information:
            https://cloud.google.com/healthcare/docs/how-tos/labeling-resources
          type: object
          additionalProperties:
            type: string
        enableConsentCreateOnUpdate:
          description: >-
            Optional. If `true`, UpdateConsent creates the Consent if it does
            not already exist. If unspecified, defaults to `false`.
          type: boolean
    ListConsentStoresResponse:
      id: ListConsentStoresResponse
      type: object
      properties:
        consentStores:
          description: >-
            The returned consent stores. The maximum number of stores returned
            is determined by the value of page_size in the
            ListConsentStoresRequest.
          type: array
          items:
            $ref: '#/components/schemas/ConsentStore'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    AttributeDefinition:
      id: AttributeDefinition
      description: A client-defined consent attribute.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the Attribute definition, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`.
            Cannot be changed after creation.
          type: string
        description:
          description: Optional. A description of the attribute.
          type: string
        category:
          description: >-
            Required. The category of the attribute. The value of this field
            cannot be changed after creation.
          type: string
          enumDescriptions:
            - No category specified. This option is invalid.
            - >-
              Specify this category when this attribute describes the properties
              of resources. For example, data anonymity or data type.
            - >-
              Specify this category when this attribute describes the properties
              of requests. For example, requester's role or requester's
              organization.
          enum:
            - CATEGORY_UNSPECIFIED
            - RESOURCE
            - REQUEST
        allowedValues:
          description: >-
            Required. Possible values for the attribute. The number of allowed
            values must not exceed 500. An empty list is invalid. The list can
            only be expanded after creation.
          type: array
          items:
            type: string
        consentDefaultValues:
          description: >-
            Optional. Default values of the attribute in Consents. If no default
            values are specified, it defaults to an empty value.
          type: array
          items:
            type: string
        dataMappingDefaultValue:
          description: >-
            Optional. Default value of the attribute in User data mappings. If
            no default value is specified, it defaults to an empty value. This
            field is only applicable to attributes of the category `RESOURCE`.
          type: string
    ListAttributeDefinitionsResponse:
      id: ListAttributeDefinitionsResponse
      type: object
      properties:
        attributeDefinitions:
          description: >-
            The returned Attribute definitions. The maximum number of attributes
            returned is determined by the value of page_size in the
            ListAttributeDefinitionsRequest.
          type: array
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    ConsentArtifact:
      id: ConsentArtifact
      description: Documentation of a user's consent.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the Consent artifact, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            Cannot be changed after creation.
          type: string
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        userSignature:
          description: Optional. User's signature.
          $ref: '#/components/schemas/Signature'
        guardianSignature:
          description: Optional. A signature from a guardian.
          $ref: '#/components/schemas/Signature'
        witnessSignature:
          description: Optional. A signature from a witness.
          $ref: '#/components/schemas/Signature'
        consentContentScreenshots:
          description: >-
            Optional. Screenshots, PDFs, or other binary information documenting
            the user's consent.
          type: array
          items:
            $ref: '#/components/schemas/Image'
        consentContentVersion:
          description: >-
            Optional. An string indicating the version of the consent
            information shown to the user.
          type: string
        metadata:
          description: >-
            Optional. Metadata associated with the Consent artifact. For
            example, the consent locale or user agent version.
          type: object
          additionalProperties:
            type: string
    Signature:
      id: Signature
      description: User signature.
      type: object
      properties:
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        image:
          description: Optional. An image of the user's signature.
          $ref: '#/components/schemas/Image'
        metadata:
          description: >-
            Optional. Metadata associated with the user's signature. For
            example, the user's name or the user's title.
          type: object
          additionalProperties:
            type: string
        signatureTime:
          description: Optional. Timestamp of the signature.
          type: string
          format: google-datetime
    Image:
      id: Image
      description: Raw bytes representing consent artifact content.
      type: object
      properties:
        rawBytes:
          description: >-
            Consent artifact content represented as a stream of bytes. This
            field is populated when returned in GetConsentArtifact response, but
            not included in CreateConsentArtifact and ListConsentArtifact
            response.
          type: string
          format: byte
        gcsUri:
          description: >-
            Input only. Points to a Cloud Storage URI containing the consent
            artifact content. The URI must be in the following format:
            `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service
            account must have the `roles/storage.objectViewer` Cloud IAM role
            for this Cloud Storage location. The consent artifact content at
            this URI is copied to a Cloud Storage location managed by the Cloud
            Healthcare API. Responses to fetching requests return the consent
            artifact content in raw_bytes.
          type: string
    ListConsentArtifactsResponse:
      id: ListConsentArtifactsResponse
      type: object
      properties:
        consentArtifacts:
          description: >-
            The returned Consent artifacts. The maximum number of artifacts
            returned is determined by the value of page_size in the
            ListConsentArtifactsRequest.
          type: array
          items:
            $ref: '#/components/schemas/ConsentArtifact'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    Consent:
      id: Consent
      description: Represents a user's consent.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the Consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
            Cannot be changed after creation.
          type: string
        revisionId:
          description: >-
            Output only. The revision ID of the Consent. The format is an
            8-character hexadecimal string. Refer to a specific revision of a
            Consent by appending `@{revision_id}` to the Consent's resource
            name.
          readOnly: true
          type: string
        revisionCreateTime:
          description: Output only. The timestamp that the revision was created.
          readOnly: true
          type: string
          format: google-datetime
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        policies:
          description: >-
            Optional. Represents a user's consent in terms of the resources that
            can be accessed and under what conditions.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1ConsentPolicy'
        consentArtifact:
          description: >-
            Required. The resource name of the Consent artifact that contains
            proof of the end user's consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
          type: string
        state:
          description: Required. Indicates the current state of this Consent.
          type: string
          enumDescriptions:
            - >-
              No state specified. Treated as ACTIVE only at the time of resource
              creation.
            - >-
              The Consent is active and is considered when evaluating a user's
              consent on resources.
            - The archived state is currently not being used.
            - >-
              A revoked Consent is not considered when evaluating a user's
              consent on resources.
            - >-
              A draft Consent is not considered when evaluating a user's consent
              on resources unless explicitly specified.
            - >-
              When a draft Consent is rejected by a user, it is set to a
              rejected state. A rejected Consent is not considered when
              evaluating a user's consent on resources.
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - ARCHIVED
            - REVOKED
            - DRAFT
            - REJECTED
        expireTime:
          description: Timestamp in UTC of when this Consent is considered expired.
          type: string
          format: google-datetime
        ttl:
          description: >-
            Input only. The time to live for this Consent from when it is
            created.
          type: string
          format: google-duration
        metadata:
          description: >-
            Optional. User-supplied key-value pairs used to organize Consent
            resources. Metadata keys must: - be between 1 and 63 characters long
            - have a UTF-8 encoding of maximum 128 bytes - begin with a letter -
            consist of up to 63 characters including lowercase letters, numeric
            characters, underscores, and dashes Metadata values must be: - be
            between 1 and 63 characters long - have a UTF-8 encoding of maximum
            128 bytes - consist of up to 63 characters including lowercase
            letters, numeric characters, underscores, and dashes No more than 64
            metadata entries can be associated with a given consent.
          type: object
          additionalProperties:
            type: string
    GoogleCloudHealthcareV1ConsentPolicy:
      id: GoogleCloudHealthcareV1ConsentPolicy
      description: >-
        Represents a user's consent in terms of the resources that can be
        accessed and under what conditions.
      type: object
      properties:
        resourceAttributes:
          description: >-
            The resources that this policy applies to. A resource is a match if
            it matches all the attributes listed here. If empty, this policy
            applies to all User data mappings for the given user.
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        authorizationRule:
          description: >-
            Required. The request conditions to meet to grant access. In
            addition to any supported comparison operators, authorization rules
            may have `IN` operator as well as at most 10 logical operators that
            are limited to `AND` (`&&`), `OR` (`||`).
          $ref: '#/components/schemas/Expr'
    Attribute:
      id: Attribute
      description: >-
        An attribute value for a Consent or User data mapping. Each Attribute
        must have a corresponding AttributeDefinition in the consent store that
        defines the default and allowed values.
      type: object
      properties:
        attributeDefinitionId:
          description: Indicates the name of an attribute defined in the consent store.
          type: string
        values:
          description: >-
            Required. The value of the attribute. Must be an acceptable value as
            defined in the consent store. For example, if the consent store
            defines "data type" with acceptable values "questionnaire" and
            "step-count", when the attribute name is data type, this field must
            contain one of those values.
          type: array
          items:
            type: string
    ActivateConsentRequest:
      id: ActivateConsentRequest
      description: >-
        Activates the latest revision of the specified Consent by committing a
        new revision with `state` updated to `ACTIVE`. If the latest revision of
        the given Consent is in the `ACTIVE` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the given consent is in the `REJECTED` or `REVOKED` state.
      type: object
      properties:
        consentArtifact:
          description: >-
            Required. The resource name of the Consent artifact that contains
            documentation of the user's consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            If the draft Consent had a Consent artifact, this Consent artifact
            overwrites it.
          type: string
        expireTime:
          description: Timestamp in UTC of when this Consent is considered expired.
          type: string
          format: google-datetime
        ttl:
          description: The time to live for this Consent from when it is marked as active.
          type: string
          format: google-duration
    RejectConsentRequest:
      id: RejectConsentRequest
      description: >-
        Rejects the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REJECTED`. If the latest revision of
        the given Consent is in the `REJECTED` state, no new revision is
        committed.
      type: object
      properties:
        consentArtifact:
          description: >-
            Optional. The resource name of the Consent artifact that contains
            documentation of the user's rejection of the draft Consent, of the
            form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
            If the draft Consent had a Consent artifact, this Consent artifact
            overwrites it.
          type: string
    ListConsentsResponse:
      id: ListConsentsResponse
      type: object
      properties:
        consents:
          description: >-
            The returned Consents. The maximum number of Consents returned is
            determined by the value of page_size in the ListConsentsRequest.
          type: array
          items:
            $ref: '#/components/schemas/Consent'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    ListConsentRevisionsResponse:
      id: ListConsentRevisionsResponse
      type: object
      properties:
        consents:
          description: >-
            The returned Consent revisions. The maximum number of revisions
            returned is determined by the value of `page_size` in the
            ListConsentRevisionsRequest.
          type: array
          items:
            $ref: '#/components/schemas/Consent'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    RevokeConsentRequest:
      id: RevokeConsentRequest
      description: >-
        Revokes the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REVOKED`. If the latest revision of
        the given Consent is in the `REVOKED` state, no new revision is
        committed.
      type: object
      properties:
        consentArtifact:
          description: >-
            Optional. The resource name of the Consent artifact that contains
            proof of the user's revocation of the Consent, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
          type: string
    UserDataMapping:
      id: UserDataMapping
      description: Maps a resource to the associated user and Attributes.
      type: object
      properties:
        name:
          description: >-
            Resource name of the User data mapping, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.
          type: string
        dataId:
          description: Required. A unique identifier for the mapped resource.
          type: string
        userId:
          description: Required. User's UUID provided by the client.
          type: string
        resourceAttributes:
          description: >-
            Attributes of the resource. Only explicitly set attributes are
            displayed here. Attribute definitions with defaults set implicitly
            apply to these User data mappings. Attributes listed here must be
            single valued, that is, exactly one value is specified for the field
            "values" in each Attribute.
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        archived:
          description: Output only. Indicates whether this mapping is archived.
          readOnly: true
          type: boolean
        archiveTime:
          description: Output only. Indicates the time when this mapping was archived.
          readOnly: true
          type: string
          format: google-datetime
    ListUserDataMappingsResponse:
      id: ListUserDataMappingsResponse
      type: object
      properties:
        userDataMappings:
          description: >-
            The returned User data mappings. The maximum number of User data
            mappings returned is determined by the value of page_size in the
            ListUserDataMappingsRequest.
          type: array
          items:
            $ref: '#/components/schemas/UserDataMapping'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    ArchiveUserDataMappingRequest:
      id: ArchiveUserDataMappingRequest
      description: Archives the specified User data mapping.
      type: object
      properties: {}
    ArchiveUserDataMappingResponse:
      id: ArchiveUserDataMappingResponse
      description: Archives the specified User data mapping.
      type: object
      properties: {}
    CheckDataAccessRequest:
      id: CheckDataAccessRequest
      description: >-
        Checks if a particular data_id of a User data mapping in the given
        consent store is consented for a given use.
      type: object
      properties:
        dataId:
          description: >-
            Required. The unique identifier of the resource to check access for.
            This identifier must correspond to a User data mapping in the given
            consent store.
          type: string
        requestAttributes:
          description: >-
            The values of request attributes associated with this access
            request.
          type: object
          additionalProperties:
            type: string
        consentList:
          description: >-
            Optional. Specific Consents to evaluate the access request against.
            These Consents must have the same `user_id` as the evaluated User
            data mapping, must exist in the current `consent_store`, and have a
            `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can
            be provided here. If no selection is specified, the access request
            is evaluated against all `ACTIVE` unexpired Consents with the same
            `user_id` as the evaluated User data mapping.
          $ref: '#/components/schemas/ConsentList'
        responseView:
          description: >-
            Optional. The view for CheckDataAccessResponse. If unspecified,
            defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
          type: string
          enumDescriptions:
            - >-
              No response view specified. The API will default to the BASIC
              view.
            - >-
              Only the `consented` field is populated in
              CheckDataAccessResponse.
            - >-
              All fields within CheckDataAccessResponse are populated. When set
              to `FULL`, all `ACTIVE` Consents are evaluated even if a matching
              policy is found during evaluation.
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
    ConsentList:
      id: ConsentList
      description: List of resource names of Consent resources.
      type: object
      properties:
        consents:
          description: >-
            The resource names of the Consents to evaluate against, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`.
          type: array
          items:
            type: string
    CheckDataAccessResponse:
      id: CheckDataAccessResponse
      description: >-
        Checks if a particular data_id of a User data mapping in the given
        consent store is consented for a given use.
      type: object
      properties:
        consented:
          description: Whether the requested resource is consented for the given use.
          type: boolean
        consentDetails:
          description: >-
            The resource names of all evaluated Consents mapped to their
            evaluation.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
    ConsentEvaluation:
      id: ConsentEvaluation
      description: The detailed evaluation of a particular Consent.
      type: object
      properties:
        evaluationResult:
          description: The evaluation result.
          type: string
          enumDescriptions:
            - No evaluation result specified. This option is invalid.
            - >-
              The Consent is not applicable to the requested access
              determination. For example, the Consent does not apply to the user
              for which the access determination is requested, or it has a
              `state` of `REVOKED`, or it has expired.
            - >-
              The Consent does not have a policy that matches the
              `resource_attributes` of the evaluated resource.
            - >-
              The Consent has at least one policy that matches the
              `resource_attributes` of the evaluated resource, but no
              `authorization_rule` was satisfied.
            - >-
              The Consent has at least one policy that matches the
              `resource_attributes` of the evaluated resource, and at least one
              `authorization_rule` was satisfied.
          enum:
            - EVALUATION_RESULT_UNSPECIFIED
            - NOT_APPLICABLE
            - NO_MATCHING_POLICY
            - NO_SATISFIED_POLICY
            - HAS_SATISFIED_POLICY
    QueryAccessibleDataRequest:
      id: QueryAccessibleDataRequest
      description: >-
        Queries all data_ids that are consented for a given use in the given
        consent store and writes them to a specified destination. The returned
        Operation includes a progress counter for the number of User data
        mappings processed. Errors are logged to Cloud Logging (see [Viewing
        error logs in Cloud Logging]
        (https://cloud.google.com/healthcare/docs/how-tos/logging) and
        [QueryAccessibleData] for a sample log entry).
      type: object
      properties:
        gcsDestination:
          description: >-
            The Cloud Storage destination. The Cloud Healthcare API service
            account must have the `roles/storage.objectAdmin` Cloud IAM role for
            this Cloud Storage location.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1ConsentGcsDestination'
        resourceAttributes:
          description: >-
            Optional. The values of resource attributes associated with the type
            of resources being requested. If no values are specified, then all
            resource types are included in the output.
          type: object
          additionalProperties:
            type: string
        requestAttributes:
          description: >-
            The values of request attributes associated with this access
            request.
          type: object
          additionalProperties:
            type: string
    GoogleCloudHealthcareV1ConsentGcsDestination:
      id: GoogleCloudHealthcareV1ConsentGcsDestination
      description: The Cloud Storage location for export.
      type: object
      properties:
        uriPrefix:
          description: >-
            URI for a Cloud Storage directory where the server writes result
            files, in the format `gs://{bucket-id}/{path/to/destination/dir}`.
            If there is no trailing slash, the service appends one when
            composing the object path. The user is responsible for creating the
            Cloud Storage bucket and directory referenced in `uri_prefix`.
          type: string
    EvaluateUserConsentsRequest:
      id: EvaluateUserConsentsRequest
      description: >-
        Evaluate a user's Consents for all matching User data mappings. Note:
        User data mappings are indexed asynchronously, causing slight delays
        between the time mappings are created or updated and when they are
        included in EvaluateUserConsents results.
      type: object
      properties:
        userId:
          description: Required. User ID to evaluate consents for.
          type: string
        resourceAttributes:
          description: >-
            Optional. The values of resource attributes associated with the
            resources being requested. If no values are specified, then all
            resources are queried.
          type: object
          additionalProperties:
            type: string
        requestAttributes:
          description: >-
            Required. The values of request attributes associated with this
            access request.
          type: object
          additionalProperties:
            type: string
        consentList:
          description: >-
            Optional. Specific Consents to evaluate the access request against.
            These Consents must have the same `user_id` as the User data
            mappings being evalauted, must exist in the current `consent_store`,
            and must have a `state` of either `ACTIVE` or `DRAFT`. A maximum of
            100 Consents can be provided here. If unspecified, all `ACTIVE`
            unexpired Consents in the current `consent_store` will be evaluated.
          $ref: '#/components/schemas/ConsentList'
        responseView:
          description: >-
            Optional. The view for EvaluateUserConsentsResponse. If unspecified,
            defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.
          type: string
          enumDescriptions:
            - >-
              No response view specified. The API will default to the BASIC
              view.
            - >-
              Only the `data_id` and `consented` fields are populated in the
              response.
            - >-
              All fields within the response are populated. When set to `FULL`,
              all `ACTIVE` Consents are evaluated even if a matching policy is
              found during evaluation.
          enum:
            - RESPONSE_VIEW_UNSPECIFIED
            - BASIC
            - FULL
        pageSize:
          description: >-
            Optional. Limit on the number of User data mappings to return in a
            single response. If not specified, 100 is used. May not be larger
            than 1000.
          type: integer
          format: int32
        pageToken:
          description: >-
            Optional. Token to retrieve the next page of results, or empty to
            get the first page.
          type: string
    EvaluateUserConsentsResponse:
      id: EvaluateUserConsentsResponse
      type: object
      properties:
        results:
          description: The consent evaluation result for each `data_id`.
          type: array
          items:
            $ref: '#/components/schemas/Result'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list. This token is valid for 72 hours after it
            is created.
          type: string
    Result:
      id: Result
      description: The consent evaluation result for a single `data_id`.
      type: object
      properties:
        dataId:
          description: The unique identifier of the evaluated resource.
          type: string
        consented:
          description: Whether the resource is consented for the given use.
          type: boolean
        consentDetails:
          description: >-
            The resource names of all evaluated Consents mapped to their
            evaluation.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConsentEvaluation'
    DeidentifyFhirStoreRequest:
      id: DeidentifyFhirStoreRequest
      description: Creates a new FHIR store with sensitive information de-identified.
      type: object
      properties:
        destinationStore:
          description: >-
            Required. The name of the FHIR store to create and write the
            redacted data to. For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
            * The destination dataset must exist. * The source dataset and
            destination dataset must both reside in the same location.
            De-identifying data across multiple locations is not supported. *
            The destination FHIR store must exist. * The caller must have the
            healthcare.fhirResources.update permission to write to the
            destination FHIR store.
          type: string
        config:
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        gcsConfigUri:
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
          type: string
        resourceFilter:
          description: >-
            A filter specifying the resources to include in the output. If not
            specified, all resources are included in the output.
          $ref: '#/components/schemas/FhirFilter'
        skipModifiedResources:
          description: >-
            If true, skips resources that are created or modified after the
            de-identify operation is created.
          type: boolean
    DeidentifyConfig:
      id: DeidentifyConfig
      description: >-
        Configures de-id options specific to different types of content. Each
        submessage customizes the handling of an
        https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are
        applied in a nested manner at runtime.
      type: object
      properties:
        dicom:
          description: Optional. Configures de-id of application/DICOM content.
          $ref: '#/components/schemas/DicomConfig'
        fhir:
          description: Optional. Configures de-id of application/FHIR content.
          $ref: '#/components/schemas/FhirConfig'
        image:
          description: >-
            Optional. Configures de-identification of image pixels wherever they
            are found in the source_dataset.
          $ref: '#/components/schemas/ImageConfig'
        text:
          description: >-
            Optional. Configures de-identification of text wherever it is found
            in the source_dataset.
          $ref: '#/components/schemas/TextConfig'
        useRegionalDataProcessing:
          description: >-
            Optional. Ensures in-flight data remains in the region of origin
            during de-identification. The default value is false. Using this
            option results in a significant reduction of throughput, and is not
            compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes.
            `LOCATION` must be excluded within TextConfig, and must also be
            excluded within ImageConfig if image redaction is required.
          type: boolean
    DicomConfig:
      id: DicomConfig
      description: Specifies the parameters needed for de-identification of DICOM stores.
      type: object
      properties:
        skipIdRedaction:
          description: >-
            Optional. If true, skip replacing StudyInstanceUID,
            SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID
            and leave them untouched. The Cloud Healthcare API regenerates these
            UIDs by default based on the DICOM Standard's reasoning: "Whilst
            these UIDs cannot be mapped directly to an individual out of
            context, given access to the original images, or to a database of
            the original images containing the UIDs, it would be possible to
            recover the individual's identity."
            http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
          type: boolean
        keepList:
          description: List of tags to keep. Remove all other tags.
          $ref: '#/components/schemas/TagFilterList'
        removeList:
          description: List of tags to remove. Keep all other tags.
          $ref: '#/components/schemas/TagFilterList'
        filterProfile:
          description: Tag filtering profile that determines which tags to keep/remove.
          type: string
          enumDescriptions:
            - No tag filtration profile provided. Same as KEEP_ALL_PROFILE.
            - Keep only tags required to produce valid DICOM.
            - >-
              Remove tags based on DICOM Standard's Attribute Confidentiality
              Basic Profile (DICOM Standard Edition 2018e)
              http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html.
            - Keep all tags.
            - >-
              Inspects within tag contents and replaces sensitive text. The
              process can be configured using the TextConfig. Applies to all
              tags with the following Value Representation names: AE, LO, LT,
              PN, SH, ST, UC, UT, DA, DT, AS
          enum:
            - TAG_FILTER_PROFILE_UNSPECIFIED
            - MINIMAL_KEEP_LIST_PROFILE
            - ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE
            - KEEP_ALL_PROFILE
            - DEIDENTIFY_TAG_CONTENTS
    TagFilterList:
      id: TagFilterList
      description: List of tags to be filtered.
      type: object
      properties:
        tags:
          description: >-
            Optional. Tags to be filtered. Tags must be DICOM Data Elements,
            File Meta Elements, or Directory Structuring Elements, as defined
            at:
            http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,.
            They may be provided by "Keyword" or "Tag". For example "PatientID",
            "00100010".
          type: array
          items:
            type: string
    FhirConfig:
      id: FhirConfig
      description: Specifies how to handle de-identification of a FHIR store.
      type: object
      properties:
        fieldMetadataList:
          description: >-
            Optional. Specifies FHIR paths to match and how to transform them.
            Any field that is not matched by a FieldMetadata is passed through
            to the output dataset unmodified. All extensions will be processed
            according to `default_keep_extensions`.
          type: array
          items:
            $ref: '#/components/schemas/FieldMetadata'
        defaultKeepExtensions:
          description: >-
            Optional. The behaviour for handling FHIR extensions that aren't
            otherwise specified for de-identification. If true, all extensions
            are preserved during de-identification by default. If false or
            unspecified, all extensions are removed during de-identification by
            default.
          type: boolean
    FieldMetadata:
      id: FieldMetadata
      description: >-
        Specifies FHIR paths to match, and how to handle de-identification of
        matching fields.
      type: object
      properties:
        paths:
          description: >-
            Optional. List of paths to FHIR fields to be redacted. Each path is
            a period-separated list where each component is either a field name
            or FHIR type name, for example: Patient, HumanName. For "choice"
            types (those defined in the FHIR spec with the form: field[x]) we
            use two separate components. For example, "deceasedAge.unit" is
            matched by "Deceased.Age.unit". Supported types are:
            AdministrativeGenderCode, Base64Binary, Boolean, Code, Date,
            DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode,
            Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
          type: array
          items:
            type: string
        action:
          description: Optional. Deidentify action for one field.
          type: string
          enumDescriptions:
            - No action specified. Defaults to DO_NOT_TRANSFORM.
            - Transform the entire field.
            - Inspect and transform any found PHI.
            - Do not transform.
          enum:
            - ACTION_UNSPECIFIED
            - TRANSFORM
            - INSPECT_AND_TRANSFORM
            - DO_NOT_TRANSFORM
    ImageConfig:
      id: ImageConfig
      description: Specifies how to handle de-identification of image pixels.
      type: object
      properties:
        textRedactionMode:
          description: Optional. Determines how to redact text from image.
          type: string
          enumDescriptions:
            - No text redaction specified. Same as REDACT_NO_TEXT.
            - Redact all text.
            - >-
              Redact sensitive text. Uses the set of [Default DICOM
              InfoTypes](https://cloud.google.com/healthcare-api/docs/how-tos/dicom-deidentify#default_dicom_infotypes).
            - Do not redact text.
          enum:
            - TEXT_REDACTION_MODE_UNSPECIFIED
            - REDACT_ALL_TEXT
            - REDACT_SENSITIVE_TEXT
            - REDACT_NO_TEXT
    TextConfig:
      id: TextConfig
      type: object
      properties:
        transformations:
          description: >-
            Optional. The transformations to apply to the detected data.
            Deprecated. Use `additional_transformations` instead.
          type: array
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
        additionalTransformations:
          description: >-
            Optional. Transformations to apply to the detected data, overridden
            by `exclude_info_types`.
          type: array
          items:
            $ref: '#/components/schemas/InfoTypeTransformation'
        excludeInfoTypes:
          description: >-
            Optional. InfoTypes to skip transforming, overriding
            `additional_transformations`.
          type: array
          items:
            type: string
    InfoTypeTransformation:
      id: InfoTypeTransformation
      description: >-
        A transformation to apply to text that is identified as a specific
        info_type.
      type: object
      properties:
        infoTypes:
          description: >-
            Optional. InfoTypes to apply this transformation to. If this is not
            specified, the transformation applies to any info_type.
          type: array
          items:
            type: string
        redactConfig:
          description: Config for text redaction.
          $ref: '#/components/schemas/RedactConfig'
        characterMaskConfig:
          description: Config for character mask.
          $ref: '#/components/schemas/CharacterMaskConfig'
        dateShiftConfig:
          description: Config for date shift.
          $ref: '#/components/schemas/DateShiftConfig'
        cryptoHashConfig:
          description: Config for crypto hash.
          $ref: '#/components/schemas/CryptoHashConfig'
        replaceWithInfoTypeConfig:
          description: Config for replace with InfoType.
          $ref: '#/components/schemas/ReplaceWithInfoTypeConfig'
    RedactConfig:
      id: RedactConfig
      description: >-
        Define how to redact sensitive values. Default behaviour is erase. For
        example, "My name is Jane." becomes "My name is ."
      type: object
      properties: {}
    CharacterMaskConfig:
      id: CharacterMaskConfig
      description: Mask a string by replacing its characters with a fixed character.
      type: object
      properties:
        maskingCharacter:
          description: >-
            Optional. Character to mask the sensitive values. If not supplied,
            defaults to "*".
          type: string
    DateShiftConfig:
      id: DateShiftConfig
      description: >-
        Shift a date forward or backward in time by a random amount which is
        consistent for a given patient and crypto key combination.
      type: object
      properties:
        cryptoKey:
          description: >-
            An AES 128/192/256 bit key. The date shift is computed based on this
            key and the patient ID. If the patient ID is empty for a DICOM
            resource, the date shift is computed based on this key and the study
            instance UID. If `crypto_key` is not set, then `kms_wrapped` is used
            to calculate the date shift. If neither is set, a default key is
            generated for each de-identify operation. Must not be set if
            `kms_wrapped` is set.
          type: string
          format: byte
        kmsWrapped:
          description: >-
            KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is
            used to calculate the date shift. If neither is set, a default key
            is generated for each de-identify operation. Must not be set if
            `crypto_key` is set.
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
    KmsWrappedCryptoKey:
      id: KmsWrappedCryptoKey
      description: >-
        Include to use an existing data crypto key wrapped by KMS. The wrapped
        key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud
        IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the
        project's Cloud Healthcare Service Agent service account. For more
        information, see [Creating a wrapped key]
        (https://cloud.google.com/dlp/docs/create-wrapped-key).
      type: object
      properties:
        wrappedKey:
          description: Required. The wrapped data crypto key.
          type: string
          format: byte
        cryptoKey:
          description: >-
            Required. The resource name of the KMS CryptoKey to use for
            unwrapping. For example,
            `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
          type: string
    CryptoHashConfig:
      id: CryptoHashConfig
      description: >-
        Pseudonymization method that generates surrogates via cryptographic
        hashing. Uses SHA-256. Outputs a base64-encoded representation of the
        hashed output (for example,
        `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
      type: object
      properties:
        cryptoKey:
          description: >-
            An AES 128/192/256 bit key. Causes the hash to be computed based on
            this key. A default key is generated for each Deidentify operation
            and is used when neither `crypto_key` nor `kms_wrapped` is
            specified. Must not be set if `kms_wrapped` is set.
          type: string
          format: byte
        kmsWrapped:
          description: KMS wrapped key. Must not be set if `crypto_key` is set.
          $ref: '#/components/schemas/KmsWrappedCryptoKey'
    ReplaceWithInfoTypeConfig:
      id: ReplaceWithInfoTypeConfig
      description: >-
        When using the INSPECT_AND_TRANSFORM action, each match is replaced with
        the name of the info_type. For example, "My name is Jane" becomes "My
        name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
      type: object
      properties: {}
    FhirFilter:
      id: FhirFilter
      description: Filter configuration.
      type: object
      properties:
        resources:
          description: >-
            List of resources to include in the output. If this list is empty or
            not specified, all resources are included in the output.
          $ref: '#/components/schemas/Resources'
    Resources:
      id: Resources
      description: A list of FHIR resources.
      type: object
      properties:
        resources:
          description: List of resources IDs. For example, "Patient/1234".
          type: array
          items:
            type: string
    DeidentifyDicomStoreRequest:
      id: DeidentifyDicomStoreRequest
      description: Creates a new DICOM store with sensitive information de-identified.
      type: object
      properties:
        destinationStore:
          description: >-
            Required. The name of the DICOM store to create and write the
            redacted data to. For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
            * The destination dataset must exist. * The source dataset and
            destination dataset must both reside in the same location.
            De-identifying data across multiple locations is not supported. *
            The destination DICOM store must not exist. * The caller must have
            the necessary permissions to create the destination DICOM store.
          type: string
        config:
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        gcsConfigUri:
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
          type: string
        filterConfig:
          description: Filter configuration.
          $ref: '#/components/schemas/DicomFilterConfig'
    DicomFilterConfig:
      id: DicomFilterConfig
      description: Specifies the filter configuration for DICOM resources.
      type: object
      properties:
        resourcePathsGcsUri:
          description: >-
            The Cloud Storage location of the filter configuration file. The
            `gcs_uri` must be in the format `gs://bucket/path/to/object`. The
            filter configuration file must contain a list of resource paths
            separated by newline characters (\n or \r\n). Each resource path
            must be in the format
            "/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]"
            The Cloud Healthcare API service account must have the
            `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage
            location.
          type: string
    Dataset:
      id: Dataset
      description: >-
        A message representing a health dataset. A health dataset represents a
        collection of healthcare data pertaining to one or more patients. This
        may include multiple modalities of healthcare data, such as electronic
        medical records or medical imaging data.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the dataset, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
          type: string
        timeZone:
          description: >-
            Optional. The default timezone used by this dataset. Must be a
            either a valid IANA time zone name such as "America/New_York" or
            empty, which defaults to UTC. This is used for parsing times in
            resources, such as HL7 messages, where no explicit timezone is
            specified.
          type: string
        encryptionSpec:
          description: >-
            Optional. Customer-managed encryption key spec for a Dataset. If
            set, this Dataset and all of its sub-resources will be secured by
            this key. If empty, the Dataset is secured by the default Google
            encryption key.
          $ref: '#/components/schemas/EncryptionSpec'
        satisfiesPzs:
          description: Output only. Whether the dataset satisfies zone separation.
          readOnly: true
          type: boolean
        satisfiesPzi:
          description: Output only. Whether the dataset satisfies zone isolation.
          readOnly: true
          type: boolean
    EncryptionSpec:
      id: EncryptionSpec
      description: >-
        Represents a customer-managed encryption key spec that can be applied to
        a resource.
      type: object
      properties:
        kmsKeyName:
          description: >-
            Required. The resource name of customer-managed encryption key that
            is used to secure a resource and its sub-resources. Only the key in
            the same location as this Dataset is allowed to be used for
            encryption. Format is:
            `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}`
          type: string
    ListDatasetsResponse:
      id: ListDatasetsResponse
      description: Lists the available datasets.
      type: object
      properties:
        datasets:
          description: The first page of datasets.
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results, or empty if there are no
            more results in the list.
          type: string
    DeidentifyDatasetRequest:
      id: DeidentifyDatasetRequest
      description: Redacts identifying information from the specified dataset.
      type: object
      properties:
        destinationDataset:
          description: >-
            Required. The name of the dataset resource to create and write the
            redacted data to. * The destination dataset must not exist. * The
            destination dataset must be in the same location as the source
            dataset. De-identifying data across multiple locations is not
            supported.
          type: string
        config:
          description: >-
            Deidentify configuration. Only one of `config` and `gcs_config_uri`
            can be specified.
          $ref: '#/components/schemas/DeidentifyConfig'
        gcsConfigUri:
          description: >-
            Cloud Storage location to read the JSON
            cloud.healthcare.deidentify.DeidentifyConfig from, overriding the
            default config. Must be of the form
            `gs://{bucket_id}/path/to/object`. The Cloud Storage location must
            grant the Cloud IAM role `roles/storage.objectViewer` to the
            project's Cloud Healthcare Service Agent service account. Only one
            of `config` and `gcs_config_uri` can be specified.
          type: string
    StorageInfo:
      id: StorageInfo
      description: StorageInfo encapsulates all the storage info of a resource.
      type: object
      properties:
        referencedResource:
          description: >-
            The resource whose storage info is returned. For example:
            `projects/{projectID}/locations/{locationID}/datasets/{datasetID}/dicomStores/{dicomStoreID}/dicomWeb/studies/{studyUID}/series/{seriesUID}/instances/{instanceUID}`
          type: string
        structuredStorageInfo:
          description: Info about the data stored in structured storage for the resource.
          $ref: '#/components/schemas/StructuredStorageInfo'
        blobStorageInfo:
          description: Info about the data stored in blob storage for the resource.
          $ref: '#/components/schemas/BlobStorageInfo'
    StructuredStorageInfo:
      id: StructuredStorageInfo
      description: >-
        StructuredStorageInfo contains details about the data stored in
        Structured Storage for the referenced resource.
      type: object
      properties:
        sizeBytes:
          description: Size in bytes of data stored in structured storage.
          type: string
          format: int64
    BlobStorageInfo:
      id: BlobStorageInfo
      description: >-
        BlobStorageInfo contains details about the data stored in Blob Storage
        for the referenced resource. Note: Storage class is only valid for DICOM
        and hence will only be populated for DICOM resources.
      type: object
      properties:
        sizeBytes:
          description: Size in bytes of data stored in Blob Storage.
          type: string
          format: int64
        storageClass:
          description: The storage class in which the Blob data is stored.
          type: string
          enumDescriptions:
            - >-
              If unspecified in CreateDataset, the StorageClass defaults to
              STANDARD. If unspecified in UpdateDataset and the StorageClass is
              set in the field mask, an InvalidRequest error is thrown.
            - >-
              This stores the Object in Blob Standard Storage:
              https://cloud.google.com/storage/docs/storage-classes#standard
            - >-
              This stores the Object in Blob Nearline Storage:
              https://cloud.google.com/storage/docs/storage-classes#nearline
            - >-
              This stores the Object in Blob Coldline Storage:
              https://cloud.google.com/storage/docs/storage-classes#coldline
            - >-
              This stores the Object in Blob Archive Storage:
              https://cloud.google.com/storage/docs/storage-classes#archive
          enum:
            - BLOB_STORAGE_CLASS_UNSPECIFIED
            - STANDARD
            - NEARLINE
            - COLDLINE
            - ARCHIVE
        storageClassUpdateTime:
          description: >-
            The time at which the storage class was updated. This is used to
            compute early deletion fees of the resource.
          type: string
          format: google-datetime
    SetBlobStorageSettingsRequest:
      id: SetBlobStorageSettingsRequest
      description: Request message for `SetBlobStorageSettings` method.
      type: object
      properties:
        filterConfig:
          description: >-
            Optional. A filter configuration. If `filter_config` is specified,
            set the value of `resource` to the resource name of a DICOM store in
            the format
            `projects/{projectID}/locations/{locationID}/datasets/{datasetID}/dicomStores/{dicomStoreID}`.
          $ref: '#/components/schemas/DicomFilterConfig'
        blobStorageSettings:
          description: >-
            The blob storage settings to update for the specified resources.
            Only fields listed in `update_mask` are applied.
          $ref: '#/components/schemas/BlobStorageSettings'
    BlobStorageSettings:
      id: BlobStorageSettings
      description: Settings for data stored in Blob storage.
      type: object
      properties:
        blobStorageClass:
          description: The Storage class in which the Blob data is stored.
          type: string
          enumDescriptions:
            - >-
              If unspecified in CreateDataset, the StorageClass defaults to
              STANDARD. If unspecified in UpdateDataset and the StorageClass is
              set in the field mask, an InvalidRequest error is thrown.
            - >-
              This stores the Object in Blob Standard Storage:
              https://cloud.google.com/storage/docs/storage-classes#standard
            - >-
              This stores the Object in Blob Nearline Storage:
              https://cloud.google.com/storage/docs/storage-classes#nearline
            - >-
              This stores the Object in Blob Coldline Storage:
              https://cloud.google.com/storage/docs/storage-classes#coldline
            - >-
              This stores the Object in Blob Archive Storage:
              https://cloud.google.com/storage/docs/storage-classes#archive
          enum:
            - BLOB_STORAGE_CLASS_UNSPECIFIED
            - STANDARD
            - NEARLINE
            - COLDLINE
            - ARCHIVE
    DicomStore:
      id: DicomStore
      description: Represents a DICOM store.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the DICOM store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
          type: string
        notificationConfig:
          description: >-
            Optional. Notification destination for new DICOM instances. Supplied
            by the client.
          $ref: '#/components/schemas/NotificationConfig'
        labels:
          description: >-
            User-supplied key-value pairs used to organize DICOM stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
          additionalProperties:
            type: string
        streamConfigs:
          description: >-
            Optional. A list of streaming configs used to configure the
            destination of streaming exports for every DICOM instance insertion
            in this DICOM store. After a new config is added to
            `stream_configs`, DICOM instance insertions are streamed to the new
            destination. When a config is removed from `stream_configs`, the
            server stops streaming to that destination. Each config must contain
            a unique destination.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomStreamConfig'
        notificationConfigs:
          description: >-
            Optional. Specifies where and whether to send notifications upon
            changes to a DICOM store.
          type: array
          items:
            $ref: '#/components/schemas/DicomNotificationConfig'
    NotificationConfig:
      id: NotificationConfig
      description: Specifies where to send notifications upon changes to a data store.
      type: object
      properties:
        pubsubTopic:
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            notifications of changes are published on. Supplied by the client.
            PubsubMessage.Data contains the resource name.
            PubsubMessage.MessageId is the ID of this message. It is guaranteed
            to be unique within the topic. PubsubMessage.PublishTime is the time
            at which the message was published. Notifications are only sent if
            the topic is non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. Cloud Healthcare API service account must have
            publisher permissions on the given Pub/Sub topic. Not having
            adequate permissions causes the calls that send notifications to
            fail. If a notification can't be published to Pub/Sub, errors are
            logged to Cloud Logging (see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
            If the number of errors exceeds a certain rate, some aren't
            submitted. Note that not all operations trigger notifications, see
            [Configuring Pub/Sub
            notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub)
            for specific details.
          type: string
        sendForBulkImport:
          description: >-
            Indicates whether or not to send Pub/Sub notifications on bulk
            import. Only supported for DICOM imports.
          type: boolean
    GoogleCloudHealthcareV1DicomStreamConfig:
      id: GoogleCloudHealthcareV1DicomStreamConfig
      description: StreamConfig specifies configuration for a streaming DICOM export.
      type: object
      properties:
        bigqueryDestination:
          description: >-
            Results are appended to this table. The server creates a new table
            in the given BigQuery dataset if the specified table does not exist.
            To enable the Cloud Healthcare API to write to your BigQuery table,
            you must give the Cloud Healthcare API service account the
            bigquery.dataEditor role. The service account is:
            `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`.
            The PROJECT_NUMBER identifies the project that the DICOM store
            resides in. To get the project number, go to the Cloud Console
            Dashboard. It is recommended to not have a custom schema in the
            destination table which could conflict with the schema created by
            the Cloud Healthcare API. Instance deletions are not applied to the
            destination table. The destination's table schema will be
            automatically updated in case a new instance's data is incompatible
            with the current schema. The schema should not be updated manually
            as this can cause incompatibilies that cannot be resolved
            automatically. One resolution in this case is to delete the
            incompatible table and let the server recreate one, though the newly
            created table only contains data after the table recreation.
            BigQuery imposes a 1 MB limit on streaming insert row size,
            therefore any instance that generates more than 1 MB of BigQuery
            data will not be streamed. If an instance cannot be streamed to
            BigQuery, errors will be logged to Cloud Logging (see [Viewing error
            logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomBigQueryDestination'
    GoogleCloudHealthcareV1DicomBigQueryDestination:
      id: GoogleCloudHealthcareV1DicomBigQueryDestination
      description: The BigQuery table where the server writes the output.
      type: object
      properties:
        tableUri:
          description: >-
            Optional. BigQuery URI to a table, up to 2000 characters long, in
            the format `bq://projectId.bqDatasetId.tableId`
          type: string
        force:
          description: >-
            Optional. Use `write_disposition` instead. If `write_disposition` is
            specified, this parameter is ignored. force=false is equivalent to
            write_disposition=WRITE_EMPTY and force=true is equivalent to
            write_disposition=WRITE_TRUNCATE.
          type: boolean
        writeDisposition:
          description: >-
            Optional. Determines whether the existing table in the destination
            is to be overwritten or appended to. If a write_disposition is
            specified, the `force` parameter is ignored.
          type: string
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination table is empty.
            - >-
              Erase all existing data in the destination table before writing
              the instances.
            - Append data to the destination table.
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
    DicomNotificationConfig:
      id: DicomNotificationConfig
      description: Contains the configuration for DICOM notifications.
      type: object
      properties:
        pubsubTopic:
          description: >-
            Required. The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic
            that notifications of changes are published on. Supplied by the
            client. The notification is a `PubsubMessage` with the following
            fields: * `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It is
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. * `PubsubMessage.Attributes` contains the following
            attributes: * `action`: The name of the endpoint that generated the
            notification. Possible values are `StoreInstances`,
            `SetBlobSettings`, `ImportDicomData`, etc. * `lastUpdatedTime`: The
            latest timestamp when the DICOM instance was updated. * `storeName`:
            The resource name of the DICOM store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
            * `studyInstanceUID`: The study UID of the DICOM instance that was
            changed. * `seriesInstanceUID`: The series UID of the DICOM instance
            that was changed. * `sopInstanceUID`: The instance UID of the DICOM
            instance that was changed. * `versionId`: The version ID of the
            DICOM instance that was changed. * `modality`: The modality tag of
            the DICOM instance that was changed. * `previousStorageClass`: The
            storage class where the DICOM instance was previously stored if the
            storage class was changed. * `storageClass`: The storage class where
            the DICOM instance is currently stored. Note that notifications are
            only sent if the topic is non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. The Cloud Healthcare API service account,
            service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have the
            `pubsub.topics.publish` permission (which is typically included in
            `roles/pubsub.publisher` role) on the given Pub/Sub topic. Not
            having adequate permissions causes the calls that send notifications
            to fail
            (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions).
            If a notification can't be published to Pub/Sub, errors are logged
            to Cloud Logging. For more information, see [Viewing error logs in
            Cloud
            Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
          type: string
    ListDicomStoresResponse:
      id: ListDicomStoresResponse
      description: Lists the DICOM stores in the given dataset.
      type: object
      properties:
        dicomStores:
          description: >-
            The returned DICOM stores. Won't be more DICOM stores than the value
            of page_size in the request.
          type: array
          items:
            $ref: '#/components/schemas/DicomStore'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    ImportDicomDataRequest:
      id: ImportDicomDataRequest
      description: >-
        Imports data into the specified DICOM store. Returns an error if any of
        the files to import are not DICOM files. This API accepts duplicate
        DICOM instances by ignoring the newly-pushed instance. It does not
        overwrite.
      type: object
      properties:
        gcsSource:
          description: >-
            Cloud Storage source data location and import configuration. The
            Cloud Healthcare Service Agent requires the
            `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage
            location.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomGcsSource'
        blobStorageSettings:
          description: >-
            Optional. The blob storage settings for the data imported by this
            operation.
          $ref: '#/components/schemas/BlobStorageSettings'
    GoogleCloudHealthcareV1DicomGcsSource:
      id: GoogleCloudHealthcareV1DicomGcsSource
      description: Specifies the configuration for importing data from Cloud Storage.
      type: object
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) with content only.
            The URI must be in the following format:
            `gs://{bucket_id}/{object_id}`. The URI can include wildcards in
            `object_id` and thus identify multiple files. Supported wildcards: *
            '*' to match 0 or more non-separator characters * '**' to match 0 or
            more characters (including separators). Must be used at the end of a
            path and with no other wildcards in the path. Can also be used with
            a file extension (such as .dcm), which imports all files with the
            extension in the specified directory and its sub-directories. For
            example, `gs://my-bucket/my-directory/**.dcm` imports all files with
            .dcm extensions in `my-directory/` and its sub-directories. * '?' to
            match 1 character. All other URI formats are invalid. Files matching
            the wildcard are expected to contain content only, no metadata.
          type: string
    ExportDicomDataRequest:
      id: ExportDicomDataRequest
      description: >-
        Exports data from the specified DICOM store. If a given resource, such
        as a DICOM object with the same SOPInstance UID, already exists in the
        output, it is overwritten with the version in the source dataset.
        Exported DICOM data persists when the DICOM store from which it was
        exported is deleted.
      type: object
      properties:
        gcsDestination:
          description: >-
            The Cloud Storage output destination. The Cloud Healthcare Service
            Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on
            the Cloud Storage location.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomGcsDestination'
        bigqueryDestination:
          description: >-
            The BigQuery output destination. You can only export to a BigQuery
            dataset that's in the same project as the DICOM store you're
            exporting from. The Cloud Healthcare Service Agent requires two IAM
            roles on the BigQuery location: `roles/bigquery.dataEditor` and
            `roles/bigquery.jobUser`.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1DicomBigQueryDestination'
    GoogleCloudHealthcareV1DicomGcsDestination:
      id: GoogleCloudHealthcareV1DicomGcsDestination
      description: >-
        The Cloud Storage location where the server writes the output and the
        export configuration.
      type: object
      properties:
        uriPrefix:
          description: >-
            The Cloud Storage destination to export to. URI for a Cloud Storage
            directory where the server writes the result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`). If there is no
            trailing slash, the service appends one when composing the object
            path. The user is responsible for creating the Cloud Storage bucket
            referenced in `uri_prefix`.
          type: string
        mimeType:
          description: >-
            MIME types supported by DICOM spec. Each file is written in the
            following format:
            `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}`
            The frame_number component exists only for multi-frame instances.
            Supported MIME types are consistent with supported formats in
            DICOMweb:
            https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction.
            Specifically, the following are supported: - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) -
            application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM
            with embedded JPEG Baseline) - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG
            2000 Lossless Only) - application/dicom;
            transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG
            2000) - application/dicom; transfer-syntax=* (DICOM with no
            transcoding) - application/octet-stream;
            transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) -
            application/octet-stream; transfer-syntax=* (raw PixelData in
            whatever format it was uploaded in) - image/jpeg;
            transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png
            The following extensions are used for output files: -
            application/dicom -> .dcm - image/jpeg -> .jpg - image/png -> .png -
            application/octet-stream -> no extension If unspecified, the
            instances are exported in the original DICOM format they were
            uploaded in.
          type: string
    DicomStoreMetrics:
      id: DicomStoreMetrics
      description: DicomStoreMetrics contains metrics describing a DICOM store.
      type: object
      properties:
        name:
          description: >-
            Resource name of the DICOM store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
          type: string
        studyCount:
          description: Number of studies in the store.
          type: string
          format: int64
        seriesCount:
          description: Number of series in the store.
          type: string
          format: int64
        instanceCount:
          description: Number of instances in the store.
          type: string
          format: int64
        structuredStorageSizeBytes:
          description: Total structured storage bytes for all instances in the store.
          type: string
          format: int64
        blobStorageSizeBytes:
          description: Total blob storage bytes for all instances in the store.
          type: string
          format: int64
    HttpBody:
      id: HttpBody
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
      type: object
      properties:
        contentType:
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          type: string
          format: byte
        extensions:
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    StudyMetrics:
      id: StudyMetrics
      description: StudyMetrics contains metrics describing a DICOM study.
      type: object
      properties:
        study:
          description: >-
            The study resource path. For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}`.
          type: string
        structuredStorageSizeBytes:
          description: Total structured storage bytes for all instances in the study.
          type: string
          format: int64
        blobStorageSizeBytes:
          description: Total blob storage bytes for all instances in the study.
          type: string
          format: int64
        instanceCount:
          description: Number of instances in the study.
          type: string
          format: int64
        seriesCount:
          description: Number of series in the study.
          type: string
          format: int64
    SeriesMetrics:
      id: SeriesMetrics
      description: SeriesMetrics contains metrics describing a DICOM series.
      type: object
      properties:
        series:
          description: >-
            The series resource path. For example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}/dicomWeb/studies/{study_uid}/series/{series_uid}`.
          type: string
        structuredStorageSizeBytes:
          description: Total structured storage bytes for all instances in the series.
          type: string
          format: int64
        blobStorageSizeBytes:
          description: Total blob storage bytes for all instances in the series.
          type: string
          format: int64
        instanceCount:
          description: Number of instances in the series.
          type: string
          format: int64
    Hl7V2Store:
      id: Hl7V2Store
      description: Represents an HL7v2 store.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the HL7v2 store, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
          type: string
        parserConfig:
          description: >-
            Optional. The configuration for the parser. It determines how the
            server parses the messages.
          $ref: '#/components/schemas/ParserConfig'
        labels:
          description: >-
            User-supplied key-value pairs used to organize HL7v2 stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
          additionalProperties:
            type: string
        notificationConfigs:
          description: >-
            Optional. A list of notification configs. Each configuration uses a
            filter to determine whether to publish a message (both Ingest &
            Create) on the corresponding notification destination. Only the
            message name is sent as part of the notification. Supplied by the
            client.
          type: array
          items:
            $ref: '#/components/schemas/Hl7V2NotificationConfig'
        rejectDuplicateMessage:
          description: >-
            Optional. Determines whether to reject duplicate messages. A
            duplicate message is a message with the same raw bytes as a message
            that has already been ingested/created in this HL7v2 store. The
            default value is false, meaning that the store accepts the duplicate
            messages and it also returns the same ACK message in the
            IngestMessageResponse as has been returned previously. Note that
            only one resource is created in the store. When this field is set to
            true, CreateMessage/IngestMessage requests with a duplicate message
            will be rejected by the store, and IngestMessageErrorDetail returns
            a NACK message upon rejection.
          type: boolean
    ParserConfig:
      id: ParserConfig
      description: >-
        The configuration for the parser. It determines how the server parses
        the messages.
      type: object
      properties:
        allowNullHeader:
          description: Optional. Determines whether messages with no header are allowed.
          type: boolean
        segmentTerminator:
          description: >-
            Optional. Byte(s) to use as the segment terminator. If this is
            unset, '\r' is used as segment terminator, matching the HL7 version
            2 specification.
          type: string
          format: byte
        schema:
          description: >-
            Optional. Schemas used to parse messages in this store, if
            schematized parsing is desired.
          $ref: '#/components/schemas/SchemaPackage'
        version:
          description: >-
            Immutable. Determines the version of both the default parser to be
            used when `schema` is not given, as well as the schematized parser
            used when `schema` is specified. This field is immutable after HL7v2
            store creation.
          type: string
          enumDescriptions:
            - Unspecified parser version, equivalent to V1.
            - >-
              The `parsed_data` includes every given non-empty message field
              except the Field Separator (MSH-1) field. As a result, the parsed
              MSH segment starts with the MSH-2 field and the field numbers are
              off-by-one with respect to the HL7 standard.
            - The `parsed_data` includes every given non-empty message field.
            - >-
              This version is the same as V2, with the following change. The
              `parsed_data` contains unescaped escaped field separators,
              component separators, sub-component separators, repetition
              separators, escape characters, and truncation characters. If
              `schema` is specified, the schematized parser uses improved
              parsing heuristics compared to previous versions.
          enum:
            - PARSER_VERSION_UNSPECIFIED
            - V1
            - V2
            - V3
    SchemaPackage:
      id: SchemaPackage
      description: A schema package contains a set of schemas and type definitions.
      type: object
      properties:
        schematizedParsingType:
          description: Optional. Determines how messages that fail to parse are handled.
          type: string
          enumDescriptions:
            - Unspecified schematized parsing type, equivalent to `SOFT_FAIL`.
            - >-
              Messages that fail to parse are still stored and ACKed but a
              parser error is stored in place of the schematized data.
            - >-
              Messages that fail to parse are rejected from ingestion/insertion
              and return an error code.
          enum:
            - SCHEMATIZED_PARSING_TYPE_UNSPECIFIED
            - SOFT_FAIL
            - HARD_FAIL
        schemas:
          description: >-
            Optional. Schema configs that are layered based on their
            VersionSources that match the incoming message. Schema configs
            present in higher indices override those in lower indices with the
            same message type and trigger event if their VersionSources all
            match an incoming message.
          type: array
          items:
            $ref: '#/components/schemas/Hl7SchemaConfig'
        types:
          description: >-
            Optional. Schema type definitions that are layered based on their
            VersionSources that match the incoming message. Type definitions
            present in higher indices override those in lower indices with the
            same type name if their VersionSources all match an incoming
            message.
          type: array
          items:
            $ref: '#/components/schemas/Hl7TypesConfig'
        ignoreMinOccurs:
          description: >-
            Optional. Flag to ignore all min_occurs restrictions in the schema.
            This means that incoming messages can omit any group, segment,
            field, component, or subcomponent.
          type: boolean
        unexpectedSegmentHandling:
          description: >-
            Optional. Determines how unexpected segments (segments not matched
            to the schema) are handled.
          type: string
          enumDescriptions:
            - Unspecified handling mode, equivalent to FAIL.
            - Unexpected segments fail to parse and return an error.
            - Unexpected segments do not fail, but are omitted from the output.
            - >-
              Unexpected segments do not fail, but are parsed in place and added
              to the current group. If a segment has a type definition, it is
              used, otherwise it is parsed as VARIES.
          enum:
            - UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED
            - FAIL
            - SKIP
            - PARSE
    Hl7SchemaConfig:
      id: Hl7SchemaConfig
      description: >-
        Root config message for HL7v2 schema. This contains a schema structure
        of groups and segments, and filters that determine which messages to
        apply the schema structure to.
      type: object
      properties:
        version:
          description: >-
            Each VersionSource is tested and only if they all match is the
            schema used for the message.
          type: array
          items:
            $ref: '#/components/schemas/VersionSource'
        messageSchemaConfigs:
          description: >-
            Map from each HL7v2 message type and trigger event pair, such as
            ADT_A04, to its schema configuration root group.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SchemaGroup'
    VersionSource:
      id: VersionSource
      description: >-
        Describes a selector for extracting and matching an MSH field to a
        value.
      type: object
      properties:
        mshField:
          description: >-
            The field to extract from the MSH segment. For example, "3.1" or
            "18[1].1".
          type: string
        value:
          description: >-
            The value to match with the field. For example, "My Application
            Name" or "2.3".
          type: string
    SchemaGroup:
      id: SchemaGroup
      description: An HL7v2 logical group construct.
      type: object
      properties:
        name:
          description: The name of this group. For example, "ORDER_DETAIL".
          type: string
        choice:
          description: >-
            True indicates that this is a choice group, meaning that only one of
            its segments can exist in a given message.
          type: boolean
        minOccurs:
          description: The minimum number of times this group must be present/repeated.
          type: integer
          format: int32
        maxOccurs:
          description: >-
            The maximum number of times this group can be repeated. 0 or -1
            means unbounded.
          type: integer
          format: int32
        members:
          description: Nested groups and/or segments.
          type: array
          items:
            $ref: '#/components/schemas/GroupOrSegment'
    GroupOrSegment:
      id: GroupOrSegment
      description: Construct representing a logical group or a segment.
      type: object
      properties:
        segment:
          $ref: '#/components/schemas/SchemaSegment'
        group:
          $ref: '#/components/schemas/SchemaGroup'
    SchemaSegment:
      id: SchemaSegment
      description: An HL7v2 Segment.
      type: object
      properties:
        type:
          description: The Segment type. For example, "PID".
          type: string
        minOccurs:
          description: >-
            The minimum number of times this segment can be present in this
            group.
          type: integer
          format: int32
        maxOccurs:
          description: >-
            The maximum number of times this segment can be present in this
            group. 0 or -1 means unbounded.
          type: integer
          format: int32
    Hl7TypesConfig:
      id: Hl7TypesConfig
      description: Root config for HL7v2 datatype definitions for a specific HL7v2 version.
      type: object
      properties:
        version:
          description: >-
            The version selectors that this config applies to. A message must
            match ALL version sources to apply.
          type: array
          items:
            $ref: '#/components/schemas/VersionSource'
        type:
          description: The HL7v2 type definitions.
          type: array
          items:
            $ref: '#/components/schemas/Type'
    Type:
      id: Type
      description: A type definition for some HL7v2 type (incl. Segments and Datatypes).
      type: object
      properties:
        name:
          description: >-
            The name of this type. This would be the segment or datatype name.
            For example, "PID" or "XPN".
          type: string
        primitive:
          description: >-
            If this is a primitive type then this field is the type of the
            primitive For example, STRING. Leave unspecified for composite
            types.
          type: string
          enumDescriptions:
            - Not a primitive.
            - String primitive.
            - Element that can have unschematized children.
            - Like STRING, but all delimiters below this element are ignored.
          enum:
            - PRIMITIVE_UNSPECIFIED
            - STRING
            - VARIES
            - UNESCAPED_STRING
        fields:
          description: The (sub) fields this type has (if not primitive).
          type: array
          items:
            $ref: '#/components/schemas/Field'
    Field:
      id: Field
      description: A (sub) field of a type.
      type: object
      properties:
        name:
          description: The name of the field. For example, "PID-1" or just "1".
          type: string
        type:
          description: >-
            The type of this field. A Type with this name must be defined in an
            Hl7TypesConfig.
          type: string
        table:
          description: >-
            The HL7v2 table this field refers to. For example, PID-15 (Patient's
            Primary Language) usually refers to table "0296".
          type: string
        minOccurs:
          description: The minimum number of times this field must be present/repeated.
          type: integer
          format: int32
        maxOccurs:
          description: >-
            The maximum number of times this field can be repeated. 0 or -1
            means unbounded.
          type: integer
          format: int32
    Hl7V2NotificationConfig:
      id: Hl7V2NotificationConfig
      description: >-
        Specifies where and whether to send notifications upon changes to a data
        store.
      type: object
      properties:
        pubsubTopic:
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            notifications of changes are published on. Supplied by the client.
            The notification is a `PubsubMessage` with the following fields: *
            `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It's
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. Note that notifications are only sent if the topic is
            non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. The Cloud Healthcare API service account,
            service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com,
            must have publisher permissions on the given Pub/Sub topic. Not
            having adequate permissions causes the calls that send notifications
            to fail. If a notification cannot be published to Pub/Sub, errors
            are logged to Cloud Logging. For more information, see [Viewing
            error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
          type: string
        filter:
          description: >-
            Optional. Restricts notifications sent for messages matching a
            filter. If this is empty, all messages are matched. The following
            syntax is available: * A string field value can be written as text
            inside quotation marks, for example `"query text"`. The only valid
            relational operation for text fields is equality (`=`), where text
            is searched within the field, rather than having the field be equal
            to the text. For example, `"Comment = great"` returns messages with
            `great` in the comment field. * A number field value can be written
            as an integer, a decimal, or an exponential. The valid relational
            operators for number fields are the equality operator (`=`), along
            with the less than/greater than operators (`<`, `<=`, `>`, `>=`).
            Note that there is no inequality (`!=`) operator. You can prepend
            the `NOT` operator to an expression to negate it. * A date field
            value must be written in `yyyy-mm-dd` form. Fields with date and
            time use the RFC3339 time format. Leading zeros are required for
            one-digit months and days. The valid relational operators for date
            fields are the equality operator (`=`) , along with the less
            than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there
            is no inequality (`!=`) operator. You can prepend the `NOT` operator
            to an expression to negate it. * Multiple field query expressions
            can be combined in one query by adding `AND` or `OR` operators
            between the expressions. If a boolean operator appears within a
            quoted string, it is not treated as special, it's just another part
            of the character string to be matched. You can prepend the `NOT`
            operator to an expression to negate it. The following fields and
            functions are available for filtering: * `message_type`, from the
            MSH-9.1 field. For example, `NOT message_type = "ADT"`. *
            `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent
            in the dataset's time_zone, from the MSH-7 segment. For example,
            `send_date < "2017-01-02"`. * `send_time`, the timestamp when the
            message was sent, using the RFC3339 time format for comparisons,
            from the MSH-7 segment. For example, `send_time <
            "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when
            the message was created in the HL7v2 store. Use the RFC3339 time
            format for comparisons. For example, `create_time <
            "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center
            that the message came from, from the MSH-4 segment. For example,
            `send_facility = "ABC"`. * `PatientId(value, type)`, which matches
            if the message lists a patient having an ID of the given value and
            type in the PID-2, PID-3, or PID-4 segments. For example,
            `PatientId("123456", "MRN")`. * `labels.x`, a string value of the
            label with key `x` as set using the Message.labels map. For example,
            `labels."priority"="high"`. The operator `:*` can be used to assert
            the existence of a label. For example, `labels."priority":*`.
          type: string
    ListHl7V2StoresResponse:
      id: ListHl7V2StoresResponse
      description: Lists the HL7v2 stores in the given dataset.
      type: object
      properties:
        hl7V2Stores:
          description: >-
            The returned HL7v2 stores. Won't be more HL7v2 stores than the value
            of page_size in the request.
          type: array
          items:
            $ref: '#/components/schemas/Hl7V2Store'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    IngestMessageRequest:
      id: IngestMessageRequest
      description: Ingests a message into the specified HL7v2 store.
      type: object
      properties:
        message:
          description: Required. HL7v2 message to ingest.
          $ref: '#/components/schemas/Message'
    Message:
      id: Message
      description: >-
        A complete HL7v2 message. See [Introduction to HL7 Standards]
        (https://www.hl7.org/implement/standards/index.cfm?ref=common) for
        details on the standard.
      type: object
      properties:
        name:
          description: >-
            Output only. Resource name of the Message, of the form
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
          readOnly: true
          type: string
        data:
          description: Required. Raw message bytes.
          type: string
          format: byte
        createTime:
          description: >-
            Output only. The datetime when the message was created. Set by the
            server.
          readOnly: true
          type: string
          format: google-datetime
        sendFacility:
          description: Output only. The hospital that this message came from. MSH-4.
          readOnly: true
          type: string
        sendTime:
          description: >-
            Output only. The datetime the sending application sent this message.
            MSH-7.
          readOnly: true
          type: string
          format: google-datetime
        messageType:
          description: Output only. The message type for this message. MSH-9.1.
          readOnly: true
          type: string
        patientIds:
          description: >-
            Output only. All patient IDs listed in the PID-2, PID-3, and PID-4
            segments of this message.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/PatientId'
        labels:
          description: >-
            User-supplied key-value pairs used to organize HL7v2 stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
          additionalProperties:
            type: string
        parsedData:
          description: Output only. The parsed version of the raw message data.
          readOnly: true
          $ref: '#/components/schemas/ParsedData'
        schematizedData:
          description: >-
            Output only. The parsed version of the raw message data schematized
            according to this store's schemas and type definitions.
          readOnly: true
          $ref: '#/components/schemas/SchematizedData'
    PatientId:
      id: PatientId
      description: A patient identifier and associated type.
      type: object
      properties:
        value:
          description: The patient's unique identifier.
          type: string
        type:
          description: ID type. For example, MRN or NHS.
          type: string
    ParsedData:
      id: ParsedData
      description: The content of a HL7v2 message in a structured format.
      type: object
      properties:
        segments:
          type: array
          items:
            $ref: '#/components/schemas/Segment'
    Segment:
      id: Segment
      description: A segment in a structured format.
      type: object
      properties:
        segmentId:
          description: >-
            A string that indicates the type of segment. For example, EVN or
            PID.
          type: string
        setId:
          description: >-
            Set ID for segments that can be in a set. This can be empty if it's
            missing or isn't applicable.
          type: string
        fields:
          description: >-
            A mapping from the positional location to the value. The key string
            uses zero-based indexes separated by dots to identify Fields,
            components and sub-components. A bracket notation is also used to
            identify different instances of a repeated field. Regex for key:
            (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: *
            (0.1, "hemoglobin") denotes that the first component of Field 0 has
            the value "hemoglobin". * (1.1.2, "CBC") denotes that the second
            sub-component of the first component of Field 1 has the value "CBC".
            * (1[0].1, "HbA1c") denotes that the first component of the first
            Instance of Field 1, which is repeated, has the value "HbA1c".
          type: object
          additionalProperties:
            type: string
    SchematizedData:
      id: SchematizedData
      description: >-
        The content of an HL7v2 message in a structured format as specified by a
        schema.
      type: object
      properties:
        data:
          description: JSON output of the parser.
          type: string
        error:
          description: The error output of the parser.
          type: string
    IngestMessageResponse:
      id: IngestMessageResponse
      description: >-
        Acknowledges that a message has been ingested into the specified HL7v2
        store.
      type: object
      properties:
        hl7Ack:
          description: HL7v2 ACK message.
          type: string
          format: byte
        message:
          description: Created message resource.
          $ref: '#/components/schemas/Message'
    CreateMessageRequest:
      id: CreateMessageRequest
      description: Creates a new message.
      type: object
      properties:
        message:
          description: Required. HL7v2 message.
          $ref: '#/components/schemas/Message'
    ListMessagesResponse:
      id: ListMessagesResponse
      description: Lists the messages in the specified HL7v2 store.
      type: object
      properties:
        hl7V2Messages:
          description: >-
            The returned Messages. Won't be more Messages than the value of
            page_size in the request. See view for populated fields.
          type: array
          items:
            $ref: '#/components/schemas/Message'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    ExportMessagesRequest:
      id: ExportMessagesRequest
      description: Request to schedule an export.
      type: object
      properties:
        startTime:
          description: >-
            The start of the range in `send_time` (MSH.7,
            https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm)
            to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z)
            is used. This value has to come before the `end_time` defined below.
            Only messages whose `send_time` lies in the range `start_time`
            (inclusive) to `end_time` (exclusive) are exported.
          type: string
          format: google-datetime
        endTime:
          description: >-
            The end of the range in `send_time` (MSH.7,
            https://www.hl7.org/documentcenter/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D/wg/conf/HL7MSH.htm)
            to process. If not specified, the time when the export is scheduled
            is used. This value has to come after the `start_time` defined
            below. Only messages whose `send_time` lies in the range
            `start_time` (inclusive) to `end_time` (exclusive) are exported.
          type: string
          format: google-datetime
        filter:
          description: >-
            Restricts messages exported to those matching a filter, only
            applicable to PubsubDestination and GcsDestination. The following
            syntax is available: * A string field value can be written as text
            inside quotation marks, for example `"query text"`. The only valid
            relational operation for text fields is equality (`=`), where text
            is searched within the field, rather than having the field be equal
            to the text. For example, `"Comment = great"` returns messages with
            `great` in the comment field. * A number field value can be written
            as an integer, a decimal, or an exponential. The valid relational
            operators for number fields are the equality operator (`=`), along
            with the less than/greater than operators (`<`, `<=`, `>`, `>=`).
            Note that there is no inequality (`!=`) operator. You can prepend
            the `NOT` operator to an expression to negate it. * A date field
            value must be written in the `yyyy-mm-dd` format. Fields with date
            and time use the RFC3339 time format. Leading zeros are required for
            one-digit months and days. The valid relational operators for date
            fields are the equality operator (`=`) , along with the less
            than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there
            is no inequality (`!=`) operator. You can prepend the `NOT` operator
            to an expression to negate it. * Multiple field query expressions
            can be combined in one query by adding `AND` or `OR` operators
            between the expressions. If a boolean operator appears within a
            quoted string, it is not treated as special, and is just another
            part of the character string to be matched. You can prepend the
            `NOT` operator to an expression to negate it. The following fields
            and functions are available for filtering: * `message_type`, from
            the MSH-9.1 field. For example, `NOT message_type = "ADT"`. *
            `send_date` or `sendDate`, the `yyyy-mm-dd` date the message was
            sent in the dataset's time_zone, from the MSH-7 segment. For
            example, `send_date < "2017-01-02"`. * `send_time`, the timestamp
            when the message was sent, using the RFC3339 time format for
            comparisons, from the MSH-7 segment. For example, `send_time <
            "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when
            the message was created in the HL7v2 store. Use the RFC3339 time
            format for comparisons. For example, `create_time <
            "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center
            that the message came from, from the MSH-4 segment. For example,
            `send_facility = "ABC"`. Note: The filter will be applied to every
            message in the HL7v2 store whose `send_time` lies in the range
            defined by the `start_time` and the `end_time`. Even if the filter
            only matches a small set of messages, the export operation can still
            take a long time to finish when a lot of messages are between the
            specified `start_time` and `end_time` range.
          type: string
        gcsDestination:
          description: Export to a Cloud Storage destination.
          $ref: '#/components/schemas/GcsDestination'
        pubsubDestination:
          description: Export messages to a Pub/Sub topic.
          $ref: '#/components/schemas/PubsubDestination'
    GcsDestination:
      id: GcsDestination
      description: >-
        The Cloud Storage output destination. The Cloud Healthcare Service Agent
        requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud
        Storage location.
      type: object
      properties:
        uriPrefix:
          description: >-
            URI of an existing Cloud Storage directory where the server writes
            result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`. If there is no
            trailing slash, the service appends one when composing the object
            path.
          type: string
        messageView:
          description: >-
            Specifies the parts of the Message resource to include in the
            export. If not specified, FULL is used.
          type: string
          enumDescriptions:
            - Not specified, equivalent to FULL.
            - >-
              Server responses include all the message fields except parsed_data
              field, and schematized_data fields.
            - >-
              Server responses include all the message fields except data field,
              and schematized_data fields.
            - Server responses include all the message fields.
            - >-
              Server responses include all the message fields except data and
              parsed_data fields.
            - Server responses include only the name field.
          enum:
            - MESSAGE_VIEW_UNSPECIFIED
            - RAW_ONLY
            - PARSED_ONLY
            - FULL
            - SCHEMATIZED_ONLY
            - BASIC
        contentStructure:
          description: The format of the exported HL7v2 message files.
          type: string
          enumDescriptions:
            - >-
              If the content structure is not specified, the default value
              `MESSAGE_JSON` will be used.
            - >-
              Messages are printed using the JSON format returned from the
              `GetMessage` API. Messages are delimited with newlines.
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - MESSAGE_JSON
    PubsubDestination:
      id: PubsubDestination
      description: >-
        The Pub/Sub output destination. The Cloud Healthcare Service Agent
        requires the `roles/pubsub.publisher` Cloud IAM role on the Pub/Sub
        topic.
      type: object
      properties:
        pubsubTopic:
          description: >-
            The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that
            Pub/Sub messages are published on. Supplied by the client. The
            `PubsubMessage` contains the following fields: *
            `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It is
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. The Cloud Healthcare API service account,
            service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com,
            must have publisher permissions on the given Pub/Sub topic. Not
            having adequate permissions causes the calls that send notifications
            to fail.
          type: string
    ImportMessagesRequest:
      id: ImportMessagesRequest
      description: Request to import messages.
      type: object
      properties:
        gcsSource:
          description: >-
            Cloud Storage source data location and import configuration. The
            Cloud Healthcare Service Agent requires the
            `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage
            location.
          $ref: '#/components/schemas/GcsSource'
    GcsSource:
      id: GcsSource
      description: Specifies the configuration for importing data from Cloud Storage.
      type: object
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) to import. The URI
            must be in the following format: `gs://{bucket_id}/{object_id}`. The
            URI can include wildcards in `object_id` and thus identify multiple
            files. Supported wildcards: * `*` to match 0 or more non-separator
            characters * `**` to match 0 or more characters (including
            separators). Must be used at the end of a path and with no other
            wildcards in the path. Can also be used with a file extension (such
            as .ndjson), which imports all files with the extension in the
            specified directory and its sub-directories. For example,
            `gs://my-bucket/my-directory/**.ndjson` imports all files with
            `.ndjson` extensions in `my-directory/` and its sub-directories. *
            `?` to match 1 character Files matching the wildcard are expected to
            contain content only, no metadata.
          type: string
    Hl7V2StoreMetrics:
      id: Hl7V2StoreMetrics
      description: List of metrics for a given HL7v2 store.
      type: object
      properties:
        name:
          description: >-
            The resource name of the HL7v2 store to get metrics for, in the
            format
            `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
          type: string
        metrics:
          description: List of HL7v2 store metrics by message type.
          type: array
          items:
            $ref: '#/components/schemas/Hl7V2StoreMetric'
    Hl7V2StoreMetric:
      id: Hl7V2StoreMetric
      description: Count of messages and total storage size by type for a given HL7 store.
      type: object
      properties:
        messageType:
          description: >-
            The Hl7v2 message type this metric applies to, such as `ADT` or
            `ORU`.
          type: string
        count:
          description: >-
            The total count of HL7v2 messages in the store for the given message
            type.
          type: string
          format: int64
        structuredStorageSizeBytes:
          description: >-
            The total amount of structured storage used by HL7v2 messages of
            this message type in the store.
          type: string
          format: int64
    RollbackHl7V2MessagesRequest:
      id: RollbackHl7V2MessagesRequest
      description: Point in time recovery rollback request.
      type: object
      properties:
        rollbackTime:
          description: Required. Times point to rollback to.
          type: string
          format: google-datetime
        force:
          description: >-
            Optional. When enabled, changes will be reverted without explicit
            confirmation.
          type: boolean
        changeType:
          description: >-
            Optional. CREATE/UPDATE/DELETE/ALL for reverting all txns of a
            certain type.
          type: string
          enumDescriptions:
            - When unspecified, revert all transactions
            - All transactions
            - Revert only CREATE transactions
            - Revert only Update transactions
            - Revert only Delete transactions
          enum:
            - CHANGE_TYPE_UNSPECIFIED
            - ALL
            - CREATE
            - UPDATE
            - DELETE
        resultGcsBucket:
          description: Required. Bucket to deposit result
          type: string
        inputGcsObject:
          description: >-
            Optional. Cloud storage object containing list of {resourceId}
            lines, identifying resources to be reverted
          type: string
        excludeRollbacks:
          description: Optional. Specifies whether to exclude earlier rollbacks.
          type: boolean
        filteringFields:
          description: Optional. Parameters for filtering.
          $ref: '#/components/schemas/RollbackHL7MessagesFilteringFields'
    RollbackHL7MessagesFilteringFields:
      id: RollbackHL7MessagesFilteringFields
      description: >-
        Filtering fields for an HL7v2 rollback. Currently only supports a list
        of operation ids to roll back.
      type: object
      properties:
        operationIds:
          description: Optional. A list of operation IDs to roll back.
          type: array
          items:
            type: string
            format: uint64
    SearchResourcesRequest:
      id: SearchResourcesRequest
      description: Request to search the resources in the specified FHIR store.
      type: object
      properties:
        resourceType:
          description: >-
            Optional. The FHIR resource type to search, such as Patient or
            Observation. For a complete list, see the FHIR Resource Index
            ([DSTU2](https://hl7.org/fhir/DSTU2/resourcelist.html),
            [STU3](https://hl7.org/fhir/STU3/resourcelist.html),
            [R4](https://hl7.org/fhir/R4/resourcelist.html)),
            [R5](https://hl7.org/fhir/R5/resourcelist.html)).
          type: string
    FhirStore:
      id: FhirStore
      description: Represents a FHIR store.
      type: object
      properties:
        name:
          description: >-
            Output only. Identifier. Resource name of the FHIR store, of the
            form
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
          type: string
        enableUpdateCreate:
          description: >-
            Optional. Whether this FHIR store has the [updateCreate
            capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate).
            This determines if the client can use an Update operation to create
            a new resource with a client-specified ID. If false, all IDs are
            server-assigned through the Create operation and attempts to update
            a non-existent resource return errors. It is strongly advised not to
            include or encode any sensitive data such as patient identifiers in
            client-specified resource IDs. Those IDs are part of the FHIR
            resource path recorded in Cloud audit logs and Pub/Sub
            notifications. Those IDs can also be contained in reference fields
            within other resources. Defaults to false.
          type: boolean
        notificationConfig:
          description: >-
            Deprecated. Use `notification_configs` instead. If non-empty,
            publish all resource modifications of this FHIR store to this
            destination. The Pub/Sub message attributes contain a map with a
            string describing the action that has triggered the notification.
            For example, "action":"CreateResource". Not supported in R5. Use
            `notification_configs` instead.
          deprecated: true
          $ref: '#/components/schemas/NotificationConfig'
        disableReferentialIntegrity:
          description: >-
            Immutable. Whether to disable referential integrity in this FHIR
            store. This field is immutable after FHIR store creation. The
            default value is false, meaning that the API enforces referential
            integrity and fails the requests that result in inconsistent state
            in the FHIR store. When this field is set to true, the API skips
            referential integrity checks. Consequently, operations that rely on
            references, such as GetPatientEverything, do not return all the
            results if broken references exist.
          type: boolean
        disableResourceVersioning:
          description: >-
            Immutable. Whether to disable resource versioning for this FHIR
            store. This field can not be changed after the creation of FHIR
            store. If set to false, all write operations cause historical
            versions to be recorded automatically. The historical versions can
            be fetched through the history APIs, but cannot be updated. If set
            to true, no historical versions are kept. The server sends errors
            for attempts to read the historical versions. Defaults to false.
          type: boolean
        labels:
          description: >-
            User-supplied key-value pairs used to organize FHIR stores. Label
            keys must be between 1 and 63 characters long, have a UTF-8 encoding
            of maximum 128 bytes, and must conform to the following PCRE regular
            expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be
            between 1 and 63 characters long, have a UTF-8 encoding of maximum
            128 bytes, and must conform to the following PCRE regular
            expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can
            be associated with a given store.
          type: object
          additionalProperties:
            type: string
        version:
          description: >-
            Required. Immutable. The FHIR specification version that this FHIR
            store supports natively. This field is immutable after store
            creation. Requests are rejected if they contain FHIR resources of a
            different version. Version is required for every FHIR store.
          type: string
          enumDescriptions:
            - >-
              Users must specify a version on store creation or an error is
              returned.
            - >-
              Draft Standard for Trial Use, [Release
              2](https://www.hl7.org/fhir/DSTU2)
            - Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)
            - '[Release 4](https://www.hl7.org/fhir/R4)'
            - '[Release 5](https://www.hl7.org/fhir/R5)'
          enum:
            - VERSION_UNSPECIFIED
            - DSTU2
            - STU3
            - R4
            - R5
        streamConfigs:
          description: >-
            Optional. A list of streaming configs that configure the
            destinations of streaming export for every resource mutation in this
            FHIR store. Each store is allowed to have up to 10 streaming
            configs. After a new config is added, the next resource mutation is
            streamed to the new location in addition to the existing ones. When
            a location is removed from the list, the server stops streaming to
            that location. Before adding a new config, you must add the required
            [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor)
            role to your project's **Cloud Healthcare Service Agent** [service
            account](https://cloud.google.com/iam/docs/service-accounts). Some
            lag (typically on the order of dozens of seconds) is expected before
            the results show up in the streaming destination.
          type: array
          items:
            $ref: '#/components/schemas/StreamConfig'
        validationConfig:
          description: >-
            Optional. Configuration for how to validate incoming FHIR resources
            against configured profiles.
          $ref: '#/components/schemas/ValidationConfig'
        defaultSearchHandlingStrict:
          description: >-
            Optional. If true, overrides the default search behavior for this
            FHIR store to `handling=strict` which returns an error for
            unrecognized search parameters. If false, uses the FHIR
            specification default `handling=lenient` which ignores unrecognized
            search parameters. The handling can always be changed from the
            default on an individual API call by setting the HTTP header
            `Prefer: handling=strict` or `Prefer: handling=lenient`. Defaults to
            false.
          type: boolean
        complexDataTypeReferenceParsing:
          description: >-
            Optional. Enable parsing of references within complex FHIR data
            types such as Extensions. If this value is set to ENABLED, then
            features like referential integrity and Bundle reference rewriting
            apply to all references. If this flag has not been specified the
            behavior of the FHIR store will not change, references in complex
            data types will not be parsed. New stores will have this value set
            to ENABLED after a notification period. Warning: turning on this
            flag causes processing existing resources to fail if they contain
            references to non-existent resources. Cannot be disabled in R5.
          type: string
          enumDescriptions:
            - >-
              No parsing behavior specified. This is the same as DISABLED for
              backwards compatibility.
            - References in complex data types are ignored.
            - References in complex data types are parsed.
          enum:
            - COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED
            - DISABLED
            - ENABLED
        notificationConfigs:
          description: >-
            Optional. Specifies where and whether to send notifications upon
            changes to a FHIR store.
          type: array
          items:
            $ref: '#/components/schemas/FhirNotificationConfig'
        bulkExportGcsDestination:
          description: >-
            Optional. FHIR bulk export exports resources to the specified Cloud
            Storage destination. A Cloud Storage destination is a URI for a
            Cloud Storage directory where result files will be written. Only
            used in the spec-defined bulk $export methods. The Cloud Healthcare
            Service Agent requires the `roles/storage.objectAdmin` Cloud IAM
            role on the destination.
          $ref: '#/components/schemas/BulkExportGcsDestination'
        consentConfig:
          description: >-
            Optional. Specifies whether this store has consent enforcement. Not
            available for DSTU2 FHIR version due to absence of Consent
            resources. Not supported for R5 FHIR version.
          $ref: '#/components/schemas/ConsentConfig'
    StreamConfig:
      id: StreamConfig
      description: Contains configuration for streaming FHIR export.
      type: object
      properties:
        resourceTypes:
          description: >-
            Optional. Supply a FHIR resource type (such as "Patient" or
            "Observation"). See
            https://www.hl7.org/fhir/valueset-resource-types.html for a list of
            all FHIR resource types. The server treats an empty list as an
            intent to stream all the supported resource types in this FHIR
            store.
          type: array
          items:
            type: string
        bigqueryDestination:
          description: >-
            Optional. The destination BigQuery structure that contains both the
            dataset location and corresponding schema config. The output is
            organized in one table per resource type. The server reuses the
            existing tables (if any) that are named after the resource types.
            For example, "Patient", "Observation". When there is no existing
            table for a given resource type, the server attempts to create one.
            When a table schema doesn't align with the schema config, either
            because of existing incompatible schema or out of band incompatible
            modification, the server does not stream in new data. BigQuery
            imposes a 1 MB limit on streaming insert row size, therefore any
            resource mutation that generates more than 1 MB of BigQuery data is
            not streamed. One resolution in this case is to delete the
            incompatible table and let the server recreate one, though the newly
            created table only contains data after the table recreation. Results
            are written to BigQuery tables according to the parameters in
            BigQueryDestination.WriteDisposition. Different versions of the same
            resource are distinguishable by the meta.versionId and
            meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that
            results in the new version is recorded in the meta.tag. The tables
            contain all historical resource versions since streaming was
            enabled. For query convenience, the server also creates one view per
            table of the same name containing only the current resource version.
            The streamed data in the BigQuery dataset is not guaranteed to be
            completely unique. The combination of the id and meta.versionId
            columns should ideally identify a single unique row. But in rare
            cases, duplicates may exist. At query time, users may use the SQL
            select statement to keep only one of the duplicate rows given an id
            and meta.versionId pair. Alternatively, the server created view
            mentioned above also filters out duplicates. If a resource mutation
            cannot be streamed to BigQuery, errors are logged to Cloud Logging.
            For more information, see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirBigQueryDestination'
        deidentifiedStoreDestination:
          description: >-
            The destination FHIR store for de-identified resources. After this
            field is added, all subsequent creates/updates/patches to the source
            store will be de-identified using the provided configuration and
            applied to the destination store. Resources deleted from the source
            store will be deleted from the destination store. Importing
            resources to the source store will not trigger the streaming. If the
            source store already contains resources when this option is enabled,
            those resources will not be copied to the destination store unless
            they are subsequently updated. This may result in invalid references
            in the destination store. Before adding this config, you must grant
            the healthcare.fhirResources.update permission on the destination
            store to your project's **Cloud Healthcare Service Agent** [service
            account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent).
            The destination store must set enable_update_create to true. The
            destination store must have disable_referential_integrity set to
            true. If a resource cannot be de-identified, errors will be logged
            to Cloud Logging (see [Viewing error logs in Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
            Not supported for R5 stores.
          $ref: '#/components/schemas/DeidentifiedStoreDestination'
    GoogleCloudHealthcareV1FhirBigQueryDestination:
      id: GoogleCloudHealthcareV1FhirBigQueryDestination
      description: The configuration for exporting to BigQuery.
      type: object
      properties:
        datasetUri:
          description: >-
            Optional. BigQuery URI to an existing dataset, up to 2000 characters
            long, in the format `bq://projectId.bqDatasetId`.
          type: string
        schemaConfig:
          description: Optional. The configuration for the exported BigQuery schema.
          $ref: '#/components/schemas/SchemaConfig'
        force:
          description: >-
            Optional. The default value is false. If this flag is `TRUE`, all
            tables are deleted from the dataset before the new exported tables
            are written. If the flag is not set and the destination dataset
            contains tables, the export call returns an error. If
            `write_disposition` is specified, this parameter is ignored.
            force=false is equivalent to write_disposition=WRITE_EMPTY and
            force=true is equivalent to write_disposition=WRITE_TRUNCATE.
          type: boolean
        writeDisposition:
          description: >-
            Optional. Determines if existing data in the destination dataset is
            overwritten, appended to, or not written if the tables contain data.
            If a write_disposition is specified, the `force` parameter is
            ignored.
          type: string
          enumDescriptions:
            - Default behavior is the same as WRITE_EMPTY.
            - Only export data if the destination tables are empty.
            - >-
              Erase all existing data in the destination tables before writing
              the FHIR resources.
            - Append data to the destination tables.
          enum:
            - WRITE_DISPOSITION_UNSPECIFIED
            - WRITE_EMPTY
            - WRITE_TRUNCATE
            - WRITE_APPEND
    SchemaConfig:
      id: SchemaConfig
      description: >-
        Configuration for the FHIR BigQuery schema. Determines how the server
        generates the schema.
      type: object
      properties:
        schemaType:
          description: Specifies the output schema type. Schema type is required.
          type: string
          enumDescriptions:
            - No schema type specified. This type is unsupported.
            - >-
              Analytics schema defined by the FHIR community. See
              https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
              BigQuery only allows a maximum of 10,000 columns per table. Due to
              this limitation, the server will not generate schemas for fields
              of type `Resource`, which can hold any resource type. The affected
              fields are `Parameters.parameter.resource`,
              `Bundle.entry.resource`, and `Bundle.entry.response.outcome`.
              Analytics schema does not gracefully handle extensions with one or
              more occurrences, anaytics schema also does not handle contained
              resource. Additionally, extensions with a URL ending in
              "/{existing_resource_field_name}" may cause undefined behavior.
            - >-
              Analytics V2, similar to schema defined by the FHIR community,
              with added support for extensions with one or more occurrences and
              contained resources in stringified JSON. Extensions with a URL
              ending in "/{existing_resource_field_name}" will cause conflict
              and prevent the resource from being sent to BigQuery. Analytics V2
              uses more space in the destination table than Analytics V1. It is
              generally recommended to use Analytics V2 over Analytics.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - ANALYTICS
            - ANALYTICS_V2
        recursiveStructureDepth:
          description: >-
            The depth for all recursive structures in the output analytics
            schema. For example, `concept` in the CodeSystem resource is a
            recursive structure; when the depth is 2, the CodeSystem table will
            have a column called `concept.concept` but not
            `concept.concept.concept`. If not specified or set to 0, the server
            will use the default value 2. The maximum depth allowed is 5.
          type: string
          format: int64
        lastUpdatedPartitionConfig:
          description: >-
            The configuration for exported BigQuery tables to be partitioned by
            FHIR resource's last updated time column.
          $ref: '#/components/schemas/TimePartitioning'
    TimePartitioning:
      id: TimePartitioning
      description: Configuration for FHIR BigQuery time-partitioned tables.
      type: object
      properties:
        type:
          description: Type of partitioning.
          type: string
          enumDescriptions:
            - Default unknown time.
            - Data partitioned by hour.
            - Data partitioned by day.
            - Data partitioned by month.
            - Data partitioned by year.
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - HOUR
            - DAY
            - MONTH
            - YEAR
        expirationMs:
          description: >-
            Number of milliseconds for which to keep the storage for a
            partition.
          type: string
          format: int64
    DeidentifiedStoreDestination:
      id: DeidentifiedStoreDestination
      description: Contains configuration for streaming de-identified FHIR export.
      type: object
      properties:
        store:
          description: >-
            Optional. The full resource name of a Cloud Healthcare FHIR store,
            for example,
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
          type: string
        config:
          description: >-
            Optional. The configuration to use when de-identifying resources
            that are added to this store.
          $ref: '#/components/schemas/DeidentifyConfig'
    ValidationConfig:
      id: ValidationConfig
      description: Contains the configuration for FHIR profiles and validation.
      type: object
      properties:
        disableProfileValidation:
          description: >-
            Optional. Whether to disable profile validation for this FHIR store.
            The default value is false. Set this to true to disable checking
            incoming resources for conformance against structure definitions in
            this FHIR store.
          type: boolean
        enabledImplementationGuides:
          description: >-
            Optional. A list of implementation guide URLs in this FHIR store
            that are used to configure the profiles to use for validation. For
            example, to use the US Core profiles for validation, set
            `enabled_implementation_guides` to
            `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If
            `enabled_implementation_guides` is empty or omitted, then incoming
            resources are only required to conform to the base FHIR profiles.
            Otherwise, a resource must conform to at least one profile listed in
            the `global` property of one of the enabled ImplementationGuides.
            The Cloud Healthcare API does not currently enforce all of the rules
            in a StructureDefinition. The following rules are supported: -
            min/max - minValue/maxValue - maxLength - type - fixed[x] -
            pattern[x] on simple types - slicing, when using "value" as the
            discriminator type When a URL cannot be resolved (for example, in a
            type assertion), the server does not return an error.
          type: array
          items:
            type: string
        disableRequiredFieldValidation:
          description: >-
            Optional. Whether to disable required fields validation for incoming
            resources. The default value is false. Set this to true to disable
            checking incoming resources for conformance against required fields
            requirement defined in the FHIR specification. This property only
            affects resource types that do not have profiles configured for
            them, any rules in enabled implementation guides will still be
            enforced.
          type: boolean
        disableReferenceTypeValidation:
          description: >-
            Optional. Whether to disable reference type validation for incoming
            resources. The default value is false. Set this to true to disable
            checking incoming resources for conformance against reference type
            requirement defined in the FHIR specification. This property only
            affects resource types that do not have profiles configured for
            them, any rules in enabled implementation guides will still be
            enforced.
          type: boolean
        disableFhirpathValidation:
          description: >-
            Optional. Whether to disable FHIRPath validation for incoming
            resources. The default value is false. Set this to true to disable
            checking incoming resources for conformance against FHIRPath
            requirement defined in the FHIR specification. This property only
            affects resource types that do not have profiles configured for
            them, any rules in enabled implementation guides will still be
            enforced.
          type: boolean
    FhirNotificationConfig:
      id: FhirNotificationConfig
      description: Contains the configuration for FHIR notifications.
      type: object
      properties:
        pubsubTopic:
          description: >-
            Optional. The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic
            that notifications of changes are published on. Supplied by the
            client. The notification is a `PubsubMessage` with the following
            fields: * `PubsubMessage.Data` contains the resource name. *
            `PubsubMessage.MessageId` is the ID of this notification. It is
            guaranteed to be unique within the topic. *
            `PubsubMessage.PublishTime` is the time when the message was
            published. Note that notifications are only sent if the topic is
            non-empty. [Topic
            names](https://cloud.google.com/pubsub/docs/overview#names) must be
            scoped to a project. The Cloud Healthcare API service account,
            service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have
            publisher permissions on the given Pub/Sub topic. Not having
            adequate permissions causes the calls that send notifications to
            fail
            (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions).
            If a notification can't be published to Pub/Sub, errors are logged
            to Cloud Logging. For more information, see [Viewing error logs in
            Cloud
            Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
          type: string
        sendFullResource:
          description: >-
            Optional. Whether to send full FHIR resource to this Pub/Sub topic.
            The default value is false.
          type: boolean
        sendPreviousResourceOnDelete:
          description: >-
            Optional. Whether to send full FHIR resource to this Pub/Sub topic
            for deleting FHIR resource. The default value is false. Note that
            setting this to true does not guarantee that all previous resources
            will be sent in the format of full FHIR resource. When a resource
            change is too large or during heavy traffic, only the resource name
            will be sent. Clients should always check the "payloadType" label
            from a Pub/Sub message to determine whether it needs to fetch the
            full previous resource as a separate operation.
          type: boolean
    BulkExportGcsDestination:
      id: BulkExportGcsDestination
      description: >-
        The configuration for exporting to Cloud Storage using the bulk export
        API.
      type: object
      properties:
        uriPrefix:
          description: >-
            Optional. URI for a Cloud Storage directory where the server writes
            result files, in the format
            `gs://{bucket-id}/{path/to/destination/dir}`. If there is no
            trailing slash, the service appends one when composing the object
            path. The user is responsible for creating the Cloud Storage bucket
            referenced in `uri_prefix`.
          type: string
    ConsentConfig:
      id: ConsentConfig
      description: >-
        Configures whether to enforce consent for the FHIR store and which
        consent enforcement version is being used.
      type: object
      properties:
        version:
          description: >-
            Required. Specifies which consent enforcement version is being used
            for this FHIR store. This field can only be set once by either
            CreateFhirStore or UpdateFhirStore. After that, you must call
            ApplyConsents to change the version.
          type: string
          enumDescriptions:
            - Users must specify an enforcement version or an error is returned.
            - >-
              Enforcement version 1. See the [FHIR Consent resources in the
              Cloud Healthcare
              API](https://cloud.google.com/healthcare-api/docs/fhir-consent)
              guide for more details.
          enum:
            - CONSENT_ENFORCEMENT_VERSION_UNSPECIFIED
            - V1
        accessEnforced:
          description: >-
            Optional. The default value is false. If set to true, when accessing
            FHIR resources, the consent headers will be verified against
            consents given by patients. See the ConsentEnforcementVersion for
            the supported consent headers.
          type: boolean
        consentHeaderHandling:
          description: >-
            Optional. Different options to configure the behaviour of the server
            when handling the `X-Consent-Scope` header.
          $ref: '#/components/schemas/ConsentHeaderHandling'
        accessDeterminationLogConfig:
          description: >-
            Optional. Specifies how the server logs the consent-aware requests.
            If not specified, the
            `AccessDeterminationLogConfig.LogLevel.MINIMUM` option is used.
          $ref: '#/components/schemas/AccessDeterminationLogConfig'
        enforcedAdminConsents:
          description: >-
            Output only. The versioned names of the enforced admin Consent
            resource(s), in the format
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}/_history/{version_id}`.
            For FHIR stores with `disable_resource_versioning=true`, the format
            is
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
            This field can only be updated using ApplyAdminConsents.
          readOnly: true
          type: array
          items:
            type: string
    ConsentHeaderHandling:
      id: ConsentHeaderHandling
      description: How the server handles the consent header.
      type: object
      properties:
        profile:
          description: >-
            Optional. Specifies the default server behavior when the header is
            empty. If not specified, the `ScopeProfile.PERMIT_EMPTY_SCOPE`
            option is used.
          type: string
          enumDescriptions:
            - If not specified, the default value `PERMIT_EMPTY_SCOPE` is used.
            - >-
              When no consent scopes are provided (for example, if there's an
              empty or missing header), then consent check is disabled, similar
              to when `access_enforced` is `false`. You can use audit logs to
              differentiate these two cases by looking at the value of
              `protopayload.metadata.consentMode`. If consents scopes are
              present, they must be valid and within the allowed limits,
              otherwise the request will be rejected with a `4xx` code.
            - >-
              The consent header must be non-empty when performing read and
              search operations, otherwise the request is rejected with a `4xx`
              code. Additionally, invalid consent scopes or scopes exceeding the
              allowed limits are rejected.
          enum:
            - SCOPE_PROFILE_UNSPECIFIED
            - PERMIT_EMPTY_SCOPE
            - REQUIRED_ON_READ
    AccessDeterminationLogConfig:
      id: AccessDeterminationLogConfig
      description: >-
        Configures consent audit log config for FHIR create, read, update, and
        delete (CRUD) operations. Cloud audit log for healthcare API must be
        [enabled](https://cloud.google.com/logging/docs/audit/configure-data-access#config-console-enable).
        The consent-related logs are included as part of
        `protoPayload.metadata`.
      type: object
      properties:
        logLevel:
          description: >-
            Optional. Controls the amount of detail to include as part of the
            audit logs.
          type: string
          enumDescriptions:
            - No log level specified. This value is unused.
            - No additional consent-related logging is added to audit logs.
            - >-
              The following information is included: * One of the following
              [`consentMode`](https://cloud.google.com/healthcare-api/docs/fhir-consent#audit_logs)
              fields: (`off`|`emptyScope`|`enforced`|`btg`|`bypass`). * The
              accessor's request headers * The `log_level` of the
              AccessDeterminationLogConfig * The final consent evaluation
              (`PERMIT`, `DENY`, or `NO_CONSENT`) * A human-readable summary of
              the evaluation
            - >-
              Includes `MINIMUM` and, for each resource owner, returns: * The
              resource owner's name * Most specific part of the
              `X-Consent-Scope` resulting in consensual determination *
              Timestamp of the applied enforcement leading to the decision *
              Enforcement version at the time the applicable consents were
              applied * The Consent resource name * The timestamp of the Consent
              resource used for enforcement * Policy type (`PATIENT` or `ADMIN`)
              Due to the limited space for logging, this mode is the same as
              `MINIMUM` for methods that return multiple resources (such as FHIR
              Search).
          enum:
            - LOG_LEVEL_UNSPECIFIED
            - DISABLED
            - MINIMUM
            - VERBOSE
    ListFhirStoresResponse:
      id: ListFhirStoresResponse
      description: Lists the FHIR stores in the given dataset.
      type: object
      properties:
        fhirStores:
          description: >-
            The returned FHIR stores. Won't be more FHIR stores than the value
            of page_size in the request.
          type: array
          items:
            $ref: '#/components/schemas/FhirStore'
        nextPageToken:
          description: >-
            Token to retrieve the next page of results or empty if there are no
            more results in the list.
          type: string
    ImportResourcesRequest:
      id: ImportResourcesRequest
      description: Request to import resources.
      type: object
      properties:
        contentStructure:
          description: >-
            The content structure in the source location. If not specified, the
            server treats the input source files as BUNDLE.
          type: string
          enumDescriptions:
            - >-
              If the content structure is not specified, the default value
              `BUNDLE` is used.
            - >-
              The source file contains one or more lines of newline-delimited
              JSON (ndjson). Each line is a bundle that contains one or more
              resources.
            - >-
              The source file contains one or more lines of newline-delimited
              JSON (ndjson). Each line is a single resource.
            - >-
              The entire file is one JSON bundle. The JSON can span multiple
              lines.
            - >-
              The entire file is one JSON resource. The JSON can span multiple
              lines.
          enum:
            - CONTENT_STRUCTURE_UNSPECIFIED
            - BUNDLE
            - RESOURCE
            - BUNDLE_PRETTY
            - RESOURCE_PRETTY
        gcsSource:
          description: >-
            Cloud Storage source data location and import configuration. The
            Healthcare Service Agent account requires the
            `roles/storage.objectAdmin` role on the Cloud Storage location. Each
            Cloud Storage object should be a text file that contains the format
            specified in ContentStructure.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirGcsSource'
    GoogleCloudHealthcareV1FhirGcsSource:
      id: GoogleCloudHealthcareV1FhirGcsSource
      description: Specifies the configuration for importing data from Cloud Storage.
      type: object
      properties:
        uri:
          description: >-
            Points to a Cloud Storage URI containing file(s) to import. The URI
            must be in the following format: `gs://{bucket_id}/{object_id}`. The
            URI can include wildcards in `object_id` and thus identify multiple
            files. Supported wildcards: * `*` to match 0 or more non-separator
            characters * `**` to match 0 or more characters (including
            separators). Must be used at the end of a path and with no other
            wildcards in the path. Can also be used with a file extension (such
            as .ndjson), which imports all files with the extension in the
            specified directory and its sub-directories. For example,
            `gs://my-bucket/my-directory/**.ndjson` imports all files with
            `.ndjson` extensions in `my-directory/` and its sub-directories. *
            `?` to match 1 character Files matching the wildcard are expected to
            contain content only, no metadata.
          type: string
    ApplyConsentsRequest:
      id: ApplyConsentsRequest
      description: Request to apply the Consent resources for the specified FHIR store.
      type: object
      properties:
        patientScope:
          description: Optional. Scope down to a list of patients.
          $ref: '#/components/schemas/PatientScope'
        timeRange:
          description: >-
            Optional. Scope down to patients whose most recent consent changes
            are in the time range. Can only be used with a versioning store
            (i.e. when disable_resource_versioning is set to false).
          $ref: '#/components/schemas/TimeRange'
        validateOnly:
          description: >-
            Optional. If true, the method only validates Consent resources to
            make sure they are supported. When the operation completes,
            ApplyConsentsResponse is returned where `consent_apply_success` and
            `consent_apply_failure` indicate supported and unsupported (or
            invalid) Consent resources, respectively. Otherwise, the method
            propagates the aggregate consensual information to the patient's
            resources. Upon success, `affected_resources` in the
            ApplyConsentsResponse indicates the number of resources that may
            have consensual access changed.
          type: boolean
    PatientScope:
      id: PatientScope
      description: Apply consents given by a list of patients.
      type: object
      properties:
        patientIds:
          description: >-
            Optional. The list of patient IDs whose Consent resources will be
            enforced. At most 10,000 patients can be specified. An empty list is
            equivalent to all patients (meaning the entire FHIR store).
          type: array
          items:
            type: string
    TimeRange:
      id: TimeRange
      description: >-
        Apply consents given by patients whose most recent consent changes are
        in the time range. Note that after identifying these patients, the
        server applies all Consent resources given by those patients, not just
        the Consent resources within the timestamp in the range.
      type: object
      properties:
        start:
          description: >-
            Optional. The earliest consent change time, in format
            YYYY-MM-DDThh:mm:ss.sss+zz:zz If not specified, the system uses the
            FHIR store creation time.
          type: string
        end:
          description: >-
            Optional. The latest consent change time, in format
            YYYY-MM-DDThh:mm:ss.sss+zz:zz If not specified, the system uses the
            time when ApplyConsents was called.
          type: string
    ApplyAdminConsentsRequest:
      id: ApplyAdminConsentsRequest
      description: >-
        Request to apply the admin Consent resources for the specified FHIR
        store.
      type: object
      properties:
        newConsentsList:
          description: >-
            A new list of admin Consent resources to be applied. Any existing
            enforced Consents, which are specified in
            `consent_config.enforced_admin_consents` of the FhirStore, that are
            not part of this list will be disabled. An empty list is equivalent
            to clearing or disabling all Consents enforced on the FHIR store.
            When a FHIR store has `disable_resource_versioning=true` and this
            list contains a Consent resource that exists in
            `consent_config.enforced_admin_consents`, the method enforces any
            updates to the existing resource since the last enforcement. If the
            existing resource hasn't been updated since the last enforcement,
            the resource is unaffected. After the method finishes, the resulting
            consent enforcement model is determined by the contents of the
            Consent resource(s) when the method was called: * When
            `disable_resource_versioning=true`, the result is identical to the
            current resource(s) in the FHIR store. * When
            `disable_resource_versioning=false`, the result is based on the
            historical version(s) of the Consent resource(s) at the point in
            time when the method was called. At most 200 Consents can be
            specified.
          $ref: '#/components/schemas/AdminConsents'
        validateOnly:
          description: >-
            Optional. If true, the method only validates Consent resources to
            make sure they are supported. Otherwise, the method applies the
            aggregate consent information to update the enforcement model and
            reindex the FHIR resources. If all Consent resources can be applied
            successfully, the ApplyAdminConsentsResponse is returned containing
            the following fields: * `consent_apply_success` to indicate the
            number of Consent resources applied. * `affected_resources` to
            indicate the number of resources that might have had their consent
            access changed. If, however, one or more Consent resources are
            unsupported or cannot be applied, the method fails and
            ApplyAdminConsentsErrorDetail is is returned with details about the
            unsupported Consent resources.
          type: boolean
    AdminConsents:
      id: AdminConsents
      description: List of admin Consent resources to be applied.
      type: object
      properties:
        names:
          description: >-
            Optional. The versioned names of the admin Consent resource(s), in
            the format
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}/_history/{version_id}`.
            For FHIR stores with `disable_resource_versioning=true`, the format
            is
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
          type: array
          items:
            type: string
    ExplainDataAccessResponse:
      id: ExplainDataAccessResponse
      description: >-
        List of consent scopes that are applicable to the explained access on a
        given resource.
      type: object
      properties:
        consentScopes:
          description: >-
            List of applicable consent scopes. Sorted in order of actor such
            that scopes belonging to the same actor will be adjacent to each
            other in the list.
          type: array
          items:
            $ref: '#/components/schemas/ExplainDataAccessConsentScope'
        warning:
          description: >-
            Warnings associated with this response. It inform user with exceeded
            scope limit errors.
          type: string
    ExplainDataAccessConsentScope:
      id: ExplainDataAccessConsentScope
      description: >-
        A single consent scope that provides info on who has access to the
        requested resource scope for a particular purpose and environment,
        enforced by which consent.
      type: object
      properties:
        decision:
          description: >-
            Whether the current consent scope is permitted or denied access on
            the requested resource.
          type: string
          enumDescriptions:
            - Unspecified consent decision type.
            - Consent permitted access.
            - Consent denied access.
          enum:
            - CONSENT_DECISION_TYPE_UNSPECIFIED
            - CONSENT_DECISION_TYPE_PERMIT
            - CONSENT_DECISION_TYPE_DENY
        enforcingConsents:
          description: >-
            Metadata of the consent resources that enforce the consent scope's
            access.
          type: array
          items:
            $ref: '#/components/schemas/ExplainDataAccessConsentInfo'
        exceptions:
          description: Other consent scopes that created exceptions within this scope.
          type: array
          items:
            $ref: '#/components/schemas/ExplainDataAccessConsentScope'
        accessorScope:
          description: >-
            The accessor scope that describes who can access, for what purpose,
            and in which environment.
          $ref: '#/components/schemas/ConsentAccessorScope'
    ExplainDataAccessConsentInfo:
      id: ExplainDataAccessConsentInfo
      description: The enforcing consent's metadata.
      type: object
      properties:
        consentResource:
          description: >-
            The resource name of this consent resource, in the format:
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
          type: string
        type:
          description: The policy type of consent resource (e.g. PATIENT, ADMIN).
          type: string
          enumDescriptions:
            - Unspecified policy type.
            - Consent represent a patient consent.
            - Consent represent an admin consent.
          enum:
            - CONSENT_POLICY_TYPE_UNSPECIFIED
            - CONSENT_POLICY_TYPE_PATIENT
            - CONSENT_POLICY_TYPE_ADMIN
        variants:
          description: >-
            The consent's variant combinations. A single consent may have
            multiple variants.
          type: array
          items:
            type: string
            enumDescriptions:
              - Consent variant unspecified.
              - Consent is a standard patient or admin consent.
              - Consent is a cascading consent.
            enum:
              - CONSENT_VARIANT_UNSPECIFIED
              - CONSENT_VARIANT_STANDARD
              - CONSENT_VARIANT_CASCADE
        enforcementTime:
          description: Last enforcement timestamp of this consent resource.
          type: string
          format: google-datetime
        patientConsentOwner:
          description: >-
            The patient owning the consent (only applicable for patient
            consents), in the format:
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Patient/{patient_id}`
          type: string
        cascadeOrigins:
          description: >-
            The compartment base resources that matched a cascading policy. Each
            resource has the following format:
            `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/{resource_type}/{resource_id}`
          type: array
          items:
            type: string
        matchingAccessorScopes:
          description: >-
            A list of all the matching accessor scopes of this consent policy
            that enforced ExplainDataAccessConsentScope.accessor_scope.
          type: array
          items:
            $ref: '#/components/schemas/ConsentAccessorScope'
    ConsentAccessorScope:
      id: ConsentAccessorScope
      description: >-
        The accessor scope that describes who can access, for what purpose, in
        which environment.
      type: object
      properties:
        actor:
          description: >-
            An individual, group, or access role that identifies the accessor or
            a characteristic of the accessor. This can be a resource ID (such as
            `{resourceType}/{id}`) or an external URI. This value must be
            present.
          type: string
        purpose:
          description: >-
            The intent of data use. If it's not specified, it applies to all
            purposes.
          type: string
        environment:
          description: >-
            An abstract identifier that describes the environment or conditions
            under which the accessor is acting. If it's not specified, it
            applies to all environments.
          type: string
    ExportResourcesRequest:
      id: ExportResourcesRequest
      description: Request to export resources.
      type: object
      properties:
        gcsDestination:
          description: >-
            The Cloud Storage output destination. The Healthcare Service Agent
            account requires the `roles/storage.objectAdmin` role on the Cloud
            Storage location. The exported outputs are organized by FHIR
            resource types. The server creates one object per resource type.
            Each object contains newline delimited JSON, and each line is a FHIR
            resource.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirGcsDestination'
        bigqueryDestination:
          description: >-
            The BigQuery output destination. The Cloud Healthcare Service Agent
            requires two IAM roles on the BigQuery location:
            `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`. The output
            is one BigQuery table per resource type. Unlike when setting
            `BigQueryDestination` for `StreamConfig`, `ExportResources` does not
            create BigQuery views.
          $ref: '#/components/schemas/GoogleCloudHealthcareV1FhirBigQueryDestination'
        _since:
          description: >-
            If provided, only resources updated after this time are exported.
            The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example,
            `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time
            must be specified to the second and include a time zone.
          type: string
        _type:
          description: >-
            String of comma-delimited FHIR resource types. If provided, only
            resources of the specified resource type(s) are exported.
          type: string
    GoogleCloudHealthcareV1FhirGcsDestination:
      id: GoogleCloudHealthcareV1FhirGcsDestination
      description: The configuration for exporting to Cloud Storage.
      type: object
      properties:
        uriPrefix:
          description: >-
            URI for a Cloud Storage directory where result files should be
            written, in the format of
            `gs://{bucket-id}/{path/to/destination/dir}`. If there is no
            trailing slash, the service appends one when composing the object
            path. The user is responsible for creating the Cloud Storage bucket
            referenced in `uri_prefix`.
          type: string
    FhirStoreMetrics:
      id: FhirStoreMetrics
      description: List of metrics for a given FHIR store.
      type: object
      properties:
        name:
          description: >-
            The resource name of the FHIR store to get metrics for, in the
            format
            `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
          type: string
        metrics:
          description: List of FhirStoreMetric by resource type.
          type: array
          items:
            $ref: '#/components/schemas/FhirStoreMetric'
    FhirStoreMetric:
      id: FhirStoreMetric
      description: >-
        Count of resources and total storage size by type for a given FHIR
        store.
      type: object
      properties:
        resourceType:
          description: The FHIR resource type this metric applies to.
          type: string
        count:
          description: >-
            The total count of FHIR resources in the store of this resource
            type.
          type: string
          format: int64
        structuredStorageSizeBytes:
          description: >-
            The total amount of structured storage used by FHIR resources of
            this resource type in the store.
          type: string
          format: int64
    RollbackFhirResourcesRequest:
      id: RollbackFhirResourcesRequest
      type: object
      properties:
        type:
          description: Optional. If specified, revert only resources of these types
          type: array
          items:
            type: string
        rollbackTime:
          description: Required. Time point to rollback to.
          type: string
          format: google-datetime
        filteringFields:
          description: Optional. Parameters for filtering resources
          $ref: '#/components/schemas/RollbackFhirResourceFilteringFields'
        force:
          description: >-
            Optional. When enabled, changes will be reverted without explicit
            confirmation
          type: boolean
        changeType:
          description: >-
            Optional. CREATE/UPDATE/DELETE/ALL for reverting all txns of a
            certain type.
          type: string
          enumDescriptions:
            - When unspecified, revert all transactions
            - All transactions
            - Revert only CREATE transactions
            - Revert only Update transactions
            - Revert only Delete transactions
          enum:
            - CHANGE_TYPE_UNSPECIFIED
            - ALL
            - CREATE
            - UPDATE
            - DELETE
        resultGcsBucket:
          description: Required. Bucket to deposit result
          type: string
        inputGcsObject:
          description: >-
            Optional. Cloud Storage object containing list of
            {resourceType}/{resourceId} lines, identifying resources to be
            reverted
          type: string
        excludeRollbacks:
          description: Optional. Specifies whether to exclude earlier rollbacks.
          type: boolean
    RollbackFhirResourceFilteringFields:
      id: RollbackFhirResourceFilteringFields
      type: object
      properties:
        operationIds:
          description: Optional. A list of operation IDs to roll back.
          type: array
          items:
            type: string
            format: uint64
        metadataFilter:
          description: >-
            Optional. A filter expression that matches data in the
            `Resource.meta` element. Supports all filters in
            [AIP-160](https://google.aip.dev/160) except the "has" (`:`)
            operator. Supports the following custom functions: * `tag("") = ""`
            for tag filtering. * `extension_value_ts("") = ` for filtering
            extensions with a timestamp, where `` is a Unix timestamp. Supports
            the `>`, `<`, `<=`, `>=`, and `!=` comparison operators.
          type: string
    AnalyzeEntitiesRequest:
      id: AnalyzeEntitiesRequest
      description: The request to analyze healthcare entities in a document.
      type: object
      properties:
        documentContent:
          description: document_content is a document to be annotated.
          type: string
        licensedVocabularies:
          description: >-
            A list of licensed vocabularies to use in the request, in addition
            to the default unlicensed vocabularies.
          type: array
          items:
            type: string
            enumDescriptions:
              - No licensed vocabulary specified.
              - ICD-10-CM vocabulary
              - SNOMED CT (US version) vocabulary
            enum:
              - LICENSED_VOCABULARY_UNSPECIFIED
              - ICD10CM
              - SNOMEDCT_US
        alternativeOutputFormat:
          description: >-
            Optional. Alternative output format to be generated based on the
            results of analysis.
          type: string
          enumDescriptions:
            - No alternative output format is specified.
            - FHIR bundle output.
          enum:
            - ALTERNATIVE_OUTPUT_FORMAT_UNSPECIFIED
            - FHIR_BUNDLE
    AnalyzeEntitiesResponse:
      id: AnalyzeEntitiesResponse
      description: Includes recognized entity mentions and relationships between them.
      type: object
      properties:
        entityMentions:
          description: >-
            The `entity_mentions` field contains all the annotated medical
            entities that were mentioned in the provided document.
          type: array
          items:
            $ref: '#/components/schemas/EntityMention'
        entities:
          description: >-
            The union of all the candidate entities that the entity_mentions in
            this response could link to. These are UMLS concepts or normalized
            mention content.
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        relationships:
          description: >-
            relationships contains all the binary relationships that were
            identified between entity mentions within the provided document.
          type: array
          items:
            $ref: '#/components/schemas/EntityMentionRelationship'
        fhirBundle:
          description: >-
            The FHIR bundle ([`R4`](http://hl7.org/fhir/R4/bundle.html)) that
            includes all the entities, the entity mentions, and the
            relationships in JSON format.
          type: string
    EntityMention:
      id: EntityMention
      description: An entity mention in the document.
      type: object
      properties:
        mentionId:
          description: >-
            mention_id uniquely identifies each entity mention in a single
            response.
          type: string
        type:
          description: >-
            The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE,
            ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT,
            BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT,
            DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT,
            LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE,
            MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS,
            MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT,
            OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT,
            PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE,
            UNCLEAR_FOLLOWUP.
          type: string
        text:
          description: text is the location of the entity mention in the document.
          $ref: '#/components/schemas/TextSpan'
        linkedEntities:
          description: >-
            linked_entities are candidate ontological concepts that this entity
            mention may refer to. They are sorted by decreasing confidence.
          type: array
          items:
            $ref: '#/components/schemas/LinkedEntity'
        temporalAssessment:
          description: >-
            How this entity mention relates to the subject temporally. Its value
            is one of: CURRENT, CLINICAL_HISTORY, FAMILY_HISTORY, UPCOMING,
            ALLERGY
          $ref: '#/components/schemas/Feature'
        certaintyAssessment:
          description: >-
            The certainty assessment of the entity mention. Its value is one of:
            LIKELY, SOMEWHAT_LIKELY, UNCERTAIN, SOMEWHAT_UNLIKELY, UNLIKELY,
            CONDITIONAL
          $ref: '#/components/schemas/Feature'
        subject:
          description: >-
            The subject this entity mention relates to. Its value is one of:
            PATIENT, FAMILY_MEMBER, OTHER
          $ref: '#/components/schemas/Feature'
        confidence:
          description: >-
            The model's confidence in this entity mention annotation. A number
            between 0 and 1.
          type: number
          format: double
    TextSpan:
      id: TextSpan
      description: A span of text in the provided document.
      type: object
      properties:
        content:
          description: The original text contained in this span.
          type: string
        beginOffset:
          description: The unicode codepoint index of the beginning of this span.
          type: integer
          format: int32
    LinkedEntity:
      id: LinkedEntity
      description: >-
        EntityMentions can be linked to multiple entities using a LinkedEntity
        message lets us add other fields, e.g. confidence.
      type: object
      properties:
        entityId:
          description: >-
            entity_id is a concept unique identifier. These are prefixed by a
            string that identifies the entity coding system, followed by the
            unique identifier within that system. For example, "UMLS/C0000970".
            This also supports ad hoc entities, which are formed by normalizing
            entity mention content.
          type: string
    Feature:
      id: Feature
      description: A feature of an entity mention.
      type: object
      properties:
        value:
          description: >-
            The value of this feature annotation. Its range depends on the type
            of the feature.
          type: string
        confidence:
          description: >-
            The model's confidence in this feature annotation. A number between
            0 and 1.
          type: number
          format: double
    Entity:
      id: Entity
      description: The candidate entities that an entity mention could link to.
      type: object
      properties:
        entityId:
          description: >-
            entity_id is a first class field entity_id uniquely identifies this
            concept and its meta-vocabulary. For example, "UMLS/C0000970".
          type: string
        preferredTerm:
          description: >-
            preferred_term is the preferred term for this concept. For example,
            "Acetaminophen". For ad hoc entities formed by normalization, this
            is the most popular unnormalized string.
          type: string
        vocabularyCodes:
          description: >-
            Vocabulary codes are first-class fields and differentiated from the
            concept unique identifier (entity_id). vocabulary_codes contains the
            representation of this concept in particular vocabularies, such as
            ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the
            vocabulary, followed by the unique code within that vocabulary. For
            example, "RXNORM/A10334543".
          type: array
          items:
            type: string
    EntityMentionRelationship:
      id: EntityMentionRelationship
      description: Defines directed relationship from one entity mention to another.
      type: object
      properties:
        subjectId:
          description: subject_id is the id of the subject entity mention.
          type: string
        objectId:
          description: object_id is the id of the object entity mention.
          type: string
        confidence:
          description: The model's confidence in this annotation. A number between 0 and 1.
          type: number
          format: double
    OperationMetadata:
      id: OperationMetadata
      description: >-
        OperationMetadata provides information about the operation execution.
        Returned in the long-running operation's metadata field.
      type: object
      properties:
        apiMethodName:
          description: The name of the API method that initiated the operation.
          type: string
        createTime:
          description: The time at which the operation was created by the API.
          type: string
          format: google-datetime
        endTime:
          description: The time at which execution was completed.
          type: string
          format: google-datetime
        counter:
          $ref: '#/components/schemas/ProgressCounter'
        cancelRequested:
          description: Specifies if cancellation was requested for the operation.
          type: boolean
        logsUrl:
          description: >-
            A link to audit and error logs in the log viewer. Error logs are
            generated only by some operations, listed at [Viewing error logs in
            Cloud
            Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
          type: string
    ProgressCounter:
      id: ProgressCounter
      description: ProgressCounter provides counters to describe an operation's progress.
      type: object
      properties:
        pending:
          description: The number of units that are pending in the operation.
          type: string
          format: int64
        success:
          description: The number of units that succeeded in the operation.
          type: string
          format: int64
        failure:
          description: The number of units that failed in the operation.
          type: string
          format: int64
    QueryAccessibleDataResponse:
      id: QueryAccessibleDataResponse
      description: >-
        Response for successful QueryAccessibleData operations. This structure
        is included in the response upon operation completion.
      type: object
      properties:
        gcsUris:
          description: >-
            List of files, each of which contains a list of data_id(s) that are
            consented for a specified use in the request.
          type: array
          items:
            type: string
    DeidentifySummary:
      id: DeidentifySummary
      description: Contains a summary of the Deidentify operation.
      type: object
      properties: {}
    GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary:
      id: GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary
      description: Contains a summary of the DeidentifyDicomStore operation.
      type: object
      properties: {}
    GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary:
      id: GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary
      description: Contains a summary of the DeidentifyFhirStore operation.
      type: object
      properties: {}
    ImportDicomDataResponse:
      id: ImportDicomDataResponse
      description: >-
        Returns additional information in regards to a completed DICOM store
        import.
      type: object
      properties: {}
    ExportDicomDataResponse:
      id: ExportDicomDataResponse
      description: >-
        Returns additional information in regards to a completed DICOM store
        export.
      type: object
      properties: {}
    ImportResourcesResponse:
      id: ImportResourcesResponse
      description: >-
        Final response of importing resources. This structure is included in the
        response to describe the detailed outcome after the operation finishes
        successfully.
      type: object
      properties: {}
    ExportResourcesResponse:
      id: ExportResourcesResponse
      description: >-
        Response when all resources export successfully. This structure is
        included in the response to describe the detailed outcome after the
        operation finishes successfully.
      type: object
      properties: {}
    RollbackFhirResourcesResponse:
      id: RollbackFhirResourcesResponse
      description: Final response of rollback FIHR resources request.
      type: object
      properties:
        fhirStore:
          description: >-
            The name of the FHIR store to rollback, in the format of
            "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}
            /fhirStores/{fhir_store_id}".
          type: string
    ApplyConsentsResponse:
      id: ApplyConsentsResponse
      description: >-
        Response when all Consent resources in scope were processed and all
        affected resources were reindexed successfully. This structure is
        included in the response when the operation finishes successfully.
      type: object
      properties:
        consentApplySuccess:
          description: >-
            If `validate_only = false` in ApplyConsentsRequest, this counter is
            the number of Consent resources that were successfully applied.
            Otherwise, it is the number of Consent resources that are supported.
          type: string
          format: int64
        consentApplyFailure:
          description: >-
            If `validate_only = false` in ApplyConsentsRequest, this counter is
            the number of Consent resources that were failed to apply.
            Otherwise, it is the number of Consent resources that are not
            supported or invalid.
          type: string
          format: int64
        affectedResources:
          description: >-
            The number of resources (including the Consent resources) that may
            have consensual access change.
          type: string
          format: int64
        failedResources:
          description: >-
            The number of resources (including the Consent resources) that
            ApplyConsents failed to re-index.
          type: string
          format: int64
    ApplyAdminConsentsResponse:
      id: ApplyAdminConsentsResponse
      description: >-
        Response when all admin Consent resources in scope were processed and
        all affected resources were reindexed successfully. This structure will
        be included in the response when the operation finishes successfully.
      type: object
      properties:
        consentApplySuccess:
          description: >-
            If `validate_only=false` in ApplyAdminConsentsRequest, this counter
            contains the number of Consent resources that were successfully
            applied. Otherwise, it is the number of Consent resources that are
            supported.
          type: string
          format: int64
        affectedResources:
          description: >-
            The number of resources (including the Consent resources) that may
            have consent access change.
          type: string
          format: int64
        failedResources:
          description: >-
            The number of resources (including the Consent resources) that
            ApplyAdminConsents failed to re-index.
          type: string
          format: int64
    ApplyAdminConsentsErrorDetail:
      id: ApplyAdminConsentsErrorDetail
      description: >-
        Contains the error details of the unsupported admin Consent resources
        for when the ApplyAdminConsents method fails to apply one or more
        Consent resources.
      type: object
      properties:
        consentErrors:
          description: >-
            The list of Consent resources that are unsupported or cannot be
            applied and the error associated with each of them.
          type: array
          items:
            $ref: '#/components/schemas/ConsentErrors'
        existingOperationId:
          description: >-
            The currently in progress non-validate-only ApplyAdminConsents
            operation ID if exist.
          type: string
          format: uint64
    ConsentErrors:
      id: ConsentErrors
      description: The Consent resource name and error.
      type: object
      properties:
        name:
          description: >-
            The versioned name of the admin Consent resource, in the format
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}/_history/{version_id}`.
            For FHIR stores with `disable_resource_versioning=true`, the format
            is
            `projects/{project_id}/locations/{location}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
          type: string
        error:
          description: The error code and message.
          $ref: '#/components/schemas/Status'
    ExportMessagesResponse:
      id: ExportMessagesResponse
      description: >-
        Final response for the export operation. This structure is included in
        the response to describe the detailed outcome.
      type: object
      properties: {}
    ImportMessagesResponse:
      id: ImportMessagesResponse
      description: >-
        Final response of importing messages. This structure is included in the
        response to describe the detailed outcome. It is only included when the
        operation finishes successfully.
      type: object
      properties: {}
    RollbackHl7V2MessagesResponse:
      id: RollbackHl7V2MessagesResponse
      description: Final response of rollback HL7v2 messages request.
      type: object
      properties:
        hl7v2Store:
          description: >-
            The name of the HL7v2 store to rollback, in the format of
            "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}
            /hl7v2Stores/{hl7v2_store_id}".
          type: string
    SetBlobStorageSettingsResponse:
      id: SetBlobStorageSettingsResponse
      description: >-
        Returns additional info in regards to a completed set blob storage
        settings API.
      type: object
      properties: {}
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.healthcare.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    datasets_iam_policies:
      id: google.healthcare.datasets_iam_policies
      name: datasets_iam_policies
      title: Datasets_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/datasets_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/datasets_iam_policies/methods/set_iam_policy
        delete: []
    datasets:
      id: google.healthcare.datasets
      name: datasets
      title: Datasets
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.datasets
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deidentify:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}:deidentify/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/get'
          - $ref: '#/components/x-stackQL-resources/datasets/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/delete'
    consent_stores_iam_policies:
      id: google.healthcare.consent_stores_iam_policies
      name: consent_stores_iam_policies
      title: Consent_stores_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/consent_stores_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/consent_stores_iam_policies/methods/set_iam_policy
        delete: []
    consent_stores:
      id: google.healthcare.consent_stores
      name: consent_stores
      title: Consent_stores
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consentStores
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        check_data_access:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:checkDataAccess/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_accessible_data:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:queryAccessibleData/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        evaluate_user_consents:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}:evaluateUserConsents/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consent_stores/methods/delete'
    attribute_definitions:
      id: google.healthcare.attribute_definitions
      name: attribute_definitions
      title: Attribute_definitions
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.attributeDefinitions
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1attributeDefinitions~1{attributeDefinitionsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/attribute_definitions/methods/get'
          - $ref: >-
              #/components/x-stackQL-resources/attribute_definitions/methods/list
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/attribute_definitions/methods/create
        update:
          - $ref: >-
              #/components/x-stackQL-resources/attribute_definitions/methods/patch
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/attribute_definitions/methods/delete
    consent_artifacts:
      id: google.healthcare.consent_artifacts
      name: consent_artifacts
      title: Consent_artifacts
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consentArtifacts
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts~1{consentArtifactsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consentArtifacts~1{consentArtifactsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/get'
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consent_artifacts/methods/delete'
    consents:
      id: google.healthcare.consents
      name: consents
      title: Consents
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consents
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        activate:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:activate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reject:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:reject/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revoke:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:revoke/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consents/methods/get'
          - $ref: '#/components/x-stackQL-resources/consents/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/consents/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/consents/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consents/methods/delete'
    consents_revisions:
      id: google.healthcare.consents_revisions
      name: consents_revisions
      title: Consents_revisions
      methods:
        delete_revision:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:deleteRevision/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_revisions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1consents~1{consentsId}:listRevisions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consents
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/consents_revisions/methods/list_revisions
        insert: []
        update: []
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/consents_revisions/methods/delete_revision
    user_data_mappings:
      id: google.healthcare.user_data_mappings
      name: user_data_mappings
      title: User_data_mappings
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.userDataMappings
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        archive:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1consentStores~1{consentStoresId}~1userDataMappings~1{userDataMappingsId}:archive/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/get'
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/user_data_mappings/methods/delete'
    data_mapper_workspaces_iam_policies:
      id: google.healthcare.data_mapper_workspaces_iam_policies
      name: data_mapper_workspaces_iam_policies
      title: Data_mapper_workspaces_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dataMapperWorkspaces~1{dataMapperWorkspacesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dataMapperWorkspaces~1{dataMapperWorkspacesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dataMapperWorkspaces~1{dataMapperWorkspacesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/data_mapper_workspaces_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/data_mapper_workspaces_iam_policies/methods/set_iam_policy
        delete: []
    dicom_stores_iam_policies:
      id: google.healthcare.dicom_stores_iam_policies
      name: dicom_stores_iam_policies
      title: Dicom_stores_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/dicom_stores_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/dicom_stores_iam_policies/methods/set_iam_policy
        delete: []
    dicom_stores:
      id: google.healthcare.dicom_stores
      name: dicom_stores
      title: Dicom_stores
      methods:
        deidentify:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:deidentify/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_blob_storage_settings:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:setBlobStorageSettings/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dicomStores
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:export/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_studies:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        store_instances:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_series:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1series/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1instances/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        retrieve_frames:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1frames~1{framesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        retrieve_rendered:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1frames~1{framesId}~1rendered/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        retrieve_bulkdata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1bulkdata~1{bulkdataId}~1{bulkdataId1}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/dicom_stores/methods/delete'
    dicom_store_metrics:
      id: google.healthcare.dicom_store_metrics
      name: dicom_store_metrics
      title: Dicom_store_metrics
      methods:
        get_dicomstore_metrics:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}:getDICOMStoreMetrics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/dicom_store_metrics/methods/get_dicomstore_metrics
        insert: []
        update: []
        replace: []
        delete: []
    studies:
      id: google.healthcare.studies
      name: studies
      title: Studies
      methods:
        set_blob_storage_settings:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}:setBlobStorageSettings/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        store_instances:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_series:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1instances/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/studies/methods/delete'
    study_metrics:
      id: google.healthcare.study_metrics
      name: study_metrics
      title: Study_metrics
      methods:
        get_study_metrics:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}:getStudyMetrics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/study_metrics/methods/get_study_metrics
        insert: []
        update: []
        replace: []
        delete: []
    series_metrics:
      id: google.healthcare.series_metrics
      name: series_metrics
      title: Series_metrics
      methods:
        get_series_metrics:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}:getSeriesMetrics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/series_metrics/methods/get_series_metrics
        insert: []
        update: []
        replace: []
        delete: []
    instances_storage_info:
      id: google.healthcare.instances_storage_info
      name: instances_storage_info
      title: Instances_storage_info
      methods:
        get_storage_info:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}:getStorageInfo/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/instances_storage_info/methods/get_storage_info
        insert: []
        update: []
        replace: []
        delete: []
    studies_study:
      id: google.healthcare.studies_study
      name: studies_study
      title: Studies_study
      methods:
        retrieve_study:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/studies_study/methods/retrieve_study
        insert: []
        update: []
        replace: []
        delete: []
    studies_metadata:
      id: google.healthcare.studies_metadata
      name: studies_metadata
      title: Studies_metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1metadata/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/studies_metadata/methods/retrieve_metadata
        insert: []
        update: []
        replace: []
        delete: []
    series:
      id: google.healthcare.series
      name: series
      title: Series
      methods:
        retrieve_series:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search_for_instances:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/series/methods/retrieve_series'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/series/methods/delete'
    series_metadata:
      id: google.healthcare.series_metadata
      name: series_metadata
      title: Series_metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1metadata/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/series_metadata/methods/retrieve_metadata
        insert: []
        update: []
        replace: []
        delete: []
    instances:
      id: google.healthcare.instances
      name: instances
      title: Instances
      methods:
        retrieve_instance:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/instances/methods/retrieve_instance
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete'
    instances_rendered:
      id: google.healthcare.instances_rendered
      name: instances_rendered
      title: Instances_rendered
      methods:
        retrieve_rendered:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1rendered/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/instances_rendered/methods/retrieve_rendered
        insert: []
        update: []
        replace: []
        delete: []
    instances_metadata:
      id: google.healthcare.instances_metadata
      name: instances_metadata
      title: Instances_metadata
      methods:
        retrieve_metadata:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1dicomStores~1{dicomStoresId}~1dicomWeb~1studies~1{studiesId}~1series~1{seriesId}~1instances~1{instancesId}~1metadata/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/instances_metadata/methods/retrieve_metadata
        insert: []
        update: []
        replace: []
        delete: []
    hl7_v2_stores_iam_policies:
      id: google.healthcare.hl7_v2_stores_iam_policies
      name: hl7_v2_stores_iam_policies
      title: Hl7_v2_stores_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/hl7_v2_stores_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/hl7_v2_stores_iam_policies/methods/set_iam_policy
        delete: []
    hl7_v2_stores:
      id: google.healthcare.hl7_v2_stores
      name: hl7_v2_stores
      title: Hl7_v2_stores
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.hl7V2Stores
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:export/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rollback:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:rollback/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/hl7_v2_stores/methods/delete'
    hl7_v2_store_metrics:
      id: google.healthcare.hl7_v2_store_metrics
      name: hl7_v2_store_metrics
      title: Hl7_v2_store_metrics
      methods:
        get_hl7v2_store_metrics:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}:getHL7v2StoreMetrics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/hl7_v2_store_metrics/methods/get_hl7v2_store_metrics
        insert: []
        update: []
        replace: []
        delete: []
    messages:
      id: google.healthcare.messages
      name: messages
      title: Messages
      methods:
        ingest:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages:ingest/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.hl7V2Messages
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1hl7V2Stores~1{hl7V2StoresId}~1messages~1{messagesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/messages/methods/get'
          - $ref: '#/components/x-stackQL-resources/messages/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/messages/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/messages/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/messages/methods/delete'
    fhir_stores_iam_policies:
      id: google.healthcare.fhir_stores_iam_policies
      name: fhir_stores_iam_policies
      title: Fhir_stores_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/fhir_stores_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/fhir_stores_iam_policies/methods/set_iam_policy
        delete: []
    fhir_stores:
      id: google.healthcare.fhir_stores
      name: fhir_stores
      title: Fhir_stores
      methods:
        deidentify:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:deidentify/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        bulk-export-group:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Group~1{GroupId}~1$export/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.fhirStores
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:import/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        apply_consents:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:applyConsents/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        apply_admin_consents:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:applyAdminConsents/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        explain_data_access:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:explainDataAccess/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:export/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rollback:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:rollback/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/get'
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/fhir_stores/methods/delete'
    fhir_store_metrics:
      id: google.healthcare.fhir_store_metrics
      name: fhir_store_metrics
      title: Fhir_store_metrics
      methods:
        get_fhirstore_metrics:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}:getFHIRStoreMetrics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/fhir_store_metrics/methods/get_fhirstore_metrics
        insert: []
        update: []
        replace: []
        delete: []
    fhir:
      id: google.healthcare.fhir
      name: fhir
      title: Fhir
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_update:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        conditional_patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        binary-create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Binary/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        read:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        binary-read:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Binary~1{BinaryId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        binary-update:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Binary~1{BinaryId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        vread:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1_history~1{_historyId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        binary-vread:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Binary~1{BinaryId}~1_history~1{_historyId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1_search/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        search-type:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{resourceType}~1_search/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patient-everything:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Patient~1{PatientId}~1$everything/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        capabilities:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1metadata/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        execute_bundle:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        history:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1_history/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resource-purge:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1{fhirId1}~1$purge/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        bulk-export:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1$export/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resource-validate:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1{fhirId}~1$validate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        consent-enforcement-status:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Consent~1{ConsentId}~1$consent-enforcement-status/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patient-consent-enforcement-status:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1fhir~1Patient~1{PatientId}~1$consent-enforcement-status/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/fhir/methods/delete'
    fhir_operation_status:
      id: google.healthcare.fhir_operation_status
      name: fhir_operation_status
      title: Fhir_operation_status
      methods:
        get-fhir-operation-status:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/fhir_operation_status/methods/get-fhir-operation-status
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.healthcare.operations
      name: operations
      title: Operations
      methods:
        delete-fhir-operation:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1fhirStores~1{fhirStoresId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1datasets~1{datasetsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    nlp:
      id: google.healthcare.nlp
      name: nlp
      title: Nlp
      methods:
        analyze_entities:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1services~1nlp:analyzeEntities/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: healthcare.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: extraLocationTypes
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: healthcare.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets:
    parameters: *ref_1
    post:
      description: >-
        Creates a new health dataset. Results are returned through the Operation
        interface which returns either an `Operation.response` which contains a
        Dataset or `Operation.error`. The metadata field type is
        OperationMetadata.
      operationId: healthcare.projects.locations.datasets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: datasetId
          schema:
            type: string
    get:
      description: Lists the health datasets in the current project.
      operationId: healthcare.projects.locations.datasets.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:
    parameters: *ref_1
    delete:
      description: >-
        Deletes the specified health dataset and all data contained in the
        dataset. Deleting a dataset does not affect the sources from which the
        dataset was imported (if any).
      operationId: healthcare.projects.locations.datasets.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
    get:
      description: Gets any metadata associated with a dataset.
      operationId: healthcare.projects.locations.datasets.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
    patch:
      description: Updates dataset metadata.
      operationId: healthcare.projects.locations.datasets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        Creates a new dataset containing de-identified data from the source
        dataset. The metadata field type is OperationMetadata. If the request is
        successful, the response field type is DeidentifySummary. If errors
        occur, error is set. The LRO result may still be successful if
        de-identification fails for some DICOM instances. The new de-identified
        dataset will not contain these failed resources. Failed resource totals
        are tracked in Operation.metadata. Error details are also logged to
        Cloud Logging. For more information, see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
      operationId: healthcare.projects.locations.datasets.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDatasetRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.consentStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.consentStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.consentStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores:
    parameters: *ref_1
    post:
      description: >-
        Creates a new consent store in the parent dataset. Attempting to create
        a consent store with the same ID as an existing store fails with an
        ALREADY_EXISTS error.
      operationId: healthcare.projects.locations.datasets.consentStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: consentStoreId
          schema:
            type: string
    get:
      description: Lists the consent stores in the specified dataset.
      operationId: healthcare.projects.locations.datasets.consentStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:
    parameters: *ref_1
    get:
      description: Gets the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the specified consent store and removes all the consent store's
        data.
      operationId: healthcare.projects.locations.datasets.consentStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
    patch:
      description: Updates the specified consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess:
    parameters: *ref_1
    post:
      description: >-
        Checks if a particular data_id of a User data mapping in the specified
        consent store is consented for the specified use.
      operationId: healthcare.projects.locations.datasets.consentStores.checkDataAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckDataAccessRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDataAccessResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData:
    parameters: *ref_1
    post:
      description: >-
        Queries all data_ids that are consented for a specified use in the given
        consent store and writes them to a specified destination. The returned
        Operation includes a progress counter for the number of User data
        mappings processed. If the request is successful, a detailed response is
        returned of type QueryAccessibleDataResponse, contained in the response
        field when the operation finishes. The metadata field type is
        OperationMetadata. Errors are logged to Cloud Logging (see [Viewing
        error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For
        example, the following sample log entry shows a `failed to evaluate
        consent policy` error that occurred during a QueryAccessibleData call to
        consent store
        `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.
        ```json jsonPayload: { @type:
        "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry"
        error: { code: 9 message: "failed to evaluate consent policy" }
        resourceName:
        "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}"
        } logName:
        "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data"
        operation: { id:
        "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}"
        producer: "healthcare.googleapis.com/QueryAccessibleData" }
        receiveTimestamp: "TIMESTAMP" resource: { labels: { consent_store_id:
        "{consent_store_id}" dataset_id: "{dataset_id}" location:
        "{location_id}" project_id: "{project_id}" } type:
        "healthcare_consent_store" } severity: "ERROR" timestamp: "TIMESTAMP"
        ```
      operationId: healthcare.projects.locations.datasets.consentStores.queryAccessibleData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryAccessibleDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents:
    parameters: *ref_1
    post:
      description: >-
        Evaluates the user's Consents for all matching User data mappings. Note:
        User data mappings are indexed asynchronously, which can cause a slight
        delay between the time mappings are created or updated and when they are
        included in EvaluateUserConsents results.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.evaluateUserConsents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateUserConsentsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateUserConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions:
    parameters: *ref_1
    post:
      description: Creates a new Attribute definition in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: attributeDefinitionId
          schema:
            type: string
    get:
      description: Lists the Attribute definitions in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAttributeDefinitionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}:
    parameters: *ref_1
    get:
      description: Gets the specified Attribute definition.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the specified Attribute definition. Fails if the Attribute
        definition is referenced by any User data mapping, or the latest
        revision of any Consent.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the specified Attribute definition.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeDefinition'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeDefinition'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: attributeDefinitionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts:
    parameters: *ref_1
    post:
      description: Creates a new Consent artifact in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentArtifact'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
    get:
      description: Lists the Consent artifacts in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentArtifactsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}:
    parameters: *ref_1
    get:
      description: Gets the specified Consent artifact.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentArtifact'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the specified Consent artifact. Fails if the artifact is
        referenced by the latest revision of any Consent.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentArtifactsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents:
    parameters: *ref_1
    post:
      description: Creates a new Consent in the parent consent store.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
    get:
      description: >-
        Lists the Consent in the given consent store, returning each Consent's
        latest revision.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the specified revision of a Consent, or the latest revision if
        `revision_id` is not specified in the resource name.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the Consent and its revisions. To keep a record of the Consent
        but mark it inactive, see [RevokeConsent]. To delete a revision of a
        Consent, see [DeleteConsentRevision]. This operation does not delete the
        related Consent artifact.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates the latest revision of the specified Consent by committing a new
        revision with the changes. A FAILED_PRECONDITION error occurs if the
        latest revision of the specified Consent is in the `REJECTED` or
        `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:deleteRevision:
    parameters: *ref_1
    delete:
      description: >-
        Deletes the specified revision of a Consent. An INVALID_ARGUMENT error
        occurs if the specified revision is the latest revision.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consents.deleteRevision
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:activate:
    parameters: *ref_1
    post:
      description: >-
        Activates the latest revision of the specified Consent by committing a
        new revision with `state` updated to `ACTIVE`. If the latest revision of
        the specified Consent is in the `ACTIVE` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the specified Consent is in the `REJECTED` or `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:reject:
    parameters: *ref_1
    post:
      description: >-
        Rejects the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REJECTED`. If the latest revision of
        the specified Consent is in the `REJECTED` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the specified Consent is in the `ACTIVE` or `REVOKED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.reject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:listRevisions:
    parameters: *ref_1
    get:
      description: >-
        Lists the revisions of the specified Consent in reverse chronological
        order.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.consents.listRevisions
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsentRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke:
    parameters: *ref_1
    post:
      description: >-
        Revokes the latest revision of the specified Consent by committing a new
        revision with `state` updated to `REVOKED`. If the latest revision of
        the specified Consent is in the `REVOKED` state, no new revision is
        committed. A FAILED_PRECONDITION error occurs if the latest revision of
        the given consent is in `DRAFT` or `REJECTED` state.
      operationId: healthcare.projects.locations.datasets.consentStores.consents.revoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeConsentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consent'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: consentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings:
    parameters: *ref_1
    post:
      description: Creates a new User data mapping in the parent consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
    get:
      description: Lists the User data mappings in the specified consent store.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserDataMappingsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:
    parameters: *ref_1
    get:
      description: Gets the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
    delete:
      description: Deletes the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataMapping'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataMapping'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive:
    parameters: *ref_1
    post:
      description: Archives the specified User data mapping.
      operationId: >-
        healthcare.projects.locations.datasets.consentStores.userDataMappings.archive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveUserDataMappingRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveUserDataMappingResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: consentStoresId
          required: true
          schema:
            type: string
        - in: path
          name: userDataMappingsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataMapperWorkspaces/{dataMapperWorkspacesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.dataMapperWorkspaces.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dataMapperWorkspacesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataMapperWorkspaces/{dataMapperWorkspacesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.dataMapperWorkspaces.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dataMapperWorkspacesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataMapperWorkspaces/{dataMapperWorkspacesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: >-
        healthcare.projects.locations.datasets.dataMapperWorkspaces.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dataMapperWorkspacesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.dicomStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.dicomStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.dicomStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        De-identifies data from the source store and writes it to the
        destination store. The metadata field type is OperationMetadata. If the
        request is successful, the response field type is
        DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO
        result may still be successful if de-identification fails for some DICOM
        instances. The output DICOM store will not contain these failed
        resources. Failed resource totals are tracked in Operation.metadata.
        Error details are also logged to Cloud Logging (see [Viewing error logs
        in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      operationId: healthcare.projects.locations.datasets.dicomStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyDicomStoreRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setBlobStorageSettings:
    parameters: *ref_1
    post:
      description: >-
        SetBlobStorageSettings sets the blob storage settings of the specified
        resources.
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.setBlobStorageSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetBlobStorageSettingsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores:
    parameters: *ref_1
    post:
      description: Creates a new DICOM store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: dicomStoreId
          schema:
            type: string
    get:
      description: Lists the DICOM stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.dicomStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDicomStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:
    parameters: *ref_1
    get:
      description: Gets the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the specified DICOM store and removes all images that are
        contained within it.
      operationId: healthcare.projects.locations.datasets.dicomStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
    patch:
      description: Updates the specified DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DicomStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Imports data into the DICOM store by copying it from the specified
        source. Errors are logged to Cloud Logging. For more information, see
        [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
        metadata field type is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.dicomStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDicomDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Exports data to the specified destination by copying it from the DICOM
        store. Errors are also logged to Cloud Logging. For more information,
        see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The
        metadata field type is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.dicomStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDicomDataRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getDICOMStoreMetrics:
    parameters: *ref_1
    get:
      description: Gets metrics associated with the DICOM store.
      operationId: healthcare.projects.locations.datasets.dicomStores.getDICOMStoreMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DicomStoreMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies:
    parameters: *ref_1
    get:
      description: >-
        SearchForStudies returns a list of matching studies. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForStudies, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForStudies, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForStudies
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
    post:
      description: >-
        StoreInstances stores DICOM instances associated with study instance
        unique identifiers (SUID). See [Store Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
        For details on the implementation of StoreInstances, see [Store
        transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call StoreInstances, see [Store DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#store-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series:
    parameters: *ref_1
    get:
      description: >-
        SearchForSeries returns a list of matching series. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForSeries, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForSeries, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}:setBlobStorageSettings:
    parameters: *ref_1
    post:
      description: >-
        SetBlobStorageSettings sets the blob storage settings of the specified
        resources.
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.setBlobStorageSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetBlobStorageSettingsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}:getStudyMetrics:
    parameters: *ref_1
    get:
      description: GetStudyMetrics returns metrics for a study.
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.getStudyMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}:getSeriesMetrics:
    parameters: *ref_1
    get:
      description: GetSeriesMetrics returns metrics for a series.
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.getSeriesMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}:getStorageInfo:
    parameters: *ref_1
    get:
      description: GetStorageInfo returns the storage info of the specified resource.
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.getStorageInfo
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageInfo'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveStudy returns all instances within the given study. See
        [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveStudy, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveStudy, see [Retrieve DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        DeleteStudy deletes all instances within the given study. Delete
        requests are equivalent to the GET requests specified in the Retrieve
        transaction. The method returns an Operation which will be marked
        successful when the deletion is complete. Warning: Instances cannot be
        inserted into a study that is being deleted by an operation until the
        operation completes. For samples that show how to call DeleteStudy, see
        [Delete a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
    post:
      description: >-
        StoreInstances stores DICOM instances associated with study instance
        unique identifiers (SUID). See [Store Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5).
        For details on the implementation of StoreInstances, see [Store
        transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call StoreInstances, see [Store DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#store-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.storeInstances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveStudyMetadata returns instance associated with the given study
        presented as metadata. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveStudyMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveStudyMetadata, see [Retrieve
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series:
    parameters: *ref_1
    get:
      description: >-
        SearchForSeries returns a list of matching series. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForSeries, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForSeries, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveSeries returns all instances within the given study and series.
        See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveSeries, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveSeries, see [Retrieve DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        DeleteSeries deletes all instances within the given study and series.
        Delete requests are equivalent to the GET requests specified in the
        Retrieve transaction. The method returns an Operation which will be
        marked successful when the deletion is complete. Warning: Instances
        cannot be inserted into a series that is being deleted by an operation
        until the operation completes. For samples that show how to call
        DeleteSeries, see [Delete a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
      operationId: healthcare.projects.locations.datasets.dicomStores.studies.series.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveSeriesMetadata returns instance associated with the given study
        and series, presented as metadata. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveSeriesMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveSeriesMetadata, see [Retrieve
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances:
    parameters: *ref_1
    get:
      description: >-
        SearchForInstances returns a list of matching instances. See [Search
        Transaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6).
        For details on the implementation of SearchForInstances, see [Search
        transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call SearchForInstances, see [Search for DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#search-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveInstance returns instance associated with the given study,
        series, and SOP Instance UID. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveInstance, see [DICOM
        study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances)
        and [DICOM
        instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveInstance, see [Retrieve an
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-instance).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        DeleteInstance deletes an instance associated with the given study,
        series, and SOP Instance UID. Delete requests are equivalent to the GET
        requests specified in the Retrieve transaction. Study and series search
        results can take a few seconds to be updated after an instance is
        deleted using DeleteInstance. For samples that show how to call
        DeleteInstance, see [Delete a study, series, or
        instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#delete-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered:
    parameters: *ref_1
    get:
      description: >-
        RetrieveRenderedInstance returns instance associated with the given
        study, series, and SOP Instance UID in an acceptable Rendered Media
        Type. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveRenderedInstance, see
        [Rendered
        resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveRenderedInstance, see [Retrieve consumer image
        formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-consumer).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: query
          name: viewport
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata:
    parameters: *ref_1
    get:
      description: >-
        RetrieveInstanceMetadata returns instance associated with the given
        study, series, and SOP Instance UID presented as metadata. See
        [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveInstanceMetadata, see
        [Metadata
        resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveInstanceMetadata, see [Retrieve
        metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-metadata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}:
    parameters: *ref_1
    get:
      description: >-
        RetrieveFrames returns instances associated with the given study,
        series, SOP Instance UID and frame numbers. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}.
        For details on the implementation of RetrieveFrames, see [DICOM
        frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in
        the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveFrames, see [Retrieve DICOM
        data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-dicom).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered:
    parameters: *ref_1
    get:
      description: >-
        RetrieveRenderedFrames returns instances associated with the given
        study, series, SOP Instance UID and frame numbers in an acceptable
        Rendered Media Type. See [RetrieveTransaction]
        (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveRenderedFrames, see
        [Rendered
        resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveRenderedFrames, see [Retrieve consumer image
        formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-consumer).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: framesId
          required: true
          schema:
            type: string
        - in: query
          name: viewport
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/bulkdata/{bulkdataId}/{bulkdataId1}:
    parameters: *ref_1
    get:
      description: >-
        Returns uncompressed, unencoded bytes representing the referenced
        bulkdata tag from an instance. See [Retrieve
        Transaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4).
        For details on the implementation of RetrieveBulkdata, see [Bulkdata
        resources](https://cloud.google.com/healthcare/docs/dicom#bulkdata-resources)
        in the Cloud Healthcare API conformance statement. For samples that show
        how to call RetrieveBulkdata, see [Retrieve
        bulkdata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieve-bulkdata).
      operationId: >-
        healthcare.projects.locations.datasets.dicomStores.studies.series.instances.bulkdata.retrieveBulkdata
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: dicomStoresId
          required: true
          schema:
            type: string
        - in: path
          name: studiesId
          required: true
          schema:
            type: string
        - in: path
          name: seriesId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
        - in: path
          name: bulkdataId
          required: true
          schema:
            type: string
        - in: path
          name: bulkdataId1
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores:
    parameters: *ref_1
    post:
      description: Creates a new HL7v2 store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: hl7V2StoreId
          schema:
            type: string
    get:
      description: Lists the HL7v2 stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHl7V2StoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:
    parameters: *ref_1
    get:
      description: Gets the specified HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes the specified HL7v2 store and removes all messages that it
        contains.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
    patch:
      description: Updates the HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hl7V2Store'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2Store'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Exports the messages to a destination. To filter messages to be
        exported, define a filter using the start and end time, relative to the
        message generation time (MSH.7). This API returns an Operation that can
        be used to track the status of the job by calling GetOperation.
        Immediate fatal errors appear in the error field. Otherwise, when the
        operation finishes, a detailed response of type ExportMessagesResponse
        is returned in the response field. The metadata field type for this
        operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportMessagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Import messages to the HL7v2 store by loading data from the specified
        sources. This method is optimized to load large quantities of data using
        import semantics that ignore some HL7v2 store configuration options and
        are not suitable for all use cases. It is primarily intended to load
        data into an empty HL7v2 store that is not being used by other clients.
        An existing message will be overwritten if a duplicate message is
        imported. A duplicate message is a message with the same raw bytes as a
        message that already exists in this HL7v2 store. When a message is
        overwritten, its labels will also be overwritten. The import operation
        is idempotent unless the input data contains multiple valid messages
        with the same raw bytes but different labels. In that case, after the
        import completes, the store contains exactly one message with those raw
        bytes but there is no ordering guarantee on which version of the labels
        it has. The operation result counters do not count duplicated raw bytes
        as an error and count one success for each message in the input, which
        might result in a success count larger than the number of messages in
        the HL7v2 store. If some messages fail to import, for example due to
        parsing errors, successfully imported messages are not rolled back. This
        method returns an Operation that can be used to track the status of the
        import by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a response of type
        ImportMessagesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMessagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getHL7v2StoreMetrics:
    parameters: *ref_1
    get:
      description: Gets metrics associated with the HL7v2 store.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.getHL7v2StoreMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hl7V2StoreMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:rollback:
    parameters: *ref_1
    post:
      description: >-
        Rolls back messages from the HL7v2 store to the specified time. This
        method returns an Operation that can be used to track the status of the
        rollback by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        RollbackHl7V2MessagesResponse is returned in the response field. The
        metadata field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackHl7V2MessagesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest:
    parameters: *ref_1
    post:
      description: >-
        Parses and stores an HL7v2 message. This method triggers an asynchronous
        notification to any Pub/Sub topic configured in
        Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
        message. If an MLLP adapter is configured to listen to a Pub/Sub topic,
        the adapter transmits the message when a notification is received. If
        the method is successful, it generates a response containing an HL7v2
        acknowledgment (`ACK`) message. If the method encounters an error, it
        returns a negative acknowledgment (`NACK`) message. This behavior is
        suitable for replying to HL7v2 interface systems that expect these
        acknowledgments.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestMessageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestMessageResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:
    parameters: *ref_1
    post:
      description: >-
        Parses and stores an HL7v2 message. This method triggers an asynchronous
        notification to any Pub/Sub topic configured in
        Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
        message. If an MLLP adapter is configured to listen to a Pub/Sub topic,
        the adapter transmits the message when a notification is received.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
    get:
      description: >-
        Lists all the messages in the given HL7v2 store with support for
        filtering. Note: HL7v2 messages are indexed asynchronously, so there
        might be a slight delay between the time a message is created and when
        it can be found through a filter.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}:
    parameters: *ref_1
    get:
      description: Gets an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
    delete:
      description: Deletes an HL7v2 message.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
    patch:
      description: >-
        Update the message. The contents of the message in Message.data and data
        extracted from the contents such as Message.create_time cannot be
        altered. Only the Message.labels field is allowed to be updated. The
        labels in the request are merged with the existing set of labels.
        Existing labels with the same keys are updated.
      operationId: healthcare.projects.locations.datasets.hl7V2Stores.messages.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: hl7V2StoresId
          required: true
          schema:
            type: string
        - in: path
          name: messagesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: healthcare.projects.locations.datasets.fhirStores.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: healthcare.projects.locations.datasets.fhirStores.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: healthcare.projects.locations.datasets.fhirStores.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:deidentify:
    parameters: *ref_1
    post:
      description: >-
        De-identifies data from the source store and writes it to the
        destination store. The metadata field type is OperationMetadata. If the
        request is successful, the response field type is
        DeidentifyFhirStoreSummary. If errors occur, error is set. Error details
        are also logged to Cloud Logging (see [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
      operationId: healthcare.projects.locations.datasets.fhirStores.deidentify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeidentifyFhirStoreRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Group/{GroupId}/$export:
    parameters: *ref_1
    get:
      description: >-
        Bulk exports a Group resource and resources in the member field,
        including related resources for each Patient member. The export for each
        Patient is identical to a GetPatientEverything request. Implements the
        FHIR implementation guide [$export group of
        patients](https://build.fhir.org/ig/HL7/bulk-data/export.html#endpoint---group-of-patients).
        The following headers must be set in the request: * `Accept`: specifies
        the format of the `OperationOutcome` response. Only
        `application/fhir+json` is supported. * `Prefer`: specifies whether the
        response is immediate or asynchronous. Must be to `respond-async`
        because only asynchronous responses are supported. Specify the
        destination for the server to write result files by setting the Cloud
        Storage location bulk_export_gcs_destination on the FHIR store. URI of
        an existing Cloud Storage directory where the server writes result
        files, in the format gs://{bucket-id}/{path/to/destination/dir}. If
        there is no trailing slash, the service appends one when composing the
        object path. The user is responsible for creating the Cloud Storage
        bucket referenced. Supports the following query parameters: * `_type`:
        string of comma-delimited FHIR resource types. If provided, only
        resources of the specified type(s) are exported. * `_since`: if
        provided, only resources updated after the specified time are exported.
        * `_outputFormat`: optional, specify ndjson to export data in NDJSON
        format. Exported file names use the format:
        {export_id}_{resource_type}.ndjson. * `organizeOutputBy`: resource type
        to organize the output by. Required and must be set to `Patient`. When
        specified, output files are organized by instances of the specified
        resource type, including the resource, referenced resources, and
        resources that contain references to that resource. On success, the
        `Content-Location` header of response is set to a URL that you can use
        to query the status of the export. The URL is in the format
        `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/operations/{export_id}`.
        See get-fhir-operation-status for more information. Errors generated by
        the FHIR store contain a JSON-encoded `OperationOutcome` resource
        describing the reason for the error.
      operationId: healthcare.projects.locations.datasets.fhirStores.bulk-export-group
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: GroupId
          required: true
          schema:
            type: string
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: _type
          schema:
            type: string
        - in: query
          name: outputFormat
          schema:
            type: string
        - in: query
          name: organizeOutputBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores:
    parameters: *ref_1
    post:
      description: Creates a new FHIR store within the parent dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: fhirStoreId
          schema:
            type: string
    get:
      description: Lists the FHIR stores in the given dataset.
      operationId: healthcare.projects.locations.datasets.fhirStores.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFhirStoresResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:
    parameters: *ref_1
    get:
      description: Gets the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
    patch:
      description: Updates the configuration of the specified FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FhirStore'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStore'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes the specified FHIR store and removes all resources within it.
      operationId: healthcare.projects.locations.datasets.fhirStores.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import:
    parameters: *ref_1
    post:
      description: >-
        Imports resources to the FHIR store by loading data from the specified
        sources. This method is optimized to load large quantities of data using
        import semantics that ignore some FHIR store configuration options and
        are not suitable for all use cases. It is primarily intended to load
        data into an empty FHIR store that is not being used by other clients.
        In cases where this method is not appropriate, consider using
        ExecuteBundle to load data. Every resource in the input must contain a
        client-supplied ID. Each resource is stored using the supplied ID
        regardless of the enable_update_create setting on the FHIR store. It is
        strongly advised not to include or encode any sensitive data such as
        patient identifiers in client-specified resource IDs. Those IDs are part
        of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub
        notifications. Those IDs can also be contained in reference fields
        within other resources. The import process does not enforce referential
        integrity, regardless of the disable_referential_integrity setting on
        the FHIR store. This allows the import of resources with arbitrary
        interdependencies without considering grouping or ordering, but if the
        input data contains invalid references or if some resources fail to be
        imported, the FHIR store might be left in a state that violates
        referential integrity. The import process does not trigger Pub/Sub
        notification or BigQuery streaming update, regardless of how those are
        configured on the FHIR store. If a resource with the specified ID
        already exists, the most recent version of the resource is overwritten
        without creating a new historical version, regardless of the
        disable_resource_versioning setting on the FHIR store. If transient
        failures occur during the import, it's possible that successfully
        imported resources will be overwritten more than once. The import
        operation is idempotent unless the input data contains multiple valid
        resources with the same ID but different contents. In that case, after
        the import completes, the store contains exactly one resource with that
        ID but there is no ordering guarantee on which version of the contents
        it will have. The operation result counters do not count duplicate IDs
        as an error and count one success for each resource in the input, which
        might result in a success count larger than the number of resources in
        the FHIR store. This often occurs when importing data organized in
        bundles produced by Patient-everything where each bundle contains its
        own copy of a resource such as Practitioner that might be referred to by
        many patients. If some resources fail to import, for example due to
        parsing errors, successfully imported resources are not rolled back. The
        location and format of the input data is specified by the parameters in
        ImportResourcesRequest. Note that if no format is specified, this method
        assumes the `BUNDLE` format. When using the `BUNDLE` format this method
        ignores the `Bundle.type` field, except that `history` bundles are
        rejected, and does not apply any of the bundle processing semantics for
        batch or transaction bundles. Unlike in ExecuteBundle, transaction
        bundles are not executed as a single transaction and bundle-internal
        references are not rewritten. The bundle is treated as a collection of
        resources to be written as provided in `Bundle.entry.resource`, ignoring
        `Bundle.entry.request`. As an example, this allows the import of
        `searchset` bundles produced by a FHIR search or Patient-everything
        operation. This method returns an Operation that can be used to track
        the status of the import by calling GetOperation. Immediate fatal errors
        appear in the error field, errors are also logged to Cloud Logging (see
        [Viewing error logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        ImportResourcesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.fhirStores.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:applyConsents:
    parameters: *ref_1
    post:
      description: >-
        Apply the Consent resources for the FHIR store and reindex the
        underlying resources in the FHIR store according to the aggregate
        consent. The aggregate consent of the patient in scope in this request
        replaces any previous call of this method. Any Consent resource change
        after this operation execution (including deletion) requires you to call
        ApplyConsents again to have effect. This method returns an Operation
        that can be used to track the progress of the consent resources that
        were processed by calling GetOperation. Upon completion, the
        ApplyConsentsResponse additionally contains the number of resources that
        was reindexed. Errors are logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). To
        enforce consent check for data access, `consent_config.access_enforced`
        must be set to true for the FhirStore. FHIR Consent is not supported in
        DSTU2 or R5.
      operationId: healthcare.projects.locations.datasets.fhirStores.applyConsents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyConsentsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:applyAdminConsents:
    parameters: *ref_1
    post:
      description: >-
        Applies the admin Consent resources for the FHIR store and reindexes the
        underlying resources in the FHIR store according to the aggregate
        consents. This method also updates the
        `consent_config.enforced_admin_consents` field of the FhirStore unless
        `validate_only=true` in ApplyAdminConsentsRequest. Any admin Consent
        resource change after this operation execution (including deletion)
        requires you to call ApplyAdminConsents again for the change to take
        effect. This method returns an Operation that can be used to track the
        progress of the resources that were reindexed, by calling GetOperation.
        Upon completion, the ApplyAdminConsentsResponse additionally contains
        the number of resources that were reindexed. If at least one Consent
        resource contains an error or fails be be enforced for any reason, the
        method returns an error instead of an Operation. No resources will be
        reindexed and the `consent_config.enforced_admin_consents` field will be
        unchanged. To enforce a consent check for data access,
        `consent_config.access_enforced` must be set to true for the FhirStore.
        FHIR Consent is not supported in DSTU2 or R5.
      operationId: healthcare.projects.locations.datasets.fhirStores.applyAdminConsents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyAdminConsentsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:explainDataAccess:
    parameters: *ref_1
    get:
      description: >-
        Explains all the permitted/denied actor, purpose and environment for a
        given resource. FHIR Consent is not supported in DSTU2 or R5.
      operationId: healthcare.projects.locations.datasets.fhirStores.explainDataAccess
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExplainDataAccessResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: resourceId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export:
    parameters: *ref_1
    post:
      description: >-
        Export resources from the FHIR store to the specified destination. This
        method returns an Operation that can be used to track the status of the
        export by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        ExportResourcesResponse is returned in the response field. The metadata
        field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.fhirStores.export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getFHIRStoreMetrics:
    parameters: *ref_1
    get:
      description: Gets metrics associated with the FHIR store.
      operationId: healthcare.projects.locations.datasets.fhirStores.getFHIRStoreMetrics
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FhirStoreMetrics'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:rollback:
    parameters: *ref_1
    post:
      description: >-
        Rolls back resources from the FHIR store to the specified time. This
        method returns an Operation that can be used to track the status of the
        rollback by calling GetOperation. Immediate fatal errors appear in the
        error field, errors are also logged to Cloud Logging (see [Viewing error
        logs in Cloud
        Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
        Otherwise, when the operation finishes, a detailed response of type
        RollbackFhirResourcesResponse is returned in the response field. The
        metadata field type for this operation is OperationMetadata.
      operationId: healthcare.projects.locations.datasets.fhirStores.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackFhirResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}:
    parameters: *ref_1
    post:
      description: >-
        Creates a FHIR resource. Implements the FHIR standard create interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#create),
        [STU3](https://hl7.org/fhir/STU3/http.html#create),
        [R4](https://hl7.org/fhir/R4/http.html#create),
        [R5](https://hl7.org/fhir/R5/http.html#create)), which creates a new
        resource with a server-assigned resource ID. Also supports the FHIR
        standard conditional create interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#ccreate),
        [STU3](https://hl7.org/fhir/STU3/http.html#ccreate),
        [R4](https://hl7.org/fhir/R4/http.html#ccreate),
        [R5](https://hl7.org/fhir/R5/http.html#ccreate)), specified by supplying
        an `If-None-Exist` header containing a FHIR search query, limited to
        searching by resource identifier. If no resources match this search
        query, the server processes the create operation as normal. When using
        conditional create, the search term for identifier should be in the
        pattern `identifier=system|value` or `identifier=value` - similar to the
        `search` method on resources with a specific identifier. The request
        body must contain a JSON-encoded FHIR resource, and the request headers
        must contain `Content-Type: application/fhir+json`. On success, the
        response body contains a JSON-encoded representation of the resource as
        it was created on the server, including the server-assigned resource ID
        and version ID. Errors generated by the FHIR store contain a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. For samples that
        show how to call `create`, see [Creating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a FHIR resource that match an identifier search query.
        Implements the FHIR standard conditional delete interaction, limited to
        searching by resource identifier. If multiple resources match, 412
        Precondition Failed error will be returned. Search term for identifier
        should be in the pattern `identifier=system|value` or `identifier=value`
        - similar to the `search` method on resources with a specific
        identifier. Note: Unless resource versioning is disabled by setting the
        disable_resource_versioning flag on the FHIR store, the deleted resource
        is moved to a history repository that can still be retrieved through
        vread and related methods, unless they are removed by the purge method.
        For samples that show how to call `conditionalDelete`, see
        [Conditionally deleting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDelete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
    put:
      description: >-
        If a resource is found with the identifier specified in the query
        parameters, updates the entire contents of that resource. Implements the
        FHIR standard conditional update interaction, limited to searching by
        resource identifier. Search term for identifier should be in the pattern
        `identifier=system|value` or `identifier=value` - similar to the
        `search` method on resources with a specific identifier. If the search
        criteria identify more than one match, the request returns a `412
        Precondition Failed` error. If the search criteria identify zero
        matches, and the supplied resource body contains an `id`, and the FHIR
        store has enable_update_create set, creates the resource with the
        client-specified ID. It is strongly advised not to include or encode any
        sensitive data such as patient identifiers in client-specified resource
        IDs. Those IDs are part of the FHIR resource path recorded in Cloud
        Audit Logs and Pub/Sub notifications. Those IDs can also be contained in
        reference fields within other resources. If the search criteria identify
        zero matches, and the supplied resource body does not contain an `id`,
        the resource is created with a server-assigned ID as per the create
        method. The request body must contain a JSON-encoded FHIR resource, and
        the request headers must contain `Content-Type: application/fhir+json`.
        On success, the response body contains a JSON-encoded representation of
        the updated resource, including the server-assigned version ID. Errors
        generated by the FHIR store contain a JSON-encoded `OperationOutcome`
        resource describing the reason for the error. If the request cannot be
        mapped to a valid API method on a FHIR store, a generic GCP error might
        be returned instead. For samples that show how to call
        `conditionalUpdate`, see [Conditionally updating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
    patch:
      description: >-
        If a resource is found with the identifier specified in the query
        parameters, updates part of that resource by applying the operations
        specified in a [JSON Patch](http://jsonpatch.com/) document. Implements
        the FHIR standard conditional patch interaction, limited to searching by
        resource identifier. DSTU2 doesn't define a conditional patch method,
        but the server supports it in the same way it supports STU3. Search term
        for identifier should be in the pattern `identifier=system|value` or
        `identifier=value` - similar to the `search` method on resources with a
        specific identifier. If the search criteria identify more than one
        match, the request returns a `412 Precondition Failed` error. The
        request body must contain a JSON Patch document, and the request headers
        must contain `Content-Type: application/json-patch+json`. On success,
        the response body contains a JSON-encoded representation of the updated
        resource, including the server-assigned version ID. Errors generated by
        the FHIR store contain a JSON-encoded `OperationOutcome` resource
        describing the reason for the error. If the request cannot be mapped to
        a valid API method on a FHIR store, a generic GCP error might be
        returned instead. For samples that show how to call `conditionalPatch`,
        see [Conditionally patching a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Binary:
    parameters: *ref_1
    post:
      description: >-
        Creates a FHIR Binary resource. This method can be used to create a
        Binary resource either by using one of the accepted FHIR JSON content
        types, or as a raw data stream. If a resource is created with this
        method using the FHIR content type this method's behavior is the same as
        [`fhir.create`](https://cloud.google.com/healthcare-api/docs/reference/rest/v1/projects.locations.datasets.fhirStores.fhir/create).
        If a resource type other than Binary is used in the request it's treated
        in the same way as non-FHIR data (e.g., images, zip archives, pdf files,
        documents). When a non-FHIR content type is used in the request, a
        Binary resource will be generated, and the uploaded data will be stored
        in the `content` field (`DSTU2` and `STU3`), or the `data` field (`R4`
        and `R5`). The Binary resource's `contentType` will be filled in using
        the value of the `Content-Type` header, and the `securityContext` field
        (not present in `DSTU2`) will be populated from the `X-Security-Context`
        header if it exists. At this time `securityContext` has no special
        behavior in the Cloud Healthcare API. Note: the limit on data ingested
        through this method is 1 GB. For best performance, use a non-FHIR data
        type instead of wrapping the data in a Binary resource. Some of the
        Healthcare API features, such as [exporting to
        BigQuery](https://cloud.google.com/healthcare-api/docs/how-tos/fhir-export-bigquery)
        or [Pub/Sub
        notifications](https://cloud.google.com/healthcare-api/docs/fhir-pubsub#behavior_when_a_fhir_resource_is_too_large_or_traffic_is_high)
        with full resource content, do not support Binary resources that are
        larger than 10 MB. In these cases the resource's `data` field will be
        omitted. Instead, the
        "http://hl7.org/fhir/StructureDefinition/data-absent-reason" extension
        will be present to indicate that including the data is `unsupported`. On
        success, an empty `201 Created` response is returned. The newly created
        resource's ID and version are returned in the Location header. Using
        `Prefer: representation=resource` is not allowed for this method. The
        definition of the Binary REST API can be found at
        https://hl7.org/fhir/binary.html#rest.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Binary-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}:
    parameters: *ref_1
    get:
      description: >-
        Gets the contents of a FHIR resource. Implements the FHIR standard read
        interaction ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#read),
        [STU3](https://hl7.org/fhir/STU3/http.html#read),
        [R4](https://hl7.org/fhir/R4/http.html#read),
        [R5](https://hl7.org/fhir/R5/http.html#read)). Also supports the FHIR
        standard conditional read interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#cread),
        [STU3](https://hl7.org/fhir/STU3/http.html#cread),
        [R4](https://hl7.org/fhir/R4/http.html#cread),
        [R5](https://hl7.org/fhir/R5/http.html#cread)) specified by supplying an
        `If-Modified-Since` header with a date/time value or an `If-None-Match`
        header with an ETag value. On success, the response body contains a
        JSON-encoded representation of the resource. Errors generated by the
        FHIR store contain a JSON-encoded `OperationOutcome` resource describing
        the reason for the error. If the request cannot be mapped to a valid API
        method on a FHIR store, a generic GCP error might be returned instead.
        For samples that show how to call `read`, see [Getting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.read
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a FHIR resource. Implements the FHIR standard delete interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#delete),
        [STU3](https://hl7.org/fhir/STU3/http.html#delete),
        [R4](https://hl7.org/fhir/R4/http.html#delete),
        [R5](https://hl7.org/fhir/R5/http.html#delete)). Note: Unless resource
        versioning is disabled by setting the disable_resource_versioning flag
        on the FHIR store, the deleted resources will be moved to a history
        repository that can still be retrieved through vread and related
        methods, unless they are removed by the purge method. For samples that
        show how to call `delete`, see [Deleting a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
    put:
      description: >-
        Updates the entire contents of a resource. Implements the FHIR standard
        update interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#update),
        [STU3](https://hl7.org/fhir/STU3/http.html#update),
        [R4](https://hl7.org/fhir/R4/http.html#update),
        [R5](https://hl7.org/fhir/R5/http.html#update)). If the specified
        resource does not exist and the FHIR store has enable_update_create set,
        creates the resource with the client-specified ID. It is strongly
        advised not to include or encode any sensitive data such as patient
        identifiers in client-specified resource IDs. Those IDs are part of the
        FHIR resource path recorded in Cloud Audit Logs and Pub/Sub
        notifications. Those IDs can also be contained in reference fields
        within other resources. The request body must contain a JSON-encoded
        FHIR resource, and the request headers must contain `Content-Type:
        application/fhir+json`. The resource must contain an `id` element having
        an identical value to the ID in the REST path of the request. On
        success, the response body contains a JSON-encoded representation of the
        updated resource, including the server-assigned version ID. Errors
        generated by the FHIR store contain a JSON-encoded `OperationOutcome`
        resource describing the reason for the error. If the request cannot be
        mapped to a valid API method on a FHIR store, a generic GCP error might
        be returned instead. The conditional update interaction If-None-Match is
        supported, including the wildcard behaviour, as defined by the R5 spec.
        This functionality is supported in R4 and R5. For samples that show how
        to call `update`, see [Updating a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates part of an existing resource by applying the operations
        specified in a [JSON Patch](http://jsonpatch.com/) document. Implements
        the FHIR standard patch interaction
        ([STU3](https://hl7.org/fhir/STU3/http.html#patch),
        [R4](https://hl7.org/fhir/R4/http.html#patch),
        [R5](https://hl7.org/fhir/R5/http.html#patch)). DSTU2 doesn't define a
        patch method, but the server supports it in the same way it supports
        STU3. The request body must contain a JSON Patch document, and the
        request headers must contain `Content-Type:
        application/json-patch+json`. On success, the response body contains a
        JSON-encoded representation of the updated resource, including the
        server-assigned version ID. Errors generated by the FHIR store contain a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. For samples that
        show how to call `patch`, see [Patching a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Binary/{BinaryId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the contents of a FHIR Binary resource. This method can be used to
        retrieve a Binary resource either by using the FHIR JSON mimetype as the
        value for the Accept header, or as a raw data stream. If the FHIR Accept
        type is used this method will return a Binary resource with the data
        base64-encoded, regardless of how the resource was created. The resource
        data can be retrieved in base64-decoded form if the Accept type of the
        request matches the value of the resource's `contentType` field. The
        definition of the Binary REST API can be found at
        https://hl7.org/fhir/binary.html#rest.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Binary-read
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: BinaryId
          required: true
          schema:
            type: string
    put:
      description: >-
        Updates the entire contents of a Binary resource. If the specified
        resource does not exist and the FHIR store has enable_update_create set,
        creates the resource with the client-specified ID. It is strongly
        advised not to include or encode any sensitive data such as patient
        identifiers in client-specified resource IDs. Those IDs are part of the
        FHIR resource path recorded in Cloud Audit Logs and Pub/Sub
        notifications. Those IDs can also be contained in reference fields
        within other resources. This method can be used to update a Binary
        resource either by using one of the accepted FHIR JSON content types, or
        as a raw data stream. If a resource is updated with this method using
        the FHIR content type this method's behavior is the same as `update`. If
        a resource type other than Binary is used in the request it will be
        treated in the same way as non-FHIR data. When a non-FHIR content type
        is used in the request, a Binary resource will be generated using the ID
        from the resource path, and the uploaded data will be stored in the
        `content` field (`DSTU2` and `STU3`), or the `data` field (`R4` and
        `R5`). The Binary resource's `contentType` will be filled in using the
        value of the `Content-Type` header, and the `securityContext` field (not
        present in `DSTU2`) will be populated from the `X-Security-Context`
        header if it exists. At this time `securityContext` has no special
        behavior in the Cloud Healthcare API. Note: the limit on data ingested
        through this method is 2 GB. For best performance, use a non-FHIR data
        type instead of wrapping the data in a Binary resource. Some of the
        Healthcare API features, such as [exporting to
        BigQuery](https://cloud.google.com/healthcare-api/docs/how-tos/fhir-export-bigquery)
        or [Pub/Sub
        notifications](https://cloud.google.com/healthcare-api/docs/fhir-pubsub#behavior_when_a_fhir_resource_is_too_large_or_traffic_is_high)
        with full resource content, do not support Binary resources that are
        larger than 10 MB. In these cases the resource's `data` field will be
        omitted. Instead, the
        "http://hl7.org/fhir/StructureDefinition/data-absent-reason" extension
        will be present to indicate that including the data is `unsupported`. On
        success, an empty 200 OK response will be returned, or a 201 Created if
        the resource did not exit. The resource's ID and version are returned in
        the Location header. Using `Prefer: representation=resource` is not
        allowed for this method. The definition of the Binary REST API can be
        found at https://hl7.org/fhir/binary.html#rest.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Binary-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: BinaryId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the contents of a version (current or historical) of a FHIR
        resource by version ID. Implements the FHIR standard vread interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#vread),
        [STU3](https://hl7.org/fhir/STU3/http.html#vread),
        [R4](https://hl7.org/fhir/R4/http.html#vread),
        [R5](https://hl7.org/fhir/R5/http.html#vread)). On success, the response
        body contains a JSON-encoded representation of the resource. Errors
        generated by the FHIR store contain a JSON-encoded `OperationOutcome`
        resource describing the reason for the error. If the request cannot be
        mapped to a valid API method on a FHIR store, a generic GCP error might
        be returned instead. For samples that show how to call `vread`, see
        [Retrieving a FHIR resource
        version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.vread
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: path
          name: _historyId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Binary/{BinaryId}/_history/{_historyId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the contents of a version (current or historical) of a FHIR Binary
        resource by version ID. This method can be used to retrieve a Binary
        resource version either by using the FHIR JSON mimetype as the value for
        the Accept header, or as a raw data stream. If the FHIR Accept type is
        used this method will return a Binary resource with the data
        base64-encoded, regardless of how the resource version was created. The
        resource data can be retrieved in base64-decoded form if the Accept type
        of the request matches the value of the resource version's `contentType`
        field. The definition of the Binary REST API can be found at
        https://hl7.org/fhir/binary.html#rest.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Binary-vread
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: BinaryId
          required: true
          schema:
            type: string
        - in: path
          name: _historyId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search:
    parameters: *ref_1
    post:
      description: >-
        Searches for resources in the given FHIR store according to criteria
        specified as query parameters. Implements the FHIR standard search
        interaction ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#search),
        [STU3](https://hl7.org/fhir/STU3/http.html#search),
        [R4](https://hl7.org/fhir/R4/http.html#search),
        [R5](https://hl7.org/fhir/R5/http.html#search)) using the search
        semantics described in the FHIR Search specification
        ([DSTU2](https://hl7.org/fhir/DSTU2/search.html),
        [STU3](https://hl7.org/fhir/STU3/search.html),
        [R4](https://hl7.org/fhir/R4/search.html),
        [R5](https://hl7.org/fhir/R5/search.html)). Supports four methods of
        search defined by the specification: * `GET [base]?[parameters]` to
        search across all resources. * `GET [base]/[type]?[parameters]` to
        search resources of a specified type. * `POST
        [base]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method across all resources. * `POST
        [base]/[type]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method for the specified type. The `GET` and
        `POST` methods do not support compartment searches. The `POST` method
        does not support `application/x-www-form-urlencoded` search parameters.
        On success, the response body contains a JSON-encoded representation of
        a `Bundle` resource of type `searchset`, containing the results of the
        search. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The server's capability
        statement, retrieved through capabilities, indicates what search
        parameters are supported on each FHIR resource. A list of all search
        parameters defined by the specification can be found in the FHIR Search
        Parameter Registry
        ([STU3](https://hl7.org/fhir/STU3/searchparameter-registry.html),
        [R4](https://hl7.org/fhir/R4/searchparameter-registry.html),
        [R5](https://hl7.org/fhir/R5/searchparameter-registry.html)). FHIR
        search parameters for DSTU2 can be found on each resource's definition
        page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
        `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
        `recurse` (DSTU2 and STU3) or `:iterate` (R4 and R5). Supported search
        result parameters: `_sort`, `_count`, `_include`, `_revinclude`,
        `_summary=text`, `_summary=data`, and `_elements`. The maximum number of
        search results returned defaults to 100, which can be overridden by the
        `_count` parameter up to a maximum limit of 1000. The server might
        return fewer resources than requested to prevent excessively large
        responses. If there are additional results, the returned `Bundle`
        contains a link of `relation` "next", which has a `_page_token`
        parameter for an opaque pagination token that can be used to retrieve
        the next page. Resources with a total size larger than 5MB or a field
        count larger than 50,000 might not be fully searchable as the server
        might trim its generated search index in those cases. Note: FHIR
        resources are indexed asynchronously, so there might be a slight delay
        between the time a resource is created or changed, and the time when the
        change reflects in search results. The only exception is resource
        identifier data, which is indexed synchronously as a special index. As a
        result, searching using resource identifier is not subject to indexing
        delay. To use the special synchronous index, the search term for
        identifier should be in the pattern `identifier=[system]|[value]` or
        `identifier=[value]`, and any of the following search result parameters
        can be used: * `_count` * `_include` * `_revinclude` * `_summary` *
        `_elements` If your query contains any other search parameters, the
        standard asynchronous index will be used instead. Note that searching
        against the special index is optimized for resolving a small number of
        matches. The search isn't optimized if your identifier search criteria
        matches a large number (i.e. more than 2,000) of resources. For a search
        query that will match a large number of resources, you can avoiding
        using the special synchronous index by including an additional `_sort`
        parameter in your query. Use `_sort=-_lastUpdated` if you want to keep
        the default sorting order. Note: The special synchronous identifier
        index are currently disabled for DocumentReference and DocumentManifest
        searches. For samples and detailed information, see [Searching for FHIR
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search)
        and [Advanced FHIR search
        features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{resourceType}/_search:
    parameters: *ref_1
    post:
      description: >-
        Searches for resources in the given FHIR store according to criteria
        specified as query parameters. Implements the FHIR standard search
        interaction ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#search),
        [STU3](https://hl7.org/fhir/STU3/http.html#search),
        [R4](https://hl7.org/fhir/R4/http.html#search),
        [R5](https://hl7.org/fhir/R5/http.html#search)) using the search
        semantics described in the FHIR Search specification
        ([DSTU2](https://hl7.org/fhir/DSTU2/search.html),
        [STU3](https://hl7.org/fhir/STU3/search.html),
        [R4](https://hl7.org/fhir/R4/search.html),
        [R5](https://hl7.org/fhir/R5/search.html)). Supports four methods of
        search defined by the specification: * `GET [base]?[parameters]` to
        search across all resources. * `GET [base]/[type]?[parameters]` to
        search resources of a specified type. * `POST
        [base]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method across all resources. * `POST
        [base]/[type]/_search?[parameters]` as an alternate form having the same
        semantics as the `GET` method for the specified type. The `GET` and
        `POST` methods do not support compartment searches. The `POST` method
        does not support `application/x-www-form-urlencoded` search parameters.
        On success, the response body contains a JSON-encoded representation of
        a `Bundle` resource of type `searchset`, containing the results of the
        search. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The server's capability
        statement, retrieved through capabilities, indicates what search
        parameters are supported on each FHIR resource. A list of all search
        parameters defined by the specification can be found in the FHIR Search
        Parameter Registry
        ([STU3](https://hl7.org/fhir/STU3/searchparameter-registry.html),
        [R4](https://hl7.org/fhir/R4/searchparameter-registry.html),
        [R5](https://hl7.org/fhir/R5/searchparameter-registry.html)). FHIR
        search parameters for DSTU2 can be found on each resource's definition
        page. Supported search modifiers: `:missing`, `:exact`, `:contains`,
        `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and
        `recurse` (DSTU2 and STU3) or `:iterate` (R4 and R5). Supported search
        result parameters: `_sort`, `_count`, `_include`, `_revinclude`,
        `_summary=text`, `_summary=data`, and `_elements`. The maximum number of
        search results returned defaults to 100, which can be overridden by the
        `_count` parameter up to a maximum limit of 1000. The server might
        return fewer resources than requested to prevent excessively large
        responses. If there are additional results, the returned `Bundle`
        contains a link of `relation` "next", which has a `_page_token`
        parameter for an opaque pagination token that can be used to retrieve
        the next page. Resources with a total size larger than 5MB or a field
        count larger than 50,000 might not be fully searchable as the server
        might trim its generated search index in those cases. Note: FHIR
        resources are indexed asynchronously, so there might be a slight delay
        between the time a resource is created or changed, and the time when the
        change reflects in search results. The only exception is resource
        identifier data, which is indexed synchronously as a special index. As a
        result, searching using resource identifier is not subject to indexing
        delay. To use the special synchronous index, the search term for
        identifier should be in the pattern `identifier=[system]|[value]` or
        `identifier=[value]`, and any of the following search result parameters
        can be used: * `_count` * `_include` * `_revinclude` * `_summary` *
        `_elements` If your query contains any other search parameters, the
        standard asynchronous index will be used instead. Note that searching
        against the special index is optimized for resolving a small number of
        matches. The search isn't optimized if your identifier search criteria
        matches a large number (i.e. more than 2,000) of resources. For a search
        query that will match a large number of resources, you can avoiding
        using the special synchronous index by including an additional `_sort`
        parameter in your query. Use `_sort=-_lastUpdated` if you want to keep
        the default sorting order. Note: The special synchronous identifier
        index are currently disabled for DocumentReference and DocumentManifest
        searches. For samples and detailed information, see [Searching for FHIR
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search)
        and [Advanced FHIR search
        features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.search-type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchResourcesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: resourceType
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything:
    parameters: *ref_1
    get:
      description: >-
        Retrieves a Patient resource and resources related to that patient.
        Implements the FHIR extended operation Patient-everything
        ([DSTU2](https://hl7.org/fhir/DSTU2/patient-operations.html#everything),
        [STU3](https://hl7.org/fhir/STU3/patient-operations.html#everything),
        [R4](https://hl7.org/fhir/R4/patient-operation-everything.html),
        [R5](https://hl7.org/fhir/R5/patient-operation-everything.html)). On
        success, the response body contains a JSON-encoded representation of a
        `Bundle` resource of type `searchset`, containing the results of the
        operation. Errors generated by the FHIR store contain a JSON-encoded
        `OperationOutcome` resource describing the reason for the error. If the
        request cannot be mapped to a valid API method on a FHIR store, a
        generic GCP error might be returned instead. The resources in scope for
        the response are: * The patient resource itself. * All the resources
        directly referenced by the patient resource. * Resources directly
        referencing the patient resource that meet the inclusion criteria. The
        inclusion criteria are based on the membership rules in the patient
        compartment definition
        ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
        [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html),
        [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html),
        [R5](http://hl7.org/fhir/R5/compartmentdefinition-patient.html)), which
        details the eligible resource types and referencing search parameters.
        For samples that show how to call `Patient-everything`, see [Getting all
        patient compartment
        resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: PatientId
          required: true
          schema:
            type: string
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
            format: int32
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: _type
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata:
    parameters: *ref_1
    get:
      description: >-
        Gets the FHIR capability statement
        ([STU3](https://hl7.org/fhir/STU3/capabilitystatement.html),
        [R4](https://hl7.org/fhir/R4/capabilitystatement.html),
        [R5](https://hl7.org/fhir/R5/capabilitystatement.html)), or the
        [conformance statement](https://hl7.org/fhir/DSTU2/conformance.html) in
        the DSTU2 case for the store, which contains a description of
        functionality supported by the server. Implements the FHIR standard
        capabilities interaction
        ([STU3](https://hl7.org/fhir/STU3/http.html#capabilities),
        [R4](https://hl7.org/fhir/R4/http.html#capabilities),
        [R5](https://hl7.org/fhir/R5/http.html#capabilities)), or the
        [conformance
        interaction](https://hl7.org/fhir/DSTU2/http.html#conformance) in the
        DSTU2 case. On success, the response body contains a JSON-encoded
        representation of a `CapabilityStatement` resource.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.capabilities
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir:
    parameters: *ref_1
    post:
      description: >-
        Executes all the requests in the given Bundle. Implements the FHIR
        standard batch/transaction interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#transaction),
        [STU3](https://hl7.org/fhir/STU3/http.html#transaction),
        [R4](https://hl7.org/fhir/R4/http.html#transaction),
        [R5](https://hl7.org/fhir/R5/http.html#transaction)). Supports all
        interactions within a bundle, except search. This method accepts Bundles
        of type `batch` and `transaction`, processing them according to the
        batch processing rules
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#2.1.0.16.1),
        [STU3](https://hl7.org/fhir/STU3/http.html#2.21.0.17.1),
        [R4](https://hl7.org/fhir/R4/http.html#brules),
        [R5](https://hl7.org/fhir/R5/http.html#brules)) and transaction
        processing rules
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#2.1.0.16.2),
        [STU3](https://hl7.org/fhir/STU3/http.html#2.21.0.17.2),
        [R4](https://hl7.org/fhir/R4/http.html#trules),
        [R5](https://hl7.org/fhir/R5/http.html#trules)). The request body must
        contain a JSON-encoded FHIR `Bundle` resource, and the request headers
        must contain `Content-Type: application/fhir+json`. For a batch bundle
        or a successful transaction, the response body contains a JSON-encoded
        representation of a `Bundle` resource of type `batch-response` or
        `transaction-response` containing one entry for each entry in the
        request, with the outcome of processing the entry. In the case of an
        error for a transaction bundle, the response body contains a
        JSON-encoded `OperationOutcome` resource describing the reason for the
        error. If the request cannot be mapped to a valid API method on a FHIR
        store, a generic GCP error might be returned instead. This method checks
        permissions for each request in the bundle. The `executeBundle`
        permission is required to call this method, but you must also grant
        sufficient permissions to execute the individual requests in the bundle.
        For example, if the bundle contains a request to create a FHIR resource,
        the caller must also have been granted the
        `healthcare.fhirResources.create` permission. You can use audit logs to
        view the permissions for `executeBundle` and each request in the bundle.
        For more information, see [Viewing Cloud Audit
        logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging).
        For samples that show how to call `executeBundle`, see [Managing FHIR
        resources using FHIR
        bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history:
    parameters: *ref_1
    get:
      description: >-
        Lists all the versions of a resource (including the current version and
        deleted versions) from the FHIR store. Implements the per-resource form
        of the FHIR standard history interaction
        ([DSTU2](https://hl7.org/fhir/DSTU2/http.html#history),
        [STU3](https://hl7.org/fhir/STU3/http.html#history),
        [R4](https://hl7.org/fhir/R4/http.html#history),
        [R5](https://hl7.org/fhir/R5/http.html#history)). On success, the
        response body contains a JSON-encoded representation of a `Bundle`
        resource of type `history`, containing the version history sorted from
        most recent to oldest versions. Errors generated by the FHIR store
        contain a JSON-encoded `OperationOutcome` resource describing the reason
        for the error. If the request cannot be mapped to a valid API method on
        a FHIR store, a generic GCP error might be returned instead. For samples
        that show how to call `history`, see [Listing FHIR resource
        versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.history
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
            format: int32
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: _at
          schema:
            type: string
        - in: query
          name: _page_token
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge:
    parameters: *ref_1
    delete:
      description: >-
        Deletes all the historical versions of a resource (excluding the current
        version) from the FHIR store. To remove all versions of a resource,
        first delete the current version and then call this method. This is not
        a FHIR standard operation. For samples that show how to call
        `Resource-purge`, see [Deleting historical versions of a FHIR
        resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId1
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/$export:
    parameters: *ref_1
    get:
      description: >-
        Bulk exports all resources from the FHIR store to the specified
        destination. Implements the FHIR implementation guide [system level
        $export](https://build.fhir.org/ig/HL7/bulk-data/export.html#endpoint---system-level-export.
        The following headers must be set in the request: * `Accept`: specifies
        the format of the `OperationOutcome` response. Only
        `application/fhir+json` is supported. * `Prefer`: specifies whether the
        response is immediate or asynchronous. Must be to `respond-async`
        because only asynchronous responses are supported. Specify the
        destination for the server to write result files by setting the Cloud
        Storage location bulk_export_gcs_destination on the FHIR store. URI of
        an existing Cloud Storage directory where the server writes result
        files, in the format gs://{bucket-id}/{path/to/destination/dir}. If
        there is no trailing slash, the service appends one when composing the
        object path. The user is responsible for creating the Cloud Storage
        bucket referenced. Supports the following query parameters: * `_type`:
        string of comma-delimited FHIR resource types. If provided, only the
        resources of the specified type(s) are exported. * `_since`: if
        provided, only the resources that are updated after the specified time
        are exported. * `_outputFormat`: optional, specify ndjson to export data
        in NDJSON format. Exported file names use the format:
        {export_id}_{resource_type}.ndjson. On success, the `Content-Location`
        header of the response is set to a URL that the user can use to query
        the status of the export. The URL is in the format:
        `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/operations/{export_id}`.
        See get-fhir-operation-status for more information. Errors generated by
        the FHIR store contain a JSON-encoded `OperationOutcome` resource
        describing the reason for the error.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.bulk-export
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: query
          name: _since
          schema:
            type: string
        - in: query
          name: _type
          schema:
            type: string
        - in: query
          name: outputFormat
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/$validate:
    parameters: *ref_1
    post:
      description: >-
        Validates an input FHIR resource's conformance to its profiles and the
        profiles configured on the FHIR store. Implements the FHIR extended
        operation $validate
        ([DSTU2](https://hl7.org/fhir/DSTU2/resource-operations.html#validate),
        [STU3](https://hl7.org/fhir/STU3/resource-operations.html#validate),
        [R4](https://hl7.org/fhir/R4/resource-operation-validate.html). or
        [R5](https://hl7.org/fhir/R5/resource-operation-validate.html)). The
        request body must contain a JSON-encoded FHIR resource, and the request
        headers must contain `Content-Type: application/fhir+json`. The
        `Parameters` input syntax is not supported. The `profile` query
        parameter can be used to request that the resource only be validated
        against a specific profile. If a profile with the given URL cannot be
        found in the FHIR store then an error is returned. Errors generated by
        validation contain a JSON-encoded `OperationOutcome` resource describing
        the reason for the error. If the request cannot be mapped to a valid API
        method on a FHIR store, a generic GCP error might be returned instead.
      operationId: healthcare.projects.locations.datasets.fhirStores.fhir.Resource-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: fhirId
          required: true
          schema:
            type: string
        - in: query
          name: profile
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Consent/{ConsentId}/$consent-enforcement-status:
    parameters: *ref_1
    get:
      description: >-
        Returns the consent enforcement status of a single consent resource. On
        success, the response body contains a JSON-encoded representation of a
        `Parameters` (http://hl7.org/fhir/parameters.html) FHIR resource,
        containing the current enforcement status. Does not support DSTU2.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.Consent-enforcement-status
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: ConsentId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$consent-enforcement-status:
    parameters: *ref_1
    get:
      description: >-
        Returns the consent enforcement status of all consent resources for a
        patient. On success, the response body contains a JSON-encoded
        representation of a bundle of `Parameters`
        (http://hl7.org/fhir/parameters.html) FHIR resources, containing the
        current enforcement status for each consent resource of the patient.
        Does not support DSTU2.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.fhir.Patient-consent-enforcement-status
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: PatientId
          required: true
          schema:
            type: string
        - in: query
          name: _count
          schema:
            type: integer
            format: int32
        - in: query
          name: _page_token
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the status of operations as defined in the FHIR specification.
        Implements the FHIR implementation guide [bulk data status
        request](https://build.fhir.org/ig/HL7/bulk-data/export.html#bulk-data-status-request).
        Operations can have one of these states: * in-progress: response status
        code is `202` and `X-Progress` header is set to `in progress`. *
        complete: response status code is `200` and the body is a JSON-encoded
        operation response as defined by the spec. For a bulk export, this
        response is defined in
        https://build.fhir.org/ig/HL7/bulk-data/export.html#response---complete-status.
        * error: response status code is `5XX`, and the body is a JSON-encoded
        `OperationOutcome` resource describing the reason for the error.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.operations.get-fhir-operation-status
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes operations as defined in the FHIR specification. Implements the
        FHIR implementation guide [bulk data delete
        request](https://build.fhir.org/ig/HL7/bulk-data/export.html#bulk-data-delete-request).
        Returns success if the operation was successfully cancelled. If the
        operation is complete, or has already been cancelled, returns an error
        response.
      operationId: >-
        healthcare.projects.locations.datasets.fhirStores.operations.delete-fhir-operation
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: fhirStoresId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: healthcare.projects.locations.datasets.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: healthcare.projects.locations.datasets.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: healthcare.projects.locations.datasets.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: datasetsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/services/nlp:analyzeEntities:
    parameters: *ref_1
    post:
      description: >-
        Analyze heathcare entity in a document. Its response includes the
        recognized entity mentions and the relationships between them.
        AnalyzeEntities uses context aware models to detect entities.
      operationId: healthcare.projects.locations.services.nlp.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-healthcare
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-healthcare
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
