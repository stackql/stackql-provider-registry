openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Trace API
  description: 'Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. '
  version: v2
  x-discovery-doc-revision: '20230816'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/trace'
servers:
  - url: 'https://cloudtrace.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/trace.append': Write Trace data for a project or application
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    TimeEvents:
      description: 'A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans.'
      type: object
      properties:
        droppedMessageEventsCount:
          format: int32
          description: 'The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped.'
          type: integer
        droppedAnnotationsCount:
          format: int32
          type: integer
          description: 'The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped.'
        timeEvent:
          items:
            $ref: '#/components/schemas/TimeEvent'
          description: A collection of `TimeEvent`s.
          type: array
      id: TimeEvents
    AttributeValue:
      type: object
      id: AttributeValue
      properties:
        boolValue:
          type: boolean
          description: A Boolean value represented by `true` or `false`.
        stringValue:
          $ref: '#/components/schemas/TruncatableString'
          description: A string up to 256 bytes long.
        intValue:
          format: int64
          type: string
          description: A 64-bit signed integer.
      description: 'The allowed types for `[VALUE]` in a `[KEY]:[VALUE]` attribute.'
    Status:
      type: object
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        details:
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
      id: Status
    StackTrace:
      properties:
        stackFrames:
          description: Stack frames in this stack trace. A maximum of 128 frames are allowed.
          $ref: '#/components/schemas/StackFrames'
        stackTraceHashId:
          description: The hash ID is used to conserve network bandwidth for duplicate stack traces within a single trace. Often multiple spans will have identical stack traces. The first occurrence of a stack trace should contain both the `stackFrame` content and a value in `stackTraceHashId`. Subsequent spans within the same request can refer to that stack trace by only setting `stackTraceHashId`.
          type: string
          format: int64
      description: A call stack appearing in a trace.
      type: object
      id: StackTrace
    Annotation:
      type: object
      id: Annotation
      description: Text annotation with a set of attributes.
      properties:
        description:
          $ref: '#/components/schemas/TruncatableString'
          description: A user-supplied message describing the event. The maximum length for the description is 256 bytes.
        attributes:
          description: A set of attributes on the annotation. You can have up to 4 attributes per Annotation.
          $ref: '#/components/schemas/Attributes'
    Module:
      type: object
      description: Binary module.
      id: Module
      properties:
        buildId:
          $ref: '#/components/schemas/TruncatableString'
          description: 'A unique identifier for the module, usually a hash of its contents (up to 128 bytes).'
        module:
          description: 'For example: main binary, kernel modules, and dynamic libraries such as libc.so, sharedlib.so (up to 256 bytes).'
          $ref: '#/components/schemas/TruncatableString'
    Links:
      type: object
      id: Links
      properties:
        droppedLinksCount:
          description: 'The number of dropped links after the maximum size was enforced. If this value is 0, then no links were dropped.'
          type: integer
          format: int32
        link:
          type: array
          description: A collection of links.
          items:
            $ref: '#/components/schemas/Link'
      description: 'A collection of links, which are references from this span to a span in the same or different trace.'
    StackFrames:
      properties:
        droppedFramesCount:
          description: 'The number of stack frames that were dropped because there were too many stack frames. If this value is 0, then no stack frames were dropped.'
          type: integer
          format: int32
        frame:
          items:
            $ref: '#/components/schemas/StackFrame'
          description: Stack frames in this call stack.
          type: array
      description: 'A collection of stack frames, which can be truncated.'
      id: StackFrames
      type: object
    StackFrame:
      type: object
      properties:
        originalFunctionName:
          description: 'An un-mangled function name, if `function_name` is mangled. To get information about name mangling, run [this search](https://www.google.com/search?q=cxx+name+mangling). The name can be fully-qualified (up to 1024 bytes).'
          $ref: '#/components/schemas/TruncatableString'
        loadModule:
          $ref: '#/components/schemas/Module'
          description: The binary module from where the code was loaded.
        fileName:
          description: The name of the source file where the function call appears (up to 256 bytes).
          $ref: '#/components/schemas/TruncatableString'
        functionName:
          $ref: '#/components/schemas/TruncatableString'
          description: The fully-qualified name that uniquely identifies the function or method that is active in this frame (up to 1024 bytes).
        columnNumber:
          type: string
          format: int64
          description: 'The column number where the function call appears, if available. This is important in JavaScript because of its anonymous functions.'
        sourceVersion:
          description: The version of the deployed source code (up to 128 bytes).
          $ref: '#/components/schemas/TruncatableString'
        lineNumber:
          description: The line number in `file_name` where the function call appears.
          format: int64
          type: string
      id: StackFrame
      description: Represents a single stack frame in a stack trace.
    TimeEvent:
      type: object
      description: A time-stamped annotation or message event in the Span.
      id: TimeEvent
      properties:
        annotation:
          description: Text annotation with a set of attributes.
          $ref: '#/components/schemas/Annotation'
        messageEvent:
          description: An event describing a message sent/received between Spans.
          $ref: '#/components/schemas/MessageEvent'
        time:
          description: The timestamp indicating the time the event occurred.
          type: string
          format: google-datetime
    Link:
      type: object
      description: 'A pointer from the current span to another span in the same trace or in a different trace. For example, this can be used in batching operations, where a single batch handler processes multiple requests from different traces or when the handler receives a request from a different project.'
      properties:
        traceId:
          description: 'The `[TRACE_ID]` for a trace within a project.'
          type: string
        attributes:
          description: A set of attributes on the link. Up to 32 attributes can be specified per link.
          $ref: '#/components/schemas/Attributes'
        type:
          description: The relationship of the current span relative to the linked span.
          type: string
          enumDescriptions:
            - The relationship of the two spans is unknown.
            - The linked span is a child of the current span.
            - The linked span is a parent of the current span.
          enum:
            - TYPE_UNSPECIFIED
            - CHILD_LINKED_SPAN
            - PARENT_LINKED_SPAN
        spanId:
          description: 'The `[SPAN_ID]` for a span within a trace.'
          type: string
      id: Link
    Empty:
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      id: Empty
    TruncatableString:
      id: TruncatableString
      properties:
        truncatedByteCount:
          description: 'The number of bytes removed from the original string. If this value is 0, then the string was not shortened.'
          format: int32
          type: integer
        value:
          type: string
          description: 'The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.'
      type: object
      description: Represents a string that might be shortened to a specified length.
    Span:
      properties:
        links:
          $ref: '#/components/schemas/Links'
          description: Links associated with the span. You can have up to 128 links per Span.
        spanKind:
          enum:
            - SPAN_KIND_UNSPECIFIED
            - INTERNAL
            - SERVER
            - CLIENT
            - PRODUCER
            - CONSUMER
          enumDescriptions:
            - Unspecified. Do NOT use as default. Implementations MAY assume SpanKind.INTERNAL to be default.
            - Indicates that the span is used internally. Default value.
            - Indicates that the span covers server-side handling of an RPC or other remote network request.
            - Indicates that the span covers the client-side wrapper around an RPC or other remote request.
            - 'Indicates that the span describes producer sending a message to a broker. Unlike client and server, there is no direct critical path latency relationship between producer and consumer spans (e.g. publishing a message to a pubsub service).'
            - 'Indicates that the span describes consumer receiving a message from a broker. Unlike client and server, there is no direct critical path latency relationship between producer and consumer spans (e.g. receiving a message from a pubsub service subscription).'
          type: string
          description: 'Optional. Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.'
        status:
          $ref: '#/components/schemas/Status'
          description: Optional. The final status for this span.
        endTime:
          description: 'Required. The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.'
          type: string
          format: google-datetime
        parentSpanId:
          description: 'The `[SPAN_ID]` of this span''s parent span. If this is a root span, then this field must be empty.'
          type: string
        startTime:
          description: 'Required. The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server''s application handler starts running.'
          type: string
          format: google-datetime
        timeEvents:
          description: A set of time events. You can have up to 32 annotations and 128 message events per span.
          $ref: '#/components/schemas/TimeEvents'
        stackTrace:
          $ref: '#/components/schemas/StackTrace'
          description: Stack trace captured at the start of the span.
        displayName:
          $ref: '#/components/schemas/TruncatableString'
          description: 'Required. A description of the span''s operation (up to 128 bytes). Cloud Trace displays the description in the Cloud console. For example, the display name can be a qualified method name or a file name and a line number where the operation is called. A best practice is to use the same display name within an application and at the same call point. This makes it easier to correlate spans in different traces.'
        sameProcessAsParentSpan:
          type: boolean
          description: 'Optional. Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Trace is unable to take advantage of this helpful information.'
        attributes:
          $ref: '#/components/schemas/Attributes'
          description: A set of attributes on the span. You can have up to 32 attributes per span.
        childSpanCount:
          description: 'Optional. The number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.'
          type: integer
          format: int32
        spanId:
          type: string
          description: 'Required. The `[SPAN_ID]` portion of the span''s resource name.'
        name:
          type: string
          description: 'Required. The resource name of the span in the following format: * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]` `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. It should not be zero. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array. It should not be zero. .'
      description: 'A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous. There might be gaps or overlaps between spans in a trace.'
      type: object
      id: Span
    BatchWriteSpansRequest:
      description: The request message for the `BatchWriteSpans` method.
      id: BatchWriteSpansRequest
      type: object
      properties:
        spans:
          description: 'Required. A list of new spans. The span names must not match existing spans, otherwise the results are undefined.'
          type: array
          items:
            $ref: '#/components/schemas/Span'
    Attributes:
      properties:
        droppedAttributesCount:
          format: int32
          type: integer
          description: The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
        attributeMap:
          additionalProperties:
            $ref: '#/components/schemas/AttributeValue'
          description: 'A set of attributes. Each attribute''s key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the boolean values `true` or `false`. For example: "/instance_id": { "string_value": { "value": "my-instance" } } "/http/request_bytes": { "int_value": 300 } "example.com/myattribute": { "bool_value": false }'
          type: object
      id: Attributes
      description: A set of attributes as key-value pairs.
      type: object
    MessageEvent:
      properties:
        type:
          description: Type of MessageEvent. Indicates whether the message was sent or received.
          enum:
            - TYPE_UNSPECIFIED
            - SENT
            - RECEIVED
          type: string
          enumDescriptions:
            - Unknown event type.
            - Indicates a sent message.
            - Indicates a received message.
        id:
          type: string
          format: int64
          description: An identifier for the MessageEvent's message that can be used to match `SENT` and `RECEIVED` MessageEvents.
        compressedSizeBytes:
          description: 'The number of compressed bytes sent or received. If missing, the compressed size is assumed to be the same size as the uncompressed size.'
          format: int64
          type: string
        uncompressedSizeBytes:
          type: string
          description: The number of uncompressed bytes sent or received.
          format: int64
      id: MessageEvent
      description: An event describing a message sent/received between Spans.
      type: object
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
  x-stackQL-resources:
    spans_span:
      id: google.cloudtrace.spans_span
      name: spans_span
      title: Spans Span
      methods:
        create_span:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1traces~1{tracesId}~1spans~1{spansId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/spans_span/methods/create_span'
        update: []
        delete: []
    traces:
      id: google.cloudtrace.traces
      name: traces
      title: Traces
      methods:
        batch_write:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1traces:batchWrite/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v2/projects/{projectsId}/traces/{tracesId}/spans/{spansId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
    post:
      description: Creates a new span.
      operationId: cloudtrace.projects.traces.spans.createSpan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Span'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Span'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: tracesId
          required: true
          schema:
            type: string
        - in: path
          name: spansId
          required: true
          schema:
            type: string
      x-stackQL-resource: spans_span
      x-stackQL-method: create_span
      x-stackQL-verb: insert
  '/v2/projects/{projectsId}/traces:batchWrite':
    parameters: *ref_1
    post:
      description: Batch writes new spans to new or existing traces. You cannot update existing spans.
      operationId: cloudtrace.projects.traces.batchWrite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchWriteSpansRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/trace.append'
          Oauth2c:
            - 'https://www.googleapis.com/auth/trace.append'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: traces
      x-stackQL-method: batch_write
      x-stackQL-verb: exec
