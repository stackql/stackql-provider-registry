openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Container Analysis API
  description: 'An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.'
  version: v1
  x-discovery-doc-revision: '20230728'
  x-generated-date: '2023-08-10'
externalDocs:
  url: 'https://cloud.google.com/container-analysis/api/reference/rest/'
servers:
  - url: 'https://containeranalysis.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Status:
      type: object
      id: Status
      properties:
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        details:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
        code:
          format: int32
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    EnvelopeSignature:
      type: object
      id: EnvelopeSignature
      properties:
        sig:
          format: byte
          type: string
        keyid:
          type: string
    WindowsDetail:
      properties:
        name:
          type: string
          description: Required. The name of this vulnerability.
        cpeUri:
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.'
          type: string
        description:
          description: The description of this vulnerability.
          type: string
        fixingKbs:
          items:
            $ref: '#/components/schemas/KnowledgeBase'
          type: array
          description: Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
      id: WindowsDetail
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      properties:
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.'
        packagePath:
          type: string
          description: Path to the package.json. e.g. workspace/path/to/package
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
      description: Npm package to upload to Artifact Registry upon successful completion of all build steps.
      type: object
    DSSEAttestationNote:
      type: object
      properties:
        hint:
          description: DSSEHint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/DSSEHint'
      id: DSSEAttestationNote
    UpgradeDistribution:
      properties:
        cve:
          description: The cve tied to this Upgrade.
          items:
            type: string
          type: array
        classification:
          type: string
          description: 'The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)'
        severity:
          type: string
          description: The severity as specified by the upstream operating system.
        cpeUri:
          description: 'Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.'
          type: string
      type: object
      id: UpgradeDistribution
      description: 'The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.'
    SlsaRecipe:
      type: object
      properties:
        entryPoint:
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
          type: string
        environment:
          type: object
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        definedInMaterial:
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
          type: string
          format: int64
        type:
          type: string
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
        arguments:
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      id: SlsaRecipe
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      type: object
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      properties:
        path:
          type: string
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
    CloudRepoSourceContext:
      id: CloudRepoSourceContext
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      properties:
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: 'An alias, which may be a branch or tag.'
        revisionId:
          type: string
          description: A revision ID.
        repoId:
          description: The ID of the repo.
          $ref: '#/components/schemas/RepoId'
      type: object
    Material:
      type: object
      properties:
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
      id: Material
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      properties:
        fileHash:
          description: Collection of file hashes.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash'
          type: array
      type: object
      description: 'Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
    UpgradeNote:
      id: UpgradeNote
      description: 'An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.'
      type: object
      properties:
        distributions:
          description: Metadata about the upgrade for each specific operating system.
          type: array
          items:
            $ref: '#/components/schemas/UpgradeDistribution'
        version:
          description: Required for non-Windows OS. The version of the package in machine + human readable form.
          $ref: '#/components/schemas/Version'
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: Required for Windows OS. Represents the metadata about the Windows update.
    DiscoveryNote:
      type: object
      properties:
        analysisKind:
          description: Required. Immutable. The kind of analysis that is handled by this discovery.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
      id: DiscoveryNote
      description: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
    TimeSpan:
      type: object
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          format: google-datetime
          description: Start of time span.
          type: string
      description: 'Start and end times for a build execution phase. Next ID: 3'
      id: TimeSpan
    Hash:
      properties:
        type:
          type: string
          description: 'Required. The type of hash that was performed, e.g. "SHA-256".'
        value:
          format: byte
          description: Required. The hash value.
          type: string
      description: Container message for hash values.
      id: Hash
      type: object
    AttestationOccurrence:
      description: 'Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.'
      id: AttestationOccurrence
      type: object
      properties:
        signatures:
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
          type: array
          items:
            $ref: '#/components/schemas/Signature'
        jwts:
          description: 'One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.'
          items:
            $ref: '#/components/schemas/Jwt'
          type: array
        serializedPayload:
          type: string
          format: byte
          description: Required. The serialized payload that is verified by one or more `signatures`.
    Command:
      id: Command
      type: object
      properties:
        args:
          items:
            type: string
          type: array
          description: Command-line arguments used when executing this command.
        dir:
          description: Working directory (relative to project source root) used when running this command.
          type: string
        env:
          items:
            type: string
          type: array
          description: Environment variables set before running this command.
        id:
          description: 'Optional unique identifier for this command, used in wait_for to reference this command as a dependency.'
          type: string
        waitFor:
          items:
            type: string
          type: array
          description: The ID(s) of the command(s) that this command depends on.
        name:
          type: string
          description: 'Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.'
      description: Command describes a step performed as part of the build pipeline.
    Assessment:
      description: Assessment provides all information that is related to a single vulnerability for this product.
      type: object
      id: Assessment
      properties:
        remediations:
          description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
          items:
            $ref: '#/components/schemas/Remediation'
          type: array
        cve:
          deprecated: true
          type: string
          description: 'Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.'
        justification:
          $ref: '#/components/schemas/Justification'
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
        impacts:
          type: array
          items:
            type: string
          description: 'Contains information about the impact of this vulnerability, this will change with time.'
        state:
          type: string
          description: Provides the state of this Vulnerability assessment.
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - 'It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.'
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
        relatedUris:
          description: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
        longDescription:
          type: string
          description: A detailed description of this Vex.
        vulnerabilityId:
          type: string
          description: 'The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.'
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      properties:
        kmsKeyName:
          type: string
          description: Cloud KMS key name to use to decrypt these envs.
        secretEnv:
          type: object
          additionalProperties:
            format: byte
            type: string
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
      description: 'Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.'
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
    CVSS:
      id: CVSS
      properties:
        exploitabilityScore:
          format: float
          type: number
        authentication:
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        attackVector:
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
        integrityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        baseScore:
          type: number
          description: The base score is a function of the base metric scores.
          format: float
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        impactScore:
          format: float
          type: number
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
      type: object
      description: 'Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.'
    Detail:
      type: object
      description: A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
      properties:
        affectedPackage:
          description: Required. The package this vulnerability affects.
          type: string
        affectedVersionEnd:
          description: 'The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
          $ref: '#/components/schemas/Version'
        affectedVersionStart:
          $ref: '#/components/schemas/Version'
          description: 'The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
        severityName:
          type: string
          description: The distro assigned severity of this vulnerability.
        vendor:
          type: string
          description: The name of the vendor of the product.
        fixedCpeUri:
          description: 'The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.'
          type: string
        packageType:
          type: string
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
        sourceUpdateTime:
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          type: string
          format: google-datetime
        description:
          type: string
          description: A vendor-specific description of this vulnerability.
        affectedCpeUri:
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.'
          type: string
        fixedPackage:
          type: string
          description: The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
        isObsolete:
          type: boolean
          description: Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
        source:
          type: string
          description: The source from which the information in this Detail was obtained.
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
      id: Detail
    GetPolicyOptions:
      properties:
        requestedPolicyVersion:
          type: integer
          description: 'Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          format: int32
      type: object
      description: Encapsulates settings provided to GetIamPolicy.
      id: GetPolicyOptions
    ComplianceOccurrence:
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          items:
            $ref: '#/components/schemas/NonCompliantFile'
          type: array
      type: object
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
      id: ComplianceOccurrence
    ImageOccurrence:
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      properties:
        layerInfo:
          description: 'This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.'
          items:
            $ref: '#/components/schemas/Layer'
          type: array
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
          description: Required. The fingerprint of the derived image.
        distance:
          format: int32
          description: Output only. The number of layers by which this image differs from the associated image basis.
          type: integer
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
      type: object
      id: ImageOccurrence
    BuildNote:
      properties:
        builderVersion:
          type: string
          description: Required. Immutable. Version of the builder which produced this build.
      id: BuildNote
      type: object
      description: Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
    Remediation:
      type: object
      id: Remediation
      properties:
        remediationUri:
          $ref: '#/components/schemas/RelatedUrl'
          description: Contains the URL where to obtain the remediation.
        details:
          type: string
          description: Contains a comprehensive human-readable discussion of the remediation.
        remediationType:
          type: string
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          description: The type of remediation that can be applied.
      description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      properties:
        versionName:
          description: 'Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*'
          type: string
        env:
          description: 'Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step.'
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      properties:
        environment:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        parameters:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
      type: object
      description: Identifies the event that kicked off the build.
    SBOMReferenceOccurrence:
      id: SBOMReferenceOccurrence
      properties:
        signatures:
          description: The signatures over the payload.
          type: array
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
        payload:
          description: The actual payload that contains the SBOM reference data.
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
        payloadType:
          type: string
          description: 'The kind of payload that SbomReferenceIntotoPayload takes. Since it''s in the intoto format, this value is expected to be ''application/vnd.in-toto+json''.'
      description: 'The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.'
      type: object
    RepoId:
      description: A unique identifier for a Cloud Repo.
      type: object
      properties:
        projectRepoId:
          description: A combination of a project ID and a repo name.
          $ref: '#/components/schemas/ProjectRepoId'
        uid:
          type: string
          description: 'A server-assigned, globally unique identifier.'
      id: RepoId
    BatchCreateNotesResponse:
      properties:
        notes:
          description: The notes that were created.
          items:
            $ref: '#/components/schemas/Note'
          type: array
      type: object
      id: BatchCreateNotesResponse
      description: Response for creating notes in batch.
    Note:
      type: object
      properties:
        expirationTime:
          description: Time of expiration for this note. Empty if note does not expire.
          type: string
          format: google-datetime
        vulnerabilityAssessment:
          $ref: '#/components/schemas/VulnerabilityAssessmentNote'
          description: A note describing a vulnerability assessment.
        updateTime:
          description: Output only. The time this note was last updated. This field can be used as a filter in list requests.
          format: google-datetime
          type: string
        upgrade:
          description: A note describing available package upgrades.
          $ref: '#/components/schemas/UpgradeNote'
        compliance:
          description: A note describing a compliance check.
          $ref: '#/components/schemas/ComplianceNote'
        dsseAttestation:
          description: A note describing a dsse attestation note.
          $ref: '#/components/schemas/DSSEAttestationNote'
        longDescription:
          description: A detailed description of this note.
          type: string
        kind:
          description: Output only. The type of analysis. This field can be used as a filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
        relatedUrl:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: URLs associated with this note.
        build:
          $ref: '#/components/schemas/BuildNote'
          description: A note describing build provenance for a verifiable build.
        shortDescription:
          description: A one sentence description of this note.
          type: string
        attestation:
          $ref: '#/components/schemas/AttestationNote'
          description: A note describing an attestation role.
        discovery:
          description: A note describing the initial analysis of a resource.
          $ref: '#/components/schemas/DiscoveryNote'
        relatedNoteNames:
          items:
            type: string
          description: Other notes related to this note.
          type: array
        sbomReference:
          description: A note describing an SBOM reference.
          $ref: '#/components/schemas/SBOMReferenceNote'
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time this note was created. This field can be used as a filter in list requests.
        image:
          description: A note describing a base image.
          $ref: '#/components/schemas/ImageNote'
        deployment:
          description: A note describing something that can be deployed.
          $ref: '#/components/schemas/DeploymentNote'
        name:
          description: 'Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.'
          type: string
        package:
          $ref: '#/components/schemas/PackageNote'
          description: A note describing a package hosted by various package managers.
        vulnerability:
          description: A note describing a package vulnerability.
          $ref: '#/components/schemas/VulnerabilityNote'
      id: Note
      description: A type of analysis that can be done for a resource.
    BuildDefinition:
      type: object
      id: BuildDefinition
      properties:
        buildType:
          type: string
        resolvedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
        externalParameters:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
        internalParameters:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
    GerritSourceContext:
      properties:
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: 'An alias, which may be a branch or tag.'
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          description: A revision (commit) ID.
          type: string
        gerritProject:
          type: string
          description: 'The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.'
      description: A SourceContext referring to a Gerrit project.
      type: object
      id: GerritSourceContext
    FixableTotalByDigest:
      properties:
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.
          type: string
        resourceUri:
          type: string
          description: The affected resource.
        fixableCount:
          description: The number of fixable vulnerabilities associated with this resource.
          type: string
          format: int64
        totalCount:
          description: The total number of vulnerabilities associated with this resource.
          format: int64
          type: string
      description: Per resource and severity counts of fixable and total vulnerabilities.
      type: object
      id: FixableTotalByDigest
    ListOccurrencesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
        occurrences:
          type: array
          description: The occurrences requested.
          items:
            $ref: '#/components/schemas/Occurrence'
      description: Response for listing occurrences.
      id: ListOccurrencesResponse
    VulnerabilityAssessmentNote:
      description: A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
      properties:
        longDescription:
          description: A detailed description of this Vex.
          type: string
        product:
          description: The product affected by this vex.
          $ref: '#/components/schemas/Product'
        shortDescription:
          description: A one sentence description of this Vex.
          type: string
        assessment:
          $ref: '#/components/schemas/Assessment'
          description: Represents a vulnerability assessment for the product.
        publisher:
          $ref: '#/components/schemas/Publisher'
          description: Publisher details of this Note.
        title:
          type: string
          description: The title of the note. E.g. `Vex-Debian-11.4`
        languageCode:
          type: string
          description: 'Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.'
      type: object
      id: VulnerabilityAssessmentNote
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
      properties:
        version:
          type: string
          description: Maven `version` value used when uploading the artifact to Artifact Registry.
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.'
        artifactId:
          description: Maven `artifactId` value used when uploading the artifact to Artifact Registry.
          type: string
        path:
          type: string
          description: 'Path to an artifact in the build''s workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.'
        groupId:
          type: string
          description: Maven `groupId` value used when uploading the artifact to Artifact Registry.
      description: A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
      type: object
    GrafeasV1FileLocation:
      type: object
      id: GrafeasV1FileLocation
      properties:
        filePath:
          type: string
          description: 'For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.'
      description: Indicates the location at which a package was found.
    Category:
      description: The category to which the update belongs.
      type: object
      properties:
        name:
          description: The localized name of the category.
          type: string
        categoryId:
          type: string
          description: The identifier of the category.
      id: Category
    UpgradeOccurrence:
      type: object
      id: UpgradeOccurrence
      properties:
        windowsUpdate:
          description: Required for Windows OS. Represents the metadata about the Windows update.
          $ref: '#/components/schemas/WindowsUpdate'
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
        parsedVersion:
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
          $ref: '#/components/schemas/Version'
        distribution:
          $ref: '#/components/schemas/UpgradeDistribution'
          description: 'Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.'
      description: 'An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.'
    VexAssessment:
      description: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
      type: object
      properties:
        cve:
          type: string
          deprecated: true
          description: 'Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.'
        relatedUris:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Holds a list of references associated with this vulnerability item and assessment.
        remediations:
          type: array
          description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
          items:
            $ref: '#/components/schemas/Remediation'
        impacts:
          type: array
          description: 'Contains information about the impact of this vulnerability, this will change with time.'
          items:
            type: string
        noteName:
          type: string
          description: 'The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.'
        justification:
          $ref: '#/components/schemas/Justification'
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        state:
          type: string
          description: Provides the state of this Vulnerability assessment.
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - 'It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.'
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
        vulnerabilityId:
          description: 'The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.'
          type: string
      id: VexAssessment
    PackageNote:
      type: object
      description: PackageNote represents a particular package version.
      properties:
        url:
          description: The homepage for this package.
          type: string
        description:
          description: The description of this package.
          type: string
        cpeUri:
          type: string
          description: 'The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.'
        packageType:
          type: string
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
        digest:
          type: array
          items:
            $ref: '#/components/schemas/Digest'
          description: 'Hash value, typically a file digest, that allows unique identification a specific package.'
        version:
          $ref: '#/components/schemas/Version'
          description: The version of the package.
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          type: string
        distribution:
          items:
            $ref: '#/components/schemas/Distribution'
          type: array
          description: Deprecated. The various channels by which a package is distributed.
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        name:
          description: Required. Immutable. The name of the package.
          type: string
        maintainer:
          description: A freeform text denoting the maintainer of this package.
          type: string
      id: PackageNote
    Empty:
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
      type: object
    RelatedUrl:
      id: RelatedUrl
      description: Metadata for any related URL information.
      properties:
        label:
          description: Label to describe usage of the URL.
          type: string
        url:
          type: string
          description: Specific URL associated with the resource.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
      properties:
        paths:
          type: array
          description: Path globs used to match files in the build's workspace.
          items:
            type: string
        location:
          description: 'Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.'
          type: string
        timing:
          description: Output only. Stores timing information for pushing all artifact objects.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
      type: object
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
    BuilderConfig:
      type: object
      id: BuilderConfig
      properties:
        id:
          type: string
    FileHashes:
      id: FileHashes
      description: 'Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.'
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/Hash'
          type: array
          description: Required. Collection of file hashes.
      type: object
    TestIamPermissionsRequest:
      type: object
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          type: array
          items:
            type: string
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
      id: TestIamPermissionsRequest
    Occurrence:
      properties:
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Describes an attestation of an artifact.
        createTime:
          type: string
          format: google-datetime
          description: Output only. The time this occurrence was created.
        resourceUri:
          description: 'Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.'
          type: string
        vulnerability:
          description: Describes a security vulnerability.
          $ref: '#/components/schemas/VulnerabilityOccurrence'
        noteName:
          description: 'Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.'
          type: string
        upgrade:
          $ref: '#/components/schemas/UpgradeOccurrence'
          description: Describes an available package upgrade on the linked resource.
        discovery:
          $ref: '#/components/schemas/DiscoveryOccurrence'
          description: Describes when a resource was discovered.
        dsseAttestation:
          description: Describes an attestation of an artifact using dsse.
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
        compliance:
          $ref: '#/components/schemas/ComplianceOccurrence'
          description: Describes a compliance violation on a linked resource.
        package:
          description: Describes the installation of a package on the linked resource.
          $ref: '#/components/schemas/PackageOccurrence'
        kind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
          type: string
        name:
          description: 'Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.'
          type: string
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: 'https://github.com/secure-systems-lab/dsse'
        image:
          $ref: '#/components/schemas/ImageOccurrence'
          description: Describes how this resource derives from the basis in the associated note.
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
        updateTime:
          type: string
          description: Output only. The time this occurrence was last updated.
          format: google-datetime
        sbomReference:
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
          description: Describes a specific SBOM reference occurrences.
        build:
          description: Describes a verifiable build.
          $ref: '#/components/schemas/BuildOccurrence'
        deployment:
          description: Describes the deployment of an artifact on a runtime.
          $ref: '#/components/schemas/DeploymentOccurrence'
      type: object
      description: An instance of an analysis type that has been found on a resource.
      id: Occurrence
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      description: Other properties of the build.
      type: object
      properties:
        reproducible:
          type: boolean
        buildInvocationId:
          type: string
        buildFinishedOn:
          format: google-datetime
          type: string
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildStartedOn:
          format: google-datetime
          type: string
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
    Product:
      properties:
        genericUri:
          type: string
          description: 'Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.'
        name:
          description: Name of the product.
          type: string
        id:
          type: string
          description: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
      type: object
      id: Product
      description: Product contains information about a product and how to uniquely identify it.
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      description: An npm package uploaded to Artifact Registry using the NpmPackage directive.
      properties:
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the npm package.
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
          description: Output only. Stores timing information for pushing the specified artifact.
        uri:
          type: string
          description: URI of the uploaded npm package.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
      type: object
      id: TestIamPermissionsResponse
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
      type: object
      properties:
        object:
          type: string
          description: Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
        generation:
          type: string
          format: int64
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
        bucket:
          description: 'Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
          type: string
      description: Location of the source in an archive file in Cloud Storage.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
      description: Secrets and secret environment variables.
      properties:
        secretManager:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret'
          description: Secrets in Secret Manager and associated secret environment variable.
          type: array
        inline:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret'
          description: Secrets encrypted with KMS key and the associated secret environment variable.
          type: array
      type: object
    BatchCreateOccurrencesRequest:
      id: BatchCreateOccurrencesRequest
      description: Request to create occurrences in batch.
      type: object
      properties:
        occurrences:
          description: Required. The occurrences to create. Max allowed length is 1000.
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
    VulnerabilityOccurrencesSummary:
      properties:
        counts:
          items:
            $ref: '#/components/schemas/FixableTotalByDigest'
          type: array
          description: A listing by resource of the number of fixable and total vulnerabilities.
      description: A summary of how many vulnerability occurrences there are per resource and severity type.
      type: object
      id: VulnerabilityOccurrencesSummary
    CisBenchmark:
      description: A compliance check that is a CIS benchmark.
      type: object
      id: CisBenchmark
      properties:
        profileLevel:
          type: integer
          format: int32
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
    VulnerabilityNote:
      description: A security vulnerability that can be found in resources.
      type: object
      id: VulnerabilityNote
      properties:
        sourceUpdateTime:
          type: string
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          format: google-datetime
        cvssVersion:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          description: CVSS version used to populate cvss_score and severity.
        windowsDetails:
          items:
            $ref: '#/components/schemas/WindowsDetail'
          type: array
          description: 'Windows details get their own format because the information format and model don''t match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.'
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: The note provider assigned severity of this vulnerability.
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        cvssScore:
          description: The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          format: float
          type: number
        details:
          description: Details of all known distros and packages affected by this vulnerability.
          items:
            $ref: '#/components/schemas/Detail'
          type: array
        cvssV2:
          $ref: '#/components/schemas/CVSS'
          description: The full description of the v2 CVSS for this vulnerability.
        cvssV3:
          description: The full description of the CVSSv3 for this vulnerability.
          $ref: '#/components/schemas/CVSSv3'
    SlsaProvenance:
      properties:
        recipe:
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
          $ref: '#/components/schemas/SlsaRecipe'
        builder:
          description: required
          $ref: '#/components/schemas/SlsaBuilder'
        materials:
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
          items:
            $ref: '#/components/schemas/Material'
          type: array
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
      id: SlsaProvenance
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      description: 'A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      properties:
        warnings:
          description: Output only. Non-fatal problems encountered during the execution of the build.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning'
        serviceAccount:
          type: string
          description: 'IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. '
        startTime:
          description: Output only. Time at which execution of the build was started.
          type: string
          readOnly: true
          format: google-datetime
        name:
          description: 'Output only. The ''Build'' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.'
          type: string
          readOnly: true
        statusDetail:
          type: string
          readOnly: true
          description: Output only. Customer-readable message about the current status.
        tags:
          type: array
          items:
            type: string
          description: Tags for annotation of a `Build`. These are not docker tags.
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. Time at which the request to create the build was received.
          type: string
        source:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source'
          description: The location of the source files to build.
        images:
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the `Build` resource''s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.'
          type: array
          items:
            type: string
        logsBucket:
          description: 'Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.'
          type: string
        id:
          type: string
          readOnly: true
          description: Output only. Unique identifier of the build.
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
          type: string
        status:
          description: Output only. Status of the build.
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
        finishTime:
          type: string
          format: google-datetime
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
          readOnly: true
        timing:
          readOnly: true
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: 'Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.'
        secrets:
          description: 'Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets'
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret'
          type: array
        results:
          readOnly: true
          description: Output only. Results of the build.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results'
        substitutions:
          description: Substitutions data for `Build` resource.
          additionalProperties:
            type: string
          type: object
        sourceProvenance:
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance'
        options:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions'
          description: Special options for this build.
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets'
        timeout:
          description: 'Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.'
          format: google-duration
          type: string
        steps:
          description: Required. The operations to be performed on the workspace.
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep'
        buildTriggerId:
          type: string
          readOnly: true
          description: 'Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.'
        projectId:
          type: string
          readOnly: true
          description: Output only. ID of the project.
        queueTtl:
          type: string
          format: google-duration
          description: 'TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.'
        failureInfo:
          description: Output only. Contains information about the build when status=FAILURE.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo'
          readOnly: true
        artifacts:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts'
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        approval:
          description: 'Output only. Describes this build''s approval configuration, status, and result.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval'
          readOnly: true
      type: object
    InTotoProvenance:
      type: object
      id: InTotoProvenance
      properties:
        builderConfig:
          $ref: '#/components/schemas/BuilderConfig'
          description: required
        recipe:
          $ref: '#/components/schemas/Recipe'
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
        materials:
          items:
            type: string
          type: array
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
        metadata:
          $ref: '#/components/schemas/Metadata'
    SBOMReferenceNote:
      properties:
        format:
          type: string
          description: 'The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...'
        version:
          description: 'The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.'
          type: string
      type: object
      id: SBOMReferenceNote
      description: The note representing an SBOM reference.
    BatchCreateOccurrencesResponse:
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences that were created.
          type: array
      type: object
      id: BatchCreateOccurrencesResponse
      description: Response for creating occurrences in batch.
    ComplianceNote:
      id: ComplianceNote
      type: object
      properties:
        rationale:
          type: string
          description: A rationale for the existence of this compliance check.
        remediation:
          type: string
          description: A description of remediation steps if the compliance check fails.
        scanInstructions:
          description: Serialized scan instructions with a predefined format.
          format: byte
          type: string
        title:
          type: string
          description: The title that identifies this compliance check.
        cisBenchmark:
          $ref: '#/components/schemas/CisBenchmark'
        version:
          items:
            $ref: '#/components/schemas/ComplianceVersion'
          description: The OS and config versions the benchmark applies to.
          type: array
        description:
          type: string
          description: A description about this compliance check.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      description: Artifacts created by the build pipeline.
      type: object
      properties:
        artifactTiming:
          description: Time to push all non-container artifacts to Cloud Storage.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        numArtifacts:
          format: int64
          type: string
          description: Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
        buildStepImages:
          description: 'List of build step digests, in the order corresponding to build step indices.'
          items:
            type: string
          type: array
        pythonPackages:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage'
          description: Python artifacts uploaded to Artifact Registry at the end of the build.
        npmPackages:
          type: array
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage'
        mavenArtifacts:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact'
          description: Maven artifacts uploaded to Artifact Registry at the end of the build.
        buildStepOutputs:
          items:
            type: string
            format: byte
          description: 'List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.'
          type: array
        images:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage'
          description: Container images that were built as a part of the build.
          type: array
        artifactManifest:
          description: Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
    SlsaProvenanceV1:
      properties:
        runDetails:
          $ref: '#/components/schemas/RunDetails'
        buildDefinition:
          $ref: '#/components/schemas/BuildDefinition'
      description: 'Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.'
      type: object
      id: SlsaProvenanceV1
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      properties:
        priority:
          description: The priority for this warning.
          type: string
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
        text:
          type: string
          description: Explanation of the warning generated.
      description: A non-fatal problem encountered during the execution of the build.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
    SbomReferenceIntotoPayload:
      properties:
        predicate:
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
          description: Additional parameters of the Predicate. Includes the actual data about the SBOM.
        predicateType:
          type: string
          description: URI identifying the type of the Predicate.
        subject:
          description: Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
          items:
            $ref: '#/components/schemas/Subject'
          type: array
        _type:
          type: string
          description: Identifier for the schema of the Statement.
      type: object
      id: SbomReferenceIntotoPayload
      description: 'The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.'
    DSSEHint:
      type: object
      properties:
        humanReadableName:
          type: string
          description: 'Required. The human readable name of this attestation authority, for example "cloudbuild-prod".'
      id: DSSEHint
      description: 'This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.'
    InTotoSlsaProvenanceV1:
      id: InTotoSlsaProvenanceV1
      properties:
        _type:
          description: 'InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement'
          type: string
        predicateType:
          type: string
        predicate:
          $ref: '#/components/schemas/SlsaProvenanceV1'
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
      type: object
    Signature:
      properties:
        signature:
          type: string
          description: 'The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.'
          format: byte
        publicKeyId:
          type: string
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
      id: Signature
      type: object
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
    AttestationNote:
      description: 'Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don''t all live in the same project.'
      properties:
        hint:
          description: Hint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/Hint'
      id: AttestationNote
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      properties:
        endTime:
          description: End of time span.
          type: string
          format: google-datetime
        startTime:
          type: string
          format: google-datetime
          description: Start of time span.
      description: Start and end times for a build execution phase.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      properties:
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
        entryPoint:
          type: string
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
      type: object
    BuildMetadata:
      id: BuildMetadata
      properties:
        startedOn:
          type: string
          format: google-datetime
        finishedOn:
          format: google-datetime
          type: string
        invocationId:
          type: string
      type: object
    ProvenanceBuilder:
      type: object
      properties:
        version:
          type: object
          additionalProperties:
            type: string
        id:
          type: string
        builderDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
      id: ProvenanceBuilder
    BuildOccurrence:
      id: BuildOccurrence
      properties:
        inTotoSlsaProvenanceV1:
          description: 'In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.'
          $ref: '#/components/schemas/InTotoSlsaProvenanceV1'
        provenance:
          description: The actual provenance for the build.
          $ref: '#/components/schemas/BuildProvenance'
        intotoProvenance:
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
          $ref: '#/components/schemas/InTotoProvenance'
        intotoStatement:
          $ref: '#/components/schemas/InTotoStatement'
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
        provenanceBytes:
          description: 'Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.'
          type: string
      description: Details of a build occurrence.
      type: object
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      properties:
        endTime:
          type: string
          description: Output only. The time that this operation was marked completed or failed.
          format: google-datetime
        createTime:
          type: string
          description: Output only. The time this operation was created.
          format: google-datetime
      description: Metadata for all operations used and required for all operations that created by Container Analysis Providers
      type: object
    BuildStep:
      description: 'A step in the build pipeline. Next ID: 21'
      type: object
      id: BuildStep
      properties:
        status:
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: 'Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.'
          type: string
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        exitCode:
          type: integer
          format: int32
          description: Output only. Return code from running the step.
        allowExitCodes:
          description: 'Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.'
          type: array
          items:
            format: int32
            type: integer
        entrypoint:
          description: 'Entrypoint to be used instead of the build step image''s default entrypoint. If unset, the image''s default entrypoint is used.'
          type: string
        env:
          items:
            type: string
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          type: array
        waitFor:
          type: array
          description: 'The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.'
          items:
            type: string
        script:
          description: 'A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.'
          type: string
        timing:
          $ref: '#/components/schemas/TimeSpan'
          description: Output only. Stores timing information for executing this build step.
        pullTiming:
          description: Output only. Stores timing information for pulling this build step's builder image only.
          $ref: '#/components/schemas/TimeSpan'
        volumes:
          description: 'List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.'
          type: array
          items:
            $ref: '#/components/schemas/Volume'
        automapSubstitutions:
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
          type: boolean
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          type: array
          items:
            type: string
        dir:
          description: 'Working directory to use when running this step''s container. If this value is a relative path, it is relative to the build''s working directory. If this value is absolute, it may be outside the build''s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step''s execution.'
          type: string
        id:
          description: 'Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.'
          type: string
        timeout:
          description: 'Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.'
          format: google-duration
          type: string
        allowFailure:
          description: 'Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.'
          type: boolean
        args:
          type: array
          description: 'A list of arguments that will be presented to the step when it is started. If the image used to run the step''s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.'
          items:
            type: string
        name:
          type: string
          description: 'Required. The name of the container image that will run this particular build step. If the image is available in the host''s Docker daemon''s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account''s credentials if necessary. The Docker daemon''s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host''s Docker daemon''s cache and is available to use as the name for a later build step.'
    DeploymentNote:
      description: An artifact that can be deployed in some runtime.
      type: object
      id: DeploymentNote
      properties:
        resourceUri:
          type: array
          description: Required. Resource URI for the artifact being deployed.
          items:
            type: string
    ImageNote:
      properties:
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
          description: Required. Immutable. The fingerprint of the base image.
        resourceUrl:
          description: Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
          type: string
      description: 'Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.'
      id: ImageNote
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
      type: object
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      properties:
        approverAccount:
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
          readOnly: true
          type: string
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        approvalTime:
          format: google-datetime
          readOnly: true
          description: Output only. The time when the approval decision was made.
          type: string
        url:
          type: string
          description: 'Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.'
        decision:
          description: Required. The decision of this manual approval.
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          type: string
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
    Envelope:
      description: 'MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.'
      type: object
      id: Envelope
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
        payloadType:
          type: string
        payload:
          type: string
          format: byte
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      type: object
      description: A Maven artifact uploaded using the MavenArtifact directive.
      properties:
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
          description: Output only. Stores timing information for pushing the specified artifact.
        fileHashes:
          description: Hash types and values of the Maven Artifact.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
        uri:
          description: URI of the uploaded artifact.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
      type: object
      description: Optional arguments to enable specific features of builds.
      properties:
        logging:
          description: 'Option to specify the logging mode, which determines if and where build logs are stored.'
          enumDescriptions:
            - The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - 'Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).'
            - Turn off all logging. No build logs will be captured.
          enumDeprecated:
            - false
            - false
            - false
            - true
            - false
            - false
          type: string
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
        workerPool:
          type: string
          deprecated: true
          description: This field deprecated; please use `pool.name` instead.
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          type: array
          items:
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            type: string
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
        env:
          description: 'A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".'
          type: array
          items:
            type: string
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
          description: 'Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.'
        substitutionOption:
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          enumDescriptions:
            - 'Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.'
            - Do not fail the build if error in substitutions checks.
          description: 'Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.'
          type: string
        requestedVerifyOption:
          type: string
          enum:
            - NOT_VERIFIED
            - VERIFIED
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          description: Requested verifiability options.
        secretEnv:
          items:
            type: string
          type: array
          description: 'A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build''s `Secret`. These variables will be available to all build steps in this build.'
        dynamicSubstitutions:
          type: boolean
          description: 'Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.'
        diskSizeGb:
          format: int64
          description: 'Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.'
          type: string
        logStreamingOption:
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - Build logs should not be streamed to Cloud Storage; they will be written when the build is completed.
          description: Option to define build log streaming behavior to Cloud Storage.
          type: string
        pool:
          description: 'Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption'
        defaultLogsBucketBehavior:
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - Bucket is located in user-owned project in the same region as the build. The builder service account must have access to create and write to Cloud Storage buckets in the build project.
          description: Optional. Option to specify how default logs buckets are setup.
          type: string
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for all build steps.
        machineType:
          description: Compute Engine machine type on which to run the build.
          type: string
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
            - E2 machine with 1 CPU.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
            - E2_MEDIUM
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      description: Location of the source in a supported storage service.
      properties:
        repoSource:
          description: 'If provided, get the source from this location in a Cloud Source Repository.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
        gitSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource'
          description: 'If provided, get the source from this Git repository.'
        storageSourceManifest:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
          description: 'If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
        storageSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
          description: 'If provided, get the source from this location in Cloud Storage.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
      description: Location of the source in any accessible Git repository.
      type: object
      properties:
        url:
          type: string
          description: 'Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.'
        dir:
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
          type: string
        revision:
          type: string
          description: 'The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.'
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      properties:
        state:
          readOnly: true
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          type: string
          description: Output only. The state of this build's approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
        config:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig'
          readOnly: true
          description: Output only. Configuration for manual approval of this build.
        result:
          description: Output only. Result of manual approval for this Build.
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
      description: 'BuildApproval describes a build''s approval configuration, state, and result.'
      type: object
    NonCompliantFile:
      properties:
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
        path:
          description: Empty if `display_command` is set.
          type: string
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
      description: 'Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using ''path''.'
      type: object
      id: NonCompliantFile
    Identity:
      type: object
      description: The unique identifier of the update.
      properties:
        revision:
          type: integer
          description: The revision number of the update.
          format: int32
        updateId:
          type: string
          description: The revision independent identifier of the update.
      id: Identity
    CVSSv3:
      type: object
      id: CVSSv3
      properties:
        exploitabilityScore:
          format: float
          type: number
        impactScore:
          format: float
          type: number
        attackVector:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          type: string
        baseScore:
          format: float
          description: The base score is a function of the base metric scores.
          type: number
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
        integrityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        userInteraction:
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        scope:
          type: string
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          enumDescriptions:
            - ''
            - ''
            - ''
      description: 'Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document'
    ComplianceVersion:
      properties:
        cpeUri:
          description: 'The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.'
          type: string
        benchmarkDocument:
          type: string
          description: 'The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".'
        version:
          type: string
          description: The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
      description: Describes the CIS benchmark version that is applicable to a given OS and os version.
      id: ComplianceVersion
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
      properties:
        pushTiming:
          readOnly: true
          description: Output only. Stores timing information for pushing the specified image.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        name:
          type: string
          description: 'Name used to push the container image to Google Container Registry, as presented to `docker push`.'
      description: An image built by the pipeline.
      type: object
    Publisher:
      properties:
        name:
          description: 'Name of the publisher. Examples: ''Google'', ''Google Cloud Platform''.'
          type: string
        issuingAuthority:
          type: string
          description: 'Provides information about the authority of the issuing party to release the document, in particular, the party''s constituency and responsibilities or other obligations.'
        publisherNamespace:
          description: 'The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io'
          type: string
      type: object
      id: Publisher
      description: Publisher contains information about the publisher of this Note.
    Metadata:
      properties:
        completeness:
          $ref: '#/components/schemas/Completeness'
          description: Indicates that the builder claims certain fields in this message to be complete.
        buildInvocationId:
          type: string
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
        reproducible:
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
          type: boolean
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        buildStartedOn:
          description: The timestamp of when the build started.
          type: string
          format: google-datetime
      type: object
      id: Metadata
      description: Other properties of the build.
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
      properties:
        kmsKeyName:
          type: string
          description: 'Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*'
        envMap:
          type: object
          additionalProperties:
            type: string
            format: byte
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
      type: object
    GitSourceContext:
      properties:
        url:
          type: string
          description: Git repository URL.
        revisionId:
          type: string
          description: Git commit hash.
      description: 'A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).'
      id: GitSourceContext
      type: object
    DeploymentOccurrence:
      properties:
        resourceUri:
          type: array
          items:
            type: string
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
        config:
          type: string
          description: Configuration used to create this deployment.
        platform:
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          description: Platform hosting this deployment.
          type: string
        userEmail:
          type: string
          description: Identity of the user that triggered this deployment.
        undeployTime:
          type: string
          description: End of the lifetime of this deployment.
          format: google-datetime
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
        deployTime:
          description: Required. Beginning of the lifetime of this deployment.
          format: google-datetime
          type: string
      type: object
      description: The period during which some deployable was active in a runtime.
      id: DeploymentOccurrence
    Completeness:
      id: Completeness
      type: object
      properties:
        arguments:
          type: boolean
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
        environment:
          type: boolean
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
      description: Indicates that the builder claims certain fields in this message to be complete.
    GetIamPolicyRequest:
      type: object
      properties:
        options:
          $ref: '#/components/schemas/GetPolicyOptions'
          description: 'OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.'
      id: GetIamPolicyRequest
      description: Request message for `GetIamPolicy` method.
    Artifact:
      description: Artifact describes a build product.
      type: object
      id: Artifact
      properties:
        id:
          type: string
          description: 'Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.'
        names:
          type: array
          description: 'Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.'
          items:
            type: string
        checksum:
          description: 'Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.'
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      type: object
      properties:
        value:
          format: byte
          type: string
          description: The hash value.
        type:
          type: string
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          description: The type of hash that was performed.
      description: Container message for hash values.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
    Source:
      id: Source
      properties:
        additionalContexts:
          type: array
          items:
            $ref: '#/components/schemas/SourceContext'
          description: 'If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.'
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: 'Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.'
          type: object
        context:
          $ref: '#/components/schemas/SourceContext'
          description: 'If provided, the source code used for the build came from this location.'
        artifactStorageSourceUri:
          description: 'If provided, the input binary artifacts for the build came from this location.'
          type: string
      description: Source describes the location of the source used for the build.
      type: object
    ListNotesResponse:
      description: Response for listing notes.
      type: object
      id: ListNotesResponse
      properties:
        notes:
          items:
            $ref: '#/components/schemas/Note'
          description: The notes requested.
          type: array
        nextPageToken:
          type: string
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
    SlsaBuilder:
      properties:
        id:
          type: string
      type: object
      id: SlsaBuilder
    Subject:
      id: Subject
      type: object
      properties:
        name:
          type: string
        digest:
          additionalProperties:
            type: string
          description: '`"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
          type: object
    SBOMStatus:
      description: The status of an SBOM generation.
      id: SBOMStatus
      properties:
        error:
          type: string
          description: 'If there was an error generating an SBOM, this will indicate what that error was.'
        sbomState:
          enumDescriptions:
            - Default unknown state.
            - SBOM scanning is pending.
            - SBOM scanning has completed.
          description: The progress of the SBOM generation.
          type: string
          enum:
            - SBOM_STATE_UNSPECIFIED
            - PENDING
            - COMPLETE
      type: object
    Digest:
      properties:
        algo:
          type: string
          description: '`SHA1`, `SHA512` etc.'
        digestBytes:
          description: Value of the digest.
          type: string
          format: byte
      description: Digest information.
      id: Digest
      type: object
    KnowledgeBase:
      id: KnowledgeBase
      type: object
      properties:
        url:
          type: string
          description: 'A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).'
        name:
          description: 'The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).'
          type: string
    SlsaProvenanceZeroTwo:
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
      id: SlsaProvenanceZeroTwo
      properties:
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
        buildType:
          type: string
        materials:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        buildConfig:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
      type: object
    Volume:
      id: Volume
      type: object
      description: 'Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution. Next ID: 3'
      properties:
        name:
          type: string
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
    Justification:
      type: object
      properties:
        justificationType:
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.
            - The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.
            - The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.
            - The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors.
          type: string
          description: The justification type for this vulnerability.
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
        details:
          type: string
          description: Additional details on why this justification was chosen.
      description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
      id: Justification
    PackageOccurrence:
      id: PackageOccurrence
      properties:
        architecture:
          type: string
          readOnly: true
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
        cpeUri:
          description: 'Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.'
          type: string
          readOnly: true
        location:
          items:
            $ref: '#/components/schemas/Location'
          description: All of the places within the filesystem versions of this package have been found.
          type: array
        packageType:
          description: 'Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
          readOnly: true
          type: string
        name:
          type: string
          description: Required. Output only. The name of the installed package.
          readOnly: true
        version:
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
          readOnly: true
      type: object
      description: Details on how a particular software package was installed on a system.
    License:
      id: License
      description: License information.
      type: object
      properties:
        expression:
          type: string
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
        comments:
          type: string
          description: Comments
    Layer:
      id: Layer
      type: object
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        directive:
          description: 'Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.'
          type: string
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
      properties:
        paths:
          items:
            type: string
          type: array
          description: 'Path globs used to match files in the build''s workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.'
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.'
      description: Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
    AnalysisCompleted:
      properties:
        analysisType:
          items:
            type: string
          type: array
      id: AnalysisCompleted
      type: object
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
    PackageIssue:
      type: object
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
      properties:
        affectedCpeUri:
          type: string
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.'
        affectedPackage:
          type: string
          description: Required. The package this vulnerability was found in.
        effectiveSeverity:
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          readOnly: true
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        fixedCpeUri:
          type: string
          description: 'The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.'
        fileLocation:
          type: array
          description: The location at which this package was found.
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
        packageType:
          type: string
          description: 'The type of package (e.g. OS, MAVEN, GO).'
        fixAvailable:
          type: boolean
          description: Output only. Whether a fix is available for this package.
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
        fixedPackage:
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
          type: string
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
      id: PackageIssue
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      properties:
        uri:
          type: string
          description: URI of the uploaded artifact.
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the Python Artifact.
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
      type: object
      description: Artifact uploaded using the PythonPackage directive.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      properties:
        pythonPackages:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage'
          description: 'A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.'
          type: array
        objects:
          description: 'A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account''s credentials. The location and generation of the uploaded objects will be stored in the Build resource''s results field. If any objects fail to be pushed, the build is marked FAILURE.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects'
        mavenArtifacts:
          description: 'A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any artifacts fail to be pushed, the build is marked FAILURE.'
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact'
        images:
          type: array
          items:
            type: string
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the Build resource''s results field. If any of the images fail to be pushed, the build is marked FAILURE.'
        npmPackages:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage'
          description: 'A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any packages fail to be pushed, the build is marked FAILURE.'
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
      type: object
      description: Request message for `SetIamPolicy` method.
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      type: object
      description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.'
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
      properties:
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      type: object
      properties:
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
        type:
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          description: The name of the failure.
          type: string
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
      description: A fatal problem encountered during the execution of the build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      properties:
        entrypoint:
          description: 'Entrypoint to be used instead of the build step image''s default entrypoint. If unset, the image''s default entrypoint is used.'
          type: string
        env:
          items:
            type: string
          type: array
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
        allowExitCodes:
          type: array
          items:
            type: integer
            format: int32
          description: 'Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.'
        args:
          type: array
          description: 'A list of arguments that will be presented to the step when it is started. If the image used to run the step''s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.'
          items:
            type: string
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
        status:
          description: 'Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.'
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          type: string
          readOnly: true
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
        volumes:
          description: 'List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.'
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
        timeout:
          description: 'Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.'
          type: string
          format: google-duration
        script:
          description: 'A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.'
          type: string
        allowFailure:
          description: 'Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.'
          type: boolean
        name:
          description: 'Required. The name of the container image that will run this particular build step. If the image is available in the host''s Docker daemon''s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account''s credentials if necessary. The Docker daemon''s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host''s Docker daemon''s cache and is available to use as the name for a later build step.'
          type: string
        timing:
          readOnly: true
          description: Output only. Stores timing information for executing this build step.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        exitCode:
          format: int32
          description: Output only. Return code from running the step.
          readOnly: true
          type: integer
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          type: array
          items:
            type: string
        dir:
          type: string
          description: 'Working directory to use when running this step''s container. If this value is a relative path, it is relative to the build''s working directory. If this value is absolute, it may be outside the build''s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step''s execution.'
        id:
          type: string
          description: 'Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.'
        waitFor:
          description: 'The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.'
          items:
            type: string
          type: array
        pullTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
          description: Output only. Stores timing information for pulling this build step's builder image only.
      description: A step in the build pipeline.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
    DSSEAttestationOccurrence:
      id: DSSEAttestationOccurrence
      type: object
      description: 'Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.'
      properties:
        envelope:
          description: 'If doing something security critical, make sure to verify the signatures in this metadata.'
          $ref: '#/components/schemas/Envelope'
        statement:
          $ref: '#/components/schemas/InTotoStatement'
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
      description: 'Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
      type: object
      properties:
        name:
          description: 'The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}'
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      properties:
        bucket:
          description: 'Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
          type: string
        generation:
          type: string
          format: int64
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
        object:
          description: Cloud Storage object containing the source manifest. This object must be a JSON file.
          type: string
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
      description: 'Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
    RunDetails:
      id: RunDetails
      properties:
        byproducts:
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
          type: array
        builder:
          $ref: '#/components/schemas/ProvenanceBuilder'
        metadata:
          $ref: '#/components/schemas/BuildMetadata'
      type: object
    Location:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
        cpeUri:
          description: 'Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)'
          type: string
        path:
          type: string
          description: The path from which we gathered that this package/version is installed.
      description: 'An occurrence of a particular package installation found within a system''s filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.'
      id: Location
    Version:
      description: Version contains structured information about the version of a package.
      type: object
      properties:
        inclusive:
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
          type: boolean
        revision:
          description: The iteration of the package build from the above version.
          type: string
        fullName:
          description: 'Human readable version string. This string is of the form :- and is only set when kind is NORMAL.'
          type: string
        name:
          type: string
          description: Required only when version kind is NORMAL. The main part of the version name.
        kind:
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
          type: string
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          format: int32
          type: integer
      id: Version
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      properties:
        resolvedStorageSourceManifest:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
          description: 'A copy of the build''s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.'
        resolvedStorageSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
          description: 'A copy of the build''s `source.storage_source`, if exists, with any generations resolved.'
        resolvedRepoSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
          description: 'A copy of the build''s `source.repo_source`, if exists, with any revisions resolved.'
        fileHashes:
          type: object
          description: 'Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.'
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          readOnly: true
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
      description: 'Provenance of the source. Ways to find the original source, or verify that some source was used for this build.'
    ListNoteOccurrencesResponse:
      type: object
      properties:
        occurrences:
          description: The occurrences attached to the specified note.
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
        nextPageToken:
          type: string
          description: Token to provide to skip to a particular spot in the list.
      description: Response for listing occurrences for a note.
      id: ListNoteOccurrencesResponse
    SbomReferenceIntotoPredicate:
      type: object
      properties:
        digest:
          description: A map of algorithm to digest of the contents of the SBOM.
          additionalProperties:
            type: string
          type: object
        location:
          type: string
          description: The location of the SBOM.
        mimeType:
          type: string
          description: The mime type of the SBOM.
        referrerId:
          type: string
          description: The person or system referring this predicate to the consumer.
      id: SbomReferenceIntotoPredicate
      description: A predicate which describes the SBOM being referenced.
    InTotoStatement:
      type: object
      description: 'Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".'
      properties:
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        _type:
          type: string
          description: 'Always `https://in-toto.io/Statement/v0.1`.'
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
      id: InTotoStatement
    AliasContext:
      properties:
        name:
          description: The alias name.
          type: string
        kind:
          description: The alias kind.
          type: string
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - 'Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".'
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
      description: An alias to a repo revision.
      id: AliasContext
      type: object
    Hint:
      id: Hint
      type: object
      properties:
        humanReadableName:
          description: 'Required. The human readable name of this attestation authority, for example "qa".'
          type: string
      description: 'This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.'
    Policy:
      type: object
      properties:
        etag:
          format: byte
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        bindings:
          type: array
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          items:
            $ref: '#/components/schemas/Binding'
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      id: Policy
    Recipe:
      properties:
        entryPoint:
          type: string
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
        environment:
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
        type:
          type: string
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
        arguments:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          type: array
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
        definedInMaterial:
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
          format: int64
          type: string
      id: Recipe
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      type: object
    Distribution:
      description: 'This represents a particular channel of distribution for a given package. E.g., Debian''s jessie-backports dpkg mirror.'
      properties:
        cpeUri:
          description: 'Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.'
          type: string
        architecture:
          type: string
          description: The CPU architecture for which packages in this distribution channel were built.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
        description:
          description: The distribution channel-specific description of this package.
          type: string
        maintainer:
          type: string
          description: A freeform string denoting the maintainer of this package.
        latestVersion:
          description: The latest available version of this package in this distribution channel.
          $ref: '#/components/schemas/Version'
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
      id: Distribution
      type: object
    DiscoveryOccurrence:
      description: Provides information about the analysis status of a discovered resource.
      id: DiscoveryOccurrence
      type: object
      properties:
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
        archiveTime:
          description: Output only. The time occurrences related to this discovery occurrence were archived.
          readOnly: true
          type: string
          format: google-datetime
        lastScanTime:
          format: google-datetime
          description: The last time this resource was scanned.
          type: string
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        continuousAnalysis:
          description: Whether the resource is continuously analyzed.
          type: string
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
        sbomStatus:
          $ref: '#/components/schemas/SBOMStatus'
          description: The status of an SBOM generation.
        analysisError:
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
          items:
            $ref: '#/components/schemas/Status'
          type: array
        analysisStatusError:
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
          $ref: '#/components/schemas/Status'
        analysisStatus:
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - 'Analysis has finished unsuccessfully, the analysis itself is in a bad state.'
            - The resource is known not to be supported.
          type: string
          description: The status of discovery for the resource.
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      description: Location of the source in a Google Cloud Source Repository.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
      type: object
      properties:
        projectId:
          description: 'ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.'
          type: string
        invertRegex:
          type: boolean
          description: Only trigger a build if the revision regex does NOT match the revision regex.
        substitutions:
          type: object
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
          additionalProperties:
            type: string
        tagName:
          description: 'Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        branchName:
          description: 'Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        dir:
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
          type: string
        repoName:
          type: string
          description: Name of the Cloud Source Repository.
    VulnerabilityOccurrence:
      properties:
        type:
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
          type: string
        packageIssue:
          items:
            $ref: '#/components/schemas/PackageIssue'
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
          type: array
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: Output only. The note provider assigned severity of this vulnerability.
        effectiveSeverity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: 'The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.'
        relatedUrls:
          description: Output only. URLs related to this vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        cvssScore:
          type: number
          format: float
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        cvssV2:
          $ref: '#/components/schemas/CVSS'
          description: The cvss v2 score for the vulnerability.
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        longDescription:
          type: string
          description: Output only. A detailed description of this vulnerability.
        cvssVersion:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          description: Output only. CVSS version used to populate cvss_score and severity.
          type: string
        fixAvailable:
          description: Output only. Whether at least one of the affected packages has a fix available.
          type: boolean
        cvssv3:
          description: The cvss v3 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
      id: VulnerabilityOccurrence
      description: An occurrence of a severity vulnerability on a resource.
      type: object
    ResourceDescriptor:
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        uri:
          type: string
        name:
          type: string
        annotations:
          additionalProperties:
            type: any
          type: object
        downloadLocation:
          type: string
        content:
          type: string
          format: byte
        mediaType:
          type: string
      type: object
      id: ResourceDescriptor
    SourceContext:
      id: SourceContext
      properties:
        cloudRepo:
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        git:
          $ref: '#/components/schemas/GitSourceContext'
          description: 'A SourceContext referring to any third party Git repo (e.g., GitHub).'
        labels:
          additionalProperties:
            type: string
          description: Labels with user defined metadata.
          type: object
        gerrit:
          $ref: '#/components/schemas/GerritSourceContext'
          description: A SourceContext referring to a Gerrit project.
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      type: object
      properties:
        parameters:
          type: boolean
        materials:
          type: boolean
        environment:
          type: boolean
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
      description: Indicates that the builder claims certain fields in this message to be complete.
    Binding:
      properties:
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
        members:
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
          items:
            type: string
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
      type: object
      id: Binding
      description: 'Associates `members`, or principals, with a `role`.'
    SlsaMetadata:
      id: SlsaMetadata
      properties:
        reproducible:
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
          type: boolean
        buildInvocationId:
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
          type: string
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        buildFinishedOn:
          type: string
          description: The timestamp of when the build completed.
          format: google-datetime
        completeness:
          description: Indicates that the builder claims certain fields in this message to be complete.
          $ref: '#/components/schemas/SlsaCompleteness'
      description: Other properties of the build.
      type: object
    ProjectRepoId:
      properties:
        projectId:
          type: string
          description: The ID of the project.
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
      description: 'Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.'
      type: object
      id: ProjectRepoId
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      properties:
        approvalRequired:
          type: boolean
          description: 'Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.'
      description: ApprovalConfig describes configuration for manual approval of a build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      type: object
    SlsaCompleteness:
      id: SlsaCompleteness
      description: Indicates that the builder claims certain fields in this message to be complete.
      type: object
      properties:
        arguments:
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
          type: boolean
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
        environment:
          type: boolean
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
    Expr:
      properties:
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
      type: object
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    Fingerprint:
      description: A set of properties that uniquely identify a given Docker image.
      type: object
      id: Fingerprint
      properties:
        v2Name:
          description: 'Output only. The name of the image''s v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.'
          type: string
        v2Blob:
          description: Required. The ordered list of v2 blobs that represent a given image.
          type: array
          items:
            type: string
        v1Name:
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
          type: string
    BuildProvenance:
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      id: BuildProvenance
      type: object
      properties:
        id:
          type: string
          description: Required. Unique identifier of the build.
        builtArtifacts:
          description: Output of the build.
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
        projectId:
          description: ID of the project.
          type: string
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        builderVersion:
          type: string
          description: Version string of the builder at the time this build was executed.
        endTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was finished.
        logsUri:
          type: string
          description: URI where any logs for this provenance were written.
        createTime:
          type: string
          description: Time at which the build was created.
          format: google-datetime
        startTime:
          format: google-datetime
          description: Time at which execution of the build was started.
          type: string
        buildOptions:
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          type: object
          additionalProperties:
            type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        commands:
          type: array
          description: Commands requested by the build.
          items:
            $ref: '#/components/schemas/Command'
    Jwt:
      id: Jwt
      properties:
        compactJwt:
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
          type: string
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      type: object
      description: 'Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.'
      properties:
        id:
          type: string
    WindowsUpdate:
      properties:
        categories:
          type: array
          description: The list of categories to which the update belongs.
          items:
            $ref: '#/components/schemas/Category'
        identity:
          $ref: '#/components/schemas/Identity'
          description: Required - The unique identifier for the update.
        lastPublishedTimestamp:
          format: google-datetime
          description: The last published timestamp of the update.
          type: string
        title:
          type: string
          description: The localized title of the update.
        description:
          description: The localized description of the update.
          type: string
        kbArticleIds:
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
          type: array
          items:
            type: string
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
      id: WindowsUpdate
      type: object
      description: 'Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.'
    BatchCreateNotesRequest:
      id: BatchCreateNotesRequest
      description: Request to create notes in batch.
      properties:
        notes:
          additionalProperties:
            $ref: '#/components/schemas/Note'
          type: object
          description: Required. The notes to create. Max allowed length is 1000.
      type: object
  parameters:
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    occurrences:
      id: google.containeranalysis.occurrences
      name: occurrences
      title: Occurrences
      methods:
        projects_occurrences_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.occurrences
        _projects_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.occurrences
        _projects_notes_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_get'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_list'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_notes_occurrences_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_delete'
    occurrences_iam_policies:
      id: google.containeranalysis.occurrences_iam_policies
      name: occurrences_iam_policies
      title: Occurrences Iam Policies
      methods:
        projects_occurrences_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_iam_policies/methods/projects_occurrences_get_iam_policy'
        insert: []
        update: []
        delete: []
    occurrences_notes:
      id: google.containeranalysis.occurrences_notes
      name: occurrences_notes
      title: Occurrences Notes
      methods:
        projects_occurrences_get_notes:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_notes/methods/projects_occurrences_get_notes'
        insert: []
        update: []
        delete: []
    occurrences_vulnerability_summary:
      id: google.containeranalysis.occurrences_vulnerability_summary
      name: occurrences_vulnerability_summary
      title: Occurrences Vulnerability Summary
      methods:
        projects_occurrences_get_vulnerability_summary:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:vulnerabilitySummary/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_vulnerability_summary/methods/projects_occurrences_get_vulnerability_summary'
        insert: []
        update: []
        delete: []
    notes:
      id: google.containeranalysis.notes
      name: notes
      title: Notes
      methods:
        projects_notes_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.notes
        _projects_notes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_get'
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_delete'
    notes_iam_policies:
      id: google.containeranalysis.notes_iam_policies
      name: notes_iam_policies
      title: Notes Iam Policies
      methods:
        projects_notes_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes_iam_policies/methods/projects_notes_get_iam_policy'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    delete:
      description: 'Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.'
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_delete
      x-stackQL-verb: delete
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_get
      x-stackQL-verb: select
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences':
    parameters: *ref_1
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.occurrences
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}/notes':
    parameters: *ref_1
    get:
      description: Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_notes
      x-stackQL-method: projects_occurrences_get_notes
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/occurrences:batchCreate':
    parameters: *ref_1
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateOccurrencesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences:vulnerabilitySummary':
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityOccurrencesSummary'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences_vulnerability_summary
      x-stackQL-method: projects_occurrences_get_vulnerability_summary
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy':
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}':
    parameters: *ref_1
    get:
      description: Gets the specified note.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_get
      x-stackQL-verb: select
    patch:
      description: Updates the specified note.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_patch
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified note.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/notes':
    parameters: *ref_1
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.notes
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/notes/{notesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}:getIamPolicy':
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/notes:batchCreate':
    parameters: *ref_1
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateNotesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}/occurrences':
    parameters: *ref_1
    get:
      description: Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_notes_occurrences_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.occurrences
