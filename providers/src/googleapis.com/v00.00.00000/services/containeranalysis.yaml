openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Container Analysis API
  description: An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.
  version: v1
  x-discovery-doc-revision: '20230106'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://cloud.google.com/container-analysis/api/reference/rest/
servers:
  - url: https://containeranalysis.googleapis.com
components:
  schemas:
    Identity:
      description: The unique identifier of the update.
      id: Identity
      type: object
      properties:
        revision:
          type: integer
          format: int32
          description: The revision number of the update.
        updateId:
          type: string
          description: The revision independent identifier of the update.
    Binding:
      type: object
      properties:
        members:
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. '
          items:
            type: string
        role:
          type: string
          description: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
        condition:
          description: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
      id: Binding
      description: Associates `members`, or principals, with a `role`.
    Metadata:
      type: object
      description: Other properties of the build.
      properties:
        buildInvocationId:
          type: string
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
        completeness:
          description: Indicates that the builder claims certain fields in this message to be complete.
          $ref: '#/components/schemas/Completeness'
        reproducible:
          type: boolean
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
        buildFinishedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build completed.
        buildStartedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build started.
      id: Metadata
    Expr:
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      id: Expr
      properties:
        title:
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
          type: string
        description:
          type: string
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
      type: object
    ListNoteOccurrencesResponse:
      type: object
      id: ListNoteOccurrencesResponse
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences attached to the specified note.
        nextPageToken:
          type: string
          description: Token to provide to skip to a particular spot in the list.
      description: Response for listing occurrences for a note.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      description: ApprovalConfig describes configuration for manual approval of a build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      properties:
        approvalRequired:
          description: Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
          type: boolean
      type: object
    DiscoveryOccurrence:
      id: DiscoveryOccurrence
      properties:
        analysisStatus:
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          description: The status of discovery for the resource.
          type: string
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - Analysis has finished unsuccessfully, the analysis itself is in a bad state.
            - The resource is known not to be supported.
        analysisError:
          type: array
          items:
            $ref: '#/components/schemas/Status'
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
        lastScanTime:
          description: The last time this resource was scanned.
          type: string
          format: google-datetime
        continuousAnalysis:
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          type: string
        archiveTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time occurrences related to this discovery occurrence were archived.
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        analysisStatusError:
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
          $ref: '#/components/schemas/Status'
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
      description: Provides information about the analysis status of a discovered resource.
      type: object
    TimeSpan:
      id: TimeSpan
      description: 'Start and end times for a build execution phase. Next ID: 3'
      properties:
        endTime:
          description: End of time span.
          format: google-datetime
          type: string
        startTime:
          description: Start of time span.
          type: string
          format: google-datetime
      type: object
    GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      type: object
      id: GerritSourceContext
      properties:
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: An alias, which may be a branch or tag.
        gerritProject:
          type: string
          description: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        revisionId:
          type: string
          description: A revision (commit) ID.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      properties:
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        approvalTime:
          type: string
          description: Output only. The time when the approval decision was made.
          format: google-datetime
          readOnly: true
        approverAccount:
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
          type: string
          readOnly: true
        url:
          type: string
          description: Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
        decision:
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          type: string
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          description: Required. The decision of this manual approval.
    Status:
      properties:
        code:
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
    Policy:
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          type: string
          format: byte
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        bindings:
          type: array
          description: Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
          items:
            $ref: '#/components/schemas/Binding'
      type: object
    VulnerabilityOccurrence:
      description: An occurrence of a severity vulnerability on a resource.
      id: VulnerabilityOccurrence
      properties:
        cvssVersion:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          description: Output only. CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        type:
          type: string
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
        packageIssue:
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
          items:
            $ref: '#/components/schemas/PackageIssue'
          type: array
        effectiveSeverity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: Output only. The note provider assigned severity of this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
        relatedUrls:
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Output only. URLs related to this vulnerability.
          type: array
        longDescription:
          type: string
          description: Output only. A detailed description of this vulnerability.
        cvssScore:
          type: number
          format: float
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        cvssv3:
          $ref: '#/components/schemas/CVSS'
          description: The cvss v3 score for the vulnerability.
        fixAvailable:
          type: boolean
          description: Output only. Whether at least one of the affected packages has a fix available.
      type: object
    ComplianceNote:
      id: ComplianceNote
      type: object
      properties:
        scanInstructions:
          format: byte
          type: string
          description: Serialized scan instructions with a predefined format.
        version:
          description: The OS and config versions the benchmark applies to.
          items:
            $ref: '#/components/schemas/ComplianceVersion'
          type: array
        rationale:
          description: A rationale for the existence of this compliance check.
          type: string
        description:
          description: A description about this compliance check.
          type: string
        cisBenchmark:
          $ref: '#/components/schemas/CisBenchmark'
        title:
          description: The title that identifies this compliance check.
          type: string
        remediation:
          description: A description of remediation steps if the compliance check fails.
          type: string
    SlsaCompleteness:
      id: SlsaCompleteness
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        arguments:
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
          type: boolean
        environment:
          type: boolean
          description: If true, the builder claims that recipe.environment is claimed to be complete.
        materials:
          type: boolean
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
    Location:
      properties:
        path:
          type: string
          description: The path from which we gathered that this package/version is installed.
        cpeUri:
          type: string
          description: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
      id: Location
      type: object
      description: An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      properties:
        type:
          description: The name of the failure.
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          type: string
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
        detail:
          type: string
          description: Explains the failure issue in more detail using hard-coded text.
      description: A fatal problem encountered during the execution of the build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
      type: object
    EnvelopeSignature:
      type: object
      properties:
        keyid:
          type: string
        sig:
          format: byte
          type: string
      id: EnvelopeSignature
    Material:
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        uri:
          type: string
      id: Material
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      description: Location of the source in an archive file in Google Cloud Storage.
      properties:
        generation:
          format: int64
          description: Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          type: string
        bucket:
          type: string
          description: Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
        object:
          description: Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
      description: Location of the source in a Google Cloud Source Repository.
      type: object
      properties:
        dir:
          description: Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
          type: string
        branchName:
          description: Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
          type: string
        projectId:
          description: ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
          type: string
        invertRegex:
          type: boolean
          description: Only trigger a build if the revision regex does NOT match the revision regex.
        commitSha:
          description: Explicit commit SHA to build.
          type: string
        repoName:
          description: Name of the Cloud Source Repository.
          type: string
        substitutions:
          type: object
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
          additionalProperties:
            type: string
        tagName:
          type: string
          description: Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
    WindowsDetail:
      type: object
      id: WindowsDetail
      properties:
        fixingKbs:
          type: array
          description: Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
          items:
            $ref: '#/components/schemas/KnowledgeBase'
        cpeUri:
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
          type: string
        description:
          description: The description of this vulnerability.
          type: string
        name:
          description: Required. The name of this vulnerability.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
      description: Artifacts created by the build pipeline.
      type: object
      properties:
        artifactManifest:
          type: string
          description: Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage'
          type: array
        mavenArtifacts:
          type: array
          description: Maven artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact'
        artifactTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Time to push all non-container artifacts to Cloud Storage.
        buildStepOutputs:
          description: List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
          type: array
          items:
            format: byte
            type: string
        numArtifacts:
          description: Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          format: int64
          type: string
        pythonPackages:
          type: array
          description: Python artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage'
        buildStepImages:
          type: array
          items:
            type: string
          description: List of build step digests, in the order corresponding to build step indices.
    Subject:
      type: object
      id: Subject
      properties:
        name:
          type: string
        digest:
          description: '`"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
          additionalProperties:
            type: string
          type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      description: BuildApproval describes a build's approval configuration, state, and result.
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult'
          readOnly: true
          description: Output only. Result of manual approval for this Build.
        config:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig'
          readOnly: true
          description: Output only. Configuration for manual approval of this build.
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          description: Output only. The state of this build's approval.
          readOnly: true
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
    Distribution:
      description: This represents a particular channel of distribution for a given package. E.g., Debian's jessie-backports dpkg mirror.
      id: Distribution
      type: object
      properties:
        architecture:
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
          description: The CPU architecture for which packages in this distribution channel were built.
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
        description:
          description: The distribution channel-specific description of this package.
          type: string
        cpeUri:
          description: Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.
          type: string
        latestVersion:
          description: The latest available version of this package in this distribution channel.
          $ref: '#/components/schemas/Version'
        maintainer:
          type: string
          description: A freeform string denoting the maintainer of this package.
    BuildProvenance:
      id: BuildProvenance
      type: object
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      properties:
        id:
          type: string
          description: Required. Unique identifier of the build.
        startTime:
          description: Time at which execution of the build was started.
          type: string
          format: google-datetime
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
        buildOptions:
          additionalProperties:
            type: string
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          type: object
        builtArtifacts:
          items:
            $ref: '#/components/schemas/Artifact'
          description: Output of the build.
          type: array
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        endTime:
          type: string
          format: google-datetime
          description: Time at which execution of the build was finished.
        sourceProvenance:
          description: Details of the Source input to the build.
          $ref: '#/components/schemas/Source'
        projectId:
          type: string
          description: ID of the project.
        createTime:
          format: google-datetime
          type: string
          description: Time at which the build was created.
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        commands:
          description: Commands requested by the build.
          type: array
          items:
            $ref: '#/components/schemas/Command'
        logsUri:
          description: URI where any logs for this provenance were written.
          type: string
    SourceContext:
      id: SourceContext
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      properties:
        git:
          $ref: '#/components/schemas/GitSourceContext'
          description: A SourceContext referring to any third party Git repo (e.g., GitHub).
        labels:
          type: object
          description: Labels with user defined metadata.
          additionalProperties:
            type: string
        cloudRepo:
          $ref: '#/components/schemas/CloudRepoSourceContext'
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
      type: object
    CloudRepoSourceContext:
      properties:
        revisionId:
          type: string
          description: A revision ID.
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: An alias, which may be a branch or tag.
        repoId:
          $ref: '#/components/schemas/RepoId'
          description: The ID of the repo.
      type: object
      id: CloudRepoSourceContext
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
    AttestationNote:
      properties:
        hint:
          description: Hint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/Hint'
      description: Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.
      type: object
      id: AttestationNote
    UpgradeOccurrence:
      properties:
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
        parsedVersion:
          $ref: '#/components/schemas/Version'
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
        distribution:
          $ref: '#/components/schemas/UpgradeDistribution'
          description: Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
        windowsUpdate:
          description: Required for Windows OS. Represents the metadata about the Windows update.
          $ref: '#/components/schemas/WindowsUpdate'
      type: object
      id: UpgradeOccurrence
      description: An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
    Jwt:
      id: Jwt
      type: object
      properties:
        compactJwt:
          type: string
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
    Category:
      type: object
      properties:
        categoryId:
          type: string
          description: The identifier of the category.
        name:
          description: The localized name of the category.
          type: string
      id: Category
      description: The category to which the update belongs.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      properties:
        groupId:
          type: string
          description: Maven `groupId` value used when uploading the artifact to Artifact Registry.
        path:
          description: Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
          type: string
        version:
          description: Maven `version` value used when uploading the artifact to Artifact Registry.
          type: string
        repository:
          type: string
          description: Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
        artifactId:
          type: string
          description: Maven `artifactId` value used when uploading the artifact to Artifact Registry.
      type: object
      description: A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
    ComplianceOccurrence:
      type: object
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          type: array
          items:
            $ref: '#/components/schemas/NonCompliantFile'
      id: ComplianceOccurrence
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        materials:
          type: boolean
        environment:
          type: boolean
        parameters:
          type: boolean
      type: object
    ProjectRepoId:
      id: ProjectRepoId
      description: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
      type: object
      properties:
        projectId:
          description: The ID of the project.
          type: string
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
      properties:
        fileHashes:
          description: Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
          readOnly: true
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          type: object
        resolvedStorageSourceManifest:
          description: A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
        resolvedRepoSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
          description: A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
        resolvedStorageSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
          description: A copy of the build's `source.storage_source`, if exists, with any generations resolved.
      description: Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      properties:
        name:
          type: string
          description: The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
      description: Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
    VulnerabilityOccurrencesSummary:
      properties:
        counts:
          description: A listing by resource of the number of fixable and total vulnerabilities.
          type: array
          items:
            $ref: '#/components/schemas/FixableTotalByDigest'
      description: A summary of how many vulnerability occurrences there are per resource and severity type.
      type: object
      id: VulnerabilityOccurrencesSummary
    SlsaBuilder:
      id: SlsaBuilder
      type: object
      properties:
        id:
          type: string
    DeploymentOccurrence:
      properties:
        resourceUri:
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
          items:
            type: string
          type: array
        undeployTime:
          type: string
          description: End of the lifetime of this deployment.
          format: google-datetime
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        platform:
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          type: string
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          description: Platform hosting this deployment.
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
        config:
          description: Configuration used to create this deployment.
          type: string
        deployTime:
          format: google-datetime
          description: Required. Beginning of the lifetime of this deployment.
          type: string
      id: DeploymentOccurrence
      type: object
      description: The period during which some deployable was active in a runtime.
    KnowledgeBase:
      type: object
      properties:
        url:
          description: A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).
          type: string
        name:
          type: string
          description: The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).
      id: KnowledgeBase
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      type: object
      description: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
      properties:
        id:
          type: string
    BatchCreateOccurrencesRequest:
      properties:
        occurrences:
          type: array
          description: Required. The occurrences to create. Max allowed length is 1000.
          items:
            $ref: '#/components/schemas/Occurrence'
      type: object
      id: BatchCreateOccurrencesRequest
      description: Request to create occurrences in batch.
    Detail:
      id: Detail
      type: object
      properties:
        description:
          type: string
          description: A vendor-specific description of this vulnerability.
        source:
          type: string
          description: The source from which the information in this Detail was obtained.
        fixedVersion:
          description: The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
          $ref: '#/components/schemas/Version'
        packageType:
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          type: string
        fixedCpeUri:
          description: The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.
          type: string
        affectedCpeUri:
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.
          type: string
        sourceUpdateTime:
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          type: string
          format: google-datetime
        severityName:
          description: The distro assigned severity of this vulnerability.
          type: string
        fixedPackage:
          type: string
          description: The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
        affectedVersionEnd:
          description: 'The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
          $ref: '#/components/schemas/Version'
        affectedVersionStart:
          $ref: '#/components/schemas/Version'
          description: 'The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
        vendor:
          type: string
          description: The name of the vendor of the product.
        isObsolete:
          description: Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
          type: boolean
        affectedPackage:
          description: Required. The package this vulnerability affects.
          type: string
      description: A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
    DSSEAttestationOccurrence:
      type: object
      id: DSSEAttestationOccurrence
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: If doing something security critical, make sure to verify the signatures in this metadata.
      description: Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
    GetIamPolicyRequest:
      properties:
        options:
          description: 'OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.'
          $ref: '#/components/schemas/GetPolicyOptions'
      description: Request message for `GetIamPolicy` method.
      id: GetIamPolicyRequest
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
      type: object
      properties:
        permissions:
          description: The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      type: object
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
      description: Request message for `SetIamPolicy` method.
    GrafeasV1FileLocation:
      id: GrafeasV1FileLocation
      type: object
      properties:
        filePath:
          type: string
          description: For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
      description: Indicates the location at which a package was found.
    UpgradeDistribution:
      properties:
        classification:
          type: string
          description: The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
        cpeUri:
          type: string
          description: Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
        cve:
          description: The cve tied to this Upgrade.
          items:
            type: string
          type: array
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
      type: object
      description: The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
      id: UpgradeDistribution
    InTotoStatement:
      type: object
      description: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
      properties:
        _type:
          description: Always `https://in-toto.io/Statement/v0.1`.
          type: string
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
      id: InTotoStatement
    SlsaProvenance:
      type: object
      properties:
        recipe:
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
          $ref: '#/components/schemas/SlsaRecipe'
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
        builder:
          $ref: '#/components/schemas/SlsaBuilder'
          description: required
        materials:
          type: array
          items:
            $ref: '#/components/schemas/Material'
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
      id: SlsaProvenance
    FileHashes:
      description: Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
      type: object
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/Hash'
          type: array
          description: Required. Collection of file hashes.
      id: FileHashes
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      properties:
        paths:
          type: array
          items:
            type: string
          description: Path globs used to match files in the build's workspace.
        timing:
          description: Output only. Stores timing information for pushing all artifact objects.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
        location:
          type: string
          description: Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
      type: object
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
      properties:
        secretEnv:
          type: array
          items:
            type: string
          description: A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
        pool:
          description: Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption'
        dynamicSubstitutions:
          type: boolean
          description: 'Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.'
        logging:
          enumDescriptions:
            - The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
            - Turn off all logging. No build logs will be captured.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          type: string
          description: Option to specify the logging mode, which determines if and where build logs are stored.
        env:
          items:
            type: string
          type: array
          description: A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
        substitutionOption:
          description: 'Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.'
          enumDescriptions:
            - Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.
            - Do not fail the build if error in substitutions checks.
          type: string
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
          description: Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
        diskSizeGb:
          type: string
          description: Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
          format: int64
        requestedVerifyOption:
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          enum:
            - NOT_VERIFIED
            - VERIFIED
          description: Requested verifiability options.
          type: string
        logStreamingOption:
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Google Cloud Storage.
            - Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed.
          type: string
          description: Option to define build log streaming behavior to Google Cloud Storage.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
        machineType:
          type: string
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
          description: Compute Engine machine type on which to run the build.
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
        workerPool:
          type: string
          description: This field deprecated; please use `pool.name` instead.
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          type: array
          items:
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
            enum:
              - NONE
              - SHA256
              - MD5
            type: string
      type: object
      description: Optional arguments to enable specific features of builds.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
      type: object
      description: 'Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.'
      properties:
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
        secretEnv:
          additionalProperties:
            format: byte
            type: string
          type: object
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      type: object
      properties:
        repository:
          type: string
          description: Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
        paths:
          items:
            type: string
          type: array
          description: Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
      description: Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      description: Location of the source in a supported storage service.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
      properties:
        repoSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
          description: If provided, get the source from this location in a Cloud Source Repository.
        storageSourceManifest:
          description: If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
        storageSource:
          description: If provided, get the source from this location in Google Cloud Storage.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      properties:
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the Python Artifact.
        uri:
          type: string
          description: URI of the uploaded artifact.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
      type: object
      description: Artifact uploaded using the PythonPackage directive.
    VulnerabilityNote:
      type: object
      description: A security vulnerability that can be found in resources.
      properties:
        cvssVersion:
          description: CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: The note provider assigned severity of this vulnerability.
        sourceUpdateTime:
          format: google-datetime
          type: string
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
        cvssV3:
          $ref: '#/components/schemas/CVSSv3'
          description: The full description of the CVSSv3 for this vulnerability.
        windowsDetails:
          type: array
          description: Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.
          items:
            $ref: '#/components/schemas/WindowsDetail'
        cvssScore:
          format: float
          description: The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          type: number
        details:
          items:
            $ref: '#/components/schemas/Detail'
          type: array
          description: Details of all known distros and packages affected by this vulnerability.
      id: VulnerabilityNote
    CisBenchmark:
      id: CisBenchmark
      description: A compliance check that is a CIS benchmark.
      type: object
      properties:
        profileLevel:
          type: integer
          format: int32
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      type: object
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      properties:
        versionName:
          type: string
          description: 'Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*'
        env:
          description: Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
    WindowsUpdate:
      description: Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
      type: object
      properties:
        title:
          type: string
          description: The localized title of the update.
        categories:
          items:
            $ref: '#/components/schemas/Category'
          description: The list of categories to which the update belongs.
          type: array
        lastPublishedTimestamp:
          description: The last published timestamp of the update.
          type: string
          format: google-datetime
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        kbArticleIds:
          items:
            type: string
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
          type: array
        identity:
          description: Required - The unique identifier for the update.
          $ref: '#/components/schemas/Identity'
        description:
          type: string
          description: The localized description of the update.
      id: WindowsUpdate
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      description: Start and end times for a build execution phase.
      properties:
        endTime:
          type: string
          description: End of time span.
          format: google-datetime
        startTime:
          description: Start of time span.
          type: string
          format: google-datetime
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
    BuildNote:
      type: object
      description: Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
      properties:
        builderVersion:
          description: Required. Immutable. Version of the builder which produced this build.
          type: string
      id: BuildNote
    BatchCreateOccurrencesResponse:
      id: BatchCreateOccurrencesResponse
      type: object
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences that were created.
      description: Response for creating occurrences in batch.
    ListNotesResponse:
      type: object
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: The notes requested.
      description: Response for listing notes.
      id: ListNotesResponse
    Signature:
      properties:
        signature:
          format: byte
          type: string
          description: The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
      type: object
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      id: Signature
    PackageOccurrence:
      properties:
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
        packageType:
          readOnly: true
          description: Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          type: string
        architecture:
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          type: string
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          readOnly: true
        location:
          type: array
          description: All of the places within the filesystem versions of this package have been found.
          items:
            $ref: '#/components/schemas/Location'
        cpeUri:
          description: Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
          readOnly: true
          type: string
        version:
          $ref: '#/components/schemas/Version'
          readOnly: true
          description: Output only. The version of the package.
        name:
          description: Required. Output only. The name of the installed package.
          readOnly: true
          type: string
      description: Details on how a particular software package was installed on a system.
      id: PackageOccurrence
      type: object
    GetPolicyOptions:
      id: GetPolicyOptions
      type: object
      properties:
        requestedPolicyVersion:
          format: int32
          type: integer
          description: Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
      description: Encapsulates settings provided to GetIamPolicy.
    RelatedUrl:
      description: Metadata for any related URL information.
      properties:
        label:
          type: string
          description: Label to describe usage of the URL.
        url:
          description: Specific URL associated with the resource.
          type: string
      id: RelatedUrl
      type: object
    AnalysisCompleted:
      properties:
        analysisType:
          items:
            type: string
          type: array
      id: AnalysisCompleted
      type: object
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
    SlsaProvenanceZeroTwo:
      type: object
      properties:
        materials:
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
          type: array
        buildType:
          type: string
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        buildConfig:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
      id: SlsaProvenanceZeroTwo
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
    License:
      properties:
        comments:
          description: Comments
          type: string
        expression:
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
          type: string
      description: License information.
      id: License
      type: object
    Occurrence:
      properties:
        deployment:
          $ref: '#/components/schemas/DeploymentOccurrence'
          description: Describes the deployment of an artifact on a runtime.
        image:
          description: Describes how this resource derives from the basis in the associated note.
          $ref: '#/components/schemas/ImageOccurrence'
        name:
          type: string
          description: Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
        vulnerability:
          $ref: '#/components/schemas/VulnerabilityOccurrence'
          description: Describes a security vulnerability.
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Describes an attestation of an artifact.
        noteName:
          description: Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
          type: string
        discovery:
          $ref: '#/components/schemas/DiscoveryOccurrence'
          description: Describes when a resource was discovered.
        build:
          $ref: '#/components/schemas/BuildOccurrence'
          description: Describes a verifiable build.
        updateTime:
          type: string
          format: google-datetime
          description: Output only. The time this occurrence was last updated.
        package:
          $ref: '#/components/schemas/PackageOccurrence'
          description: Describes the installation of a package on the linked resource.
        upgrade:
          description: Describes an available package upgrade on the linked resource.
          $ref: '#/components/schemas/UpgradeOccurrence'
        kind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          type: string
        remediation:
          description: A description of actions that can be taken to remedy the note.
          type: string
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time this occurrence was created.
        compliance:
          description: Describes a compliance violation on a linked resource.
          $ref: '#/components/schemas/ComplianceOccurrence'
        envelope:
          description: https://github.com/secure-systems-lab/dsse
          $ref: '#/components/schemas/Envelope'
        resourceUri:
          description: Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
          type: string
        dsseAttestation:
          description: Describes an attestation of an artifact using dsse.
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
      id: Occurrence
      description: An instance of an analysis type that has been found on a resource.
      type: object
    BuilderConfig:
      id: BuilderConfig
      type: object
      properties:
        id:
          type: string
    Envelope:
      properties:
        payload:
          format: byte
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
        payloadType:
          type: string
      type: object
      description: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
      id: Envelope
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      properties:
        pullTiming:
          description: Output only. Stores timing information for pulling this build step's builder image only.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
          type: array
        volumes:
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
          type: array
        waitFor:
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
          items:
            type: string
          type: array
        timeout:
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          type: string
          format: google-duration
        allowFailure:
          type: boolean
          description: Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        script:
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
          type: string
        allowExitCodes:
          items:
            format: int32
            type: integer
          type: array
          description: Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          type: string
          readOnly: true
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        entrypoint:
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
          type: string
        id:
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
          type: string
        timing:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for executing this build step.
          readOnly: true
        args:
          type: array
          items:
            type: string
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
        secretEnv:
          items:
            type: string
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          type: array
        exitCode:
          readOnly: true
          format: int32
          description: Output only. Return code from running the step.
          type: integer
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
      description: A step in the build pipeline.
      type: object
    Recipe:
      type: object
      id: Recipe
      properties:
        entryPoint:
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
          type: string
        arguments:
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          type: array
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
        definedInMaterial:
          format: int64
          type: string
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
        environment:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          type: array
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
        type:
          type: string
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
    FixableTotalByDigest:
      properties:
        fixableCount:
          description: The number of fixable vulnerabilities associated with this resource.
          format: int64
          type: string
        resourceUri:
          description: The affected resource.
          type: string
        totalCount:
          type: string
          description: The total number of vulnerabilities associated with this resource.
          format: int64
        severity:
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.
      description: Per resource and severity counts of fixable and total vulnerabilities.
      type: object
      id: FixableTotalByDigest
    Source:
      id: Source
      properties:
        additionalContexts:
          description: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
          items:
            $ref: '#/components/schemas/SourceContext'
          type: array
        artifactStorageSourceUri:
          type: string
          description: If provided, the input binary artifacts for the build came from this location.
        context:
          $ref: '#/components/schemas/SourceContext'
          description: If provided, the source code used for the build came from this location.
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
          type: object
      description: Source describes the location of the source used for the build.
      type: object
    BuildStep:
      type: object
      id: BuildStep
      properties:
        id:
          type: string
          description: Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          description: List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
        status:
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          description: Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
        exitCode:
          format: int32
          type: integer
          description: Output only. Return code from running the step.
        waitFor:
          items:
            type: string
          type: array
          description: The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
        timing:
          description: Output only. Stores timing information for executing this build step.
          $ref: '#/components/schemas/TimeSpan'
        timeout:
          format: google-duration
          description: Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
          type: string
        entrypoint:
          type: string
          description: Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
        allowExitCodes:
          description: Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
          items:
            type: integer
            format: int32
          type: array
        dir:
          description: Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
          type: string
        env:
          items:
            type: string
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          type: array
        name:
          description: Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
          type: string
        allowFailure:
          type: boolean
          description: Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
        script:
          type: string
          description: A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          type: array
          items:
            type: string
        pullTiming:
          description: Output only. Stores timing information for pulling this build step's builder image only.
          $ref: '#/components/schemas/TimeSpan'
        args:
          type: array
          items:
            type: string
          description: A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
      description: 'A step in the build pipeline. Next ID: 20'
    RepoId:
      type: object
      properties:
        uid:
          description: A server-assigned, globally unique identifier.
          type: string
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
      description: A unique identifier for a Cloud Repo.
      id: RepoId
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
      properties:
        mavenArtifacts:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact'
          description: A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
        images:
          items:
            type: string
          type: array
          description: A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
        objects:
          description: A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects'
        pythonPackages:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage'
          description: A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
          type: array
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
    Volume:
      properties:
        name:
          type: string
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
        path:
          type: string
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
      id: Volume
      description: 'Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution. Next ID: 3'
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      description: A Maven artifact uploaded using the MavenArtifact directive.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      type: object
      properties:
        uri:
          description: URI of the uploaded artifact.
          type: string
        fileHashes:
          description: Hash types and values of the Maven Artifact.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
        pushTiming:
          readOnly: true
          description: Output only. Stores timing information for pushing the specified artifact.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
    Hash:
      id: Hash
      properties:
        value:
          type: string
          format: byte
          description: Required. The hash value.
        type:
          type: string
          description: Required. The type of hash that was performed, e.g. "SHA-256".
      type: object
      description: Container message for hash values.
    Empty:
      type: object
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
    SlsaMetadata:
      properties:
        completeness:
          $ref: '#/components/schemas/SlsaCompleteness'
          description: Indicates that the builder claims certain fields in this message to be complete.
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        reproducible:
          type: boolean
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
        buildStartedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build started.
        buildInvocationId:
          type: string
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
      description: Other properties of the build.
      id: SlsaMetadata
      type: object
    CVSSv3:
      properties:
        attackVector:
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        userInteraction:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        attackComplexity:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          type: string
        integrityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        exploitabilityScore:
          format: float
          type: number
        baseScore:
          description: The base score is a function of the base metric scores.
          type: number
          format: float
        impactScore:
          type: number
          format: float
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
      description: Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
      type: object
      id: CVSSv3
    AttestationOccurrence:
      properties:
        serializedPayload:
          format: byte
          description: Required. The serialized payload that is verified by one or more `signatures`.
          type: string
        jwts:
          description: One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
          type: array
          items:
            $ref: '#/components/schemas/Jwt'
        signatures:
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
          type: array
          items:
            $ref: '#/components/schemas/Signature'
      id: AttestationOccurrence
      type: object
      description: Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
    GitSourceContext:
      type: object
      properties:
        url:
          description: Git repository URL.
          type: string
        revisionId:
          description: Git commit hash.
          type: string
      id: GitSourceContext
      description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
    Fingerprint:
      id: Fingerprint
      description: A set of properties that uniquely identify a given Docker image.
      properties:
        v2Name:
          type: string
          description: 'Output only. The name of the image''s v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.'
        v2Blob:
          type: array
          items:
            type: string
          description: Required. The ordered list of v2 blobs that represent a given image.
        v1Name:
          type: string
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
      type: object
    AliasContext:
      description: An alias to a repo revision.
      id: AliasContext
      properties:
        name:
          type: string
          description: The alias name.
        kind:
          description: The alias kind.
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
          type: string
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      type: object
    PackageIssue:
      properties:
        effectiveSeverity:
          readOnly: true
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        affectedPackage:
          type: string
          description: Required. The package this vulnerability was found in.
        fileLocation:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          description: The location at which this package was found.
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
        fixedCpeUri:
          description: The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
          type: string
        fixedVersion:
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
          $ref: '#/components/schemas/Version'
        affectedCpeUri:
          type: string
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
        packageType:
          type: string
          description: The type of package (e.g. OS, MAVEN, GO).
        fixedPackage:
          type: string
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
        fixAvailable:
          description: Output only. Whether a fix is available for this package.
          type: boolean
      id: PackageIssue
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
      type: object
    DeploymentNote:
      description: An artifact that can be deployed in some runtime.
      properties:
        resourceUri:
          items:
            type: string
          description: Required. Resource URI for the artifact being deployed.
          type: array
      type: object
      id: DeploymentNote
    Artifact:
      type: object
      description: Artifact describes a build product.
      properties:
        names:
          description: Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
          items:
            type: string
          type: array
        checksum:
          description: Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
          type: string
        id:
          type: string
          description: Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
      id: Artifact
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      type: object
      description: Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash'
          description: Collection of file hashes.
          type: array
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      type: object
      description: A non-fatal problem encountered during the execution of the build.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
      properties:
        priority:
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          description: The priority for this warning.
          type: string
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
        text:
          description: Explanation of the warning generated.
          type: string
    UpgradeNote:
      properties:
        distributions:
          items:
            $ref: '#/components/schemas/UpgradeDistribution'
          description: Metadata about the upgrade for each specific operating system.
          type: array
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: Required for Windows OS. Represents the metadata about the Windows update.
        version:
          $ref: '#/components/schemas/Version'
          description: Required for non-Windows OS. The version of the package in machine + human readable form.
        package:
          description: Required for non-Windows OS. The package this Upgrade is for.
          type: string
      id: UpgradeNote
      type: object
      description: An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      description: 'A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.'
      type: object
      properties:
        source:
          description: The location of the source files to build.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source'
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. Time at which the request to create the build was received.
          type: string
        buildTriggerId:
          description: Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
          readOnly: true
          type: string
        images:
          items:
            type: string
          type: array
          description: A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
        options:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions'
          description: Special options for this build.
        results:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results'
          description: Output only. Results of the build.
          readOnly: true
        failureInfo:
          readOnly: true
          description: Output only. Contains information about the build when status=FAILURE.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo'
        timeout:
          format: google-duration
          description: Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
          type: string
        sourceProvenance:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance'
          description: Output only. A permanent fixed identifier for source.
        logsBucket:
          description: Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
          type: string
        projectId:
          type: string
          readOnly: true
          description: Output only. ID of the project.
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: Output only. Status of the build.
          type: string
          readOnly: true
        id:
          readOnly: true
          type: string
          description: Output only. Unique identifier of the build.
        artifacts:
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts'
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret'
          description: 'Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets'
        finishTime:
          format: google-datetime
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
          type: string
          readOnly: true
        timing:
          readOnly: true
          description: 'Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets'
        tags:
          items:
            type: string
          description: Tags for annotation of a `Build`. These are not docker tags.
          type: array
        approval:
          description: Output only. Describes this build's approval configuration, status, and result.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval'
          readOnly: true
        queueTtl:
          type: string
          format: google-duration
          description: TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
        name:
          type: string
          readOnly: true
          description: 'Output only. The ''Build'' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.'
        warnings:
          type: array
          description: Output only. Non-fatal problems encountered during the execution of the build.
          readOnly: true
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning'
        logUrl:
          description: Output only. URL to logs for this build in Google Cloud Console.
          readOnly: true
          type: string
        substitutions:
          description: Substitutions data for `Build` resource.
          additionalProperties:
            type: string
          type: object
        statusDetail:
          description: Output only. Customer-readable message about the current status.
          type: string
          readOnly: true
        startTime:
          format: google-datetime
          description: Output only. Time at which execution of the build was started.
          type: string
          readOnly: true
        steps:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep'
          type: array
          description: Required. The operations to be performed on the workspace.
        serviceAccount:
          type: string
          description: 'IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. '
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      properties:
        endTime:
          type: string
          format: google-datetime
          description: Output only. The time that this operation was marked completed or failed.
        createTime:
          description: Output only. The time this operation was created.
          type: string
          format: google-datetime
      type: object
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      description: Metadata for all operations used and required for all operations that created by Container Analysis Providers
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      properties:
        kmsKeyName:
          description: 'Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*'
          type: string
        envMap:
          description: Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
          type: object
          additionalProperties:
            type: string
            format: byte
      type: object
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
    PackageNote:
      id: PackageNote
      description: PackageNote represents a particular package version.
      type: object
      properties:
        architecture:
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
          description: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
        maintainer:
          type: string
          description: A freeform text denoting the maintainer of this package.
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        version:
          $ref: '#/components/schemas/Version'
          description: The version of the package.
        url:
          description: The homepage for this package.
          type: string
        digest:
          description: Hash value, typically a file digest, that allows unique identification a specific package.
          items:
            $ref: '#/components/schemas/Digest'
          type: array
        description:
          type: string
          description: The description of this package.
        packageType:
          type: string
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
        distribution:
          description: Deprecated. The various channels by which a package is distributed.
          items:
            $ref: '#/components/schemas/Distribution'
          type: array
        name:
          description: Required. Immutable. The name of the package.
          type: string
        cpeUri:
          type: string
          description: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
    DSSEAttestationNote:
      id: DSSEAttestationNote
      properties:
        hint:
          description: DSSEHint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/DSSEHint'
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        entryPoint:
          type: string
        uri:
          type: string
      type: object
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
    SlsaRecipe:
      properties:
        definedInMaterial:
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          type: string
          format: int64
        entryPoint:
          type: string
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
        environment:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
          type: object
        type:
          type: string
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
        arguments:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
      type: object
      id: SlsaRecipe
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
          type: array
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      description: Other properties of the build.
      properties:
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildInvocationId:
          type: string
        buildStartedOn:
          format: google-datetime
          type: string
        buildFinishedOn:
          format: google-datetime
          type: string
        reproducible:
          type: boolean
      type: object
    BatchCreateNotesResponse:
      properties:
        notes:
          items:
            $ref: '#/components/schemas/Note'
          description: The notes that were created.
          type: array
      id: BatchCreateNotesResponse
      type: object
      description: Response for creating notes in batch.
    ComplianceVersion:
      properties:
        version:
          description: The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
          type: string
        benchmarkDocument:
          description: The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".
          type: string
        cpeUri:
          description: The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.
          type: string
      type: object
      id: ComplianceVersion
      description: Describes the CIS benchmark version that is applicable to a given OS and os version.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      description: An image built by the pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
      properties:
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        name:
          description: Name used to push the container image to Google Container Registry, as presented to `docker push`.
          type: string
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified image.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      type: object
      description: Container message for hash values.
      properties:
        type:
          enum:
            - NONE
            - SHA256
            - MD5
          type: string
          description: The type of hash that was performed.
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
        value:
          description: The hash value.
          format: byte
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      type: object
      description: Secrets and secret environment variables.
      properties:
        secretManager:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret'
          type: array
          description: Secrets in Secret Manager and associated secret environment variable.
        inline:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret'
          description: Secrets encrypted with KMS key and the associated secret environment variable.
          type: array
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
      type: object
      description: Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
      properties:
        generation:
          description: Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
          type: string
          format: int64
        bucket:
          description: Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
          type: string
        object:
          description: Google Cloud Storage object containing the source manifest. This object must be a JSON file.
          type: string
    Command:
      properties:
        env:
          items:
            type: string
          type: array
          description: Environment variables set before running this command.
        args:
          description: Command-line arguments used when executing this command.
          type: array
          items:
            type: string
        id:
          description: Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
          type: string
        waitFor:
          type: array
          items:
            type: string
          description: The ID(s) of the command(s) that this command depends on.
        dir:
          description: Working directory (relative to project source root) used when running this command.
          type: string
        name:
          description: Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
          type: string
      description: Command describes a step performed as part of the build pipeline.
      type: object
      id: Command
    DiscoveryNote:
      id: DiscoveryNote
      description: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
      type: object
      properties:
        analysisKind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          description: Required. Immutable. The kind of analysis that is handled by this discovery.
          type: string
    InTotoProvenance:
      properties:
        recipe:
          $ref: '#/components/schemas/Recipe'
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
        builderConfig:
          $ref: '#/components/schemas/BuilderConfig'
          description: required
        metadata:
          $ref: '#/components/schemas/Metadata'
        materials:
          type: array
          items:
            type: string
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
      id: InTotoProvenance
      type: object
    NonCompliantFile:
      id: NonCompliantFile
      properties:
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
        path:
          description: Empty if `display_command` is set.
          type: string
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
      description: Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
      type: object
    CVSS:
      properties:
        exploitabilityScore:
          type: number
          format: float
        authentication:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
        attackComplexity:
          type: string
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
          enumDescriptions:
            - ''
            - ''
            - ''
        scope:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
        availabilityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        privilegesRequired:
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        impactScore:
          type: number
          format: float
        baseScore:
          format: float
          description: The base score is a function of the base metric scores.
          type: number
        userInteraction:
          type: string
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          enumDescriptions:
            - ''
            - ''
            - ''
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        integrityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        attackVector:
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
      id: CVSS
      type: object
      description: Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
    ImageOccurrence:
      properties:
        layerInfo:
          items:
            $ref: '#/components/schemas/Layer'
          description: This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
          type: array
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        distance:
          format: int32
          type: integer
          description: Output only. The number of layers by which this image differs from the associated image basis.
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      type: object
      id: ImageOccurrence
    Version:
      description: Version contains structured information about the version of a package.
      properties:
        inclusive:
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
          type: boolean
        name:
          type: string
          description: Required only when version kind is NORMAL. The main part of the version name.
        revision:
          description: The iteration of the package build from the above version.
          type: string
        fullName:
          description: Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
          type: string
        epoch:
          format: int32
          type: integer
          description: Used to correct mistakes in the version numbering scheme.
        kind:
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          type: string
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
      type: object
      id: Version
    Digest:
      properties:
        digestBytes:
          description: Value of the digest.
          format: byte
          type: string
        algo:
          description: '`SHA1`, `SHA512` etc.'
          type: string
      id: Digest
      type: object
      description: Digest information.
    DSSEHint:
      id: DSSEHint
      properties:
        humanReadableName:
          description: Required. The human readable name of this attestation authority, for example "cloudbuild-prod".
          type: string
      description: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
      type: object
    BuildOccurrence:
      type: object
      description: Details of a build occurrence.
      id: BuildOccurrence
      properties:
        intotoStatement:
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
          $ref: '#/components/schemas/InTotoStatement'
        intotoProvenance:
          $ref: '#/components/schemas/InTotoProvenance'
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
        provenance:
          $ref: '#/components/schemas/BuildProvenance'
          description: The actual provenance for the build.
        provenanceBytes:
          type: string
          description: Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
    ListOccurrencesResponse:
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
          description: The occurrences requested.
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
      id: ListOccurrencesResponse
      type: object
      description: Response for listing occurrences.
    ImageNote:
      properties:
        fingerprint:
          description: Required. Immutable. The fingerprint of the base image.
          $ref: '#/components/schemas/Fingerprint'
        resourceUrl:
          type: string
          description: Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
      type: object
      description: 'Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.'
      id: ImageNote
    Completeness:
      properties:
        materials:
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
          type: boolean
        arguments:
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
          type: boolean
        environment:
          description: If true, the builder claims that recipe.environment is claimed to be complete.
          type: boolean
      id: Completeness
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      description: Identifies the event that kicked off the build.
      properties:
        environment:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        parameters:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
    Hint:
      description: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.
      properties:
        humanReadableName:
          description: Required. The human readable name of this attestation authority, for example "qa".
          type: string
      id: Hint
      type: object
    Layer:
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        arguments:
          type: string
          description: The recovered arguments to the Dockerfile directive.
        directive:
          type: string
          description: Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
      id: Layer
      type: object
    BatchCreateNotesRequest:
      properties:
        notes:
          description: Required. The notes to create. Max allowed length is 1000.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Note'
      type: object
      description: Request to create notes in batch.
      id: BatchCreateNotesRequest
    Note:
      properties:
        build:
          $ref: '#/components/schemas/BuildNote'
          description: A note describing build provenance for a verifiable build.
        expirationTime:
          type: string
          description: Time of expiration for this note. Empty if note does not expire.
          format: google-datetime
        longDescription:
          description: A detailed description of this note.
          type: string
        kind:
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          description: Output only. The type of analysis. This field can be used as a filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
          type: string
        discovery:
          description: A note describing the initial analysis of a resource.
          $ref: '#/components/schemas/DiscoveryNote'
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time this note was created. This field can be used as a filter in list requests.
        vulnerability:
          $ref: '#/components/schemas/VulnerabilityNote'
          description: A note describing a package vulnerability.
        upgrade:
          $ref: '#/components/schemas/UpgradeNote'
          description: A note describing available package upgrades.
        relatedNoteNames:
          type: array
          items:
            type: string
          description: Other notes related to this note.
        compliance:
          description: A note describing a compliance check.
          $ref: '#/components/schemas/ComplianceNote'
        image:
          description: A note describing a base image.
          $ref: '#/components/schemas/ImageNote'
        shortDescription:
          type: string
          description: A one sentence description of this note.
        dsseAttestation:
          description: A note describing a dsse attestation note.
          $ref: '#/components/schemas/DSSEAttestationNote'
        attestation:
          description: A note describing an attestation role.
          $ref: '#/components/schemas/AttestationNote'
        deployment:
          $ref: '#/components/schemas/DeploymentNote'
          description: A note describing something that can be deployed.
        package:
          description: A note describing a package hosted by various package managers.
          $ref: '#/components/schemas/PackageNote'
        updateTime:
          type: string
          description: Output only. The time this note was last updated. This field can be used as a filter in list requests.
          format: google-datetime
        name:
          description: Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
          type: string
        relatedUrl:
          type: array
          description: URLs associated with this note.
          items:
            $ref: '#/components/schemas/RelatedUrl'
      type: object
      id: Note
      description: A type of analysis that can be done for a resource.
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    occurrences_notes:
      id: google.containeranalysis.occurrences_notes
      name: occurrences_notes
      title: Occurrences_notes
      methods:
        projects_occurrences_getNotes:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_notes/methods/projects_occurrences_getNotes'
        insert: []
        update: []
        delete: []
    occurrences_iam_policies:
      id: google.containeranalysis.occurrences_iam_policies
      name: occurrences_iam_policies
      title: Occurrences_iam_policies
      methods:
        projects_occurrences_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_iam_policies/methods/projects_occurrences_getIamPolicy'
        insert: []
        update: []
        delete: []
    occurrences:
      id: google.containeranalysis.occurrences
      name: occurrences
      title: Occurrences
      methods:
        projects_occurrences_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: occurrences
        projects_occurrences_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: occurrences
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_get'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_notes_occurrences_list'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_delete'
    occurrences_batch:
      id: google.containeranalysis.occurrences_batch
      name: occurrences_batch
      title: Occurrences_batch
      methods:
        projects_occurrences_batchCreate:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/occurrences_batch/methods/projects_occurrences_batchCreate'
        update: []
        delete: []
    occurrences_vulnerability_summary:
      id: google.containeranalysis.occurrences_vulnerability_summary
      name: occurrences_vulnerability_summary
      title: Occurrences_vulnerability_summary
      methods:
        projects_occurrences_getVulnerabilitySummary:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:vulnerabilitySummary/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_vulnerability_summary/methods/projects_occurrences_getVulnerabilitySummary'
        insert: []
        update: []
        delete: []
    notes:
      id: google.containeranalysis.notes
      name: notes
      title: Notes
      methods:
        projects_notes_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: notes
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_get'
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_delete'
    notes_batch:
      id: google.containeranalysis.notes_batch
      name: notes_batch
      title: Notes_batch
      methods:
        projects_notes_batchCreate:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/notes_batch/methods/projects_notes_batchCreate'
        update: []
        delete: []
    notes_iam_policies:
      id: google.containeranalysis.notes_iam_policies
      name: notes_iam_policies
      title: Notes_iam_policies
      methods:
        projects_notes_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes_iam_policies/methods/projects_notes_getIamPolicy'
        insert: []
        update: []
        delete: []
    occurrences_iam_bindings:
      id: google.containeranalysis.occurrences_iam_bindings
      name: occurrences_iam_bindings
      title: occurrences_iam_bindings
      methods:
        projects_occurrences_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_iam_bindings/methods/projects_occurrences_getIamPolicy'
    notes_iam_bindings:
      id: google.containeranalysis.notes_iam_bindings
      name: notes_iam_bindings
      title: notes_iam_bindings
      methods:
        projects_notes_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/notes_iam_bindings/methods/projects_notes_getIamPolicy'
paths:
  /v1/projects/{projectsId}/occurrences/{occurrencesId}/notes:
    parameters: &ref_1
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
    get:
      description: Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_notes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:
    parameters: *ref_1
    delete:
      description: Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: delete
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/occurrences:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateOccurrencesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_batch
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/occurrences:
    parameters: *ref_1
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/occurrences:vulnerabilitySummary:
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityOccurrencesSummary'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences_vulnerability_summary
      x-stackQL-verb: select
  /v1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes/{notesId}:
    parameters: *ref_1
    patch:
      description: Updates the specified note.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: exec
    delete:
      description: Deletes the specified note.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: delete
    get:
      description: Gets the specified note.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/notes:
    parameters: *ref_1
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-verb: insert
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: notes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/notes:batchCreate:
    parameters: *ref_1
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateNotesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_batch
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/notes/{notesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/notes/{notesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes/{notesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/notes/{notesId}/occurrences:
    parameters: *ref_1
    get:
      description: Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-verb: select
