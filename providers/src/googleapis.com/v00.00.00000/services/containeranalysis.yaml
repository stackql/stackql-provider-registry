openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Container Analysis API
  description: 'An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.'
  version: v1
  x-discovery-doc-revision: '20230811'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/container-analysis/api/reference/rest/'
servers:
  - url: 'https://containeranalysis.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    SBOMReferenceNote:
      description: The note representing an SBOM reference.
      id: SBOMReferenceNote
      type: object
      properties:
        format:
          type: string
          description: 'The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...'
        version:
          description: 'The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.'
          type: string
    UpgradeNote:
      description: 'An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.'
      type: object
      properties:
        windowsUpdate:
          description: Required for Windows OS. Represents the metadata about the Windows update.
          $ref: '#/components/schemas/WindowsUpdate'
        version:
          description: Required for non-Windows OS. The version of the package in machine + human readable form.
          $ref: '#/components/schemas/Version'
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
        distributions:
          items:
            $ref: '#/components/schemas/UpgradeDistribution'
          type: array
          description: Metadata about the upgrade for each specific operating system.
      id: UpgradeNote
    Status:
      properties:
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          type: array
        code:
          type: integer
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
      type: object
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult:
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      properties:
        approvalTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time when the approval decision was made.
        url:
          description: 'Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.'
          type: string
        approverAccount:
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
          type: string
          readOnly: true
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        decision:
          description: Required. The decision of this manual approval.
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          type: string
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption:
      description: 'Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption
      properties:
        name:
          description: 'The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}'
          type: string
      type: object
    BuildProvenance:
      properties:
        endTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was finished.
        logsUri:
          type: string
          description: URI where any logs for this provenance were written.
        id:
          description: Required. Unique identifier of the build.
          type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
        creator:
          type: string
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
        createTime:
          description: Time at which the build was created.
          type: string
          format: google-datetime
        builtArtifacts:
          description: Output of the build.
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
        startTime:
          description: Time at which execution of the build was started.
          format: google-datetime
          type: string
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        buildOptions:
          type: object
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          additionalProperties:
            type: string
        commands:
          description: Commands requested by the build.
          items:
            $ref: '#/components/schemas/Command'
          type: array
        builderVersion:
          description: Version string of the builder at the time this build was executed.
          type: string
        projectId:
          type: string
          description: ID of the project.
      id: BuildProvenance
      type: object
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
    Digest:
      description: Digest information.
      properties:
        algo:
          description: '`SHA1`, `SHA512` etc.'
          type: string
        digestBytes:
          format: byte
          description: Value of the digest.
          type: string
      type: object
      id: Digest
    ListNoteOccurrencesResponse:
      description: Response for listing occurrences for a note.
      id: ListNoteOccurrencesResponse
      type: object
      properties:
        occurrences:
          type: array
          items:
            $ref: '#/components/schemas/Occurrence'
          description: The occurrences attached to the specified note.
        nextPageToken:
          type: string
          description: Token to provide to skip to a particular spot in the list.
    AttestationOccurrence:
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
        jwts:
          description: 'One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.'
          items:
            $ref: '#/components/schemas/Jwt'
          type: array
        serializedPayload:
          description: Required. The serialized payload that is verified by one or more `signatures`.
          type: string
          format: byte
      description: 'Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.'
      type: object
      id: AttestationOccurrence
    Fingerprint:
      type: object
      id: Fingerprint
      properties:
        v2Name:
          type: string
          description: 'Output only. The name of the image''s v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.'
        v1Name:
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
          type: string
        v2Blob:
          items:
            type: string
          description: Required. The ordered list of v2 blobs that represent a given image.
          type: array
      description: A set of properties that uniquely identify a given Docker image.
    Empty:
      type: object
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
    ResourceDescriptor:
      type: object
      properties:
        name:
          type: string
        uri:
          type: string
        mediaType:
          type: string
        digest:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: any
        content:
          type: string
          format: byte
        downloadLocation:
          type: string
      id: ResourceDescriptor
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact
      description: A Maven artifact uploaded using the MavenArtifact directive.
      properties:
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the Maven Artifact.
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
        uri:
          description: URI of the uploaded artifact.
          type: string
    FileHashes:
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/Hash'
          description: Required. Collection of file hashes.
          type: array
      type: object
      id: FileHashes
      description: 'Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.'
    WindowsUpdate:
      properties:
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        lastPublishedTimestamp:
          type: string
          description: The last published timestamp of the update.
          format: google-datetime
        identity:
          description: Required - The unique identifier for the update.
          $ref: '#/components/schemas/Identity'
        categories:
          description: The list of categories to which the update belongs.
          items:
            $ref: '#/components/schemas/Category'
          type: array
        title:
          description: The localized title of the update.
          type: string
        kbArticleIds:
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
          type: array
          items:
            type: string
        description:
          type: string
          description: The localized description of the update.
      description: 'Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.'
      type: object
      id: WindowsUpdate
    RunDetails:
      id: RunDetails
      type: object
      properties:
        builder:
          $ref: '#/components/schemas/ProvenanceBuilder'
        byproducts:
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
          type: array
        metadata:
          $ref: '#/components/schemas/BuildMetadata'
    BuildOccurrence:
      type: object
      description: Details of a build occurrence.
      id: BuildOccurrence
      properties:
        intotoStatement:
          $ref: '#/components/schemas/InTotoStatement'
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
        provenance:
          description: The actual provenance for the build.
          $ref: '#/components/schemas/BuildProvenance'
        inTotoSlsaProvenanceV1:
          $ref: '#/components/schemas/InTotoSlsaProvenanceV1'
          description: 'In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.'
        intotoProvenance:
          $ref: '#/components/schemas/InTotoProvenance'
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
        provenanceBytes:
          type: string
          description: 'Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.'
    GetIamPolicyRequest:
      description: Request message for `GetIamPolicy` method.
      id: GetIamPolicyRequest
      properties:
        options:
          description: 'OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.'
          $ref: '#/components/schemas/GetPolicyOptions'
      type: object
    CloudRepoSourceContext:
      id: CloudRepoSourceContext
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      properties:
        repoId:
          $ref: '#/components/schemas/RepoId'
          description: The ID of the repo.
        revisionId:
          type: string
          description: A revision ID.
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: 'An alias, which may be a branch or tag.'
      type: object
    SlsaProvenanceV1:
      type: object
      id: SlsaProvenanceV1
      properties:
        buildDefinition:
          $ref: '#/components/schemas/BuildDefinition'
        runDetails:
          $ref: '#/components/schemas/RunDetails'
      description: 'Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.'
    ComplianceOccurrence:
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          type: array
          items:
            $ref: '#/components/schemas/NonCompliantFile'
      type: object
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
      id: ComplianceOccurrence
    VulnerabilityOccurrencesSummary:
      type: object
      properties:
        counts:
          type: array
          description: A listing by resource of the number of fixable and total vulnerabilities.
          items:
            $ref: '#/components/schemas/FixableTotalByDigest'
      description: A summary of how many vulnerability occurrences there are per resource and severity type.
      id: VulnerabilityOccurrencesSummary
    Hash:
      type: object
      description: Container message for hash values.
      id: Hash
      properties:
        value:
          type: string
          description: Required. The hash value.
          format: byte
        type:
          description: 'Required. The type of hash that was performed, e.g. "SHA-256".'
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance
      properties:
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          type: object
          description: 'Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.'
          readOnly: true
        resolvedStorageSourceManifest:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
          description: 'A copy of the build''s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.'
        resolvedRepoSource:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
          description: 'A copy of the build''s `source.repo_source`, if exists, with any revisions resolved.'
        resolvedStorageSource:
          description: 'A copy of the build''s `source.storage_source`, if exists, with any generations resolved.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
      type: object
      description: 'Provenance of the source. Ways to find the original source, or verify that some source was used for this build.'
    License:
      id: License
      type: object
      properties:
        comments:
          type: string
          description: Comments
        expression:
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
          type: string
      description: License information.
    PackageOccurrence:
      type: object
      properties:
        architecture:
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          readOnly: true
          type: string
        version:
          readOnly: true
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
        cpeUri:
          description: 'Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.'
          readOnly: true
          type: string
        packageType:
          readOnly: true
          description: 'Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
          type: string
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
        name:
          description: Required. Output only. The name of the installed package.
          type: string
          readOnly: true
        location:
          type: array
          description: All of the places within the filesystem versions of this package have been found.
          items:
            $ref: '#/components/schemas/Location'
      id: PackageOccurrence
      description: Details on how a particular software package was installed on a system.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Results:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Results
      description: Artifacts created by the build pipeline.
      properties:
        npmPackages:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage'
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          type: array
        buildStepOutputs:
          type: array
          description: 'List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.'
          items:
            format: byte
            type: string
        buildStepImages:
          description: 'List of build step digests, in the order corresponding to build step indices.'
          items:
            type: string
          type: array
        artifactManifest:
          type: string
          description: Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
        artifactTiming:
          description: Time to push all non-container artifacts to Cloud Storage.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        mavenArtifacts:
          type: array
          description: Maven artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact'
        pythonPackages:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage'
          description: Python artifacts uploaded to Artifact Registry at the end of the build.
          type: array
        numArtifacts:
          format: int64
          description: Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          type: string
        images:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage'
          description: Container images that were built as a part of the build.
          type: array
    ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts
      properties:
        objects:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects'
          description: 'A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account''s credentials. The location and generation of the uploaded objects will be stored in the Build resource''s results field. If any objects fail to be pushed, the build is marked FAILURE.'
        pythonPackages:
          description: 'A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.'
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage'
        mavenArtifacts:
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact'
          description: 'A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any artifacts fail to be pushed, the build is marked FAILURE.'
        npmPackages:
          description: 'A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any packages fail to be pushed, the build is marked FAILURE.'
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage'
          type: array
        images:
          items:
            type: string
          type: array
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the Build resource''s results field. If any of the images fail to be pushed, the build is marked FAILURE.'
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage
      properties:
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
          readOnly: true
        uri:
          description: URI of the uploaded npm package.
          type: string
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the npm package.
      description: An npm package uploaded to Artifact Registry using the NpmPackage directive.
    Note:
      description: A type of analysis that can be done for a resource.
      id: Note
      type: object
      properties:
        name:
          description: 'Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.'
          type: string
        vulnerabilityAssessment:
          description: A note describing a vulnerability assessment.
          $ref: '#/components/schemas/VulnerabilityAssessmentNote'
        upgrade:
          $ref: '#/components/schemas/UpgradeNote'
          description: A note describing available package upgrades.
        discovery:
          $ref: '#/components/schemas/DiscoveryNote'
          description: A note describing the initial analysis of a resource.
        compliance:
          description: A note describing a compliance check.
          $ref: '#/components/schemas/ComplianceNote'
        dsseAttestation:
          $ref: '#/components/schemas/DSSEAttestationNote'
          description: A note describing a dsse attestation note.
        image:
          description: A note describing a base image.
          $ref: '#/components/schemas/ImageNote'
        shortDescription:
          type: string
          description: A one sentence description of this note.
        build:
          $ref: '#/components/schemas/BuildNote'
          description: A note describing build provenance for a verifiable build.
        expirationTime:
          type: string
          description: Time of expiration for this note. Empty if note does not expire.
          format: google-datetime
        deployment:
          $ref: '#/components/schemas/DeploymentNote'
          description: A note describing something that can be deployed.
        attestation:
          $ref: '#/components/schemas/AttestationNote'
          description: A note describing an attestation role.
        kind:
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          description: Output only. The type of analysis. This field can be used as a filter in list requests.
        updateTime:
          description: Output only. The time this note was last updated. This field can be used as a filter in list requests.
          type: string
          format: google-datetime
        vulnerability:
          $ref: '#/components/schemas/VulnerabilityNote'
          description: A note describing a package vulnerability.
        package:
          $ref: '#/components/schemas/PackageNote'
          description: A note describing a package hosted by various package managers.
        longDescription:
          description: A detailed description of this note.
          type: string
        relatedNoteNames:
          description: Other notes related to this note.
          type: array
          items:
            type: string
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time this note was created. This field can be used as a filter in list requests.
        sbomReference:
          description: A note describing an SBOM reference.
          $ref: '#/components/schemas/SBOMReferenceNote'
        relatedUrl:
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
          description: URLs associated with this note.
    BatchCreateNotesResponse:
      type: object
      description: Response for creating notes in batch.
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: The notes that were created.
      id: BatchCreateNotesResponse
    ProvenanceBuilder:
      properties:
        version:
          type: object
          additionalProperties:
            type: string
        id:
          type: string
        builderDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
      id: ProvenanceBuilder
      type: object
    Jwt:
      type: object
      id: Jwt
      properties:
        compactJwt:
          type: string
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets:
      description: Secrets and secret environment variables.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets
      properties:
        secretManager:
          description: Secrets in Secret Manager and associated secret environment variable.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret'
          type: array
        inline:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret'
          type: array
          description: Secrets encrypted with KMS key and the associated secret environment variable.
      type: object
    SlsaRecipe:
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      type: object
      id: SlsaRecipe
      properties:
        entryPoint:
          type: string
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
        definedInMaterial:
          type: string
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
          format: int64
        arguments:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.'
        type:
          type: string
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
        environment:
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.'
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
    BuildMetadata:
      type: object
      id: BuildMetadata
      properties:
        startedOn:
          type: string
          format: google-datetime
        finishedOn:
          format: google-datetime
          type: string
        invocationId:
          type: string
    FixableTotalByDigest:
      id: FixableTotalByDigest
      type: object
      properties:
        fixableCount:
          format: int64
          type: string
          description: The number of fixable vulnerabilities associated with this resource.
        totalCount:
          format: int64
          description: The total number of vulnerabilities associated with this resource.
          type: string
        severity:
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities.
        resourceUri:
          description: The affected resource.
          type: string
      description: Per resource and severity counts of fixable and total vulnerabilities.
    SlsaProvenance:
      properties:
        recipe:
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
          $ref: '#/components/schemas/SlsaRecipe'
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
        materials:
          type: array
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
          items:
            $ref: '#/components/schemas/Material'
        builder:
          description: required
          $ref: '#/components/schemas/SlsaBuilder'
      id: SlsaProvenance
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions:
      description: Optional arguments to enable specific features of builds.
      properties:
        machineType:
          description: Compute Engine machine type on which to run the build.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
            - E2_MEDIUM
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
            - E2 machine with 1 CPU.
          type: string
        dynamicSubstitutions:
          description: 'Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.'
          type: boolean
        defaultLogsBucketBehavior:
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          description: Optional. Option to specify how default logs buckets are setup.
          enumDescriptions:
            - Unspecified.
            - Bucket is located in user-owned project in the same region as the build. The builder service account must have access to create and write to Cloud Storage buckets in the build project.
          type: string
        workerPool:
          description: This field deprecated; please use `pool.name` instead.
          deprecated: true
          type: string
        volumes:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
          description: 'Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.'
          type: array
        substitutionOption:
          description: 'Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.'
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
          type: string
          enumDescriptions:
            - 'Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.'
            - Do not fail the build if error in substitutions checks.
        requestedVerifyOption:
          enum:
            - NOT_VERIFIED
            - VERIFIED
          type: string
          description: Requested verifiability options.
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
        sourceProvenanceHash:
          items:
            type: string
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
          type: array
          description: Requested hash for SourceProvenance.
        pool:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption'
          description: 'Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
        logging:
          description: 'Option to specify the logging mode, which determines if and where build logs are stored.'
          type: string
          enumDescriptions:
            - The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - 'Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).'
            - Turn off all logging. No build logs will be captured.
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
          enumDeprecated:
            - false
            - false
            - false
            - true
            - false
            - false
        env:
          items:
            type: string
          description: 'A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".'
          type: array
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for all build steps.
        logStreamingOption:
          description: Option to define build log streaming behavior to Cloud Storage.
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - Build logs should not be streamed to Cloud Storage; they will be written when the build is completed.
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
          type: string
        secretEnv:
          description: 'A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build''s `Secret`. These variables will be available to all build steps in this build.'
          type: array
          items:
            type: string
        diskSizeGb:
          format: int64
          description: 'Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.'
          type: string
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions
    ContaineranalysisGoogleDevtoolsCloudbuildV1Build:
      properties:
        startTime:
          format: google-datetime
          type: string
          description: Output only. Time at which execution of the build was started.
          readOnly: true
        options:
          description: Special options for this build.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions'
        source:
          description: The location of the source files to build.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Source'
        substitutions:
          additionalProperties:
            type: string
          description: Substitutions data for `Build` resource.
          type: object
        artifacts:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts'
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: Output only. Status of the build.
          readOnly: true
          type: string
        id:
          type: string
          description: Output only. Unique identifier of the build.
          readOnly: true
        logsBucket:
          type: string
          description: 'Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.'
        name:
          readOnly: true
          description: 'Output only. The ''Build'' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.'
          type: string
        timeout:
          description: 'Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.'
          format: google-duration
          type: string
        projectId:
          type: string
          readOnly: true
          description: Output only. ID of the project.
        warnings:
          description: Output only. Non-fatal problems encountered during the execution of the build.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning'
        results:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Results'
          description: Output only. Results of the build.
        createTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. Time at which the request to create the build was received.
        finishTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
        images:
          items:
            type: string
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the `Build` resource''s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.'
          type: array
        buildTriggerId:
          description: 'Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.'
          type: string
          readOnly: true
        sourceProvenance:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance'
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets'
        tags:
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
          type: array
        failureInfo:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo'
          readOnly: true
          description: Output only. Contains information about the build when status=FAILURE.
        approval:
          description: 'Output only. Describes this build''s approval configuration, status, and result.'
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval'
        timing:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          readOnly: true
          description: 'Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.'
        steps:
          type: array
          description: Required. The operations to be performed on the workspace.
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep'
        queueTtl:
          description: 'TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.'
          format: google-duration
          type: string
        secrets:
          type: array
          description: 'Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets'
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Secret'
        logUrl:
          type: string
          readOnly: true
          description: Output only. URL to logs for this build in Google Cloud Console.
        statusDetail:
          type: string
          readOnly: true
          description: Output only. Customer-readable message about the current status.
        serviceAccount:
          description: 'IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. '
          type: string
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Build
      description: 'A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.'
    ComplianceNote:
      type: object
      id: ComplianceNote
      properties:
        cisBenchmark:
          $ref: '#/components/schemas/CisBenchmark'
        description:
          description: A description about this compliance check.
          type: string
        rationale:
          type: string
          description: A rationale for the existence of this compliance check.
        version:
          items:
            $ref: '#/components/schemas/ComplianceVersion'
          description: The OS and config versions the benchmark applies to.
          type: array
        remediation:
          type: string
          description: A description of remediation steps if the compliance check fails.
        scanInstructions:
          type: string
          description: Serialized scan instructions with a predefined format.
          format: byte
        title:
          type: string
          description: The title that identifies this compliance check.
    BuildDefinition:
      id: BuildDefinition
      properties:
        internalParameters:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        buildType:
          type: string
        externalParameters:
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
        resolvedDependencies:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
      type: object
    CVSS:
      id: CVSS
      description: 'Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.'
      type: object
      properties:
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        exploitabilityScore:
          type: number
          format: float
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
        userInteraction:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          type: string
        baseScore:
          format: float
          type: number
          description: The base score is a function of the base metric scores.
        availabilityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        impactScore:
          format: float
          type: number
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        attackVector:
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          type: string
        integrityImpact:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        authentication:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
    Subject:
      type: object
      properties:
        name:
          type: string
        digest:
          description: '`"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
          type: object
          additionalProperties:
            type: string
      id: Subject
    ListNotesResponse:
      properties:
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: The notes requested.
      id: ListNotesResponse
      description: Response for listing notes.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan:
      description: Start and end times for a build execution phase.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan
      properties:
        startTime:
          description: Start of time span.
          type: string
          format: google-datetime
        endTime:
          type: string
          format: google-datetime
          description: End of time span.
      type: object
    AnalysisCompleted:
      type: object
      id: AnalysisCompleted
      properties:
        analysisType:
          items:
            type: string
          type: array
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
    SlsaBuilder:
      id: SlsaBuilder
      type: object
      properties:
        id:
          type: string
    GerritSourceContext:
      description: A SourceContext referring to a Gerrit project.
      id: GerritSourceContext
      properties:
        aliasContext:
          description: 'An alias, which may be a branch or tag.'
          $ref: '#/components/schemas/AliasContext'
        gerritProject:
          description: 'The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.'
          type: string
        hostUri:
          type: string
          description: The URI of a running Gerrit instance.
        revisionId:
          description: A revision (commit) ID.
          type: string
      type: object
    DSSEAttestationOccurrence:
      type: object
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: 'If doing something security critical, make sure to verify the signatures in this metadata.'
      id: DSSEAttestationOccurrence
      description: 'Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.'
    VulnerabilityNote:
      id: VulnerabilityNote
      type: object
      description: A security vulnerability that can be found in resources.
      properties:
        windowsDetails:
          description: 'Windows details get their own format because the information format and model don''t match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.'
          items:
            $ref: '#/components/schemas/WindowsDetail'
          type: array
        sourceUpdateTime:
          format: google-datetime
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          type: string
        cvssVersion:
          enumDescriptions:
            - ''
            - ''
            - ''
          description: CVSS version used to populate cvss_score and severity.
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          type: string
        cvssV3:
          description: The full description of the CVSSv3 for this vulnerability.
          $ref: '#/components/schemas/CVSSv3'
        cvssV2:
          description: The full description of the v2 CVSS for this vulnerability.
          $ref: '#/components/schemas/CVSS'
        cvssScore:
          description: The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          type: number
          format: float
        severity:
          type: string
          description: The note provider assigned severity of this vulnerability.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
        details:
          description: Details of all known distros and packages affected by this vulnerability.
          type: array
          items:
            $ref: '#/components/schemas/Detail'
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      properties:
        environment:
          type: boolean
        parameters:
          type: boolean
        materials:
          type: boolean
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
    Policy:
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      type: object
      properties:
        etag:
          format: byte
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
        version:
          format: int32
          type: integer
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
    Assessment:
      id: Assessment
      type: object
      properties:
        remediations:
          type: array
          description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
          items:
            $ref: '#/components/schemas/Remediation'
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
        impacts:
          items:
            type: string
          description: 'Contains information about the impact of this vulnerability, this will change with time.'
          type: array
        relatedUris:
          description: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        vulnerabilityId:
          type: string
          description: 'The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.'
        state:
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - 'It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.'
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          description: Provides the state of this Vulnerability assessment.
          type: string
        cve:
          description: 'Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.'
          type: string
          deprecated: true
        longDescription:
          type: string
          description: A detailed description of this Vex.
        justification:
          $ref: '#/components/schemas/Justification'
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
      description: Assessment provides all information that is related to a single vulnerability for this product.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume
      properties:
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
    SourceContext:
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
      type: object
      properties:
        labels:
          type: object
          description: Labels with user defined metadata.
          additionalProperties:
            type: string
        git:
          description: 'A SourceContext referring to any third party Git repo (e.g., GitHub).'
          $ref: '#/components/schemas/GitSourceContext'
        cloudRepo:
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
      id: SourceContext
    BuildNote:
      properties:
        builderVersion:
          type: string
          description: Required. Immutable. Version of the builder which produced this build.
      type: object
      id: BuildNote
      description: Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
      description: Request message for `SetIamPolicy` method.
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource:
      description: Location of the source in an archive file in Cloud Storage.
      properties:
        generation:
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
          type: string
          format: int64
        bucket:
          type: string
          description: 'Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
        object:
          type: string
          description: Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource
    InTotoProvenance:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        materials:
          items:
            type: string
          type: array
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
        builderConfig:
          $ref: '#/components/schemas/BuilderConfig'
          description: required
        recipe:
          $ref: '#/components/schemas/Recipe'
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
      id: InTotoProvenance
    Remediation:
      type: object
      id: Remediation
      properties:
        details:
          type: string
          description: Contains a comprehensive human-readable discussion of the remediation.
        remediationUri:
          $ref: '#/components/schemas/RelatedUrl'
          description: Contains the URL where to obtain the remediation.
        remediationType:
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          type: string
          description: The type of remediation that can be applied.
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
      description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
    ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage:
      properties:
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
        uri:
          description: URI of the uploaded artifact.
          type: string
        fileHashes:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes'
          description: Hash types and values of the Python Artifact.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage
      description: Artifact uploaded using the PythonPackage directive.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning:
      type: object
      description: A non-fatal problem encountered during the execution of the build.
      properties:
        priority:
          description: The priority for this warning.
          type: string
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
        text:
          description: Explanation of the warning generated.
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning
    ContaineranalysisGoogleDevtoolsCloudbuildV1Secret:
      properties:
        kmsKeyName:
          description: Cloud KMS key name to use to decrypt these envs.
          type: string
        secretEnv:
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
          additionalProperties:
            format: byte
            type: string
          type: object
      description: 'Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret
      type: object
    GrafeasV1FileLocation:
      type: object
      id: GrafeasV1FileLocation
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          description: 'For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.'
          type: string
    Metadata:
      type: object
      id: Metadata
      properties:
        buildInvocationId:
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
          type: string
        buildFinishedOn:
          type: string
          format: google-datetime
          description: The timestamp of when the build completed.
        buildStartedOn:
          description: The timestamp of when the build started.
          format: google-datetime
          type: string
        completeness:
          $ref: '#/components/schemas/Completeness'
          description: Indicates that the builder claims certain fields in this message to be complete.
        reproducible:
          type: boolean
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
      description: Other properties of the build.
    Layer:
      type: object
      properties:
        directive:
          type: string
          description: 'Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.'
        arguments:
          type: string
          description: The recovered arguments to the Dockerfile directive.
      id: Layer
      description: Layer holds metadata specific to a layer of a Docker image.
    ProjectRepoId:
      type: object
      id: ProjectRepoId
      description: 'Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.'
      properties:
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
        projectId:
          description: The ID of the project.
          type: string
    ListOccurrencesResponse:
      description: Response for listing occurrences.
      id: ListOccurrencesResponse
      type: object
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
          description: The occurrences requested.
        nextPageToken:
          description: The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results.
          type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      properties:
        permissions:
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          type: array
          items:
            type: string
      type: object
      description: Request message for `TestIamPermissions` method.
    Distribution:
      id: Distribution
      description: 'This represents a particular channel of distribution for a given package. E.g., Debian''s jessie-backports dpkg mirror.'
      type: object
      properties:
        maintainer:
          description: A freeform string denoting the maintainer of this package.
          type: string
        latestVersion:
          $ref: '#/components/schemas/Version'
          description: The latest available version of this package in this distribution channel.
        cpeUri:
          type: string
          description: 'Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.'
        url:
          description: The distribution channel-specific homepage for this package.
          type: string
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built.
          type: string
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
        description:
          type: string
          description: The distribution channel-specific description of this package.
    ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes:
      properties:
        fileHash:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Hash'
          type: array
          description: Collection of file hashes.
      type: object
      description: 'Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage:
      properties:
        name:
          type: string
          description: 'Name used to push the container image to Google Container Registry, as presented to `docker push`.'
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        pushTiming:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing the specified image.
          readOnly: true
      description: An image built by the pipeline.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage
      type: object
    DeploymentNote:
      type: object
      properties:
        resourceUri:
          type: array
          description: Required. Resource URI for the artifact being deployed.
          items:
            type: string
      id: DeploymentNote
      description: An artifact that can be deployed in some runtime.
    GitSourceContext:
      properties:
        url:
          description: Git repository URL.
          type: string
        revisionId:
          type: string
          description: Git commit hash.
      id: GitSourceContext
      type: object
      description: 'A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).'
    Detail:
      properties:
        fixedCpeUri:
          type: string
          description: 'The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.'
        severityName:
          description: The distro assigned severity of this vulnerability.
          type: string
        isObsolete:
          type: boolean
          description: Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.
        source:
          type: string
          description: The source from which the information in this Detail was obtained.
        description:
          type: string
          description: A vendor-specific description of this vulnerability.
        affectedCpeUri:
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.'
          type: string
        affectedVersionStart:
          description: 'The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
          $ref: '#/components/schemas/Version'
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.
        affectedVersionEnd:
          description: 'The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.'
          $ref: '#/components/schemas/Version'
        packageType:
          type: string
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
        sourceUpdateTime:
          type: string
          description: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.
          format: google-datetime
        affectedPackage:
          type: string
          description: Required. The package this vulnerability affects.
        vendor:
          description: The name of the vendor of the product.
          type: string
        fixedPackage:
          type: string
          description: The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.
      id: Detail
      type: object
      description: A detail for a distro and package affected by this vulnerability and its associated fix (if one is available).
    PackageIssue:
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
      properties:
        effectiveSeverity:
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          readOnly: true
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        fixedCpeUri:
          description: 'The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.'
          type: string
        affectedPackage:
          description: Required. The package this vulnerability was found in.
          type: string
        fileLocation:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          description: The location at which this package was found.
        packageType:
          description: 'The type of package (e.g. OS, MAVEN, GO).'
          type: string
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
        affectedVersion:
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
          $ref: '#/components/schemas/Version'
        fixAvailable:
          type: boolean
          description: Output only. Whether a fix is available for this package.
        fixedPackage:
          type: string
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
        affectedCpeUri:
          type: string
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.'
      type: object
      id: PackageIssue
    ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest
      properties:
        bucket:
          type: string
          description: 'Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
        object:
          type: string
          description: Cloud Storage object containing the source manifest. This object must be a JSON file.
        generation:
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
          format: int64
          type: string
      description: 'Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact:
      description: A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact
      properties:
        path:
          description: 'Path to an artifact in the build''s workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.'
          type: string
        groupId:
          type: string
          description: Maven `groupId` value used when uploading the artifact to Artifact Registry.
        repository:
          description: 'Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.'
          type: string
        artifactId:
          description: Maven `artifactId` value used when uploading the artifact to Artifact Registry.
          type: string
        version:
          description: Maven `version` value used when uploading the artifact to Artifact Registry.
          type: string
      type: object
    Artifact:
      id: Artifact
      properties:
        id:
          description: 'Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.'
          type: string
        checksum:
          description: 'Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.'
          type: string
        names:
          description: 'Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.'
          items:
            type: string
          type: array
      description: Artifact describes a build product.
      type: object
    PackageNote:
      description: PackageNote represents a particular package version.
      properties:
        url:
          type: string
          description: The homepage for this package.
        distribution:
          type: array
          items:
            $ref: '#/components/schemas/Distribution'
          description: Deprecated. The various channels by which a package is distributed.
        cpeUri:
          type: string
          description: 'The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.'
        name:
          description: Required. Immutable. The name of the package.
          type: string
        packageType:
          type: string
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
        architecture:
          description: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          type: string
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
        version:
          $ref: '#/components/schemas/Version'
          description: The version of the package.
        digest:
          type: array
          items:
            $ref: '#/components/schemas/Digest'
          description: 'Hash value, typically a file digest, that allows unique identification a specific package.'
        maintainer:
          type: string
          description: A freeform text denoting the maintainer of this package.
        description:
          description: The description of this package.
          type: string
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
      type: object
      id: PackageNote
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects:
      type: object
      properties:
        timing:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
          description: Output only. Stores timing information for pushing all artifact objects.
        paths:
          description: Path globs used to match files in the build's workspace.
          type: array
          items:
            type: string
        location:
          description: 'Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.'
          type: string
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
    Publisher:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the publisher. Examples: ''Google'', ''Google Cloud Platform''.'
        publisherNamespace:
          description: 'The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io'
          type: string
        issuingAuthority:
          description: 'Provides information about the authority of the issuing party to release the document, in particular, the party''s constituency and responsibilities or other obligations.'
          type: string
      id: Publisher
      description: Publisher contains information about the publisher of this Note.
    AliasContext:
      type: object
      properties:
        name:
          type: string
          description: The alias name.
        kind:
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - 'Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".'
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          description: The alias kind.
          type: string
      id: AliasContext
      description: An alias to a repo revision.
    VulnerabilityAssessmentNote:
      description: A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.
      properties:
        title:
          description: The title of the note. E.g. `Vex-Debian-11.4`
          type: string
        assessment:
          description: Represents a vulnerability assessment for the product.
          $ref: '#/components/schemas/Assessment'
        languageCode:
          description: 'Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.'
          type: string
        product:
          description: The product affected by this vex.
          $ref: '#/components/schemas/Product'
        longDescription:
          description: A detailed description of this Vex.
          type: string
        publisher:
          description: Publisher details of this Note.
          $ref: '#/components/schemas/Publisher'
        shortDescription:
          type: string
          description: A one sentence description of this Vex.
      id: VulnerabilityAssessmentNote
      type: object
    InTotoSlsaProvenanceV1:
      type: object
      id: InTotoSlsaProvenanceV1
      properties:
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
        _type:
          description: 'InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement'
          type: string
        predicate:
          $ref: '#/components/schemas/SlsaProvenanceV1'
        predicateType:
          type: string
    SBOMReferenceOccurrence:
      id: SBOMReferenceOccurrence
      type: object
      properties:
        payload:
          description: The actual payload that contains the SBOM reference data.
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          description: The signatures over the payload.
          type: array
        payloadType:
          description: 'The kind of payload that SbomReferenceIntotoPayload takes. Since it''s in the intoto format, this value is expected to be ''application/vnd.in-toto+json''.'
          type: string
      description: 'The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.'
    GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata:
      id: GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata
      description: Metadata for all operations used and required for all operations that created by Container Analysis Providers
      type: object
      properties:
        createTime:
          description: Output only. The time this operation was created.
          format: google-datetime
          type: string
        endTime:
          description: Output only. The time that this operation was marked completed or failed.
          format: google-datetime
          type: string
    SlsaMetadata:
      id: SlsaMetadata
      description: Other properties of the build.
      type: object
      properties:
        completeness:
          $ref: '#/components/schemas/SlsaCompleteness'
          description: Indicates that the builder claims certain fields in this message to be complete.
        buildFinishedOn:
          description: The timestamp of when the build completed.
          format: google-datetime
          type: string
        buildStartedOn:
          type: string
          description: The timestamp of when the build started.
          format: google-datetime
        buildInvocationId:
          type: string
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
        reproducible:
          type: boolean
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
    InTotoStatement:
      id: InTotoStatement
      description: 'Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".'
      properties:
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        _type:
          description: 'Always `https://in-toto.io/Statement/v0.1`.'
          type: string
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource:
      properties:
        branchName:
          type: string
          description: 'Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
        invertRegex:
          type: boolean
          description: Only trigger a build if the revision regex does NOT match the revision regex.
        tagName:
          type: string
          description: 'Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
        projectId:
          description: 'ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.'
          type: string
        repoName:
          type: string
          description: Name of the Cloud Source Repository.
        substitutions:
          type: object
          additionalProperties:
            type: string
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
        dir:
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
          type: string
        commitSha:
          type: string
          description: Explicit commit SHA to build.
      description: Location of the source in a Google Cloud Source Repository.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource
      type: object
    ImageNote:
      id: ImageNote
      type: object
      description: 'Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.'
      properties:
        fingerprint:
          description: Required. Immutable. The fingerprint of the base image.
          $ref: '#/components/schemas/Fingerprint'
        resourceUrl:
          type: string
          description: Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.
    Product:
      description: Product contains information about a product and how to uniquely identify it.
      type: object
      properties:
        name:
          description: Name of the product.
          type: string
        id:
          type: string
          description: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.
        genericUri:
          description: 'Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.'
          type: string
      id: Product
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
      type: object
      properties:
        permissions:
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
    SbomReferenceIntotoPredicate:
      id: SbomReferenceIntotoPredicate
      description: A predicate which describes the SBOM being referenced.
      type: object
      properties:
        referrerId:
          description: The person or system referring this predicate to the consumer.
          type: string
        location:
          description: The location of the SBOM.
          type: string
        digest:
          type: object
          additionalProperties:
            type: string
          description: A map of algorithm to digest of the contents of the SBOM.
        mimeType:
          type: string
          description: The mime type of the SBOM.
    CVSSv3:
      id: CVSSv3
      properties:
        attackVector:
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
        userInteraction:
          type: string
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
          enumDescriptions:
            - ''
            - ''
            - ''
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        exploitabilityScore:
          type: number
          format: float
        privilegesRequired:
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        confidentialityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
          type: string
        impactScore:
          format: float
          type: number
        integrityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
        baseScore:
          description: The base score is a function of the base metric scores.
          type: number
          format: float
        attackComplexity:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
      type: object
      description: 'Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document'
    ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository:
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository
      properties:
        dir:
          type: string
          description: 'Directory, relative to the source root, in which to run the build.'
        revision:
          description: 'The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.'
          type: string
        repository:
          description: 'Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.'
          type: string
      description: Location of the source in a 2nd-gen Google Cloud Build repository resource.
    Envelope:
      description: 'MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.'
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
        payloadType:
          type: string
        payload:
          type: string
          format: byte
      id: Envelope
      type: object
    DiscoveryNote:
      type: object
      description: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.
      id: DiscoveryNote
      properties:
        analysisKind:
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          type: string
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          description: Required. Immutable. The kind of analysis that is handled by this discovery.
    GetPolicyOptions:
      description: Encapsulates settings provided to GetIamPolicy.
      type: object
      properties:
        requestedPolicyVersion:
          format: int32
          description: 'Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          type: integer
      id: GetPolicyOptions
    AttestationNote:
      description: 'Note kind that represents a logical attestation "role" or "authority". For example, an organization might have one `Authority` for "QA" and one for "build". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don''t all live in the same project.'
      id: AttestationNote
      type: object
      properties:
        hint:
          description: Hint hints at the purpose of the attestation authority.
          $ref: '#/components/schemas/Hint'
    UpgradeOccurrence:
      properties:
        parsedVersion:
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
          $ref: '#/components/schemas/Version'
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
        distribution:
          $ref: '#/components/schemas/UpgradeDistribution'
          description: 'Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.'
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: Required for Windows OS. Represents the metadata about the Windows update.
      description: 'An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.'
      type: object
      id: UpgradeOccurrence
    BuildStep:
      id: BuildStep
      type: object
      description: 'A step in the build pipeline. Next ID: 21'
      properties:
        entrypoint:
          type: string
          description: 'Entrypoint to be used instead of the build step image''s default entrypoint. If unset, the image''s default entrypoint is used.'
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        timing:
          description: Output only. Stores timing information for executing this build step.
          $ref: '#/components/schemas/TimeSpan'
        allowExitCodes:
          type: array
          description: 'Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.'
          items:
            format: int32
            type: integer
        waitFor:
          type: array
          items:
            type: string
          description: 'The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.'
        dir:
          type: string
          description: 'Working directory to use when running this step''s container. If this value is a relative path, it is relative to the build''s working directory. If this value is absolute, it may be outside the build''s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step''s execution.'
        name:
          description: 'Required. The name of the container image that will run this particular build step. If the image is available in the host''s Docker daemon''s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account''s credentials if necessary. The Docker daemon''s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host''s Docker daemon''s cache and is available to use as the name for a later build step.'
          type: string
        exitCode:
          type: integer
          description: Output only. Return code from running the step.
          format: int32
        env:
          items:
            type: string
          type: array
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
        allowFailure:
          description: 'Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.'
          type: boolean
        timeout:
          type: string
          format: google-duration
          description: 'Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.'
        status:
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build has been received and is being queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          type: string
          description: 'Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.'
        script:
          description: 'A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.'
          type: string
        pullTiming:
          $ref: '#/components/schemas/TimeSpan'
          description: Output only. Stores timing information for pulling this build step's builder image only.
        id:
          type: string
          description: 'Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.'
        args:
          description: 'A list of arguments that will be presented to the step when it is started. If the image used to run the step''s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.'
          type: array
          items:
            type: string
        volumes:
          items:
            $ref: '#/components/schemas/Volume'
          description: 'List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.'
          type: array
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
    Identity:
      id: Identity
      description: The unique identifier of the update.
      properties:
        updateId:
          type: string
          description: The revision independent identifier of the update.
        revision:
          type: integer
          format: int32
          description: The revision number of the update.
      type: object
    Occurrence:
      type: object
      id: Occurrence
      description: An instance of an analysis type that has been found on a resource.
      properties:
        envelope:
          description: 'https://github.com/secure-systems-lab/dsse'
          $ref: '#/components/schemas/Envelope'
        image:
          $ref: '#/components/schemas/ImageOccurrence'
          description: Describes how this resource derives from the basis in the associated note.
        sbomReference:
          description: Describes a specific SBOM reference occurrences.
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
        name:
          description: 'Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.'
          type: string
        attestation:
          description: Describes an attestation of an artifact.
          $ref: '#/components/schemas/AttestationOccurrence'
        noteName:
          type: string
          description: 'Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.'
        vulnerability:
          $ref: '#/components/schemas/VulnerabilityOccurrence'
          description: Describes a security vulnerability.
        resourceUri:
          type: string
          description: 'Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.'
        compliance:
          $ref: '#/components/schemas/ComplianceOccurrence'
          description: Describes a compliance violation on a linked resource.
        upgrade:
          description: Describes an available package upgrade on the linked resource.
          $ref: '#/components/schemas/UpgradeOccurrence'
        kind:
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
          type: string
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
        package:
          description: Describes the installation of a package on the linked resource.
          $ref: '#/components/schemas/PackageOccurrence'
        createTime:
          description: Output only. The time this occurrence was created.
          format: google-datetime
          type: string
        updateTime:
          type: string
          format: google-datetime
          description: Output only. The time this occurrence was last updated.
        discovery:
          description: Describes when a resource was discovered.
          $ref: '#/components/schemas/DiscoveryOccurrence'
        dsseAttestation:
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
          description: Describes an attestation of an artifact using dsse.
        deployment:
          $ref: '#/components/schemas/DeploymentOccurrence'
          description: Describes the deployment of an artifact on a runtime.
        build:
          $ref: '#/components/schemas/BuildOccurrence'
          description: Describes a verifiable build.
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep:
      properties:
        script:
          description: 'A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.'
          type: string
        timeout:
          description: 'Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.'
          type: string
          format: google-duration
        entrypoint:
          description: 'Entrypoint to be used instead of the build step image''s default entrypoint. If unset, the image''s default entrypoint is used.'
          type: string
        pullTiming:
          readOnly: true
          description: Output only. Stores timing information for pulling this build step's builder image only.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        allowFailure:
          type: boolean
          description: 'Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.'
        dir:
          description: 'Working directory to use when running this step''s container. If this value is a relative path, it is relative to the build''s working directory. If this value is absolute, it may be outside the build''s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step''s execution.'
          type: string
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
        timing:
          readOnly: true
          description: Output only. Stores timing information for executing this build step.
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan'
        name:
          type: string
          description: 'Required. The name of the container image that will run this particular build step. If the image is available in the host''s Docker daemon''s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account''s credentials if necessary. The Docker daemon''s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host''s Docker daemon''s cache and is available to use as the name for a later build step.'
        waitFor:
          type: array
          description: 'The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.'
          items:
            type: string
        id:
          description: 'Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.'
          type: string
        args:
          items:
            type: string
          type: array
          description: 'A list of arguments that will be presented to the step when it is started. If the image used to run the step''s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.'
        env:
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          description: 'Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.'
          readOnly: true
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        secretEnv:
          items:
            type: string
          type: array
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
        exitCode:
          readOnly: true
          type: integer
          description: Output only. Return code from running the step.
          format: int32
        allowExitCodes:
          type: array
          items:
            format: int32
            type: integer
          description: 'Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.'
        volumes:
          items:
            $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1Volume'
          type: array
          description: 'List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep
      description: A step in the build pipeline.
      type: object
    BatchCreateOccurrencesRequest:
      type: object
      description: Request to create occurrences in batch.
      properties:
        occurrences:
          description: Required. The occurrences to create. Max allowed length is 1000.
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
      id: BatchCreateOccurrencesRequest
    UpgradeDistribution:
      id: UpgradeDistribution
      properties:
        cve:
          type: array
          items:
            type: string
          description: The cve tied to this Upgrade.
        cpeUri:
          description: 'Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.'
          type: string
        severity:
          type: string
          description: The severity as specified by the upstream operating system.
        classification:
          description: 'The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)'
          type: string
      description: 'The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.'
      type: object
    DiscoveryOccurrence:
      properties:
        analysisStatusError:
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
          $ref: '#/components/schemas/Status'
        lastScanTime:
          format: google-datetime
          description: The last time this resource was scanned.
          type: string
        archiveTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. The time occurrences related to this discovery occurrence were archived.
        continuousAnalysis:
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          description: Whether the resource is continuously analyzed.
          type: string
        analysisStatus:
          description: The status of discovery for the resource.
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - 'Analysis has finished unsuccessfully, the analysis itself is in a bad state.'
            - The resource is known not to be supported.
          type: string
        sbomStatus:
          description: The status of an SBOM generation.
          $ref: '#/components/schemas/SBOMStatus'
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
        cpe:
          type: string
          description: The CPE of the resource being scanned.
        analysisError:
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
          items:
            $ref: '#/components/schemas/Status'
          type: array
      id: DiscoveryOccurrence
      type: object
      description: Provides information about the analysis status of a discovered resource.
    SlsaCompleteness:
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
        arguments:
          type: boolean
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
        environment:
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
          type: boolean
      id: SlsaCompleteness
    BuilderConfig:
      type: object
      properties:
        id:
          type: string
      id: BuilderConfig
    Location:
      id: Location
      properties:
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
        path:
          type: string
          description: The path from which we gathered that this package/version is installed.
        cpeUri:
          description: 'Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)'
          type: string
      description: 'An occurrence of a particular package installation found within a system''s filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.'
      type: object
    RepoId:
      type: object
      id: RepoId
      description: A unique identifier for a Cloud Repo.
      properties:
        uid:
          type: string
          description: 'A server-assigned, globally unique identifier.'
        projectRepoId:
          description: A combination of a project ID and a repo name.
          $ref: '#/components/schemas/ProjectRepoId'
    Volume:
      id: Volume
      properties:
        name:
          type: string
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
        path:
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
          type: string
      description: 'Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution. Next ID: 3'
      type: object
    DSSEAttestationNote:
      type: object
      properties:
        hint:
          $ref: '#/components/schemas/DSSEHint'
          description: DSSEHint hints at the purpose of the attestation authority.
      id: DSSEAttestationNote
    DSSEHint:
      id: DSSEHint
      type: object
      description: 'This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.'
      properties:
        humanReadableName:
          description: 'Required. The human readable name of this attestation authority, for example "cloudbuild-prod".'
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      properties:
        buildInvocationId:
          type: string
        reproducible:
          type: boolean
        buildFinishedOn:
          type: string
          format: google-datetime
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildStartedOn:
          type: string
          format: google-datetime
      description: Other properties of the build.
    NonCompliantFile:
      type: object
      properties:
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
        path:
          type: string
          description: Empty if `display_command` is set.
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
      id: NonCompliantFile
      description: 'Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using ''path''.'
    SbomReferenceIntotoPayload:
      description: 'The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.'
      type: object
      properties:
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
          description: Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
        predicate:
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
          description: Additional parameters of the Predicate. Includes the actual data about the SBOM.
        _type:
          type: string
          description: Identifier for the schema of the Statement.
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
      id: SbomReferenceIntotoPayload
    ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret:
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      properties:
        env:
          type: string
          description: 'Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step.'
        versionName:
          type: string
          description: 'Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret
      type: object
    TimeSpan:
      type: object
      properties:
        endTime:
          type: string
          description: End of time span.
          format: google-datetime
        startTime:
          description: Start of time span.
          type: string
          format: google-datetime
      description: 'Start and end times for a build execution phase. Next ID: 3'
      id: TimeSpan
    BatchCreateOccurrencesResponse:
      id: BatchCreateOccurrencesResponse
      description: Response for creating occurrences in batch.
      type: object
      properties:
        occurrences:
          description: The occurrences that were created.
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
    ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig
      description: ApprovalConfig describes configuration for manual approval of a build.
      type: object
      properties:
        approvalRequired:
          type: boolean
          description: 'Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.'
    Source:
      type: object
      id: Source
      description: Source describes the location of the source used for the build.
      properties:
        artifactStorageSourceUri:
          description: 'If provided, the input binary artifacts for the build came from this location.'
          type: string
        fileHashes:
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          description: 'Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.'
          type: object
        additionalContexts:
          type: array
          items:
            $ref: '#/components/schemas/SourceContext'
          description: 'If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.'
        context:
          $ref: '#/components/schemas/SourceContext'
          description: 'If provided, the source code used for the build came from this location.'
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      properties:
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
      type: object
      description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.'
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      properties:
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        parameters:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
        environment:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
      description: Identifies the event that kicked off the build.
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
    Command:
      type: object
      id: Command
      properties:
        env:
          items:
            type: string
          description: Environment variables set before running this command.
          type: array
        waitFor:
          type: array
          items:
            type: string
          description: The ID(s) of the command(s) that this command depends on.
        name:
          type: string
          description: 'Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.'
        args:
          description: Command-line arguments used when executing this command.
          type: array
          items:
            type: string
        id:
          type: string
          description: 'Optional unique identifier for this command, used in wait_for to reference this command as a dependency.'
        dir:
          description: Working directory (relative to project source root) used when running this command.
          type: string
      description: Command describes a step performed as part of the build pipeline.
    SlsaProvenanceZeroTwo:
      id: SlsaProvenanceZeroTwo
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        materials:
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
          type: array
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
        buildType:
          type: string
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        buildConfig:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
    ContaineranalysisGoogleDevtoolsCloudbuildV1Source:
      type: object
      description: Location of the source in a supported storage service.
      properties:
        storageSourceManifest:
          description: 'If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest'
        connectedRepository:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository'
          description: 'Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.'
        repoSource:
          description: 'If provided, get the source from this location in a Cloud Source Repository.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource'
        gitSource:
          description: 'If provided, get the source from this Git repository.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource'
        storageSource:
          description: 'If provided, get the source from this location in Cloud Storage.'
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Source
    ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource
      type: object
      properties:
        revision:
          type: string
          description: 'The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.'
        dir:
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
          type: string
        url:
          type: string
          description: 'Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.'
      description: Location of the source in any accessible Git repository.
    Recipe:
      id: Recipe
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      type: object
      properties:
        definedInMaterial:
          type: string
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
          format: int64
        entryPoint:
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
          type: string
        arguments:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
          type: array
        environment:
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
        type:
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
          type: string
    CisBenchmark:
      properties:
        severity:
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        profileLevel:
          format: int32
          type: integer
      type: object
      id: CisBenchmark
      description: A compliance check that is a CIS benchmark.
    Material:
      type: object
      id: Material
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        entryPoint:
          type: string
        uri:
          type: string
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
      type: object
    Signature:
      id: Signature
      properties:
        signature:
          type: string
          description: 'The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.'
          format: byte
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      properties:
        id:
          type: string
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      description: 'Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.'
      type: object
    Justification:
      properties:
        justificationType:
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
          description: The justification type for this vulnerability.
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.
            - The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.
            - The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.
            - The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors.
          type: string
        details:
          description: Additional details on why this justification was chosen.
          type: string
      id: Justification
      description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
      type: object
    SBOMStatus:
      description: The status of an SBOM generation.
      id: SBOMStatus
      type: object
      properties:
        error:
          description: 'If there was an error generating an SBOM, this will indicate what that error was.'
          type: string
        sbomState:
          enum:
            - SBOM_STATE_UNSPECIFIED
            - PENDING
            - COMPLETE
          description: The progress of the SBOM generation.
          enumDescriptions:
            - Default unknown state.
            - SBOM scanning is pending.
            - SBOM scanning has completed.
          type: string
    Completeness:
      properties:
        arguments:
          type: boolean
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
        environment:
          type: boolean
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
      type: object
      id: Completeness
      description: Indicates that the builder claims certain fields in this message to be complete.
    EnvelopeSignature:
      type: object
      id: EnvelopeSignature
      properties:
        keyid:
          type: string
        sig:
          type: string
          format: byte
    VulnerabilityOccurrence:
      id: VulnerabilityOccurrence
      type: object
      properties:
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        longDescription:
          description: Output only. A detailed description of this vulnerability.
          type: string
        cvssVersion:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
          description: Output only. CVSS version used to populate cvss_score and severity.
        cvssv3:
          description: The cvss v3 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        type:
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
          type: string
        cvssV2:
          description: The cvss v2 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        cvssScore:
          format: float
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          type: number
        severity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          description: Output only. The note provider assigned severity of this vulnerability.
          type: string
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        relatedUrls:
          description: Output only. URLs related to this vulnerability.
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
        fixAvailable:
          description: Output only. Whether at least one of the affected packages has a fix available.
          type: boolean
        packageIssue:
          type: array
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
          items:
            $ref: '#/components/schemas/PackageIssue'
        effectiveSeverity:
          description: 'The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.'
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
      description: An occurrence of a severity vulnerability on a resource.
    VexAssessment:
      id: VexAssessment
      description: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
      properties:
        justification:
          $ref: '#/components/schemas/Justification'
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        state:
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          type: string
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - 'It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.'
          description: Provides the state of this Vulnerability assessment.
        cve:
          type: string
          description: 'Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.'
          deprecated: true
        vulnerabilityId:
          description: 'The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.'
          type: string
        impacts:
          type: array
          items:
            type: string
          description: 'Contains information about the impact of this vulnerability, this will change with time.'
        remediations:
          type: array
          description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
          items:
            $ref: '#/components/schemas/Remediation'
        relatedUris:
          type: array
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Holds a list of references associated with this vulnerability item and assessment.
        noteName:
          description: 'The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.'
          type: string
      type: object
    KnowledgeBase:
      properties:
        url:
          description: 'A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/).'
          type: string
        name:
          type: string
          description: 'The KB name (generally of the form KB[0-9]+ (e.g., KB123456)).'
      id: KnowledgeBase
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage:
      description: Npm package to upload to Artifact Registry upon successful completion of all build steps.
      properties:
        packagePath:
          type: string
          description: Path to the package.json. e.g. workspace/path/to/package
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.'
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage
    ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage:
      properties:
        paths:
          description: 'Path globs used to match files in the build''s workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.'
          type: array
          items:
            type: string
        repository:
          description: 'Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.'
          type: string
      type: object
      description: Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage
    ImageOccurrence:
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      type: object
      id: ImageOccurrence
      properties:
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        layerInfo:
          type: array
          description: 'This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.'
          items:
            $ref: '#/components/schemas/Layer'
        distance:
          format: int32
          type: integer
          description: Output only. The number of layers by which this image differs from the associated image basis.
    Category:
      description: The category to which the update belongs.
      type: object
      id: Category
      properties:
        name:
          type: string
          description: The localized name of the category.
        categoryId:
          type: string
          description: The identifier of the category.
    RelatedUrl:
      description: Metadata for any related URL information.
      id: RelatedUrl
      type: object
      properties:
        label:
          description: Label to describe usage of the URL.
          type: string
        url:
          description: Specific URL associated with the resource.
          type: string
    Version:
      properties:
        kind:
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
          type: string
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
        epoch:
          format: int32
          description: Used to correct mistakes in the version numbering scheme.
          type: integer
        name:
          type: string
          description: Required only when version kind is NORMAL. The main part of the version name.
        fullName:
          description: 'Human readable version string. This string is of the form :- and is only set when kind is NORMAL.'
          type: string
        inclusive:
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
          type: boolean
        revision:
          description: The iteration of the package build from the above version.
          type: string
      description: Version contains structured information about the version of a package.
      id: Version
      type: object
    Hint:
      properties:
        humanReadableName:
          type: string
          description: 'Required. The human readable name of this attestation authority, for example "qa".'
      id: Hint
      type: object
      description: 'This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from "readable" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.'
    DeploymentOccurrence:
      description: The period during which some deployable was active in a runtime.
      properties:
        resourceUri:
          items:
            type: string
          type: array
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
        userEmail:
          type: string
          description: Identity of the user that triggered this deployment.
        config:
          type: string
          description: Configuration used to create this deployment.
        platform:
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          type: string
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          description: Platform hosting this deployment.
        undeployTime:
          type: string
          description: End of the lifetime of this deployment.
          format: google-datetime
        deployTime:
          type: string
          description: Required. Beginning of the lifetime of this deployment.
          format: google-datetime
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
      id: DeploymentOccurrence
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret:
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      type: object
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret
      properties:
        kmsKeyName:
          description: 'Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*'
          type: string
        envMap:
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
          additionalProperties:
            format: byte
            type: string
          type: object
    ComplianceVersion:
      type: object
      properties:
        benchmarkDocument:
          type: string
          description: 'The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS".'
        cpeUri:
          type: string
          description: 'The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.'
        version:
          type: string
          description: The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.
      description: Describes the CIS benchmark version that is applicable to a given OS and os version.
      id: ComplianceVersion
    BatchCreateNotesRequest:
      id: BatchCreateNotesRequest
      type: object
      description: Request to create notes in batch.
      properties:
        notes:
          type: object
          description: Required. The notes to create. Max allowed length is 1000.
          additionalProperties:
            $ref: '#/components/schemas/Note'
    Expr:
      id: Expr
      properties:
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
      type: object
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    ContaineranalysisGoogleDevtoolsCloudbuildV1Hash:
      description: Container message for hash values.
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash
      properties:
        value:
          description: The hash value.
          type: string
          format: byte
        type:
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
          description: The type of hash that was performed.
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          type: string
      type: object
    WindowsDetail:
      id: WindowsDetail
      type: object
      properties:
        fixingKbs:
          items:
            $ref: '#/components/schemas/KnowledgeBase'
          description: Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.
          type: array
        cpeUri:
          type: string
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects.'
        description:
          description: The description of this vulnerability.
          type: string
        name:
          description: Required. The name of this vulnerability.
          type: string
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo:
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo
      properties:
        detail:
          description: Explains the failure issue in more detail using hard-coded text.
          type: string
        type:
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          type: string
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
          description: The name of the failure.
      description: A fatal problem encountered during the execution of the build.
      type: object
    ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval:
      description: 'BuildApproval describes a build''s approval configuration, state, and result.'
      id: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval
      properties:
        state:
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
          type: string
          description: Output only. The state of this build's approval.
          readOnly: true
        result:
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult'
          description: Output only. Result of manual approval for this Build.
          readOnly: true
        config:
          readOnly: true
          $ref: '#/components/schemas/ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig'
          description: Output only. Configuration for manual approval of this build.
      type: object
    Binding:
      id: Binding
      properties:
        members:
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
          items:
            type: string
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
      type: object
      description: 'Associates `members`, or principals, with a `role`.'
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  x-stackQL-resources:
    occurrences:
      id: google.containeranalysis.occurrences
      name: occurrences
      title: Occurrences
      methods:
        projects_occurrences_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.occurrences
        _projects_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.occurrences
        _projects_notes_occurrences_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}~1occurrences/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_get'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_notes_occurrences_list'
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/occurrences/methods/projects_occurrences_delete'
    occurrences_iam_policies:
      id: google.containeranalysis.occurrences_iam_policies
      name: occurrences_iam_policies
      title: Occurrences Iam Policies
      methods:
        projects_occurrences_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_occurrences_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_iam_policies/methods/projects_occurrences_get_iam_policy'
        insert: []
        update: []
        delete: []
    occurrences_vulnerability_summary:
      id: google.containeranalysis.occurrences_vulnerability_summary
      name: occurrences_vulnerability_summary
      title: Occurrences Vulnerability Summary
      methods:
        projects_occurrences_get_vulnerability_summary:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences:vulnerabilitySummary/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_vulnerability_summary/methods/projects_occurrences_get_vulnerability_summary'
        insert: []
        update: []
        delete: []
    occurrences_notes:
      id: google.containeranalysis.occurrences_notes
      name: occurrences_notes
      title: Occurrences Notes
      methods:
        projects_occurrences_get_notes:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1occurrences~1{occurrencesId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/occurrences_notes/methods/projects_occurrences_get_notes'
        insert: []
        update: []
        delete: []
    notes_iam_policies:
      id: google.containeranalysis.notes_iam_policies
      name: notes_iam_policies
      title: Notes Iam Policies
      methods:
        projects_notes_set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes_iam_policies/methods/projects_notes_get_iam_policy'
        insert: []
        update: []
        delete: []
    notes:
      id: google.containeranalysis.notes
      name: notes
      title: Notes
      methods:
        projects_notes_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.notes
        _projects_notes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_notes_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1notes~1{notesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_get'
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/notes/methods/projects_notes_delete'
paths:
  '/v1/projects/{projectsId}/occurrences:batchCreate':
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
    post:
      description: Creates new occurrences in batch.
      operationId: containeranalysis.projects.occurrences.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateOccurrencesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences:vulnerabilitySummary':
    parameters: *ref_1
    get:
      description: Gets a summary of the number and severity of occurrences.
      operationId: containeranalysis.projects.occurrences.getVulnerabilitySummary
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityOccurrencesSummary'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: occurrences_vulnerability_summary
      x-stackQL-method: projects_occurrences_get_vulnerability_summary
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}':
    parameters: *ref_1
    delete:
      description: 'Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource.'
      operationId: containeranalysis.projects.occurrences.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_delete
      x-stackQL-verb: delete
    get:
      description: Gets the specified occurrence.
      operationId: containeranalysis.projects.occurrences.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_get
      x-stackQL-verb: select
    patch:
      description: Updates the specified occurrence.
      operationId: containeranalysis.projects.occurrences.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences':
    parameters: *ref_1
    post:
      description: Creates a new occurrence.
      operationId: containeranalysis.projects.occurrences.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Occurrence'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Occurrence'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_create
      x-stackQL-verb: insert
    get:
      description: Lists occurrences for the specified project.
      operationId: containeranalysis.projects.occurrences.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_occurrences_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.occurrences
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy':
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.occurrences.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_iam_policies
      x-stackQL-method: projects_occurrences_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/occurrences/{occurrencesId}/notes':
    parameters: *ref_1
    get:
      description: Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.
      operationId: containeranalysis.projects.occurrences.getNotes
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: occurrencesId
          required: true
          schema:
            type: string
      x-stackQL-resource: occurrences_notes
      x-stackQL-method: projects_occurrences_get_notes
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/notes/{notesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}:getIamPolicy':
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/notes':
    parameters: *ref_1
    post:
      description: Creates a new note.
      operationId: containeranalysis.projects.notes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: noteId
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_create
      x-stackQL-verb: insert
    get:
      description: Lists notes for the specified project.
      operationId: containeranalysis.projects.notes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.notes
  '/v1/projects/{projectsId}/notes/{notesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences.'
      operationId: containeranalysis.projects.notes.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes_iam_policies
      x-stackQL-method: projects_notes_test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes:batchCreate':
    parameters: *ref_1
    post:
      description: Creates new notes in batch.
      operationId: containeranalysis.projects.notes.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateNotesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateNotesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/notes/{notesId}':
    parameters: *ref_1
    patch:
      description: Updates the specified note.
      operationId: containeranalysis.projects.notes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_patch
      x-stackQL-verb: exec
    get:
      description: Gets the specified note.
      operationId: containeranalysis.projects.notes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_get
      x-stackQL-verb: select
    delete:
      description: Deletes the specified note.
      operationId: containeranalysis.projects.notes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
      x-stackQL-resource: notes
      x-stackQL-method: projects_notes_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/notes/{notesId}/occurrences':
    parameters: *ref_1
    get:
      description: Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note.
      operationId: containeranalysis.projects.notes.occurrences.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteOccurrencesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: notesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: occurrences
      x-stackQL-method: projects_notes_occurrences_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.occurrences
