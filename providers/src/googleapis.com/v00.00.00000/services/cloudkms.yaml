openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Key Management Service (KMS) API
  description: 'Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. '
  version: v1
  x-discovery-doc-revision: '20230731'
  x-generated-date: '2023-08-10'
externalDocs:
  url: 'https://cloud.google.com/kms/'
servers:
  - url: 'https://cloudkms.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloudkms': View and manage your keys and secrets stored in Cloud Key Management Service
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    RawDecryptRequest:
      id: RawDecryptRequest
      description: Request message for KeyManagementService.RawDecrypt.
      type: object
      properties:
        initializationVector:
          format: byte
          description: 'Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.'
          type: string
        additionalAuthenticatedData:
          format: byte
          description: Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.
          type: string
        initializationVectorCrc32c:
          description: 'Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
          type: string
        tagLength:
          description: 'The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key''s algorithm will be used (for AES-GCM, the default value is 16).'
          format: int32
          type: integer
        ciphertext:
          format: byte
          description: Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.
          type: string
        ciphertextCrc32c:
          description: 'Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
          type: string
        additionalAuthenticatedDataCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
    VerifyConnectivityResponse:
      type: object
      properties: {}
      id: VerifyConnectivityResponse
      description: Response message for EkmService.VerifyConnectivity.
    Location:
      properties:
        displayName:
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
          type: string
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
          additionalProperties:
            type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
      type: object
      id: Location
      description: A resource that represents a Google Cloud location.
    ListEkmConnectionsResponse:
      properties:
        ekmConnections:
          description: The list of EkmConnections.
          type: array
          items:
            $ref: '#/components/schemas/EkmConnection'
        totalSize:
          description: The total number of EkmConnections that matched the query.
          type: integer
          format: int32
        nextPageToken:
          description: A token to retrieve next page of results. Pass this value in ListEkmConnectionsRequest.page_token to retrieve the next page of results.
          type: string
      description: Response message for EkmService.ListEkmConnections.
      id: ListEkmConnectionsResponse
      type: object
    AsymmetricSignRequest:
      id: AsymmetricSignRequest
      properties:
        digest:
          $ref: '#/components/schemas/Digest'
          description: Optional. The digest of the data to sign. The digest must be produced with the same digest algorithm as specified by the key version's algorithm. This field may not be supplied if AsymmetricSignRequest.data is supplied.
        data:
          type: string
          format: byte
          description: Optional. The data to sign. It can't be supplied if AsymmetricSignRequest.digest is supplied.
        dataCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the AsymmetricSignRequest.data. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.data) is equal to AsymmetricSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        digestCrc32c:
          type: string
          format: int64
          description: 'Optional. An optional CRC32C checksum of the AsymmetricSignRequest.digest. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.digest using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.digest) is equal to AsymmetricSignRequest.digest_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
      description: Request message for KeyManagementService.AsymmetricSign.
      type: object
    AsymmetricDecryptResponse:
      type: object
      description: Response message for KeyManagementService.AsymmetricDecrypt.
      id: AsymmetricDecryptResponse
      properties:
        plaintextCrc32c:
          format: int64
          description: 'Integrity verification field. A CRC32C checksum of the returned AsymmetricDecryptResponse.plaintext. An integrity check of AsymmetricDecryptResponse.plaintext can be performed by computing the CRC32C checksum of AsymmetricDecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        plaintext:
          format: byte
          description: The decrypted data originally encrypted with the matching public key.
          type: string
        protectionLevel:
          description: The ProtectionLevel of the CryptoKeyVersion used in decryption.
          type: string
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        verifiedCiphertextCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether AsymmetricDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that AsymmetricDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set AsymmetricDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.'
    ImportJob:
      properties:
        importMethod:
          enum:
            - IMPORT_METHOD_UNSPECIFIED
            - RSA_OAEP_3072_SHA1_AES_256
            - RSA_OAEP_4096_SHA1_AES_256
            - RSA_OAEP_3072_SHA256_AES_256
            - RSA_OAEP_4096_SHA256_AES_256
            - RSA_OAEP_3072_SHA256
            - RSA_OAEP_4096_SHA256
          description: Required. Immutable. The wrapping method to be used for incoming key material.
          enumDescriptions:
            - Not specified.
            - 'This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 3072 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).'
            - 'This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 4096 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).'
            - 'This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 3072 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).'
            - 'This ImportMethod represents the CKM_RSA_AES_KEY_WRAP key wrapping scheme defined in the PKCS #11 standard. In summary, this involves wrapping the raw key with an ephemeral AES key, and wrapping the ephemeral AES key with a 4096 bit RSA key. For more details, see [RSA AES key wrap mechanism](http://docs.oasis-open.org/pkcs11/pkcs11-curr/v2.40/cos01/pkcs11-curr-v2.40-cos01.html#_Toc408226908).'
            - 'This ImportMethod represents RSAES-OAEP with a 3072 bit RSA key. The key material to be imported is wrapped directly with the RSA key. Due to technical limitations of RSA wrapping, this method cannot be used to wrap RSA keys for import.'
            - 'This ImportMethod represents RSAES-OAEP with a 4096 bit RSA key. The key material to be imported is wrapped directly with the RSA key. Due to technical limitations of RSA wrapping, this method cannot be used to wrap RSA keys for import.'
          type: string
        state:
          type: string
          readOnly: true
          description: 'Output only. The current state of the ImportJob, indicating if it can be used.'
          enum:
            - IMPORT_JOB_STATE_UNSPECIFIED
            - PENDING_GENERATION
            - ACTIVE
            - EXPIRED
          enumDescriptions:
            - Not specified.
            - The wrapping key for this job is still being generated. It may not be used. Cloud KMS will automatically mark this job as ACTIVE as soon as the wrapping key is generated.
            - This job may be used in CreateCryptoKey and CreateCryptoKeyVersion requests.
            - This job can no longer be used and may not leave this state once entered.
        publicKey:
          readOnly: true
          description: Output only. The public key with which to wrap key material prior to import. Only returned if state is ACTIVE.
          $ref: '#/components/schemas/WrappingPublicKey'
        protectionLevel:
          type: string
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          description: Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
        name:
          type: string
          description: Output only. The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.
          readOnly: true
        expireTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
        generateTime:
          description: Output only. The time this ImportJob's key material was generated.
          readOnly: true
          format: google-datetime
          type: string
        attestation:
          $ref: '#/components/schemas/KeyOperationAttestation'
          readOnly: true
          description: 'Output only. Statement that was generated and signed by the key creator (for example, an HSM) at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only present if the chosen ImportMethod is one with a protection level of HSM.'
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The time at which this ImportJob was created.
        expireEventTime:
          readOnly: true
          type: string
          description: Output only. The time this ImportJob expired. Only present if state is EXPIRED.
          format: google-datetime
      description: 'An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using pre-existing key material, generated outside of Cloud KMS. When an ImportJob is created, Cloud KMS will generate a "wrapping key", which is a public/private key pair. You use the wrapping key to encrypt (also known as wrap) the pre-existing key material to protect it during the import process. The nature of the wrapping key depends on the choice of import_method. When the wrapping key generation is complete, the state will be set to ACTIVE and the public_key can be fetched. The fetched public key can then be used to wrap your pre-existing key material. Once the key material is wrapped, it can be imported into a new CryptoKeyVersion in an existing CryptoKey by calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported with a single ImportJob. Cloud KMS uses the private key portion of the wrapping key to unwrap the key material. Only Cloud KMS has access to the private key. An ImportJob expires 3 days after it is created. Once expired, Cloud KMS will no longer be able to import or unwrap any key material that was wrapped with the ImportJob''s public key. For more information, see [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).'
      id: ImportJob
      type: object
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          items:
            type: string
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          type: array
    MacVerifyRequest:
      description: Request message for KeyManagementService.MacVerify.
      properties:
        dataCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the MacVerifyRequest.data. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.data) is equal to MacVerifyRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        data:
          description: Required. The data used previously as a MacSignRequest.data to generate the MAC tag.
          type: string
          format: byte
        mac:
          format: byte
          type: string
          description: Required. The signature to verify.
        macCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the MacVerifyRequest.mac. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.mac using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.tag) is equal to MacVerifyRequest.mac_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
      id: MacVerifyRequest
      type: object
    CryptoKey:
      id: CryptoKey
      properties:
        createTime:
          description: Output only. The time at which this CryptoKey was created.
          format: google-datetime
          type: string
          readOnly: true
        primary:
          description: 'Output only. A copy of the "primary" CryptoKeyVersion that will be used by Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey''s primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will be omitted.'
          $ref: '#/components/schemas/CryptoKeyVersion'
          readOnly: true
        cryptoKeyBackend:
          type: string
          description: 'Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.'
        rotationPeriod:
          description: 'next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.'
          type: string
          format: google-duration
        nextRotationTime:
          type: string
          description: 'At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.'
          format: google-datetime
        versionTemplate:
          $ref: '#/components/schemas/CryptoKeyVersionTemplate'
          description: A template describing settings for new CryptoKeyVersion instances. The properties of new CryptoKeyVersion instances created by either CreateCryptoKeyVersion or auto-rotation are controlled by this template.
        importOnly:
          type: boolean
          description: Immutable. Whether this key may contain imported versions only.
        destroyScheduledDuration:
          type: string
          format: google-duration
          description: 'Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.'
        purpose:
          enum:
            - CRYPTO_KEY_PURPOSE_UNSPECIFIED
            - ENCRYPT_DECRYPT
            - ASYMMETRIC_SIGN
            - ASYMMETRIC_DECRYPT
            - RAW_ENCRYPT_DECRYPT
            - MAC
          type: string
          description: Immutable. The immutable purpose of this CryptoKey.
          enumDescriptions:
            - Not specified.
            - CryptoKeys with this purpose may be used with Encrypt and Decrypt.
            - CryptoKeys with this purpose may be used with AsymmetricSign and GetPublicKey.
            - CryptoKeys with this purpose may be used with AsymmetricDecrypt and GetPublicKey.
            - CryptoKeys with this purpose may be used with RawEncrypt and RawDecrypt. This purpose is meant to be used for interoperable symmetric encryption and does not support automatic CryptoKey rotation.
            - CryptoKeys with this purpose may be used with MacSign.
        name:
          readOnly: true
          type: string
          description: Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
        labels:
          additionalProperties:
            type: string
          type: object
          description: 'Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).'
      type: object
      description: 'A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.'
    DecryptResponse:
      type: object
      properties:
        plaintext:
          format: byte
          type: string
          description: The decrypted data originally supplied in EncryptRequest.plaintext.
        protectionLevel:
          description: The ProtectionLevel of the CryptoKeyVersion used in decryption.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          type: string
        plaintextCrc32c:
          type: string
          description: 'Integrity verification field. A CRC32C checksum of the returned DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext can be performed by computing the CRC32C checksum of DecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
        usedPrimary:
          type: boolean
          description: Whether the Decryption was performed using the primary key version.
      description: Response message for KeyManagementService.Decrypt.
      id: DecryptResponse
    RawEncryptRequest:
      type: object
      properties:
        plaintext:
          format: byte
          type: string
          description: 'Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version''s protection_level. For SOFTWARE keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.'
        plaintextCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the RawEncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(plaintext) is equal to plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        additionalAuthenticatedData:
          format: byte
          type: string
          description: 'Optional. Optional data that, if specified, must also be provided during decryption through RawDecryptRequest.additional_authenticated_data. This field may only be used in conjunction with an algorithm that accepts additional authenticated data (for example, AES-GCM). The maximum size depends on the key version''s protection_level. For SOFTWARE keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.'
        additionalAuthenticatedDataCrc32c:
          description: 'Optional. An optional CRC32C checksum of the RawEncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
          type: string
        initializationVectorCrc32c:
          format: int64
          description: 'Optional. An optional CRC32C checksum of the RawEncryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        initializationVector:
          description: 'Optional. A customer-supplied initialization vector that will be used for encryption. If it is not provided for AES-CBC and AES-CTR, one will be generated. It will be returned in RawEncryptResponse.initialization_vector.'
          type: string
          format: byte
      id: RawEncryptRequest
      description: Request message for KeyManagementService.RawEncrypt.
    EkmConnection:
      id: EkmConnection
      type: object
      description: 'An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.'
      properties:
        name:
          readOnly: true
          description: Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.
          type: string
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. The time at which the EkmConnection was created.
          type: string
        etag:
          type: string
          description: Optional. Etag of the currently stored EkmConnection.
        cryptoSpacePath:
          description: 'Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.'
          type: string
        keyManagementMode:
          enum:
            - KEY_MANAGEMENT_MODE_UNSPECIFIED
            - MANUAL
            - CLOUD_KMS
          enumDescriptions:
            - Not specified.
            - 'EKM-side key management operations on CryptoKeys created with this EkmConnection must be initiated from the EKM directly and cannot be performed from Cloud KMS. This means that: * When creating a CryptoKeyVersion associated with this EkmConnection, the caller must supply the key path of pre-existing external key material that will be linked to the CryptoKeyVersion. * Destruction of external key material cannot be requested via the Cloud KMS API and must be performed directly in the EKM. * Automatic rotation of key material is not supported.'
            - 'All CryptoKeys created with this EkmConnection use EKM-side key management operations initiated from Cloud KMS. This means that: * When a CryptoKeyVersion associated with this EkmConnection is created, the EKM automatically generates new key material and a new key path. The caller cannot supply the key path of pre-existing external key material. * Destruction of external key material associated with this EkmConnection can be requested by calling DestroyCryptoKeyVersion. * Automatic rotation of key material is supported.'
          description: 'Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.'
          type: string
        serviceResolvers:
          description: 'A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.'
          items:
            $ref: '#/components/schemas/ServiceResolver'
          type: array
    AsymmetricDecryptRequest:
      type: object
      description: Request message for KeyManagementService.AsymmetricDecrypt.
      id: AsymmetricDecryptRequest
      properties:
        ciphertextCrc32c:
          type: string
          description: 'Optional. An optional CRC32C checksum of the AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received AsymmetricDecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
        ciphertext:
          format: byte
          type: string
          description: Required. The data encrypted with the named CryptoKeyVersion's public key using OAEP.
    MacSignResponse:
      properties:
        protectionLevel:
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          description: The ProtectionLevel of the CryptoKeyVersion used for signing.
          type: string
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
        verifiedDataCrc32c:
          description: 'Integrity verification field. A flag indicating whether MacSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set MacSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        name:
          description: The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.
          type: string
        mac:
          description: The created signature.
          type: string
          format: byte
        macCrc32c:
          format: int64
          type: string
          description: 'Integrity verification field. A CRC32C checksum of the returned MacSignResponse.mac. An integrity check of MacSignResponse.mac can be performed by computing the CRC32C checksum of MacSignResponse.mac and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
      description: Response message for KeyManagementService.MacSign.
      id: MacSignResponse
      type: object
    CryptoKeyVersion:
      properties:
        createTime:
          description: Output only. The time at which this CryptoKeyVersion was created.
          readOnly: true
          type: string
          format: google-datetime
        reimportEligible:
          readOnly: true
          description: 'Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.'
          type: boolean
        name:
          description: Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.
          type: string
          readOnly: true
        state:
          description: The current state of the CryptoKeyVersion.
          enum:
            - CRYPTO_KEY_VERSION_STATE_UNSPECIFIED
            - PENDING_GENERATION
            - ENABLED
            - DISABLED
            - DESTROYED
            - DESTROY_SCHEDULED
            - PENDING_IMPORT
            - IMPORT_FAILED
            - GENERATION_FAILED
            - PENDING_EXTERNAL_DESTRUCTION
            - EXTERNAL_DESTRUCTION_FAILED
          enumDescriptions:
            - Not specified.
            - 'This version is still being generated. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.'
            - This version may be used for cryptographic operations.
            - 'This version may not be used, but the key material is still available, and the version can be placed back into the ENABLED state.'
            - 'This version is destroyed, and the key material is no longer stored. This version may only become ENABLED again if this version is reimport_eligible and the original key material is reimported with a call to KeyManagementService.ImportCryptoKeyVersion.'
            - 'This version is scheduled for destruction, and will be destroyed soon. Call RestoreCryptoKeyVersion to put it back into the DISABLED state.'
            - 'This version is still being imported. It may not be used, enabled, disabled, or destroyed yet. Cloud KMS will automatically mark this version ENABLED as soon as the version is ready.'
            - 'This version was not imported successfully. It may not be used, enabled, disabled, or destroyed. The submitted key material has been discarded. Additional details can be found in CryptoKeyVersion.import_failure_reason.'
            - 'This version was not generated successfully. It may not be used, enabled, disabled, or destroyed. Additional details can be found in CryptoKeyVersion.generation_failure_reason.'
            - 'This version was destroyed, and it may not be used or enabled again. Cloud KMS is waiting for the corresponding key material residing in an external key manager to be destroyed.'
            - 'This version was destroyed, and it may not be used or enabled again. However, Cloud KMS could not confirm that the corresponding key material residing in an external key manager was destroyed. Additional details can be found in CryptoKeyVersion.external_destruction_failure_reason.'
          type: string
        protectionLevel:
          description: Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          readOnly: true
          type: string
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
        importJob:
          description: Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
          readOnly: true
          type: string
        attestation:
          readOnly: true
          $ref: '#/components/schemas/KeyOperationAttestation'
          description: 'Output only. Statement that was generated and signed by the HSM at key creation time. Use this statement to verify attributes of the key as stored on the HSM, independently of Google. Only provided for key versions with protection_level HSM.'
        algorithm:
          enumDescriptions:
            - Not specified.
            - Creates symmetric encryption keys.
            - AES-GCM (Galois Counter Mode) using 128-bit keys.
            - AES-GCM (Galois Counter Mode) using 256-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 128-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 256-bit keys.
            - AES-CTR (Counter Mode) using 128-bit keys.
            - AES-CTR (Counter Mode) using 256-bit keys.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.'
            - RSAES-OAEP 2048 bit key with a SHA256 digest.
            - RSAES-OAEP 3072 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA512 digest.
            - RSAES-OAEP 2048 bit key with a SHA1 digest.
            - RSAES-OAEP 3072 bit key with a SHA1 digest.
            - RSAES-OAEP 4096 bit key with a SHA1 digest.
            - 'ECDSA on the NIST P-256 curve with a SHA256 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the NIST P-384 curve with a SHA384 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM protection level. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - HMAC-SHA256 signing with a 256 bit key.
            - HMAC-SHA1 signing with a 160 bit key.
            - HMAC-SHA384 signing with a 384 bit key.
            - HMAC-SHA512 signing with a 512 bit key.
            - HMAC-SHA224 signing with a 224 bit key.
            - Algorithm representing symmetric encryption by an external key manager.
          description: Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
          type: string
          enum:
            - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
            - GOOGLE_SYMMETRIC_ENCRYPTION
            - AES_128_GCM
            - AES_256_GCM
            - AES_128_CBC
            - AES_256_CBC
            - AES_128_CTR
            - AES_256_CTR
            - RSA_SIGN_PSS_2048_SHA256
            - RSA_SIGN_PSS_3072_SHA256
            - RSA_SIGN_PSS_4096_SHA256
            - RSA_SIGN_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - RSA_SIGN_RAW_PKCS1_2048
            - RSA_SIGN_RAW_PKCS1_3072
            - RSA_SIGN_RAW_PKCS1_4096
            - RSA_DECRYPT_OAEP_2048_SHA256
            - RSA_DECRYPT_OAEP_3072_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA512
            - RSA_DECRYPT_OAEP_2048_SHA1
            - RSA_DECRYPT_OAEP_3072_SHA1
            - RSA_DECRYPT_OAEP_4096_SHA1
            - EC_SIGN_P256_SHA256
            - EC_SIGN_P384_SHA384
            - EC_SIGN_SECP256K1_SHA256
            - HMAC_SHA256
            - HMAC_SHA1
            - HMAC_SHA384
            - HMAC_SHA512
            - HMAC_SHA224
            - EXTERNAL_SYMMETRIC_ENCRYPTION
          readOnly: true
        externalProtectionLevelOptions:
          description: ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
          $ref: '#/components/schemas/ExternalProtectionLevelOptions'
        destroyTime:
          format: google-datetime
          description: Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
          readOnly: true
          type: string
        destroyEventTime:
          type: string
          readOnly: true
          description: Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.
          format: google-datetime
        generateTime:
          description: Output only. The time this CryptoKeyVersion's key material was generated.
          format: google-datetime
          type: string
          readOnly: true
        importTime:
          type: string
          description: Output only. The time at which this CryptoKeyVersion's key material was most recently imported.
          format: google-datetime
          readOnly: true
        externalDestructionFailureReason:
          readOnly: true
          description: Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
          type: string
        generationFailureReason:
          type: string
          readOnly: true
          description: Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
        importFailureReason:
          description: Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
          readOnly: true
          type: string
      type: object
      description: 'A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.'
      id: CryptoKeyVersion
    Certificate:
      id: Certificate
      properties:
        sha256Fingerprint:
          type: string
          readOnly: true
          description: Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
        subject:
          type: string
          readOnly: true
          description: Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
        rawDer:
          type: string
          format: byte
          description: Required. The raw certificate bytes in DER format.
        serialNumber:
          readOnly: true
          description: Output only. The certificate serial number as a hex string. Only present if parsed is true.
          type: string
        notAfterTime:
          description: Output only. The certificate is not valid after this time. Only present if parsed is true.
          format: google-datetime
          readOnly: true
          type: string
        subjectAlternativeDnsNames:
          type: array
          description: Output only. The subject Alternative DNS names. Only present if parsed is true.
          items:
            type: string
          readOnly: true
        notBeforeTime:
          format: google-datetime
          readOnly: true
          description: Output only. The certificate is not valid before this time. Only present if parsed is true.
          type: string
        parsed:
          type: boolean
          readOnly: true
          description: Output only. True if the certificate was parsed successfully.
        issuer:
          description: Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
          type: string
          readOnly: true
      description: A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
      type: object
    CertificateChains:
      properties:
        caviumCerts:
          type: array
          description: Cavium certificate chain corresponding to the attestation.
          items:
            type: string
        googleCardCerts:
          items:
            type: string
          description: Google card certificate chain corresponding to the attestation.
          type: array
        googlePartitionCerts:
          items:
            type: string
          description: Google partition certificate chain corresponding to the attestation.
          type: array
      type: object
      id: CertificateChains
      description: 'Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.'
    MacVerifyResponse:
      description: Response message for KeyManagementService.MacVerify.
      properties:
        name:
          description: The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.
          type: string
        verifiedSuccessIntegrity:
          description: 'Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.'
          type: boolean
        verifiedMacCrc32c:
          description: 'Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        verifiedDataCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
        success:
          description: This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.
          type: boolean
        protectionLevel:
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          type: string
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          description: The ProtectionLevel of the CryptoKeyVersion used for verification.
      type: object
      id: MacVerifyResponse
    SetIamPolicyRequest:
      type: object
      description: Request message for `SetIamPolicy` method.
      id: SetIamPolicyRequest
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
        updateMask:
          type: string
          format: google-fieldmask
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
    Digest:
      id: Digest
      properties:
        sha256:
          format: byte
          type: string
          description: A message digest produced with the SHA-256 algorithm.
        sha512:
          format: byte
          type: string
          description: A message digest produced with the SHA-512 algorithm.
        sha384:
          type: string
          description: A message digest produced with the SHA-384 algorithm.
          format: byte
      description: A Digest holds a cryptographic message digest.
      type: object
    RawEncryptResponse:
      type: object
      properties:
        initializationVector:
          type: string
          format: byte
          description: The initialization vector (IV) generated by the service during encryption. This value must be stored and provided in RawDecryptRequest.initialization_vector at decryption time.
        tagLength:
          description: The length of the authentication tag that is appended to the end of the ciphertext.
          format: int32
          type: integer
        protectionLevel:
          type: string
          description: The ProtectionLevel of the CryptoKeyVersion used in encryption.
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        verifiedPlaintextCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawEncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that RawEncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawEncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        verifiedInitializationVectorCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawEncryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawEncryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawEncryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        initializationVectorCrc32c:
          description: 'Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.initialization_vector. An integrity check of initialization_vector can be performed by computing the CRC32C checksum of initialization_vector and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
          format: int64
        name:
          description: The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
          type: string
        ciphertext:
          type: string
          format: byte
          description: 'The encrypted data. In the case of AES-GCM, the authentication tag is the tag_length bytes at the end of this field.'
        ciphertextCrc32c:
          type: string
          description: 'Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.ciphertext. An integrity check of ciphertext can be performed by computing the CRC32C checksum of ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
        verifiedAdditionalAuthenticatedDataCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawEncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawEncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawEncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
      description: Response message for KeyManagementService.RawEncrypt.
      id: RawEncryptResponse
    PublicKey:
      description: The public key for a given CryptoKeyVersion. Obtained via GetPublicKey.
      type: object
      properties:
        protectionLevel:
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          description: The ProtectionLevel of the CryptoKeyVersion public key.
          type: string
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        name:
          type: string
          description: 'The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.'
        algorithm:
          enumDescriptions:
            - Not specified.
            - Creates symmetric encryption keys.
            - AES-GCM (Galois Counter Mode) using 128-bit keys.
            - AES-GCM (Galois Counter Mode) using 256-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 128-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 256-bit keys.
            - AES-CTR (Counter Mode) using 128-bit keys.
            - AES-CTR (Counter Mode) using 256-bit keys.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.'
            - RSAES-OAEP 2048 bit key with a SHA256 digest.
            - RSAES-OAEP 3072 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA512 digest.
            - RSAES-OAEP 2048 bit key with a SHA1 digest.
            - RSAES-OAEP 3072 bit key with a SHA1 digest.
            - RSAES-OAEP 4096 bit key with a SHA1 digest.
            - 'ECDSA on the NIST P-256 curve with a SHA256 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the NIST P-384 curve with a SHA384 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM protection level. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - HMAC-SHA256 signing with a 256 bit key.
            - HMAC-SHA1 signing with a 160 bit key.
            - HMAC-SHA384 signing with a 384 bit key.
            - HMAC-SHA512 signing with a 512 bit key.
            - HMAC-SHA224 signing with a 224 bit key.
            - Algorithm representing symmetric encryption by an external key manager.
          type: string
          enum:
            - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
            - GOOGLE_SYMMETRIC_ENCRYPTION
            - AES_128_GCM
            - AES_256_GCM
            - AES_128_CBC
            - AES_256_CBC
            - AES_128_CTR
            - AES_256_CTR
            - RSA_SIGN_PSS_2048_SHA256
            - RSA_SIGN_PSS_3072_SHA256
            - RSA_SIGN_PSS_4096_SHA256
            - RSA_SIGN_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - RSA_SIGN_RAW_PKCS1_2048
            - RSA_SIGN_RAW_PKCS1_3072
            - RSA_SIGN_RAW_PKCS1_4096
            - RSA_DECRYPT_OAEP_2048_SHA256
            - RSA_DECRYPT_OAEP_3072_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA512
            - RSA_DECRYPT_OAEP_2048_SHA1
            - RSA_DECRYPT_OAEP_3072_SHA1
            - RSA_DECRYPT_OAEP_4096_SHA1
            - EC_SIGN_P256_SHA256
            - EC_SIGN_P384_SHA384
            - EC_SIGN_SECP256K1_SHA256
            - HMAC_SHA256
            - HMAC_SHA1
            - HMAC_SHA384
            - HMAC_SHA512
            - HMAC_SHA224
            - EXTERNAL_SYMMETRIC_ENCRYPTION
          description: The Algorithm associated with this key.
        pemCrc32c:
          type: string
          format: int64
          description: 'Integrity verification field. A CRC32C checksum of the returned PublicKey.pem. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.'
        pem:
          type: string
          description: 'The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).'
      id: PublicKey
    KeyOperationAttestation:
      type: object
      properties:
        content:
          readOnly: true
          format: byte
          type: string
          description: Output only. The attestation data provided by the HSM when the key operation was performed.
        format:
          readOnly: true
          description: Output only. The format of the attestation data.
          enum:
            - ATTESTATION_FORMAT_UNSPECIFIED
            - CAVIUM_V1_COMPRESSED
            - CAVIUM_V2_COMPRESSED
          type: string
          enumDescriptions:
            - Not specified.
            - 'Cavium HSM attestation compressed with gzip. Note that this format is defined by Cavium and subject to change at any time. See https://www.marvell.com/products/security-solutions/nitrox-hs-adapters/software-key-attestation.html.'
            - Cavium HSM attestation V2 compressed with gzip. This is a new format introduced in Cavium's version 3.2-08.
        certChains:
          $ref: '#/components/schemas/CertificateChains'
          readOnly: true
          description: Output only. The certificate chains needed to validate the attestation
      description: 'Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).'
      id: KeyOperationAttestation
    WrappingPublicKey:
      description: 'The public key component of the wrapping key. For details of the type of key this public key corresponds to, see the ImportMethod.'
      type: object
      properties:
        pem:
          description: 'The public key, encoded in PEM format. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).'
          type: string
      id: WrappingPublicKey
    DecryptRequest:
      description: Request message for KeyManagementService.Decrypt.
      properties:
        additionalAuthenticatedData:
          type: string
          description: Optional. Optional data that must match the data originally supplied in EncryptRequest.additional_authenticated_data.
          format: byte
        additionalAuthenticatedDataCrc32c:
          type: string
          format: int64
          description: 'Optional. An optional CRC32C checksum of the DecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.additional_authenticated_data) is equal to DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
        ciphertext:
          format: byte
          description: Required. The encrypted data originally returned in EncryptResponse.ciphertext.
          type: string
        ciphertextCrc32c:
          description: 'Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.ciphertext) is equal to DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
          format: int64
      type: object
      id: DecryptRequest
    CryptoKeyVersionTemplate:
      description: 'A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.'
      id: CryptoKeyVersionTemplate
      type: object
      properties:
        protectionLevel:
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          description: ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.
          type: string
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        algorithm:
          enum:
            - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
            - GOOGLE_SYMMETRIC_ENCRYPTION
            - AES_128_GCM
            - AES_256_GCM
            - AES_128_CBC
            - AES_256_CBC
            - AES_128_CTR
            - AES_256_CTR
            - RSA_SIGN_PSS_2048_SHA256
            - RSA_SIGN_PSS_3072_SHA256
            - RSA_SIGN_PSS_4096_SHA256
            - RSA_SIGN_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - RSA_SIGN_RAW_PKCS1_2048
            - RSA_SIGN_RAW_PKCS1_3072
            - RSA_SIGN_RAW_PKCS1_4096
            - RSA_DECRYPT_OAEP_2048_SHA256
            - RSA_DECRYPT_OAEP_3072_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA512
            - RSA_DECRYPT_OAEP_2048_SHA1
            - RSA_DECRYPT_OAEP_3072_SHA1
            - RSA_DECRYPT_OAEP_4096_SHA1
            - EC_SIGN_P256_SHA256
            - EC_SIGN_P384_SHA384
            - EC_SIGN_SECP256K1_SHA256
            - HMAC_SHA256
            - HMAC_SHA1
            - HMAC_SHA384
            - HMAC_SHA512
            - HMAC_SHA224
            - EXTERNAL_SYMMETRIC_ENCRYPTION
          enumDescriptions:
            - Not specified.
            - Creates symmetric encryption keys.
            - AES-GCM (Galois Counter Mode) using 128-bit keys.
            - AES-GCM (Galois Counter Mode) using 256-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 128-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 256-bit keys.
            - AES-CTR (Counter Mode) using 128-bit keys.
            - AES-CTR (Counter Mode) using 256-bit keys.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.'
            - RSAES-OAEP 2048 bit key with a SHA256 digest.
            - RSAES-OAEP 3072 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA512 digest.
            - RSAES-OAEP 2048 bit key with a SHA1 digest.
            - RSAES-OAEP 3072 bit key with a SHA1 digest.
            - RSAES-OAEP 4096 bit key with a SHA1 digest.
            - 'ECDSA on the NIST P-256 curve with a SHA256 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the NIST P-384 curve with a SHA384 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM protection level. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - HMAC-SHA256 signing with a 256 bit key.
            - HMAC-SHA1 signing with a 160 bit key.
            - HMAC-SHA384 signing with a 384 bit key.
            - HMAC-SHA512 signing with a 512 bit key.
            - HMAC-SHA224 signing with a 224 bit key.
            - Algorithm representing symmetric encryption by an external key manager.
          type: string
          description: 'Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.'
    ListCryptoKeyVersionsResponse:
      description: Response message for KeyManagementService.ListCryptoKeyVersions.
      id: ListCryptoKeyVersionsResponse
      type: object
      properties:
        nextPageToken:
          description: A token to retrieve next page of results. Pass this value in ListCryptoKeyVersionsRequest.page_token to retrieve the next page of results.
          type: string
        totalSize:
          format: int32
          type: integer
          description: The total number of CryptoKeyVersions that matched the query.
        cryptoKeyVersions:
          type: array
          items:
            $ref: '#/components/schemas/CryptoKeyVersion'
          description: The list of CryptoKeyVersions.
    AsymmetricSignResponse:
      description: Response message for KeyManagementService.AsymmetricSign.
      properties:
        verifiedDataCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether AsymmetricSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that AsymmetricSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set AsymmetricSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
        verifiedDigestCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether AsymmetricSignRequest.digest_crc32c was received by KeyManagementService and used for the integrity verification of the digest. A false value of this field indicates either that AsymmetricSignRequest.digest_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set AsymmetricSignRequest.digest_crc32c but this field is still false, discard the response and perform a limited number of retries.'
        signature:
          description: The created signature.
          type: string
          format: byte
        signatureCrc32c:
          format: int64
          description: 'Integrity verification field. A CRC32C checksum of the returned AsymmetricSignResponse.signature. An integrity check of AsymmetricSignResponse.signature can be performed by computing the CRC32C checksum of AsymmetricSignResponse.signature and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        name:
          type: string
          description: The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.
        protectionLevel:
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          description: The ProtectionLevel of the CryptoKeyVersion used for signing.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
          type: string
      type: object
      id: AsymmetricSignResponse
    ListKeyRingsResponse:
      description: Response message for KeyManagementService.ListKeyRings.
      id: ListKeyRingsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: A token to retrieve next page of results. Pass this value in ListKeyRingsRequest.page_token to retrieve the next page of results.
        keyRings:
          type: array
          description: The list of KeyRings.
          items:
            $ref: '#/components/schemas/KeyRing'
        totalSize:
          type: integer
          description: The total number of KeyRings that matched the query.
          format: int32
    ExternalProtectionLevelOptions:
      type: object
      description: ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.
      id: ExternalProtectionLevelOptions
      properties:
        ekmConnectionKeyPath:
          type: string
          description: 'The path to the external key material on the EKM when using EkmConnection e.g., "v0/my/key". Set this field instead of external_key_uri when using an EkmConnection.'
        externalKeyUri:
          description: The URI for an external resource that this CryptoKeyVersion represents.
          type: string
    GenerateRandomBytesRequest:
      id: GenerateRandomBytesRequest
      type: object
      properties:
        protectionLevel:
          description: 'The ProtectionLevel to use when generating the random data. Currently, only HSM protection level is supported.'
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          type: string
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        lengthBytes:
          type: integer
          description: 'The length in bytes of the amount of randomness to retrieve. Minimum 8 bytes, maximum 1024 bytes.'
          format: int32
      description: Request message for KeyManagementService.GenerateRandomBytes.
    ImportCryptoKeyVersionRequest:
      properties:
        algorithm:
          enum:
            - CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED
            - GOOGLE_SYMMETRIC_ENCRYPTION
            - AES_128_GCM
            - AES_256_GCM
            - AES_128_CBC
            - AES_256_CBC
            - AES_128_CTR
            - AES_256_CTR
            - RSA_SIGN_PSS_2048_SHA256
            - RSA_SIGN_PSS_3072_SHA256
            - RSA_SIGN_PSS_4096_SHA256
            - RSA_SIGN_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - RSA_SIGN_RAW_PKCS1_2048
            - RSA_SIGN_RAW_PKCS1_3072
            - RSA_SIGN_RAW_PKCS1_4096
            - RSA_DECRYPT_OAEP_2048_SHA256
            - RSA_DECRYPT_OAEP_3072_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA256
            - RSA_DECRYPT_OAEP_4096_SHA512
            - RSA_DECRYPT_OAEP_2048_SHA1
            - RSA_DECRYPT_OAEP_3072_SHA1
            - RSA_DECRYPT_OAEP_4096_SHA1
            - EC_SIGN_P256_SHA256
            - EC_SIGN_P384_SHA384
            - EC_SIGN_SECP256K1_SHA256
            - HMAC_SHA256
            - HMAC_SHA1
            - HMAC_SHA384
            - HMAC_SHA512
            - HMAC_SHA224
            - EXTERNAL_SYMMETRIC_ENCRYPTION
          type: string
          description: Required. The algorithm of the key being imported. This does not need to match the version_template of the CryptoKey this version imports into.
          enumDescriptions:
            - Not specified.
            - Creates symmetric encryption keys.
            - AES-GCM (Galois Counter Mode) using 128-bit keys.
            - AES-GCM (Galois Counter Mode) using 256-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 128-bit keys.
            - AES-CBC (Cipher Block Chaining Mode) using 256-bit keys.
            - AES-CTR (Counter Mode) using 128-bit keys.
            - AES-CTR (Counter Mode) using 256-bit keys.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.'
            - 'RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.'
            - RSAES-OAEP 2048 bit key with a SHA256 digest.
            - RSAES-OAEP 3072 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA256 digest.
            - RSAES-OAEP 4096 bit key with a SHA512 digest.
            - RSAES-OAEP 2048 bit key with a SHA1 digest.
            - RSAES-OAEP 3072 bit key with a SHA1 digest.
            - RSAES-OAEP 4096 bit key with a SHA1 digest.
            - 'ECDSA on the NIST P-256 curve with a SHA256 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the NIST P-384 curve with a SHA384 digest. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - 'ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM protection level. Other hash functions can also be used: https://cloud.google.com/kms/docs/create-validate-signatures#ecdsa_support_for_other_hash_algorithms'
            - HMAC-SHA256 signing with a 256 bit key.
            - HMAC-SHA1 signing with a 160 bit key.
            - HMAC-SHA384 signing with a 384 bit key.
            - HMAC-SHA512 signing with a 512 bit key.
            - HMAC-SHA224 signing with a 224 bit key.
            - Algorithm representing symmetric encryption by an external key manager.
        wrappedKey:
          description: 'Optional. The wrapped key material to import. Before wrapping, key material must be formatted. If importing symmetric key material, the expected key material format is plain bytes. If importing asymmetric key material, the expected key material format is PKCS#8-encoded DER (the PrivateKeyInfo structure from RFC 5208). When wrapping with import methods (RSA_OAEP_3072_SHA1_AES_256 or RSA_OAEP_4096_SHA1_AES_256 or RSA_OAEP_3072_SHA256_AES_256 or RSA_OAEP_4096_SHA256_AES_256), this field must contain the concatenation of: 1. An ephemeral AES-256 wrapping key wrapped with the public_key using RSAES-OAEP with SHA-1/SHA-256, MGF1 with SHA-1/SHA-256, and an empty label. 2. The formatted key to be imported, wrapped with the ephemeral AES-256 key using AES-KWP (RFC 5649). This format is the same as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP. When wrapping with import methods (RSA_OAEP_3072_SHA256 or RSA_OAEP_4096_SHA256), this field must contain the formatted key to be imported, wrapped with the public_key using RSAES-OAEP with SHA-256, MGF1 with SHA-256, and an empty label.'
          type: string
          format: byte
        rsaAesWrappedKey:
          format: byte
          description: Optional. This field has the same meaning as wrapped_key. Prefer to use that field in new work. Either that field or this field (but not both) must be specified.
          type: string
        cryptoKeyVersion:
          description: 'Optional. The optional name of an existing CryptoKeyVersion to target for an import operation. If this field is not present, a new CryptoKeyVersion containing the supplied key material is created. If this field is present, the supplied key material is imported into the existing CryptoKeyVersion. To import into an existing CryptoKeyVersion, the CryptoKeyVersion must be a child of ImportCryptoKeyVersionRequest.parent, have been previously created via ImportCryptoKeyVersion, and be in DESTROYED or IMPORT_FAILED state. The key material and algorithm must match the previous CryptoKeyVersion exactly if the CryptoKeyVersion has ever contained key material.'
          type: string
        importJob:
          type: string
          description: Required. The name of the ImportJob that was used to wrap this key material.
      id: ImportCryptoKeyVersionRequest
      description: Request message for KeyManagementService.ImportCryptoKeyVersion.
      type: object
    ListCryptoKeysResponse:
      type: object
      id: ListCryptoKeysResponse
      properties:
        nextPageToken:
          description: A token to retrieve next page of results. Pass this value in ListCryptoKeysRequest.page_token to retrieve the next page of results.
          type: string
        totalSize:
          description: The total number of CryptoKeys that matched the query.
          type: integer
          format: int32
        cryptoKeys:
          items:
            $ref: '#/components/schemas/CryptoKey'
          type: array
          description: The list of CryptoKeys.
      description: Response message for KeyManagementService.ListCryptoKeys.
    DestroyCryptoKeyVersionRequest:
      description: Request message for KeyManagementService.DestroyCryptoKeyVersion.
      type: object
      properties: {}
      id: DestroyCryptoKeyVersionRequest
    ListLocationsResponse:
      id: ListLocationsResponse
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: A list of locations that matches the specified filter in the request.
        nextPageToken:
          description: The standard List next-page token.
          type: string
      description: The response message for Locations.ListLocations.
    EncryptRequest:
      properties:
        additionalAuthenticatedData:
          type: string
          format: byte
          description: 'Optional. Optional data that, if specified, must also be provided during decryption through DecryptRequest.additional_authenticated_data. The maximum size depends on the key version''s protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys the AAD must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.'
        additionalAuthenticatedDataCrc32c:
          description: 'Optional. An optional CRC32C checksum of the EncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.additional_authenticated_data) is equal to EncryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
          format: int64
        plaintext:
          description: 'Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version''s protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.'
          type: string
          format: byte
        plaintextCrc32c:
          description: 'Optional. An optional CRC32C checksum of the EncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.plaintext) is equal to EncryptRequest.plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
          format: int64
      type: object
      description: Request message for KeyManagementService.Encrypt.
      id: EncryptRequest
    RestoreCryptoKeyVersionRequest:
      type: object
      description: Request message for KeyManagementService.RestoreCryptoKeyVersion.
      properties: {}
      id: RestoreCryptoKeyVersionRequest
    KeyRing:
      properties:
        name:
          type: string
          readOnly: true
          description: Output only. The resource name for the KeyRing in the format `projects/*/locations/*/keyRings/*`.
        createTime:
          format: google-datetime
          readOnly: true
          description: Output only. The time at which this KeyRing was created.
          type: string
      description: A KeyRing is a toplevel logical grouping of CryptoKeys.
      id: KeyRing
      type: object
    GenerateRandomBytesResponse:
      description: Response message for KeyManagementService.GenerateRandomBytes.
      type: object
      id: GenerateRandomBytesResponse
      properties:
        dataCrc32c:
          type: string
          description: 'Integrity verification field. A CRC32C checksum of the returned GenerateRandomBytesResponse.data. An integrity check of GenerateRandomBytesResponse.data can be performed by computing the CRC32C checksum of GenerateRandomBytesResponse.data and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          format: int64
        data:
          description: The generated data.
          format: byte
          type: string
    MacSignRequest:
      id: MacSignRequest
      type: object
      description: Request message for KeyManagementService.MacSign.
      properties:
        dataCrc32c:
          format: int64
          type: string
          description: 'Optional. An optional CRC32C checksum of the MacSignRequest.data. If specified, KeyManagementService will verify the integrity of the received MacSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacSignRequest.data) is equal to MacSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
        data:
          type: string
          description: Required. The data to sign. The MAC tag is computed over this data field based on the specific algorithm.
          format: byte
    ListImportJobsResponse:
      description: Response message for KeyManagementService.ListImportJobs.
      id: ListImportJobsResponse
      properties:
        totalSize:
          type: integer
          description: The total number of ImportJobs that matched the query.
          format: int32
        importJobs:
          items:
            $ref: '#/components/schemas/ImportJob'
          description: The list of ImportJobs.
          type: array
        nextPageToken:
          description: A token to retrieve next page of results. Pass this value in ListImportJobsRequest.page_token to retrieve the next page of results.
          type: string
      type: object
    AuditConfig:
      id: AuditConfig
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
      properties:
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
        service:
          type: string
          description: 'Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.'
      type: object
    Expr:
      id: Expr
      properties:
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
      type: object
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    LocationMetadata:
      type: object
      properties:
        hsmAvailable:
          type: boolean
          description: Indicates whether CryptoKeys with protection_level HSM can be created in this location.
        ekmAvailable:
          description: Indicates whether CryptoKeys with protection_level EXTERNAL can be created in this location.
          type: boolean
      description: Cloud KMS metadata for the given google.cloud.location.Location.
      id: LocationMetadata
    AuditLogConfig:
      id: AuditLogConfig
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      properties:
        exemptedMembers:
          type: array
          items:
            type: string
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        logType:
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          description: The log type that this config enables.
      type: object
    UpdateCryptoKeyPrimaryVersionRequest:
      properties:
        cryptoKeyVersionId:
          description: Required. The id of the child CryptoKeyVersion to use as primary.
          type: string
      id: UpdateCryptoKeyPrimaryVersionRequest
      description: Request message for KeyManagementService.UpdateCryptoKeyPrimaryVersion.
      type: object
    EncryptResponse:
      properties:
        ciphertextCrc32c:
          format: int64
          type: string
          description: 'Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
        verifiedPlaintextCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.'
        name:
          description: The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
          type: string
        verifiedAdditionalAuthenticatedDataCrc32c:
          type: boolean
          description: 'Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
        protectionLevel:
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          type: string
          description: The ProtectionLevel of the CryptoKeyVersion used in encryption.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        ciphertext:
          type: string
          format: byte
          description: The encrypted data.
      id: EncryptResponse
      description: Response message for KeyManagementService.Encrypt.
      type: object
    RawDecryptResponse:
      description: Response message for KeyManagementService.RawDecrypt.
      properties:
        plaintextCrc32c:
          format: int64
          description: 'Integrity verification field. A CRC32C checksum of the returned RawDecryptResponse.plaintext. An integrity check of plaintext can be performed by computing the CRC32C checksum of plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.'
          type: string
        verifiedAdditionalAuthenticatedDataCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawDecryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawDecryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawDecryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        verifiedCiphertextCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that RawDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
        protectionLevel:
          type: string
          enumDescriptions:
            - Not specified.
            - Crypto operations are performed in software.
            - Crypto operations are performed in a Hardware Security Module.
            - Crypto operations are performed by an external key manager.
            - Crypto operations are performed in an EKM-over-VPC backend.
          description: The ProtectionLevel of the CryptoKeyVersion used in decryption.
          enum:
            - PROTECTION_LEVEL_UNSPECIFIED
            - SOFTWARE
            - HSM
            - EXTERNAL
            - EXTERNAL_VPC
        plaintext:
          format: byte
          description: The decrypted data.
          type: string
        verifiedInitializationVectorCrc32c:
          description: 'Integrity verification field. A flag indicating whether RawDecryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawDecryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you''ve set RawDecryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.'
          type: boolean
      type: object
      id: RawDecryptResponse
    EkmConfig:
      properties:
        name:
          readOnly: true
          type: string
          description: Output only. The resource name for the EkmConfig in the format `projects/*/locations/*/ekmConfig`.
        defaultEkmConnection:
          description: Optional. Resource name of the default EkmConnection. Setting this field to the empty string removes the default.
          type: string
      id: EkmConfig
      description: An EkmConfig is a singleton resource that represents configuration parameters that apply to all CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC in a given project and location.
      type: object
    Binding:
      description: 'Associates `members`, or principals, with a `role`.'
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
      id: Binding
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      type: object
      id: TestIamPermissionsResponse
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
          items:
            type: string
    ServiceResolver:
      id: ServiceResolver
      properties:
        serviceDirectoryService:
          description: 'Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.'
          type: string
        serverCertificates:
          description: 'Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.'
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
        endpointFilter:
          type: string
          description: 'Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.'
        hostname:
          description: Required. The hostname of the EKM replica used at TLS and HTTP layers.
          type: string
      description: A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
      type: object
    Policy:
      id: Policy
      properties:
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        auditConfigs:
          items:
            $ref: '#/components/schemas/AuditConfig'
          type: array
          description: Specifies cloud audit logging configuration for this policy.
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          type: string
          format: byte
        bindings:
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          items:
            $ref: '#/components/schemas/Binding'
          type: array
      type: object
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  x-stackQL-resources:
    locations:
      id: google.cloudkms.locations
      name: locations
      title: Locations
      methods:
        generate_random_bytes:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}:generateRandomBytes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    ekm_config:
      id: google.cloudkms.ekm_config
      name: ekm_config
      title: Ekm Config
      methods:
        update_ekm_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConfig/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_ekm_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConfig/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ekm_config/methods/get_ekm_config'
        insert: []
        update: []
        delete: []
    ekm_connections:
      id: google.cloudkms.ekm_connections
      name: ekm_connections
      title: Ekm Connections
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.ekmConnections
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        verify_connectivity:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}:verifyConnectivity/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ekm_connections/methods/get'
          - $ref: '#/components/x-stackQL-resources/ekm_connections/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/ekm_connections/methods/create'
        update: []
        delete: []
    ekm_connections_iam_policies:
      id: google.cloudkms.ekm_connections_iam_policies
      name: ekm_connections_iam_policies
      title: Ekm Connections Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConnections~1{ekmConnectionsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ekm_connections_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    ekm_config_iam_policies:
      id: google.cloudkms.ekm_config_iam_policies
      name: ekm_config_iam_policies
      title: Ekm Config Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConfig:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConfig:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1ekmConfig:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ekm_config_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    key_rings:
      id: google.cloudkms.key_rings
      name: key_rings
      title: Key Rings
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.keyRings
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/key_rings/methods/list'
          - $ref: '#/components/x-stackQL-resources/key_rings/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/key_rings/methods/create'
        update: []
        delete: []
    key_rings_iam_policies:
      id: google.cloudkms.key_rings_iam_policies
      name: key_rings_iam_policies
      title: Key Rings Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/key_rings_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    import_jobs_iam_policies:
      id: google.cloudkms.import_jobs_iam_policies
      name: import_jobs_iam_policies
      title: Import Jobs Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs~1{importJobsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs~1{importJobsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs~1{importJobsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/import_jobs_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    import_jobs:
      id: google.cloudkms.import_jobs
      name: import_jobs
      title: Import Jobs
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.importJobs
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1importJobs~1{importJobsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/import_jobs/methods/list'
          - $ref: '#/components/x-stackQL-resources/import_jobs/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/import_jobs/methods/create'
        update: []
        delete: []
    crypto_key_versions:
      id: google.cloudkms.crypto_key_versions
      name: crypto_key_versions
      title: Crypto Key Versions
      methods:
        raw_encrypt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:rawEncrypt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.cryptoKeyVersions
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        mac_verify:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:macVerify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        destroy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:destroy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        raw_decrypt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:rawDecrypt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        asymmetric_decrypt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:asymmetricDecrypt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        asymmetric_sign:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:asymmetricSign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        restore:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        mac_sign:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}:macSign/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/crypto_key_versions/methods/list'
          - $ref: '#/components/x-stackQL-resources/crypto_key_versions/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/crypto_key_versions/methods/create'
        update: []
        delete: []
    crypto_key_versions_public_key:
      id: google.cloudkms.crypto_key_versions_public_key
      name: crypto_key_versions_public_key
      title: Crypto Key Versions Public Key
      methods:
        get_public_key:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}~1cryptoKeyVersions~1{cryptoKeyVersionsId}~1publicKey/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/crypto_key_versions_public_key/methods/get_public_key'
        insert: []
        update: []
        delete: []
    crypto_keys:
      id: google.cloudkms.crypto_keys
      name: crypto_keys
      title: Crypto Keys
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.cryptoKeys
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        decrypt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:decrypt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        encrypt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:encrypt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/crypto_keys/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/crypto_keys/methods/create'
        update: []
        delete: []
    crypto_keys_iam_policies:
      id: google.cloudkms.crypto_keys_iam_policies
      name: crypto_keys_iam_policies
      title: Crypto Keys Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/crypto_keys_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    crypto_keys_primary_version:
      id: google.cloudkms.crypto_keys_primary_version
      name: crypto_keys_primary_version
      title: Crypto Keys Primary Version
      methods:
        update_primary_version:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1keyRings~1{keyRingsId}~1cryptoKeys~1{cryptoKeysId}:updatePrimaryVersion/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}:generateRandomBytes':
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/prettyPrint'
    post:
      description: Generate random bytes using the Cloud KMS randomness source in the provided location.
      operationId: cloudkms.projects.locations.generateRandomBytes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRandomBytesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateRandomBytesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: generate_random_bytes
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConfig':
    parameters: *ref_1
    patch:
      description: Updates the EkmConfig singleton resource for a given project and location.
      operationId: cloudkms.projects.locations.updateEkmConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EkmConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EkmConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: ekm_config
      x-stackQL-method: update_ekm_config
      x-stackQL-verb: exec
    get:
      description: Returns the EkmConfig singleton resource for a given project and location.
      operationId: cloudkms.projects.locations.getEkmConfig
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EkmConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_config
      x-stackQL-method: get_ekm_config
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: cloudkms.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: cloudkms.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections/{ekmConnectionsId}':
    parameters: *ref_1
    get:
      description: Returns metadata for a given EkmConnection.
      operationId: cloudkms.projects.locations.ekmConnections.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EkmConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_connections
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates an EkmConnection's metadata.
      operationId: cloudkms.projects.locations.ekmConnections.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EkmConnection'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EkmConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: ekm_connections
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections':
    parameters: *ref_1
    get:
      description: Lists EkmConnections.
      operationId: cloudkms.projects.locations.ekmConnections.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEkmConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: ekm_connections
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.ekmConnections
    post:
      description: Creates a new EkmConnection in a given Project and Location.
      operationId: cloudkms.projects.locations.ekmConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EkmConnection'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EkmConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: ekmConnectionId
          schema:
            type: string
      x-stackQL-resource: ekm_connections
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections/{ekmConnectionsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: cloudkms.projects.locations.ekmConnections.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_connections_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections/{ekmConnectionsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: cloudkms.projects.locations.ekmConnections.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_connections_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections/{ekmConnectionsId}:verifyConnectivity':
    parameters: *ref_1
    get:
      description: 'Verifies that Cloud KMS can successfully connect to the external key manager specified by an EkmConnection. If there is an error connecting to the EKM, this method returns a FAILED_PRECONDITION status containing structured information as described at https://cloud.google.com/kms/docs/reference/ekm_errors.'
      operationId: cloudkms.projects.locations.ekmConnections.verifyConnectivity
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyConnectivityResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_connections
      x-stackQL-method: verify_connectivity
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConnections/{ekmConnectionsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: cloudkms.projects.locations.ekmConnections.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: ekmConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: ekm_connections_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConfig:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: cloudkms.projects.locations.ekmConfig.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: ekm_config_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConfig:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: cloudkms.projects.locations.ekmConfig.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_config_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/ekmConfig:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: cloudkms.projects.locations.ekmConfig.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ekm_config_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings':
    parameters: *ref_1
    post:
      description: Create a new KeyRing in a given Project and Location.
      operationId: cloudkms.projects.locations.keyRings.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyRing'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyRing'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: keyRingId
          schema:
            type: string
      x-stackQL-resource: key_rings
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists KeyRings.
      operationId: cloudkms.projects.locations.keyRings.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListKeyRingsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: key_rings
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.keyRings
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: cloudkms.projects.locations.keyRings.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: key_rings_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}':
    parameters: *ref_1
    get:
      description: Returns metadata for a given KeyRing.
      operationId: cloudkms.projects.locations.keyRings.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyRing'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: key_rings
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: cloudkms.projects.locations.keyRings.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: key_rings_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: cloudkms.projects.locations.keyRings.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
      x-stackQL-resource: key_rings_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: cloudkms.projects.locations.keyRings.importJobs.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: importJobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: import_jobs_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: cloudkms.projects.locations.keyRings.importJobs.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: importJobsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: import_jobs_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs':
    parameters: *ref_1
    post:
      description: Create a new ImportJob within a KeyRing. ImportJob.import_method is required.
      operationId: cloudkms.projects.locations.keyRings.importJobs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJob'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: query
          name: importJobId
          schema:
            type: string
      x-stackQL-resource: import_jobs
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists ImportJobs.
      operationId: cloudkms.projects.locations.keyRings.importJobs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImportJobsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: import_jobs
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.importJobs
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}':
    parameters: *ref_1
    get:
      description: Returns metadata for a given ImportJob.
      operationId: cloudkms.projects.locations.keyRings.importJobs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: importJobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: import_jobs
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: cloudkms.projects.locations.keyRings.importJobs.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: importJobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: import_jobs_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:rawEncrypt':
    parameters: *ref_1
    post:
      description: Encrypts data using portable cryptographic primitives. Most users should choose Encrypt and Decrypt rather than their raw counterparts. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.rawEncrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawEncryptRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawEncryptResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: raw_encrypt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions':
    parameters: *ref_1
    get:
      description: Lists CryptoKeyVersions.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCryptoKeyVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.cryptoKeyVersions
    post:
      description: 'Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoKeyVersion'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:macVerify':
    parameters: *ref_1
    post:
      description: 'Verifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacVerifyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacVerifyResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: mac_verify
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions:import':
    parameters: *ref_1
    post:
      description: 'Import wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCryptoKeyVersionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: import
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}':
    parameters: *ref_1
    patch:
      description: Update a CryptoKeyVersion's metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoKeyVersion'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Returns metadata for a given CryptoKeyVersion.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:destroy':
    parameters: *ref_1
    post:
      description: 'Schedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroyCryptoKeyVersionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: destroy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:rawDecrypt':
    parameters: *ref_1
    post:
      description: Decrypts data that was originally encrypted using a raw cryptographic mechanism. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.rawDecrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawDecryptRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawDecryptResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: raw_decrypt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:asymmetricDecrypt':
    parameters: *ref_1
    post:
      description: Decrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricDecrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsymmetricDecryptRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsymmetricDecryptResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: asymmetric_decrypt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}/publicKey':
    parameters: *ref_1
    get:
      description: Returns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.getPublicKey
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions_public_key
      x-stackQL-method: get_public_key
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:asymmetricSign':
    parameters: *ref_1
    post:
      description: 'Signs data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricSign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsymmetricSignRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsymmetricSignResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: asymmetric_sign
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:restore':
    parameters: *ref_1
    post:
      description: 'Restore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreCryptoKeyVersionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKeyVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: restore
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:macSign':
    parameters: *ref_1
    post:
      description: 'Signs data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macSign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacSignRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MacSignResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeyVersionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_key_versions
      x-stackQL-method: mac_sign
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}':
    parameters: *ref_1
    get:
      description: 'Returns metadata for a given CryptoKey, as well as its primary CryptoKeyVersion.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKey'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: get
      x-stackQL-verb: exec
    patch:
      description: Update a CryptoKey.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoKey'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKey'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: crypto_keys_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys':
    parameters: *ref_1
    get:
      description: Lists CryptoKeys.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCryptoKeysResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: versionView
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.cryptoKeys
    post:
      description: Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoKey'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKey'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: query
          name: skipInitialVersionCreation
          schema:
            type: boolean
        - in: query
          name: cryptoKeyId
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:decrypt':
    parameters: *ref_1
    post:
      description: Decrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.decrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecryptRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: decrypt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:encrypt':
    parameters: *ref_1
    post:
      description: 'Encrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.encrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys
      x-stackQL-method: encrypt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:updatePrimaryVersion':
    parameters: *ref_1
    post:
      description: Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCryptoKeyPrimaryVersionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoKey'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys_primary_version
      x-stackQL-method: update_primary_version
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloudkms'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloudkms'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: keyRingsId
          required: true
          schema:
            type: string
        - in: path
          name: cryptoKeysId
          required: true
          schema:
            type: string
      x-stackQL-resource: crypto_keys_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
