openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Google Cloud Data Catalog API
  description: 'A fully managed and highly scalable data discovery and metadata management service. '
  version: v1
  x-discovery-doc-revision: '20221203'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://cloud.google.com/data-catalog/docs/
servers:
  - url: https://datacatalog.googleapis.com
components:
  schemas:
    GetPolicyOptions:
      description: Encapsulates settings provided to GetIamPolicy.
      properties:
        requestedPolicyVersion:
          format: int32
          type: integer
          description: Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
      type: object
      id: GetPolicyOptions
    Binding:
      type: object
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      properties:
        condition:
          description: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
        members:
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. '
          type: array
          items:
            type: string
        role:
          description: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
    GoogleCloudDatacatalogV1EntryGroup:
      properties:
        name:
          description: 'The resource name of the entry group in URL format. Note: The entry group itself and its child resources might not be stored in the location specified in its name.'
          type: string
        displayName:
          type: string
          description: A short name to identify the entry group, for example, "analytics data - jan 2011". Default value is an empty string.
        description:
          type: string
          description: Entry group description. Can consist of several sentences or paragraphs that describe the entry group contents. Default value is an empty string.
        dataCatalogTimestamps:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SystemTimestamps'
          readOnly: true
          description: Output only. Timestamps of the entry group. Default value is empty.
      id: GoogleCloudDatacatalogV1EntryGroup
      description: Entry group metadata. An `EntryGroup` resource represents a logical grouping of zero or more Data Catalog Entry resources.
      type: object
    GoogleCloudDatacatalogV1ImportTaxonomiesRequest:
      type: object
      id: GoogleCloudDatacatalogV1ImportTaxonomiesRequest
      description: Request message for ImportTaxonomies.
      properties:
        inlineSource:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1InlineSource'
          description: Inline source taxonomy to import.
        crossRegionalSource:
          description: Cross-regional source taxonomy to import.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1CrossRegionalSource'
    GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest:
      id: GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest
      properties:
        newTagTemplateFieldId:
          description: Required. The new ID of this tag template field. For example, `my_new_field`.
          type: string
      description: Request message for RenameTagTemplateField.
      type: object
    GoogleCloudDatacatalogV1Tag:
      type: object
      properties:
        column:
          description: 'Resources like entry can have schemas associated with them. This scope allows you to attach tags to an individual column based on that schema. To attach a tag to a nested column, separate column names with a dot (`.`). Example: `column.nested_column`.'
          type: string
        templateDisplayName:
          readOnly: true
          description: Output only. The display name of the tag template.
          type: string
        template:
          type: string
          description: 'Required. The resource name of the tag template this tag uses. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE_ID}` This field cannot be modified after creation.'
        name:
          type: string
          description: 'The resource name of the tag in URL format where tag ID is a system-generated identifier. Note: The tag itself might not be stored in the location specified in its name.'
        fields:
          description: Required. Maps the ID of a tag field to its value and additional information about that field. Tag template defines valid field IDs. A tag must have at least 1 field and at most 500 fields.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagField'
      description: Tags contain custom metadata and are attached to Data Catalog resources. Tags conform with the specification of their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags.
      id: GoogleCloudDatacatalogV1Tag
    GoogleCloudDatacatalogV1SearchCatalogResponse:
      description: Response message for SearchCatalog.
      properties:
        unreachable:
          type: array
          description: Unreachable locations. Search results don't include data from those locations. To get additional information on an error, repeat the search request and restrict it to specific locations by setting the `SearchCatalogRequest.scope.restricted_locations` parameter.
          items:
            type: string
        results:
          description: Search results.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1SearchCatalogResult'
        nextPageToken:
          type: string
          description: Pagination token that can be used in subsequent calls to retrieve the next page of results.
      id: GoogleCloudDatacatalogV1SearchCatalogResponse
      type: object
    Empty:
      properties: {}
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
    GoogleCloudDatacatalogV1TagTemplateField:
      properties:
        name:
          type: string
          description: 'Output only. The resource name of the tag template field in URL format. Example: `projects/{PROJECT_ID}/locations/{LOCATION}/tagTemplates/{TAG_TEMPLATE}/fields/{FIELD}` Note: The tag template field itself might not be stored in the location specified in its name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 64 characters.'
          readOnly: true
        description:
          description: The description for this field. Defaults to an empty string.
          type: string
        type:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1FieldType'
          description: Required. The type of value this tag field can contain.
        displayName:
          description: The display name for this field. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
          type: string
        isRequired:
          description: If true, this field is required. Defaults to false.
          type: boolean
        order:
          format: int32
          description: The order of this field with respect to other fields in this tag template. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order and field orders within a tag don't have to be sequential.
          type: integer
      description: The template for an individual field within a tag template.
      id: GoogleCloudDatacatalogV1TagTemplateField
      type: object
    GoogleCloudDatacatalogV1UnstarEntryResponse:
      type: object
      description: Response message for UnstarEntry. Empty for now
      id: GoogleCloudDatacatalogV1UnstarEntryResponse
      properties: {}
    GoogleCloudDatacatalogV1SearchCatalogRequest:
      type: object
      description: Request message for SearchCatalog.
      id: GoogleCloudDatacatalogV1SearchCatalogRequest
      properties:
        pageToken:
          description: Optional. Pagination token that, if specified, returns the next page of search results. If empty, returns the first page. This token is returned in the SearchCatalogResponse.next_page_token field of the response to a previous SearchCatalogRequest call.
          type: string
        scope:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SearchCatalogRequestScope'
          description: Required. The scope of this search request. The `scope` is invalid if `include_org_ids`, `include_project_ids` are empty AND `include_gcp_public_datasets` is set to `false`. In this case, the request returns an error.
        query:
          type: string
          description: 'Optional. The query string with a minimum of 3 characters and specific syntax. For more information, see [Data Catalog search syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference). An empty query string returns all data assets (in the specified scope) that you have access to. A query string can be a simple `xyz` or qualified by predicates: * `name:x` * `column:y` * `description:z`'
        orderBy:
          type: string
          description: 'Specifies the order of results. Currently supported case-sensitive values are: * `relevance` that can only be descending * `last_modified_timestamp [asc|desc]` with descending (`desc`) as default * `default` that can only be descending If this parameter is omitted, it defaults to the descending `relevance`.'
        pageSize:
          format: int32
          type: integer
          description: Number of results to return in a single search page. Can't be negative or 0, defaults to 10 in this case. The maximum number is 1000. If exceeded, throws an "invalid argument" exception.
    GoogleCloudDatacatalogV1UsageSignal:
      description: 'The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.'
      id: GoogleCloudDatacatalogV1UsageSignal
      properties:
        updateTime:
          description: The end timestamp of the duration of usage statistics.
          type: string
          format: google-datetime
        favoriteCount:
          type: string
          format: int64
          description: Favorite count in the source system.
        commonUsageWithinTimeRange:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1CommonUsageStats'
          description: Common usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D", "Lifetime"}`.
        usageWithinTimeRange:
          additionalProperties:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1UsageStats'
          readOnly: true
          type: object
          description: Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{"24H", "7D", "30D"}`.
      type: object
    GoogleCloudDatacatalogV1ListEntriesResponse:
      type: object
      description: Response message for ListEntries.
      id: GoogleCloudDatacatalogV1ListEntriesResponse
      properties:
        entries:
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
          type: array
          description: Entry details.
        nextPageToken:
          type: string
          description: Pagination token of the next results page. Empty if there are no more items in results.
    GoogleCloudDatacatalogV1GcsFilesetSpec:
      properties:
        filePatterns:
          items:
            type: string
          description: 'Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`'
          type: array
        sampleGcsFileSpecs:
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1GcsFileSpec'
          type: array
          description: Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here.
          readOnly: true
      id: GoogleCloudDatacatalogV1GcsFilesetSpec
      description: Describes a Cloud Storage fileset entry.
      type: object
    GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema:
      properties: {}
      description: Marks a Parquet-encoded data source.
      type: object
      id: GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema
    GoogleCloudDatacatalogV1StarEntryResponse:
      properties: {}
      description: Response message for StarEntry. Empty for now
      type: object
      id: GoogleCloudDatacatalogV1StarEntryResponse
    ListOperationsResponse:
      id: ListOperationsResponse
      type: object
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          description: A list of operations that matches the specified filter in the request.
        nextPageToken:
          description: The standard List next-page token.
          type: string
    GoogleCloudDatacatalogV1DataplexTableSpec:
      properties:
        externalTables:
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataplexExternalTable'
          description: List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.
        dataplexSpec:
          description: Common Dataplex fields.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataplexSpec'
        userManaged:
          type: boolean
          description: Indicates if the table schema is managed by the user or not.
      description: Entry specification for a Dataplex table.
      type: object
      id: GoogleCloudDatacatalogV1DataplexTableSpec
    GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec:
      description: Column info specific to Looker System.
      type: object
      id: GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec
      properties:
        type:
          enumDescriptions:
            - Unspecified.
            - Dimension.
            - Dimension group - parent for Dimension.
            - Filter.
            - Measure.
            - Parameter.
          description: Looker specific column type of this column.
          type: string
          enum:
            - LOOKER_COLUMN_TYPE_UNSPECIFIED
            - DIMENSION
            - DIMENSION_GROUP
            - FILTER
            - MEASURE
            - PAREMETER
    GoogleCloudDatacatalogV1FieldType:
      properties:
        enumType:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1FieldTypeEnumType'
          description: An enum type.
        primitiveType:
          description: Primitive types, such as string, boolean, etc.
          enum:
            - PRIMITIVE_TYPE_UNSPECIFIED
            - DOUBLE
            - STRING
            - BOOL
            - TIMESTAMP
            - RICHTEXT
          enumDescriptions:
            - The default invalid value for a type.
            - A double precision number.
            - An UTF-8 string.
            - A boolean value.
            - A timestamp.
            - A Richtext description.
          type: string
      type: object
      id: GoogleCloudDatacatalogV1FieldType
    GoogleCloudDatacatalogV1ColumnSchema:
      description: A column within a schema. Columns can be nested inside other columns.
      properties:
        ordinalPosition:
          type: integer
          format: int32
          description: Optional. Ordinal position
        lookerColumnSpec:
          description: Looker specific column info of this column.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1ColumnSchemaLookerColumnSpec'
        mode:
          description: Optional. A column's mode indicates whether values in this column are required, nullable, or repeated. Only `NULLABLE`, `REQUIRED`, and `REPEATED` values are supported. Default mode is `NULLABLE`.
          type: string
        type:
          description: Required. Type of the column. Must be a UTF-8 string with the maximum size of 128 bytes.
          type: string
        subcolumns:
          description: Optional. Schema of sub-columns. A column can have zero or more sub-columns.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1ColumnSchema'
        defaultValue:
          type: string
          description: Optional. Default value for the column.
        highestIndexingType:
          enum:
            - INDEXING_TYPE_UNSPECIFIED
            - INDEXING_TYPE_NONE
            - INDEXING_TYPE_NON_UNIQUE
            - INDEXING_TYPE_UNIQUE
            - INDEXING_TYPE_PRIMARY_KEY
          description: Optional. Most important inclusion of this column.
          type: string
          enumDescriptions:
            - Unspecified.
            - Column not a part of an index.
            - Column Part of non unique index.
            - Column part of unique index.
            - Column part of the primary key.
        gcRule:
          description: Optional. Garbage collection policy for the column or column family. Applies to systems like Cloud Bigtable.
          type: string
        description:
          description: Optional. Description of the column. Default value is an empty string. The description must be a UTF-8 string with the maximum size of 2000 bytes.
          type: string
        column:
          description: Required. Name of the column. Must be a UTF-8 string without dots (.). The maximum size is 64 bytes.
          type: string
      id: GoogleCloudDatacatalogV1ColumnSchema
      type: object
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          description: The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
      description: Request message for `TestIamPermissions` method.
    GoogleCloudDatacatalogV1SearchCatalogRequestScope:
      id: GoogleCloudDatacatalogV1SearchCatalogRequestScope
      description: The criteria that select the subspace used for query matching.
      type: object
      properties:
        includeProjectIds:
          type: array
          items:
            type: string
          description: The list of project IDs to search within. For more information on the distinction between project names, IDs, and numbers, see [Projects](/docs/overview/#projects).
        includePublicTagTemplates:
          description: Optional. This field is deprecated. The search mechanism for public and private tag templates is the same.
          type: boolean
        includeOrgIds:
          type: array
          items:
            type: string
          description: The list of organization IDs to search within. To find your organization ID, follow the steps from [Creating and managing organizations] (/resource-manager/docs/creating-managing-organization).
        restrictedLocations:
          items:
            type: string
          description: Optional. The list of locations to search within. If empty, all locations are searched. Returns an error if any location in the list isn't one of the [Supported regions](https://cloud.google.com/data-catalog/docs/concepts/regions#supported_regions). If a location is unreachable, its name is returned in the `SearchCatalogResponse.unreachable` field. To get additional information on the error, repeat the search request and set the location name as the value of this parameter.
          type: array
        includeGcpPublicDatasets:
          description: If `true`, include Google Cloud Platform (GCP) public datasets in search results. By default, they are excluded. See [Google Cloud Public Datasets](/public-datasets) for more information.
          type: boolean
        starredOnly:
          type: boolean
          description: Optional. If `true`, search only among starred entries. By default, all results are returned, starred or not.
    GoogleCloudDatacatalogV1ImportEntriesRequest:
      id: GoogleCloudDatacatalogV1ImportEntriesRequest
      properties:
        gcsBucketPath:
          description: Path to a Cloud Storage bucket that contains a dump ready for ingestion.
          type: string
      description: Request message for ImportEntries method.
      type: object
    GoogleCloudDatacatalogV1ContactsPerson:
      type: object
      description: A contact person for the entry.
      properties:
        designation:
          description: Designation of the person, for example, Data Steward.
          type: string
        email:
          type: string
          description: Email of the person in the format of `john.doe@xyz`, ``, or `John Doe`.
      id: GoogleCloudDatacatalogV1ContactsPerson
    GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest:
      type: object
      properties:
        newEnumValueDisplayName:
          type: string
          description: Required. The new display name of the enum value. For example, `my_new_enum_value`.
      id: GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest
      description: Request message for RenameTagTemplateFieldEnumValue.
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        metadata:
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        done:
          type: boolean
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
      id: Operation
      type: object
    GoogleCloudDatacatalogV1ImportEntriesResponse:
      description: Response message for long-running operation returned by the ImportEntries.
      type: object
      properties:
        upsertedEntriesCount:
          format: int64
          description: Cumulative number of entries created and entries updated as a result of import operation.
          type: string
        deletedEntriesCount:
          type: string
          description: Number of entries deleted as a result of import operation.
          format: int64
      id: GoogleCloudDatacatalogV1ImportEntriesResponse
    GoogleCloudDatacatalogV1FilesetSpec:
      id: GoogleCloudDatacatalogV1FilesetSpec
      type: object
      properties:
        dataplexFileset:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataplexFilesetSpec'
          description: Fields specific to a Dataplex fileset and present only in the Dataplex fileset entries.
      description: Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.
    GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema:
      type: object
      description: Schema in protocol buffer format.
      properties:
        text:
          type: string
          description: Protocol buffer source of the schema.
      id: GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema
    GoogleCloudDatacatalogV1SearchCatalogResult:
      id: GoogleCloudDatacatalogV1SearchCatalogResult
      description: Result in the response to a search request. Each result captures details of one entry that matches the search.
      type: object
      properties:
        linkedResource:
          description: 'The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`'
          type: string
        searchResultSubtype:
          description: 'Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.'
          type: string
        searchResultType:
          enumDescriptions:
            - Default unknown type.
            - An Entry.
            - A TagTemplate.
            - An EntryGroup.
          description: Type of the search result. You can use this field to determine which get method to call to fetch the full resource.
          type: string
          enum:
            - SEARCH_RESULT_TYPE_UNSPECIFIED
            - ENTRY
            - TAG_TEMPLATE
            - ENTRY_GROUP
        description:
          type: string
          description: Entry description that can consist of several sentences or paragraphs that describe entry contents.
        integratedSystem:
          type: string
          description: Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore.
          enum:
            - INTEGRATED_SYSTEM_UNSPECIFIED
            - BIGQUERY
            - CLOUD_PUBSUB
            - DATAPROC_METASTORE
            - DATAPLEX
            - CLOUD_SQL
            - LOOKER
          readOnly: true
          enumDescriptions:
            - Default unknown system.
            - BigQuery.
            - Cloud Pub/Sub.
            - Dataproc Metastore.
            - Dataplex.
            - Cloud Sql
            - Looker
        displayName:
          type: string
          description: The display name of the result.
        relativeResourceName:
          type: string
          description: 'The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`'
        fullyQualifiedName:
          description: 'Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`'
          type: string
        userSpecifiedSystem:
          type: string
          description: Custom source system that you can manually integrate Data Catalog with.
        modifyTime:
          format: google-datetime
          description: The last modification timestamp of the entry in the source system.
          type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      type: object
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          type: array
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
    GetIamPolicyRequest:
      properties:
        options:
          $ref: '#/components/schemas/GetPolicyOptions'
          description: 'OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.'
      id: GetIamPolicyRequest
      description: Request message for `GetIamPolicy` method.
      type: object
    GoogleCloudDatacatalogV1SerializedTaxonomy:
      properties:
        policyTags:
          description: Top level policy tags associated with the taxonomy, if any.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1SerializedPolicyTag'
        displayName:
          description: Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8.
          type: string
        activatedPolicyTypes:
          items:
            enumDescriptions:
              - Unspecified policy type.
              - Fine-grained access control policy that enables access control on tagged sub-resources.
            type: string
            enum:
              - POLICY_TYPE_UNSPECIFIED
              - FINE_GRAINED_ACCESS_CONTROL
          type: array
          description: A list of policy types that are activated per taxonomy.
        description:
          type: string
          description: Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.
      id: GoogleCloudDatacatalogV1SerializedTaxonomy
      type: object
      description: A nested protocol buffer that represents a taxonomy and the hierarchy of its policy tags. Used for taxonomy replacement, import, and export.
    GoogleCloudDatacatalogV1DataSource:
      description: Physical location of an entry.
      properties:
        sourceEntry:
          description: Output only. Data Catalog entry name, if applicable.
          readOnly: true
          type: string
        service:
          enum:
            - SERVICE_UNSPECIFIED
            - CLOUD_STORAGE
            - BIGQUERY
          description: Service that physically stores the data.
          type: string
          enumDescriptions:
            - Default unknown service.
            - Google Cloud Storage service.
            - BigQuery service.
        resource:
          description: 'Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`'
          type: string
        storageProperties:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1StorageProperties'
          description: Detailed properties of the underlying storage.
      type: object
      id: GoogleCloudDatacatalogV1DataSource
    GoogleCloudDatacatalogV1FieldTypeEnumType:
      id: GoogleCloudDatacatalogV1FieldTypeEnumType
      type: object
      properties:
        allowedValues:
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue'
          type: array
          description: The set of allowed values for this enum. This set must not be empty and can include up to 100 allowed values. The display names of the values in this set must not be empty and must be case-insensitively unique within this set. The order of items in this set is preserved. This field can be used to create, remove, and reorder enum values. To rename enum values, use the `RenameTagTemplateFieldEnumValue` method.
    GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema:
      description: Marks an ORC-encoded data source.
      properties: {}
      type: object
      id: GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema
    GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec:
      type: object
      properties:
        sqlQuery:
          description: SQL query used to generate this view.
          type: string
        viewType:
          type: string
          enum:
            - VIEW_TYPE_UNSPECIFIED
            - STANDARD_VIEW
            - MATERIALIZED_VIEW
          enumDescriptions:
            - Default unknown view type.
            - Standard view.
            - Materialized view.
          description: Type of this view.
        baseTable:
          description: Name of a singular table this view reflects one to one.
          type: string
      id: GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec
      description: Specification that applies to database view.
    Policy:
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        version:
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          type: integer
        bindings:
          description: Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        etag:
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
      type: object
    GoogleCloudDatacatalogV1ListTagsResponse:
      id: GoogleCloudDatacatalogV1ListTagsResponse
      type: object
      description: Response message for ListTags.
      properties:
        nextPageToken:
          type: string
          description: Pagination token of the next results page. Empty if there are no more items in results.
        tags:
          description: Tag details.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
    GoogleCloudDatacatalogV1ListTaxonomiesResponse:
      description: Response message for ListTaxonomies.
      type: object
      properties:
        taxonomies:
          description: Taxonomies that the project contains.
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
          type: array
        nextPageToken:
          type: string
          description: Pagination token of the next results page. Empty if there are no more results in the list.
      id: GoogleCloudDatacatalogV1ListTaxonomiesResponse
    GoogleCloudDatacatalogV1UnstarEntryRequest:
      description: Request message for UnstarEntry.
      id: GoogleCloudDatacatalogV1UnstarEntryRequest
      properties: {}
      type: object
    GoogleCloudDatacatalogV1GcsFileSpec:
      description: Specification of a single file in Cloud Storage.
      id: GoogleCloudDatacatalogV1GcsFileSpec
      properties:
        gcsTimestamps:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SystemTimestamps'
          readOnly: true
          description: Output only. Creation, modification, and expiration timestamps of a Cloud Storage file.
        sizeBytes:
          type: string
          readOnly: true
          format: int64
          description: Output only. File size in bytes.
        filePath:
          description: 'Required. Full file path. Example: `gs://bucket_name/a/b.txt`.'
          type: string
      type: object
    SetIamPolicyRequest:
      type: object
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
    GoogleCloudDatacatalogV1UsageStats:
      properties:
        totalExecutionTimeForCompletionsMillis:
          type: number
          format: float
          description: Total time spent only on successful uses, in milliseconds.
        totalCompletions:
          type: number
          format: float
          description: The number of successful uses of the underlying entry.
        totalFailures:
          type: number
          format: float
          description: The number of failed attempts to use the underlying entry.
        totalCancellations:
          format: float
          description: The number of cancelled attempts to use the underlying entry.
          type: number
      id: GoogleCloudDatacatalogV1UsageStats
      description: 'Detailed statistics on the entry''s usage. Usage statistics have the following limitations: - Only BigQuery tables have them. - They only include BigQuery query jobs. - They might be underestimated because wildcard table references are not yet counted. For more information, see [Querying multiple tables using a wildcard table] (https://cloud.google.com/bigquery/docs/querying-wildcard-tables)'
      type: object
    GoogleCloudDatacatalogV1ImportTaxonomiesResponse:
      id: GoogleCloudDatacatalogV1ImportTaxonomiesResponse
      description: Response message for ImportTaxonomies.
      properties:
        taxonomies:
          description: Imported taxonomies.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      type: object
    GoogleCloudDatacatalogV1RoutineSpec:
      description: Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
      type: object
      id: GoogleCloudDatacatalogV1RoutineSpec
      properties:
        routineArguments:
          description: Arguments of the routine.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1RoutineSpecArgument'
        returnType:
          type: string
          description: Return type of the argument. The exact value depends on the source system and the language.
        routineType:
          type: string
          description: The type of the routine.
          enum:
            - ROUTINE_TYPE_UNSPECIFIED
            - SCALAR_FUNCTION
            - PROCEDURE
          enumDescriptions:
            - Unspecified type.
            - Non-builtin permanent scalar function.
            - Stored procedure.
        language:
          description: 'The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`'
          type: string
        bigqueryRoutineSpec:
          description: Fields specific for BigQuery routines.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1BigQueryRoutineSpec'
        definitionBody:
          description: The body of the routine.
          type: string
    GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema:
      type: object
      id: GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema
      description: Marks a CSV-encoded data source.
      properties: {}
    GoogleCloudDatacatalogV1BigQueryConnectionSpec:
      description: Specification for the BigQuery connection.
      id: GoogleCloudDatacatalogV1BigQueryConnectionSpec
      properties:
        cloudSql:
          description: Specification for the BigQuery connection to a Cloud SQL instance.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec'
        connectionType:
          enum:
            - CONNECTION_TYPE_UNSPECIFIED
            - CLOUD_SQL
          enumDescriptions:
            - Unspecified type.
            - Cloud SQL connection.
          description: The type of the BigQuery connection.
          type: string
        hasCredential:
          description: True if there are credentials attached to the BigQuery connection; false otherwise.
          type: boolean
      type: object
    Status:
      properties:
        code:
          format: int32
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        details:
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
      type: object
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    GoogleCloudDatacatalogV1EntryOverview:
      type: object
      properties:
        overview:
          type: string
          description: Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
      description: Entry overview fields for rich text descriptions of entries.
      id: GoogleCloudDatacatalogV1EntryOverview
    GoogleCloudDatacatalogV1ViewSpec:
      type: object
      id: GoogleCloudDatacatalogV1ViewSpec
      description: Table view specification.
      properties:
        viewQuery:
          readOnly: true
          description: Output only. The query that defines the table view.
          type: string
    GoogleCloudDatacatalogV1ListPolicyTagsResponse:
      properties:
        nextPageToken:
          type: string
          description: Pagination token of the next results page. Empty if there are no more results in the list.
        policyTags:
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
          type: array
          description: The policy tags that belong to the taxonomy.
      id: GoogleCloudDatacatalogV1ListPolicyTagsResponse
      description: Response message for ListPolicyTags.
      type: object
    GoogleCloudDatacatalogV1DataplexFilesetSpec:
      type: object
      properties:
        dataplexSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataplexSpec'
          description: Common Dataplex fields.
      id: GoogleCloudDatacatalogV1DataplexFilesetSpec
      description: Entry specyfication for a Dataplex fileset.
    GoogleCloudDatacatalogV1ModifyEntryOverviewRequest:
      type: object
      properties:
        entryOverview:
          description: Required. The new value for the Entry Overview.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryOverview'
      description: Request message for ModifyEntryOverview.
      id: GoogleCloudDatacatalogV1ModifyEntryOverviewRequest
    GoogleCloudDatacatalogV1Entry:
      type: object
      id: GoogleCloudDatacatalogV1Entry
      properties:
        usageSignal:
          description: Resource usage statistics.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1UsageSignal'
        description:
          description: Entry description that can consist of several sentences or paragraphs that describe entry contents. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). The maximum size is 2000 bytes when encoded in UTF-8. Default value is an empty string.
          type: string
        labels:
          additionalProperties:
            type: string
          description: Cloud labels attached to the entry. In Data Catalog, you can create and modify labels attached only to custom entries. Synced entries have unmodifiable labels that come from the source system.
          type: object
        databaseTableSpec:
          description: Specification that applies to a table resource. Valid only for entries with the `TABLE` or `EXPLORE` type.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DatabaseTableSpec'
        dataSource:
          readOnly: true
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataSource'
          description: Output only. Physical location of the entry.
        personalDetails:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PersonalDetails'
          description: Output only. Additional information related to the entry. Private to the current user.
          readOnly: true
        fullyQualifiedName:
          description: 'Fully qualified name (FQN) of the resource. Set automatically for entries representing resources from synced systems. Settable only during creation and read-only afterwards. Can be used for search and lookup of the entries. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:{PROJECT_ID}.{LOCATION_ID}.{INSTANCE_ID}.{DATABASE_ID}.{TABLE_ID}`'
          type: string
        routineSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1RoutineSpec'
          description: Specification that applies to a user-defined function or procedure. Valid only for entries with the `ROUTINE` type.
        dataSourceConnectionSpec:
          description: Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataSourceConnectionSpec'
        userSpecifiedType:
          type: string
          description: 'Custom entry type that doesn''t match any of the values allowed for input and listed in the `EntryType` enum. When creating an entry, first check the type values in the enum. If there are no appropriate types for the new entry, provide a custom value, for example, `my_special_type`. The `user_specified_type` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.'
        lookerSystemSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1LookerSystemSpec'
          description: Specification that applies to Looker sysstem. Only settable when `user_specified_system` is equal to `LOOKER`
        filesetSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1FilesetSpec'
          description: Specification that applies to a fileset resource. Valid only for entries with the `FILESET` type.
        businessContext:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1BusinessContext'
          description: Business Context of the entry. Not supported for BigQuery datasets
        sourceSystemTimestamps:
          description: Timestamps from the underlying resource, not from the Data Catalog entry. Output only when the entry has a system listed in the `IntegratedSystem` enum. For entries with `user_specified_system`, this field is optional and defaults to an empty timestamp.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SystemTimestamps'
        integratedSystem:
          readOnly: true
          description: Output only. Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.
          enum:
            - INTEGRATED_SYSTEM_UNSPECIFIED
            - BIGQUERY
            - CLOUD_PUBSUB
            - DATAPROC_METASTORE
            - DATAPLEX
            - CLOUD_SQL
            - LOOKER
          type: string
          enumDescriptions:
            - Default unknown system.
            - BigQuery.
            - Cloud Pub/Sub.
            - Dataproc Metastore.
            - Dataplex.
            - Cloud Sql
            - Looker
        name:
          type: string
          readOnly: true
          description: 'Output only. The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name.'
        gcsFilesetSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1GcsFilesetSpec'
          description: Specification that applies to a Cloud Storage fileset. Valid only for entries with the `FILESET` type.
        bigqueryTableSpec:
          description: Output only. Specification that applies to a BigQuery table. Valid only for entries with the `TABLE` type.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1BigQueryTableSpec'
          readOnly: true
        userSpecifiedSystem:
          description: 'Indicates the entry''s source system that Data Catalog doesn''t automatically integrate with. The `user_specified_system` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.'
          type: string
        bigqueryDateShardedSpec:
          readOnly: true
          description: Output only. Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1BigQueryDateShardedSpec'
        type:
          type: string
          enumDescriptions:
            - Default unknown type.
            - The entry type that has a GoogleSQL schema, including logical views.
            - Output only. The type of models. For more information, see [Supported models in BigQuery ML] (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in).
            - An entry type for streaming entries. For example, a Pub/Sub topic.
            - An entry type for a set of files or objects. For example, a Cloud Storage fileset.
            - A group of servers that work together. For example, a Kafka cluster.
            - A database.
            - Output only. Connection to a data source. For example, a BigQuery connection.
            - Output only. Routine, for example, a BigQuery routine.
            - A Dataplex lake.
            - A Dataplex zone.
            - A service, for example, a Dataproc Metastore service.
            - Schema within a relational database.
            - A Dashboard, for example from Looker.
            - A Looker Explore. For more information, see [Looker Explore API] (https://developers.looker.com/api/explorer/4.0/methods/LookmlModel/lookml_model_explore).
            - A Looker Look. For more information, see [Looker Look API] (https://developers.looker.com/api/explorer/4.0/methods/Look).
          enum:
            - ENTRY_TYPE_UNSPECIFIED
            - TABLE
            - MODEL
            - DATA_STREAM
            - FILESET
            - CLUSTER
            - DATABASE
            - DATA_SOURCE_CONNECTION
            - ROUTINE
            - LAKE
            - ZONE
            - SERVICE
            - DATABASE_SCHEMA
            - DASHBOARD
            - EXPLORE
            - LOOK
          description: The type of the entry. Only used for entries with types listed in the `EntryType` enum. Currently, only `FILESET` enum value is allowed. All other entries created in Data Catalog must use the `user_specified_type`.
        sqlDatabaseSystemSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SqlDatabaseSystemSpec'
          description: Specification that applies to a relational database system. Only settable when `user_specified_system` is equal to `SQL_DATABASE`
        linkedResource:
          type: string
          description: 'The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` Output only when the entry is one of the types in the `EntryType` enum. For entries with a `user_specified_type`, this field is optional and defaults to an empty string. The resource string must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), periods (.), colons (:), slashes (/), dashes (-), and hashes (#). The maximum size is 200 bytes when encoded in UTF-8.'
        schema:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1Schema'
          description: Schema of the entry. An entry might not have any schema attached to it.
        displayName:
          description: Display name of an entry. The maximum size is 500 bytes when encoded in UTF-8. Default value is an empty string.
          type: string
      description: Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the `linked_resource` field in the entry resource to refer to the original resource ID of the source system. An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a Tag.
    GoogleCloudDatacatalogV1TableSpec:
      id: GoogleCloudDatacatalogV1TableSpec
      type: object
      description: Normal BigQuery table specification.
      properties:
        groupedEntry:
          type: string
          description: 'Output only. If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty.'
          readOnly: true
    GoogleCloudDatacatalogV1ListEntryGroupsResponse:
      id: GoogleCloudDatacatalogV1ListEntryGroupsResponse
      description: Response message for ListEntryGroups.
      properties:
        nextPageToken:
          description: Pagination token to specify in the next call to retrieve the next page of results. Empty if there are no more items.
          type: string
        entryGroups:
          description: Entry group details.
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
          type: array
      type: object
    GoogleCloudDatacatalogV1DataplexSpec:
      id: GoogleCloudDatacatalogV1DataplexSpec
      properties:
        compressionFormat:
          description: Compression format of the data, e.g., zip, gzip etc.
          type: string
        dataFormat:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchema'
          description: Format of the data.
        asset:
          description: Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.
          type: string
        projectId:
          description: Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset.
          type: string
      description: Common Dataplex fields.
      type: object
    GoogleCloudDatacatalogV1ImportEntriesMetadata:
      type: object
      id: GoogleCloudDatacatalogV1ImportEntriesMetadata
      properties:
        state:
          enumDescriptions:
            - Default value. This value is unused.
            - The dump with entries has been queued for import.
            - The import of entries is in progress.
            - The import of entries has been finished.
            - The import of entries has been abandoned in favor of a newer request.
          type: string
          description: State of the import operation.
          enum:
            - IMPORT_STATE_UNSPECIFIED
            - IMPORT_QUEUED
            - IMPORT_IN_PROGRESS
            - IMPORT_DONE
            - IMPORT_OBSOLETE
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Status'
          description: Partial errors that are encountered during the ImportEntries operation. There is no guarantee that all the encountered errors are reported. However, if no errors are reported, it means that no errors were encountered.
      description: Metadata message for long-running operation returned by the ImportEntries.
    GoogleCloudDatacatalogV1LookerSystemSpec:
      id: GoogleCloudDatacatalogV1LookerSystemSpec
      type: object
      description: Specification that applies to entries that are part `LOOKER` system (user_specified_type)
      properties:
        parentInstanceDisplayName:
          type: string
          description: Name of the parent Looker Instance. Empty if it does not exist.
        parentInstanceId:
          description: 'ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`'
          type: string
        parentModelDisplayName:
          type: string
          description: Name of the parent Model. Empty if it does not exist.
        parentViewDisplayName:
          type: string
          description: Name of the parent View. Empty if it does not exist.
        parentModelId:
          type: string
          description: ID of the parent Model. Empty if it does not exist.
        parentViewId:
          description: ID of the parent View. Empty if it does not exist.
          type: string
    GoogleCloudDatacatalogV1RoutineSpecArgument:
      description: Input or output argument of a function or stored procedure.
      id: GoogleCloudDatacatalogV1RoutineSpecArgument
      type: object
      properties:
        mode:
          description: Specifies whether the argument is input or output.
          enum:
            - MODE_UNSPECIFIED
            - IN
            - OUT
            - INOUT
          type: string
          enumDescriptions:
            - Unspecified mode.
            - The argument is input-only.
            - The argument is output-only.
            - The argument is both an input and an output.
        name:
          type: string
          description: The name of the argument. A return argument of a function might not have a name.
        type:
          type: string
          description: Type of the argument. The exact value depends on the source system and the language.
    GoogleCloudDatacatalogV1ReplaceTaxonomyRequest:
      properties:
        serializedTaxonomy:
          description: Required. Taxonomy to update along with its child policy tags.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SerializedTaxonomy'
      id: GoogleCloudDatacatalogV1ReplaceTaxonomyRequest
      type: object
      description: Request message for ReplaceTaxonomy.
    GoogleCloudDatacatalogV1SqlDatabaseSystemSpec:
      description: Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)
      id: GoogleCloudDatacatalogV1SqlDatabaseSystemSpec
      properties:
        sqlEngine:
          type: string
          description: SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance.
        databaseVersion:
          description: Version of the database engine.
          type: string
        instanceHost:
          description: Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.
          type: string
      type: object
    GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema:
      description: Schema in Thrift format.
      type: object
      properties:
        text:
          description: Thrift IDL source of the schema.
          type: string
      id: GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema
    GoogleCloudDatacatalogV1Schema:
      id: GoogleCloudDatacatalogV1Schema
      description: Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.
      type: object
      properties:
        columns:
          type: array
          description: The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels.
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1ColumnSchema'
    GoogleCloudDatacatalogV1ModifyEntryContactsRequest:
      type: object
      properties:
        contacts:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1Contacts'
          description: Required. The new value for the Contacts.
      description: Request message for ModifyEntryContacts.
      id: GoogleCloudDatacatalogV1ModifyEntryContactsRequest
    GoogleCloudDatacatalogV1DataSourceConnectionSpec:
      id: GoogleCloudDatacatalogV1DataSourceConnectionSpec
      properties:
        bigqueryConnectionSpec:
          description: Output only. Fields specific to BigQuery connections.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1BigQueryConnectionSpec'
      type: object
      description: Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.
    GoogleCloudDatacatalogV1StorageProperties:
      id: GoogleCloudDatacatalogV1StorageProperties
      type: object
      description: Details the properties of the underlying storage.
      properties:
        fileType:
          description: File type in MIME format, for example, `text/plain`.
          type: string
        filePattern:
          items:
            type: string
          type: array
          description: 'Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`'
    GoogleCloudDatacatalogV1PhysicalSchema:
      id: GoogleCloudDatacatalogV1PhysicalSchema
      description: Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
      type: object
      properties:
        avro:
          description: Schema in Avro JSON format.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema'
        protobuf:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema'
          description: Schema in protocol buffer format.
        orc:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema'
          description: Marks an ORC-encoded data source.
        thrift:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema'
          description: Schema in Thrift format.
        parquet:
          description: Marks a Parquet-encoded data source.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema'
        csv:
          description: Marks a CSV-encoded data source.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema'
    GoogleCloudDatacatalogV1BigQueryDateShardedSpec:
      description: Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).
      properties:
        latestShardResource:
          readOnly: true
          description: Output only. BigQuery resource name of the latest shard.
          type: string
        dataset:
          type: string
          readOnly: true
          description: 'Output only. The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.'
        shardCount:
          type: string
          format: int64
          readOnly: true
          description: Output only. Total number of shards.
        tablePrefix:
          description: Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`.
          readOnly: true
          type: string
      id: GoogleCloudDatacatalogV1BigQueryDateShardedSpec
      type: object
    GoogleCloudDatacatalogV1TagFieldEnumValue:
      properties:
        displayName:
          description: The display name of the enum value.
          type: string
      id: GoogleCloudDatacatalogV1TagFieldEnumValue
      description: An enum value.
      type: object
    GoogleCloudDatacatalogV1DataplexExternalTable:
      description: External table registered by Dataplex. Dataplex publishes data discovered from an asset into multiple other systems (BigQuery, DPMS) in form of tables. We call them "external tables". External tables are also synced into the Data Catalog. This message contains pointers to those external tables (fully qualified name, resource name et cetera) within the Data Catalog.
      properties:
        system:
          description: Service in which the external table is registered.
          type: string
          enumDescriptions:
            - Default unknown system.
            - BigQuery.
            - Cloud Pub/Sub.
            - Dataproc Metastore.
            - Dataplex.
            - Cloud Sql
            - Looker
          enum:
            - INTEGRATED_SYSTEM_UNSPECIFIED
            - BIGQUERY
            - CLOUD_PUBSUB
            - DATAPROC_METASTORE
            - DATAPLEX
            - CLOUD_SQL
            - LOOKER
        googleCloudResource:
          description: Google Cloud resource name of the external table.
          type: string
        dataCatalogEntry:
          description: Name of the Data Catalog entry representing the external table.
          type: string
        fullyQualifiedName:
          description: Fully qualified name (FQN) of the external table.
          type: string
      type: object
      id: GoogleCloudDatacatalogV1DataplexExternalTable
    GoogleCloudDatacatalogV1StarEntryRequest:
      type: object
      description: Request message for StarEntry.
      id: GoogleCloudDatacatalogV1StarEntryRequest
      properties: {}
    Expr:
      id: Expr
      properties:
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        description:
          type: string
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        title:
          type: string
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      type: object
    GoogleCloudDatacatalogV1CrossRegionalSource:
      description: Cross-regional source used to import an existing taxonomy into a different region.
      type: object
      properties:
        taxonomy:
          type: string
          description: Required. The resource name of the source taxonomy to import.
      id: GoogleCloudDatacatalogV1CrossRegionalSource
    GoogleCloudDatacatalogV1BigQueryTableSpec:
      id: GoogleCloudDatacatalogV1BigQueryTableSpec
      properties:
        tableSourceType:
          enum:
            - TABLE_SOURCE_TYPE_UNSPECIFIED
            - BIGQUERY_VIEW
            - BIGQUERY_TABLE
            - BIGQUERY_MATERIALIZED_VIEW
          enumDescriptions:
            - Default unknown type.
            - Table view.
            - BigQuery native table.
            - BigQuery materialized view.
          description: Output only. The table source type.
          readOnly: true
          type: string
        tableSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1TableSpec'
          description: Specification of a BigQuery table. Populated only if the `table_source_type` is `BIGQUERY_TABLE`.
        viewSpec:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1ViewSpec'
          description: Table view specification. Populated only if the `table_source_type` is `BIGQUERY_VIEW`.
      type: object
      description: Describes a BigQuery table.
    GoogleCloudDatacatalogV1InlineSource:
      description: Inline source containing taxonomies to import.
      id: GoogleCloudDatacatalogV1InlineSource
      properties:
        taxonomies:
          description: Required. Taxonomies to import.
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1SerializedTaxonomy'
          type: array
      type: object
    GoogleCloudDatacatalogV1Contacts:
      id: GoogleCloudDatacatalogV1Contacts
      description: Contact people for the entry.
      type: object
      properties:
        people:
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1ContactsPerson'
          type: array
          description: The list of contact people for the entry.
    GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema:
      type: object
      properties:
        text:
          type: string
          description: JSON source of the Avro schema.
      id: GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema
      description: Schema in Avro JSON format.
    GoogleCloudDatacatalogV1ExportTaxonomiesResponse:
      properties:
        taxonomies:
          description: List of taxonomies and policy tags as nested protocol buffers.
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1SerializedTaxonomy'
          type: array
      id: GoogleCloudDatacatalogV1ExportTaxonomiesResponse
      type: object
      description: Response message for ExportTaxonomies.
    GoogleCloudDatacatalogV1DatabaseTableSpec:
      description: Specification that applies to a table resource. Valid only for entries with the `TABLE` type.
      id: GoogleCloudDatacatalogV1DatabaseTableSpec
      type: object
      properties:
        databaseViewSpec:
          description: Spec what aplies to tables that are actually views. Not set for "real" tables.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DatabaseTableSpecDatabaseViewSpec'
        dataplexTable:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1DataplexTableSpec'
          readOnly: true
          description: Output only. Fields specific to a Dataplex table and present only in the Dataplex table entries.
        type:
          type: string
          description: Type of this table.
          enum:
            - TABLE_TYPE_UNSPECIFIED
            - NATIVE
            - EXTERNAL
          enumDescriptions:
            - Default unknown table type.
            - Native table.
            - External table.
    GoogleCloudDatacatalogV1TagField:
      description: Contains the value and additional information on a field within a Tag.
      type: object
      properties:
        enumValue:
          description: The value of a tag field with an enum type. This value must be one of the allowed values listed in this enum.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagFieldEnumValue'
        stringValue:
          type: string
          description: The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters.
        richtextValue:
          description: The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.
          type: string
        timestampValue:
          description: The value of a tag field with a timestamp type.
          type: string
          format: google-datetime
        boolValue:
          description: The value of a tag field with a boolean type.
          type: boolean
        order:
          readOnly: true
          type: integer
          description: Output only. The order of this field with respect to other fields in this tag. Can be set by Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag don't have to be sequential.
          format: int32
        displayName:
          type: string
          readOnly: true
          description: Output only. The display name of this field.
        doubleValue:
          format: double
          type: number
          description: The value of a tag field with a double type.
      id: GoogleCloudDatacatalogV1TagField
    GoogleCloudDatacatalogV1SystemTimestamps:
      description: Timestamps associated with this resource in a particular system.
      type: object
      properties:
        createTime:
          description: Creation timestamp of the resource within the given system.
          format: google-datetime
          type: string
        updateTime:
          type: string
          format: google-datetime
          description: 'Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes.'
        expireTime:
          readOnly: true
          description: Output only. Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.
          format: google-datetime
          type: string
      id: GoogleCloudDatacatalogV1SystemTimestamps
    GoogleCloudDatacatalogV1TagTemplate:
      type: object
      properties:
        displayName:
          type: string
          description: Display name for this template. Defaults to an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
        isPubliclyReadable:
          description: Indicates whether tags created with this template are public. Public tags do not require tag template access to appear in ListTags API response. Additionally, you can search for a public tag by value with a simple search query in addition to using a ``tag:`` predicate.
          type: boolean
        fields:
          description: 'Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. The map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. The IDs have the following limitations: * Can contain uppercase and lowercase letters, numbers (0-9) and underscores (_). * Must be at least 1 character and at most 64 characters long. * Must start with a letter or underscore.'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
        name:
          description: 'The resource name of the tag template in URL format. Note: The tag template itself and its child resources might not be stored in the location specified in its name.'
          type: string
      description: A tag template defines a tag that can have one or more typed fields. The template is used to create tags that are attached to GCP resources. [Tag template roles] (https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. For example, see the [TagTemplate User] (https://cloud.google.com/data-catalog/docs/how-to/template-user) role that includes a permission to use the tag template to tag resources.
      id: GoogleCloudDatacatalogV1TagTemplate
    GoogleCloudDatacatalogV1PersonalDetails:
      description: Entry metadata relevant only to the user and private to them.
      type: object
      id: GoogleCloudDatacatalogV1PersonalDetails
      properties:
        starred:
          type: boolean
          description: True if the entry is starred by the user; false otherwise.
        starTime:
          description: Set if the entry is starred; unset otherwise.
          type: string
          format: google-datetime
    GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec:
      properties:
        instanceId:
          description: Cloud SQL instance ID in the format of `project:location:instance`.
          type: string
        database:
          type: string
          description: Database name.
        type:
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - POSTGRES
            - MYSQL
          enumDescriptions:
            - Unspecified database type.
            - Cloud SQL for PostgreSQL.
            - Cloud SQL for MySQL.
          type: string
          description: Type of the Cloud SQL database.
      type: object
      description: Specification for the BigQuery connection to a Cloud SQL instance.
      id: GoogleCloudDatacatalogV1CloudSqlBigQueryConnectionSpec
    GoogleCloudDatacatalogV1SerializedPolicyTag:
      description: A nested protocol buffer that represents a policy tag and all its descendants.
      id: GoogleCloudDatacatalogV1SerializedPolicyTag
      type: object
      properties:
        policyTag:
          description: Resource name of the policy tag. This field is ignored when calling `ImportTaxonomies`.
          type: string
        description:
          type: string
          description: Description of the serialized policy tag. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.
        childPolicyTags:
          description: Children of the policy tag, if any.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudDatacatalogV1SerializedPolicyTag'
        displayName:
          description: Required. Display name of the policy tag. At most 200 bytes when encoded in UTF-8.
          type: string
    GoogleCloudDatacatalogV1Taxonomy:
      id: GoogleCloudDatacatalogV1Taxonomy
      description: 'A taxonomy is a collection of hierarchical policy tags that classify data along a common axis. For example, a "data sensitivity" taxonomy might contain the following policy tags: ``` + PII + Account number + Age + SSN + Zipcode + Financials + Revenue ``` A "data origin" taxonomy might contain the following policy tags: ``` + User data + Employee data + Partner data + Public data ```'
      properties:
        description:
          type: string
          description: Optional. Description of this taxonomy. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns, and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
        activatedPolicyTypes:
          type: array
          description: Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.
          items:
            enumDescriptions:
              - Unspecified policy type.
              - Fine-grained access control policy that enables access control on tagged sub-resources.
            type: string
            enum:
              - POLICY_TYPE_UNSPECIFIED
              - FINE_GRAINED_ACCESS_CONTROL
        displayName:
          type: string
          description: Required. User-defined name of this taxonomy. The name can't start or end with spaces, must contain only Unicode letters, numbers, underscores, dashes, and spaces, and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.
        taxonomyTimestamps:
          description: Output only. Creation and modification timestamps of this taxonomy.
          readOnly: true
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1SystemTimestamps'
        name:
          readOnly: true
          description: 'Output only. Resource name of this taxonomy in URL format. Note: Policy tag manager generates unique taxonomy IDs.'
          type: string
        policyTagCount:
          description: Output only. Number of policy tags in this taxonomy.
          readOnly: true
          format: int32
          type: integer
      type: object
    GoogleCloudDatacatalogV1PolicyTag:
      type: object
      properties:
        name:
          readOnly: true
          type: string
          description: Output only. Resource name of this policy tag in the URL format. The policy tag manager generates unique taxonomy IDs and policy tag IDs.
        description:
          type: string
          description: Description of this policy tag. If not set, defaults to empty. The description must contain only Unicode characters, tabs, newlines, carriage returns and page breaks, and be at most 2000 bytes long when encoded in UTF-8.
        parentPolicyTag:
          type: string
          description: Resource name of this policy tag's parent policy tag. If empty, this is a top level tag. If not set, defaults to an empty string. For example, for the "LatLong" policy tag in the example above, this field contains the resource name of the "Geolocation" policy tag, and, for "Geolocation", this field is empty.
        displayName:
          description: Required. User-defined name of this policy tag. The name can't start or end with spaces and must be unique within the parent taxonomy, contain only Unicode letters, numbers, underscores, dashes and spaces, and be at most 200 bytes long when encoded in UTF-8.
          type: string
        childPolicyTags:
          readOnly: true
          items:
            type: string
          type: array
          description: Output only. Resource names of child policy tags of this policy tag.
      description: 'Denotes one policy tag in a taxonomy, for example, SSN. Policy tags can be defined in a hierarchy. For example: ``` + Geolocation + LatLong + City + ZipCode ``` Where the "Geolocation" policy tag contains three children.'
      id: GoogleCloudDatacatalogV1PolicyTag
    GoogleCloudDatacatalogV1BusinessContext:
      properties:
        contacts:
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1Contacts'
          description: Contact people for the entry.
        entryOverview:
          description: Entry overview fields for rich text descriptions of entries.
          $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryOverview'
      type: object
      id: GoogleCloudDatacatalogV1BusinessContext
      description: Business Context of the entry.
    GoogleCloudDatacatalogV1BigQueryRoutineSpec:
      description: Fields specific for BigQuery routines.
      id: GoogleCloudDatacatalogV1BigQueryRoutineSpec
      properties:
        importedLibraries:
          type: array
          description: Paths of the imported libraries.
          items:
            type: string
      type: object
    GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue:
      id: GoogleCloudDatacatalogV1FieldTypeEnumTypeEnumValue
      properties:
        displayName:
          description: Required. The display name of the enum value. Must not be an empty string. The name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), and can't start or end with spaces. The maximum length is 200 characters.
          type: string
      type: object
    GoogleCloudDatacatalogV1CommonUsageStats:
      id: GoogleCloudDatacatalogV1CommonUsageStats
      properties:
        viewCount:
          description: View count in source system.
          type: string
          format: int64
      type: object
      description: Common statistics on the entry's usage. They can be set on any system.
  parameters:
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    entries:
      id: google.datacatalog.entries
      name: entries
      title: Entries
      methods:
        lookup:
          operation:
            $ref: '#/paths/~1v1~1entries:lookup/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_modifyEntryOverview:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:modifyEntryOverview/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_unstar:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:unstar/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_star:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:star/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_modifyEntryContacts:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:modifyEntryContacts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entries/methods/projects_locations_entryGroups_entries_get'
          - $ref: '#/components/x-stackQL-resources/entries/methods/projects_locations_entryGroups_entries_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/entries/methods/projects_locations_entryGroups_entries_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/entries/methods/projects_locations_entryGroups_entries_delete'
    catalog:
      id: google.datacatalog.catalog
      name: catalog
      title: Catalog
      methods:
        search:
          operation:
            $ref: '#/paths/~1v1~1catalog:search/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    fields:
      id: google.datacatalog.fields
      name: fields
      title: Fields
      methods:
        projects_locations_tagTemplates_fields_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}~1fields~1{fieldsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_fields_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}~1fields~1{fieldsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_fields_rename:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}~1fields~1{fieldsId}:rename/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_fields_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}~1fields/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/fields/methods/projects_locations_tagTemplates_fields_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/fields/methods/projects_locations_tagTemplates_fields_delete'
    enum_values:
      id: google.datacatalog.enum_values
      name: enum_values
      title: Enum_values
      methods:
        projects_locations_tagTemplates_fields_enumValues_rename:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}~1fields~1{fieldsId}~1enumValues~1{enumValuesId}:rename/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    tag_templates:
      id: google.datacatalog.tag_templates
      name: tag_templates
      title: Tag_templates
      methods:
        projects_locations_tagTemplates_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tag_templates/methods/projects_locations_tagTemplates_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/tag_templates/methods/projects_locations_tagTemplates_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tag_templates/methods/projects_locations_tagTemplates_delete'
    tag_templates_iam_policies:
      id: google.datacatalog.tag_templates_iam_policies
      name: tag_templates_iam_policies
      title: Tag_templates_iam_policies
      methods:
        projects_locations_tagTemplates_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_tagTemplates_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tag_templates_iam_policies/methods/projects_locations_tagTemplates_getIamPolicy'
        insert: []
        update: []
        delete: []
    tags:
      id: google.datacatalog.tags
      name: tags
      title: Tags
      methods:
        projects_locations_entryGroups_tags_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1tags~1{tagsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_tags_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1tags~1{tagsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_tags_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_tags_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_tags_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_tags_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_tags_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}~1tags~1{tagsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_tags_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}~1tags~1{tagsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_entries_tags_list'
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_tags_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_entries_tags_create'
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_tags_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_entries_tags_delete'
          - $ref: '#/components/x-stackQL-resources/tags/methods/projects_locations_entryGroups_tags_delete'
    entries_iam_policies:
      id: google.datacatalog.entries_iam_policies
      name: entries_iam_policies
      title: Entries_iam_policies
      methods:
        projects_locations_entryGroups_entries_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_entries_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entries_iam_policies/methods/projects_locations_entryGroups_entries_getIamPolicy'
        insert: []
        update: []
        delete: []
    entry_groups:
      id: google.datacatalog.entry_groups
      name: entry_groups
      title: Entry_groups
      methods:
        projects_locations_entryGroups_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entry_groups/methods/projects_locations_entryGroups_get'
          - $ref: '#/components/x-stackQL-resources/entry_groups/methods/projects_locations_entryGroups_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/entry_groups/methods/projects_locations_entryGroups_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/entry_groups/methods/projects_locations_entryGroups_delete'
    entry_groups_iam_policies:
      id: google.datacatalog.entry_groups_iam_policies
      name: entry_groups_iam_policies
      title: Entry_groups_iam_policies
      methods:
        projects_locations_entryGroups_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_entryGroups_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entry_groups_iam_policies/methods/projects_locations_entryGroups_getIamPolicy'
        insert: []
        update: []
        delete: []
    operations:
      id: google.datacatalog.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
    taxonomies:
      id: google.datacatalog.taxonomies
      name: taxonomies
      title: Taxonomies
      methods:
        projects_locations_taxonomies_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_import:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies:import/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_replace:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}:replace/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_export:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies:export/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/taxonomies/methods/projects_locations_taxonomies_get'
          - $ref: '#/components/x-stackQL-resources/taxonomies/methods/projects_locations_taxonomies_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/taxonomies/methods/projects_locations_taxonomies_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/taxonomies/methods/projects_locations_taxonomies_delete'
    taxonomies_iam_policies:
      id: google.datacatalog.taxonomies_iam_policies
      name: taxonomies_iam_policies
      title: Taxonomies_iam_policies
      methods:
        projects_locations_taxonomies_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/taxonomies_iam_policies/methods/projects_locations_taxonomies_getIamPolicy'
        insert: []
        update: []
        delete: []
    policy_tags:
      id: google.datacatalog.policy_tags
      name: policy_tags
      title: Policy_tags
      methods:
        projects_locations_taxonomies_policyTags_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policy_tags/methods/projects_locations_taxonomies_policyTags_get'
          - $ref: '#/components/x-stackQL-resources/policy_tags/methods/projects_locations_taxonomies_policyTags_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/policy_tags/methods/projects_locations_taxonomies_policyTags_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/policy_tags/methods/projects_locations_taxonomies_policyTags_delete'
    policy_tags_iam_policies:
      id: google.datacatalog.policy_tags_iam_policies
      name: policy_tags_iam_policies
      title: Policy_tags_iam_policies
      methods:
        projects_locations_taxonomies_policyTags_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_taxonomies_policyTags_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policy_tags_iam_policies/methods/projects_locations_taxonomies_policyTags_getIamPolicy'
        insert: []
        update: []
        delete: []
    tag_templates_iam_bindings:
      id: google.datacatalog.tag_templates_iam_bindings
      name: tag_templates_iam_bindings
      title: tag_templates_iam_bindings
      methods:
        projects_locations_tagTemplates_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1tagTemplates~1{tagTemplatesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/tag_templates_iam_bindings/methods/projects_locations_tagTemplates_getIamPolicy'
    entries_iam_bindings:
      id: google.datacatalog.entries_iam_bindings
      name: entries_iam_bindings
      title: entries_iam_bindings
      methods:
        projects_locations_entryGroups_entries_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}~1entries~1{entriesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/entries_iam_bindings/methods/projects_locations_entryGroups_entries_getIamPolicy'
    entry_groups_iam_bindings:
      id: google.datacatalog.entry_groups_iam_bindings
      name: entry_groups_iam_bindings
      title: entry_groups_iam_bindings
      methods:
        projects_locations_entryGroups_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1entryGroups~1{entryGroupsId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/entry_groups_iam_bindings/methods/projects_locations_entryGroups_getIamPolicy'
    taxonomies_iam_bindings:
      id: google.datacatalog.taxonomies_iam_bindings
      name: taxonomies_iam_bindings
      title: taxonomies_iam_bindings
      methods:
        projects_locations_taxonomies_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/taxonomies_iam_bindings/methods/projects_locations_taxonomies_getIamPolicy'
    policy_tags_iam_bindings:
      id: google.datacatalog.policy_tags_iam_bindings
      name: policy_tags_iam_bindings
      title: policy_tags_iam_bindings
      methods:
        projects_locations_taxonomies_policyTags_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1taxonomies~1{taxonomiesId}~1policyTags~1{policyTagsId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/policy_tags_iam_bindings/methods/projects_locations_taxonomies_policyTags_getIamPolicy'
paths:
  /v1/entries:lookup:
    parameters: &ref_1
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
    get:
      description: Gets an entry by its target resource name. The resource name comes from the source Google Cloud Platform service.
      operationId: datacatalog.entries.lookup
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      parameters:
        - in: query
          name: linkedResource
          schema:
            type: string
        - in: query
          name: sqlResource
          schema:
            type: string
        - in: query
          name: fullyQualifiedName
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/catalog:search:
    parameters: *ref_1
    post:
      description: 'Searches Data Catalog for multiple resources like entries and tags that match a query. This is a [Custom Method] (https://cloud.google.com/apis/design/custom_methods) that doesn''t return all information on a resource, only its ID and high level fields. To get more information, you can subsequently call specific get methods. Note: Data Catalog search queries don''t guarantee full recall. Results that match your query might not be returned, even in subsequent result pages. Additionally, returned (and not returned) results can vary if you repeat search queries. For more information, see [Data Catalog search syntax] (https://cloud.google.com/data-catalog/docs/how-to/search-reference).'
      operationId: datacatalog.catalog.search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1SearchCatalogRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1SearchCatalogResponse'
      parameters: []
      x-stackQL-resource: catalog
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}:
    parameters: *ref_1
    patch:
      description: Updates a field in a tag template. You can't update the field type with this method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.fields.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-verb: exec
    delete:
      description: Deletes a field in a tag template and all uses of this field from the tags based on this template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.fields.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: fields
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}:rename:
    parameters: *ref_1
    post:
      description: Renames a field in a tag template. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.fields.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1RenameTagTemplateFieldRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields:
    parameters: *ref_1
    post:
      description: Creates a field in a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.fields.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: tagTemplateFieldId
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}/enumValues/{enumValuesId}:rename:
    parameters: *ref_1
    post:
      description: Renames an enum value in a tag template. Within a single enum field, enum values must be unique.
      operationId: datacatalog.projects.locations.tagTemplates.fields.enumValues.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1RenameTagTemplateFieldEnumValueRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplateField'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
        - in: path
          name: enumValuesId
          required: true
          schema:
            type: string
      x-stackQL-resource: enum_values
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:
    parameters: *ref_1
    delete:
      description: Deletes a tag template and all tags that use it. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: tag_templates
      x-stackQL-verb: delete
    get:
      description: Gets a tag template.
      operationId: datacatalog.projects.locations.tagTemplates.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: tag_templates
      x-stackQL-verb: select
    patch:
      description: Updates a tag template. You can't update template fields with this method. These fields are separate resources with their own create, update, and delete methods. You must enable the Data Catalog API in the project identified by the `tag_template.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplate'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tag_templates
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: 'Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can''t be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.'
      operationId: datacatalog.projects.locations.tagTemplates.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: tag_templates_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn''t exist or you don''t have the permission to view it. * An empty policy if the resource exists but doesn''t have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn''t get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.'
      operationId: datacatalog.projects.locations.tagTemplates.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: tag_templates_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates:
    parameters: *ref_1
    post:
      description: Creates a tag template. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.tagTemplates.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplate'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1TagTemplate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: tagTemplateId
          schema:
            type: string
      x-stackQL-resource: tag_templates
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn''t exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can''t be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.'
      operationId: datacatalog.projects.locations.tagTemplates.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: tagTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: tag_templates_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}:
    parameters: *ref_1
    delete:
      description: Deletes a tag.
      operationId: datacatalog.projects.locations.entryGroups.tags.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: delete
    patch:
      description: Updates an existing tag.
      operationId: datacatalog.projects.locations.entryGroups.tags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags:
    parameters: *ref_1
    post:
      description: 'Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.'
      operationId: datacatalog.projects.locations.entryGroups.tags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: insert
    get:
      description: Lists tags assigned to an Entry. The columns in the response are lowercased.
      operationId: datacatalog.projects.locations.entryGroups.tags.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: tags
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags:
    parameters: *ref_1
    post:
      description: 'Creates a tag and assigns it to: * An Entry if the method name is `projects.locations.entryGroups.entries.tags.create`. * Or EntryGroupif the method name is `projects.locations.entryGroups.tags.create`. Note: The project identified by the `parent` parameter for the [tag] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template] (https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be in the same organization.'
      operationId: datacatalog.projects.locations.entryGroups.entries.tags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: insert
    get:
      description: Lists tags assigned to an Entry. The columns in the response are lowercased.
      operationId: datacatalog.projects.locations.entryGroups.entries.tags.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: tags
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}:
    parameters: *ref_1
    patch:
      description: Updates an existing tag.
      operationId: datacatalog.projects.locations.entryGroups.entries.tags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Tag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: exec
    delete:
      description: Deletes a tag.
      operationId: datacatalog.projects.locations.entryGroups.entries.tags.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
        - in: path
          name: tagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: tags
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries:
    parameters: *ref_1
    get:
      description: 'Lists entries. Note: Currently, this method can list only custom entries. To get a list of both custom and automatically created entries, use SearchCatalog.'
      operationId: datacatalog.projects.locations.entryGroups.entries.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListEntriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: select
    post:
      description: Creates an entry. You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM', or custom types. Data Catalog automatically creates entries with other types during metadata ingestion from integrated systems. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project). An entry group can have a maximum of 100,000 entries.
      operationId: datacatalog.projects.locations.entryGroups.entries.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: entryId
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:
    parameters: *ref_1
    delete:
      description: Deletes an existing entry. You can delete only the entries created by the CreateEntry method. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.entryGroups.entries.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: delete
    patch:
      description: Updates an existing entry. You must enable the Data Catalog API in the project identified by the `entry.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.entryGroups.entries.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
    get:
      description: Gets an entry.
      operationId: datacatalog.projects.locations.entryGroups.entries.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Entry'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:modifyEntryOverview:
    parameters: *ref_1
    post:
      description: Modifies entry overview, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateOverview` IAM permission on the corresponding project.
      operationId: datacatalog.projects.locations.entryGroups.entries.modifyEntryOverview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1ModifyEntryOverviewRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryOverview'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn''t exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can''t be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.'
      operationId: datacatalog.projects.locations.entryGroups.entries.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries:import:
    parameters: *ref_1
    post:
      description: Imports entries from some source (e.g. dump in a Cloud Storage bucket) to the Data Catalog. Dump here is a snapshot of the third-party system state, that needs to be ingested in the Data Catalog. Import of entries is a sync operation that reconciles state of the third-party system and Data Catalog. ImportEntries is a long-running operation done in the background, so this method returns long-running operation resource. The resource can be queried with Operations.GetOperation which contains metadata and response.
      operationId: datacatalog.projects.locations.entryGroups.entries.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1ImportEntriesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:unstar:
    parameters: *ref_1
    post:
      description: Marks an Entry as NOT starred by the current user. Starring information is private to each user.
      operationId: datacatalog.projects.locations.entryGroups.entries.unstar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1UnstarEntryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1UnstarEntryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn''t exist or you don''t have the permission to view it. * An empty policy if the resource exists but doesn''t have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn''t get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.'
      operationId: datacatalog.projects.locations.entryGroups.entries.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:star:
    parameters: *ref_1
    post:
      description: Marks an Entry as starred by the current user. Starring information is private to each user.
      operationId: datacatalog.projects.locations.entryGroups.entries.star
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1StarEntryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1StarEntryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:modifyEntryContacts:
    parameters: *ref_1
    post:
      description: Modifies contacts, part of the business context of an Entry. To call this method, you must have the `datacatalog.entries.updateContacts` IAM permission on the corresponding project.
      operationId: datacatalog.projects.locations.entryGroups.entries.modifyEntryContacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1ModifyEntryContactsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Contacts'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: entriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: entries
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:
    parameters: *ref_1
    delete:
      description: Deletes an entry group. You must enable the Data Catalog API in the project identified by the `name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.entryGroups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: entry_groups
      x-stackQL-verb: delete
    get:
      description: Gets an entry group.
      operationId: datacatalog.projects.locations.entryGroups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: readMask
          schema:
            type: string
      x-stackQL-resource: entry_groups
      x-stackQL-verb: select
    patch:
      description: Updates an entry group. You must enable the Data Catalog API in the project identified by the `entry_group.name` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
      operationId: datacatalog.projects.locations.entryGroups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: entry_groups
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups:
    parameters: *ref_1
    post:
      description: 'Creates an entry group. An entry group contains logically related entries together with [Cloud Identity and Access Management](/data-catalog/docs/concepts/iam) policies. These policies specify users who can create, edit, and view entries within entry groups. Data Catalog automatically creates entry groups with names that start with the `@` symbol for the following resources: * BigQuery entries (`@bigquery`) * Pub/Sub topics (`@pubsub`) * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`) You can create your own entry groups for Cloud Storage fileset entries and custom entries together with the corresponding IAM policies. User-created entry groups can''t contain the `@` symbol, it is reserved for automatically created groups. Entry groups, like entries, can be searched. A maximum of 10,000 entry groups may be created per organization across all locations. You must enable the Data Catalog API in the project identified by the `parent` parameter. For more information, see [Data Catalog resource project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).'
      operationId: datacatalog.projects.locations.entryGroups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1EntryGroup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: entryGroupId
          schema:
            type: string
      x-stackQL-resource: entry_groups
      x-stackQL-verb: insert
    get:
      description: Lists entry groups.
      operationId: datacatalog.projects.locations.entryGroups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListEntryGroupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: entry_groups
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: 'Sets an access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates - Entry groups Note: This method sets policies only within Data Catalog and can''t be used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources synced with the Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.'
      operationId: datacatalog.projects.locations.entryGroups.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: entry_groups_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: 'Gets the access control policy for a resource. May return: * A`NOT_FOUND` error if the resource doesn''t exist or you don''t have the permission to view it. * An empty policy if the resource exists but doesn''t have a set policy. Supported resources are: - Tag templates - Entry groups Note: This method doesn''t get policies from Google Cloud Platform resources ingested into Data Catalog. To call this method, you must have the following Google IAM permissions: - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.'
      operationId: datacatalog.projects.locations.entryGroups.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: entry_groups_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Gets your permissions on a resource. Returns an empty set of permissions if the resource doesn''t exist. Supported resources are: - Tag templates - Entry groups Note: This method gets policies only within Data Catalog and can''t be used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any external Google Cloud Platform resources ingested into Data Catalog. No Google IAM permissions are required to call this method.'
      operationId: datacatalog.projects.locations.entryGroups.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: entryGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: entry_groups_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: datacatalog.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: datacatalog.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
      operationId: datacatalog.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: datacatalog.projects.locations.operations.cancel
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies:
    parameters: *ref_1
    get:
      description: Lists all taxonomies in a project in a particular location that you have a permission to view.
      operationId: datacatalog.projects.locations.taxonomies.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListTaxonomiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: select
    post:
      description: Creates a taxonomy in a specified project. The taxonomy is initially empty, that is, it doesn't contain policy tags.
      operationId: datacatalog.projects.locations.taxonomies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: Returns your permissions on a specified policy tag or taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:
    parameters: *ref_1
    patch:
      description: Updates a taxonomy, including its display name, description, and activated policy types.
      operationId: datacatalog.projects.locations.taxonomies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: exec
    get:
      description: Gets a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: select
    delete:
      description: Deletes a taxonomy, including all policy tags in this taxonomy, their associated policies, and the policy tags references from BigQuery columns.
      operationId: datacatalog.projects.locations.taxonomies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies:import:
    parameters: *ref_1
    post:
      description: Creates new taxonomies (including their policy tags) in a given project by importing from inlined or cross-regional sources. For a cross-regional source, new taxonomies are created by copying from a source in another region. For an inlined source, taxonomies and policy tags are created in bulk using nested protocol buffer structures.
      operationId: datacatalog.projects.locations.taxonomies.import
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1ImportTaxonomiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ImportTaxonomiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:replace:
    parameters: *ref_1
    post:
      description: 'Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don''t have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.'
      operationId: datacatalog.projects.locations.taxonomies.replace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1ReplaceTaxonomyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1Taxonomy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM policy for a policy tag or a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies:export:
    parameters: *ref_1
    get:
      description: Exports taxonomies in the requested type and returns them, including their policy tags. The requested taxonomies must belong to the same project. This method generates `SerializedTaxonomy` protocol buffers with nested policy tags that can be used as input for `ImportTaxonomies` calls.
      operationId: datacatalog.projects.locations.taxonomies.export
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ExportTaxonomiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: serializedTaxonomies
          schema:
            type: boolean
        - in: query
          name: taxonomies
          schema:
            type: string
      x-stackQL-resource: taxonomies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM policy for a policy tag or a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: taxonomies_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:
    parameters: *ref_1
    delete:
      description: 'Deletes a policy tag together with the following: * All of its descendant policy tags, if any * Policies associated with the policy tag and its descendants * References from BigQuery table schema of the policy tag and its descendants'
      operationId: datacatalog.projects.locations.taxonomies.policyTags.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags
      x-stackQL-verb: delete
    get:
      description: Gets a policy tag.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags
      x-stackQL-verb: select
    patch:
      description: Updates a policy tag, including its display name, description, and parent policy tag.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: policy_tags
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the IAM policy for a policy tag or a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: Gets the IAM policy for a policy tag or a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: Returns your permissions on a specified policy tag or taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: path
          name: policyTagsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags:
    parameters: *ref_1
    post:
      description: Creates a policy tag in a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1PolicyTag'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_tags
      x-stackQL-verb: insert
    get:
      description: Lists all policy tags in a taxonomy.
      operationId: datacatalog.projects.locations.taxonomies.policyTags.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudDatacatalogV1ListPolicyTagsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: taxonomiesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: policy_tags
      x-stackQL-verb: select
