openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: IAM Service Account Credentials API
  description: 'Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). '
  version: v1
  x-discovery-doc-revision: '20230811'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials'
servers:
  - url: 'https://iamcredentials.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    GenerateAccessTokenRequest:
      id: GenerateAccessTokenRequest
      type: object
      properties:
        lifetime:
          format: google-duration
          description: 'The desired lifetime duration of the access token in seconds. By default, the maximum allowed value is 1 hour. To set a lifetime of up to 12 hours, you can add the service account as an allowed value in an Organization Policy that enforces the `constraints/iam.allowServiceAccountCredentialLifetimeExtension` constraint. See detailed instructions at https://cloud.google.com/iam/help/credentials/lifetime If a value is not specified, the token''s lifetime will be set to a default value of 1 hour.'
          type: string
        scope:
          items:
            type: string
          description: 'Required. Code to identify the scopes to be included in the OAuth 2.0 access token. See https://developers.google.com/identity/protocols/googlescopes for more information. At least one value required.'
          type: array
        delegates:
          type: array
          description: 'The sequence of service accounts in a delegation chain. This field is required for [delegated requests](https://cloud.google.com/iam/help/credentials/delegated-request). For [direct requests](https://cloud.google.com/iam/help/credentials/direct-request), which are more common, do not specify this field. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.'
          items:
            type: string
    SignBlobRequest:
      type: object
      properties:
        delegates:
          items:
            type: string
          type: array
          description: 'The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.'
        payload:
          format: byte
          type: string
          description: Required. The bytes to sign.
      id: SignBlobRequest
    SignBlobResponse:
      type: object
      properties:
        signedBlob:
          type: string
          description: 'The signature for the blob. Does not include the original blob. After the key pair referenced by the `key_id` response field expires, Google no longer exposes the public key that can be used to verify the blob. As a result, the receiver can no longer verify the signature.'
          format: byte
        keyId:
          description: 'The ID of the key used to sign the blob. The key used for signing will remain valid for at least 12 hours after the blob is signed. To verify the signature, you can retrieve the public key in several formats from the following endpoints: - RSA public key wrapped in an X.509 v3 certificate: `https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}` - Raw key in JSON format: `https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}` - JSON Web Key (JWK): `https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}`'
          type: string
      id: SignBlobResponse
    SignJwtRequest:
      id: SignJwtRequest
      properties:
        delegates:
          description: 'The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.'
          items:
            type: string
          type: array
        payload:
          type: string
          description: 'Required. The JWT payload to sign. Must be a serialized JSON object that contains a JWT Claims Set. For example: `{"sub": "user@example.com", "iat": 313435}` If the JWT Claims Set contains an expiration time (`exp`) claim, it must be an integer timestamp that is not in the past and no more than 12 hours in the future.'
      type: object
    SignJwtResponse:
      type: object
      id: SignJwtResponse
      properties:
        signedJwt:
          description: 'The signed JWT. Contains the automatically generated header; the client-supplied payload; and the signature, which is generated using the key referenced by the `kid` field in the header. After the key pair referenced by the `key_id` response field expires, Google no longer exposes the public key that can be used to verify the JWT. As a result, the receiver can no longer verify the signature.'
          type: string
        keyId:
          description: 'The ID of the key used to sign the JWT. The key used for signing will remain valid for at least 12 hours after the JWT is signed. To verify the signature, you can retrieve the public key in several formats from the following endpoints: - RSA public key wrapped in an X.509 v3 certificate: `https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}` - Raw key in JSON format: `https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}` - JSON Web Key (JWK): `https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}`'
          type: string
    GenerateIdTokenResponse:
      id: GenerateIdTokenResponse
      properties:
        token:
          description: The OpenId Connect ID token.
          type: string
      type: object
    GenerateIdTokenRequest:
      type: object
      id: GenerateIdTokenRequest
      properties:
        audience:
          type: string
          description: 'Required. The audience for the token, such as the API or account that this token grants access to.'
        delegates:
          items:
            type: string
          description: 'The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.'
          type: array
        includeEmail:
          description: 'Include the service account email in the token. If set to `true`, the token will contain `email` and `email_verified` claims.'
          type: boolean
    GenerateAccessTokenResponse:
      type: object
      id: GenerateAccessTokenResponse
      properties:
        expireTime:
          type: string
          description: Token expiration time. The expiration time is always set.
          format: google-datetime
        accessToken:
          description: The OAuth 2.0 access token.
          type: string
  parameters:
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
  x-stackQL-resources:
    service_accounts:
      id: google.iamcredentials.service_accounts
      name: service_accounts
      title: Service Accounts
      methods:
        sign_blob:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1serviceAccounts~1{serviceAccountsId}:signBlob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        generate_id_token:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1serviceAccounts~1{serviceAccountsId}:generateIdToken/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        sign_jwt:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1serviceAccounts~1{serviceAccountsId}:signJwt/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        generate_access_token:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1serviceAccounts~1{serviceAccountsId}:generateAccessToken/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signBlob':
    parameters: &ref_1
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
    post:
      description: Signs a blob using a service account's system-managed private key.
      operationId: iamcredentials.projects.serviceAccounts.signBlob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignBlobRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignBlobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: serviceAccountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_accounts
      x-stackQL-method: sign_blob
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateIdToken':
    parameters: *ref_1
    post:
      description: Generates an OpenID Connect ID token for a service account.
      operationId: iamcredentials.projects.serviceAccounts.generateIdToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateIdTokenRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateIdTokenResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: serviceAccountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_accounts
      x-stackQL-method: generate_id_token
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signJwt':
    parameters: *ref_1
    post:
      description: Signs a JWT using a service account's system-managed private key.
      operationId: iamcredentials.projects.serviceAccounts.signJwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignJwtRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignJwtResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: serviceAccountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_accounts
      x-stackQL-method: sign_jwt
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateAccessToken':
    parameters: *ref_1
    post:
      description: Generates an OAuth 2.0 access token for a service account.
      operationId: iamcredentials.projects.serviceAccounts.generateAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAccessTokenRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateAccessTokenResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: serviceAccountsId
          required: true
          schema:
            type: string
      x-stackQL-resource: service_accounts
      x-stackQL-method: generate_access_token
      x-stackQL-verb: exec
