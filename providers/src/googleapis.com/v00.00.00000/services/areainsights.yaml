openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Places Aggregate API
  description: Places Aggregate API.
  version: v1
  x-discovery-doc-revision: '20250826'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://developers.google.com/maps/documentation/places-aggregate/overview
servers:
  - url: https://areainsights.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ComputeInsightsRequest:
      id: ComputeInsightsRequest
      description: Request for the ComputeInsights RPC.
      type: object
      properties:
        insights:
          description: >-
            Required. Insights to compute. Currently only INSIGHT_COUNT and
            INSIGHT_PLACES are supported.
          type: array
          items:
            type: string
            enumDescriptions:
              - Not Specified.
              - >-
                Count insight. When this insight is specified ComputeInsights
                returns the number of places that match the specified filter
                criteria. Example request: ``` { "insights": ["INSIGHT_COUNT"],
                "filter": { "locationFilter": { "region": { "place":
                "places/ChIJPV4oX_65j4ARVW8IJ6IJUYs" } }, "typeFilter": {
                "includedTypes": ["restaurant"] }, "operatingStatus":
                ["OPERATING_STATUS_OPERATIONAL"], "priceLevels": [
                "PRICE_LEVEL_FREE", "PRICE_LEVEL_INEXPENSIVE" ], "ratingFilter":
                { "minRating": 4.0 } } } ``` Example response: ``` { "count":
                1234 } ```
              - >-
                Return Places When this insight is specified ComputeInsights
                returns places IDs that match the specified filter criteria.
                Example request: ``` { "insights": ["INSIGHT_PLACES"], "filter":
                { "locationFilter": { "region": { "place":
                "places/ChIJPV4oX_65j4ARVW8IJ6IJUYs" } }, "typeFilter": {
                "includedTypes": ["restaurant"] }, "operatingStatus":
                ["OPERATING_STATUS_OPERATIONAL"], "priceLevels": [
                "PRICE_LEVEL_FREE", "PRICE_LEVEL_INEXPENSIVE" ], "ratingFilter":
                { "minRating": 4.0 } } } ``` Example response: ``` {
                "placeInsights": [ {"place": "places/ABC"}, {"place":
                "places/PQR"}, {"place": "places/XYZ"} ] } ```
            enum:
              - INSIGHT_UNSPECIFIED
              - INSIGHT_COUNT
              - INSIGHT_PLACES
        filter:
          description: Required. Insight filter.
          $ref: '#/components/schemas/Filter'
    Filter:
      id: Filter
      description: Filters for the ComputeInsights RPC.
      type: object
      properties:
        locationFilter:
          description: >-
            Required. Restricts results to places which are located in the area
            specified by location filters.
          $ref: '#/components/schemas/LocationFilter'
        typeFilter:
          description: Required. Place type filters.
          $ref: '#/components/schemas/TypeFilter'
        operatingStatus:
          description: >-
            Optional. Restricts results to places whose operating status is
            included on this list. If operating_status is not set,
            OPERATING_STATUS_OPERATIONAL is used as default.
          type: array
          items:
            type: string
            enumDescriptions:
              - Not specified. This value should not be used.
              - The place is operational and its open during its defined hours.
              - The Place is no longer in business.
              - >-
                The place is temporarily closed and expected to reopen in the
                future.
            enum:
              - OPERATING_STATUS_UNSPECIFIED
              - OPERATING_STATUS_OPERATIONAL
              - OPERATING_STATUS_PERMANENTLY_CLOSED
              - OPERATING_STATUS_TEMPORARILY_CLOSED
        priceLevels:
          description: >-
            Optional. Restricts results to places whose price level is included
            on this list. If `price_levels` is not set, all price levels are
            included in the results.
          type: array
          items:
            type: string
            enumDescriptions:
              - Not specified. This value should not be used.
              - Place provides free services.
              - Place provides inexpensive services.
              - Place provides moderately priced services.
              - Place provides expensive services.
              - Place provides very expensive services.
            enum:
              - PRICE_LEVEL_UNSPECIFIED
              - PRICE_LEVEL_FREE
              - PRICE_LEVEL_INEXPENSIVE
              - PRICE_LEVEL_MODERATE
              - PRICE_LEVEL_EXPENSIVE
              - PRICE_LEVEL_VERY_EXPENSIVE
        ratingFilter:
          description: >-
            Optional. Restricts results to places whose average user ratings are
            in the range specified by rating_filter. If rating_filter is not
            set, all ratings are included in the result.
          $ref: '#/components/schemas/RatingFilter'
    LocationFilter:
      id: LocationFilter
      description: Location filters. Specifies the area of interest for the insight.
      type: object
      properties:
        circle:
          description: Area as a circle.
          $ref: '#/components/schemas/Circle'
        region:
          description: Area as region.
          $ref: '#/components/schemas/Region'
        customArea:
          description: Custom area specified by a polygon.
          $ref: '#/components/schemas/CustomArea'
    Circle:
      id: Circle
      description: A circle is defined by a center point and radius in meters.
      type: object
      properties:
        latLng:
          description: The latitude and longitude of the center of the circle.
          $ref: '#/components/schemas/LatLng'
        place:
          description: >-
            **Format:** Must be in the format `places/PLACE_ID`, where
            `PLACE_ID` is the unique identifier of a place. For example:
            `places/ChIJgUbEo8cfqokR5lP9_Wh_DaM`.
          type: string
        radius:
          description: Optional. The radius of the circle in meters
          type: integer
          format: int32
    LatLng:
      id: LatLng
      description: >-
        An object that represents a latitude/longitude pair. This is expressed
        as a pair of doubles to represent degrees latitude and degrees
        longitude. Unless specified otherwise, this object must conform to the
        WGS84 standard. Values must be within normalized ranges.
      type: object
      properties:
        latitude:
          description: The latitude in degrees. It must be in the range [-90.0, +90.0].
          type: number
          format: double
        longitude:
          description: The longitude in degrees. It must be in the range [-180.0, +180.0].
          type: number
          format: double
    Region:
      id: Region
      description: >-
        A region is a geographic boundary such as: cities, postal codes,
        counties, states, etc.
      type: object
      properties:
        place:
          description: >-
            The [place
            ID](https://developers.google.com/maps/documentation/places/web-service/place-id)
            of the geographic region. Not all region types are supported; see
            documentation for details. **Format:** Must be in the format
            `places/PLACE_ID`, where `PLACE_ID` is the unique identifier of a
            place. For example: `places/ChIJPV4oX_65j4ARVW8IJ6IJUYs`.
          type: string
    CustomArea:
      id: CustomArea
      description: Custom Area.
      type: object
      properties:
        polygon:
          description: Required. The custom area represented as a polygon
          $ref: '#/components/schemas/Polygon'
    Polygon:
      id: Polygon
      description: >-
        A polygon is represented by a series of connected coordinates in an
        counterclockwise ordered sequence. The coordinates form a closed loop
        and define a filled region. The first and last coordinates are
        equivalent, and they must contain identical values. The format is a
        simplified version of GeoJSON polygons (we only support one
        counterclockwise exterior ring).
      type: object
      properties:
        coordinates:
          description: Optional. The coordinates that define the polygon.
          type: array
          items:
            $ref: '#/components/schemas/LatLng'
    TypeFilter:
      id: TypeFilter
      description: >-
        Place type filters. Only Place types from [Table
        a](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
        are supported. A place can only have a single primary type associated
        with it. For example, the primary type might be "mexican_restaurant" or
        "steak_house". Use included_primary_types and excluded_primary_types to
        filter the results on a place's primary type. A place can also have
        multiple type values associated with it. For example a restaurant might
        have the following types: "seafood_restaurant", "restaurant", "food",
        "point_of_interest", "establishment". Use included_types and
        excluded_types to filter the results on the list of types associated
        with a place. If a search is specified with multiple type restrictions,
        only places that satisfy all of the restrictions are returned. For
        example, if you specify {"included_types": ["restaurant"],
        "excluded_primary_types": ["steak_house"]}, the returned places provide
        "restaurant" related services but do not operate primarily as a
        "steak_house". If there are any conflicting types, i.e. a type appears
        in both included_types and excluded_types types or
        included_primary_types and excluded_primary_types, an INVALID_ARGUMENT
        error is returned. One of included_types or included_primary_types must
        be set.
      type: object
      properties:
        includedTypes:
          description: Optional. Included Place types.
          type: array
          items:
            type: string
        excludedTypes:
          description: Optional. Excluded Place types.
          type: array
          items:
            type: string
        includedPrimaryTypes:
          description: Optional. Included primary Place types.
          type: array
          items:
            type: string
        excludedPrimaryTypes:
          description: Optional. Excluded primary Place types.
          type: array
          items:
            type: string
    RatingFilter:
      id: RatingFilter
      description: Average user rating filters.
      type: object
      properties:
        minRating:
          description: >-
            Optional. Restricts results to places whose average user rating is
            greater than or equal to min_rating. Values must be between 1.0 and
            5.0.
          type: number
          format: float
        maxRating:
          description: >-
            Optional. Restricts results to places whose average user rating is
            strictly less than or equal to max_rating. Values must be between
            1.0 and 5.0.
          type: number
          format: float
    ComputeInsightsResponse:
      id: ComputeInsightsResponse
      description: Response for the ComputeInsights RPC.
      type: object
      properties:
        count:
          description: Result for Insights.INSIGHT_COUNT.
          type: string
          format: int64
        placeInsights:
          description: Result for Insights.INSIGHT_PLACES.
          type: array
          items:
            $ref: '#/components/schemas/PlaceInsight'
    PlaceInsight:
      id: PlaceInsight
      description: Holds information about a place
      type: object
      properties:
        place:
          description: >-
            The unique identifier of the place. This resource name can be used
            to retrieve details about the place using the [Places
            API](https://developers.google.com/maps/documentation/places/web-service/reference/rest/v1/places/get).
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    areainsights:
      id: google.areainsights.areainsights
      name: areainsights
      title: Areainsights
      methods:
        compute_insights:
          operation:
            $ref: '#/paths/~1v1:computeInsights/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1:computeInsights:
    parameters:
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        This method lets you retrieve insights about areas using a variety of
        filter such as: area, place type, operating status, price level and
        ratings. Currently "count" and "places" insights are supported. With
        "count" insights you can answer questions such as "How many restaurant
        are located in California that are operational, are inexpensive and have
        an average rating of at least 4 stars" (see `insight` enum for more
        details). With "places" insights, you can determine which places match
        the requested filter. Clients can then use those place resource names to
        fetch more details about each individual place using the Places API.
      operationId: areainsights.computeInsights
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputeInsightsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeInsightsResponse'
      parameters: []
