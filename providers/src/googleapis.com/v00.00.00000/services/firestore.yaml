openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Firestore API
  description: 'Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development. '
  version: v1
  x-discovery-doc-revision: '20230812'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/firestore'
servers:
  - url: 'https://firestore.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/datastore': View and manage your Google Cloud Datastore data
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    GoogleFirestoreAdminV1FieldOperationMetadata:
      id: GoogleFirestoreAdminV1FieldOperationMetadata
      properties:
        startTime:
          description: The time this operation started.
          format: google-datetime
          type: string
        progressDocuments:
          description: 'The progress, in documents, of this operation.'
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
        progressBytes:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
          description: 'The progress, in bytes, of this operation.'
        ttlConfigDelta:
          description: Describes the deltas of TTL configuration.
          $ref: '#/components/schemas/GoogleFirestoreAdminV1TtlConfigDelta'
        field:
          type: string
          description: 'The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`'
        state:
          description: The state of the operation.
          type: string
          enum:
            - OPERATION_STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
        endTime:
          type: string
          format: google-datetime
          description: The time this operation completed. Will be unset if operation still in progress.
        indexConfigDeltas:
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1IndexConfigDelta'
          description: 'A list of IndexConfigDelta, which describe the intent of this operation.'
      description: Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.
      type: object
    WriteRequest:
      type: object
      properties:
        streamId:
          type: string
          description: 'The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.'
        writes:
          type: array
          description: The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.
          items:
            $ref: '#/components/schemas/Write'
        streamToken:
          format: byte
          description: 'A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.'
          type: string
        labels:
          description: Labels associated with this write request.
          type: object
          additionalProperties:
            type: string
      id: WriteRequest
      description: 'The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.'
    GoogleFirestoreAdminV1Field:
      properties:
        name:
          type: string
          description: 'Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field''s resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.'
        ttlConfig:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1TtlConfig'
          description: The TTL configuration for this `Field`. Setting or unsetting this will enable or disable the TTL for documents that have this `Field`.
        indexConfig:
          description: 'The index configuration for this field. If unset, field indexing will revert to the configuration defined by the `ancestor_field`. To explicitly remove all indexes for this field, specify an index config with an empty list of indexes.'
          $ref: '#/components/schemas/GoogleFirestoreAdminV1IndexConfig'
      id: GoogleFirestoreAdminV1Field
      type: object
      description: 'Represents a single field in the database. Fields are grouped by their "Collection Group", which represent all collections in the database with the same id.'
    GoogleLongrunningListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/GoogleLongrunningOperation'
          description: A list of operations that matches the specified filter in the request.
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
      id: GoogleLongrunningListOperationsResponse
    GoogleFirestoreAdminV1ExportDocumentsResponse:
      properties:
        outputUriPrefix:
          description: Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully.
          type: string
      id: GoogleFirestoreAdminV1ExportDocumentsResponse
      description: Returned in the google.longrunning.Operation response field.
      type: object
    Document:
      description: A Firestore document. Must not exceed 1 MiB - 4 bytes.
      id: Document
      properties:
        name:
          description: 'The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.'
          type: string
        fields:
          additionalProperties:
            $ref: '#/components/schemas/Value'
          description: 'The document''s fields. The map keys represent field names. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by the simple or quoted field names of the containing fields, delimited by `.`. For example, the structured field `"foo" : { map_value: { "x&y" : { string_value: "hello" }}}` would be represented by the field path `foo.x&y`. Within a field path, a quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\`. For example, `` `x&y` `` represents `x&y` and `` `bak\`tik` `` represents `` bak`tik ``.'
          type: object
        createTime:
          description: Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.
          format: google-datetime
          type: string
      type: object
    BloomFilter:
      type: object
      id: BloomFilter
      properties:
        hashCount:
          type: integer
          format: int32
          description: The number of hashes used by the algorithm.
        bits:
          $ref: '#/components/schemas/BitSequence'
          description: The bloom filter data.
      description: 'A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2''s complement encoding. These two hash values, named `h1` and `h2`, are then used to compute the `hash_count` hash values using the formula, starting at `i=0`: h(i) = h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.'
    GoogleFirestoreAdminV1TtlConfig:
      type: object
      properties:
        state:
          description: Output only. The state of the TTL configuration.
          enumDescriptions:
            - The state is unspecified or unknown.
            - 'The TTL is being applied. There is an active long-running operation to track the change. Newly written documents will have TTLs applied as requested. Requested TTLs on existing documents are still being processed. When TTLs on all existing documents have been processed, the state will move to ''ACTIVE''.'
            - The TTL is active for all documents.
            - 'The TTL configuration could not be enabled for all existing documents. Newly written documents will continue to have their TTL applied. The LRO returned when last attempting to enable TTL for this `Field` has failed, and may have more details.'
          readOnly: true
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - NEEDS_REPAIR
      description: The TTL (time-to-live) configuration for documents that have this `Field` set. Storing a timestamp value into a TTL-enabled field will be treated as the document's absolute expiration time. Timestamp values in the past indicate that the document is eligible for immediate expiration. Using any other data type or leaving the field absent will disable expiration for the individual document.
      id: GoogleFirestoreAdminV1TtlConfig
    ListDocumentsResponse:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/Document'
          type: array
          description: The Documents found.
        nextPageToken:
          description: 'A token to retrieve the next page of documents. If this field is omitted, there are no subsequent pages.'
          type: string
      type: object
      description: The response for Firestore.ListDocuments.
      id: ListDocumentsResponse
    FieldReference:
      type: object
      properties:
        fieldPath:
          description: 'The relative path of the document being referenced. Requires: * Conform to document field name limitations.'
          type: string
      id: FieldReference
      description: 'A reference to a field in a document, ex: `stats.operations`.'
    ListCollectionIdsRequest:
      type: object
      properties:
        readTime:
          format: google-datetime
          description: 'Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
          type: string
        pageSize:
          description: The maximum number of results to return.
          type: integer
          format: int32
        pageToken:
          description: A page token. Must be a value from ListCollectionIdsResponse.
          type: string
      id: ListCollectionIdsRequest
      description: The request for Firestore.ListCollectionIds.
    GoogleFirestoreAdminV1Stats:
      id: GoogleFirestoreAdminV1Stats
      properties:
        documentCount:
          type: string
          format: int64
          readOnly: true
          description: Output only. The total number of documents contained in the backup.
        sizeBytes:
          description: 'Output only. Summation of the size of all documents and index entries in the backup, measured in bytes.'
          type: string
          readOnly: true
          format: int64
        indexCount:
          description: Output only. The total number of index entries contained in the backup.
          readOnly: true
          format: int64
          type: string
      description: Backup specific statistics.
      type: object
    RollbackRequest:
      type: object
      properties:
        transaction:
          format: byte
          description: Required. The transaction to roll back.
          type: string
      description: The request for Firestore.Rollback.
      id: RollbackRequest
    RunQueryRequest:
      description: The request for Firestore.RunQuery.
      properties:
        transaction:
          type: string
          description: Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.
          format: byte
        newTransaction:
          description: Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.
          $ref: '#/components/schemas/TransactionOptions'
        readTime:
          format: google-datetime
          description: 'Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
          type: string
        structuredQuery:
          $ref: '#/components/schemas/StructuredQuery'
          description: A structured query.
      type: object
      id: RunQueryRequest
    GoogleFirestoreAdminV1UpdateDatabaseMetadata:
      description: Metadata related to the update database operation.
      type: object
      properties: {}
      id: GoogleFirestoreAdminV1UpdateDatabaseMetadata
    GoogleFirestoreAdminV1IndexOperationMetadata:
      type: object
      description: Metadata for google.longrunning.Operation results from FirestoreAdmin.CreateIndex.
      properties:
        index:
          description: 'The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`'
          type: string
        startTime:
          format: google-datetime
          type: string
          description: The time this operation started.
        progressDocuments:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
          description: 'The progress, in documents, of this operation.'
        progressBytes:
          description: 'The progress, in bytes, of this operation.'
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
        state:
          enum:
            - OPERATION_STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
          type: string
          description: The state of the operation.
        endTime:
          type: string
          description: The time this operation completed. Will be unset if operation still in progress.
          format: google-datetime
      id: GoogleFirestoreAdminV1IndexOperationMetadata
    ArrayValue:
      id: ArrayValue
      type: object
      description: An array value.
      properties:
        values:
          type: array
          description: Values in the array.
          items:
            $ref: '#/components/schemas/Value'
    GoogleFirestoreAdminV1DailyRecurrence:
      type: object
      description: Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.
      id: GoogleFirestoreAdminV1DailyRecurrence
      properties: {}
    GoogleFirestoreAdminV1ImportDocumentsMetadata:
      properties:
        startTime:
          description: The time this operation started.
          format: google-datetime
          type: string
        progressDocuments:
          description: 'The progress, in documents, of this operation.'
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
        endTime:
          description: The time this operation completed. Will be unset if operation still in progress.
          type: string
          format: google-datetime
        operationState:
          type: string
          enum:
            - OPERATION_STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          description: The state of the import operation.
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
        namespaceIds:
          description: Which namespace ids are being imported.
          items:
            type: string
          type: array
        inputUriPrefix:
          type: string
          description: The location of the documents being imported.
        progressBytes:
          description: 'The progress, in bytes, of this operation.'
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
        collectionIds:
          description: Which collection ids are being imported.
          type: array
          items:
            type: string
      type: object
      description: Metadata for google.longrunning.Operation results from FirestoreAdmin.ImportDocuments.
      id: GoogleFirestoreAdminV1ImportDocumentsMetadata
    TransactionOptions:
      properties:
        readWrite:
          $ref: '#/components/schemas/ReadWrite'
          description: The transaction can be used for both read and write operations.
        readOnly:
          description: The transaction can only be used for read operations.
          $ref: '#/components/schemas/ReadOnly'
      id: TransactionOptions
      description: Options for creating a new transaction.
      type: object
    PartitionQueryRequest:
      properties:
        pageSize:
          format: int32
          type: integer
          description: 'The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.'
        structuredQuery:
          $ref: '#/components/schemas/StructuredQuery'
          description: 'A structured query. Query must specify collection with all descendants and be ordered by name ascending. Other filters, order bys, limits, offsets, and start/end cursors are not supported.'
        partitionCount:
          description: 'The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.'
          type: string
          format: int64
        pageToken:
          type: string
          description: 'The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W'
        readTime:
          description: 'Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
          type: string
          format: google-datetime
      description: The request for Firestore.PartitionQuery.
      type: object
      id: PartitionQueryRequest
    DocumentTransform:
      id: DocumentTransform
      properties:
        fieldTransforms:
          description: 'The list of transformations to apply to the fields of the document, in order. This must not be empty.'
          type: array
          items:
            $ref: '#/components/schemas/FieldTransform'
        document:
          description: The name of the document to transform.
          type: string
      description: A transformation of a document.
      type: object
    CompositeFilter:
      description: A filter that merges multiple other filters using the given operator.
      type: object
      id: CompositeFilter
      properties:
        filters:
          items:
            $ref: '#/components/schemas/Filter'
          description: 'The list of filters to combine. Requires: * At least one filter is present.'
          type: array
        op:
          enum:
            - OPERATOR_UNSPECIFIED
            - AND
            - OR
          enumDescriptions:
            - Unspecified. This value must not be used.
            - Documents are required to satisfy all of the combined filters.
            - Documents are required to satisfy at least one of the combined filters.
          description: The operator for combining multiple filters.
          type: string
    Aggregation:
      description: Defines an aggregation that produces a single result.
      id: Aggregation
      type: object
      properties:
        alias:
          type: string
          description: 'Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.'
        sum:
          description: Sum aggregator.
          $ref: '#/components/schemas/Sum'
        avg:
          $ref: '#/components/schemas/Avg'
          description: Average aggregator.
        count:
          description: Count aggregator.
          $ref: '#/components/schemas/Count'
    UnaryFilter:
      id: UnaryFilter
      properties:
        field:
          $ref: '#/components/schemas/FieldReference'
          description: The field to which to apply the operator.
        op:
          type: string
          description: The unary operator to apply.
          enumDescriptions:
            - Unspecified. This value must not be used.
            - The given `field` is equal to `NaN`.
            - The given `field` is equal to `NULL`.
            - 'The given `field` is not equal to `NaN`. Requires: * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.'
            - 'The given `field` is not equal to `NULL`. Requires: * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.'
          enum:
            - OPERATOR_UNSPECIFIED
            - IS_NAN
            - IS_NULL
            - IS_NOT_NAN
            - IS_NOT_NULL
      type: object
      description: A filter with a single operand.
    ReadWrite:
      properties:
        retryTransaction:
          type: string
          description: An optional transaction to retry.
          format: byte
      id: ReadWrite
      description: Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions.
      type: object
    GoogleFirestoreAdminV1RestoreDatabaseMetadata:
      type: object
      id: GoogleFirestoreAdminV1RestoreDatabaseMetadata
      properties:
        database:
          description: The name of the database being restored to.
          type: string
        operationState:
          type: string
          enum:
            - OPERATION_STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
          description: The operation state of the restore.
        startTime:
          type: string
          description: The time the restore was started.
          format: google-datetime
        progressPercentage:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
          description: How far along the restore is as an estimated percentage of remaining time.
        endTime:
          format: google-datetime
          type: string
          description: 'The time the restore finished, unset for ongoing restores.'
        backup:
          type: string
          description: The name of the backup restoring from.
      description: Metadata for the long-running operation from the RestoreDatabase request.
    DocumentDelete:
      id: DocumentDelete
      properties:
        readTime:
          format: google-datetime
          type: string
          description: The read timestamp at which the delete was observed. Greater or equal to the `commit_time` of the delete.
        removedTargetIds:
          description: A set of target IDs for targets that previously matched this entity.
          items:
            format: int32
            type: integer
          type: array
        document:
          type: string
          description: The resource name of the Document that was deleted.
      type: object
      description: 'A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.'
    PartitionQueryResponse:
      description: The response for Firestore.PartitionQuery.
      properties:
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/Cursor'
          description: 'Partition results. Each partition is a split point that can be used by RunQuery as a starting or end point for the query results. The RunQuery requests must be made with the same query supplied to this PartitionQuery request. The partition cursors will be ordered according to same ordering as the results of the query supplied to PartitionQuery. For example, if a PartitionQuery request returns partition cursors A and B, running the following three queries will return the entire result set of the original query: * query, end_at A * query, start_at A, end_at B * query, start_at B An empty result may indicate that the query has too few results to be partitioned.'
        nextPageToken:
          type: string
          description: 'A page token that may be used to request an additional set of results, up to the number specified by `partition_count` in the PartitionQuery request. If blank, there are no more results.'
      id: PartitionQueryResponse
      type: object
    GoogleFirestoreAdminV1Index:
      id: GoogleFirestoreAdminV1Index
      description: Cloud Firestore indexes enable simple and complex queries against documents in a database.
      type: object
      properties:
        state:
          enumDescriptions:
            - The state is unspecified.
            - The index is being created. There is an active long-running operation for the index. The index is updated when writing a document. Some index data may exist.
            - The index is ready to be used. The index is updated when writing a document. The index is fully populated from all stored documents it applies to.
            - 'The index was being created, but something went wrong. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing a document. Some index data may exist. Use the google.longrunning.Operations API to determine why the operation that last attempted to create this index failed, then re-create the index.'
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - NEEDS_REPAIR
          description: Output only. The serving state of the index.
        apiScope:
          enumDescriptions:
            - The index can only be used by the Firestore Native query API. This is the default.
            - The index can only be used by the Firestore in Datastore Mode query API.
          description: The API scope supported by this index.
          enum:
            - ANY_API
            - DATASTORE_MODE_API
          type: string
        fields:
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1IndexField'
          description: 'The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.'
          type: array
        queryScope:
          type: string
          enumDescriptions:
            - The query scope is unspecified. Not a valid option.
            - 'Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection id specified by the index.'
            - Indexes with a collection group query scope specified allow queries against all collections that has the collection id specified by the index.
            - Include all the collections's ancestor in the index. Only available for Datastore Mode databases.
          description: 'Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.'
          enum:
            - QUERY_SCOPE_UNSPECIFIED
            - COLLECTION
            - COLLECTION_GROUP
            - COLLECTION_RECURSIVE
        name:
          description: 'Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.'
          type: string
    GoogleFirestoreAdminV1Database:
      properties:
        appEngineIntegrationMode:
          description: The App Engine integration mode to use for this database.
          enumDescriptions:
            - Not used.
            - 'If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.'
            - App Engine has no effect on the ability of this database to serve requests. This is the default setting for databases created with the Firestore API.
          type: string
          enum:
            - APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED
            - ENABLED
            - DISABLED
        earliestVersionTime:
          readOnly: true
          description: 'Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.'
          format: google-datetime
          type: string
        type:
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - FIRESTORE_NATIVE
            - DATASTORE_MODE
          description: 'The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.'
          type: string
          enumDescriptions:
            - The default value. This value is used if the database type is omitted.
            - Firestore Native Mode
            - Firestore in Datastore Mode.
        versionRetentionPeriod:
          readOnly: true
          format: google-duration
          type: string
          description: 'Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.'
        concurrencyMode:
          enumDescriptions:
            - Not used.
            - Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.
            - Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.
            - Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended.
          description: The concurrency control mode to use for this database.
          type: string
          enum:
            - CONCURRENCY_MODE_UNSPECIFIED
            - OPTIMISTIC
            - PESSIMISTIC
            - OPTIMISTIC_WITH_ENTITY_GROUPS
        createTime:
          format: google-datetime
          type: string
          description: Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
          readOnly: true
        keyPrefix:
          readOnly: true
          type: string
          description: 'Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).'
        name:
          description: 'The resource name of the Database. Format: `projects/{project}/databases/{database}`'
          type: string
        pointInTimeRecoveryEnablement:
          description: Whether to enable the PITR feature on this database.
          type: string
          enum:
            - POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED
            - POINT_IN_TIME_RECOVERY_ENABLED
            - POINT_IN_TIME_RECOVERY_DISABLED
          enumDescriptions:
            - Not used.
            - 'Reads are supported on selected versions of the data from within the past 7 days: * Reads against any timestamp within the past hour * Reads against 1-minute snapshots beyond 1 hour and within 7 days `version_retention_period` and `earliest_version_time` can be used to determine the supported versions.'
            - Reads are supported on any version of the data from within the past 1 hour.
        uid:
          type: string
          description: Output only. The system-generated UUID4 for this Database.
          readOnly: true
        updateTime:
          description: Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
          type: string
          format: google-datetime
          readOnly: true
        etag:
          type: string
          description: 'This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.'
        locationId:
          type: string
          description: 'The location of the database. Available databases are listed at https://cloud.google.com/firestore/docs/locations.'
        deleteProtectionState:
          type: string
          enum:
            - DELETE_PROTECTION_STATE_UNSPECIFIED
            - DELETE_PROTECTION_DISABLED
            - DELETE_PROTECTION_ENABLED
          description: State of delete protection for the database.
          enumDescriptions:
            - The default value. Delete protection type is not specified
            - Delete protection is disabled
            - Delete protection is enabled
      description: A Cloud Firestore Database. Currently only one database is allowed per cloud project; this database must have a `database_id` of '(default)'.
      id: GoogleFirestoreAdminV1Database
      type: object
    Order:
      properties:
        direction:
          enumDescriptions:
            - Unspecified.
            - Ascending.
            - Descending.
          type: string
          enum:
            - DIRECTION_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          description: The direction to order by. Defaults to `ASCENDING`.
        field:
          $ref: '#/components/schemas/FieldReference'
          description: The field to order by.
      id: Order
      type: object
      description: An order on a field.
    Count:
      type: object
      description: Count of documents that match the query. The `COUNT(*)` aggregation function operates on the entire document so it does not require a field reference.
      id: Count
      properties:
        upTo:
          description: 'Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.'
          format: int64
          type: string
    BatchGetDocumentsRequest:
      id: BatchGetDocumentsRequest
      type: object
      description: The request for Firestore.BatchGetDocuments.
      properties:
        newTransaction:
          description: Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.
          $ref: '#/components/schemas/TransactionOptions'
        mask:
          $ref: '#/components/schemas/DocumentMask'
          description: 'The fields to return. If not set, returns all fields. If a document has a field that is not present in this mask, that field will not be returned in the response.'
        documents:
          type: array
          description: 'The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.'
          items:
            type: string
        readTime:
          type: string
          format: google-datetime
          description: 'Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
        transaction:
          description: Reads documents in a transaction.
          format: byte
          type: string
    ListCollectionIdsResponse:
      type: object
      id: ListCollectionIdsResponse
      properties:
        collectionIds:
          description: The collection ids.
          items:
            type: string
          type: array
        nextPageToken:
          description: A page token that may be used to continue the list.
          type: string
      description: The response from Firestore.ListCollectionIds.
    GoogleLongrunningOperation:
      id: GoogleLongrunningOperation
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        response:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          type: object
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
    GoogleFirestoreAdminV1ListFieldsResponse:
      id: GoogleFirestoreAdminV1ListFieldsResponse
      properties:
        nextPageToken:
          type: string
          description: 'A page token that may be used to request another page of results. If blank, this is the last page.'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1Field'
          description: The requested fields.
      type: object
      description: The response for FirestoreAdmin.ListFields.
    Projection:
      description: The projection of document's fields to return.
      id: Projection
      properties:
        fields:
          description: 'The fields to return. If empty, all fields are returned. To only return the name of the document, use `[''__name__'']`.'
          type: array
          items:
            $ref: '#/components/schemas/FieldReference'
      type: object
    GoogleFirestoreAdminV1ExportDocumentsRequest:
      description: The request for FirestoreAdmin.ExportDocuments.
      id: GoogleFirestoreAdminV1ExportDocumentsRequest
      type: object
      properties:
        namespaceIds:
          items:
            type: string
          description: 'An empty list represents all namespaces. This is the preferred usage for databases that don''t use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn''t want to include them. Each namespace in this list must be unique.'
          type: array
        collectionIds:
          description: Which collection ids to export. Unspecified means all collections.
          items:
            type: string
          type: array
        snapshotTime:
          format: google-datetime
          type: string
          description: 'The timestamp that corresponds to the version of the database to be exported. The timestamp must be rounded to the minute, in the past, and not older than 1 hour. If specified, then the exported documents will represent a consistent view of the database at the provided time. Otherwise, there are no guarantees about the consistency of the exported documents.'
        outputUriPrefix:
          description: 'The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.'
          type: string
    RunAggregationQueryResponse:
      id: RunAggregationQueryResponse
      type: object
      description: The response for Firestore.RunAggregationQuery.
      properties:
        transaction:
          format: byte
          type: string
          description: The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.
        result:
          description: A single aggregation result. Not present when reporting partial progress.
          $ref: '#/components/schemas/AggregationResult'
        readTime:
          type: string
          format: google-datetime
          description: 'The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.'
    StructuredAggregationQuery:
      type: object
      id: StructuredAggregationQuery
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/Aggregation'
          description: 'Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.'
        structuredQuery:
          $ref: '#/components/schemas/StructuredQuery'
          description: Nested structured query.
      description: Firestore query for running an aggregation over a StructuredQuery.
    WriteResponse:
      id: WriteResponse
      properties:
        streamId:
          type: string
          description: 'The ID of the stream. Only set on the first message, when a new stream was created.'
        writeResults:
          items:
            $ref: '#/components/schemas/WriteResult'
          description: The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
          type: array
        streamToken:
          type: string
          format: byte
          description: A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.
        commitTime:
          type: string
          format: google-datetime
          description: The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write.
      type: object
      description: The response for Firestore.Write.
    GoogleFirestoreAdminV1ExportDocumentsMetadata:
      properties:
        collectionIds:
          items:
            type: string
          description: Which collection ids are being exported.
          type: array
        snapshotTime:
          description: 'The timestamp that corresponds to the version of the database that is being exported. If unspecified, there are no guarantees about the consistency of the documents being exported.'
          format: google-datetime
          type: string
        namespaceIds:
          description: Which namespace ids are being exported.
          items:
            type: string
          type: array
        outputUriPrefix:
          description: Where the documents are being exported to.
          type: string
        operationState:
          type: string
          description: The state of the export operation.
          enum:
            - OPERATION_STATE_UNSPECIFIED
            - INITIALIZING
            - PROCESSING
            - CANCELLING
            - FINALIZING
            - SUCCESSFUL
            - FAILED
            - CANCELLED
          enumDescriptions:
            - Unspecified.
            - Request is being prepared for processing.
            - Request is actively being processed.
            - Request is in the process of being cancelled after user called google.longrunning.Operations.CancelOperation on the operation.
            - Request has been processed and is in its finalization stage.
            - Request has completed successfully.
            - 'Request has finished being processed, but encountered an error.'
            - Request has finished being cancelled after user called google.longrunning.Operations.CancelOperation.
        progressBytes:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
          description: 'The progress, in bytes, of this operation.'
        startTime:
          description: The time this operation started.
          format: google-datetime
          type: string
        progressDocuments:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Progress'
          description: 'The progress, in documents, of this operation.'
        endTime:
          description: The time this operation completed. Will be unset if operation still in progress.
          type: string
          format: google-datetime
      description: Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments.
      type: object
      id: GoogleFirestoreAdminV1ExportDocumentsMetadata
    QueryTarget:
      properties:
        structuredQuery:
          description: A structured query.
          $ref: '#/components/schemas/StructuredQuery'
        parent:
          description: 'The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`'
          type: string
      type: object
      description: A target specified by a query.
      id: QueryTarget
    DocumentsTarget:
      description: A target specified by a set of documents names.
      type: object
      properties:
        documents:
          description: 'The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.'
          items:
            type: string
          type: array
      id: DocumentsTarget
    TargetChange:
      properties:
        resumeToken:
          type: string
          format: byte
          description: 'A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.'
        cause:
          description: 'The error that resulted in this change, if applicable.'
          $ref: '#/components/schemas/Status'
        targetChangeType:
          type: string
          enum:
            - NO_CHANGE
            - ADD
            - REMOVE
            - CURRENT
            - RESET
          description: The type of change that occurred.
          enumDescriptions:
            - No change has occurred. Used only to send an updated `resume_token`.
            - The targets have been added.
            - The targets have been removed.
            - The targets reflect all changes committed before the targets were added to the stream. This will be sent after or with a `read_time` that is greater than or equal to the time at which the targets were added. Listeners can wait for this change if read-after-write semantics are desired.
            - 'The targets have been reset, and a new initial state for the targets will be returned in subsequent changes. After the initial state is complete, `CURRENT` will be returned even if the target was previously indicated to be `CURRENT`.'
        targetIds:
          items:
            format: int32
            type: integer
          type: array
          description: 'The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.'
        readTime:
          description: 'The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.'
          format: google-datetime
          type: string
      id: TargetChange
      description: Targets being watched have changed.
      type: object
    GoogleFirestoreAdminV1TtlConfigDelta:
      id: GoogleFirestoreAdminV1TtlConfigDelta
      properties:
        changeType:
          enum:
            - CHANGE_TYPE_UNSPECIFIED
            - ADD
            - REMOVE
          type: string
          description: Specifies how the TTL configuration is changing.
          enumDescriptions:
            - The type of change is not specified or known.
            - The TTL config is being added.
            - The TTL config is being removed.
      type: object
      description: Information about a TTL configuration change.
    GoogleFirestoreAdminV1IndexField:
      id: GoogleFirestoreAdminV1IndexField
      description: 'A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.'
      properties:
        order:
          description: 'Indicates that this field supports ordering by the specified order or comparing using =, !=, <, <=, >, >=.'
          type: string
          enum:
            - ORDER_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          enumDescriptions:
            - The ordering is unspecified. Not a valid option.
            - The field is ordered by ascending field value.
            - The field is ordered by descending field value.
        arrayConfig:
          type: string
          enum:
            - ARRAY_CONFIG_UNSPECIFIED
            - CONTAINS
          enumDescriptions:
            - The index does not support additional array queries.
            - The index supports array containment queries.
          description: Indicates that this field supports operations on `array_value`s.
        fieldPath:
          description: 'Can be __name__. For single field indexes, this must match the name of the field or may be omitted.'
          type: string
      type: object
    RunAggregationQueryRequest:
      id: RunAggregationQueryRequest
      properties:
        transaction:
          type: string
          description: Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
          format: byte
        readTime:
          type: string
          format: google-datetime
          description: 'Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
        newTransaction:
          $ref: '#/components/schemas/TransactionOptions'
          description: 'Starts a new transaction as part of the query, defaulting to read-only. The new transaction ID will be returned as the first response in the stream.'
        structuredAggregationQuery:
          $ref: '#/components/schemas/StructuredAggregationQuery'
          description: An aggregation query.
      type: object
      description: The request for Firestore.RunAggregationQuery.
    GoogleFirestoreAdminV1RestoreDatabaseRequest:
      id: GoogleFirestoreAdminV1RestoreDatabaseRequest
      description: The request message for FirestoreAdmin.RestoreDatabase.
      properties:
        databaseId:
          type: string
          description: 'Required. The ID to use for the database, which will become the final component of the database''s resource name. This database id must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.'
        backup:
          type: string
          description: 'Required. Backup to restore from. Must be from the same project as the parent. Format is: `projects/{project_id}/locations/{location}/backups/{backup}`'
      type: object
    WriteResult:
      description: The result of applying a write.
      id: WriteResult
      type: object
      properties:
        transformResults:
          description: 'The results of applying each DocumentTransform.FieldTransform, in the same order.'
          items:
            $ref: '#/components/schemas/Value'
          type: array
        updateTime:
          description: 'The last update time of the document after applying the write. Not set after a `delete`. If the write did not actually change the document, this will be the previous update_time.'
          format: google-datetime
          type: string
    GoogleFirestoreAdminV1ImportDocumentsRequest:
      type: object
      description: The request for FirestoreAdmin.ImportDocuments.
      id: GoogleFirestoreAdminV1ImportDocumentsRequest
      properties:
        collectionIds:
          type: array
          description: Which collection ids to import. Unspecified means all collections included in the import.
          items:
            type: string
        inputUriPrefix:
          type: string
          description: 'Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.'
        namespaceIds:
          items:
            type: string
          type: array
          description: 'An empty list represents all namespaces. This is the preferred usage for databases that don''t use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn''t want to include them. Each namespace in this list must be unique.'
    GoogleFirestoreAdminV1Progress:
      properties:
        completedWork:
          type: string
          format: int64
          description: The amount of work completed.
        estimatedWork:
          description: The amount of work estimated.
          type: string
          format: int64
      type: object
      id: GoogleFirestoreAdminV1Progress
      description: Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
    CommitRequest:
      type: object
      id: CommitRequest
      description: The request for Firestore.Commit.
      properties:
        writes:
          items:
            $ref: '#/components/schemas/Write'
          type: array
          description: The writes to apply. Always executed atomically and in order.
        transaction:
          type: string
          description: 'If set, applies all writes in this transaction, and commits it.'
          format: byte
    MapValue:
      type: object
      id: MapValue
      description: A map value.
      properties:
        fields:
          description: 'The map''s fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.'
          additionalProperties:
            $ref: '#/components/schemas/Value'
          type: object
    BatchWriteRequest:
      id: BatchWriteRequest
      type: object
      description: The request for Firestore.BatchWrite.
      properties:
        labels:
          type: object
          description: Labels associated with this batch write.
          additionalProperties:
            type: string
        writes:
          items:
            $ref: '#/components/schemas/Write'
          description: The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.
          type: array
    FieldTransform:
      description: A transformation of a field of the document.
      type: object
      id: FieldTransform
      properties:
        increment:
          $ref: '#/components/schemas/Value'
          description: 'Adds the given value to the field''s current value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If either of the given value or the current field value are doubles, both values will be interpreted as doubles. Double arithmetic and representation of double values follow IEEE 754 semantics. If there is positive/negative integer overflow, the field is resolved to the largest magnitude positive/negative integer.'
        fieldPath:
          description: The path of the field. See Document.fields for the field path syntax reference.
          type: string
        minimum:
          description: 'Sets the field to the minimum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the input value. If a minimum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the smaller operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and zero input value is always the stored value. The minimum of any numeric value x and NaN is NaN.'
          $ref: '#/components/schemas/Value'
        setToServerValue:
          enum:
            - SERVER_VALUE_UNSPECIFIED
            - REQUEST_TIME
          enumDescriptions:
            - Unspecified. This value must not be used.
            - 'The time at which the server processed the request, with millisecond precision. If used on multiple fields (same or different documents) in a transaction, all the fields will get the same server timestamp.'
          type: string
          description: Sets the field to the given server value.
        maximum:
          $ref: '#/components/schemas/Value'
          description: 'Sets the field to the maximum of its current value and the given value. This must be an integer or a double value. If the field is not an integer or double, or if the field does not yet exist, the transformation will set the field to the given value. If a maximum operation is applied where the field and the input value are of mixed types (that is - one is an integer and one is a double) the field takes on the type of the larger operand. If the operands are equivalent (e.g. 3 and 3.0), the field does not change. 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and zero input value is always the stored value. The maximum of any numeric value x and NaN is NaN.'
        appendMissingElements:
          $ref: '#/components/schemas/ArrayValue'
          description: 'Append the given elements in order if they are not already present in the current field value. If the field is not an array, or if the field does not yet exist, it is first set to the empty array. Equivalent numbers of different types (e.g. 3L and 3.0) are considered equal when checking if a value is missing. NaN is equal to NaN, and Null is equal to Null. If the input contains multiple equivalent values, only the first will be considered. The corresponding transform_result will be the null value.'
        removeAllFromArray:
          $ref: '#/components/schemas/ArrayValue'
          description: 'Remove all of the given elements from the array in the field. If the field is not an array, or if the field does not yet exist, it is set to the empty array. Equivalent numbers of the different types (e.g. 3L and 3.0) are considered equal when deciding whether an element should be removed. NaN is equal to NaN, and Null is equal to Null. This will remove all equivalent values if there are duplicates. The corresponding transform_result will be the null value.'
    LatLng:
      type: object
      description: 'An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.'
      properties:
        longitude:
          type: number
          format: double
          description: 'The longitude in degrees. It must be in the range [-180.0, +180.0].'
        latitude:
          description: 'The latitude in degrees. It must be in the range [-90.0, +90.0].'
          format: double
          type: number
      id: LatLng
    GoogleFirestoreAdminV1Backup:
      description: A Backup of a Cloud Firestore Database. The backup contains all documents and index configurations for the given database at specific point in time.
      type: object
      id: GoogleFirestoreAdminV1Backup
      properties:
        name:
          description: 'Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.'
          type: string
          readOnly: true
        state:
          enumDescriptions:
            - The state is unspecified.
            - The pending backup is still being created. Operations on the backup will be rejected in this state.
            - The backup is complete and ready to use.
            - The backup is not available at this moment.
          description: Output only. The current state of the backup.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - NOT_AVAILABLE
          type: string
          readOnly: true
        databaseUid:
          type: string
          readOnly: true
          description: Output only. The system-generated UUID4 for the Firestore database that the backup is from.
        stats:
          readOnly: true
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Stats'
          description: Output only. Statistics about the backup. This data only becomes available after the backup is fully materialized to secondary storage. This field will be empty till then.
        expireTime:
          type: string
          readOnly: true
          description: Output only. The timestamp at which this backup expires.
          format: google-datetime
        database:
          description: 'Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`.'
          type: string
          readOnly: true
        snapshotTime:
          type: string
          description: Output only. The backup contains an externally consistent copy of the database at this time.
          readOnly: true
          format: google-datetime
    GoogleFirestoreAdminV1WeeklyRecurrence:
      description: Represents a recurring schedule that runs on a specified day of the week. The time zone is UTC.
      properties:
        day:
          enum:
            - DAY_OF_WEEK_UNSPECIFIED
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
            - SUNDAY
          enumDescriptions:
            - The day of the week is unspecified.
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          description: The day of week to run. DAY_OF_WEEK_UNSPECIFIED is not allowed.
          type: string
      id: GoogleFirestoreAdminV1WeeklyRecurrence
      type: object
    GoogleFirestoreAdminV1ListBackupsResponse:
      description: The response for FirestoreAdmin.ListBackups.
      type: object
      properties:
        unreachable:
          type: array
          items:
            type: string
          description: 'List of locations that existing backups were not able to be fetched from. Instead of failing the entire requests when a single location is unreachable, this response returns a partial result set and list of locations unable to be reached here. The request can be retried against a single location to get a concrete error.'
        backups:
          description: 'List of all backups for the project. Ordered by `location ASC, create_time DESC, name ASC`.'
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1Backup'
      id: GoogleFirestoreAdminV1ListBackupsResponse
    Location:
      description: A resource that represents a Google Cloud location.
      id: Location
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        metadata:
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
    GoogleFirestoreAdminV1ListIndexesResponse:
      properties:
        nextPageToken:
          description: 'A page token that may be used to request another page of results. If blank, this is the last page.'
          type: string
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1Index'
          description: The requested indexes.
      description: The response for FirestoreAdmin.ListIndexes.
      type: object
      id: GoogleFirestoreAdminV1ListIndexesResponse
    BitSequence:
      description: 'A sequence of bits, encoded in a byte array. Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The `padding` defines the number of bits of the last byte to be ignored as "padding". The values of these "padding" bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`. To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`. To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`. To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`. To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 << (n % 8))) != 0`. The "size" of a `BitSequence` (the number of bits it contains) is calculated by this formula: `(bitmap.length * 8) - padding`.'
      id: BitSequence
      properties:
        bitmap:
          description: The bytes that encode the bit sequence. May have a length of zero.
          format: byte
          type: string
        padding:
          description: 'The number of bits of the last byte in `bitmap` to ignore as "padding". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.'
          type: integer
          format: int32
      type: object
    ListenRequest:
      id: ListenRequest
      description: A request for Firestore.Listen
      type: object
      properties:
        addTarget:
          description: A target to add to this stream.
          $ref: '#/components/schemas/Target'
        removeTarget:
          type: integer
          description: The ID of a target to remove from this stream.
          format: int32
        labels:
          additionalProperties:
            type: string
          description: Labels associated with this target change.
          type: object
    BeginTransactionRequest:
      type: object
      description: The request for Firestore.BeginTransaction.
      properties:
        options:
          $ref: '#/components/schemas/TransactionOptions'
          description: The options for the transaction. Defaults to a read-write transaction.
      id: BeginTransactionRequest
    Filter:
      type: object
      properties:
        fieldFilter:
          $ref: '#/components/schemas/FieldFilter'
          description: A filter on a document field.
        compositeFilter:
          $ref: '#/components/schemas/CompositeFilter'
          description: A composite filter.
        unaryFilter:
          description: A filter that takes exactly one argument.
          $ref: '#/components/schemas/UnaryFilter'
      id: Filter
      description: A filter.
    AggregationResult:
      type: object
      id: AggregationResult
      properties:
        aggregateFields:
          additionalProperties:
            $ref: '#/components/schemas/Value'
          description: 'The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.'
          type: object
      description: 'The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.'
    GoogleFirestoreAdminV1LocationMetadata:
      id: GoogleFirestoreAdminV1LocationMetadata
      description: The metadata message for google.cloud.location.Location.metadata.
      type: object
      properties: {}
    ExistenceFilter:
      description: A digest of all the documents that match a given target.
      type: object
      properties:
        unchangedNames:
          description: 'A bloom filter that, despite its name, contains the UTF-8 byte encodings of the resource names of ALL the documents that match target_id, in the form `projects/{project_id}/databases/{database_id}/documents/{document_path}`. This bloom filter may be omitted at the server''s discretion, such as if it is deemed that the client will not make use of it or if it is too computationally expensive to calculate or transmit. Clients must gracefully handle this field being absent by falling back to the logic used before this field existed; that is, re-add the target without a resume token to figure out which documents in the client''s cache are out of sync.'
          $ref: '#/components/schemas/BloomFilter'
        targetId:
          type: integer
          description: The target ID to which this filter applies.
          format: int32
        count:
          format: int32
          type: integer
          description: 'The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.'
      id: ExistenceFilter
    Status:
      type: object
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          type: integer
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
        details:
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
      id: Status
    Value:
      id: Value
      description: A message that can hold any of the supported value types.
      properties:
        doubleValue:
          format: double
          type: number
          description: A double value.
        integerValue:
          format: int64
          type: string
          description: An integer value.
        stringValue:
          description: 'A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.'
          type: string
        referenceValue:
          description: 'A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.'
          type: string
        booleanValue:
          description: A boolean value.
          type: boolean
        arrayValue:
          description: 'An array value. Cannot directly contain another array value, though can contain an map which contains another array.'
          $ref: '#/components/schemas/ArrayValue'
        mapValue:
          description: A map value.
          $ref: '#/components/schemas/MapValue'
        bytesValue:
          description: 'A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.'
          format: byte
          type: string
        nullValue:
          enum:
            - NULL_VALUE
          type: string
          enumDescriptions:
            - Null value.
          description: A null value.
        geoPointValue:
          description: A geo point value representing a point on the surface of Earth.
          $ref: '#/components/schemas/LatLng'
        timestampValue:
          description: 'A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.'
          type: string
          format: google-datetime
      type: object
    BatchWriteResponse:
      id: BatchWriteResponse
      type: object
      description: The response from Firestore.BatchWrite.
      properties:
        writeResults:
          type: array
          items:
            $ref: '#/components/schemas/WriteResult'
          description: The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
        status:
          type: array
          description: The status of applying the writes. This i-th write status corresponds to the i-th write in the request.
          items:
            $ref: '#/components/schemas/Status'
    CommitResponse:
      id: CommitResponse
      properties:
        writeResults:
          type: array
          description: The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
          items:
            $ref: '#/components/schemas/WriteResult'
        commitTime:
          description: The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the commit.
          type: string
          format: google-datetime
      type: object
      description: The response for Firestore.Commit.
    BatchGetDocumentsResponse:
      id: BatchGetDocumentsResponse
      properties:
        missing:
          type: string
          description: 'A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.'
        found:
          description: A document that was requested.
          $ref: '#/components/schemas/Document'
        transaction:
          type: string
          format: byte
          description: 'The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request.'
        readTime:
          format: google-datetime
          description: 'The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.'
          type: string
      description: The streamed response for Firestore.BatchGetDocuments.
      type: object
    ListenResponse:
      id: ListenResponse
      type: object
      properties:
        targetChange:
          description: Targets have changed.
          $ref: '#/components/schemas/TargetChange'
        documentChange:
          description: A Document has changed.
          $ref: '#/components/schemas/DocumentChange'
        documentRemove:
          $ref: '#/components/schemas/DocumentRemove'
          description: A Document has been removed from a target (because it is no longer relevant to that target).
        documentDelete:
          $ref: '#/components/schemas/DocumentDelete'
          description: A Document has been deleted.
        filter:
          $ref: '#/components/schemas/ExistenceFilter'
          description: 'A filter to apply to the set of documents previously returned for the given target. Returned when documents may have been removed from the given target, but the exact documents are unknown.'
      description: The response for Firestore.Listen.
    GoogleFirestoreAdminV1BackupSchedule:
      description: 'A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.'
      type: object
      id: GoogleFirestoreAdminV1BackupSchedule
      properties:
        name:
          type: string
          description: 'Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`'
          readOnly: true
        weeklyRecurrence:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1WeeklyRecurrence'
          description: For a schedule that runs weekly on a specific day and time.
        dailyRecurrence:
          $ref: '#/components/schemas/GoogleFirestoreAdminV1DailyRecurrence'
          description: For a schedule that runs daily at a specified time.
        createTime:
          type: string
          description: Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
          readOnly: true
          format: google-datetime
        updateTime:
          readOnly: true
          description: 'Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.'
          type: string
          format: google-datetime
        retention:
          description: 'At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.'
          format: google-duration
          type: string
    Precondition:
      description: 'A precondition on a document, used for conditional operations.'
      id: Precondition
      type: object
      properties:
        exists:
          type: boolean
          description: 'When set to `true`, the target document must exist. When set to `false`, the target document must not exist.'
        updateTime:
          type: string
          format: google-datetime
          description: 'When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.'
    GoogleFirestoreAdminV1IndexConfig:
      id: GoogleFirestoreAdminV1IndexConfig
      description: The index configuration for this field.
      type: object
      properties:
        ancestorField:
          description: 'Output only. Specifies the resource name of the `Field` from which this field''s index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).'
          type: string
        reverting:
          description: 'Output only When true, the `Field`''s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`.'
          type: boolean
        usesAncestorConfig:
          description: 'Output only. When true, the `Field`''s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`''s index configuration is defined explicitly.'
          type: boolean
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1Index'
          description: The indexes supported for this field.
    CollectionSelector:
      description: 'A selection of a collection, such as `messages as m1`.'
      properties:
        collectionId:
          description: 'The collection ID. When set, selects only collections with this ID.'
          type: string
        allDescendants:
          type: boolean
          description: 'When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.'
      id: CollectionSelector
      type: object
    FieldFilter:
      id: FieldFilter
      type: object
      properties:
        field:
          description: The field to filter by.
          $ref: '#/components/schemas/FieldReference'
        op:
          enum:
            - OPERATOR_UNSPECIFIED
            - LESS_THAN
            - LESS_THAN_OR_EQUAL
            - GREATER_THAN
            - GREATER_THAN_OR_EQUAL
            - EQUAL
            - NOT_EQUAL
            - ARRAY_CONTAINS
            - IN
            - ARRAY_CONTAINS_ANY
            - NOT_IN
          description: The operator to filter by.
          type: string
          enumDescriptions:
            - Unspecified. This value must not be used.
            - 'The given `field` is less than the given `value`. Requires: * That `field` come first in `order_by`.'
            - 'The given `field` is less than or equal to the given `value`. Requires: * That `field` come first in `order_by`.'
            - 'The given `field` is greater than the given `value`. Requires: * That `field` come first in `order_by`.'
            - 'The given `field` is greater than or equal to the given `value`. Requires: * That `field` come first in `order_by`.'
            - The given `field` is equal to the given `value`.
            - 'The given `field` is not equal to the given `value`. Requires: * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.'
            - The given `field` is an array that contains the given `value`.
            - 'The given `field` is equal to at least one value in the given array. Requires: * That `value` is a non-empty `ArrayValue`, subject to disjunction limits. * No `NOT_IN` filters in the same query.'
            - 'The given `field` is an array that contains any of the values in the given array. Requires: * That `value` is a non-empty `ArrayValue`, subject to disjunction limits. * No other `ARRAY_CONTAINS_ANY` filters within the same disjunction. * No `NOT_IN` filters in the same query.'
            - 'The value of the `field` is not in the given array. Requires: * That `value` is a non-empty `ArrayValue` with at most 10 values. * No other `OR`, `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`, `IS_NOT_NULL`, or `IS_NOT_NAN`. * That `field` comes first in the `order_by`.'
        value:
          $ref: '#/components/schemas/Value'
          description: The value to compare to.
      description: A filter on a specific field.
    DocumentMask:
      type: object
      properties:
        fieldPaths:
          description: The list of field paths in the mask. See Document.fields for a field path syntax reference.
          type: array
          items:
            type: string
      description: 'A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.'
      id: DocumentMask
    Avg:
      properties:
        field:
          $ref: '#/components/schemas/FieldReference'
          description: The field to aggregate on.
      id: Avg
      description: 'Average of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.'
      type: object
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
      type: object
      properties:
        locations:
          description: A list of locations that matches the specified filter in the request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          type: string
          description: The standard List next-page token.
    Cursor:
      description: A position in a query result set.
      type: object
      properties:
        values:
          description: 'The values that represent a position, in the order they appear in the order by clause of a query. Can contain fewer values than specified in the order by clause.'
          items:
            $ref: '#/components/schemas/Value'
          type: array
        before:
          description: 'If the position is just before or just after the given values, relative to the sort order defined by the query.'
          type: boolean
      id: Cursor
    GoogleFirestoreAdminV1IndexConfigDelta:
      type: object
      description: Information about an index configuration change.
      properties:
        changeType:
          description: Specifies how the index is changing.
          enumDescriptions:
            - The type of change is not specified or known.
            - The single field index is being added.
            - The single field index is being removed.
          enum:
            - CHANGE_TYPE_UNSPECIFIED
            - ADD
            - REMOVE
          type: string
        index:
          description: The index being changed.
          $ref: '#/components/schemas/GoogleFirestoreAdminV1Index'
      id: GoogleFirestoreAdminV1IndexConfigDelta
    DocumentRemove:
      properties:
        removedTargetIds:
          description: A set of target IDs for targets that previously matched this document.
          items:
            format: int32
            type: integer
          type: array
        document:
          type: string
          description: The resource name of the Document that has gone out of view.
        readTime:
          type: string
          format: google-datetime
          description: The read timestamp at which the remove was observed. Greater or equal to the `commit_time` of the change/delete/remove.
      id: DocumentRemove
      type: object
      description: 'A Document has been removed from the view of the targets. Sent if the document is no longer relevant to a target and is out of view. Can be sent instead of a DocumentDelete or a DocumentChange if the server can not send the new value of the document. Multiple DocumentRemove messages may be returned for the same logical write or delete, if multiple targets are affected.'
    Write:
      type: object
      properties:
        updateTransforms:
          items:
            $ref: '#/components/schemas/FieldTransform'
          description: 'The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.'
          type: array
        delete:
          description: 'A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.'
          type: string
        currentDocument:
          description: An optional precondition on the document. The write will fail if this is set and not met by the target document.
          $ref: '#/components/schemas/Precondition'
        update:
          description: A document to write.
          $ref: '#/components/schemas/Document'
        updateMask:
          $ref: '#/components/schemas/DocumentMask'
          description: 'The fields to update in this write. This field can be set only when the operation is `update`. If the mask is not set for an `update` and the document exists, any existing data will be overwritten. If the mask is set and the document on the server has fields not covered by the mask, they are left unchanged. Fields referenced in the mask, but not present in the input document, are deleted from the document on the server. The field paths in this mask must not contain a reserved field name.'
        transform:
          description: Applies a transformation to a document.
          $ref: '#/components/schemas/DocumentTransform'
      id: Write
      description: A write on a document.
    ReadOnly:
      description: Options for a transaction that can only be used to read documents.
      id: ReadOnly
      properties:
        readTime:
          description: 'Reads documents at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.'
          format: google-datetime
          type: string
      type: object
    Empty:
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      type: object
    GoogleFirestoreAdminV1ListDatabasesResponse:
      properties:
        databases:
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1Database'
          description: The databases in the project.
      id: GoogleFirestoreAdminV1ListDatabasesResponse
      description: The list of databases for a project.
      type: object
    BeginTransactionResponse:
      description: The response for Firestore.BeginTransaction.
      type: object
      properties:
        transaction:
          format: byte
          description: The transaction that was started.
          type: string
      id: BeginTransactionResponse
    StructuredQuery:
      id: StructuredQuery
      description: A Firestore query.
      type: object
      properties:
        where:
          description: The filter to apply.
          $ref: '#/components/schemas/Filter'
        offset:
          format: int32
          type: integer
          description: 'The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.'
        endAt:
          description: 'A potential prefix of a position in the result set to end the query at. This is similar to `START_AT` but with it controlling the end position rather than the start position. Requires: * The number of values cannot be greater than the number of fields specified in the `ORDER BY` clause.'
          $ref: '#/components/schemas/Cursor'
        limit:
          type: integer
          format: int32
          description: 'The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.'
        orderBy:
          items:
            $ref: '#/components/schemas/Order'
          description: 'The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or ''ASCENDING'' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`'
          type: array
        startAt:
          description: 'A potential prefix of a position in the result set to start the query at. The ordering of the result set is based on the `ORDER BY` clause of the original query. ``` SELECT * FROM k WHERE a = 1 AND b > 2 ORDER BY b ASC, __name__ ASC; ``` This query''s results are ordered by `(b ASC, __name__ ASC)`. Cursors can reference either the full ordering or a prefix of the location, though it cannot reference more fields than what are in the provided `ORDER BY`. Continuing off the example above, attaching the following start cursors will have varying impact: - `START BEFORE (2, /k/123)`: start the query right before `a = 1 AND b > 2 AND __name__ > /k/123`. - `START AFTER (10)`: start the query right after `a = 1 AND b > 10`. Unlike `OFFSET` which requires scanning over the first N results to skip, a start cursor allows the query to begin at a logical position. This position is not required to match an actual result, it will scan forward from this position to find the next document. Requires: * The number of values cannot be greater than the number of fields specified in the `ORDER BY` clause.'
          $ref: '#/components/schemas/Cursor'
        select:
          $ref: '#/components/schemas/Projection'
          description: 'Optional sub-set of the fields to return. This acts as a DocumentMask over the documents returned from a query. When not set, assumes that the caller wants all fields returned.'
        from:
          items:
            $ref: '#/components/schemas/CollectionSelector'
          description: The collections to query.
          type: array
    Sum:
      id: Sum
      properties:
        field:
          $ref: '#/components/schemas/FieldReference'
          description: The field to aggregate on.
      description: 'Sum of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.'
      type: object
    RunQueryResponse:
      type: object
      properties:
        transaction:
          type: string
          format: byte
          description: 'The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.'
        skippedResults:
          format: int32
          type: integer
          description: The number of results that have been skipped due to an offset between the last response and the current response.
        document:
          description: 'A query result, not set when reporting partial progress.'
          $ref: '#/components/schemas/Document'
        done:
          description: 'If present, Firestore has completely finished the request and no more documents will be returned.'
          type: boolean
        readTime:
          description: 'The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.'
          format: google-datetime
          type: string
      description: The response for Firestore.RunQuery.
      id: RunQueryResponse
    GoogleLongrunningCancelOperationRequest:
      properties: {}
      description: The request message for Operations.CancelOperation.
      type: object
      id: GoogleLongrunningCancelOperationRequest
    Target:
      type: object
      id: Target
      description: A specification of a set of documents to listen to.
      properties:
        targetId:
          description: The target ID that identifies the target on the stream. Must be a positive number and non-zero.
          format: int32
          type: integer
        query:
          description: A target specified by a query.
          $ref: '#/components/schemas/QueryTarget'
        resumeToken:
          type: string
          description: A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.
          format: byte
        documents:
          description: A target specified by a set of document names.
          $ref: '#/components/schemas/DocumentsTarget'
        expectedCount:
          description: The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.
          type: integer
          format: int32
        readTime:
          type: string
          description: Start listening after a specific `read_time`. The client must know the state of matching documents at this time.
          format: google-datetime
        once:
          description: If the target should be removed once it is current and consistent.
          type: boolean
    GoogleFirestoreAdminV1ListBackupSchedulesResponse:
      type: object
      id: GoogleFirestoreAdminV1ListBackupSchedulesResponse
      properties:
        backupSchedules:
          description: List of all backup schedules.
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      description: The response for FirestoreAdmin.ListBackupSchedules.
    DocumentChange:
      type: object
      description: 'A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.'
      id: DocumentChange
      properties:
        targetIds:
          description: A set of target IDs of targets that match this document.
          items:
            format: int32
            type: integer
          type: array
        document:
          description: 'The new state of the Document. If `mask` is set, contains only fields that were updated or added.'
          $ref: '#/components/schemas/Document'
        removedTargetIds:
          items:
            type: integer
            format: int32
          type: array
          description: A set of target IDs for targets that no longer match this document.
  parameters:
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
  x-stackQL-resources:
    databases:
      id: google.firestore.databases
      name: databases
      title: Databases
      methods:
        import_documents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}:importDocuments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        restore:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases:restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export_documents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}:exportDocuments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases/methods/get'
          - $ref: '#/components/x-stackQL-resources/databases/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/databases/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/databases/methods/delete'
    backup_schedules:
      id: google.firestore.backup_schedules
      name: backup_schedules
      title: Backup Schedules
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1backupSchedules~1{backupSchedulesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1backupSchedules~1{backupSchedulesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1backupSchedules~1{backupSchedulesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1backupSchedules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1backupSchedules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backup_schedules/methods/get'
          - $ref: '#/components/x-stackQL-resources/backup_schedules/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/backup_schedules/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/backup_schedules/methods/delete'
    indexes:
      id: google.firestore.indexes
      name: indexes
      title: Indexes
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1indexes~1{indexesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1indexes~1{indexesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1indexes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1indexes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.indexes
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1indexes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/get'
          - $ref: '#/components/x-stackQL-resources/indexes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/indexes/methods/delete'
    fields:
      id: google.firestore.fields
      name: fields
      title: Fields
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1fields/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.fields
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1fields/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1fields~1{fieldsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1collectionGroups~1{collectionGroupsId}~1fields~1{fieldsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/fields/methods/get'
          - $ref: '#/components/x-stackQL-resources/fields/methods/list'
        insert: []
        update: []
        delete: []
    operations:
      id: google.firestore.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    documents:
      id: google.firestore.documents
      name: documents
      title: Documents
      methods:
        batch_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:batchGet/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        partition_query:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}:partitionQuery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_document:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{collectionId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_documents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{collectionId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.documents
        _list_documents:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{collectionId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run_query:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}:runQuery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run_aggregation_query:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}:runAggregationQuery/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        commit:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:commit/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listen:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:listen/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        begin_transaction:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:beginTransaction/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_write:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:batchWrite/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        write:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:write/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}~1{collectionId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.documents
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}~1{collectionId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rollback:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents:rollback/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/documents/methods/list'
          - $ref: '#/components/x-stackQL-resources/documents/methods/get'
          - $ref: '#/components/x-stackQL-resources/documents/methods/list_documents'
        insert:
          - $ref: '#/components/x-stackQL-resources/documents/methods/create_document'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/documents/methods/delete'
    documents_collection_ids:
      id: google.firestore.documents_collection_ids
      name: documents_collection_ids
      title: Documents Collection Ids
      methods:
        list_collection_ids:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1databases~1{databasesId}~1documents~1{documentsId}~1{documentsId1}:listCollectionIds/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    locations:
      id: google.firestore.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    backups:
      id: google.firestore.backups
      name: backups
      title: Backups
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1backups~1{backupsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1backups~1{backupsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1backups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backups/methods/get'
          - $ref: '#/components/x-stackQL-resources/backups/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/backups/methods/delete'
paths:
  '/v1/projects/{projectsId}/databases/{databasesId}:importDocuments':
    parameters: &ref_1
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
    post:
      description: 'Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.'
      operationId: firestore.projects.databases.importDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1ImportDocumentsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: import_documents
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases':
    parameters: *ref_1
    get:
      description: List all the databases in the project.
      operationId: firestore.projects.databases.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1ListDatabasesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: list
      x-stackQL-verb: select
    post:
      description: Create a database.
      operationId: firestore.projects.databases.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1Database'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: databaseId
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/databases/{databasesId}':
    parameters: *ref_1
    delete:
      description: Deletes a database.
      operationId: firestore.projects.databases.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates a database.
      operationId: firestore.projects.databases.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1Database'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Gets information about a database.
      operationId: firestore.projects.databases.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1Database'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/databases:restore':
    parameters: *ref_1
    post:
      description: 'Create a new database by restore from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation''s metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed. Cancelling the returned operation will stop the restore and delete the in-progress database, if the restore is still active.'
      operationId: firestore.projects.databases.restore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1RestoreDatabaseRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: restore
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}:exportDocuments':
    parameters: *ref_1
    post:
      description: 'Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import'
      operationId: firestore.projects.databases.exportDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1ExportDocumentsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: databases
      x-stackQL-method: export_documents
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/backupSchedules/{backupSchedulesId}':
    parameters: *ref_1
    delete:
      description: Deletes a backup schedule.
      operationId: firestore.projects.databases.backupSchedules.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: backupSchedulesId
          required: true
          schema:
            type: string
      x-stackQL-resource: backup_schedules
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets information about a backup schedule.
      operationId: firestore.projects.databases.backupSchedules.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: backupSchedulesId
          required: true
          schema:
            type: string
      x-stackQL-resource: backup_schedules
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates a backup schedule.
      operationId: firestore.projects.databases.backupSchedules.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: backupSchedulesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: backup_schedules
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/backupSchedules':
    parameters: *ref_1
    post:
      description: 'Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.'
      operationId: firestore.projects.databases.backupSchedules.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1BackupSchedule'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: backup_schedules
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: List backup schedules.
      operationId: firestore.projects.databases.backupSchedules.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1ListBackupSchedulesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: backup_schedules
      x-stackQL-method: list
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}':
    parameters: *ref_1
    delete:
      description: Deletes a composite index.
      operationId: firestore.projects.databases.collectionGroups.indexes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: indexesId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets a composite index.
      operationId: firestore.projects.databases.collectionGroups.indexes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1Index'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: indexesId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes':
    parameters: *ref_1
    post:
      description: Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
      operationId: firestore.projects.databases.collectionGroups.indexes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1Index'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: indexes
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists composite indexes.
      operationId: firestore.projects.databases.collectionGroups.indexes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1ListIndexesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: indexes
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.indexes
  '/v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields':
    parameters: *ref_1
    get:
      description: 'Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false or `ttlConfig:*`.'
      operationId: firestore.projects.databases.collectionGroups.fields.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1ListFieldsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.fields
  '/v1/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}':
    parameters: *ref_1
    get:
      description: Gets the metadata and configuration for a Field.
      operationId: firestore.projects.databases.collectionGroups.fields.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1Field'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: 'Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn''t aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.'
      operationId: firestore.projects.databases.collectionGroups.fields.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirestoreAdminV1Field'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: fieldsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: fields
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: firestore.projects.databases.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: firestore.projects.databases.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: firestore.projects.databases.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: firestore.projects.databases.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLongrunningCancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:batchGet':
    parameters: *ref_1
    post:
      description: Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.
      operationId: firestore.projects.databases.documents.batchGet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchGetDocumentsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchGetDocumentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: batch_get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}':
    parameters: *ref_1
    delete:
      description: Deletes a document.
      operationId: firestore.projects.databases.documents.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
        - in: query
          name: currentDocument.updateTime
          schema:
            type: string
        - in: query
          name: currentDocument.exists
          schema:
            type: boolean
      x-stackQL-resource: documents
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets a single document.
      operationId: firestore.projects.databases.documents.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
        - in: query
          name: readTime
          schema:
            type: string
        - in: query
          name: mask.fieldPaths
          schema:
            type: string
        - in: query
          name: transaction
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates or inserts a document.
      operationId: firestore.projects.databases.documents.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
        - in: query
          name: updateMask.fieldPaths
          schema:
            type: string
        - in: query
          name: currentDocument.exists
          schema:
            type: boolean
        - in: query
          name: currentDocument.updateTime
          schema:
            type: string
        - in: query
          name: mask.fieldPaths
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:partitionQuery':
    parameters: *ref_1
    post:
      description: Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.
      operationId: firestore.projects.databases.documents.partitionQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartitionQueryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionQueryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: partition_query
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{collectionId}':
    parameters: *ref_1
    post:
      description: Creates a new document.
      operationId: firestore.projects.databases.documents.createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: collectionId
          required: true
          schema:
            type: string
        - in: query
          name: mask.fieldPaths
          schema:
            type: string
        - in: query
          name: documentId
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: create_document
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{collectionId}':
    parameters: *ref_1
    get:
      description: Lists documents.
      operationId: firestore.projects.databases.documents.listDocuments
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: collectionId
          required: true
          schema:
            type: string
        - in: query
          name: readTime
          schema:
            type: string
        - in: query
          name: mask.fieldPaths
          schema:
            type: string
        - in: query
          name: transaction
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: showMissing
          schema:
            type: boolean
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: documents
      x-stackQL-method: list_documents
      x-stackQL-verb: select
      x-stackQL-objectKey: $.documents
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runQuery':
    parameters: *ref_1
    post:
      description: Runs a query.
      operationId: firestore.projects.databases.documents.runQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunQueryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunQueryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: run_query
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runAggregationQuery':
    parameters: *ref_1
    post:
      description: 'Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```'
      operationId: firestore.projects.databases.documents.runAggregationQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunAggregationQueryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunAggregationQueryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: run_aggregation_query
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:commit':
    parameters: *ref_1
    post:
      description: 'Commits a transaction, while optionally updating documents.'
      operationId: firestore.projects.databases.documents.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: commit
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:listCollectionIds':
    parameters: *ref_1
    post:
      description: Lists all the collection IDs underneath a document.
      operationId: firestore.projects.databases.documents.listCollectionIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCollectionIdsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionIdsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
      x-stackQL-resource: documents_collection_ids
      x-stackQL-method: list_collection_ids
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:listen':
    parameters: *ref_1
    post:
      description: Listens to changes. This method is only available via gRPC or WebChannel (not REST).
      operationId: firestore.projects.databases.documents.listen
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListenRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListenResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: listen
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:beginTransaction':
    parameters: *ref_1
    post:
      description: Starts a new transaction.
      operationId: firestore.projects.databases.documents.beginTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeginTransactionRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginTransactionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: begin_transaction
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:batchWrite':
    parameters: *ref_1
    post:
      description: 'Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.'
      operationId: firestore.projects.databases.documents.batchWrite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchWriteRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchWriteResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: batch_write
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:write':
    parameters: *ref_1
    post:
      description: 'Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).'
      operationId: firestore.projects.databases.documents.write
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: write
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}/{collectionId}':
    parameters: *ref_1
    get:
      description: Lists documents.
      operationId: firestore.projects.databases.documents.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId
          required: true
          schema:
            type: string
        - in: path
          name: documentsId1
          required: true
          schema:
            type: string
        - in: path
          name: collectionId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: showMissing
          schema:
            type: boolean
        - in: query
          name: readTime
          schema:
            type: string
        - in: query
          name: mask.fieldPaths
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: transaction
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.documents
  '/v1/projects/{projectsId}/databases/{databasesId}/documents:rollback':
    parameters: *ref_1
    post:
      description: Rolls back a transaction.
      operationId: firestore.projects.databases.documents.rollback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
      x-stackQL-resource: documents
      x-stackQL-method: rollback
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: firestore.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: firestore.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}':
    parameters: *ref_1
    delete:
      description: Deletes a backup.
      operationId: firestore.projects.locations.backups.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets information about a backup.
      operationId: firestore.projects.locations.backups.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1Backup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: backupsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/backups':
    parameters: *ref_1
    get:
      description: Lists all the backups.
      operationId: firestore.projects.locations.backups.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
          Oauth2c:
            - 'https://www.googleapis.com/auth/datastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirestoreAdminV1ListBackupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: backups
      x-stackQL-method: list
      x-stackQL-verb: select
