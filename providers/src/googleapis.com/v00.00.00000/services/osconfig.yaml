openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: OS Config API
  description: >-
    OS management tools that can be used for patch management, patch compliance,
    and configuration management on VM instances.
  version: v2
  x-discovery-doc-revision: '20250824'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/compute/docs/osconfig/rest
servers:
  - url: https://osconfig.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    GoogleCloudOsconfigV2__PolicyOrchestrator:
      id: GoogleCloudOsconfigV2__PolicyOrchestrator
      description: >-
        PolicyOrchestrator helps managing project+zone level policy resources
        (e.g. OS Policy Assignments), by providing tools to create, update and
        delete them across projects and locations, at scale. Policy orchestrator
        functions as an endless loop. Each iteration orchestrator computes a set
        of resources that should be affected, then progressively applies changes
        to them. If for some reason this set of resources changes over time
        (e.g. new projects are added), the future loop iterations will address
        that. Orchestrator can either upsert or delete policy resources. For
        more details, see the description of the `action`, and
        `orchestrated_resource` fields. Note that policy orchestrator do not
        "manage" the resources it creates. Every iteration is independent and
        only minimal history of past actions is retained (apart from Cloud
        Logging). If orchestrator gets deleted, it does not affect the resources
        it created in the past. Those will remain where they were. Same applies
        if projects are removed from the orchestrator's scope.
      type: object
      properties:
        name:
          description: >-
            Immutable. Identifier. In form of *
            `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
            *
            `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
            *
            `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
          type: string
        description:
          description: Optional. Freeform text describing the purpose of the resource.
          type: string
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and may be sent on update and delete requests
            to ensure the client has an up-to-date value before proceeding.
          readOnly: true
          type: string
        state:
          description: >-
            Optional. State of the orchestrator. Can be updated to change
            orchestrator behaviour. Allowed values: - `ACTIVE` - orchestrator is
            actively looking for actions to be taken. - `STOPPED` - orchestrator
            won't make any changes. Note: There might be more states added in
            the future. We use string here instead of an enum, to avoid the need
            of propagating new states to all the client code.
          type: string
        reconciling:
          description: >-
            Output only. Set to true, if the there are ongoing changes being
            applied by the orchestrator.
          readOnly: true
          type: boolean
        orchestrationScope:
          description: >-
            Optional. Defines scope for the orchestration, in context of the
            enclosing PolicyOrchestrator resource. Scope is expanded into a list
            of pairs, in which the rollout action will take place. Expansion
            starts with a Folder resource parenting the PolicyOrchestrator
            resource: - All the descendant projects are listed. - List of
            project is cross joined with a list of all available zones. -
            Resulting list of pairs is filtered according to the selectors.
          $ref: '#/components/schemas/GoogleCloudOsconfigV2__OrchestrationScope'
        action:
          description: >-
            Required. Action to be done by the orchestrator in
            `projects/{project_id}/zones/{zone_id}` locations defined by the
            `orchestration_scope`. Allowed values: - `UPSERT` - Orchestrator
            will create or update target resources. - `DELETE` - Orchestrator
            will delete target resources, if they exist
          type: string
        orchestratedResource:
          description: Required. Resource to be orchestrated by the policy orchestrator.
          $ref: '#/components/schemas/GoogleCloudOsconfigV2__OrchestratedResource'
        orchestrationState:
          description: Output only. State of the orchestration.
          readOnly: true
          $ref: >-
            #/components/schemas/GoogleCloudOsconfigV2_PolicyOrchestrator_OrchestrationState
        createTime:
          description: >-
            Output only. Timestamp when the policy orchestrator resource was
            created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: >-
            Output only. Timestamp when the policy orchestrator resource was
            last modified.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Labels as key value pairs
          type: object
          additionalProperties:
            type: string
    GoogleCloudOsconfigV2__OrchestrationScope:
      id: GoogleCloudOsconfigV2__OrchestrationScope
      description: >-
        Defines a set of selectors which drive which resources are in scope of
        policy orchestration.
      type: object
      properties:
        selectors:
          description: >-
            Optional. Selectors of the orchestration scope. There is a logical
            AND between each selector defined. When there is no explicit
            `ResourceHierarchySelector` selector specified, the scope is by
            default bounded to the parent of the policy orchestrator resource.
          type: array
          items:
            $ref: >-
              #/components/schemas/GoogleCloudOsconfigV2_OrchestrationScope_Selector
    GoogleCloudOsconfigV2_OrchestrationScope_Selector:
      id: GoogleCloudOsconfigV2_OrchestrationScope_Selector
      description: Selector for the resources in scope of orchestration.
      type: object
      properties:
        resourceHierarchySelector:
          description: Selector for selecting resource hierarchy.
          $ref: >-
            #/components/schemas/GoogleCloudOsconfigV2_OrchestrationScope_ResourceHierarchySelector
        locationSelector:
          description: Selector for selecting locations.
          $ref: >-
            #/components/schemas/GoogleCloudOsconfigV2_OrchestrationScope_LocationSelector
    GoogleCloudOsconfigV2_OrchestrationScope_ResourceHierarchySelector:
      id: GoogleCloudOsconfigV2_OrchestrationScope_ResourceHierarchySelector
      description: Selector containing Cloud Resource Manager resource hierarchy nodes.
      type: object
      properties:
        includedProjects:
          description: >-
            Optional. Names of the projects in scope. Format:
            `projects/{project_number}`
          type: array
          items:
            type: string
        includedFolders:
          description: >-
            Optional. Names of the folders in scope. Format:
            `folders/{folder_id}`
          type: array
          items:
            type: string
    GoogleCloudOsconfigV2_OrchestrationScope_LocationSelector:
      id: GoogleCloudOsconfigV2_OrchestrationScope_LocationSelector
      description: Selector containing locations in scope.
      type: object
      properties:
        includedLocations:
          description: 'Optional. Names of the locations in scope. Format: `us-central1-a`'
          type: array
          items:
            type: string
    GoogleCloudOsconfigV2__OrchestratedResource:
      id: GoogleCloudOsconfigV2__OrchestratedResource
      description: >-
        Represents a resource that is being orchestrated by the policy
        orchestrator.
      type: object
      properties:
        osPolicyAssignmentV1Payload:
          description: >-
            Optional. OSPolicyAssignment resource to be created, updated or
            deleted. Name field is ignored and replace with a generated value.
            With this field set, orchestrator will perform actions on
            `project/{project}/locations/{zone}/osPolicyAssignments/{resource_id}`
            resources, where `project` and `zone` pairs come from the expanded
            scope, and `resource_id` comes from the `resource_id` field of
            orchestrator resource.
          $ref: '#/components/schemas/OSPolicyAssignment'
        id:
          description: >-
            Optional. ID of the resource to be used while generating set of
            affected resources. For UPSERT action the value is auto-generated
            during PolicyOrchestrator creation when not set. When the value is
            set it should following next restrictions: * Must contain only
            lowercase letters, numbers, and hyphens. * Must start with a letter.
            * Must be between 1-63 characters. * Must end with a number or a
            letter. * Must be unique within the project. For DELETE action, ID
            must be specified explicitly during PolicyOrchestrator creation.
          type: string
    OSPolicyAssignment:
      id: OSPolicyAssignment
      description: >-
        OS policy assignment is an API resource that is used to apply a set of
        OS policies to a dynamically targeted group of Compute Engine VM
        instances. An OS policy is used to define the desired state
        configuration for a Compute Engine VM instance through a set of
        configuration resources that provide capabilities such as installing or
        removing software packages, or executing a script. For more information
        about the OS policy resource definitions and examples, see [OS policy
        and OS policy
        assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
      type: object
      properties:
        name:
          description: >-
            Resource name. Format:
            `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}`
            This field is ignored when you create an OS policy assignment.
          type: string
        description:
          description: >-
            OS policy assignment description. Length of the description is
            limited to 1024 characters.
          type: string
        osPolicies:
          description: Required. List of OS policies to be applied to the VMs.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicy'
        instanceFilter:
          description: Required. Filter to select VMs.
          $ref: '#/components/schemas/OSPolicyAssignmentInstanceFilter'
        rollout:
          description: >-
            Required. Rollout to deploy the OS policy assignment. A rollout is
            triggered in the following situations: 1) OSPolicyAssignment is
            created. 2) OSPolicyAssignment is updated and the update contains
            changes to one of the following fields: - instance_filter -
            os_policies 3) OSPolicyAssignment is deleted.
          $ref: '#/components/schemas/OSPolicyAssignmentRollout'
        revisionId:
          description: >-
            Output only. The assignment revision ID A new revision is committed
            whenever a rollout is triggered for a OS policy assignment
          readOnly: true
          type: string
        revisionCreateTime:
          description: Output only. The timestamp that the revision was created.
          readOnly: true
          type: string
          format: google-datetime
        etag:
          description: >-
            The etag for this OS policy assignment. If this is provided on
            update, it must match the server's etag.
          type: string
        rolloutState:
          description: Output only. OS policy assignment rollout state
          readOnly: true
          type: string
          enumDescriptions:
            - Invalid value
            - The rollout is in progress.
            - The rollout is being cancelled.
            - The rollout is cancelled.
            - The rollout has completed successfully.
          enum:
            - ROLLOUT_STATE_UNSPECIFIED
            - IN_PROGRESS
            - CANCELLING
            - CANCELLED
            - SUCCEEDED
        baseline:
          description: >-
            Output only. Indicates that this revision has been successfully
            rolled out in this zone and new VMs will be assigned OS policies
            from this revision. For a given OS policy assignment, there is only
            one revision with a value of `true` for this field.
          readOnly: true
          type: boolean
        deleted:
          description: >-
            Output only. Indicates that this revision deletes the OS policy
            assignment.
          readOnly: true
          type: boolean
        reconciling:
          description: >-
            Output only. Indicates that reconciliation is in progress for the
            revision. This value is `true` when the `rollout_state` is one of: *
            IN_PROGRESS * CANCELLING
          readOnly: true
          type: boolean
        uid:
          description: >-
            Output only. Server generated unique id for the OS policy assignment
            resource.
          readOnly: true
          type: string
    OSPolicy:
      id: OSPolicy
      description: An OS policy defines the desired state configuration for a VM.
      type: object
      properties:
        id:
          description: >-
            Required. The id of the OS policy with the following restrictions: *
            Must contain only lowercase letters, numbers, and hyphens. * Must
            start with a letter. * Must be between 1-63 characters. * Must end
            with a number or a letter. * Must be unique within the assignment.
          type: string
        description:
          description: >-
            Policy description. Length of the description is limited to 1024
            characters.
          type: string
        mode:
          description: Required. Policy mode
          type: string
          enumDescriptions:
            - Invalid mode
            - >-
              This mode checks if the configuration resources in the policy are
              in their desired state. No actions are performed if they are not
              in the desired state. This mode is used for reporting purposes.
            - >-
              This mode checks if the configuration resources in the policy are
              in their desired state, and if not, enforces the desired state.
          enum:
            - MODE_UNSPECIFIED
            - VALIDATION
            - ENFORCEMENT
        resourceGroups:
          description: >-
            Required. List of resource groups for the policy. For a particular
            VM, resource groups are evaluated in the order specified and the
            first resource group that is applicable is selected and the rest are
            ignored. If none of the resource groups are applicable for a VM, the
            VM is considered to be non-compliant w.r.t this policy. This
            behavior can be toggled by the flag `allow_no_resource_group_match`
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyResourceGroup'
        allowNoResourceGroupMatch:
          description: >-
            This flag determines the OS policy compliance status when none of
            the resource groups within the policy are applicable for a VM. Set
            this value to `true` if the policy needs to be reported as compliant
            even if the policy has nothing to validate or enforce.
          type: boolean
    OSPolicyResourceGroup:
      id: OSPolicyResourceGroup
      description: >-
        Resource groups provide a mechanism to group OS policy resources.
        Resource groups enable OS policy authors to create a single OS policy to
        be applied to VMs running different operating Systems. When the OS
        policy is applied to a target VM, the appropriate resource group within
        the OS policy is selected based on the `OSFilter` specified within the
        resource group.
      type: object
      properties:
        inventoryFilters:
          description: >-
            List of inventory filters for the resource group. The resources in
            this resource group are applied to the target VM if it satisfies at
            least one of the following inventory filters. For example, to apply
            this resource group to VMs running either `RHEL` or `CentOS`
            operating systems, specify 2 items for the list with following
            values: inventory_filters[0].os_short_name='rhel' and
            inventory_filters[1].os_short_name='centos' If the list is empty,
            this resource group will be applied to the target VM
            unconditionally.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyInventoryFilter'
        resources:
          description: >-
            Required. List of resources configured for this resource group. The
            resources are executed in the exact order specified here.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyResource'
    OSPolicyInventoryFilter:
      id: OSPolicyInventoryFilter
      description: Filtering criteria to select VMs based on inventory details.
      type: object
      properties:
        osShortName:
          description: Required. The OS short name
          type: string
        osVersion:
          description: >-
            The OS version Prefix matches are supported if asterisk(*) is
            provided as the last character. For example, to match all versions
            with a major version of `7`, specify the following value for this
            field `7.*` An empty string matches all OS versions.
          type: string
    OSPolicyResource:
      id: OSPolicyResource
      description: >-
        An OS policy resource is used to define the desired state configuration
        and provides a specific functionality like installing/removing packages,
        executing a script etc. The system ensures that resources are always in
        their desired state by taking necessary actions if they have drifted
        from their desired state.
      type: object
      properties:
        id:
          description: >-
            Required. The id of the resource with the following restrictions: *
            Must contain only lowercase letters, numbers, and hyphens. * Must
            start with a letter. * Must be between 1-63 characters. * Must end
            with a number or a letter. * Must be unique within the OS policy.
          type: string
        pkg:
          description: Package resource
          $ref: '#/components/schemas/OSPolicyResourcePackageResource'
        repository:
          description: Package repository resource
          $ref: '#/components/schemas/OSPolicyResourceRepositoryResource'
        exec:
          description: Exec resource
          $ref: '#/components/schemas/OSPolicyResourceExecResource'
        file:
          description: File resource
          $ref: '#/components/schemas/OSPolicyResourceFileResource'
    OSPolicyResourcePackageResource:
      id: OSPolicyResourcePackageResource
      description: A resource that manages a system package.
      type: object
      properties:
        desiredState:
          description: >-
            Required. The desired state the agent should maintain for this
            package.
          type: string
          enumDescriptions:
            - Unspecified is invalid.
            - Ensure that the package is installed.
            - >-
              The agent ensures that the package is not installed and uninstalls
              it if detected.
          enum:
            - DESIRED_STATE_UNSPECIFIED
            - INSTALLED
            - REMOVED
        apt:
          description: A package managed by Apt.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceAPT'
        deb:
          description: A deb package file.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceDeb'
        yum:
          description: A package managed by YUM.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceYUM'
        zypper:
          description: A package managed by Zypper.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceZypper'
        rpm:
          description: An rpm package file.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceRPM'
        googet:
          description: A package managed by GooGet.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceGooGet'
        msi:
          description: An MSI package.
          $ref: '#/components/schemas/OSPolicyResourcePackageResourceMSI'
    OSPolicyResourcePackageResourceAPT:
      id: OSPolicyResourcePackageResourceAPT
      description: >-
        A package managed by APT. - install: `apt-get update && apt-get -y
        install [name]` - remove: `apt-get -y remove [name]`
      type: object
      properties:
        name:
          description: Required. Package name.
          type: string
    OSPolicyResourcePackageResourceDeb:
      id: OSPolicyResourcePackageResourceDeb
      description: A deb package file. dpkg packages only support INSTALLED state.
      type: object
      properties:
        source:
          description: Required. A deb package.
          $ref: '#/components/schemas/OSPolicyResourceFile'
        pullDeps:
          description: >-
            Whether dependencies should also be installed. - install when false:
            `dpkg -i package` - install when true: `apt-get update && apt-get -y
            install package.deb`
          type: boolean
    OSPolicyResourceFile:
      id: OSPolicyResourceFile
      description: A remote or local file.
      type: object
      properties:
        remote:
          description: A generic remote file.
          $ref: '#/components/schemas/OSPolicyResourceFileRemote'
        gcs:
          description: A Cloud Storage object.
          $ref: '#/components/schemas/OSPolicyResourceFileGcs'
        localPath:
          description: A local path within the VM to use.
          type: string
        allowInsecure:
          description: >-
            Defaults to false. When false, files are subject to validations
            based on the file type: Remote: A checksum must be specified. Cloud
            Storage: An object generation number must be specified.
          type: boolean
    OSPolicyResourceFileRemote:
      id: OSPolicyResourceFileRemote
      description: Specifies a file available via some URI.
      type: object
      properties:
        uri:
          description: >-
            Required. URI from which to fetch the object. It should contain both
            the protocol and path following the format
            `{protocol}://{location}`.
          type: string
        sha256Checksum:
          description: SHA256 checksum of the remote file.
          type: string
    OSPolicyResourceFileGcs:
      id: OSPolicyResourceFileGcs
      description: Specifies a file available as a Cloud Storage Object.
      type: object
      properties:
        bucket:
          description: Required. Bucket of the Cloud Storage object.
          type: string
        object:
          description: Required. Name of the Cloud Storage object.
          type: string
        generation:
          description: Generation number of the Cloud Storage object.
          type: string
          format: int64
    OSPolicyResourcePackageResourceYUM:
      id: OSPolicyResourcePackageResourceYUM
      description: >-
        A package managed by YUM. - install: `yum -y install package` - remove:
        `yum -y remove package`
      type: object
      properties:
        name:
          description: Required. Package name.
          type: string
    OSPolicyResourcePackageResourceZypper:
      id: OSPolicyResourcePackageResourceZypper
      description: >-
        A package managed by Zypper. - install: `zypper -y install package` -
        remove: `zypper -y rm package`
      type: object
      properties:
        name:
          description: Required. Package name.
          type: string
    OSPolicyResourcePackageResourceRPM:
      id: OSPolicyResourcePackageResourceRPM
      description: An RPM package file. RPM packages only support INSTALLED state.
      type: object
      properties:
        source:
          description: Required. An rpm package.
          $ref: '#/components/schemas/OSPolicyResourceFile'
        pullDeps:
          description: >-
            Whether dependencies should also be installed. - install when false:
            `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum
            -y install package.rpm` or `zypper -y install package.rpm`
          type: boolean
    OSPolicyResourcePackageResourceGooGet:
      id: OSPolicyResourcePackageResourceGooGet
      description: >-
        A package managed by GooGet. - install: `googet -noconfirm install
        package` - remove: `googet -noconfirm remove package`
      type: object
      properties:
        name:
          description: Required. Package name.
          type: string
    OSPolicyResourcePackageResourceMSI:
      id: OSPolicyResourcePackageResourceMSI
      description: An MSI package. MSI packages only support INSTALLED state.
      type: object
      properties:
        source:
          description: Required. The MSI package.
          $ref: '#/components/schemas/OSPolicyResourceFile'
        properties:
          description: >-
            Additional properties to use during installation. This should be in
            the format of Property=Setting. Appended to the defaults of
            `ACTION=INSTALL REBOOT=ReallySuppress`.
          type: array
          items:
            type: string
    OSPolicyResourceRepositoryResource:
      id: OSPolicyResourceRepositoryResource
      description: A resource that manages a package repository.
      type: object
      properties:
        apt:
          description: An Apt Repository.
          $ref: '#/components/schemas/OSPolicyResourceRepositoryResourceAptRepository'
        yum:
          description: A Yum Repository.
          $ref: '#/components/schemas/OSPolicyResourceRepositoryResourceYumRepository'
        zypper:
          description: A Zypper Repository.
          $ref: >-
            #/components/schemas/OSPolicyResourceRepositoryResourceZypperRepository
        goo:
          description: A Goo Repository.
          $ref: '#/components/schemas/OSPolicyResourceRepositoryResourceGooRepository'
    OSPolicyResourceRepositoryResourceAptRepository:
      id: OSPolicyResourceRepositoryResourceAptRepository
      description: >-
        Represents a single apt package repository. These will be added to a
        repo file that will be managed at
        `/etc/apt/sources.list.d/google_osconfig.list`.
      type: object
      properties:
        archiveType:
          description: Required. Type of archive files in this repository.
          type: string
          enumDescriptions:
            - Unspecified is invalid.
            - Deb indicates that the archive contains binary files.
            - Deb-src indicates that the archive contains source files.
          enum:
            - ARCHIVE_TYPE_UNSPECIFIED
            - DEB
            - DEB_SRC
        uri:
          description: Required. URI for this repository.
          type: string
        distribution:
          description: Required. Distribution of this repository.
          type: string
        components:
          description: >-
            Required. List of components for this repository. Must contain at
            least one item.
          type: array
          items:
            type: string
        gpgKey:
          description: >-
            URI of the key file for this repository. The agent maintains a
            keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
          type: string
    OSPolicyResourceRepositoryResourceYumRepository:
      id: OSPolicyResourceRepositoryResourceYumRepository
      description: >-
        Represents a single yum package repository. These are added to a repo
        file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
      type: object
      properties:
        id:
          description: >-
            Required. A one word, unique name for this repository. This is the
            `repo id` in the yum config file and also the `display_name` if
            `display_name` is omitted. This id is also used as the unique
            identifier when checking for resource conflicts.
          type: string
        displayName:
          description: The display name of the repository.
          type: string
        baseUrl:
          description: Required. The location of the repository directory.
          type: string
        gpgKeys:
          description: URIs of GPG keys.
          type: array
          items:
            type: string
    OSPolicyResourceRepositoryResourceZypperRepository:
      id: OSPolicyResourceRepositoryResourceZypperRepository
      description: >-
        Represents a single zypper package repository. These are added to a repo
        file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
      type: object
      properties:
        id:
          description: >-
            Required. A one word, unique name for this repository. This is the
            `repo id` in the zypper config file and also the `display_name` if
            `display_name` is omitted. This id is also used as the unique
            identifier when checking for GuestPolicy conflicts.
          type: string
        displayName:
          description: The display name of the repository.
          type: string
        baseUrl:
          description: Required. The location of the repository directory.
          type: string
        gpgKeys:
          description: URIs of GPG keys.
          type: array
          items:
            type: string
    OSPolicyResourceRepositoryResourceGooRepository:
      id: OSPolicyResourceRepositoryResourceGooRepository
      description: >-
        Represents a Goo package repository. These are added to a repo file that
        is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
      type: object
      properties:
        name:
          description: Required. The name of the repository.
          type: string
        url:
          description: Required. The url of the repository.
          type: string
    OSPolicyResourceExecResource:
      id: OSPolicyResourceExecResource
      description: >-
        A resource that allows executing scripts on the VM. The `ExecResource`
        has 2 stages: `validate` and `enforce` and both stages accept a script
        as an argument to execute. When the `ExecResource` is applied by the
        agent, it first executes the script in the `validate` stage. The
        `validate` stage can signal that the `ExecResource` is already in the
        desired state by returning an exit code of `100`. If the `ExecResource`
        is not in the desired state, it should return an exit code of `101`. Any
        other exit code returned by this stage is considered an error. If the
        `ExecResource` is not in the desired state based on the exit code from
        the `validate` stage, the agent proceeds to execute the script from the
        `enforce` stage. If the `ExecResource` is already in the desired state,
        the `enforce` stage will not be run. Similar to `validate` stage, the
        `enforce` stage should return an exit code of `100` to indicate that the
        resource in now in its desired state. Any other exit code is considered
        an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs
        `1`) to have an explicit indicator of `in desired state`, `not in
        desired state` and errors. Because, for example, Powershell will always
        return an exit code of `0` unless an `exit` statement is provided in the
        script. So, for reasons of consistency and being explicit, exit codes
        `100` and `101` were chosen.
      type: object
      properties:
        validate:
          description: >-
            Required. What to run to validate this resource is in the desired
            state. An exit code of 100 indicates "in desired state", and exit
            code of 101 indicates "not in desired state". Any other exit code
            indicates a failure running validate.
          $ref: '#/components/schemas/OSPolicyResourceExecResourceExec'
        enforce:
          description: >-
            What to run to bring this resource into the desired state. An exit
            code of 100 indicates "success", any other exit code indicates a
            failure running enforce.
          $ref: '#/components/schemas/OSPolicyResourceExecResourceExec'
    OSPolicyResourceExecResourceExec:
      id: OSPolicyResourceExecResourceExec
      description: A file or script to execute.
      type: object
      properties:
        file:
          description: A remote or local file.
          $ref: '#/components/schemas/OSPolicyResourceFile'
        script:
          description: An inline script. The size of the script is limited to 32KiB.
          type: string
        args:
          description: Optional arguments to pass to the source during execution.
          type: array
          items:
            type: string
        interpreter:
          description: Required. The script interpreter to use.
          type: string
          enumDescriptions:
            - Invalid value, the request will return validation error.
            - >-
              If an interpreter is not specified, the source is executed
              directly. This execution, without an interpreter, only succeeds
              for executables and scripts that have shebang lines.
            - >-
              Indicates that the script runs with `/bin/sh` on Linux and
              `cmd.exe` on Windows.
            - Indicates that the script runs with PowerShell.
          enum:
            - INTERPRETER_UNSPECIFIED
            - NONE
            - SHELL
            - POWERSHELL
        outputFilePath:
          description: >-
            Only recorded for enforce Exec. Path to an output file (that is
            created by this Exec) whose content will be recorded in
            OSPolicyResourceCompliance after a successful run. Absence or
            failure to read this file will result in this ExecResource being
            non-compliant. Output file size is limited to 500K bytes.
          type: string
    OSPolicyResourceFileResource:
      id: OSPolicyResourceFileResource
      description: A resource that manages the state of a file.
      type: object
      properties:
        file:
          description: A remote or local source.
          $ref: '#/components/schemas/OSPolicyResourceFile'
        content:
          description: >-
            A a file with this content. The size of the content is limited to
            32KiB.
          type: string
        path:
          description: Required. The absolute path of the file within the VM.
          type: string
        state:
          description: Required. Desired state of the file.
          type: string
          enumDescriptions:
            - Unspecified is invalid.
            - Ensure file at path is present.
            - Ensure file at path is absent.
            - >-
              Ensure the contents of the file at path matches. If the file does
              not exist it will be created.
          enum:
            - DESIRED_STATE_UNSPECIFIED
            - PRESENT
            - ABSENT
            - CONTENTS_MATCH
        permissions:
          description: >-
            Consists of three octal digits which represent, in order, the
            permissions of the owner, group, and other users for the file
            (similarly to the numeric mode used in the linux chmod utility).
            Each digit represents a three bit number with the 4 bit
            corresponding to the read permissions, the 2 bit corresponds to the
            write bit, and the one bit corresponds to the execute permission.
            Default behavior is 755. Below are some examples of permissions and
            their associated values: read, write, and execute: 7 read and
            execute: 5 read and write: 6 read only: 4
          type: string
    OSPolicyAssignmentInstanceFilter:
      id: OSPolicyAssignmentInstanceFilter
      description: >-
        Filters to select target VMs for an assignment. If more than one filter
        criteria is specified below, a VM will be selected if and only if it
        satisfies all of them.
      type: object
      properties:
        all:
          description: >-
            Target all VMs in the project. If true, no other criteria is
            permitted.
          type: boolean
        inclusionLabels:
          description: >-
            List of label sets used for VM inclusion. If the list has more than
            one `LabelSet`, the VM is included if any of the label sets are
            applicable for the VM.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyAssignmentLabelSet'
        exclusionLabels:
          description: >-
            List of label sets used for VM exclusion. If the list has more than
            one label set, the VM is excluded if any of the label sets are
            applicable for the VM.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyAssignmentLabelSet'
        inventories:
          description: >-
            List of inventories to select VMs. A VM is selected if its inventory
            data matches at least one of the following inventories.
          type: array
          items:
            $ref: '#/components/schemas/OSPolicyAssignmentInstanceFilterInventory'
    OSPolicyAssignmentLabelSet:
      id: OSPolicyAssignmentLabelSet
      description: >-
        Message representing label set. * A label is a key value pair set for a
        VM. * A LabelSet is a set of labels. * Labels within a LabelSet are
        ANDed. In other words, a LabelSet is applicable for a VM only if it
        matches all the labels in the LabelSet. * Example: A LabelSet with 2
        labels: `env=prod` and `type=webserver` will only be applicable for
        those VMs with both labels present.
      type: object
      properties:
        labels:
          description: >-
            Labels are identified by key/value pairs in this map. A VM should
            contain all the key/value pairs specified in this map to be
            selected.
          type: object
          additionalProperties:
            type: string
    OSPolicyAssignmentInstanceFilterInventory:
      id: OSPolicyAssignmentInstanceFilterInventory
      description: VM inventory details.
      type: object
      properties:
        osShortName:
          description: Required. The OS short name
          type: string
        osVersion:
          description: >-
            The OS version Prefix matches are supported if asterisk(*) is
            provided as the last character. For example, to match all versions
            with a major version of `7`, specify the following value for this
            field `7.*` An empty string matches all OS versions.
          type: string
    OSPolicyAssignmentRollout:
      id: OSPolicyAssignmentRollout
      description: >-
        Message to configure the rollout at the zonal level for the OS policy
        assignment.
      type: object
      properties:
        disruptionBudget:
          description: >-
            Required. The maximum number (or percentage) of VMs per zone to
            disrupt at any given moment.
          $ref: '#/components/schemas/FixedOrPercent'
        minWaitDuration:
          description: >-
            Required. This determines the minimum duration of time to wait after
            the configuration changes are applied through the current rollout. A
            VM continues to count towards the `disruption_budget` at least until
            this duration of time has passed after configuration changes are
            applied.
          type: string
          format: google-duration
    FixedOrPercent:
      id: FixedOrPercent
      description: >-
        Message encapsulating a value that can be either absolute ("fixed") or
        relative ("percent") to a value.
      type: object
      properties:
        fixed:
          description: Specifies a fixed value.
          type: integer
          format: int32
        percent:
          description: >-
            Specifies the relative value defined as a percentage, which will be
            multiplied by a reference value.
          type: integer
          format: int32
    GoogleCloudOsconfigV2_PolicyOrchestrator_OrchestrationState:
      id: GoogleCloudOsconfigV2_PolicyOrchestrator_OrchestrationState
      description: Describes the state of the orchestration process.
      type: object
      properties:
        currentIterationState:
          description: Output only. Current Wave iteration state.
          readOnly: true
          $ref: >-
            #/components/schemas/GoogleCloudOsconfigV2_PolicyOrchestrator_IterationState
        previousIterationState:
          description: Output only. Previous Wave iteration state.
          readOnly: true
          $ref: >-
            #/components/schemas/GoogleCloudOsconfigV2_PolicyOrchestrator_IterationState
    GoogleCloudOsconfigV2_PolicyOrchestrator_IterationState:
      id: GoogleCloudOsconfigV2_PolicyOrchestrator_IterationState
      description: Describes the state of a single iteration of the orchestrator.
      type: object
      properties:
        state:
          description: Output only. State of the iteration.
          readOnly: true
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - Iteration is in progress.
            - Iteration completed, with all actions being successful.
            - Iteration completed, with failures.
            - Iteration was explicitly cancelled.
            - Impossible to determine current state of the iteration.
          enum:
            - STATE_UNSPECIFIED
            - PROCESSING
            - COMPLETED
            - FAILED
            - CANCELLED
            - UNKNOWN
        iterationId:
          description: Output only. Unique identifier of the iteration.
          readOnly: true
          type: string
        progress:
          description: >-
            Output only. An estimated percentage of the progress. Number between
            0 and 100.
          readOnly: true
          type: number
          format: float
        performedActions:
          description: >-
            Output only. Overall number of actions done by the orchestrator so
            far.
          readOnly: true
          type: string
          format: int64
        failedActions:
          description: >-
            Output only. Number of orchestration actions which failed so far.
            For more details, query the Cloud Logs.
          readOnly: true
          type: string
          format: int64
        startTime:
          description: Output only. Start time of the wave iteration.
          readOnly: true
          type: string
          format: google-datetime
        finishTime:
          description: Output only. Finish time of the wave iteration.
          readOnly: true
          type: string
          format: google-datetime
        error:
          description: Output only. Error thrown in the wave iteration.
          readOnly: true
          $ref: '#/components/schemas/Status'
    GoogleCloudOsconfigV2__ListPolicyOrchestratorsResponse:
      id: GoogleCloudOsconfigV2__ListPolicyOrchestratorsResponse
      description: Response for the list policy orchestrator resources.
      type: object
      properties:
        policyOrchestrators:
          description: The policy orchestrators for the specified parent resource.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    OSPolicyAssignmentOperationMetadata:
      id: OSPolicyAssignmentOperationMetadata
      description: >-
        OS policy assignment operation metadata provided by OS policy assignment
        API methods that return long running operations.
      type: object
      properties:
        osPolicyAssignment:
          description: >-
            Reference to the `OSPolicyAssignment` API resource. Format:
            `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
          type: string
        apiMethod:
          description: The OS policy assignment API method.
          type: string
          enumDescriptions:
            - Invalid value
            - Create OS policy assignment API method
            - Update OS policy assignment API method
            - Delete OS policy assignment API method
          enum:
            - API_METHOD_UNSPECIFIED
            - CREATE
            - UPDATE
            - DELETE
        rolloutState:
          description: State of the rollout
          type: string
          enumDescriptions:
            - Invalid value
            - The rollout is in progress.
            - The rollout is being cancelled.
            - The rollout is cancelled.
            - The rollout has completed successfully.
          enum:
            - ROLLOUT_STATE_UNSPECIFIED
            - IN_PROGRESS
            - CANCELLING
            - CANCELLED
            - SUCCEEDED
        rolloutStartTime:
          description: Rollout start time
          type: string
          format: google-datetime
        rolloutUpdateTime:
          description: Rollout update time
          type: string
          format: google-datetime
    GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadata:
      id: GoogleCloudOsconfigV1__OSPolicyAssignmentOperationMetadata
      description: >-
        OS policy assignment operation metadata provided by OS policy assignment
        API methods that return long running operations.
      type: object
      properties:
        osPolicyAssignment:
          description: >-
            Reference to the `OSPolicyAssignment` API resource. Format:
            `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`
          type: string
        apiMethod:
          description: The OS policy assignment API method.
          type: string
          enumDescriptions:
            - Invalid value
            - Create OS policy assignment API method
            - Update OS policy assignment API method
            - Delete OS policy assignment API method
          enum:
            - API_METHOD_UNSPECIFIED
            - CREATE
            - UPDATE
            - DELETE
        rolloutState:
          description: State of the rollout
          type: string
          enumDescriptions:
            - Invalid value
            - The rollout is in progress.
            - The rollout is being cancelled.
            - The rollout is cancelled.
            - The rollout has completed successfully.
          enum:
            - ROLLOUT_STATE_UNSPECIFIED
            - IN_PROGRESS
            - CANCELLING
            - CANCELLED
            - SUCCEEDED
        rolloutStartTime:
          description: Rollout start time
          type: string
          format: google-datetime
        rolloutUpdateTime:
          description: Rollout update time
          type: string
          format: google-datetime
    GoogleCloudOsconfigV2__OperationMetadata:
      id: GoogleCloudOsconfigV2__OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
    GoogleCloudOsconfigV2beta__OperationMetadata:
      id: GoogleCloudOsconfigV2beta__OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
    StatusProto:
      id: StatusProto
      description: Wire-format for a Status object
      type: object
      properties:
        code:
          description: >-
            Numeric code drawn from the space specified below. Often, this is
            the canonical error space, and code is drawn from
            google3/util/task/codes.proto copybara:strip_begin(b/383363683)
            copybara:strip_end_and_replace optional int32 code = 1;
          type: integer
          format: int32
        space:
          description: >-
            copybara:strip_begin(b/383363683) Space to which this status belongs
            copybara:strip_end_and_replace optional string space = 2; // Space
            to which this status belongs
          type: string
        message:
          description: >-
            Detail message copybara:strip_begin(b/383363683)
            copybara:strip_end_and_replace optional string message = 3;
          type: string
        canonicalCode:
          description: >-
            copybara:strip_begin(b/383363683) copybara:strip_end_and_replace
            optional int32 canonical_code = 6;
          type: integer
          format: int32
        messageSet:
          description: >-
            message_set associates an arbitrary proto message with the status.
            copybara:strip_begin(b/383363683) copybara:strip_end_and_replace
            optional proto2.bridge.MessageSet message_set = 5;
          $ref: '#/components/schemas/MessageSet'
    MessageSet:
      id: MessageSet
      deprecated: true
      description: >-
        This is proto2's version of MessageSet. DEPRECATED: DO NOT USE FOR NEW
        FIELDS. If you are using editions or proto2, please make your own
        extendable messages for your use case. If you are using proto3, please
        use `Any` instead. MessageSet was the implementation of extensions for
        proto1. When proto2 was introduced, extensions were implemented as a
        first-class feature. This schema for MessageSet was meant to be a
        "bridge" solution to migrate MessageSet-bearing messages from proto1 to
        proto2. This schema has been open-sourced only to facilitate the
        migration of Google products with MessageSet-bearing messages to
        open-source environments.
      type: object
      properties: {}
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    operations:
      id: google.osconfig.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    policy_orchestrators:
      id: google.osconfig.policy_orchestrators
      name: policy_orchestrators
      title: Policy_orchestrators
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1global~1policyOrchestrators/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1global~1policyOrchestrators/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.policyOrchestrators
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1global~1policyOrchestrators~1{policyOrchestratorsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1global~1policyOrchestrators~1{policyOrchestratorsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v2~1organizations~1{organizationsId}~1locations~1global~1policyOrchestrators~1{policyOrchestratorsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policy_orchestrators/methods/get'
          - $ref: '#/components/x-stackQL-resources/policy_orchestrators/methods/list'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/policy_orchestrators/methods/create
        update:
          - $ref: >-
              #/components/x-stackQL-resources/policy_orchestrators/methods/patch
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/policy_orchestrators/methods/delete
paths:
  /v2/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: osconfig.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: osconfig.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: osconfig.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: osconfig.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/global/policyOrchestrators:
    parameters: *ref_1
    post:
      description: >-
        Creates a new policy orchestrator under the given project resource.
        `name` field of the given orchestrator are ignored and instead replaced
        by a product of `parent` and `policy_orchestrator_id`. Orchestrator
        state field might be only set to `ACTIVE`, `STOPPED` or omitted (in
        which case, the created resource will be in `ACTIVE` state anyway).
      operationId: osconfig.projects.locations.global.policyOrchestrators.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: policyOrchestratorId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
    get:
      description: Lists the policy orchestrators under the given parent project resource.
      operationId: osconfig.projects.locations.global.policyOrchestrators.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleCloudOsconfigV2__ListPolicyOrchestratorsResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v2/projects/{projectsId}/locations/global/policyOrchestrators/{policyOrchestratorsId}:
    parameters: *ref_1
    get:
      description: Retrieves an existing policy orchestrator, parented by a project.
      operationId: osconfig.projects.locations.global.policyOrchestrators.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
    patch:
      description: Updates an existing policy orchestrator, parented by a project.
      operationId: osconfig.projects.locations.global.policyOrchestrators.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes an existing policy orchestrator resource, parented by a project.
      operationId: osconfig.projects.locations.global.policyOrchestrators.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
  /v2/folders/{foldersId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: osconfig.folders.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v2/folders/{foldersId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: osconfig.folders.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: osconfig.folders.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/folders/{foldersId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: osconfig.folders.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/folders/{foldersId}/locations/global/policyOrchestrators:
    parameters: *ref_1
    post:
      description: >-
        Creates a new policy orchestrator under the given folder resource.
        `name` field of the given orchestrator are ignored and instead replaced
        by a product of `parent` and `policy_orchestrator_id`. Orchestrator
        state field might be only set to `ACTIVE`, `STOPPED` or omitted (in
        which case, the created resource will be in `ACTIVE` state anyway).
      operationId: osconfig.folders.locations.global.policyOrchestrators.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: query
          name: policyOrchestratorId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
    get:
      description: Lists the policy orchestrators under the given parent folder resource.
      operationId: osconfig.folders.locations.global.policyOrchestrators.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleCloudOsconfigV2__ListPolicyOrchestratorsResponse
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v2/folders/{foldersId}/locations/global/policyOrchestrators/{policyOrchestratorsId}:
    parameters: *ref_1
    get:
      description: Retrieves an existing policy orchestrator, parented by a folder.
      operationId: osconfig.folders.locations.global.policyOrchestrators.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
    patch:
      description: Updates an existing policy orchestrator, parented by a folder.
      operationId: osconfig.folders.locations.global.policyOrchestrators.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes an existing policy orchestrator resource, parented by a folder.
      operationId: osconfig.folders.locations.global.policyOrchestrators.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
  /v2/organizations/{organizationsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: osconfig.organizations.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v2/organizations/{organizationsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: osconfig.organizations.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: osconfig.organizations.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/organizations/{organizationsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: osconfig.organizations.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/organizations/{organizationsId}/locations/global/policyOrchestrators:
    parameters: *ref_1
    post:
      description: >-
        Creates a new policy orchestrator under the given organizations
        resource. `name` field of the given orchestrator are ignored and instead
        replaced by a product of `parent` and `policy_orchestrator_id`.
        Orchestrator state field might be only set to `ACTIVE`, `STOPPED` or
        omitted (in which case, the created resource will be in `ACTIVE` state
        anyway).
      operationId: osconfig.organizations.locations.global.policyOrchestrators.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: query
          name: policyOrchestratorId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
    get:
      description: >-
        Lists the policy orchestrators under the given parent organization
        resource.
      operationId: osconfig.organizations.locations.global.policyOrchestrators.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleCloudOsconfigV2__ListPolicyOrchestratorsResponse
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v2/organizations/{organizationsId}/locations/global/policyOrchestrators/{policyOrchestratorsId}:
    parameters: *ref_1
    get:
      description: Retrieves an existing policy orchestrator, parented by an organization.
      operationId: osconfig.organizations.locations.global.policyOrchestrators.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
    patch:
      description: Updates an existing policy orchestrator, parented by an organization.
      operationId: osconfig.organizations.locations.global.policyOrchestrators.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOsconfigV2__PolicyOrchestrator'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: >-
        Deletes an existing policy orchestrator resource, parented by an
        organization.
      operationId: osconfig.organizations.locations.global.policyOrchestrators.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policyOrchestratorsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
