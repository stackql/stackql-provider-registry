openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: On-Demand Scanning API
  description: A service to scan container images for vulnerabilities.
  version: v1
  x-discovery-doc-revision: '20230109'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://cloud.google.com/container-analysis/docs/on-demand-scanning/
servers:
  - url: https://ondemandscanning.googleapis.com
components:
  schemas:
    SlsaRecipe:
      type: object
      properties:
        entryPoint:
          type: string
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
        type:
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
          type: string
        environment:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
        arguments:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
          type: object
        definedInMaterial:
          format: int64
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          type: string
      id: SlsaRecipe
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
    InTotoStatement:
      description: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
      id: InTotoStatement
      properties:
        predicateType:
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
          type: string
        subject:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        _type:
          type: string
          description: Always `https://in-toto.io/Statement/v0.1`.
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
      type: object
    EnvelopeSignature:
      id: EnvelopeSignature
      properties:
        sig:
          format: byte
          type: string
        keyid:
          type: string
      type: object
    AnalysisCompleted:
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
      id: AnalysisCompleted
      properties:
        analysisType:
          items:
            type: string
          type: array
      type: object
    ListVulnerabilitiesResponseV1:
      properties:
        nextPageToken:
          description: A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results.
          type: string
        occurrences:
          description: The list of Vulnerability Occurrences resulting from a scan.
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
      description: ListVulnerabilitiesResponse contains a single page of vulnerabilities resulting from a scan.
      type: object
      id: ListVulnerabilitiesResponseV1
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      type: object
      description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
    AnalyzePackagesMetadata:
      id: AnalyzePackagesMetadata
      properties:
        createTime:
          type: string
          format: google-datetime
          description: When the scan was created.
        resourceUri:
          description: The resource URI of the container image being scanned.
          type: string
      description: AnalyzePackagesMetadata contains metadata for an active scan of a container image.
      type: object
    AnalyzePackagesResponse:
      properties:
        scan:
          type: string
          description: The name of the scan resource created by this successful scan.
      description: AnalyzePackagesResponse contains the information necessary to find results for the given scan.
      id: AnalyzePackagesResponse
      type: object
    BuildProvenance:
      type: object
      id: BuildProvenance
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      properties:
        startTime:
          type: string
          format: google-datetime
          description: Time at which execution of the build was started.
        builtArtifacts:
          items:
            $ref: '#/components/schemas/Artifact'
          type: array
          description: Output of the build.
        id:
          type: string
          description: Required. Unique identifier of the build.
        commands:
          description: Commands requested by the build.
          items:
            $ref: '#/components/schemas/Command'
          type: array
        builderVersion:
          type: string
          description: Version string of the builder at the time this build was executed.
        buildOptions:
          type: object
          additionalProperties:
            type: string
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
        sourceProvenance:
          $ref: '#/components/schemas/Source'
          description: Details of the Source input to the build.
        projectId:
          description: ID of the project.
          type: string
        createTime:
          description: Time at which the build was created.
          format: google-datetime
          type: string
        logsUri:
          description: URI where any logs for this provenance were written.
          type: string
        endTime:
          description: Time at which execution of the build was finished.
          format: google-datetime
          type: string
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        triggerId:
          description: Trigger identifier if the build was triggered automatically; empty if not.
          type: string
    ImageOccurrence:
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      type: object
      id: ImageOccurrence
      properties:
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        distance:
          description: Output only. The number of layers by which this image differs from the associated image basis.
          type: integer
          format: int32
        layerInfo:
          type: array
          items:
            $ref: '#/components/schemas/Layer'
          description: This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
    SlsaProvenance:
      id: SlsaProvenance
      type: object
      properties:
        materials:
          type: array
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
          items:
            $ref: '#/components/schemas/Material'
        recipe:
          $ref: '#/components/schemas/SlsaRecipe'
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
        builder:
          $ref: '#/components/schemas/SlsaBuilder'
          description: required
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
    AttestationOccurrence:
      id: AttestationOccurrence
      properties:
        jwts:
          description: One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
          type: array
          items:
            $ref: '#/components/schemas/Jwt'
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
        serializedPayload:
          type: string
          description: Required. The serialized payload that is verified by one or more `signatures`.
          format: byte
      type: object
      description: Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
    AliasContext:
      properties:
        kind:
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          type: string
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".
          description: The alias kind.
        name:
          type: string
          description: The alias name.
      id: AliasContext
      type: object
      description: An alias to a repo revision.
    SlsaProvenanceZeroTwo:
      id: SlsaProvenanceZeroTwo
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
        buildConfig:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        buildType:
          type: string
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
      type: object
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
    GrafeasV1FileLocation:
      type: object
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          type: string
          description: For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
      id: GrafeasV1FileLocation
    PackageIssue:
      properties:
        fileLocation:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          description: The location at which this package was found.
        fixedCpeUri:
          description: The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
          type: string
        affectedCpeUri:
          type: string
          description: Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
        fixAvailable:
          type: boolean
          description: Output only. Whether a fix is available for this package.
        packageType:
          type: string
          description: The type of package (e.g. OS, MAVEN, GO).
        fixedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
        fixedPackage:
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
          type: string
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
        affectedPackage:
          description: Required. The package this vulnerability was found in.
          type: string
        effectiveSeverity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          readOnly: true
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
      id: PackageIssue
      type: object
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
    SlsaCompleteness:
      properties:
        materials:
          type: boolean
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
        arguments:
          type: boolean
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
        environment:
          type: boolean
          description: If true, the builder claims that recipe.environment is claimed to be complete.
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
      id: SlsaCompleteness
    DeploymentOccurrence:
      description: The period during which some deployable was active in a runtime.
      type: object
      properties:
        address:
          type: string
          description: Address of the runtime element hosting this deployment.
        deployTime:
          format: google-datetime
          description: Required. Beginning of the lifetime of this deployment.
          type: string
        userEmail:
          type: string
          description: Identity of the user that triggered this deployment.
        platform:
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
          description: Platform hosting this deployment.
          type: string
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
        undeployTime:
          description: End of the lifetime of this deployment.
          format: google-datetime
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        resourceUri:
          type: array
          items:
            type: string
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
      id: DeploymentOccurrence
    GitSourceContext:
      description: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
      id: GitSourceContext
      type: object
      properties:
        url:
          description: Git repository URL.
          type: string
        revisionId:
          description: Git commit hash.
          type: string
    Layer:
      type: object
      id: Layer
      properties:
        arguments:
          description: The recovered arguments to the Dockerfile directive.
          type: string
        directive:
          type: string
          description: Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
      description: Layer holds metadata specific to a layer of a Docker image.
    Location:
      type: object
      id: Location
      properties:
        path:
          type: string
          description: The path from which we gathered that this package/version is installed.
        cpeUri:
          type: string
          description: Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
        version:
          $ref: '#/components/schemas/Version'
          description: Deprecated. The version installed at this location.
      description: An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
    DiscoveryOccurrence:
      properties:
        analysisStatus:
          description: The status of discovery for the resource.
          type: string
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - Analysis has finished unsuccessfully, the analysis itself is in a bad state.
            - The resource is known not to be supported.
        continuousAnalysis:
          type: string
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
        analysisStatusError:
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
          $ref: '#/components/schemas/Status'
        lastScanTime:
          description: The last time this resource was scanned.
          format: google-datetime
          type: string
        cpe:
          type: string
          description: The CPE of the resource being scanned.
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          type: array
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
        archiveTime:
          description: Output only. The time occurrences related to this discovery occurrence were archived.
          format: google-datetime
          type: string
          readOnly: true
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
      description: Provides information about the analysis status of a discovered resource.
      type: object
      id: DiscoveryOccurrence
    SlsaMetadata:
      type: object
      id: SlsaMetadata
      properties:
        buildFinishedOn:
          type: string
          description: The timestamp of when the build completed.
          format: google-datetime
        reproducible:
          type: boolean
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
        buildStartedOn:
          format: google-datetime
          description: The timestamp of when the build started.
          type: string
        buildInvocationId:
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
          type: string
        completeness:
          $ref: '#/components/schemas/SlsaCompleteness'
          description: Indicates that the builder claims certain fields in this message to be complete.
      description: Other properties of the build.
    PackageData:
      properties:
        cpeUri:
          type: string
          description: The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.
        package:
          description: The package being analysed for vulnerabilities
          type: string
        patchedCve:
          type: array
          items:
            type: string
          description: CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning
        packageType:
          type: string
          enumDescriptions:
            - ''
            - Operating System
            - Java packages from Maven.
            - Go third-party packages.
            - Go toolchain + standard library packages.
            - Python packages.
            - NPM packages.
          description: 'The type of package: os, maven, go, etc.'
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - OS
            - MAVEN
            - GO
            - GO_STDLIB
            - PYPI
            - NPM
        version:
          type: string
          description: The version of the package being analysed
        dependencyChain:
          description: The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.
          items:
            $ref: '#/components/schemas/LanguagePackageDependency'
          type: array
        osVersion:
          type: string
          description: The version of the OS Used to generate the cpe_uri for OS packages
        hashDigest:
          type: string
          description: HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.
        os:
          description: The OS affected by a vulnerability Used to generate the cpe_uri for OS packages
          type: string
        unused:
          type: string
        fileLocation:
          type: array
          items:
            $ref: '#/components/schemas/FileLocation'
          description: The path to the jar file / go binary file.
      id: PackageData
      type: object
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      id: Status
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          type: array
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
    DSSEAttestationOccurrence:
      description: Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
      type: object
      properties:
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: If doing something security critical, make sure to verify the signatures in this metadata.
        statement:
          $ref: '#/components/schemas/InTotoStatement'
      id: DSSEAttestationOccurrence
    ComplianceOccurrence:
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          items:
            $ref: '#/components/schemas/NonCompliantFile'
          type: array
      type: object
      id: ComplianceOccurrence
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
    CVSS:
      properties:
        impactScore:
          type: number
          format: float
        authentication:
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
        scope:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
        userInteraction:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
        integrityImpact:
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        attackVector:
          type: string
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
        availabilityImpact:
          type: string
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        confidentialityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
          type: string
        baseScore:
          format: float
          type: number
          description: The base score is a function of the base metric scores.
        exploitabilityScore:
          format: float
          type: number
        privilegesRequired:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          type: string
        attackComplexity:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
      id: CVSS
      type: object
      description: Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
    Identity:
      id: Identity
      type: object
      description: The unique identifier of the update.
      properties:
        updateId:
          description: The revision independent identifier of the update.
          type: string
        revision:
          type: integer
          format: int32
          description: The revision number of the update.
    Metadata:
      type: object
      id: Metadata
      properties:
        buildStartedOn:
          type: string
          description: The timestamp of when the build started.
          format: google-datetime
        reproducible:
          type: boolean
          description: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
        completeness:
          $ref: '#/components/schemas/Completeness'
          description: Indicates that the builder claims certain fields in this message to be complete.
        buildInvocationId:
          type: string
          description: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
        buildFinishedOn:
          format: google-datetime
          description: The timestamp of when the build completed.
          type: string
      description: Other properties of the build.
    ProjectRepoId:
      description: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
      properties:
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
        projectId:
          type: string
          description: The ID of the project.
      id: ProjectRepoId
      type: object
    VulnerabilityOccurrence:
      description: An occurrence of a severity vulnerability on a resource.
      properties:
        effectiveSeverity:
          description: The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
        type:
          type: string
          description: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
        longDescription:
          type: string
          description: Output only. A detailed description of this vulnerability.
        cvssv3:
          $ref: '#/components/schemas/CVSS'
          description: The cvss v3 score for the vulnerability.
        packageIssue:
          items:
            $ref: '#/components/schemas/PackageIssue'
          type: array
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
        shortDescription:
          type: string
          description: Output only. A one sentence description of this vulnerability.
        fixAvailable:
          description: Output only. Whether at least one of the affected packages has a fix available.
          type: boolean
        cvssVersion:
          description: Output only. CVSS version used to populate cvss_score and severity.
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        relatedUrls:
          type: array
          description: Output only. URLs related to this vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
        cvssScore:
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
          format: float
          type: number
        severity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          type: string
          description: Output only. The note provider assigned severity of this vulnerability.
      id: VulnerabilityOccurrence
      type: object
    Signature:
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      id: Signature
      properties:
        signature:
          format: byte
          description: The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
          type: string
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
      type: object
    Jwt:
      properties:
        compactJwt:
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
          type: string
      type: object
      id: Jwt
    LanguagePackageDependency:
      id: LanguagePackageDependency
      description: Indicates a language package available between this package and the customer's resource artifact.
      type: object
      properties:
        version:
          type: string
        package:
          type: string
    RepoId:
      properties:
        uid:
          type: string
          description: A server-assigned, globally unique identifier.
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
      description: A unique identifier for a Cloud Repo.
      type: object
      id: RepoId
    RelatedUrl:
      description: Metadata for any related URL information.
      properties:
        url:
          type: string
          description: Specific URL associated with the resource.
        label:
          type: string
          description: Label to describe usage of the URL.
      id: RelatedUrl
      type: object
    Occurrence:
      description: An instance of an analysis type that has been found on a resource.
      id: Occurrence
      properties:
        noteName:
          description: Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
          type: string
        createTime:
          type: string
          description: Output only. The time this occurrence was created.
          format: google-datetime
        discovery:
          description: Describes when a resource was discovered.
          $ref: '#/components/schemas/DiscoveryOccurrence'
        kind:
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
        envelope:
          description: https://github.com/secure-systems-lab/dsse
          $ref: '#/components/schemas/Envelope'
        image:
          $ref: '#/components/schemas/ImageOccurrence'
          description: Describes how this resource derives from the basis in the associated note.
        updateTime:
          type: string
          format: google-datetime
          description: Output only. The time this occurrence was last updated.
        name:
          type: string
          description: Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
        deployment:
          $ref: '#/components/schemas/DeploymentOccurrence'
          description: Describes the deployment of an artifact on a runtime.
        build:
          description: Describes a verifiable build.
          $ref: '#/components/schemas/BuildOccurrence'
        dsseAttestation:
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
          description: Describes an attestation of an artifact using dsse.
        resourceUri:
          type: string
          description: Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
        compliance:
          $ref: '#/components/schemas/ComplianceOccurrence'
          description: Describes a compliance violation on a linked resource.
        attestation:
          description: Describes an attestation of an artifact.
          $ref: '#/components/schemas/AttestationOccurrence'
        vulnerability:
          $ref: '#/components/schemas/VulnerabilityOccurrence'
          description: Describes a security vulnerability.
        package:
          description: Describes the installation of a package on the linked resource.
          $ref: '#/components/schemas/PackageOccurrence'
        upgrade:
          $ref: '#/components/schemas/UpgradeOccurrence'
          description: Describes an available package upgrade on the linked resource.
      type: object
    BuildOccurrence:
      description: Details of a build occurrence.
      id: BuildOccurrence
      type: object
      properties:
        intotoProvenance:
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
          $ref: '#/components/schemas/InTotoProvenance'
        intotoStatement:
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
          $ref: '#/components/schemas/InTotoStatement'
        provenance:
          description: The actual provenance for the build.
          $ref: '#/components/schemas/BuildProvenance'
        provenanceBytes:
          description: Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
          type: string
    Material:
      id: Material
      type: object
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
        uri:
          type: string
    Subject:
      id: Subject
      type: object
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
          description: '`"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
        name:
          type: string
    Hash:
      description: Container message for hash values.
      id: Hash
      type: object
      properties:
        value:
          description: Required. The hash value.
          type: string
          format: byte
        type:
          type: string
          description: Required. The type of hash that was performed, e.g. "SHA-256".
    NonCompliantFile:
      properties:
        reason:
          type: string
          description: Explains why a file is non compliant for a CIS check.
        displayCommand:
          type: string
          description: Command to display the non-compliant files.
        path:
          type: string
          description: Empty if `display_command` is set.
      type: object
      id: NonCompliantFile
      description: Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
    UpgradeDistribution:
      id: UpgradeDistribution
      description: The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
      properties:
        cve:
          items:
            type: string
          type: array
          description: The cve tied to this Upgrade.
        cpeUri:
          description: Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
          type: string
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
        classification:
          type: string
          description: The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
      type: object
    AnalyzePackagesRequestV1:
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/PackageData'
          description: The packages to analyze.
        resourceUri:
          type: string
          description: Required. The resource URI of the container image being scanned.
        includeOsvData:
          type: boolean
          description: '[DEPRECATED] Whether to include OSV data in the scan. For backwards compatibility reasons, this field can be neither removed nor renamed.'
      description: AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it.
      id: AnalyzePackagesRequestV1
      type: object
    AnalyzePackagesMetadataV1:
      properties:
        createTime:
          description: When the scan was created.
          type: string
          format: google-datetime
        resourceUri:
          description: The resource URI of the container image being scanned.
          type: string
      type: object
      id: AnalyzePackagesMetadataV1
      description: AnalyzePackagesMetadata contains metadata for an active scan of a container image.
    Fingerprint:
      properties:
        v1Name:
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
          type: string
        v2Blob:
          description: Required. The ordered list of v2 blobs that represent a given image.
          type: array
          items:
            type: string
        v2Name:
          description: 'Output only. The name of the image''s v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.'
          type: string
      description: A set of properties that uniquely identify a given Docker image.
      type: object
      id: Fingerprint
    FileLocation:
      id: FileLocation
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          type: string
          description: For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
      type: object
    SlsaBuilder:
      id: SlsaBuilder
      properties:
        id:
          type: string
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
      properties:
        entryPoint:
          type: string
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
    InTotoProvenance:
      id: InTotoProvenance
      type: object
      properties:
        recipe:
          description: Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required
          $ref: '#/components/schemas/Recipe'
        metadata:
          $ref: '#/components/schemas/Metadata'
        builderConfig:
          description: required
          $ref: '#/components/schemas/BuilderConfig'
        materials:
          items:
            type: string
          description: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
          type: array
    UpgradeOccurrence:
      properties:
        windowsUpdate:
          $ref: '#/components/schemas/WindowsUpdate'
          description: Required for Windows OS. Represents the metadata about the Windows update.
        distribution:
          description: Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.
          $ref: '#/components/schemas/UpgradeDistribution'
        parsedVersion:
          $ref: '#/components/schemas/Version'
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
      description: An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
      id: UpgradeOccurrence
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      description: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
      properties:
        id:
          type: string
      type: object
    Envelope:
      type: object
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
        payloadType:
          type: string
        payload:
          format: byte
          type: string
      description: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
      id: Envelope
    Version:
      type: object
      id: Version
      description: Version contains structured information about the version of a package.
      properties:
        kind:
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
        name:
          type: string
          description: Required only when version kind is NORMAL. The main part of the version name.
        fullName:
          type: string
          description: Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
        revision:
          type: string
          description: The iteration of the package build from the above version.
        inclusive:
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
          type: boolean
        epoch:
          description: Used to correct mistakes in the version numbering scheme.
          type: integer
          format: int32
    Recipe:
      description: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
      type: object
      id: Recipe
      properties:
        environment:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
          type: array
        entryPoint:
          type: string
          description: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
        type:
          description: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
          type: string
        definedInMaterial:
          format: int64
          description: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
          type: string
        arguments:
          description: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
    AnalyzePackagesResponseV1:
      description: AnalyzePackagesResponse contains the information necessary to find results for the given scan.
      id: AnalyzePackagesResponseV1
      properties:
        scan:
          description: The name of the scan resource created by this successful scan.
          type: string
      type: object
    Category:
      properties:
        name:
          type: string
          description: The localized name of the category.
        categoryId:
          description: The identifier of the category.
          type: string
      type: object
      id: Category
      description: The category to which the update belongs.
    GerritSourceContext:
      properties:
        revisionId:
          description: A revision (commit) ID.
          type: string
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        gerritProject:
          description: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
          type: string
      id: GerritSourceContext
      description: A SourceContext referring to a Gerrit project.
      type: object
    ListOperationsResponse:
      id: ListOperationsResponse
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          description: A list of operations that matches the specified filter in the request.
          type: array
        nextPageToken:
          type: string
          description: The standard List next-page token.
      description: The response message for Operations.ListOperations.
      type: object
    Artifact:
      id: Artifact
      properties:
        id:
          description: Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
          type: string
        checksum:
          type: string
          description: Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
        names:
          description: Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
          items:
            type: string
          type: array
      description: Artifact describes a build product.
      type: object
    Completeness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      properties:
        materials:
          type: boolean
          description: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
        arguments:
          type: boolean
          description: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
        environment:
          description: If true, the builder claims that recipe.environment is claimed to be complete.
          type: boolean
      id: Completeness
      type: object
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      properties:
        metadata:
          type: object
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        name:
          type: string
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
        response:
          type: object
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
      type: object
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      description: Identifies the event that kicked off the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        environment:
          type: object
          additionalProperties:
            description: Properties of the object.
            type: any
    FileHashes:
      properties:
        fileHash:
          description: Required. Collection of file hashes.
          type: array
          items:
            $ref: '#/components/schemas/Hash'
      type: object
      id: FileHashes
      description: Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
    PackageOccurrence:
      type: object
      properties:
        name:
          description: Required. Output only. The name of the installed package.
          readOnly: true
          type: string
        version:
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
          readOnly: true
        license:
          description: Licenses that have been declared by the authors of the package.
          $ref: '#/components/schemas/License'
        cpeUri:
          type: string
          readOnly: true
          description: Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
        packageType:
          description: Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
          readOnly: true
          type: string
        location:
          items:
            $ref: '#/components/schemas/Location'
          description: All of the places within the filesystem versions of this package have been found.
          type: array
        architecture:
          readOnly: true
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          type: string
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
      description: Details on how a particular software package was installed on a system.
      id: PackageOccurrence
    Empty:
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      id: Empty
    Command:
      id: Command
      description: Command describes a step performed as part of the build pipeline.
      properties:
        env:
          items:
            type: string
          description: Environment variables set before running this command.
          type: array
        id:
          description: Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
          type: string
        args:
          type: array
          description: Command-line arguments used when executing this command.
          items:
            type: string
        name:
          type: string
          description: Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
        waitFor:
          items:
            type: string
          type: array
          description: The ID(s) of the command(s) that this command depends on.
        dir:
          type: string
          description: Working directory (relative to project source root) used when running this command.
      type: object
    SourceContext:
      id: SourceContext
      type: object
      properties:
        cloudRepo:
          $ref: '#/components/schemas/CloudRepoSourceContext'
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
        gerrit:
          $ref: '#/components/schemas/GerritSourceContext'
          description: A SourceContext referring to a Gerrit project.
        git:
          $ref: '#/components/schemas/GitSourceContext'
          description: A SourceContext referring to any third party Git repo (e.g., GitHub).
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels with user defined metadata.
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
      properties:
        materials:
          type: boolean
        parameters:
          type: boolean
        environment:
          type: boolean
    CloudRepoSourceContext:
      id: CloudRepoSourceContext
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      type: object
      properties:
        repoId:
          $ref: '#/components/schemas/RepoId'
          description: The ID of the repo.
        aliasContext:
          description: An alias, which may be a branch or tag.
          $ref: '#/components/schemas/AliasContext'
        revisionId:
          description: A revision ID.
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      description: Other properties of the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      properties:
        reproducible:
          type: boolean
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildFinishedOn:
          format: google-datetime
          type: string
        buildStartedOn:
          format: google-datetime
          type: string
        buildInvocationId:
          type: string
      type: object
    BuilderConfig:
      type: object
      properties:
        id:
          type: string
      id: BuilderConfig
    Source:
      description: Source describes the location of the source used for the build.
      properties:
        additionalContexts:
          type: array
          description: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
          items:
            $ref: '#/components/schemas/SourceContext'
        fileHashes:
          description: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          type: object
        artifactStorageSourceUri:
          type: string
          description: If provided, the input binary artifacts for the build came from this location.
        context:
          $ref: '#/components/schemas/SourceContext'
          description: If provided, the source code used for the build came from this location.
      type: object
      id: Source
    WindowsUpdate:
      type: object
      properties:
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        title:
          description: The localized title of the update.
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: The list of categories to which the update belongs.
        kbArticleIds:
          items:
            type: string
          type: array
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
        lastPublishedTimestamp:
          type: string
          description: The last published timestamp of the update.
          format: google-datetime
        description:
          type: string
          description: The localized description of the update.
        identity:
          description: Required - The unique identifier for the update.
          $ref: '#/components/schemas/Identity'
      id: WindowsUpdate
      description: Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
    License:
      properties:
        expression:
          type: string
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
        comments:
          description: Comments
          type: string
      type: object
      description: License information.
      id: License
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    scans:
      id: google.ondemandscanning.scans
      name: scans
      title: Scans
      methods:
        projects_locations_scans_analyzePackages:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1scans:analyzePackages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    vulnerabilities:
      id: google.ondemandscanning.vulnerabilities
      name: vulnerabilities
      title: Vulnerabilities
      methods:
        projects_locations_scans_vulnerabilities_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1scans~1{scansId}~1vulnerabilities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: occurrences
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerabilities/methods/projects_locations_scans_vulnerabilities_list'
        insert: []
        update: []
        delete: []
    operations:
      id: google.ondemandscanning.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_wait:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:wait/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages:
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/key'
    post:
      description: Initiates an analysis of the provided packages.
      operationId: ondemandscanning.projects.locations.scans.analyzePackages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzePackagesRequestV1'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: scans
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities:
    parameters: *ref_1
    get:
      description: Lists vulnerabilities resulting from a successfully completed scan.
      operationId: ondemandscanning.projects.locations.scans.vulnerabilities.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVulnerabilitiesResponseV1'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: scansId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: vulnerabilities
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: ondemandscanning.projects.locations.operations.cancel
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait:
    parameters: *ref_1
    post:
      description: Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
      operationId: ondemandscanning.projects.locations.operations.wait
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
        - in: query
          name: timeout
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
      operationId: ondemandscanning.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: ondemandscanning.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: ondemandscanning.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
