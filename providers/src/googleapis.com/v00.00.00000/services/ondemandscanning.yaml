openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: On-Demand Scanning API
  description: A service to scan container images for vulnerabilities.
  version: v1
  x-discovery-doc-revision: '20230814'
  x-generated-date: '2023-08-23'
externalDocs:
  url: 'https://cloud.google.com/container-analysis/docs/on-demand-scanning/'
servers:
  - url: 'https://ondemandscanning.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    SlsaBuilder:
      properties:
        id:
          type: string
      type: object
      id: SlsaBuilder
    SbomReferenceIntotoPredicate:
      properties:
        location:
          type: string
          description: The location of the SBOM.
        referrerId:
          type: string
          description: The person or system referring this predicate to the consumer.
        mimeType:
          description: The mime type of the SBOM.
          type: string
        digest:
          description: A map of algorithm to digest of the contents of the SBOM.
          additionalProperties:
            type: string
          type: object
      description: A predicate which describes the SBOM being referenced.
      type: object
      id: SbomReferenceIntotoPredicate
    CloudRepoSourceContext:
      id: CloudRepoSourceContext
      description: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
      type: object
      properties:
        aliasContext:
          $ref: '#/components/schemas/AliasContext'
          description: 'An alias, which may be a branch or tag.'
        revisionId:
          description: A revision ID.
          type: string
        repoId:
          description: The ID of the repo.
          $ref: '#/components/schemas/RepoId'
    BuilderConfig:
      properties:
        id:
          type: string
      type: object
      id: BuilderConfig
    Source:
      properties:
        additionalContexts:
          items:
            $ref: '#/components/schemas/SourceContext'
          description: 'If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.'
          type: array
        artifactStorageSourceUri:
          description: 'If provided, the input binary artifacts for the build came from this location.'
          type: string
        fileHashes:
          type: object
          description: 'Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.'
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
        context:
          $ref: '#/components/schemas/SourceContext'
          description: 'If provided, the source code used for the build came from this location.'
      description: Source describes the location of the source used for the build.
      id: Source
      type: object
    CVSS:
      description: 'Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.'
      type: object
      properties:
        integrityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        userInteraction:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - USER_INTERACTION_UNSPECIFIED
            - USER_INTERACTION_NONE
            - USER_INTERACTION_REQUIRED
        availabilityImpact:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          type: string
        authentication:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          enum:
            - AUTHENTICATION_UNSPECIFIED
            - AUTHENTICATION_MULTIPLE
            - AUTHENTICATION_SINGLE
            - AUTHENTICATION_NONE
        baseScore:
          description: The base score is a function of the base metric scores.
          format: float
          type: number
        attackComplexity:
          enum:
            - ATTACK_COMPLEXITY_UNSPECIFIED
            - ATTACK_COMPLEXITY_LOW
            - ATTACK_COMPLEXITY_HIGH
            - ATTACK_COMPLEXITY_MEDIUM
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        privilegesRequired:
          type: string
          enum:
            - PRIVILEGES_REQUIRED_UNSPECIFIED
            - PRIVILEGES_REQUIRED_NONE
            - PRIVILEGES_REQUIRED_LOW
            - PRIVILEGES_REQUIRED_HIGH
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
        impactScore:
          format: float
          type: number
        exploitabilityScore:
          format: float
          type: number
        scope:
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - SCOPE_UNSPECIFIED
            - SCOPE_UNCHANGED
            - SCOPE_CHANGED
        attackVector:
          enum:
            - ATTACK_VECTOR_UNSPECIFIED
            - ATTACK_VECTOR_NETWORK
            - ATTACK_VECTOR_ADJACENT
            - ATTACK_VECTOR_LOCAL
            - ATTACK_VECTOR_PHYSICAL
          description: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
        confidentialityImpact:
          enum:
            - IMPACT_UNSPECIFIED
            - IMPACT_HIGH
            - IMPACT_LOW
            - IMPACT_NONE
            - IMPACT_PARTIAL
            - IMPACT_COMPLETE
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
      id: CVSS
    ListVulnerabilitiesResponseV1:
      properties:
        occurrences:
          items:
            $ref: '#/components/schemas/Occurrence'
          type: array
          description: The list of Vulnerability Occurrences resulting from a scan.
        nextPageToken:
          description: A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results.
          type: string
      id: ListVulnerabilitiesResponseV1
      description: ListVulnerabilitiesResponse contains a single page of vulnerabilities resulting from a scan.
      type: object
    SlsaProvenanceV1:
      id: SlsaProvenanceV1
      type: object
      description: 'Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.'
      properties:
        buildDefinition:
          $ref: '#/components/schemas/BuildDefinition'
        runDetails:
          $ref: '#/components/schemas/RunDetails'
    SourceContext:
      id: SourceContext
      type: object
      properties:
        cloudRepo:
          description: A SourceContext referring to a revision in a Google Cloud Source Repo.
          $ref: '#/components/schemas/CloudRepoSourceContext'
        gerrit:
          description: A SourceContext referring to a Gerrit project.
          $ref: '#/components/schemas/GerritSourceContext'
        git:
          $ref: '#/components/schemas/GitSourceContext'
          description: 'A SourceContext referring to any third party Git repo (e.g., GitHub).'
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels with user defined metadata.
      description: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
    BuildProvenance:
      description: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
      id: BuildProvenance
      type: object
      properties:
        createTime:
          description: Time at which the build was created.
          format: google-datetime
          type: string
        creator:
          description: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
          type: string
        projectId:
          type: string
          description: ID of the project.
        sourceProvenance:
          description: Details of the Source input to the build.
          $ref: '#/components/schemas/Source'
        endTime:
          format: google-datetime
          type: string
          description: Time at which execution of the build was finished.
        commands:
          type: array
          items:
            $ref: '#/components/schemas/Command'
          description: Commands requested by the build.
        buildOptions:
          type: object
          description: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
          additionalProperties:
            type: string
        id:
          description: Required. Unique identifier of the build.
          type: string
        startTime:
          type: string
          description: Time at which execution of the build was started.
          format: google-datetime
        builtArtifacts:
          items:
            $ref: '#/components/schemas/Artifact'
          description: Output of the build.
          type: array
        triggerId:
          type: string
          description: Trigger identifier if the build was triggered automatically; empty if not.
        builderVersion:
          type: string
          description: Version string of the builder at the time this build was executed.
        logsUri:
          type: string
          description: URI where any logs for this provenance were written.
    NonCompliantFile:
      properties:
        reason:
          description: Explains why a file is non compliant for a CIS check.
          type: string
        displayCommand:
          description: Command to display the non-compliant files.
          type: string
        path:
          type: string
          description: Empty if `display_command` is set.
      id: NonCompliantFile
      type: object
      description: 'Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using ''path''.'
    RepoId:
      id: RepoId
      type: object
      properties:
        projectRepoId:
          $ref: '#/components/schemas/ProjectRepoId'
          description: A combination of a project ID and a repo name.
        uid:
          description: 'A server-assigned, globally unique identifier.'
          type: string
      description: A unique identifier for a Cloud Repo.
    AnalyzePackagesMetadata:
      type: object
      description: AnalyzePackagesMetadata contains metadata for an active scan of a container image.
      id: AnalyzePackagesMetadata
      properties:
        createTime:
          format: google-datetime
          type: string
          description: When the scan was created.
        resourceUri:
          description: The resource URI of the container image being scanned.
          type: string
    InTotoStatement:
      description: 'Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".'
      properties:
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
        slsaProvenance:
          $ref: '#/components/schemas/SlsaProvenance'
        slsaProvenanceZeroTwo:
          $ref: '#/components/schemas/SlsaProvenanceZeroTwo'
        _type:
          type: string
          description: 'Always `https://in-toto.io/Statement/v0.1`.'
        predicateType:
          type: string
          description: '`https://slsa.dev/provenance/v0.1` for SlsaProvenance.'
        provenance:
          $ref: '#/components/schemas/InTotoProvenance'
      id: InTotoStatement
      type: object
    Operation:
      properties:
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
        response:
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
      description: This resource represents a long-running operation that is the result of a network API call.
      type: object
      id: Operation
    Justification:
      id: Justification
      description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
      type: object
      properties:
        details:
          description: Additional details on why this justification was chosen.
          type: string
        justificationType:
          enum:
            - JUSTIFICATION_TYPE_UNSPECIFIED
            - COMPONENT_NOT_PRESENT
            - VULNERABLE_CODE_NOT_PRESENT
            - VULNERABLE_CODE_NOT_IN_EXECUTE_PATH
            - VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY
            - INLINE_MITIGATIONS_ALREADY_EXIST
          type: string
          enumDescriptions:
            - JUSTIFICATION_TYPE_UNSPECIFIED.
            - The vulnerable component is not present in the product.
            - The vulnerable code is not present. Typically this case occurs when source code is configured or built in a way that excludes the vulnerable code.
            - The vulnerable code can not be executed. Typically this case occurs when the product includes the vulnerable code but does not call or use the vulnerable code.
            - The vulnerable code cannot be controlled by an attacker to exploit the vulnerability.
            - The product includes built-in protections or features that prevent exploitation of the vulnerability. These built-in protections cannot be subverted by the attacker and cannot be configured or disabled by the user. These mitigations completely prevent exploitation based on known attack vectors.
          description: The justification type for this vulnerability.
    Jwt:
      type: object
      properties:
        compactJwt:
          type: string
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
      id: Jwt
    ComplianceOccurrence:
      id: ComplianceOccurrence
      description: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
      type: object
      properties:
        nonComplianceReason:
          type: string
        nonCompliantFiles:
          items:
            $ref: '#/components/schemas/NonCompliantFile'
          type: array
    Location:
      id: Location
      type: object
      properties:
        version:
          description: Deprecated. The version installed at this location.
          $ref: '#/components/schemas/Version'
        path:
          type: string
          description: The path from which we gathered that this package/version is installed.
        cpeUri:
          type: string
          description: 'Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)'
      description: 'An occurrence of a particular package installation found within a system''s filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.'
    AnalyzePackagesMetadataV1:
      type: object
      properties:
        createTime:
          format: google-datetime
          description: When the scan was created.
          type: string
        resourceUri:
          type: string
          description: The resource URI of the container image being scanned.
      description: AnalyzePackagesMetadata contains metadata for an active scan of a container image.
      id: AnalyzePackagesMetadataV1
    GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness:
      description: Indicates that the builder claims certain fields in this message to be complete.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
      properties:
        materials:
          type: boolean
        parameters:
          type: boolean
        environment:
          type: boolean
      type: object
    UpgradeDistribution:
      type: object
      properties:
        classification:
          description: 'The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)'
          type: string
        cpeUri:
          description: 'Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.'
          type: string
        severity:
          description: The severity as specified by the upstream operating system.
          type: string
        cve:
          items:
            type: string
          description: The cve tied to this Upgrade.
          type: array
      id: UpgradeDistribution
      description: 'The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.'
    Version:
      id: Version
      properties:
        kind:
          description: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
          enum:
            - VERSION_KIND_UNSPECIFIED
            - NORMAL
            - MINIMUM
            - MAXIMUM
          type: string
          enumDescriptions:
            - Unknown.
            - A standard package version.
            - A special version representing negative infinity.
            - A special version representing positive infinity.
        fullName:
          description: 'Human readable version string. This string is of the form :- and is only set when kind is NORMAL.'
          type: string
        epoch:
          format: int32
          type: integer
          description: Used to correct mistakes in the version numbering scheme.
        inclusive:
          type: boolean
          description: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
        revision:
          type: string
          description: The iteration of the package build from the above version.
        name:
          description: Required only when version kind is NORMAL. The main part of the version name.
          type: string
      type: object
      description: Version contains structured information about the version of a package.
    Subject:
      type: object
      properties:
        digest:
          additionalProperties:
            type: string
          type: object
          description: '`"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet'
        name:
          type: string
      id: Subject
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      id: ListOperationsResponse
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
          description: A list of operations that matches the specified filter in the request.
    License:
      properties:
        comments:
          type: string
          description: Comments
        expression:
          type: string
          description: 'Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".'
      id: License
      description: License information.
      type: object
    PackageVersion:
      id: PackageVersion
      type: object
      properties:
        version:
          type: string
        name:
          type: string
    InTotoProvenance:
      type: object
      id: InTotoProvenance
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        materials:
          items:
            type: string
          type: array
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
        recipe:
          $ref: '#/components/schemas/Recipe'
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
        builderConfig:
          description: required
          $ref: '#/components/schemas/BuilderConfig'
    Artifact:
      id: Artifact
      type: object
      description: Artifact describes a build product.
      properties:
        id:
          description: 'Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.'
          type: string
        names:
          type: array
          items:
            type: string
          description: 'Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.'
        checksum:
          type: string
          description: 'Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.'
    PackageData:
      type: object
      id: PackageData
      properties:
        binarySourceInfo:
          description: A bundle containing the binary and source information.
          items:
            $ref: '#/components/schemas/BinarySourceInfo'
          type: array
        maintainer:
          description: The maintainer of the package.
          $ref: '#/components/schemas/Maintainer'
        binaryVersion:
          $ref: '#/components/schemas/PackageVersion'
          description: DEPRECATED
        sourceVersion:
          description: DEPRECATED
          $ref: '#/components/schemas/PackageVersion'
        osVersion:
          description: The version of the OS Used to generate the cpe_uri for OS packages
          type: string
        hashDigest:
          description: HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.
          type: string
        dependencyChain:
          description: 'The dependency chain between this package and the user''s artifact. List in order from the customer''s package under review first, to the current package last. Inclusive of the original package and the current package.'
          items:
            $ref: '#/components/schemas/LanguagePackageDependency'
          type: array
        patchedCve:
          description: CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning
          items:
            type: string
          type: array
        cpeUri:
          type: string
          description: 'The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.'
        unused:
          type: string
        version:
          type: string
          description: The version of the package being analysed
        package:
          type: string
          description: The package being analysed for vulnerabilities
        os:
          description: The OS affected by a vulnerability Used to generate the cpe_uri for OS packages
          type: string
        fileLocation:
          description: The path to the jar file / go binary file.
          items:
            $ref: '#/components/schemas/FileLocation'
          type: array
        packageType:
          type: string
          enum:
            - PACKAGE_TYPE_UNSPECIFIED
            - OS
            - MAVEN
            - GO
            - GO_STDLIB
            - PYPI
            - NPM
          description: 'The type of package: os, maven, go, etc.'
          enumDescriptions:
            - ''
            - Operating System
            - Java packages from Maven.
            - Go third-party packages.
            - Go toolchain + standard library packages.
            - Python packages.
            - NPM packages.
        architecture:
          type: string
          description: The architecture of the package.
    Metadata:
      description: Other properties of the build.
      id: Metadata
      properties:
        buildStartedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build started.
        reproducible:
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
          type: boolean
        buildFinishedOn:
          format: google-datetime
          type: string
          description: The timestamp of when the build completed.
        buildInvocationId:
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
          type: string
        completeness:
          $ref: '#/components/schemas/Completeness'
          description: Indicates that the builder claims certain fields in this message to be complete.
      type: object
    AnalyzePackagesResponseV1:
      description: AnalyzePackagesResponse contains the information necessary to find results for the given scan.
      properties:
        scan:
          type: string
          description: The name of the scan resource created by this successful scan.
      type: object
      id: AnalyzePackagesResponseV1
    UpgradeOccurrence:
      id: UpgradeOccurrence
      properties:
        parsedVersion:
          description: Required for non-Windows OS. The version of the package in a machine + human readable form.
          $ref: '#/components/schemas/Version'
        windowsUpdate:
          description: Required for Windows OS. Represents the metadata about the Windows update.
          $ref: '#/components/schemas/WindowsUpdate'
        package:
          type: string
          description: Required for non-Windows OS. The package this Upgrade is for.
        distribution:
          $ref: '#/components/schemas/UpgradeDistribution'
          description: 'Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence.'
      description: 'An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.'
      type: object
    DiscoveryOccurrence:
      description: Provides information about the analysis status of a discovered resource.
      properties:
        analysisStatus:
          type: string
          description: The status of discovery for the resource.
          enum:
            - ANALYSIS_STATUS_UNSPECIFIED
            - PENDING
            - SCANNING
            - FINISHED_SUCCESS
            - COMPLETE
            - FINISHED_FAILED
            - FINISHED_UNSUPPORTED
          enumDescriptions:
            - Unknown.
            - Resource is known but no action has been taken yet.
            - Resource is being analyzed.
            - Analysis has finished successfully.
            - Analysis has completed.
            - 'Analysis has finished unsuccessfully, the analysis itself is in a bad state.'
            - The resource is known not to be supported.
        analysisError:
          items:
            $ref: '#/components/schemas/Status'
          type: array
          description: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
        cpe:
          description: The CPE of the resource being scanned.
          type: string
        continuousAnalysis:
          enumDescriptions:
            - Unknown.
            - The resource is continuously analyzed.
            - The resource is ignored for continuous analysis.
          type: string
          description: Whether the resource is continuously analyzed.
          enum:
            - CONTINUOUS_ANALYSIS_UNSPECIFIED
            - ACTIVE
            - INACTIVE
        sbomStatus:
          description: The status of an SBOM generation.
          $ref: '#/components/schemas/SBOMStatus'
        archiveTime:
          description: Output only. The time occurrences related to this discovery occurrence were archived.
          type: string
          readOnly: true
          format: google-datetime
        lastScanTime:
          type: string
          format: google-datetime
          description: The last time this resource was scanned.
        analysisStatusError:
          $ref: '#/components/schemas/Status'
          description: When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
        analysisCompleted:
          $ref: '#/components/schemas/AnalysisCompleted'
      id: DiscoveryOccurrence
      type: object
    ImageOccurrence:
      type: object
      properties:
        baseResourceUrl:
          description: Output only. This contains the base image URL for the derived image occurrence.
          type: string
        layerInfo:
          items:
            $ref: '#/components/schemas/Layer'
          description: 'This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.'
          type: array
        fingerprint:
          description: Required. The fingerprint of the derived image.
          $ref: '#/components/schemas/Fingerprint'
        distance:
          description: Output only. The number of layers by which this image differs from the associated image basis.
          type: integer
          format: int32
      description: Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
      id: ImageOccurrence
    Completeness:
      properties:
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
        environment:
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
          type: boolean
        arguments:
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
          type: boolean
      id: Completeness
      type: object
      description: Indicates that the builder claims certain fields in this message to be complete.
    ResourceDescriptor:
      properties:
        name:
          type: string
        downloadLocation:
          type: string
        uri:
          type: string
        digest:
          additionalProperties:
            type: string
          type: object
        annotations:
          additionalProperties:
            type: any
          type: object
        content:
          type: string
          format: byte
        mediaType:
          type: string
      type: object
      id: ResourceDescriptor
    SlsaCompleteness:
      id: SlsaCompleteness
      type: object
      properties:
        arguments:
          type: boolean
          description: 'If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.'
        materials:
          description: 'If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".'
          type: boolean
        environment:
          description: 'If true, the builder claims that recipe.environment is claimed to be complete.'
          type: boolean
      description: Indicates that the builder claims certain fields in this message to be complete.
    ProjectRepoId:
      description: 'Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.'
      type: object
      id: ProjectRepoId
      properties:
        projectId:
          type: string
          description: The ID of the project.
        repoName:
          description: The name of the repo. Leave empty for the default repo.
          type: string
    AnalyzePackagesResponse:
      type: object
      id: AnalyzePackagesResponse
      description: AnalyzePackagesResponse contains the information necessary to find results for the given scan.
      properties:
        scan:
          type: string
          description: The name of the scan resource created by this successful scan.
    AliasContext:
      properties:
        kind:
          type: string
          enumDescriptions:
            - Unknown.
            - Git tag.
            - Git branch.
            - 'Used to specify non-standard aliases. For example, if a Git repo has a ref named "refs/foo/bar".'
          enum:
            - KIND_UNSPECIFIED
            - FIXED
            - MOVABLE
            - OTHER
          description: The alias kind.
        name:
          type: string
          description: The alias name.
      type: object
      description: An alias to a repo revision.
      id: AliasContext
    VexAssessment:
      id: VexAssessment
      description: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
      type: object
      properties:
        relatedUris:
          items:
            $ref: '#/components/schemas/RelatedUrl'
          description: Holds a list of references associated with this vulnerability item and assessment.
          type: array
        justification:
          $ref: '#/components/schemas/Justification'
          description: Justification provides the justification when the state of the assessment if NOT_AFFECTED.
        noteName:
          type: string
          description: 'The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.'
        cve:
          description: 'Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.'
          deprecated: true
          type: string
        state:
          enumDescriptions:
            - No state is specified.
            - This product is known to be affected by this vulnerability.
            - This product is known to be not affected by this vulnerability.
            - This product contains a fix for this vulnerability.
            - 'It is not known yet whether these versions are or are not affected by the vulnerability. However, it is still under investigation.'
          type: string
          enum:
            - STATE_UNSPECIFIED
            - AFFECTED
            - NOT_AFFECTED
            - FIXED
            - UNDER_INVESTIGATION
          description: Provides the state of this Vulnerability assessment.
        vulnerabilityId:
          type: string
          description: 'The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.'
        impacts:
          type: array
          items:
            type: string
          description: 'Contains information about the impact of this vulnerability, this will change with time.'
        remediations:
          items:
            $ref: '#/components/schemas/Remediation'
          description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
          type: array
    RelatedUrl:
      properties:
        label:
          type: string
          description: Label to describe usage of the URL.
        url:
          type: string
          description: Specific URL associated with the resource.
      id: RelatedUrl
      type: object
      description: Metadata for any related URL information.
    GrafeasV1FileLocation:
      description: Indicates the location at which a package was found.
      properties:
        filePath:
          description: 'For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.'
          type: string
      id: GrafeasV1FileLocation
      type: object
    FileLocation:
      type: object
      properties:
        filePath:
          type: string
          description: 'For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.'
      id: FileLocation
      description: Indicates the location at which a package was found.
    BinarySourceInfo:
      properties:
        binaryVersion:
          $ref: '#/components/schemas/PackageVersion'
          description: 'The binary package. This is significant when the source is different than the binary itself. Historically if they''ve differed, we''ve stored the name of the source and its version in the package/version fields, but we should also store the binary package info, as that''s what''s actually installed. See b/175908657#comment15.'
        sourceVersion:
          description: 'The source package. Similar to the above, this is significant when the source is different than the binary itself. Since the top-level package/version fields are based on an if/else, we need a separate field for both binary and source if we want to know definitively where the data is coming from.'
          $ref: '#/components/schemas/PackageVersion'
      type: object
      id: BinarySourceInfo
    SbomReferenceIntotoPayload:
      id: SbomReferenceIntotoPayload
      properties:
        _type:
          description: Identifier for the schema of the Statement.
          type: string
        predicate:
          $ref: '#/components/schemas/SbomReferenceIntotoPredicate'
          description: Additional parameters of the Predicate. Includes the actual data about the SBOM.
        subject:
          description: Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        predicateType:
          description: URI identifying the type of the Predicate.
          type: string
      type: object
      description: 'The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.'
    FileHashes:
      properties:
        fileHash:
          type: array
          items:
            $ref: '#/components/schemas/Hash'
          description: Required. Collection of file hashes.
      description: 'Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.'
      type: object
      id: FileHashes
    DeploymentOccurrence:
      description: The period during which some deployable was active in a runtime.
      id: DeploymentOccurrence
      type: object
      properties:
        undeployTime:
          format: google-datetime
          type: string
          description: End of the lifetime of this deployment.
        userEmail:
          description: Identity of the user that triggered this deployment.
          type: string
        address:
          description: Address of the runtime element hosting this deployment.
          type: string
        config:
          description: Configuration used to create this deployment.
          type: string
        deployTime:
          description: Required. Beginning of the lifetime of this deployment.
          type: string
          format: google-datetime
        resourceUri:
          description: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
          type: array
          items:
            type: string
        platform:
          type: string
          description: Platform hosting this deployment.
          enumDescriptions:
            - Unknown.
            - Google Container Engine.
            - 'Google App Engine: Flexible Environment.'
            - Custom user-defined platform.
          enum:
            - PLATFORM_UNSPECIFIED
            - GKE
            - FLEX
            - CUSTOM
    Identity:
      description: The unique identifier of the update.
      id: Identity
      properties:
        revision:
          format: int32
          description: The revision number of the update.
          type: integer
        updateId:
          description: The revision independent identifier of the update.
          type: string
      type: object
    DSSEAttestationOccurrence:
      description: 'Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.'
      id: DSSEAttestationOccurrence
      properties:
        statement:
          $ref: '#/components/schemas/InTotoStatement'
        envelope:
          $ref: '#/components/schemas/Envelope'
          description: 'If doing something security critical, make sure to verify the signatures in this metadata.'
      type: object
    SlsaProvenance:
      properties:
        metadata:
          $ref: '#/components/schemas/SlsaMetadata'
        builder:
          description: required
          $ref: '#/components/schemas/SlsaBuilder'
        materials:
          type: array
          description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.'
          items:
            $ref: '#/components/schemas/Material'
        recipe:
          description: 'Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required'
          $ref: '#/components/schemas/SlsaRecipe'
      id: SlsaProvenance
      type: object
    AnalysisCompleted:
      properties:
        analysisType:
          items:
            type: string
          type: array
      description: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
      id: AnalysisCompleted
      type: object
    BuildDefinition:
      type: object
      properties:
        resolvedDependencies:
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
          type: array
        internalParameters:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
        externalParameters:
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
        buildType:
          type: string
      id: BuildDefinition
    Fingerprint:
      id: Fingerprint
      type: object
      properties:
        v1Name:
          type: string
          description: Required. The layer ID of the final layer in the Docker image's v1 representation.
        v2Blob:
          type: array
          description: Required. The ordered list of v2 blobs that represent a given image.
          items:
            type: string
        v2Name:
          type: string
          description: 'Output only. The name of the image''s v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.'
      description: A set of properties that uniquely identify a given Docker image.
    Recipe:
      id: Recipe
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      type: object
      properties:
        entryPoint:
          type: string
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
        type:
          type: string
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
        arguments:
          type: array
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
        environment:
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".'
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          type: array
        definedInMaterial:
          format: int64
          type: string
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
    SlsaRecipe:
      properties:
        environment:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: 'Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.'
          type: object
        definedInMaterial:
          format: int64
          description: 'Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn''t come from a material, as zero is default unset value for int64.'
          type: string
        entryPoint:
          type: string
          description: 'String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.'
        arguments:
          type: object
          description: 'Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        type:
          description: 'URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.'
          type: string
      description: 'Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.'
      type: object
      id: SlsaRecipe
    GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata:
      description: Other properties of the build.
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
      type: object
      properties:
        reproducible:
          type: boolean
        buildInvocationId:
          type: string
        buildFinishedOn:
          type: string
          format: google-datetime
        completeness:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness'
        buildStartedOn:
          type: string
          format: google-datetime
    Occurrence:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ImageOccurrence'
          description: Describes how this resource derives from the basis in the associated note.
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Describes an attestation of an artifact.
        kind:
          type: string
          description: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
          enumDescriptions:
            - Default value. This value is unused.
            - The note and occurrence represent a package vulnerability.
            - The note and occurrence assert build provenance.
            - This represents an image basis relationship.
            - This represents a package installed via a package manager.
            - The note and occurrence track deployment events.
            - The note and occurrence track the initial discovery status of a resource.
            - This represents a logical "role" that can attest to artifacts.
            - This represents an available package upgrade.
            - This represents a Compliance Note
            - This represents a DSSE attestation Note
            - This represents a Vulnerability Assessment.
            - This represents an SBOM Reference.
          enum:
            - NOTE_KIND_UNSPECIFIED
            - VULNERABILITY
            - BUILD
            - IMAGE
            - PACKAGE
            - DEPLOYMENT
            - DISCOVERY
            - ATTESTATION
            - UPGRADE
            - COMPLIANCE
            - DSSE_ATTESTATION
            - VULNERABILITY_ASSESSMENT
            - SBOM_REFERENCE
        build:
          $ref: '#/components/schemas/BuildOccurrence'
          description: Describes a verifiable build.
        updateTime:
          description: Output only. The time this occurrence was last updated.
          type: string
          format: google-datetime
        upgrade:
          $ref: '#/components/schemas/UpgradeOccurrence'
          description: Describes an available package upgrade on the linked resource.
        resourceUri:
          description: 'Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.'
          type: string
        remediation:
          type: string
          description: A description of actions that can be taken to remedy the note.
        deployment:
          description: Describes the deployment of an artifact on a runtime.
          $ref: '#/components/schemas/DeploymentOccurrence'
        discovery:
          $ref: '#/components/schemas/DiscoveryOccurrence'
          description: Describes when a resource was discovered.
        compliance:
          description: Describes a compliance violation on a linked resource.
          $ref: '#/components/schemas/ComplianceOccurrence'
        dsseAttestation:
          description: Describes an attestation of an artifact using dsse.
          $ref: '#/components/schemas/DSSEAttestationOccurrence'
        envelope:
          description: 'https://github.com/secure-systems-lab/dsse'
          $ref: '#/components/schemas/Envelope'
        vulnerability:
          description: Describes a security vulnerability.
          $ref: '#/components/schemas/VulnerabilityOccurrence'
        noteName:
          description: 'Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.'
          type: string
        sbomReference:
          $ref: '#/components/schemas/SBOMReferenceOccurrence'
          description: Describes a specific SBOM reference occurrences.
        createTime:
          type: string
          description: Output only. The time this occurrence was created.
          format: google-datetime
        name:
          type: string
          description: 'Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.'
        package:
          $ref: '#/components/schemas/PackageOccurrence'
          description: Describes the installation of a package on the linked resource.
      description: An instance of an analysis type that has been found on a resource.
      id: Occurrence
    RunDetails:
      id: RunDetails
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/BuildMetadata'
        builder:
          $ref: '#/components/schemas/ProvenanceBuilder'
        byproducts:
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
          type: array
    GitSourceContext:
      properties:
        revisionId:
          type: string
          description: Git commit hash.
        url:
          type: string
          description: Git repository URL.
      type: object
      id: GitSourceContext
      description: 'A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).'
    LanguagePackageDependency:
      type: object
      description: Indicates a language package available between this package and the customer's resource artifact.
      properties:
        version:
          type: string
        package:
          type: string
      id: LanguagePackageDependency
    Signature:
      type: object
      properties:
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
        signature:
          description: 'The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.'
          type: string
          format: byte
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      id: Signature
    BuildMetadata:
      properties:
        invocationId:
          type: string
        startedOn:
          type: string
          format: google-datetime
        finishedOn:
          format: google-datetime
          type: string
      type: object
      id: BuildMetadata
    GerritSourceContext:
      properties:
        revisionId:
          type: string
          description: A revision (commit) ID.
        hostUri:
          description: The URI of a running Gerrit instance.
          type: string
        gerritProject:
          description: 'The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.'
          type: string
        aliasContext:
          description: 'An alias, which may be a branch or tag.'
          $ref: '#/components/schemas/AliasContext'
      type: object
      id: GerritSourceContext
      description: A SourceContext referring to a Gerrit project.
    Command:
      properties:
        args:
          items:
            type: string
          type: array
          description: Command-line arguments used when executing this command.
        waitFor:
          description: The ID(s) of the command(s) that this command depends on.
          items:
            type: string
          type: array
        dir:
          type: string
          description: Working directory (relative to project source root) used when running this command.
        name:
          description: 'Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.'
          type: string
        id:
          type: string
          description: 'Optional unique identifier for this command, used in wait_for to reference this command as a dependency.'
        env:
          type: array
          items:
            type: string
          description: Environment variables set before running this command.
      type: object
      id: Command
      description: Command describes a step performed as part of the build pipeline.
    BuildOccurrence:
      type: object
      id: BuildOccurrence
      properties:
        provenance:
          description: The actual provenance for the build.
          $ref: '#/components/schemas/BuildProvenance'
        inTotoSlsaProvenanceV1:
          description: 'In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance.'
          $ref: '#/components/schemas/InTotoSlsaProvenanceV1'
        intotoProvenance:
          description: Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec.
          $ref: '#/components/schemas/InTotoProvenance'
        intotoStatement:
          description: In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope.
          $ref: '#/components/schemas/InTotoStatement'
        provenanceBytes:
          description: 'Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.'
          type: string
      description: Details of a build occurrence.
    Layer:
      id: Layer
      type: object
      description: Layer holds metadata specific to a layer of a Docker image.
      properties:
        directive:
          description: 'Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.'
          type: string
        arguments:
          type: string
          description: The recovered arguments to the Dockerfile directive.
    EnvelopeSignature:
      properties:
        sig:
          type: string
          format: byte
        keyid:
          type: string
      id: EnvelopeSignature
      type: object
    Remediation:
      description: 'Specifies details on how to handle (and presumably, fix) a vulnerability.'
      properties:
        details:
          description: Contains a comprehensive human-readable discussion of the remediation.
          type: string
        remediationType:
          enumDescriptions:
            - No remediation type specified.
            - A MITIGATION is available.
            - No fix is planned.
            - Not available.
            - A vendor fix is available.
            - A workaround is available.
          enum:
            - REMEDIATION_TYPE_UNSPECIFIED
            - MITIGATION
            - NO_FIX_PLANNED
            - NONE_AVAILABLE
            - VENDOR_FIX
            - WORKAROUND
          description: The type of remediation that can be applied.
          type: string
        remediationUri:
          description: Contains the URL where to obtain the remediation.
          $ref: '#/components/schemas/RelatedUrl'
      id: Remediation
      type: object
    WindowsUpdate:
      type: object
      description: 'Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.'
      id: WindowsUpdate
      properties:
        title:
          type: string
          description: The localized title of the update.
        supportUrl:
          description: The hyperlink to the support information for the update.
          type: string
        lastPublishedTimestamp:
          format: google-datetime
          type: string
          description: The last published timestamp of the update.
        identity:
          $ref: '#/components/schemas/Identity'
          description: Required - The unique identifier for the update.
        kbArticleIds:
          items:
            type: string
          type: array
          description: The Microsoft Knowledge Base article IDs that are associated with the update.
        categories:
          items:
            $ref: '#/components/schemas/Category'
          description: The list of categories to which the update belongs.
          type: array
        description:
          description: The localized description of the update.
          type: string
    GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial:
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      type: object
      description: 'The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.'
    Empty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
      properties: {}
      id: Empty
    Envelope:
      properties:
        payloadType:
          type: string
        payload:
          type: string
          format: byte
        signatures:
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
          type: array
      description: 'MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.'
      id: Envelope
      type: object
    AnalyzePackagesRequestV1:
      type: object
      properties:
        includeOsvData:
          deprecated: true
          type: boolean
          description: '[DEPRECATED] Whether to include OSV data in the scan. For backwards compatibility reasons, this field can be neither removed nor renamed.'
        packages:
          description: The packages to analyze.
          items:
            $ref: '#/components/schemas/PackageData'
          type: array
        resourceUri:
          description: Required. The resource URI of the container image being scanned.
          type: string
      id: AnalyzePackagesRequestV1
      description: AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it.
    InTotoSlsaProvenanceV1:
      id: InTotoSlsaProvenanceV1
      properties:
        predicateType:
          type: string
        _type:
          description: 'InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement'
          type: string
        predicate:
          $ref: '#/components/schemas/SlsaProvenanceV1'
        subject:
          items:
            $ref: '#/components/schemas/Subject'
          type: array
      type: object
    SBOMReferenceOccurrence:
      description: 'The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.'
      properties:
        payload:
          $ref: '#/components/schemas/SbomReferenceIntotoPayload'
          description: The actual payload that contains the SBOM reference data.
        payloadType:
          type: string
          description: 'The kind of payload that SbomReferenceIntotoPayload takes. Since it''s in the intoto format, this value is expected to be ''application/vnd.in-toto+json''.'
        signatures:
          type: array
          description: The signatures over the payload.
          items:
            $ref: '#/components/schemas/EnvelopeSignature'
      type: object
      id: SBOMReferenceOccurrence
    GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource:
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
        entryPoint:
          type: string
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
      description: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
      type: object
    PackageIssue:
      description: A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
      type: object
      properties:
        affectedVersion:
          $ref: '#/components/schemas/Version'
          description: Required. The version of the package that is installed on the resource affected by this vulnerability.
        affectedCpeUri:
          type: string
          description: 'Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.'
        affectedPackage:
          type: string
          description: Required. The package this vulnerability was found in.
        fixedCpeUri:
          type: string
          description: 'The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.'
        effectiveSeverity:
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          readOnly: true
          description: Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          type: string
        packageType:
          description: 'The type of package (e.g. OS, MAVEN, GO).'
          type: string
        fixedVersion:
          description: Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available.
          $ref: '#/components/schemas/Version'
        fileLocation:
          type: array
          items:
            $ref: '#/components/schemas/GrafeasV1FileLocation'
          description: The location at which this package was found.
        fixAvailable:
          description: Output only. Whether a fix is available for this package.
          type: boolean
        fixedPackage:
          description: The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
          type: string
      id: PackageIssue
    SlsaMetadata:
      description: Other properties of the build.
      properties:
        buildInvocationId:
          description: 'Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.'
          type: string
        buildFinishedOn:
          type: string
          description: The timestamp of when the build completed.
          format: google-datetime
        completeness:
          description: Indicates that the builder claims certain fields in this message to be complete.
          $ref: '#/components/schemas/SlsaCompleteness'
        reproducible:
          type: boolean
          description: 'If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.'
        buildStartedOn:
          description: The timestamp of when the build started.
          type: string
          format: google-datetime
      type: object
      id: SlsaMetadata
    Category:
      properties:
        name:
          description: The localized name of the category.
          type: string
        categoryId:
          description: The identifier of the category.
          type: string
      id: Category
      description: The category to which the update belongs.
      type: object
    VulnerabilityOccurrence:
      properties:
        vexAssessment:
          $ref: '#/components/schemas/VexAssessment'
        packageIssue:
          description: Required. The set of affected locations and their fixes (if available) within the associated resource.
          items:
            $ref: '#/components/schemas/PackageIssue'
          type: array
        effectiveSeverity:
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: 'The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.'
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        cvssVersion:
          description: Output only. CVSS version used to populate cvss_score and severity.
          enumDescriptions:
            - ''
            - ''
            - ''
          type: string
          enum:
            - CVSS_VERSION_UNSPECIFIED
            - CVSS_VERSION_2
            - CVSS_VERSION_3
        type:
          type: string
          description: 'The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
        severity:
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
          enumDescriptions:
            - Unknown.
            - Minimal severity.
            - Low severity.
            - Medium severity.
            - High severity.
            - Critical severity.
          description: Output only. The note provider assigned severity of this vulnerability.
        shortDescription:
          description: Output only. A one sentence description of this vulnerability.
          type: string
        cvssV2:
          description: The cvss v2 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        cvssv3:
          description: The cvss v3 score for the vulnerability.
          $ref: '#/components/schemas/CVSS'
        longDescription:
          description: Output only. A detailed description of this vulnerability.
          type: string
        fixAvailable:
          type: boolean
          description: Output only. Whether at least one of the affected packages has a fix available.
        relatedUrls:
          description: Output only. URLs related to this vulnerability.
          items:
            $ref: '#/components/schemas/RelatedUrl'
          type: array
        cvssScore:
          type: number
          format: float
          description: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
      description: An occurrence of a severity vulnerability on a resource.
      type: object
      id: VulnerabilityOccurrence
    Status:
      id: Status
      type: object
      properties:
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          type: array
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
        code:
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    Hash:
      id: Hash
      type: object
      description: Container message for hash values.
      properties:
        value:
          description: Required. The hash value.
          type: string
          format: byte
        type:
          type: string
          description: 'Required. The type of hash that was performed, e.g. "SHA-256".'
    GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder:
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
      description: 'Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.'
      properties:
        id:
          type: string
    SlsaProvenanceZeroTwo:
      type: object
      id: SlsaProvenanceZeroTwo
      description: See full explanation of fields at slsa.dev/provenance/v0.2.
      properties:
        builder:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder'
        metadata:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata'
        buildConfig:
          additionalProperties:
            type: any
            description: Properties of the object.
          type: object
        invocation:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation'
        buildType:
          type: string
        materials:
          items:
            $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial'
          type: array
    ProvenanceBuilder:
      properties:
        version:
          additionalProperties:
            type: string
          type: object
        builderDependencies:
          items:
            $ref: '#/components/schemas/ResourceDescriptor'
          type: array
        id:
          type: string
      id: ProvenanceBuilder
      type: object
    PackageOccurrence:
      properties:
        name:
          readOnly: true
          description: Required. Output only. The name of the installed package.
          type: string
        packageType:
          type: string
          description: 'Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).'
          readOnly: true
        license:
          $ref: '#/components/schemas/License'
          description: Licenses that have been declared by the authors of the package.
        cpeUri:
          description: 'Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.'
          readOnly: true
          type: string
        architecture:
          description: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
          enum:
            - ARCHITECTURE_UNSPECIFIED
            - X86
            - X64
          enumDescriptions:
            - Unknown architecture.
            - X86 architecture.
            - X64 architecture.
          type: string
          readOnly: true
        location:
          type: array
          description: All of the places within the filesystem versions of this package have been found.
          items:
            $ref: '#/components/schemas/Location'
        version:
          readOnly: true
          description: Output only. The version of the package.
          $ref: '#/components/schemas/Version'
      description: Details on how a particular software package was installed on a system.
      id: PackageOccurrence
      type: object
    SBOMStatus:
      id: SBOMStatus
      type: object
      properties:
        sbomState:
          description: The progress of the SBOM generation.
          enumDescriptions:
            - Default unknown state.
            - SBOM scanning is pending.
            - SBOM scanning has completed.
          type: string
          enum:
            - SBOM_STATE_UNSPECIFIED
            - PENDING
            - COMPLETE
        error:
          description: 'If there was an error generating an SBOM, this will indicate what that error was.'
          type: string
      description: The status of an SBOM generation.
    Material:
      properties:
        digest:
          type: object
          additionalProperties:
            type: string
        uri:
          type: string
      type: object
      id: Material
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation:
      properties:
        configSource:
          $ref: '#/components/schemas/GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource'
        environment:
          additionalProperties:
            description: Properties of the object.
            type: any
          type: object
        parameters:
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
      type: object
      id: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
      description: Identifies the event that kicked off the build.
    Maintainer:
      type: object
      id: Maintainer
      properties:
        kind:
          type: string
        name:
          type: string
    AttestationOccurrence:
      description: 'Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.'
      type: object
      properties:
        signatures:
          items:
            $ref: '#/components/schemas/Signature'
          type: array
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
        serializedPayload:
          description: Required. The serialized payload that is verified by one or more `signatures`.
          type: string
          format: byte
        jwts:
          items:
            $ref: '#/components/schemas/Jwt'
          type: array
          description: 'One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.'
      id: AttestationOccurrence
  parameters:
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  x-stackQL-resources:
    operations:
      id: google.ondemandscanning.operations
      name: operations
      title: Operations
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        wait:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:wait/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    scans:
      id: google.ondemandscanning.scans
      name: scans
      title: Scans
      methods:
        analyze_packages:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1scans:analyzePackages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    vulnerabilities:
      id: google.ondemandscanning.vulnerabilities
      name: vulnerabilities
      title: Vulnerabilities
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1scans~1{scansId}~1vulnerabilities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.occurrences
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1scans~1{scansId}~1vulnerabilities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerabilities/methods/list'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/upload_protocol'
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: ondemandscanning.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: ondemandscanning.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: ondemandscanning.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: ondemandscanning.projects.locations.operations.cancel
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait':
    parameters: *ref_1
    post:
      description: 'Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.'
      operationId: ondemandscanning.projects.locations.operations.wait
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
        - in: query
          name: timeout
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: wait
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages':
    parameters: *ref_1
    post:
      description: Initiates an analysis of the provided packages.
      operationId: ondemandscanning.projects.locations.scans.analyzePackages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzePackagesRequestV1'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: scans
      x-stackQL-method: analyze_packages
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities':
    parameters: *ref_1
    get:
      description: Lists vulnerabilities resulting from a successfully completed scan.
      operationId: ondemandscanning.projects.locations.scans.vulnerabilities.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVulnerabilitiesResponseV1'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: scansId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: vulnerabilities
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.occurrences
