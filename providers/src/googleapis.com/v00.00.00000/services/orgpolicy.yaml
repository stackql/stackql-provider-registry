openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Organization Policy API
  description: The Org Policy API allows users to configure governance rules on their GCP resources across the Cloud Resource Hierarchy.
  version: v2
  x-discovery-doc-revision: '20230117'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://cloud.google.com/orgpolicy/docs/reference/rest/index.html
servers:
  - url: https://orgpolicy.googleapis.com
components:
  schemas:
    GoogleCloudOrgpolicyV2ListCustomConstraintsResponse:
      description: The response returned from the ListCustomConstraints method. It will be empty if no `CustomConstraints` are set on the organization resource.
      id: GoogleCloudOrgpolicyV2ListCustomConstraintsResponse
      properties:
        customConstraints:
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
          description: All `CustomConstraints` that exist on the organization resource. It will be empty if no `CustomConstraints` are set.
        nextPageToken:
          description: Page token used to retrieve the next page. This is currently not used, but the server may at any point start supplying a valid token.
          type: string
      type: object
    GoogleCloudOrgpolicyV2PolicySpec:
      type: object
      id: GoogleCloudOrgpolicyV2PolicySpec
      properties:
        rules:
          type: array
          description: 'Up to 10 PolicyRules are allowed. In Policies for boolean constraints, the following requirements apply: - There must be one and only one PolicyRule where condition is unset. - BooleanPolicyRules with conditions must set `enforced` to the opposite of the PolicyRule without a condition. - During policy evaluation, PolicyRules with conditions that are true for a target resource take precedence.'
          items:
            $ref: '#/components/schemas/GoogleCloudOrgpolicyV2PolicySpecPolicyRule'
        reset:
          type: boolean
          description: Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.
        etag:
          type: string
          description: An opaque tag indicating the current version of the `Policy`, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the `Policy` is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset.
        inheritFromParent:
          type: boolean
          description: Determines the inheritance behavior for this `Policy`. If `inherit_from_parent` is true, PolicyRules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this Policy becomes the new root for evaluation. This field can be set only for Policies which configure list constraints.
        updateTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that `Policy`.
      description: Defines a Cloud Organization `PolicySpec` which is used to specify `Constraints` for configurations of Cloud Platform resources.
    GoogleCloudOrgpolicyV2AlternatePolicySpec:
      properties:
        spec:
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2PolicySpec'
          description: Specify `Constraint` for configurations of Cloud Platform resources.
        launch:
          description: Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.
          type: string
      type: object
      description: Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.
      id: GoogleCloudOrgpolicyV2AlternatePolicySpec
    GoogleCloudOrgpolicyV2Policy:
      id: GoogleCloudOrgpolicyV2Policy
      type: object
      description: Defines a Cloud Organization `Policy` which is used to specify `Constraints` for configurations of Cloud Platform resources.
      properties:
        spec:
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2PolicySpec'
          description: Basic information about the Organization Policy.
        alternate:
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2AlternatePolicySpec'
          description: Deprecated.
        name:
          description: 'Immutable. The resource name of the Policy. Must be one of the following forms, where constraint_name is the name of the constraint which this Policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, "projects/123/policies/compute.disableSerialPortAccess". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.'
          type: string
        dryRunSpec:
          description: dry-run policy. Audit-only policy, can be used to monitor how the policy would have impacted the existing and future resources if it's enforced.
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2PolicySpec'
    GoogleCloudOrgpolicyV2ListConstraintsResponse:
      id: GoogleCloudOrgpolicyV2ListConstraintsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: Page token used to retrieve the next page. This is currently not used.
        constraints:
          type: array
          description: The collection of constraints that are available on the targeted resource.
          items:
            $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Constraint'
      description: The response returned from the ListConstraints method.
    GoogleCloudOrgpolicyV2ListPoliciesResponse:
      description: The response returned from the ListPolicies method. It will be empty if no `Policies` are set on the resource.
      properties:
        nextPageToken:
          type: string
          description: Page token used to retrieve the next page. This is currently not used, but the server may at any point start supplying a valid token.
        policies:
          items:
            $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
          description: All `Policies` that exist on the resource. It will be empty if no `Policies` are set.
          type: array
      type: object
      id: GoogleCloudOrgpolicyV2ListPoliciesResponse
    GoogleCloudOrgpolicyV2ConstraintBooleanConstraint:
      type: object
      description: A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.
      id: GoogleCloudOrgpolicyV2ConstraintBooleanConstraint
      properties: {}
    GoogleCloudOrgpolicyV2PolicySpecPolicyRule:
      id: GoogleCloudOrgpolicyV2PolicySpecPolicyRule
      type: object
      description: A rule used to express this policy.
      properties:
        denyAll:
          type: boolean
          description: Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
        enforce:
          description: If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
          type: boolean
        condition:
          $ref: '#/components/schemas/GoogleTypeExpr'
          description: 'A condition which determines whether this rule is used in the evaluation of the policy. When set, the `expression` field in the `Expr'' must include from 1 to 10 subexpressions, joined by the "||" or "&&" operators. Each subexpression must be of the form "resource.matchTag(''/tag_key_short_name, ''tag_value_short_name'')". or "resource.matchTagId(''tagKeys/key_id'', ''tagValues/value_id'')". where key_name and value_name are the resource names for Label Keys and Values. These names are available from the Tag Manager Service. An example expression is: "resource.matchTag(''123456789/environment, ''prod'')". or "resource.matchTagId(''tagKeys/123'', ''tagValues/456'')".'
        values:
          description: List of values to be used for this PolicyRule. This field can be set only in Policies for list constraints.
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues'
        allowAll:
          description: Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
          type: boolean
    GoogleTypeExpr:
      id: GoogleTypeExpr
      properties:
        title:
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
          type: string
        description:
          type: string
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        location:
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      type: object
    GoogleCloudOrgpolicyV2Constraint:
      id: GoogleCloudOrgpolicyV2Constraint
      description: A `constraint` describes a way to restrict resource's configuration. For example, you could enforce a constraint that controls which cloud services can be activated across an organization, or whether a Compute Engine instance can have serial port connections established. `Constraints` can be configured by the organization's policy administrator to fit the needs of the organization by setting a `policy` that includes `constraints` at different locations in the organization's resource hierarchy. Policies are inherited down the resource hierarchy from higher levels, but can also be overridden. For details about the inheritance rules please read about `policies`. `Constraints` have a default behavior determined by the `constraint_default` field, which is the enforcement behavior that is used in the absence of a `policy` being defined or inherited for the resource in question.
      type: object
      properties:
        constraintDefault:
          enumDescriptions:
            - This is only used for distinguishing unset values and should never be used.
            - Indicate that all values are allowed for list constraints. Indicate that enforcement is off for boolean constraints.
            - Indicate that all values are denied for list constraints. Indicate that enforcement is on for boolean constraints.
          enum:
            - CONSTRAINT_DEFAULT_UNSPECIFIED
            - ALLOW
            - DENY
          description: The evaluation behavior of this constraint in the absence of 'Policy'.
          type: string
        description:
          type: string
          description: Detailed description of what this `Constraint` controls as well as how and where it is enforced. Mutable.
        displayName:
          type: string
          description: The human readable name. Mutable.
        name:
          description: 'Immutable. The resource name of the Constraint. Must be in one of the following forms: * `projects/{project_number}/constraints/{constraint_name}` * `folders/{folder_id}/constraints/{constraint_name}` * `organizations/{organization_id}/constraints/{constraint_name}` For example, "/projects/123/constraints/compute.disableSerialPortAccess".'
          type: string
        booleanConstraint:
          description: Defines this constraint as being a BooleanConstraint.
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ConstraintBooleanConstraint'
        listConstraint:
          description: Defines this constraint as being a ListConstraint.
          $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ConstraintListConstraint'
    GoogleProtobufEmpty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: GoogleProtobufEmpty
      type: object
      properties: {}
    GoogleCloudOrgpolicyV2CustomConstraint:
      properties:
        condition:
          description: 'Org policy condition/expression. For example: `resource.instanceName.matches("[production|test]_.*_(\d)+")''` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters.'
          type: string
        displayName:
          description: One line display name for the UI. The max length of the display_name is 200 characters.
          type: string
        actionType:
          type: string
          enumDescriptions:
            - Unspecified. Will results in user error.
            - Allowed action type.
            - Deny action type.
          enum:
            - ACTION_TYPE_UNSPECIFIED
            - ALLOW
            - DENY
          description: Allow or deny type.
        methodTypes:
          items:
            type: string
            enumDescriptions:
              - Unspecified. Will results in user error.
              - Constraint applied when creating the resource.
              - Constraint applied when updating the resource.
              - Constraint applied when deleting the resource. Not supported yet.
            enum:
              - METHOD_TYPE_UNSPECIFIED
              - CREATE
              - UPDATE
              - DELETE
          type: array
          description: All the operations being applied for this constraint.
        name:
          description: 'Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : "organizations/123/customConstraints/custom.createOnlyE2TypeVms" The max length is 70 characters and the min length is 1. Note that the prefix "organizations/{organization_id}/customConstraints/" is not counted.'
          type: string
        updateTime:
          description: Output only. The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called
          format: google-datetime
          readOnly: true
          type: string
        resourceTypes:
          type: array
          description: 'Immutable. The Resource Instance type on which this policy applies to. Format will be of the form : "/" Example: * `compute.googleapis.com/Instance`.'
          items:
            type: string
        description:
          type: string
          description: Detailed information about this custom policy constraint. The max length of the description is 2000 characters.
      type: object
      id: GoogleCloudOrgpolicyV2CustomConstraint
      description: A custom constraint defined by customers which can *only* be applied to the given resource types and organization. By creating a custom constraint, customers can applied policies of this custom constraint. *Creating a custom constraint itself does NOT apply any policy enforcement*.
    GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues:
      description: 'A message that holds specific allowed and denied values. This message can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.'
      properties:
        deniedValues:
          type: array
          description: List of values denied at this resource.
          items:
            type: string
        allowedValues:
          description: List of values allowed at this resource.
          type: array
          items:
            type: string
      id: GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
      type: object
    GoogleCloudOrgpolicyV2ConstraintListConstraint:
      properties:
        supportsIn:
          type: boolean
          description: Indicates whether values grouped into categories can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `"in:Python"` would match any value in the 'Python' group.
        supportsUnder:
          type: boolean
          description: Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `"under:folders/123"` would match any resource under the 'folders/123' folder.
      type: object
      id: GoogleCloudOrgpolicyV2ConstraintListConstraint
      description: A `Constraint` that allows or disallows a list of string values, which are configured by an Organization's policy administrator with a `Policy`.
  parameters:
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    policies:
      id: google.orgpolicy.policies
      name: policies
      title: Policies
      methods:
        projects_policies_list:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_policies_create:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_policies_patch:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies~1{policiesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_policies_get:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies~1{policiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_policies_delete:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies~1{policiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_create:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_list:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_get:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies~1{policiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_delete:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies~1{policiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_patch:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies~1{policiesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_delete:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies~1{policiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_get:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies~1{policiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_patch:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies~1{policiesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_create:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_list:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policies/methods/projects_policies_get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/organizations_policies_get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/folders_policies_get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/projects_policies_list'
          - $ref: '#/components/x-stackQL-resources/policies/methods/organizations_policies_list'
          - $ref: '#/components/x-stackQL-resources/policies/methods/folders_policies_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/projects_policies_create'
          - $ref: '#/components/x-stackQL-resources/policies/methods/organizations_policies_create'
          - $ref: '#/components/x-stackQL-resources/policies/methods/folders_policies_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/projects_policies_delete'
          - $ref: '#/components/x-stackQL-resources/policies/methods/organizations_policies_delete'
          - $ref: '#/components/x-stackQL-resources/policies/methods/folders_policies_delete'
    policies_effective_policy:
      id: google.orgpolicy.policies_effective_policy
      name: policies_effective_policy
      title: Policies_effective_policy
      methods:
        projects_policies_getEffectivePolicy:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1policies~1{policiesId}:getEffectivePolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_policies_getEffectivePolicy:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1policies~1{policiesId}:getEffectivePolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_policies_getEffectivePolicy:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1policies~1{policiesId}:getEffectivePolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policies_effective_policy/methods/projects_policies_getEffectivePolicy'
          - $ref: '#/components/x-stackQL-resources/policies_effective_policy/methods/organizations_policies_getEffectivePolicy'
          - $ref: '#/components/x-stackQL-resources/policies_effective_policy/methods/folders_policies_getEffectivePolicy'
        insert: []
        update: []
        delete: []
    constraints:
      id: google.orgpolicy.constraints
      name: constraints
      title: Constraints
      methods:
        projects_constraints_list:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1constraints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_constraints_list:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1constraints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        folders_constraints_list:
          operation:
            $ref: '#/paths/~1v2~1folders~1{foldersId}~1constraints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/constraints/methods/projects_constraints_list'
          - $ref: '#/components/x-stackQL-resources/constraints/methods/organizations_constraints_list'
          - $ref: '#/components/x-stackQL-resources/constraints/methods/folders_constraints_list'
        insert: []
        update: []
        delete: []
    custom_constraints:
      id: google.orgpolicy.custom_constraints
      name: custom_constraints
      title: Custom_constraints
      methods:
        organizations_customConstraints_create:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1customConstraints/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_customConstraints_list:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1customConstraints/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_customConstraints_patch:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1customConstraints~1{customConstraintsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_customConstraints_delete:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1customConstraints~1{customConstraintsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        organizations_customConstraints_get:
          operation:
            $ref: '#/paths/~1v2~1organizations~1{organizationsId}~1customConstraints~1{customConstraintsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/custom_constraints/methods/organizations_customConstraints_get'
          - $ref: '#/components/x-stackQL-resources/custom_constraints/methods/organizations_customConstraints_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/custom_constraints/methods/organizations_customConstraints_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/custom_constraints/methods/organizations_customConstraints_delete'
paths:
  /v2/projects/{projectsId}/policies:
    parameters: &ref_1
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/callback'
    get:
      description: Retrieves all of the `Policies` that exist on a particular resource.
      operationId: orgpolicy.projects.policies.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListPoliciesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: policies
      x-stackQL-verb: select
    post:
      description: Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.
      operationId: orgpolicy.projects.policies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: insert
  /v2/projects/{projectsId}/policies/{policiesId}:
    parameters: *ref_1
    patch:
      description: 'Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.'
      operationId: orgpolicy.projects.policies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: exec
    get:
      description: Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.
      operationId: orgpolicy.projects.policies.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: select
    delete:
      description: Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.
      operationId: orgpolicy.projects.policies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: delete
  /v2/projects/{projectsId}/policies/{policiesId}:getEffectivePolicy:
    parameters: *ref_1
    get:
      description: Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
      operationId: orgpolicy.projects.policies.getEffectivePolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies_effective_policy
      x-stackQL-verb: select
  /v2/projects/{projectsId}/constraints:
    parameters: *ref_1
    get:
      description: Lists `Constraints` that could be applied on the specified resource.
      operationId: orgpolicy.projects.constraints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListConstraintsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: constraints
      x-stackQL-verb: select
  /v2/organizations/{organizationsId}/customConstraints:
    parameters: *ref_1
    post:
      description: Creates a CustomConstraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the organization does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the constraint already exists on the given organization.
      operationId: orgpolicy.organizations.customConstraints.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: custom_constraints
      x-stackQL-verb: insert
    get:
      description: Retrieves all of the `CustomConstraints` that exist on a particular organization resource.
      operationId: orgpolicy.organizations.customConstraints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListCustomConstraintsResponse'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: custom_constraints
      x-stackQL-verb: select
  /v2/organizations/{organizationsId}/customConstraints/{customConstraintsId}:
    parameters: *ref_1
    patch:
      description: 'Updates a Custom Constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Note: the supplied policy will perform a full overwrite of all fields.'
      operationId: orgpolicy.organizations.customConstraints.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: customConstraintsId
          required: true
          schema:
            type: string
      x-stackQL-resource: custom_constraints
      x-stackQL-verb: exec
    delete:
      description: Deletes a Custom Constraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist.
      operationId: orgpolicy.organizations.customConstraints.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: customConstraintsId
          required: true
          schema:
            type: string
      x-stackQL-resource: custom_constraints
      x-stackQL-verb: delete
    get:
      description: Gets a CustomConstraint. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the CustomConstraint does not exist.
      operationId: orgpolicy.organizations.customConstraints.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2CustomConstraint'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: customConstraintsId
          required: true
          schema:
            type: string
      x-stackQL-resource: custom_constraints
      x-stackQL-verb: select
  /v2/organizations/{organizationsId}/constraints:
    parameters: *ref_1
    get:
      description: Lists `Constraints` that could be applied on the specified resource.
      operationId: orgpolicy.organizations.constraints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListConstraintsResponse'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: constraints
      x-stackQL-verb: select
  /v2/organizations/{organizationsId}/policies:
    parameters: *ref_1
    post:
      description: Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.
      operationId: orgpolicy.organizations.policies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: insert
    get:
      description: Retrieves all of the `Policies` that exist on a particular resource.
      operationId: orgpolicy.organizations.policies.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListPoliciesResponse'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: policies
      x-stackQL-verb: select
  /v2/organizations/{organizationsId}/policies/{policiesId}:
    parameters: *ref_1
    get:
      description: Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.
      operationId: orgpolicy.organizations.policies.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: select
    delete:
      description: Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.
      operationId: orgpolicy.organizations.policies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: delete
    patch:
      description: 'Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.'
      operationId: orgpolicy.organizations.policies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: exec
  /v2/organizations/{organizationsId}/policies/{policiesId}:getEffectivePolicy:
    parameters: *ref_1
    get:
      description: Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
      operationId: orgpolicy.organizations.policies.getEffectivePolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: organizationsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies_effective_policy
      x-stackQL-verb: select
  /v2/folders/{foldersId}/policies/{policiesId}:
    parameters: *ref_1
    delete:
      description: Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.
      operationId: orgpolicy.folders.policies.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: delete
    get:
      description: Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.
      operationId: orgpolicy.folders.policies.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: select
    patch:
      description: 'Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.'
      operationId: orgpolicy.folders.policies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: exec
  /v2/folders/{foldersId}/policies:
    parameters: *ref_1
    post:
      description: Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.
      operationId: orgpolicy.folders.policies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-verb: insert
    get:
      description: Retrieves all of the `Policies` that exist on a particular resource.
      operationId: orgpolicy.folders.policies.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListPoliciesResponse'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: policies
      x-stackQL-verb: select
  /v2/folders/{foldersId}/policies/{policiesId}:getEffectivePolicy:
    parameters: *ref_1
    get:
      description: Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
      operationId: orgpolicy.folders.policies.getEffectivePolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2Policy'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies_effective_policy
      x-stackQL-verb: select
  /v2/folders/{foldersId}/constraints:
    parameters: *ref_1
    get:
      description: Lists `Constraints` that could be applied on the specified resource.
      operationId: orgpolicy.folders.constraints.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleCloudOrgpolicyV2ListConstraintsResponse'
      parameters:
        - in: path
          name: foldersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: constraints
      x-stackQL-verb: select
