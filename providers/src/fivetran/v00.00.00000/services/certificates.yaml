openapi: 3.0.1
servers:
  - url: 'https://api.fivetran.com'
    variables: {}
info:
  title: OpenAPI Definition - certificates
  description: Certificate Management
  version: v1
security:
  - basicAuth: []
components:
  schemas:
    TrustCertificateRequest:
      required:
        - encoded_cert
        - hash
      type: object
      properties:
        connector_id:
          type: string
          description: The unique identifier for the connector
        destination_id:
          type: string
          description: The unique identifier for the destination.
        hash:
          type: string
          description: Hash of the certificate.
        encoded_cert:
          type: string
          description: The certificate encoded in base64.
    TrustFingerprintRequest:
      required:
        - hash
        - public_key
      type: object
      properties:
        connector_id:
          type: string
          description: The unique identifier for the connector
        destination_id:
          type: string
          description: The unique identifier for the destination
        hash:
          type: string
          description: Hash of the fingerprint
        public_key:
          type: string
          description: The SSH public key
  responses: {}
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  x-stackQL-resources:
    certificates:
      id: fivetran.certificates.certificates
      name: certificates
      title: Certificates
      methods:
        approve_certificate:
          operation:
            $ref: '#/paths/~1v1~1certificates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    fingerprints:
      id: fivetran.certificates.fingerprints
      name: fingerprints
      title: Fingerprints
      methods:
        approve_fingerprint:
          operation:
            $ref: '#/paths/~1v1~1fingerprints/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  /v1/certificates:
    post:
      tags:
        - Certificate Management
      summary: Approve a certificate
      description: 'Approves a certificate for a connector/destination, so Fivetran trusts this certificate for a source/destination database. The connector/destination setup tests will fail if a non-approved certificate is provided.'
      operationId: approve_certificate
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            example: application/json
            default: application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustCertificateRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    description: Response status code
                  message:
                    type: string
                    description: Response status text
                type: object
  /v1/fingerprints:
    post:
      tags:
        - Certificate Management
      summary: Approve a fingerprint
      description: 'Approves a fingerprint, so Fivetran trusts this fingerprint for a source/destination database, and connectors can connect to the source/destination through an SSH tunnel'
      operationId: approve_fingerprint
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
            example: application/json
            default: application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustFingerprintRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                    description: Response status code
                  message:
                    type: string
                    description: Response status text
                type: object
