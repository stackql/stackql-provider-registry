openapi: 3.0.0
info:
  title: HealthLake
  version: 1.0.0
paths: {}
components:
  schemas:
    CreatedAt:
      description: The time that a Data Store was created.
      type: object
      properties:
        Seconds:
          description: Seconds since epoch.
          type: string
        Nanos:
          description: Nanoseconds.
          type: integer
      required:
        - Seconds
        - Nanos
      additionalProperties: false
    DatastoreArn:
      description: The Amazon Resource Name used in the creation of the Data Store.
      type: string
      pattern: ^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?
    DatastoreEndpoint:
      description: The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.
      type: string
      maxLength: 10000
    DatastoreId:
      description: The AWS-generated ID number for the Data Store.
      type: string
      minLength: 1
      maxLength: 32
    DatastoreName:
      description: The user-generated name for the Data Store.
      type: string
      minLength: 1
      maxLength: 256
    DatastoreStatus:
      description: The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - DELETED
    DatastoreTypeVersion:
      description: The FHIR version. Only R4 version data is supported.
      type: string
      enum:
        - R4
    PreloadDataConfig:
      description: The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
      type: object
      properties:
        PreloadDataType:
          description: The type of preloaded data. Only Synthea preloaded data is supported.
          type: string
          enum:
            - SYNTHEA
      required:
        - PreloadDataType
      additionalProperties: false
    SseConfiguration:
      description: The server-side encryption key configuration for a customer provided encryption key.
      type: object
      properties:
        KmsEncryptionConfig:
          $ref: '#/components/schemas/KmsEncryptionConfig'
      required:
        - KmsEncryptionConfig
      additionalProperties: false
    KmsEncryptionConfig:
      description: The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
      type: object
      properties:
        CmkType:
          description: The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
          type: string
          enum:
            - CUSTOMER_MANAGED_KMS_KEY
            - AWS_OWNED_KMS_KEY
        KmsKeyId:
          description: The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
          type: string
          minLength: 1
          maxLength: 400
          pattern: (arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))
      required:
        - CmkType
      additionalProperties: false
    Tag:
      description: A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
      type: object
      properties:
        Key:
          description: The key of the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value of the tag.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    FHIRDatastore:
      type: object
      properties:
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        DatastoreArn:
          $ref: '#/components/schemas/DatastoreArn'
        DatastoreEndpoint:
          $ref: '#/components/schemas/DatastoreEndpoint'
        DatastoreId:
          $ref: '#/components/schemas/DatastoreId'
        DatastoreName:
          $ref: '#/components/schemas/DatastoreName'
        DatastoreStatus:
          $ref: '#/components/schemas/DatastoreStatus'
        DatastoreTypeVersion:
          $ref: '#/components/schemas/DatastoreTypeVersion'
        PreloadDataConfig:
          $ref: '#/components/schemas/PreloadDataConfig'
        SseConfiguration:
          $ref: '#/components/schemas/SseConfiguration'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DatastoreTypeVersion
      x-stackql-resource-name: fhir_datastore
      x-stackql-primaryIdentifier:
        - DatastoreId
  x-stackQL-resources:
    fhir_datastores:
      name: fhir_datastores
      id: aws.healthlake.fhir_datastores
      x-cfn-schema-name: FHIRDatastore
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatastoreId') as datastore_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
    fhir_datastore:
      name: fhir_datastore
      id: aws.healthlake.fhir_datastore
      x-cfn-schema-name: FHIRDatastore
      x-type: get
      x-identifiers:
        - DatastoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreatedAt.Seconds') as created_at_seconds,
              JSON_EXTRACT(Properties, '$.CreatedAt.Nanos') as created_at_nanos,
              JSON_EXTRACT(Properties, '$.PreloadDataConfig.PreloadDataType') as preload_data_config_preload_data_type,
              JSON_EXTRACT(Properties, '$.SseConfiguration.KmsEncryptionConfig') as sse_configuration_kms_encryption_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
