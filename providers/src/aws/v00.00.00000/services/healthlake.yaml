openapi: 3.0.0
info:
  title: HealthLake
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    CreatedAt:
      description: The time that a Data Store was created.
      type: object
      properties:
        Seconds:
          description: Seconds since epoch.
          type: string
        Nanos:
          description: Nanoseconds.
          type: integer
      required:
        - Seconds
        - Nanos
      additionalProperties: false
    DatastoreArn:
      description: The Amazon Resource Name used in the creation of the Data Store.
      type: string
      pattern: ^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?
    DatastoreEndpoint:
      description: The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.
      type: string
      maxLength: 10000
    DatastoreId:
      description: The AWS-generated ID number for the Data Store.
      type: string
      minLength: 1
      maxLength: 32
    DatastoreName:
      description: The user-generated name for the Data Store.
      type: string
      minLength: 1
      maxLength: 256
    DatastoreStatus:
      description: The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - DELETED
    DatastoreTypeVersion:
      description: The FHIR version. Only R4 version data is supported.
      type: string
      enum:
        - R4
    PreloadDataConfig:
      description: The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
      type: object
      properties:
        PreloadDataType:
          description: The type of preloaded data. Only Synthea preloaded data is supported.
          type: string
          enum:
            - SYNTHEA
      required:
        - PreloadDataType
      additionalProperties: false
    SseConfiguration:
      description: The server-side encryption key configuration for a customer provided encryption key.
      type: object
      properties:
        KmsEncryptionConfig:
          $ref: '#/components/schemas/KmsEncryptionConfig'
      required:
        - KmsEncryptionConfig
      default:
        KmsEncryptionConfig:
          CmkType: AWS_OWNED_KMS_KEY
      additionalProperties: false
    KmsEncryptionConfig:
      description: The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
      type: object
      properties:
        CmkType:
          description: The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
          type: string
          enum:
            - CUSTOMER_MANAGED_KMS_KEY
            - AWS_OWNED_KMS_KEY
        KmsKeyId:
          description: The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
          type: string
          minLength: 1
          maxLength: 400
          pattern: (arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))
      required:
        - CmkType
      additionalProperties: false
    IdentityProviderConfiguration:
      description: The identity provider configuration for the datastore
      type: object
      properties:
        AuthorizationStrategy:
          description: Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
          type: string
          enum:
            - SMART_ON_FHIR_V1
            - AWS_AUTH
        FineGrainedAuthorizationEnabled:
          description: Flag to indicate if fine-grained authorization will be enabled for the datastore
          type: boolean
        Metadata:
          description: The JSON metadata elements for identity provider configuration.
          type: string
        IdpLambdaArn:
          description: The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
          type: string
          minLength: 49
          maxLength: 256
          pattern: arn:aws[-a-z]*:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9\-_\.]+(:(\$LATEST|[a-zA-Z0-9\-_]+))?
      required:
        - AuthorizationStrategy
      default:
        AuthorizationStrategy: AWS_AUTH
        FineGrainedAuthorizationEnabled: false
      additionalProperties: false
    Tag:
      description: A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
      type: object
      properties:
        Key:
          description: The key of the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value of the tag.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    FHIRDatastore:
      type: object
      properties:
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        DatastoreArn:
          $ref: '#/components/schemas/DatastoreArn'
        DatastoreEndpoint:
          $ref: '#/components/schemas/DatastoreEndpoint'
        DatastoreId:
          $ref: '#/components/schemas/DatastoreId'
        DatastoreName:
          $ref: '#/components/schemas/DatastoreName'
        DatastoreStatus:
          $ref: '#/components/schemas/DatastoreStatus'
        DatastoreTypeVersion:
          $ref: '#/components/schemas/DatastoreTypeVersion'
        PreloadDataConfig:
          $ref: '#/components/schemas/PreloadDataConfig'
        SseConfiguration:
          $ref: '#/components/schemas/SseConfiguration'
        IdentityProviderConfiguration:
          $ref: '#/components/schemas/IdentityProviderConfiguration'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DatastoreTypeVersion
      x-stackql-resource-name: fhir_datastore
      description: HealthLake FHIR Datastore
      x-type-name: AWS::HealthLake::FHIRDatastore
      x-documentation-url: https://docs.aws.amazon.com/healthlake/latest/devguide/working-with-FHIR-healthlake.html
      x-stackql-primary-identifier:
        - DatastoreId
      x-create-only-properties:
        - DatastoreName
        - DatastoreTypeVersion
        - PreloadDataConfig
        - SseConfiguration
        - IdentityProviderConfiguration
      x-read-only-properties:
        - CreatedAt
        - DatastoreArn
        - DatastoreEndpoint
        - DatastoreId
        - DatastoreStatus
      x-required-properties:
        - DatastoreTypeVersion
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - healthlake:UntagResource
          - healthlake:TagResource
          - healthlake:ListTagsForResource
      x-required-permissions:
        create:
          - healthlake:CreateFHIRDatastore
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - ram:GetResourceShareInvitations
          - ram:AcceptResourceShareInvitation
          - glue:CreateDatabase
          - glue:DeleteDatabase
          - lambda:InvokeFunction
          - healthlake:TagResource
          - healthlake:UntagResource
          - healthlake:ListTagsForResource
        read:
          - healthlake:DescribeFHIRDatastore
          - healthlake:ListTagsForResource
        update:
          - healthlake:TagResource
          - healthlake:UntagResource
          - healthlake:ListTagsForResource
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
        delete:
          - healthlake:DeleteFHIRDatastore
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - ram:GetResourceShareInvitations
          - ram:AcceptResourceShareInvitation
          - glue:CreateDatabase
          - glue:DeleteDatabase
        list:
          - healthlake:ListFHIRDatastores
    CreateFHIRDatastoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreatedAt:
              $ref: '#/components/schemas/CreatedAt'
            DatastoreArn:
              $ref: '#/components/schemas/DatastoreArn'
            DatastoreEndpoint:
              $ref: '#/components/schemas/DatastoreEndpoint'
            DatastoreId:
              $ref: '#/components/schemas/DatastoreId'
            DatastoreName:
              $ref: '#/components/schemas/DatastoreName'
            DatastoreStatus:
              $ref: '#/components/schemas/DatastoreStatus'
            DatastoreTypeVersion:
              $ref: '#/components/schemas/DatastoreTypeVersion'
            PreloadDataConfig:
              $ref: '#/components/schemas/PreloadDataConfig'
            SseConfiguration:
              $ref: '#/components/schemas/SseConfiguration'
            IdentityProviderConfiguration:
              $ref: '#/components/schemas/IdentityProviderConfiguration'
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateFHIRDatastoreRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    fhir_datastores:
      name: fhir_datastores
      id: aws.healthlake.fhir_datastores
      x-cfn-schema-name: FHIRDatastore
      x-cfn-type-name: AWS::HealthLake::FHIRDatastore
      x-identifiers:
        - DatastoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FHIRDatastore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::HealthLake::FHIRDatastore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::HealthLake::FHIRDatastore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::HealthLake::FHIRDatastore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/fhir_datastores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/fhir_datastores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/fhir_datastores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DatastoreArn') as datastore_arn,
              JSON_EXTRACT(Properties, '$.DatastoreEndpoint') as datastore_endpoint,
              JSON_EXTRACT(Properties, '$.DatastoreId') as datastore_id,
              JSON_EXTRACT(Properties, '$.DatastoreName') as datastore_name,
              JSON_EXTRACT(Properties, '$.DatastoreStatus') as datastore_status,
              JSON_EXTRACT(Properties, '$.DatastoreTypeVersion') as datastore_type_version,
              JSON_EXTRACT(Properties, '$.PreloadDataConfig') as preload_data_config,
              JSON_EXTRACT(Properties, '$.SseConfiguration') as sse_configuration,
              JSON_EXTRACT(Properties, '$.IdentityProviderConfiguration') as identity_provider_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND data__Identifier = '<DatastoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.DatastoreArn') as datastore_arn,
                JSON_EXTRACT(detail.Properties, '$.DatastoreEndpoint') as datastore_endpoint,
                JSON_EXTRACT(detail.Properties, '$.DatastoreId') as datastore_id,
                JSON_EXTRACT(detail.Properties, '$.DatastoreName') as datastore_name,
                JSON_EXTRACT(detail.Properties, '$.DatastoreStatus') as datastore_status,
                JSON_EXTRACT(detail.Properties, '$.DatastoreTypeVersion') as datastore_type_version,
                JSON_EXTRACT(detail.Properties, '$.PreloadDataConfig') as preload_data_config,
                JSON_EXTRACT(detail.Properties, '$.SseConfiguration') as sse_configuration,
                JSON_EXTRACT(detail.Properties, '$.IdentityProviderConfiguration') as identity_provider_configuration,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND detail.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'DatastoreArn') as datastore_arn,
                  json_extract_path_text(Properties, 'DatastoreEndpoint') as datastore_endpoint,
                  json_extract_path_text(Properties, 'DatastoreId') as datastore_id,
                  json_extract_path_text(Properties, 'DatastoreName') as datastore_name,
                  json_extract_path_text(Properties, 'DatastoreStatus') as datastore_status,
                  json_extract_path_text(Properties, 'DatastoreTypeVersion') as datastore_type_version,
                  json_extract_path_text(Properties, 'PreloadDataConfig') as preload_data_config,
                  json_extract_path_text(Properties, 'SseConfiguration') as sse_configuration,
                  json_extract_path_text(Properties, 'IdentityProviderConfiguration') as identity_provider_configuration,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                  AND data__Identifier = '<DatastoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'DatastoreArn') as datastore_arn,
                    json_extract_path_text(detail.Properties, 'DatastoreEndpoint') as datastore_endpoint,
                    json_extract_path_text(detail.Properties, 'DatastoreId') as datastore_id,
                    json_extract_path_text(detail.Properties, 'DatastoreName') as datastore_name,
                    json_extract_path_text(detail.Properties, 'DatastoreStatus') as datastore_status,
                    json_extract_path_text(detail.Properties, 'DatastoreTypeVersion') as datastore_type_version,
                    json_extract_path_text(detail.Properties, 'PreloadDataConfig') as preload_data_config,
                    json_extract_path_text(detail.Properties, 'SseConfiguration') as sse_configuration,
                    json_extract_path_text(detail.Properties, 'IdentityProviderConfiguration') as identity_provider_configuration,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                    AND detail.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                    AND listing.region = 'us-east-1'
    fhir_datastores_list_only:
      name: fhir_datastores_list_only
      id: aws.healthlake.fhir_datastores_list_only
      x-cfn-schema-name: FHIRDatastore
      x-cfn-type-name: AWS::HealthLake::FHIRDatastore
      x-identifiers:
        - DatastoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatastoreId') as datastore_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatastoreId') as datastore_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND region = 'us-east-1'
    fhir_datastore_tags:
      name: fhir_datastore_tags
      id: aws.healthlake.fhir_datastore_tags
      x-cfn-schema-name: FHIRDatastore
      x-cfn-type-name: AWS::HealthLake::FHIRDatastore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.DatastoreArn') as datastore_arn,
              JSON_EXTRACT(detail.Properties, '$.DatastoreEndpoint') as datastore_endpoint,
              JSON_EXTRACT(detail.Properties, '$.DatastoreId') as datastore_id,
              JSON_EXTRACT(detail.Properties, '$.DatastoreName') as datastore_name,
              JSON_EXTRACT(detail.Properties, '$.DatastoreStatus') as datastore_status,
              JSON_EXTRACT(detail.Properties, '$.DatastoreTypeVersion') as datastore_type_version,
              JSON_EXTRACT(detail.Properties, '$.PreloadDataConfig') as preload_data_config,
              JSON_EXTRACT(detail.Properties, '$.SseConfiguration') as sse_configuration,
              JSON_EXTRACT(detail.Properties, '$.IdentityProviderConfiguration') as identity_provider_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND detail.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'DatastoreArn') as datastore_arn,
                json_extract_path_text(detail.Properties, 'DatastoreEndpoint') as datastore_endpoint,
                json_extract_path_text(detail.Properties, 'DatastoreId') as datastore_id,
                json_extract_path_text(detail.Properties, 'DatastoreName') as datastore_name,
                json_extract_path_text(detail.Properties, 'DatastoreStatus') as datastore_status,
                json_extract_path_text(detail.Properties, 'DatastoreTypeVersion') as datastore_type_version,
                json_extract_path_text(detail.Properties, 'PreloadDataConfig') as preload_data_config,
                json_extract_path_text(detail.Properties, 'SseConfiguration') as sse_configuration,
                json_extract_path_text(detail.Properties, 'IdentityProviderConfiguration') as identity_provider_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND detail.data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FHIRDatastore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFHIRDatastore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFHIRDatastoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
