openapi: 3.0.0
info:
  title: HealthLake
  version: 1.0.0
paths: {}
components:
  schemas:
    CreatedAt:
      description: The time that a Data Store was created.
      type: object
      properties:
        Seconds:
          description: Seconds since epoch.
          type: string
        Nanos:
          description: Nanoseconds.
          type: integer
      required:
        - Seconds
        - Nanos
      additionalProperties: false
    DatastoreArn:
      description: The Amazon Resource Name used in the creation of the Data Store.
      type: string
      pattern: ^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?
    DatastoreEndpoint:
      description: The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.
      type: string
      maxLength: 10000
    DatastoreId:
      description: The AWS-generated ID number for the Data Store.
      type: string
      minLength: 1
      maxLength: 32
    DatastoreName:
      description: The user-generated name for the Data Store.
      type: string
      minLength: 1
      maxLength: 256
    DatastoreStatus:
      description: The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
        - DELETED
    DatastoreTypeVersion:
      description: The FHIR version. Only R4 version data is supported.
      type: string
      enum:
        - R4
    PreloadDataConfig:
      description: The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
      type: object
      properties:
        PreloadDataType:
          description: The type of preloaded data. Only Synthea preloaded data is supported.
          type: string
          enum:
            - SYNTHEA
      required:
        - PreloadDataType
      additionalProperties: false
    SseConfiguration:
      description: The server-side encryption key configuration for a customer provided encryption key.
      type: object
      properties:
        KmsEncryptionConfig:
          $ref: '#/components/schemas/KmsEncryptionConfig'
      required:
        - KmsEncryptionConfig
      additionalProperties: false
    KmsEncryptionConfig:
      description: The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
      type: object
      properties:
        CmkType:
          description: The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
          type: string
          enum:
            - CUSTOMER_MANAGED_KMS_KEY
            - AWS_OWNED_KMS_KEY
        KmsKeyId:
          description: The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
          type: string
          minLength: 1
          maxLength: 400
          pattern: (arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))
      required:
        - CmkType
      additionalProperties: false
    IdentityProviderConfiguration:
      description: The identity provider configuration for the datastore
      type: object
      properties:
        AuthorizationStrategy:
          description: Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
          type: string
          enum:
            - SMART_ON_FHIR_V1
            - AWS_AUTH
        FineGrainedAuthorizationEnabled:
          description: Flag to indicate if fine-grained authorization will be enabled for the datastore
          type: boolean
        Metadata:
          description: The JSON metadata elements for identity provider configuration.
          type: string
        IdpLambdaArn:
          description: The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
          type: string
          minLength: 49
          maxLength: 256
          pattern: arn:aws[-a-z]*:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9\-_\.]+(:(\$LATEST|[a-zA-Z0-9\-_]+))?
      required:
        - AuthorizationStrategy
      additionalProperties: false
    Tag:
      description: A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.
      type: object
      properties:
        Key:
          description: The key of the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: The value of the tag.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    FHIRDatastore:
      type: object
      properties:
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        DatastoreArn:
          $ref: '#/components/schemas/DatastoreArn'
        DatastoreEndpoint:
          $ref: '#/components/schemas/DatastoreEndpoint'
        DatastoreId:
          $ref: '#/components/schemas/DatastoreId'
        DatastoreName:
          $ref: '#/components/schemas/DatastoreName'
        DatastoreStatus:
          $ref: '#/components/schemas/DatastoreStatus'
        DatastoreTypeVersion:
          $ref: '#/components/schemas/DatastoreTypeVersion'
        PreloadDataConfig:
          $ref: '#/components/schemas/PreloadDataConfig'
        SseConfiguration:
          $ref: '#/components/schemas/SseConfiguration'
        IdentityProviderConfiguration:
          $ref: '#/components/schemas/IdentityProviderConfiguration'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DatastoreTypeVersion
      x-stackql-resource-name: fhir_datastore
      description: HealthLake FHIR Datastore
      x-type-name: AWS::HealthLake::FHIRDatastore
      x-documentation-url: https://docs.aws.amazon.com/healthlake/latest/devguide/working-with-FHIR-healthlake.html
      x-stackql-primary-identifier:
        - DatastoreId
      x-create-only-properties:
        - DatastoreName
        - DatastoreTypeVersion
        - PreloadDataConfig
        - SseConfiguration
        - KmsEncryptionConfig
        - IdentityProviderConfiguration
      x-read-only-properties:
        - CreatedAt
        - DatastoreArn
        - DatastoreEndpoint
        - DatastoreId
        - DatastoreStatus
      x-required-properties:
        - DatastoreTypeVersion
      x-taggable: true
      x-required-permissions:
        create:
          - healthlake:CreateFHIRDatastore
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - ram:GetResourceShareInvitations
          - ram:AcceptResourceShareInvitation
          - glue:CreateDatabase
          - glue:DeleteDatabase
          - lambda:InvokeFunction
          - healthlake:TagResource
          - healthlake:UntagResource
          - healthlake:ListTagsForResource
        read:
          - healthlake:DescribeFHIRDatastore
          - healthlake:ListTagsForResource
        update:
          - healthlake:TagResource
          - healthlake:UntagResource
          - healthlake:ListTagsForResource
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
        delete:
          - healthlake:DeleteFHIRDatastore
          - healthlake:DescribeFHIRDatastore
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - ram:GetResourceShareInvitations
          - ram:AcceptResourceShareInvitation
          - glue:CreateDatabase
          - glue:DeleteDatabase
        list:
          - healthlake:ListFHIRDatastores
  x-stackQL-resources:
    fhir_datastores:
      name: fhir_datastores
      id: aws.healthlake.fhir_datastores
      x-cfn-schema-name: FHIRDatastore
      x-type: list
      x-identifiers:
        - DatastoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatastoreId') as datastore_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatastoreId') as datastore_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND region = 'us-east-1'
    fhir_datastore:
      name: fhir_datastore
      id: aws.healthlake.fhir_datastore
      x-cfn-schema-name: FHIRDatastore
      x-type: get
      x-identifiers:
        - DatastoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DatastoreArn') as datastore_arn,
              JSON_EXTRACT(Properties, '$.DatastoreEndpoint') as datastore_endpoint,
              JSON_EXTRACT(Properties, '$.DatastoreId') as datastore_id,
              JSON_EXTRACT(Properties, '$.DatastoreName') as datastore_name,
              JSON_EXTRACT(Properties, '$.DatastoreStatus') as datastore_status,
              JSON_EXTRACT(Properties, '$.DatastoreTypeVersion') as datastore_type_version,
              JSON_EXTRACT(Properties, '$.PreloadDataConfig') as preload_data_config,
              JSON_EXTRACT(Properties, '$.SseConfiguration') as sse_configuration,
              JSON_EXTRACT(Properties, '$.IdentityProviderConfiguration') as identity_provider_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
              AND data__Identifier = '<DatastoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'DatastoreArn') as datastore_arn,
                json_extract_path_text(Properties, 'DatastoreEndpoint') as datastore_endpoint,
                json_extract_path_text(Properties, 'DatastoreId') as datastore_id,
                json_extract_path_text(Properties, 'DatastoreName') as datastore_name,
                json_extract_path_text(Properties, 'DatastoreStatus') as datastore_status,
                json_extract_path_text(Properties, 'DatastoreTypeVersion') as datastore_type_version,
                json_extract_path_text(Properties, 'PreloadDataConfig') as preload_data_config,
                json_extract_path_text(Properties, 'SseConfiguration') as sse_configuration,
                json_extract_path_text(Properties, 'IdentityProviderConfiguration') as identity_provider_configuration,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::HealthLake::FHIRDatastore'
                AND data__Identifier = '<DatastoreId>'
                AND region = 'us-east-1'
