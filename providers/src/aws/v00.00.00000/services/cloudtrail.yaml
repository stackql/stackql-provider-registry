openapi: 3.0.0
info:
  title: CloudTrail
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Destination:
      description: The resource that receives events arriving from a channel.
      type: object
      properties:
        Type:
          description: The type of destination for events arriving from a channel.
          type: string
          enum:
            - EVENT_DATA_STORE
        Location:
          description: The ARN of a resource that receives events from a channel.
          type: string
          minLength: 3
          maxLength: 1024
          pattern: (^[a-zA-Z0-9._/\-:]+$)
      required:
        - Type
        - Location
      additionalProperties: false
    UUID:
      type: string
      minLength: 36
      maxLength: 36
      pattern: (^[a-f0-9\-]+$)
    Timestamp:
      type: string
    ChannelArn:
      description: The Amazon Resource Name (ARN) of a channel.
      type: string
      minLength: 3
      maxLength: 256
      pattern: (^[a-zA-Z0-9._/\-:]+$)
    ChannelName:
      description: The name of the channel.
      type: string
      minLength: 3
      maxLength: 128
      pattern: (^[a-zA-Z0-9._\-]+$)
    Tag:
      description: An arbitrary set of tags (key-value pairs) for this trail.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: 'The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
      required:
        - Value
        - Key
    Channel:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/ChannelName'
        Source:
          description: The ARN of an on-premises storage solution or application, or a partner event source.
          type: string
          minLength: 1
          maxLength: 256
          pattern: (.*)
        Destinations:
          description: One or more resources to which events arriving through a channel are logged and stored.
          type: array
          items:
            $ref: '#/components/schemas/Destination'
          maxItems: 10
          uniqueItems: true
          x-insertionOrder: false
        ChannelArn:
          $ref: '#/components/schemas/ChannelArn'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: channel
      description: A channel receives events from a specific source (such as an on-premises storage solution or application, or a partner event data source), and delivers the events to one or more event data stores. You use channels to ingest events into CloudTrail from sources outside AWS.
      x-type-name: AWS::CloudTrail::Channel
      x-stackql-primary-identifier:
        - ChannelArn
      x-create-only-properties:
        - Source
      x-write-only-properties:
        - Tags
      x-read-only-properties:
        - ChannelArn
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - CloudTrail:CreateChannel
          - CloudTrail:AddTags
        read:
          - CloudTrail:GetChannel
          - CloudTrail:ListChannels
        update:
          - CloudTrail:UpdateChannel
          - CloudTrail:GetChannel
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
        delete:
          - CloudTrail:DeleteChannel
        list:
          - CloudTrail:ListChannels
    RefreshSchedule:
      description: Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
      type: object
      additionalProperties: false
      properties:
        Frequency:
          type: object
          additionalProperties: false
          properties:
            Unit:
              description: The frequency unit. Supported values are HOURS and DAYS.
              type: string
              enum:
                - HOURS
                - DAYS
            Value:
              description: The frequency value.
              type: integer
          required:
            - Unit
            - Value
        TimeOfDay:
          type: string
          description: StartTime of the automatic schedule refresh.
          pattern: ^[0-9]{2}:[0-9]{2}
        Status:
          type: string
          description: The status of the schedule. Supported values are ENABLED and DISABLED.
          enum:
            - ENABLED
            - DISABLED
      required: []
    QueryParameter:
      type: string
      description: 'The value of the QueryParameter. Possible values: $StartTime$, $EndTime$, $Period$.'
      minLength: 1
      maxLength: 1024
      pattern: .*
    Widget:
      description: The dashboard widget
      type: object
      additionalProperties: false
      properties:
        QueryStatement:
          description: The SQL query statement on one or more event data stores.
          type: string
          minLength: 1
          maxLength: 10000
          pattern: (?s).*
        QueryParameters:
          description: 'The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.'
          type: array
          items:
            $ref: '#/components/schemas/QueryParameter'
          minItems: 1
          maxItems: 10
          uniqueItems: false
          x-insertionOrder: true
        ViewProperties:
          description: The view properties of the widget.
          type: object
          additionalProperties: false
          x-patternProperties:
            ^[a-zA-Z0-9._-]{3,128}$:
              type: string
              minLength: 1
              maxLength: 128
              pattern: ^[a-zA-Z0-9._\- ]+$
      required:
        - QueryStatement
    Dashboard:
      type: object
      properties:
        Widgets:
          description: List of widgets on the dashboard
          type: array
          items:
            $ref: '#/components/schemas/Widget'
          uniqueItems: true
          x-insertionOrder: true
        CreatedTimestamp:
          description: The timestamp of the dashboard creation.
          $ref: '#/components/schemas/Timestamp'
        DashboardArn:
          description: The ARN of the dashboard.
          type: string
          pattern: ^[a-zA-Z0-9._/\-:]+$
        RefreshSchedule:
          description: Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
          $ref: '#/components/schemas/RefreshSchedule'
        Name:
          description: The name of the dashboard.
          type: string
          pattern: ^[a-zA-Z0-9_\-]+$
        Status:
          description: The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.
          type: string
          enum:
            - CREATING
            - CREATED
            - UPDATING
            - UPDATED
            - DELETING
        TerminationProtectionEnabled:
          description: Indicates whether the dashboard is protected from termination.
          type: boolean
        Type:
          description: The type of the dashboard. Values are CUSTOM and MANAGED.
          type: string
          enum:
            - MANAGED
            - CUSTOM
        UpdatedTimestamp:
          description: The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
          $ref: '#/components/schemas/Timestamp'
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: dashboard
      description: The Amazon CloudTrail dashboard resource allows customers to manage managed dashboards and create custom dashboards. You can manually refresh custom and managed dashboards. For custom dashboards, you can also set up an automatic refresh schedule and modify dashboard widgets.
      x-type-name: AWS::CloudTrail::Dashboard
      x-stackql-primary-identifier:
        - DashboardArn
      x-read-only-properties:
        - DashboardArn
        - CreatedTimestamp
        - UpdatedTimestamp
        - Status
        - Type
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
          - CloudTrail:ListTags
      x-required-permissions:
        create:
          - CloudTrail:CreateDashboard
          - CloudTrail:AddTags
          - CloudTrail:StartQuery
          - CloudTrail:StartDashboardRefresh
        read:
          - CloudTrail:GetDashboard
          - CloudTrail:ListDashboards
          - CloudTrail:ListTags
        update:
          - CloudTrail:UpdateDashboard
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
          - CloudTrail:StartQuery
          - CloudTrail:StartDashboardRefresh
        delete:
          - CloudTrail:DeleteDashboard
          - CloudTrail:UpdateDashboard
        list:
          - CloudTrail:ListDashboards
          - CloudTrail:GetDashboard
          - CloudTrail:ListTags
    AdvancedFieldSelector:
      description: A single selector statement in an advanced event selector.
      additionalProperties: false
      type: object
      properties:
        Field:
          minLength: 1
          pattern: ([\w|\d|\.|_]+)
          description: A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
          type: string
          maxLength: 1000
        Equals:
          minItems: 1
          uniqueItems: true
          description: An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
        NotStartsWith:
          minItems: 1
          uniqueItems: true
          description: An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
        NotEndsWith:
          minItems: 1
          uniqueItems: true
          description: An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
        StartsWith:
          minItems: 1
          uniqueItems: true
          description: An operator that includes events that match the first few characters of the event record field specified as the value of Field.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
        EndsWith:
          minItems: 1
          uniqueItems: true
          description: An operator that includes events that match the last few characters of the event record field specified as the value of Field.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
        NotEquals:
          minItems: 1
          uniqueItems: true
          description: An operator that excludes events that match the exact value of the event record field specified as the value of Field.
          x-insertionOrder: false
          type: array
          items:
            minLength: 1
            pattern: (.+)
            type: string
            maxLength: 2048
      required:
        - Field
    AdvancedEventSelector:
      description: Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
      additionalProperties: false
      type: object
      properties:
        FieldSelectors:
          minItems: 1
          uniqueItems: true
          description: Contains all selector statements in an advanced event selector.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/AdvancedFieldSelector'
        Name:
          minLength: 1
          description: An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
          type: string
          maxLength: 1000
      required:
        - FieldSelectors
    InsightSelector:
      description: A string that contains insight types that are logged on a trail.
      additionalProperties: false
      type: object
      properties:
        InsightType:
          description: The type of insight to log on a trail.
          type: string
    EventDataStore:
      type: object
      properties:
        AdvancedEventSelectors:
          description: The advanced event selectors that were used to select events for the data store.
          type: array
          items:
            $ref: '#/components/schemas/AdvancedEventSelector'
          uniqueItems: true
          x-insertionOrder: false
        CreatedTimestamp:
          description: The timestamp of the event data store's creation.
          $ref: '#/components/schemas/Timestamp'
        EventDataStoreArn:
          description: The ARN of the event data store.
          type: string
        FederationEnabled:
          description: Indicates whether federation is enabled on an event data store.
          type: boolean
        FederationRoleArn:
          description: The ARN of the role used for event data store federation.
          type: string
        MultiRegionEnabled:
          description: Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
          type: boolean
        Name:
          description: The name of the event data store.
          type: string
        OrganizationEnabled:
          description: Indicates that an event data store is collecting logged events for an organization.
          type: boolean
        BillingMode:
          description: The mode that the event data store will use to charge for event storage.
          type: string
        RetentionPeriod:
          description: The retention period, in days.
          type: integer
        Status:
          description: The status of an event data store. Values are STARTING_INGESTION, ENABLED, STOPPING_INGESTION, STOPPED_INGESTION and PENDING_DELETION.
          type: string
        TerminationProtectionEnabled:
          description: Indicates whether the event data store is protected from termination.
          type: boolean
        UpdatedTimestamp:
          description: The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
          $ref: '#/components/schemas/Timestamp'
        KmsKeyId:
          description: Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        InsightSelectors:
          description: Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
          type: array
          items:
            $ref: '#/components/schemas/InsightSelector'
          uniqueItems: true
          x-insertionOrder: false
        InsightsDestination:
          description: Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
          type: string
        IngestionEnabled:
          description: Indicates whether the event data store is ingesting events.
          type: boolean
      required: []
      x-stackql-resource-name: event_data_store
      description: A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events that you have logged on your account from the last 7 to 2557 or 3653 days (about seven or ten years) depending on the selected BillingMode.
      x-type-name: AWS::CloudTrail::EventDataStore
      x-stackql-primary-identifier:
        - EventDataStoreArn
      x-read-only-properties:
        - EventDataStoreArn
        - CreatedTimestamp
        - UpdatedTimestamp
        - Status
        - FederationStatus
      x-required-properties: []
      x-required-permissions:
        create:
          - CloudTrail:CreateEventDataStore
          - CloudTrail:AddTags
          - CloudTrail:PutInsightSelectors
          - CloudTrail:EnableFederation
          - CloudTrail:GetEventDataStore
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - organizations:DescribeOrganization
          - organizations:ListAWSServiceAccessForOrganization
          - kms:GenerateDataKey
          - kms:Decrypt
          - glue:CreateDatabase
          - glue:CreateTable
          - glue:PassConnection
          - lakeformation:RegisterResource
        read:
          - CloudTrail:GetEventDataStore
          - CloudTrail:ListEventDataStores
          - CloudTrail:GetInsightSelectors
          - CloudTrail:ListTags
        update:
          - CloudTrail:UpdateEventDataStore
          - CloudTrail:RestoreEventDataStore
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
          - CloudTrail:StartEventDataStoreIngestion
          - CloudTrail:StopEventDataStoreIngestion
          - CloudTrail:GetEventDataStore
          - CloudTrail:PutInsightSelectors
          - CloudTrail:GetInsightSelectors
          - CloudTrail:EnableFederation
          - CloudTrail:DisableFederation
          - iam:PassRole
          - iam:GetRole
          - iam:CreateServiceLinkedRole
          - organizations:DescribeOrganization
          - organizations:ListAWSServiceAccessForOrganization
          - glue:CreateDatabase
          - glue:CreateTable
          - glue:PassConnection
          - lakeformation:RegisterResource
          - glue:DeleteTable
          - lakeformation:DeregisterResource
          - kms:DescribeKey
        delete:
          - CloudTrail:DeleteEventDataStore
          - CloudTrail:GetEventDataStore
          - CloudTrail:DisableFederation
          - glue:DeleteTable
          - lakeformation:DeregisterResource
        list:
          - CloudTrail:ListEventDataStores
          - CloudTrail:GetEventDataStore
          - CloudTrail:GetInsightSelectors
          - CloudTrail:ListTags
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          description: The ARN of the AWS CloudTrail resource to which the policy applies.
          type: string
        ResourcePolicy:
          description: A policy document containing permissions to add to the specified resource. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.
          type: object
      required:
        - ResourceArn
        - ResourcePolicy
      x-stackql-resource-name: resource_policy
      description: Resource Type definition for AWS::CloudTrail::ResourcePolicy
      x-type-name: AWS::CloudTrail::ResourcePolicy
      x-stackql-primary-identifier:
        - ResourceArn
      x-create-only-properties:
        - ResourceArn
      x-required-properties:
        - ResourceArn
        - ResourcePolicy
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - CloudTrail:PutResourcePolicy
          - CloudTrail:GetResourcePolicy
        read:
          - CloudTrail:GetResourcePolicy
        update:
          - CloudTrail:PutResourcePolicy
          - CloudTrail:GetResourcePolicy
        delete:
          - CloudTrail:DeleteResourcePolicy
    EventSelector:
      description: The type of email sending events to publish to the event destination.
      additionalProperties: false
      type: object
      properties:
        IncludeManagementEvents:
          description: Specify if you want your event selector to include management events for your trail.
          type: boolean
        ReadWriteType:
          description: Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
          type: string
          enum:
            - All
            - ReadOnly
            - WriteOnly
        ExcludeManagementEventSources:
          uniqueItems: true
          description: An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
          x-insertionOrder: false
          type: array
          items:
            type: string
        DataResources:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/DataResource'
    DataResource:
      description: CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
          type: string
        Values:
          uniqueItems: true
          description: An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
          x-insertionOrder: false
          type: array
          items:
            type: string
      required:
        - Type
    Trail:
      type: object
      properties:
        IncludeGlobalServiceEvents:
          description: Specifies whether the trail is publishing events from global services such as IAM to the log files.
          type: boolean
        EventSelectors:
          maxItems: 5
          uniqueItems: true
          description: >-
            Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail
            doesn't log the event. You can configure up to five event selectors for a trail.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/EventSelector'
        KMSKeyId:
          description: Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
          type: string
        CloudWatchLogsRoleArn:
          description: Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
          type: string
        S3KeyPrefix:
          description: Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
          type: string
          maxLength: 200
        AdvancedEventSelectors:
          uniqueItems: true
          description: The advanced event selectors that were used to select events for the data store.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/AdvancedEventSelector'
        TrailName:
          minLength: 3
          pattern: (^[a-zA-Z0-9]$)|(^[a-zA-Z0-9]([a-zA-Z0-9\._-])*[a-zA-Z0-9]$)
          type: string
          maxLength: 128
        IsOrganizationTrail:
          description: Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
          type: boolean
        InsightSelectors:
          uniqueItems: true
          description: Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/InsightSelector'
        CloudWatchLogsLogGroupArn:
          description: Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
          type: string
        SnsTopicName:
          description: Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
          type: string
          maxLength: 256
        IsMultiRegionTrail:
          description: >-
            Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails
            that log events in all regions.
          type: boolean
        S3BucketName:
          description: Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
          type: string
        SnsTopicArn:
          type: string
        EnableLogFileValidation:
          description: Specifies whether log file validation is enabled. The default is false.
          type: boolean
        Arn:
          type: string
        Tags:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        IsLogging:
          description: Whether the CloudTrail is currently logging AWS API calls.
          type: boolean
      required:
        - S3BucketName
        - IsLogging
      x-stackql-resource-name: trail
      description: Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. A maximum of five trails can exist in a region, irrespective of the region in which they were created.
      x-type-name: AWS::CloudTrail::Trail
      x-stackql-primary-identifier:
        - TrailName
      x-create-only-properties:
        - TrailName
      x-read-only-properties:
        - Arn
        - SnsTopicArn
      x-required-properties:
        - S3BucketName
        - IsLogging
      x-tagging:
        permissions:
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
          - CloudTrail:ListTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - CloudTrail:GetTrail
          - CloudTrail:GetTrailStatus
          - CloudTrail:ListTags
          - CloudTrail:GetEventSelectors
          - CloudTrail:GetInsightSelectors
          - CloudTrail:DescribeTrails
        create:
          - CloudTrail:CreateTrail
          - CloudTrail:StartLogging
          - CloudTrail:AddTags
          - CloudTrail:PutEventSelectors
          - CloudTrail:PutInsightSelectors
          - iam:GetRole
          - iam:PassRole
          - iam:CreateServiceLinkedRole
          - organizations:DescribeOrganization
          - organizations:ListAWSServiceAccessForOrganization
        update:
          - CloudTrail:UpdateTrail
          - CloudTrail:StartLogging
          - CloudTrail:StopLogging
          - CloudTrail:AddTags
          - CloudTrail:RemoveTags
          - CloudTrail:PutEventSelectors
          - CloudTrail:PutInsightSelectors
          - iam:GetRole
          - iam:PassRole
          - iam:CreateServiceLinkedRole
          - organizations:DescribeOrganization
          - organizations:ListAWSServiceAccessForOrganization
          - CloudTrail:GetTrail
          - CloudTrail:DescribeTrails
        list:
          - CloudTrail:ListTrails
          - CloudTrail:GetTrail
          - CloudTrail:GetTrailStatus
          - CloudTrail:ListTags
          - CloudTrail:GetEventSelectors
          - CloudTrail:GetInsightSelectors
          - CloudTrail:DescribeTrails
        delete:
          - CloudTrail:DeleteTrail
    CreateChannelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              $ref: '#/components/schemas/ChannelName'
            Source:
              description: The ARN of an on-premises storage solution or application, or a partner event source.
              type: string
              minLength: 1
              maxLength: 256
              pattern: (.*)
            Destinations:
              description: One or more resources to which events arriving through a channel are logged and stored.
              type: array
              items:
                $ref: '#/components/schemas/Destination'
              maxItems: 10
              uniqueItems: true
              x-insertionOrder: false
            ChannelArn:
              $ref: '#/components/schemas/ChannelArn'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateChannelRequest
      type: object
      required: []
    CreateDashboardRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Widgets:
              description: List of widgets on the dashboard
              type: array
              items:
                $ref: '#/components/schemas/Widget'
              uniqueItems: true
              x-insertionOrder: true
            CreatedTimestamp:
              description: The timestamp of the dashboard creation.
              $ref: '#/components/schemas/Timestamp'
            DashboardArn:
              description: The ARN of the dashboard.
              type: string
              pattern: ^[a-zA-Z0-9._/\-:]+$
            RefreshSchedule:
              description: Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.
              $ref: '#/components/schemas/RefreshSchedule'
            Name:
              description: The name of the dashboard.
              type: string
              pattern: ^[a-zA-Z0-9_\-]+$
            Status:
              description: The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.
              type: string
              enum:
                - CREATING
                - CREATED
                - UPDATING
                - UPDATED
                - DELETING
            TerminationProtectionEnabled:
              description: Indicates whether the dashboard is protected from termination.
              type: boolean
            Type:
              description: The type of the dashboard. Values are CUSTOM and MANAGED.
              type: string
              enum:
                - MANAGED
                - CUSTOM
            UpdatedTimestamp:
              description: The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
              $ref: '#/components/schemas/Timestamp'
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDashboardRequest
      type: object
      required: []
    CreateEventDataStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AdvancedEventSelectors:
              description: The advanced event selectors that were used to select events for the data store.
              type: array
              items:
                $ref: '#/components/schemas/AdvancedEventSelector'
              uniqueItems: true
              x-insertionOrder: false
            CreatedTimestamp:
              description: The timestamp of the event data store's creation.
              $ref: '#/components/schemas/Timestamp'
            EventDataStoreArn:
              description: The ARN of the event data store.
              type: string
            FederationEnabled:
              description: Indicates whether federation is enabled on an event data store.
              type: boolean
            FederationRoleArn:
              description: The ARN of the role used for event data store federation.
              type: string
            MultiRegionEnabled:
              description: Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
              type: boolean
            Name:
              description: The name of the event data store.
              type: string
            OrganizationEnabled:
              description: Indicates that an event data store is collecting logged events for an organization.
              type: boolean
            BillingMode:
              description: The mode that the event data store will use to charge for event storage.
              type: string
            RetentionPeriod:
              description: The retention period, in days.
              type: integer
            Status:
              description: The status of an event data store. Values are STARTING_INGESTION, ENABLED, STOPPING_INGESTION, STOPPED_INGESTION and PENDING_DELETION.
              type: string
            TerminationProtectionEnabled:
              description: Indicates whether the event data store is protected from termination.
              type: boolean
            UpdatedTimestamp:
              description: The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
              $ref: '#/components/schemas/Timestamp'
            KmsKeyId:
              description: Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
              type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            InsightSelectors:
              description: Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
              type: array
              items:
                $ref: '#/components/schemas/InsightSelector'
              uniqueItems: true
              x-insertionOrder: false
            InsightsDestination:
              description: Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
              type: string
            IngestionEnabled:
              description: Indicates whether the event data store is ingesting events.
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateEventDataStoreRequest
      type: object
      required: []
    CreateResourcePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ResourceArn:
              description: The ARN of the AWS CloudTrail resource to which the policy applies.
              type: string
            ResourcePolicy:
              description: A policy document containing permissions to add to the specified resource. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateResourcePolicyRequest
      type: object
      required: []
    CreateTrailRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IncludeGlobalServiceEvents:
              description: Specifies whether the trail is publishing events from global services such as IAM to the log files.
              type: boolean
            EventSelectors:
              maxItems: 5
              uniqueItems: true
              description: >-
                Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the
                trail doesn't log the event. You can configure up to five event selectors for a trail.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/EventSelector'
            KMSKeyId:
              description: Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
              type: string
            CloudWatchLogsRoleArn:
              description: Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
              type: string
            S3KeyPrefix:
              description: Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
              type: string
              maxLength: 200
            AdvancedEventSelectors:
              uniqueItems: true
              description: The advanced event selectors that were used to select events for the data store.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/AdvancedEventSelector'
            TrailName:
              minLength: 3
              pattern: (^[a-zA-Z0-9]$)|(^[a-zA-Z0-9]([a-zA-Z0-9\._-])*[a-zA-Z0-9]$)
              type: string
              maxLength: 128
            IsOrganizationTrail:
              description: Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
              type: boolean
            InsightSelectors:
              uniqueItems: true
              description: Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/InsightSelector'
            CloudWatchLogsLogGroupArn:
              description: Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
              type: string
            SnsTopicName:
              description: Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
              type: string
              maxLength: 256
            IsMultiRegionTrail:
              description: >-
                Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails
                that log events in all regions.
              type: boolean
            S3BucketName:
              description: Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
              type: string
            SnsTopicArn:
              type: string
            EnableLogFileValidation:
              description: Specifies whether log file validation is enabled. The default is false.
              type: boolean
            Arn:
              type: string
            Tags:
              uniqueItems: false
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            IsLogging:
              description: Whether the CloudTrail is currently logging AWS API calls.
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateTrailRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    channels:
      name: channels
      id: aws.cloudtrail.channels
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::CloudTrail::Channel
      x-identifiers:
        - ChannelArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channels/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channels/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channels/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(Properties, '$.ChannelArn') as channel_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Channel'
              AND data__Identifier = '<ChannelArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
                JSON_EXTRACT(detail.Properties, '$.ChannelArn') as channel_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Channel'
                AND detail.data__TypeName = 'AWS::CloudTrail::Channel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'Destinations') as destinations,
                  json_extract_path_text(Properties, 'ChannelArn') as channel_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Channel'
                  AND data__Identifier = '<ChannelArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                    json_extract_path_text(detail.Properties, 'ChannelArn') as channel_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::CloudTrail::Channel'
                    AND detail.data__TypeName = 'AWS::CloudTrail::Channel'
                    AND listing.region = 'us-east-1'
    channels_list_only:
      name: channels_list_only
      id: aws.cloudtrail.channels_list_only
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::CloudTrail::Channel
      x-identifiers:
        - ChannelArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelArn') as channel_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Channel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelArn') as channel_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Channel'
                AND region = 'us-east-1'
    channel_tags:
      name: channel_tags
      id: aws.cloudtrail.channel_tags
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::CloudTrail::Channel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Source') as source,
              JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(detail.Properties, '$.ChannelArn') as channel_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::CloudTrail::Channel'
              AND detail.data__TypeName = 'AWS::CloudTrail::Channel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Source') as source,
                json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                json_extract_path_text(detail.Properties, 'ChannelArn') as channel_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Channel'
                AND detail.data__TypeName = 'AWS::CloudTrail::Channel'
                AND listing.region = 'us-east-1'
    dashboards:
      name: dashboards
      id: aws.cloudtrail.dashboards
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::CloudTrail::Dashboard
      x-identifiers:
        - DashboardArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Dashboard&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Widgets') as widgets,
              JSON_EXTRACT(Properties, '$.CreatedTimestamp') as created_timestamp,
              JSON_EXTRACT(Properties, '$.DashboardArn') as dashboard_arn,
              JSON_EXTRACT(Properties, '$.RefreshSchedule') as refresh_schedule,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.UpdatedTimestamp') as updated_timestamp,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Dashboard'
              AND data__Identifier = '<DashboardArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Widgets') as widgets,
                JSON_EXTRACT(detail.Properties, '$.CreatedTimestamp') as created_timestamp,
                JSON_EXTRACT(detail.Properties, '$.DashboardArn') as dashboard_arn,
                JSON_EXTRACT(detail.Properties, '$.RefreshSchedule') as refresh_schedule,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.UpdatedTimestamp') as updated_timestamp,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Dashboard'
                AND detail.data__TypeName = 'AWS::CloudTrail::Dashboard'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Widgets') as widgets,
                  json_extract_path_text(Properties, 'CreatedTimestamp') as created_timestamp,
                  json_extract_path_text(Properties, 'DashboardArn') as dashboard_arn,
                  json_extract_path_text(Properties, 'RefreshSchedule') as refresh_schedule,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'UpdatedTimestamp') as updated_timestamp,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Dashboard'
                  AND data__Identifier = '<DashboardArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Widgets') as widgets,
                    json_extract_path_text(detail.Properties, 'CreatedTimestamp') as created_timestamp,
                    json_extract_path_text(detail.Properties, 'DashboardArn') as dashboard_arn,
                    json_extract_path_text(detail.Properties, 'RefreshSchedule') as refresh_schedule,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'UpdatedTimestamp') as updated_timestamp,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::CloudTrail::Dashboard'
                    AND detail.data__TypeName = 'AWS::CloudTrail::Dashboard'
                    AND listing.region = 'us-east-1'
    dashboards_list_only:
      name: dashboards_list_only
      id: aws.cloudtrail.dashboards_list_only
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::CloudTrail::Dashboard
      x-identifiers:
        - DashboardArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DashboardArn') as dashboard_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Dashboard'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DashboardArn') as dashboard_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Dashboard'
                AND region = 'us-east-1'
    dashboard_tags:
      name: dashboard_tags
      id: aws.cloudtrail.dashboard_tags
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::CloudTrail::Dashboard
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Widgets') as widgets,
              JSON_EXTRACT(detail.Properties, '$.CreatedTimestamp') as created_timestamp,
              JSON_EXTRACT(detail.Properties, '$.DashboardArn') as dashboard_arn,
              JSON_EXTRACT(detail.Properties, '$.RefreshSchedule') as refresh_schedule,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.UpdatedTimestamp') as updated_timestamp
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::CloudTrail::Dashboard'
              AND detail.data__TypeName = 'AWS::CloudTrail::Dashboard'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Widgets') as widgets,
                json_extract_path_text(detail.Properties, 'CreatedTimestamp') as created_timestamp,
                json_extract_path_text(detail.Properties, 'DashboardArn') as dashboard_arn,
                json_extract_path_text(detail.Properties, 'RefreshSchedule') as refresh_schedule,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'UpdatedTimestamp') as updated_timestamp
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Dashboard'
                AND detail.data__TypeName = 'AWS::CloudTrail::Dashboard'
                AND listing.region = 'us-east-1'
    event_data_stores:
      name: event_data_stores
      id: aws.cloudtrail.event_data_stores
      x-cfn-schema-name: EventDataStore
      x-cfn-type-name: AWS::CloudTrail::EventDataStore
      x-identifiers:
        - EventDataStoreArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventDataStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::EventDataStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::EventDataStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::EventDataStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_data_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_data_stores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_data_stores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
              JSON_EXTRACT(Properties, '$.CreatedTimestamp') as created_timestamp,
              JSON_EXTRACT(Properties, '$.EventDataStoreArn') as event_data_store_arn,
              JSON_EXTRACT(Properties, '$.FederationEnabled') as federation_enabled,
              JSON_EXTRACT(Properties, '$.FederationRoleArn') as federation_role_arn,
              JSON_EXTRACT(Properties, '$.MultiRegionEnabled') as multi_region_enabled,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.OrganizationEnabled') as organization_enabled,
              JSON_EXTRACT(Properties, '$.BillingMode') as billing_mode,
              JSON_EXTRACT(Properties, '$.RetentionPeriod') as retention_period,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
              JSON_EXTRACT(Properties, '$.UpdatedTimestamp') as updated_timestamp,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.InsightSelectors') as insight_selectors,
              JSON_EXTRACT(Properties, '$.InsightsDestination') as insights_destination,
              JSON_EXTRACT(Properties, '$.IngestionEnabled') as ingestion_enabled
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::EventDataStore'
              AND data__Identifier = '<EventDataStoreArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
                JSON_EXTRACT(detail.Properties, '$.CreatedTimestamp') as created_timestamp,
                JSON_EXTRACT(detail.Properties, '$.EventDataStoreArn') as event_data_store_arn,
                JSON_EXTRACT(detail.Properties, '$.FederationEnabled') as federation_enabled,
                JSON_EXTRACT(detail.Properties, '$.FederationRoleArn') as federation_role_arn,
                JSON_EXTRACT(detail.Properties, '$.MultiRegionEnabled') as multi_region_enabled,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.OrganizationEnabled') as organization_enabled,
                JSON_EXTRACT(detail.Properties, '$.BillingMode') as billing_mode,
                JSON_EXTRACT(detail.Properties, '$.RetentionPeriod') as retention_period,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
                JSON_EXTRACT(detail.Properties, '$.UpdatedTimestamp') as updated_timestamp,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.InsightSelectors') as insight_selectors,
                JSON_EXTRACT(detail.Properties, '$.InsightsDestination') as insights_destination,
                JSON_EXTRACT(detail.Properties, '$.IngestionEnabled') as ingestion_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                AND detail.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                  json_extract_path_text(Properties, 'CreatedTimestamp') as created_timestamp,
                  json_extract_path_text(Properties, 'EventDataStoreArn') as event_data_store_arn,
                  json_extract_path_text(Properties, 'FederationEnabled') as federation_enabled,
                  json_extract_path_text(Properties, 'FederationRoleArn') as federation_role_arn,
                  json_extract_path_text(Properties, 'MultiRegionEnabled') as multi_region_enabled,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'OrganizationEnabled') as organization_enabled,
                  json_extract_path_text(Properties, 'BillingMode') as billing_mode,
                  json_extract_path_text(Properties, 'RetentionPeriod') as retention_period,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                  json_extract_path_text(Properties, 'UpdatedTimestamp') as updated_timestamp,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'InsightSelectors') as insight_selectors,
                  json_extract_path_text(Properties, 'InsightsDestination') as insights_destination,
                  json_extract_path_text(Properties, 'IngestionEnabled') as ingestion_enabled
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::EventDataStore'
                  AND data__Identifier = '<EventDataStoreArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                    json_extract_path_text(detail.Properties, 'CreatedTimestamp') as created_timestamp,
                    json_extract_path_text(detail.Properties, 'EventDataStoreArn') as event_data_store_arn,
                    json_extract_path_text(detail.Properties, 'FederationEnabled') as federation_enabled,
                    json_extract_path_text(detail.Properties, 'FederationRoleArn') as federation_role_arn,
                    json_extract_path_text(detail.Properties, 'MultiRegionEnabled') as multi_region_enabled,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'OrganizationEnabled') as organization_enabled,
                    json_extract_path_text(detail.Properties, 'BillingMode') as billing_mode,
                    json_extract_path_text(detail.Properties, 'RetentionPeriod') as retention_period,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                    json_extract_path_text(detail.Properties, 'UpdatedTimestamp') as updated_timestamp,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'InsightSelectors') as insight_selectors,
                    json_extract_path_text(detail.Properties, 'InsightsDestination') as insights_destination,
                    json_extract_path_text(detail.Properties, 'IngestionEnabled') as ingestion_enabled
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                    AND detail.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                    AND listing.region = 'us-east-1'
    event_data_stores_list_only:
      name: event_data_stores_list_only
      id: aws.cloudtrail.event_data_stores_list_only
      x-cfn-schema-name: EventDataStore
      x-cfn-type-name: AWS::CloudTrail::EventDataStore
      x-identifiers:
        - EventDataStoreArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EventDataStoreArn') as event_data_store_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::EventDataStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EventDataStoreArn') as event_data_store_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::EventDataStore'
                AND region = 'us-east-1'
    event_data_store_tags:
      name: event_data_store_tags
      id: aws.cloudtrail.event_data_store_tags
      x-cfn-schema-name: EventDataStore
      x-cfn-type-name: AWS::CloudTrail::EventDataStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
              JSON_EXTRACT(detail.Properties, '$.CreatedTimestamp') as created_timestamp,
              JSON_EXTRACT(detail.Properties, '$.EventDataStoreArn') as event_data_store_arn,
              JSON_EXTRACT(detail.Properties, '$.FederationEnabled') as federation_enabled,
              JSON_EXTRACT(detail.Properties, '$.FederationRoleArn') as federation_role_arn,
              JSON_EXTRACT(detail.Properties, '$.MultiRegionEnabled') as multi_region_enabled,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.OrganizationEnabled') as organization_enabled,
              JSON_EXTRACT(detail.Properties, '$.BillingMode') as billing_mode,
              JSON_EXTRACT(detail.Properties, '$.RetentionPeriod') as retention_period,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.TerminationProtectionEnabled') as termination_protection_enabled,
              JSON_EXTRACT(detail.Properties, '$.UpdatedTimestamp') as updated_timestamp,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.InsightSelectors') as insight_selectors,
              JSON_EXTRACT(detail.Properties, '$.InsightsDestination') as insights_destination,
              JSON_EXTRACT(detail.Properties, '$.IngestionEnabled') as ingestion_enabled
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::CloudTrail::EventDataStore'
              AND detail.data__TypeName = 'AWS::CloudTrail::EventDataStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                json_extract_path_text(detail.Properties, 'CreatedTimestamp') as created_timestamp,
                json_extract_path_text(detail.Properties, 'EventDataStoreArn') as event_data_store_arn,
                json_extract_path_text(detail.Properties, 'FederationEnabled') as federation_enabled,
                json_extract_path_text(detail.Properties, 'FederationRoleArn') as federation_role_arn,
                json_extract_path_text(detail.Properties, 'MultiRegionEnabled') as multi_region_enabled,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'OrganizationEnabled') as organization_enabled,
                json_extract_path_text(detail.Properties, 'BillingMode') as billing_mode,
                json_extract_path_text(detail.Properties, 'RetentionPeriod') as retention_period,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'TerminationProtectionEnabled') as termination_protection_enabled,
                json_extract_path_text(detail.Properties, 'UpdatedTimestamp') as updated_timestamp,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'InsightSelectors') as insight_selectors,
                json_extract_path_text(detail.Properties, 'InsightsDestination') as insights_destination,
                json_extract_path_text(detail.Properties, 'IngestionEnabled') as ingestion_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                AND detail.data__TypeName = 'AWS::CloudTrail::EventDataStore'
                AND listing.region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.cloudtrail.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::CloudTrail::ResourcePolicy
      x-identifiers:
        - ResourceArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ResourcePolicy') as resource_policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::ResourcePolicy'
              AND data__Identifier = '<ResourceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'ResourcePolicy') as resource_policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::ResourcePolicy'
                AND data__Identifier = '<ResourceArn>'
                AND region = 'us-east-1'
    trails:
      name: trails
      id: aws.cloudtrail.trails
      x-cfn-schema-name: Trail
      x-cfn-type-name: AWS::CloudTrail::Trail
      x-identifiers:
        - TrailName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Trail&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Trail"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Trail"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::CloudTrail::Trail"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/trails/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/trails/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/trails/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IncludeGlobalServiceEvents') as include_global_service_events,
              JSON_EXTRACT(Properties, '$.EventSelectors') as event_selectors,
              JSON_EXTRACT(Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
              JSON_EXTRACT(Properties, '$.S3KeyPrefix') as s3_key_prefix,
              JSON_EXTRACT(Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
              JSON_EXTRACT(Properties, '$.TrailName') as trail_name,
              JSON_EXTRACT(Properties, '$.IsOrganizationTrail') as is_organization_trail,
              JSON_EXTRACT(Properties, '$.InsightSelectors') as insight_selectors,
              JSON_EXTRACT(Properties, '$.CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
              JSON_EXTRACT(Properties, '$.SnsTopicName') as sns_topic_name,
              JSON_EXTRACT(Properties, '$.IsMultiRegionTrail') as is_multi_region_trail,
              JSON_EXTRACT(Properties, '$.S3BucketName') as s3_bucket_name,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.EnableLogFileValidation') as enable_log_file_validation,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.IsLogging') as is_logging
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Trail'
              AND data__Identifier = '<TrailName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IncludeGlobalServiceEvents') as include_global_service_events,
                JSON_EXTRACT(detail.Properties, '$.EventSelectors') as event_selectors,
                JSON_EXTRACT(detail.Properties, '$.KMSKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
                JSON_EXTRACT(detail.Properties, '$.S3KeyPrefix') as s3_key_prefix,
                JSON_EXTRACT(detail.Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
                JSON_EXTRACT(detail.Properties, '$.TrailName') as trail_name,
                JSON_EXTRACT(detail.Properties, '$.IsOrganizationTrail') as is_organization_trail,
                JSON_EXTRACT(detail.Properties, '$.InsightSelectors') as insight_selectors,
                JSON_EXTRACT(detail.Properties, '$.CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
                JSON_EXTRACT(detail.Properties, '$.SnsTopicName') as sns_topic_name,
                JSON_EXTRACT(detail.Properties, '$.IsMultiRegionTrail') as is_multi_region_trail,
                JSON_EXTRACT(detail.Properties, '$.S3BucketName') as s3_bucket_name,
                JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
                JSON_EXTRACT(detail.Properties, '$.EnableLogFileValidation') as enable_log_file_validation,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.IsLogging') as is_logging
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Trail'
                AND detail.data__TypeName = 'AWS::CloudTrail::Trail'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IncludeGlobalServiceEvents') as include_global_service_events,
                  json_extract_path_text(Properties, 'EventSelectors') as event_selectors,
                  json_extract_path_text(Properties, 'KMSKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
                  json_extract_path_text(Properties, 'S3KeyPrefix') as s3_key_prefix,
                  json_extract_path_text(Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                  json_extract_path_text(Properties, 'TrailName') as trail_name,
                  json_extract_path_text(Properties, 'IsOrganizationTrail') as is_organization_trail,
                  json_extract_path_text(Properties, 'InsightSelectors') as insight_selectors,
                  json_extract_path_text(Properties, 'CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
                  json_extract_path_text(Properties, 'SnsTopicName') as sns_topic_name,
                  json_extract_path_text(Properties, 'IsMultiRegionTrail') as is_multi_region_trail,
                  json_extract_path_text(Properties, 'S3BucketName') as s3_bucket_name,
                  json_extract_path_text(Properties, 'SnsTopicArn') as sns_topic_arn,
                  json_extract_path_text(Properties, 'EnableLogFileValidation') as enable_log_file_validation,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'IsLogging') as is_logging
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CloudTrail::Trail'
                  AND data__Identifier = '<TrailName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IncludeGlobalServiceEvents') as include_global_service_events,
                    json_extract_path_text(detail.Properties, 'EventSelectors') as event_selectors,
                    json_extract_path_text(detail.Properties, 'KMSKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
                    json_extract_path_text(detail.Properties, 'S3KeyPrefix') as s3_key_prefix,
                    json_extract_path_text(detail.Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                    json_extract_path_text(detail.Properties, 'TrailName') as trail_name,
                    json_extract_path_text(detail.Properties, 'IsOrganizationTrail') as is_organization_trail,
                    json_extract_path_text(detail.Properties, 'InsightSelectors') as insight_selectors,
                    json_extract_path_text(detail.Properties, 'CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
                    json_extract_path_text(detail.Properties, 'SnsTopicName') as sns_topic_name,
                    json_extract_path_text(detail.Properties, 'IsMultiRegionTrail') as is_multi_region_trail,
                    json_extract_path_text(detail.Properties, 'S3BucketName') as s3_bucket_name,
                    json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                    json_extract_path_text(detail.Properties, 'EnableLogFileValidation') as enable_log_file_validation,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'IsLogging') as is_logging
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::CloudTrail::Trail'
                    AND detail.data__TypeName = 'AWS::CloudTrail::Trail'
                    AND listing.region = 'us-east-1'
    trails_list_only:
      name: trails_list_only
      id: aws.cloudtrail.trails_list_only
      x-cfn-schema-name: Trail
      x-cfn-type-name: AWS::CloudTrail::Trail
      x-identifiers:
        - TrailName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrailName') as trail_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Trail'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrailName') as trail_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CloudTrail::Trail'
                AND region = 'us-east-1'
    trail_tags:
      name: trail_tags
      id: aws.cloudtrail.trail_tags
      x-cfn-schema-name: Trail
      x-cfn-type-name: AWS::CloudTrail::Trail
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IncludeGlobalServiceEvents') as include_global_service_events,
              JSON_EXTRACT(detail.Properties, '$.EventSelectors') as event_selectors,
              JSON_EXTRACT(detail.Properties, '$.KMSKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
              JSON_EXTRACT(detail.Properties, '$.S3KeyPrefix') as s3_key_prefix,
              JSON_EXTRACT(detail.Properties, '$.AdvancedEventSelectors') as advanced_event_selectors,
              JSON_EXTRACT(detail.Properties, '$.TrailName') as trail_name,
              JSON_EXTRACT(detail.Properties, '$.IsOrganizationTrail') as is_organization_trail,
              JSON_EXTRACT(detail.Properties, '$.InsightSelectors') as insight_selectors,
              JSON_EXTRACT(detail.Properties, '$.CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
              JSON_EXTRACT(detail.Properties, '$.SnsTopicName') as sns_topic_name,
              JSON_EXTRACT(detail.Properties, '$.IsMultiRegionTrail') as is_multi_region_trail,
              JSON_EXTRACT(detail.Properties, '$.S3BucketName') as s3_bucket_name,
              JSON_EXTRACT(detail.Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(detail.Properties, '$.EnableLogFileValidation') as enable_log_file_validation,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.IsLogging') as is_logging
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::CloudTrail::Trail'
              AND detail.data__TypeName = 'AWS::CloudTrail::Trail'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IncludeGlobalServiceEvents') as include_global_service_events,
                json_extract_path_text(detail.Properties, 'EventSelectors') as event_selectors,
                json_extract_path_text(detail.Properties, 'KMSKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'CloudWatchLogsRoleArn') as cloud_watch_logs_role_arn,
                json_extract_path_text(detail.Properties, 'S3KeyPrefix') as s3_key_prefix,
                json_extract_path_text(detail.Properties, 'AdvancedEventSelectors') as advanced_event_selectors,
                json_extract_path_text(detail.Properties, 'TrailName') as trail_name,
                json_extract_path_text(detail.Properties, 'IsOrganizationTrail') as is_organization_trail,
                json_extract_path_text(detail.Properties, 'InsightSelectors') as insight_selectors,
                json_extract_path_text(detail.Properties, 'CloudWatchLogsLogGroupArn') as cloud_watch_logs_log_group_arn,
                json_extract_path_text(detail.Properties, 'SnsTopicName') as sns_topic_name,
                json_extract_path_text(detail.Properties, 'IsMultiRegionTrail') as is_multi_region_trail,
                json_extract_path_text(detail.Properties, 'S3BucketName') as s3_bucket_name,
                json_extract_path_text(detail.Properties, 'SnsTopicArn') as sns_topic_arn,
                json_extract_path_text(detail.Properties, 'EnableLogFileValidation') as enable_log_file_validation,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'IsLogging') as is_logging
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::CloudTrail::Trail'
                AND detail.data__TypeName = 'AWS::CloudTrail::Trail'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Dashboard&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDashboard
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventDataStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventDataStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventDataStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourcePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Trail&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrail
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
