openapi: 3.0.0
info:
  title: ServiceCatalog
  version: 1.0.0
paths: {}
components:
  schemas:
    AcceptedPortfolioShare:
      type: object
      properties:
        Id:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
      required:
        - PortfolioId
      x-stackql-resource-name: accepted_portfolio_share
      x-stackql-primaryIdentifier:
        - Id
    CodeStarParameters:
      type: object
      additionalProperties: false
      properties:
        ArtifactPath:
          type: string
        ConnectionArn:
          type: string
        Repository:
          type: string
        Branch:
          type: string
      required:
        - ArtifactPath
        - Repository
        - Branch
        - ConnectionArn
    ConnectionParameters:
      type: object
      additionalProperties: false
      properties:
        CodeStar:
          $ref: '#/components/schemas/CodeStarParameters'
    ProvisioningArtifactProperties:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        Description:
          type: string
        Info:
          type: object
        DisableTemplateValidation:
          type: boolean
        Name:
          type: string
      required:
        - Info
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    SourceConnection:
      type: object
      additionalProperties: false
      properties:
        ConnectionParameters:
          $ref: '#/components/schemas/ConnectionParameters'
        Type:
          type: string
      required:
        - Type
        - ConnectionParameters
    CloudFormationProduct:
      type: object
      properties:
        Owner:
          type: string
        Description:
          type: string
        ProductName:
          type: string
        SupportEmail:
          type: string
        ProductType:
          type: string
        ProvisioningArtifactNames:
          type: string
        Name:
          type: string
        ReplaceProvisioningArtifacts:
          type: boolean
        SupportDescription:
          type: string
        Distributor:
          type: string
        ProvisioningArtifactIds:
          type: string
        AcceptLanguage:
          type: string
        SupportUrl:
          type: string
        Id:
          type: string
        SourceConnection:
          $ref: '#/components/schemas/SourceConnection'
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        ProvisioningArtifactParameters:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/ProvisioningArtifactProperties'
      required:
        - Owner
        - Name
      x-stackql-resource-name: cloud_formation_product
      x-stackql-primaryIdentifier:
        - Id
    ProvisioningPreferences:
      type: object
      properties:
        StackSetAccounts:
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: ^[0-9]{12}$
        StackSetFailureToleranceCount:
          type: integer
          minimum: 0
        StackSetFailureTolerancePercentage:
          type: integer
          minimum: 0
          maximum: 100
        StackSetMaxConcurrencyCount:
          type: integer
          minimum: 1
        StackSetMaxConcurrencyPercentage:
          type: integer
          minimum: 1
          maximum: 100
        StackSetOperationType:
          type: string
          enum:
            - CREATE
            - UPDATE
            - DELETE
        StackSetRegions:
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: ^[a-z]{2}-([a-z]+-)+[1-9]
      additionalProperties: false
    ProvisioningParameter:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 1000
        Value:
          type: string
          maxLength: 4096
      additionalProperties: false
      required:
        - Key
        - Value
    OutputType:
      type: string
    CloudFormationProvisionedProduct:
      type: object
      properties:
        AcceptLanguage:
          type: string
          enum:
            - en
            - jp
            - zh
        NotificationArns:
          type: array
          uniqueItems: true
          items:
            type: string
          maxItems: 5
        PathId:
          type: string
          minLength: 1
          maxLength: 100
        PathName:
          type: string
          minLength: 1
          maxLength: 100
        ProductId:
          type: string
          minLength: 1
          maxLength: 100
        ProductName:
          type: string
          minLength: 1
          maxLength: 128
        ProvisionedProductName:
          type: string
          minLength: 1
          maxLength: 128
        ProvisioningArtifactId:
          type: string
          minLength: 1
          maxLength: 100
        ProvisioningArtifactName:
          type: string
        ProvisioningParameters:
          type: array
          items:
            $ref: '#/components/schemas/ProvisioningParameter'
        ProvisioningPreferences:
          $ref: '#/components/schemas/ProvisioningPreferences'
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        ProvisionedProductId:
          type: string
          minLength: 1
          maxLength: 50
        RecordId:
          type: string
          minLength: 1
          maxLength: 50
        CloudformationStackArn:
          type: string
          minLength: 1
          maxLength: 256
        Outputs:
          description: List of key-value pair outputs.
          type: object
          x-patternProperties:
            ^[A-Za-z0-9]{1,64}$:
              $ref: '#/components/schemas/OutputType'
          additionalProperties: false
          maxProperties: 100
      x-stackql-resource-name: cloud_formation_provisioned_product
      x-stackql-primaryIdentifier:
        - ProvisionedProductId
    LaunchNotificationConstraint:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        NotificationArns:
          type: array
          uniqueItems: false
          items:
            type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
      required:
        - NotificationArns
        - PortfolioId
        - ProductId
      x-stackql-resource-name: launch_notification_constraint
      x-stackql-primaryIdentifier:
        - Id
    LaunchRoleConstraint:
      type: object
      properties:
        Description:
          type: string
        LocalRoleName:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
        Id:
          type: string
        RoleArn:
          type: string
      required:
        - PortfolioId
        - ProductId
      x-stackql-resource-name: launch_role_constraint
      x-stackql-primaryIdentifier:
        - Id
    LaunchTemplateConstraint:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
        Rules:
          type: string
      required:
        - PortfolioId
        - ProductId
        - Rules
      x-stackql-resource-name: launch_template_constraint
      x-stackql-primaryIdentifier:
        - Id
    Portfolio:
      type: object
      properties:
        Id:
          type: string
        PortfolioName:
          type: string
        ProviderName:
          type: string
        Description:
          type: string
        DisplayName:
          type: string
        AcceptLanguage:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DisplayName
        - ProviderName
      x-stackql-resource-name: portfolio
      x-stackql-primaryIdentifier:
        - Id
    PortfolioPrincipalAssociation:
      type: object
      properties:
        Id:
          type: string
        PrincipalARN:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        PrincipalType:
          type: string
      required:
        - PortfolioId
        - PrincipalType
        - PrincipalARN
      x-stackql-resource-name: portfolio_principal_association
      x-stackql-primaryIdentifier:
        - Id
    PortfolioProductAssociation:
      type: object
      properties:
        Id:
          type: string
        SourcePortfolioId:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
      required:
        - PortfolioId
        - ProductId
      x-stackql-resource-name: portfolio_product_association
      x-stackql-primaryIdentifier:
        - Id
    PortfolioShare:
      type: object
      properties:
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        AccountId:
          type: string
        ShareTagOptions:
          type: boolean
        Id:
          type: string
      required:
        - AccountId
        - PortfolioId
      x-stackql-resource-name: portfolio_share
      x-stackql-primaryIdentifier:
        - Id
    ResourceUpdateConstraint:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        AcceptLanguage:
          type: string
        TagUpdateOnProvisionedProduct:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
      required:
        - TagUpdateOnProvisionedProduct
        - PortfolioId
        - ProductId
      x-stackql-resource-name: resource_update_constraint
      x-stackql-primaryIdentifier:
        - Id
    DefinitionParameter:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 1000
        Value:
          type: string
          maxLength: 4096
      additionalProperties: false
      required:
        - Key
        - Value
    ServiceAction:
      type: object
      properties:
        AcceptLanguage:
          type: string
          enum:
            - en
            - jp
            - zh
        Name:
          type: string
          minLength: 1
          maxLength: 256
        DefinitionType:
          type: string
          enum:
            - SSM_AUTOMATION
        Definition:
          type: array
          items:
            $ref: '#/components/schemas/DefinitionParameter'
        Description:
          type: string
          maxLength: 1024
        Id:
          type: string
          minLength: 1
          maxLength: 100
      required:
        - Name
        - DefinitionType
        - Definition
      x-stackql-resource-name: service_action
      x-stackql-primaryIdentifier:
        - Id
    ServiceActionAssociation:
      type: object
      properties:
        ProductId:
          type: string
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9_-]{1,99}\Z
          minLength: 1
          maxLength: 100
        ProvisioningArtifactId:
          type: string
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9_-]{1,99}\Z
          minLength: 1
          maxLength: 100
        ServiceActionId:
          type: string
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9_-]{1,99}\Z
          minLength: 1
          maxLength: 100
      required:
        - ProductId
        - ProvisioningArtifactId
        - ServiceActionId
      x-stackql-resource-name: service_action_association
      x-stackql-primaryIdentifier:
        - ProductId
        - ProvisioningArtifactId
        - ServiceActionId
    StackSetConstraint:
      type: object
      properties:
        Id:
          type: string
        Description:
          type: string
        StackInstanceControl:
          type: string
        AcceptLanguage:
          type: string
        PortfolioId:
          type: string
        ProductId:
          type: string
        RegionList:
          type: array
          uniqueItems: false
          items:
            type: string
        AdminRole:
          type: string
        AccountList:
          type: array
          uniqueItems: false
          items:
            type: string
        ExecutionRole:
          type: string
      required:
        - Description
        - StackInstanceControl
        - PortfolioId
        - ProductId
        - RegionList
        - AdminRole
        - AccountList
        - ExecutionRole
      x-stackql-resource-name: stack_set_constraint
      x-stackql-primaryIdentifier:
        - Id
    TagOption:
      type: object
      properties:
        Id:
          type: string
        Active:
          type: boolean
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
      x-stackql-resource-name: tag_option
      x-stackql-primaryIdentifier:
        - Id
    TagOptionAssociation:
      type: object
      properties:
        Id:
          type: string
        TagOptionId:
          type: string
        ResourceId:
          type: string
      required:
        - TagOptionId
        - ResourceId
      x-stackql-resource-name: tag_option_association
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    accepted_portfolio_shares:
      name: accepted_portfolio_shares
      id: aws.servicecatalog.accepted_portfolio_shares
      x-cfn-schema-name: AcceptedPortfolioShare
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::AcceptedPortfolioShare'
    accepted_portfolio_share:
      name: accepted_portfolio_share
      id: aws.servicecatalog.accepted_portfolio_share
      x-cfn-schema-name: AcceptedPortfolioShare
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::AcceptedPortfolioShare'
    cloud_formation_products:
      name: cloud_formation_products
      id: aws.servicecatalog.cloud_formation_products
      x-cfn-schema-name: CloudFormationProduct
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::CloudFormationProduct'
    cloud_formation_product:
      name: cloud_formation_product
      id: aws.servicecatalog.cloud_formation_product
      x-cfn-schema-name: CloudFormationProduct
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Owner') as owner,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ProductName') as product_name,
              JSON_EXTRACT(Properties, '$.SupportEmail') as support_email,
              JSON_EXTRACT(Properties, '$.ProductType') as product_type,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactNames') as provisioning_artifact_names,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ReplaceProvisioningArtifacts') as replace_provisioning_artifacts,
              JSON_EXTRACT(Properties, '$.SupportDescription') as support_description,
              JSON_EXTRACT(Properties, '$.Distributor') as distributor,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactIds') as provisioning_artifact_ids,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.SupportUrl') as support_url,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SourceConnection.ConnectionParameters') as source_connection_connection_parameters,
              JSON_EXTRACT(Properties, '$.SourceConnection.Type') as source_connection_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactParameters') as provisioning_artifact_parameters
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::CloudFormationProduct'
    cloud_formation_provisioned_products:
      name: cloud_formation_provisioned_products
      id: aws.servicecatalog.cloud_formation_provisioned_products
      x-cfn-schema-name: CloudFormationProvisionedProduct
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProvisionedProductId') as provisioned_product_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::CloudFormationProvisionedProduct'
    cloud_formation_provisioned_product:
      name: cloud_formation_provisioned_product
      id: aws.servicecatalog.cloud_formation_provisioned_product
      x-cfn-schema-name: CloudFormationProvisionedProduct
      x-type: get
      x-identifiers:
        - ProvisionedProductId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.NotificationArns') as notification_arns,
              JSON_EXTRACT(Properties, '$.PathId') as path_id,
              JSON_EXTRACT(Properties, '$.PathName') as path_name,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.ProductName') as product_name,
              JSON_EXTRACT(Properties, '$.ProvisionedProductName') as provisioned_product_name,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactId') as provisioning_artifact_id,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactName') as provisioning_artifact_name,
              JSON_EXTRACT(Properties, '$.ProvisioningParameters') as provisioning_parameters,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetAccounts') as provisioning_preferences_stack_set_accounts,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetFailureToleranceCount') as provisioning_preferences_stack_set_failure_tolerance_count,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetFailureTolerancePercentage') as provisioning_preferences_stack_set_failure_tolerance_percentage,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetMaxConcurrencyCount') as provisioning_preferences_stack_set_max_concurrency_count,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetMaxConcurrencyPercentage') as provisioning_preferences_stack_set_max_concurrency_percentage,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetOperationType') as provisioning_preferences_stack_set_operation_type,
              JSON_EXTRACT(Properties, '$.ProvisioningPreferences.StackSetRegions') as provisioning_preferences_stack_set_regions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ProvisionedProductId') as provisioned_product_id,
              JSON_EXTRACT(Properties, '$.RecordId') as record_id,
              JSON_EXTRACT(Properties, '$.CloudformationStackArn') as cloudformation_stack_arn,
              JSON_EXTRACT(Properties, '$.Outputs') as outputs
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::CloudFormationProvisionedProduct'
    launch_notification_constraints:
      name: launch_notification_constraints
      id: aws.servicecatalog.launch_notification_constraints
      x-cfn-schema-name: LaunchNotificationConstraint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchNotificationConstraint'
    launch_notification_constraint:
      name: launch_notification_constraint
      id: aws.servicecatalog.launch_notification_constraint
      x-cfn-schema-name: LaunchNotificationConstraint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.NotificationArns') as notification_arns,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchNotificationConstraint'
    launch_role_constraints:
      name: launch_role_constraints
      id: aws.servicecatalog.launch_role_constraints
      x-cfn-schema-name: LaunchRoleConstraint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchRoleConstraint'
    launch_role_constraint:
      name: launch_role_constraint
      id: aws.servicecatalog.launch_role_constraint
      x-cfn-schema-name: LaunchRoleConstraint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LocalRoleName') as local_role_name,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchRoleConstraint'
    launch_template_constraints:
      name: launch_template_constraints
      id: aws.servicecatalog.launch_template_constraints
      x-cfn-schema-name: LaunchTemplateConstraint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchTemplateConstraint'
    launch_template_constraint:
      name: launch_template_constraint
      id: aws.servicecatalog.launch_template_constraint
      x-cfn-schema-name: LaunchTemplateConstraint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.Rules') as rules
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::LaunchTemplateConstraint'
    portfolios:
      name: portfolios
      id: aws.servicecatalog.portfolios
      x-cfn-schema-name: Portfolio
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::Portfolio'
    portfolio:
      name: portfolio
      id: aws.servicecatalog.portfolio
      x-cfn-schema-name: Portfolio
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PortfolioName') as portfolio_name,
              JSON_EXTRACT(Properties, '$.ProviderName') as provider_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::Portfolio'
    portfolio_principal_associations:
      name: portfolio_principal_associations
      id: aws.servicecatalog.portfolio_principal_associations
      x-cfn-schema-name: PortfolioPrincipalAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    portfolio_principal_association:
      name: portfolio_principal_association
      id: aws.servicecatalog.portfolio_principal_association
      x-cfn-schema-name: PortfolioPrincipalAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PrincipalARN') as principal_ar_n,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.PrincipalType') as principal_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    portfolio_product_associations:
      name: portfolio_product_associations
      id: aws.servicecatalog.portfolio_product_associations
      x-cfn-schema-name: PortfolioProductAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioProductAssociation'
    portfolio_product_association:
      name: portfolio_product_association
      id: aws.servicecatalog.portfolio_product_association
      x-cfn-schema-name: PortfolioProductAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SourcePortfolioId') as source_portfolio_id,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioProductAssociation'
    portfolio_shares:
      name: portfolio_shares
      id: aws.servicecatalog.portfolio_shares
      x-cfn-schema-name: PortfolioShare
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioShare'
    portfolio_share:
      name: portfolio_share
      id: aws.servicecatalog.portfolio_share
      x-cfn-schema-name: PortfolioShare
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.ShareTagOptions') as share_tag_options,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::PortfolioShare'
    resource_update_constraints:
      name: resource_update_constraints
      id: aws.servicecatalog.resource_update_constraints
      x-cfn-schema-name: ResourceUpdateConstraint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::ResourceUpdateConstraint'
    resource_update_constraint:
      name: resource_update_constraint
      id: aws.servicecatalog.resource_update_constraint
      x-cfn-schema-name: ResourceUpdateConstraint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.TagUpdateOnProvisionedProduct') as tag_update_on_provisioned_product,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::ResourceUpdateConstraint'
    service_actions:
      name: service_actions
      id: aws.servicecatalog.service_actions
      x-cfn-schema-name: ServiceAction
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::ServiceAction'
    service_action:
      name: service_action
      id: aws.servicecatalog.service_action
      x-cfn-schema-name: ServiceAction
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DefinitionType') as definition_type,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::ServiceAction'
    service_action_associations:
      name: service_action_associations
      id: aws.servicecatalog.service_action_associations
      x-cfn-schema-name: ServiceActionAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactId') as provisioning_artifact_id,
              JSON_EXTRACT(Properties, '$.ServiceActionId') as service_action_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::ServiceActionAssociation'
    service_action_association:
      name: service_action_association
      id: aws.servicecatalog.service_action_association
      x-cfn-schema-name: ServiceActionAssociation
      x-type: get
      x-identifiers:
        - ProductId
        - ProvisioningArtifactId
        - ServiceActionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.ProvisioningArtifactId') as provisioning_artifact_id,
              JSON_EXTRACT(Properties, '$.ServiceActionId') as service_action_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::ServiceActionAssociation'
    stack_set_constraints:
      name: stack_set_constraints
      id: aws.servicecatalog.stack_set_constraints
      x-cfn-schema-name: StackSetConstraint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::StackSetConstraint'
    stack_set_constraint:
      name: stack_set_constraint
      id: aws.servicecatalog.stack_set_constraint
      x-cfn-schema-name: StackSetConstraint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StackInstanceControl') as stack_instance_control,
              JSON_EXTRACT(Properties, '$.AcceptLanguage') as accept_language,
              JSON_EXTRACT(Properties, '$.PortfolioId') as portfolio_id,
              JSON_EXTRACT(Properties, '$.ProductId') as product_id,
              JSON_EXTRACT(Properties, '$.RegionList') as region_list,
              JSON_EXTRACT(Properties, '$.AdminRole') as admin_role,
              JSON_EXTRACT(Properties, '$.AccountList') as account_list,
              JSON_EXTRACT(Properties, '$.ExecutionRole') as execution_role
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::StackSetConstraint'
    tag_options:
      name: tag_options
      id: aws.servicecatalog.tag_options
      x-cfn-schema-name: TagOption
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::TagOption'
    tag_option:
      name: tag_option
      id: aws.servicecatalog.tag_option
      x-cfn-schema-name: TagOption
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Active') as active,
              JSON_EXTRACT(Properties, '$.Value') as value,
              JSON_EXTRACT(Properties, '$.Key') as key
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::TagOption'
    tag_option_associations:
      name: tag_option_associations
      id: aws.servicecatalog.tag_option_associations
      x-cfn-schema-name: TagOptionAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ServiceCatalog::TagOptionAssociation'
    tag_option_association:
      name: tag_option_association
      id: aws.servicecatalog.tag_option_association
      x-cfn-schema-name: TagOptionAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TagOptionId') as tag_option_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ServiceCatalog::TagOptionAssociation'
