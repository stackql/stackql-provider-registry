openapi: 3.0.0
info:
  title: EC2
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ArchitectureValues:
      type: string
      enum:
        - i386
        - x86_64
        - arm64
        - x86_64_mac
    Blob:
      type: string
    Boolean:
      type: boolean
    BundleInstanceRequest:
      type: object
      required:
        - InstanceId
        - Storage
      title: BundleInstanceRequest
      properties:
        undefined:
          allOf:
            - $ref: '#/components/schemas/Storage'
            - description: The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      description: Contains the parameters for BundleInstance.
    BundleInstanceResult:
      type: object
      properties:
        bundleInstanceTask:
          allOf:
            - $ref: '#/components/schemas/BundleTask'
            - description: Information about the bundle task.
      description: Contains the output of BundleInstance.
    BundleTask:
      type: object
      properties:
        bundleId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the bundle task.
        error:
          allOf:
            - $ref: '#/components/schemas/BundleTaskError'
            - description: If the task fails, a description of the error.
        instanceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the instance associated with this bundle task.
        progress:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The level of task completion, as a percent (for example, 20%).
        startTime:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - description: The time this task started.
        state:
          allOf:
            - $ref: '#/components/schemas/BundleTaskState'
            - description: The state of the task.
        storage:
          allOf:
            - $ref: '#/components/schemas/Storage'
            - description: The Amazon S3 storage locations.
        updateTime:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - description: The time of the most recent update for the task.
      description: Describes a bundle task.
    BundleTaskError:
      type: object
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error code.
        message:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error message.
      description: Describes an error for <a>BundleInstance</a>.
    BundleTaskState:
      type: string
      enum:
        - pending
        - waiting-for-shutdown
        - bundling
        - storing
        - cancelling
        - complete
        - failed
    CarrierGatewayId:
      type: string
    ConversionTask:
      type: object
      properties:
        conversionTaskId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the conversion task.
        expirationTime:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        importInstance:
          allOf:
            - $ref: '#/components/schemas/ImportInstanceTaskDetails'
            - description: If the task is for importing an instance, this contains information about the import instance task.
        importVolume:
          allOf:
            - $ref: '#/components/schemas/ImportVolumeTaskDetails'
            - description: If the task is for importing a volume, this contains information about the import volume task.
        state:
          allOf:
            - $ref: '#/components/schemas/ConversionTaskState'
            - description: The state of the conversion task.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status message related to the conversion task.
        tagSet:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Any tags assigned to the task.
      description: Describes a conversion task.
    ConversionTaskState:
      type: string
      enum:
        - active
        - cancelling
        - cancelled
        - completed
    CoreNetworkArn:
      type: string
    DateTime:
      type: string
      format: date-time
    DescribeRouteTablesMaxResults:
      type: integer
      minimum: 5
      maximum: 100
    DescribeRouteTablesRequest:
      type: object
      title: DescribeRouteTablesRequest
      properties:
        Filter:
          allOf:
            - $ref: '#/components/schemas/FilterList'
            - description: >-
                <p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the
                VPC (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p>
                <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the Amazon Web Service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway
                specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when
                the route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the
                VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value
                <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
        RouteTableId:
          allOf:
            - $ref: '#/components/schemas/DescribeRouteTablesMaxResults'
            - description: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    DescribeRouteTablesResult:
      type: object
      example:
        RouteTables:
          - Associations:
              - Main: true
                RouteTableAssociationId: rtbassoc-d8ccddba
                RouteTableId: rtb-1f382e7d
            PropagatingVgws: []
            RouteTableId: rtb-1f382e7d
            Routes:
              - DestinationCidrBlock: 10.0.0.0/16
                GatewayId: local
                State: active
            Tags: []
            VpcId: vpc-a01106c2
      properties:
        routeTableSet:
          allOf:
            - $ref: '#/components/schemas/RouteTableList'
            - description: Information about one or more route tables.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
      description: Contains the output of DescribeRouteTables.
    DiskImage:
      type: object
      properties:
        undefined:
          allOf:
            - $ref: '#/components/schemas/VolumeDetail'
            - description: Information about the volume.
      description: Describes a disk image.
    DiskImageDescription:
      type: object
      properties:
        checksum:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The checksum computed for the disk image.
        format:
          allOf:
            - $ref: '#/components/schemas/DiskImageFormat'
            - description: The disk image format.
        importManifestUrl:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: >-
                <p>A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a
                href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
        size:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The size of the disk image, in GiB.
      description: Describes a disk image.
    DiskImageFormat:
      type: string
      enum:
        - VMDK
        - RAW
        - VHD
    DiskImageList:
      type: array
      items:
        $ref: '#/components/schemas/DiskImage'
    DiskImageVolumeDescription:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The volume identifier.
        size:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The size of the volume, in GiB.
      description: Describes a disk image volume.
    Filter:
      type: object
      properties:
        undefined:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the filter. Filter names are case-sensitive.
        Value:
          allOf:
            - $ref: '#/components/schemas/ValueStringList'
            - description: The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.
      description: <p>A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.</p> <p>If you specify multiple filters, the filters are joined with an <code>AND</code>, and the request returns only results that match all of the specified filters.</p>
    FilterList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Filter'
          - xml:
              name: Filter
    ImportInstanceLaunchSpecification:
      type: object
      properties:
        additionalInfo:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: Reserved.
        architecture:
          allOf:
            - $ref: '#/components/schemas/ArchitectureValues'
            - description: The architecture of the instance.
        GroupId:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdStringList'
            - description: The security group IDs.
        GroupName:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupStringList'
            - description: The security group names.
        instanceInitiatedShutdownBehavior:
          allOf:
            - $ref: '#/components/schemas/ShutdownBehavior'
            - description: Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        instanceType:
          allOf:
            - $ref: '#/components/schemas/InstanceType'
            - description: The instance type. For more information about the instance types that you can import, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types">Instance Types</a> in the VM Import/Export User Guide.
        monitoring:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Indicates whether monitoring is enabled.
        placement:
          allOf:
            - $ref: '#/components/schemas/Placement'
            - description: The placement information for the instance.
        privateIpAddress:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: '[EC2-VPC] An available IP address from the IP address range of the subnet.'
        subnetId:
          allOf:
            - $ref: '#/components/schemas/SubnetId'
            - description: '[EC2-VPC] The ID of the subnet in which to launch the instance.'
        userData:
          allOf:
            - $ref: '#/components/schemas/UserData'
            - description: The Base64-encoded user data to make available to the instance.
      description: Describes the launch specification for VM import.
    ImportInstanceRequest:
      type: object
      required:
        - Platform
      title: ImportInstanceRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A description for the instance being imported.
        diskImage:
          allOf:
            - $ref: '#/components/schemas/DiskImageList'
            - description: The disk image.
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
        launchSpecification:
          allOf:
            - $ref: '#/components/schemas/ImportInstanceLaunchSpecification'
            - description: The launch specification.
        platform:
          allOf:
            - $ref: '#/components/schemas/PlatformValues'
            - description: The instance operating system.
    ImportInstanceResult:
      type: object
      properties:
        conversionTask:
          allOf:
            - $ref: '#/components/schemas/ConversionTask'
            - description: Information about the conversion task.
    ImportInstanceTaskDetails:
      type: object
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A description of the task.
        instanceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the instance.
        platform:
          allOf:
            - $ref: '#/components/schemas/PlatformValues'
            - description: The instance operating system.
        volumes:
          allOf:
            - $ref: '#/components/schemas/ImportInstanceVolumeDetailSet'
            - description: The volumes.
      description: Describes an import instance task.
    ImportInstanceVolumeDetailItem:
      type: object
      properties:
        availabilityZone:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Availability Zone where the resulting instance will reside.
        bytesConverted:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The number of bytes converted so far.
        description:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A description of the task.
        image:
          allOf:
            - $ref: '#/components/schemas/DiskImageDescription'
            - description: The image.
        status:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status of the import of this particular disk image.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status information or errors related to the disk image.
        volume:
          allOf:
            - $ref: '#/components/schemas/DiskImageVolumeDescription'
            - description: The volume.
      description: Describes an import volume task.
    ImportInstanceVolumeDetailSet:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/ImportInstanceVolumeDetailItem'
          - xml:
              name: item
    ImportVolumeTaskDetails:
      type: object
      properties:
        availabilityZone:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Availability Zone where the resulting volume will reside.
        bytesConverted:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The number of bytes converted so far.
        description:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The description you provided when starting the import volume task.
        image:
          allOf:
            - $ref: '#/components/schemas/DiskImageDescription'
            - description: The image.
        volume:
          allOf:
            - $ref: '#/components/schemas/DiskImageVolumeDescription'
            - description: The volume.
      description: Describes an import volume task.
    InstanceId:
      description: The ID of the instance to which the volume attaches
      type: string
    InstanceIdStringList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/InstanceId'
          - xml:
              name: InstanceId
    InstanceMonitoring:
      type: object
      properties:
        instanceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the instance.
        monitoring:
          allOf:
            - $ref: '#/components/schemas/Monitoring'
            - description: The monitoring for the instance.
      description: Describes the monitoring of an instance.
    InstanceMonitoringList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/InstanceMonitoring'
          - xml:
              name: item
    InstanceState:
      type: object
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: >-
                <p>The state of the instance as a 16-bit unsigned integer. </p> <p>The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored.</p> <p>The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255. </p> <p>The valid values for instance-state-code will all be in the range of the low byte and they are:</p> <ul> <li>
                <p> <code>0</code> : <code>pending</code> </p> </li> <li> <p> <code>16</code> : <code>running</code> </p> </li> <li> <p> <code>32</code> : <code>shutting-down</code> </p> </li> <li> <p> <code>48</code> : <code>terminated</code> </p> </li> <li> <p> <code>64</code> : <code>stopping</code> </p> </li> <li> <p> <code>80</code> : <code>stopped</code> </p> </li> </ul> <p>You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.</p>
        name:
          allOf:
            - $ref: '#/components/schemas/InstanceStateName'
            - description: The current state of the instance.
      description: Describes the current state of an instance.
    InstanceStateChange:
      type: object
      properties:
        currentState:
          allOf:
            - $ref: '#/components/schemas/InstanceState'
            - description: The current state of the instance.
        instanceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the instance.
        previousState:
          allOf:
            - $ref: '#/components/schemas/InstanceState'
            - description: The previous state of the instance.
      description: Describes an instance state change.
    InstanceStateChangeList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/InstanceStateChange'
          - xml:
              name: item
    InstanceStateName:
      type: string
      enum:
        - pending
        - running
        - shutting-down
        - terminated
        - stopping
        - stopped
    InstanceType:
      type: string
      enum:
        - a1.medium
        - a1.large
        - a1.xlarge
        - a1.2xlarge
        - a1.4xlarge
        - a1.metal
        - c1.medium
        - c1.xlarge
        - c3.large
        - c3.xlarge
        - c3.2xlarge
        - c3.4xlarge
        - c3.8xlarge
        - c4.large
        - c4.xlarge
        - c4.2xlarge
        - c4.4xlarge
        - c4.8xlarge
        - c5.large
        - c5.xlarge
        - c5.2xlarge
        - c5.4xlarge
        - c5.9xlarge
        - c5.12xlarge
        - c5.18xlarge
        - c5.24xlarge
        - c5.metal
        - c5a.large
        - c5a.xlarge
        - c5a.2xlarge
        - c5a.4xlarge
        - c5a.8xlarge
        - c5a.12xlarge
        - c5a.16xlarge
        - c5a.24xlarge
        - c5ad.large
        - c5ad.xlarge
        - c5ad.2xlarge
        - c5ad.4xlarge
        - c5ad.8xlarge
        - c5ad.12xlarge
        - c5ad.16xlarge
        - c5ad.24xlarge
        - c5d.large
        - c5d.xlarge
        - c5d.2xlarge
        - c5d.4xlarge
        - c5d.9xlarge
        - c5d.12xlarge
        - c5d.18xlarge
        - c5d.24xlarge
        - c5d.metal
        - c5n.large
        - c5n.xlarge
        - c5n.2xlarge
        - c5n.4xlarge
        - c5n.9xlarge
        - c5n.18xlarge
        - c5n.metal
        - c6g.medium
        - c6g.large
        - c6g.xlarge
        - c6g.2xlarge
        - c6g.4xlarge
        - c6g.8xlarge
        - c6g.12xlarge
        - c6g.16xlarge
        - c6g.metal
        - c6gd.medium
        - c6gd.large
        - c6gd.xlarge
        - c6gd.2xlarge
        - c6gd.4xlarge
        - c6gd.8xlarge
        - c6gd.12xlarge
        - c6gd.16xlarge
        - c6gd.metal
        - c6gn.medium
        - c6gn.large
        - c6gn.xlarge
        - c6gn.2xlarge
        - c6gn.4xlarge
        - c6gn.8xlarge
        - c6gn.12xlarge
        - c6gn.16xlarge
        - c6i.large
        - c6i.xlarge
        - c6i.2xlarge
        - c6i.4xlarge
        - c6i.8xlarge
        - c6i.12xlarge
        - c6i.16xlarge
        - c6i.24xlarge
        - c6i.32xlarge
        - c6i.metal
        - cc1.4xlarge
        - cc2.8xlarge
        - cg1.4xlarge
        - cr1.8xlarge
        - d2.xlarge
        - d2.2xlarge
        - d2.4xlarge
        - d2.8xlarge
        - d3.xlarge
        - d3.2xlarge
        - d3.4xlarge
        - d3.8xlarge
        - d3en.xlarge
        - d3en.2xlarge
        - d3en.4xlarge
        - d3en.6xlarge
        - d3en.8xlarge
        - d3en.12xlarge
        - dl1.24xlarge
        - f1.2xlarge
        - f1.4xlarge
        - f1.16xlarge
        - g2.2xlarge
        - g2.8xlarge
        - g3.4xlarge
        - g3.8xlarge
        - g3.16xlarge
        - g3s.xlarge
        - g4ad.xlarge
        - g4ad.2xlarge
        - g4ad.4xlarge
        - g4ad.8xlarge
        - g4ad.16xlarge
        - g4dn.xlarge
        - g4dn.2xlarge
        - g4dn.4xlarge
        - g4dn.8xlarge
        - g4dn.12xlarge
        - g4dn.16xlarge
        - g4dn.metal
        - g5.xlarge
        - g5.2xlarge
        - g5.4xlarge
        - g5.8xlarge
        - g5.12xlarge
        - g5.16xlarge
        - g5.24xlarge
        - g5.48xlarge
        - g5g.xlarge
        - g5g.2xlarge
        - g5g.4xlarge
        - g5g.8xlarge
        - g5g.16xlarge
        - g5g.metal
        - hi1.4xlarge
        - hpc6a.48xlarge
        - hs1.8xlarge
        - h1.2xlarge
        - h1.4xlarge
        - h1.8xlarge
        - h1.16xlarge
        - i2.xlarge
        - i2.2xlarge
        - i2.4xlarge
        - i2.8xlarge
        - i3.large
        - i3.xlarge
        - i3.2xlarge
        - i3.4xlarge
        - i3.8xlarge
        - i3.16xlarge
        - i3.metal
        - i3en.large
        - i3en.xlarge
        - i3en.2xlarge
        - i3en.3xlarge
        - i3en.6xlarge
        - i3en.12xlarge
        - i3en.24xlarge
        - i3en.metal
        - im4gn.large
        - im4gn.xlarge
        - im4gn.2xlarge
        - im4gn.4xlarge
        - im4gn.8xlarge
        - im4gn.16xlarge
        - inf1.xlarge
        - inf1.2xlarge
        - inf1.6xlarge
        - inf1.24xlarge
        - is4gen.medium
        - is4gen.large
        - is4gen.xlarge
        - is4gen.2xlarge
        - is4gen.4xlarge
        - is4gen.8xlarge
        - m1.small
        - m1.medium
        - m1.large
        - m1.xlarge
        - m2.xlarge
        - m2.2xlarge
        - m2.4xlarge
        - m3.medium
        - m3.large
        - m3.xlarge
        - m3.2xlarge
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
        - m4.10xlarge
        - m4.16xlarge
        - m5.large
        - m5.xlarge
        - m5.2xlarge
        - m5.4xlarge
        - m5.8xlarge
        - m5.12xlarge
        - m5.16xlarge
        - m5.24xlarge
        - m5.metal
        - m5a.large
        - m5a.xlarge
        - m5a.2xlarge
        - m5a.4xlarge
        - m5a.8xlarge
        - m5a.12xlarge
        - m5a.16xlarge
        - m5a.24xlarge
        - m5ad.large
        - m5ad.xlarge
        - m5ad.2xlarge
        - m5ad.4xlarge
        - m5ad.8xlarge
        - m5ad.12xlarge
        - m5ad.16xlarge
        - m5ad.24xlarge
        - m5d.large
        - m5d.xlarge
        - m5d.2xlarge
        - m5d.4xlarge
        - m5d.8xlarge
        - m5d.12xlarge
        - m5d.16xlarge
        - m5d.24xlarge
        - m5d.metal
        - m5dn.large
        - m5dn.xlarge
        - m5dn.2xlarge
        - m5dn.4xlarge
        - m5dn.8xlarge
        - m5dn.12xlarge
        - m5dn.16xlarge
        - m5dn.24xlarge
        - m5dn.metal
        - m5n.large
        - m5n.xlarge
        - m5n.2xlarge
        - m5n.4xlarge
        - m5n.8xlarge
        - m5n.12xlarge
        - m5n.16xlarge
        - m5n.24xlarge
        - m5n.metal
        - m5zn.large
        - m5zn.xlarge
        - m5zn.2xlarge
        - m5zn.3xlarge
        - m5zn.6xlarge
        - m5zn.12xlarge
        - m5zn.metal
        - m6a.large
        - m6a.xlarge
        - m6a.2xlarge
        - m6a.4xlarge
        - m6a.8xlarge
        - m6a.12xlarge
        - m6a.16xlarge
        - m6a.24xlarge
        - m6a.32xlarge
        - m6a.48xlarge
        - m6g.metal
        - m6g.medium
        - m6g.large
        - m6g.xlarge
        - m6g.2xlarge
        - m6g.4xlarge
        - m6g.8xlarge
        - m6g.12xlarge
        - m6g.16xlarge
        - m6gd.metal
        - m6gd.medium
        - m6gd.large
        - m6gd.xlarge
        - m6gd.2xlarge
        - m6gd.4xlarge
        - m6gd.8xlarge
        - m6gd.12xlarge
        - m6gd.16xlarge
        - m6i.large
        - m6i.xlarge
        - m6i.2xlarge
        - m6i.4xlarge
        - m6i.8xlarge
        - m6i.12xlarge
        - m6i.16xlarge
        - m6i.24xlarge
        - m6i.32xlarge
        - m6i.metal
        - mac1.metal
        - p2.xlarge
        - p2.8xlarge
        - p2.16xlarge
        - p3.2xlarge
        - p3.8xlarge
        - p3.16xlarge
        - p3dn.24xlarge
        - p4d.24xlarge
        - r3.large
        - r3.xlarge
        - r3.2xlarge
        - r3.4xlarge
        - r3.8xlarge
        - r4.large
        - r4.xlarge
        - r4.2xlarge
        - r4.4xlarge
        - r4.8xlarge
        - r4.16xlarge
        - r5.large
        - r5.xlarge
        - r5.2xlarge
        - r5.4xlarge
        - r5.8xlarge
        - r5.12xlarge
        - r5.16xlarge
        - r5.24xlarge
        - r5.metal
        - r5a.large
        - r5a.xlarge
        - r5a.2xlarge
        - r5a.4xlarge
        - r5a.8xlarge
        - r5a.12xlarge
        - r5a.16xlarge
        - r5a.24xlarge
        - r5ad.large
        - r5ad.xlarge
        - r5ad.2xlarge
        - r5ad.4xlarge
        - r5ad.8xlarge
        - r5ad.12xlarge
        - r5ad.16xlarge
        - r5ad.24xlarge
        - r5b.large
        - r5b.xlarge
        - r5b.2xlarge
        - r5b.4xlarge
        - r5b.8xlarge
        - r5b.12xlarge
        - r5b.16xlarge
        - r5b.24xlarge
        - r5b.metal
        - r5d.large
        - r5d.xlarge
        - r5d.2xlarge
        - r5d.4xlarge
        - r5d.8xlarge
        - r5d.12xlarge
        - r5d.16xlarge
        - r5d.24xlarge
        - r5d.metal
        - r5dn.large
        - r5dn.xlarge
        - r5dn.2xlarge
        - r5dn.4xlarge
        - r5dn.8xlarge
        - r5dn.12xlarge
        - r5dn.16xlarge
        - r5dn.24xlarge
        - r5dn.metal
        - r5n.large
        - r5n.xlarge
        - r5n.2xlarge
        - r5n.4xlarge
        - r5n.8xlarge
        - r5n.12xlarge
        - r5n.16xlarge
        - r5n.24xlarge
        - r5n.metal
        - r6g.medium
        - r6g.large
        - r6g.xlarge
        - r6g.2xlarge
        - r6g.4xlarge
        - r6g.8xlarge
        - r6g.12xlarge
        - r6g.16xlarge
        - r6g.metal
        - r6gd.medium
        - r6gd.large
        - r6gd.xlarge
        - r6gd.2xlarge
        - r6gd.4xlarge
        - r6gd.8xlarge
        - r6gd.12xlarge
        - r6gd.16xlarge
        - r6gd.metal
        - r6i.large
        - r6i.xlarge
        - r6i.2xlarge
        - r6i.4xlarge
        - r6i.8xlarge
        - r6i.12xlarge
        - r6i.16xlarge
        - r6i.24xlarge
        - r6i.32xlarge
        - r6i.metal
        - t1.micro
        - t2.nano
        - t2.micro
        - t2.small
        - t2.medium
        - t2.large
        - t2.xlarge
        - t2.2xlarge
        - t3.nano
        - t3.micro
        - t3.small
        - t3.medium
        - t3.large
        - t3.xlarge
        - t3.2xlarge
        - t3a.nano
        - t3a.micro
        - t3a.small
        - t3a.medium
        - t3a.large
        - t3a.xlarge
        - t3a.2xlarge
        - t4g.nano
        - t4g.micro
        - t4g.small
        - t4g.medium
        - t4g.large
        - t4g.xlarge
        - t4g.2xlarge
        - u-6tb1.56xlarge
        - u-6tb1.112xlarge
        - u-9tb1.112xlarge
        - u-12tb1.112xlarge
        - u-6tb1.metal
        - u-9tb1.metal
        - u-12tb1.metal
        - u-18tb1.metal
        - u-24tb1.metal
        - vt1.3xlarge
        - vt1.6xlarge
        - vt1.24xlarge
        - x1.16xlarge
        - x1.32xlarge
        - x1e.xlarge
        - x1e.2xlarge
        - x1e.4xlarge
        - x1e.8xlarge
        - x1e.16xlarge
        - x1e.32xlarge
        - x2iezn.2xlarge
        - x2iezn.4xlarge
        - x2iezn.6xlarge
        - x2iezn.8xlarge
        - x2iezn.12xlarge
        - x2iezn.metal
        - x2gd.medium
        - x2gd.large
        - x2gd.xlarge
        - x2gd.2xlarge
        - x2gd.4xlarge
        - x2gd.8xlarge
        - x2gd.12xlarge
        - x2gd.16xlarge
        - x2gd.metal
        - z1d.large
        - z1d.xlarge
        - z1d.2xlarge
        - z1d.3xlarge
        - z1d.6xlarge
        - z1d.12xlarge
        - z1d.metal
        - x2idn.16xlarge
        - x2idn.24xlarge
        - x2idn.32xlarge
        - x2iedn.xlarge
        - x2iedn.2xlarge
        - x2iedn.4xlarge
        - x2iedn.8xlarge
        - x2iedn.16xlarge
        - x2iedn.24xlarge
        - x2iedn.32xlarge
        - c6a.large
        - c6a.xlarge
        - c6a.2xlarge
        - c6a.4xlarge
        - c6a.8xlarge
        - c6a.12xlarge
        - c6a.16xlarge
        - c6a.24xlarge
        - c6a.32xlarge
        - c6a.48xlarge
        - c6a.metal
        - m6a.metal
        - i4i.large
        - i4i.xlarge
        - i4i.2xlarge
        - i4i.4xlarge
        - i4i.8xlarge
        - i4i.16xlarge
        - i4i.32xlarge
    Integer:
      type: integer
    Long:
      type: integer
    MonitorInstancesRequest:
      type: object
      required:
        - InstanceIds
      title: MonitorInstancesRequest
      properties:
        InstanceId:
          allOf:
            - $ref: '#/components/schemas/InstanceIdStringList'
            - description: The IDs of the instances.
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    MonitorInstancesResult:
      type: object
      properties:
        instancesSet:
          allOf:
            - $ref: '#/components/schemas/InstanceMonitoringList'
            - description: The monitoring information.
    Monitoring:
      description: |-
        Specifies whether detailed monitoring is enabled for an instance. For more information about detailed monitoring, see [Enable or turn off detailed monitoring for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html) in the *User Guide*.
          ``Monitoring`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: Specify ``true`` to enable detailed monitoring. Otherwise, basic monitoring is enabled.
          type: boolean
    MonitoringState:
      type: string
      enum:
        - disabled
        - disabling
        - enabled
        - pending
    Placement:
      description: |-
        Specifies the placement of an instance.
          ``Placement`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        GroupName:
          description: The name of the placement group for the instance.
          type: string
        Tenancy:
          description: The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware.
          type: string
        SpreadDomain:
          description: Reserved for future use.
          type: string
        PartitionNumber:
          description: The number of the partition the instance should launch in. Valid only if the placement group strategy is set to ``partition``.
          type: integer
        AvailabilityZone:
          description: The Availability Zone for the instance.
          type: string
        Affinity:
          description: The affinity setting for an instance on a Dedicated Host.
          type: string
        HostId:
          description: The ID of the Dedicated Host for the instance.
          type: string
        HostResourceGroupArn:
          description: The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the *Tenancy* parameter or set it to ``host``.
          type: string
        GroupId:
          description: The Group Id of a placement group. You must specify the Placement Group *Group Id* to launch an instance in a shared placement group.
          type: string
    PlacementGroupName:
      type: string
    PlatformValues:
      type: string
      enum:
        - Windows
    PropagatingVgw:
      type: object
      properties:
        gatewayId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the virtual private gateway.
      description: Describes a virtual private gateway propagating route.
    PropagatingVgwList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/PropagatingVgw'
          - xml:
              name: item
    RebootInstancesRequest:
      type: object
      required:
        - InstanceIds
      title: RebootInstancesRequest
      properties:
        InstanceId:
          allOf:
            - $ref: '#/components/schemas/InstanceIdStringList'
            - description: The instance IDs.
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    Route:
      type: object
      properties:
        CarrierGatewayId:
          type: string
          description: |-
            The ID of the carrier gateway.
             You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
        CidrBlock:
          type: string
          description: ''
        CoreNetworkArn:
          type: string
          description: The Amazon Resource Name (ARN) of the core network.
        DestinationCidrBlock:
          type: string
          description: The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
        DestinationIpv6CidrBlock:
          type: string
          description: The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        DestinationPrefixListId:
          type: string
          description: The ID of a prefix list used for the destination match.
        EgressOnlyInternetGatewayId:
          type: string
          description: '[IPv6 traffic only] The ID of an egress-only internet gateway.'
        GatewayId:
          type: string
          description: The ID of an internet gateway or virtual private gateway attached to your VPC.
        InstanceId:
          type: string
          description: The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        LocalGatewayId:
          type: string
          description: The ID of the local gateway.
        NatGatewayId:
          type: string
          description: '[IPv4 traffic only] The ID of a NAT gateway.'
        NetworkInterfaceId:
          type: string
          description: The ID of a network interface.
        RouteTableId:
          type: string
          description: The ID of the route table for the route.
        TransitGatewayId:
          type: string
          description: The ID of a transit gateway.
        VpcEndpointId:
          type: string
          description: The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        VpcPeeringConnectionId:
          type: string
          description: The ID of a VPC peering connection.
      required:
        - RouteTableId
      x-stackql-resource-name: route
      description: |-
        Specifies a route in a route table. For more information, see [Routes](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html#route-table-routes) in the *Amazon VPC User Guide*.
         You must specify either a destination CIDR block or prefix list ID. You must also specify exactly one of the resources as the target.
         If you create a route that references a transit gateway in the same template where you create the transit gateway, you must declare a dependency on the transit gateway attachment. The route table cannot use the transit gateway until it has successfully attached to the VPC. Add a [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) in the ``AWS::EC2::Route`` resource to explicitly declare a dependency on the ``AWS::EC2::TransitGatewayAttachment`` resource.
      x-type-name: AWS::EC2::Route
      x-stackql-primary-identifier:
        - RouteTableId
        - CidrBlock
      x-create-only-properties:
        - RouteTableId
        - DestinationCidrBlock
        - DestinationIpv6CidrBlock
        - DestinationPrefixListId
      x-read-only-properties:
        - CidrBlock
      x-required-properties:
        - RouteTableId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:CreateRoute
          - ec2:DescribeRouteTables
          - ec2:DescribeNetworkInterfaces
        read:
          - ec2:DescribeRouteTables
        update:
          - ec2:ReplaceRoute
          - ec2:DescribeRouteTables
          - ec2:DescribeNetworkInterfaces
        delete:
          - ec2:DeleteRoute
          - ec2:DescribeRouteTables
        list:
          - ec2:DescribeRouteTables
    RouteList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Route'
          - xml:
              name: item
    RouteOrigin:
      type: string
      enum:
        - CreateRouteTable
        - CreateRoute
        - EnableVgwRoutePropagation
    RouteState:
      type: string
      enum:
        - active
        - blackhole
    RouteTable:
      type: object
      properties:
        RouteTableId:
          description: ''
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        Tags:
          uniqueItems: false
          description: Any tags assigned to the route table.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
      x-stackql-resource-name: route_table
      description: |-
        Specifies a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.
         For more information, see [Route tables](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html) in the *Amazon VPC User Guide*.
      x-type-name: AWS::EC2::RouteTable
      x-stackql-primary-identifier:
        - RouteTableId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - RouteTableId
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeRouteTables
        create:
          - ec2:CreateRouteTable
          - ec2:CreateTags
          - ec2:DescribeRouteTables
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeRouteTables
        list:
          - ec2:DescribeRouteTables
        delete:
          - ec2:DescribeRouteTables
          - ec2:DeleteRouteTable
    RouteTableAssociation:
      type: object
      properties:
        main:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Indicates whether this is the main route table.
        routeTableAssociationId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the association.
        routeTableId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the route table.
        subnetId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the subnet. A subnet ID is not returned for an implicit association.
        gatewayId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the internet gateway or virtual private gateway.
        associationState:
          allOf:
            - $ref: '#/components/schemas/RouteTableAssociationState'
            - description: The state of the association.
      description: Describes an association between a route table and a subnet or gateway.
    RouteTableAssociationList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/RouteTableAssociation'
          - xml:
              name: item
    RouteTableAssociationState:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/RouteTableAssociationStateCode'
            - description: The state of the association.
        statusMessage:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status message, if applicable.
      description: Describes the state of an association between a route table and a subnet or gateway.
    RouteTableAssociationStateCode:
      type: string
      enum:
        - associating
        - associated
        - disassociating
        - disassociated
        - failed
    RouteTableId:
      type: string
    RouteTableList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/RouteTable'
          - xml:
              name: item
    S3Storage:
      type: object
      properties:
        undefined:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <a href="https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best Practices for Managing Amazon Web Services Access Keys</a>.
        bucket:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        prefix:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The beginning of the file name of the AMI.
        uploadPolicy:
          allOf:
            - $ref: '#/components/schemas/Blob'
            - description: An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        uploadPolicySignature:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The signature of the JSON document.
      description: Describes the storage parameters for Amazon S3 and Amazon S3 buckets for an instance store-backed AMI.
    SecurityGroupId:
      description: The ID of a security group for the endpoint.
      type: string
    SecurityGroupIdStringList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/SecurityGroupId'
          - xml:
              name: SecurityGroupId
    SecurityGroupName:
      type: string
    SecurityGroupStringList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/SecurityGroupName'
          - xml:
              name: SecurityGroup
    ShutdownBehavior:
      type: string
      enum:
        - stop
        - terminate
    StartInstancesRequest:
      type: object
      required:
        - InstanceIds
      title: StartInstancesRequest
      properties:
        InstanceId:
          $ref: '#/components/schemas/InstanceIdStringList'
        additionalInfo:
          $ref: '#/components/schemas/String'
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    StartInstancesResult:
      type: object
      example:
        StartingInstances:
          - CurrentState:
              Code: 0
              Name: pending
            InstanceId: i-1234567890abcdef0
            PreviousState:
              Code: 80
              Name: stopped
      properties:
        instancesSet:
          allOf:
            - $ref: '#/components/schemas/InstanceStateChangeList'
            - description: Information about the started instances.
    StopInstancesRequest:
      type: object
      required:
        - InstanceIds
      title: StopInstancesRequest
      properties:
        InstanceId:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: '<p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p> Default: <code>false</code> </p>'
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
        force:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: '<p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>'
    StopInstancesResult:
      type: object
      example:
        StoppingInstances:
          - CurrentState:
              Code: 64
              Name: stopping
            InstanceId: i-1234567890abcdef0
            PreviousState:
              Code: 16
              Name: running
      properties:
        instancesSet:
          allOf:
            - $ref: '#/components/schemas/InstanceStateChangeList'
            - description: Information about the stopped instances.
    Storage:
      type: object
      properties:
        undefined:
          allOf:
            - $ref: '#/components/schemas/S3Storage'
            - description: An Amazon S3 storage location.
      description: Describes the storage location for an instance store-backed AMI.
    String:
      type: string
    SubnetId:
      description: The IDs of the subnet.
      type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The tag key.
        Value:
          type: string
          description: The tag value.
      required:
        - Value
        - Key
      description: Specifies a tag. For more information, see [Resource tags](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
    TagList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/Tag'
          - xml:
              name: item
    Tenancy:
      type: string
      enum:
        - default
        - dedicated
        - host
    UnmonitorInstancesRequest:
      type: object
      required:
        - InstanceIds
      title: UnmonitorInstancesRequest
      properties:
        InstanceId:
          allOf:
            - $ref: '#/components/schemas/InstanceIdStringList'
            - description: The IDs of the instances.
        dryRun:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    UnmonitorInstancesResult:
      type: object
      properties:
        instancesSet:
          allOf:
            - $ref: '#/components/schemas/InstanceMonitoringList'
            - description: The monitoring information.
    UserData:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The user data. If you are using an Amazon Web Services SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
      description: Describes the user data for an instance.
    ValueStringList:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/String'
          - xml:
              name: item
    VolumeDetail:
      type: object
      required:
        - Size
      properties:
        size:
          type: integer
          description: The size of the volume, in GiB.
      description: Describes an EBS volume.
    TagSpecification:
      description: |-
        Specifies the tags to apply to resources that are created during instance launch.
          ``TagSpecification`` is a property type of [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications). [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications) is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        ResourceType:
          description: |-
            The type of resource to tag. You can specify tags for the following resource types only: ``instance`` | ``volume`` | ``network-interface`` | ``spot-instances-request``. If the instance does not include the resource type that you specify, the instance launch fails. For example, not all instance types include a volume.
             To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
          type: string
        Tags:
          uniqueItems: false
          description: The tags to apply to the resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    CapacityReservation:
      type: object
      properties:
        Tenancy:
          type: string
        EndDateType:
          type: string
        TagSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagSpecification'
        AvailabilityZone:
          type: string
        TotalInstanceCount:
          type: integer
        EndDate:
          type: string
        EbsOptimized:
          type: boolean
        OutPostArn:
          type: string
        InstanceCount:
          type: integer
        PlacementGroupArn:
          type: string
        AvailableInstanceCount:
          type: integer
        InstancePlatform:
          type: string
        Id:
          type: string
        InstanceType:
          type: string
        EphemeralStorage:
          type: boolean
        InstanceMatchCriteria:
          type: string
        UnusedReservationBillingOwnerId:
          type: string
      required:
        - InstanceCount
        - AvailabilityZone
        - InstancePlatform
        - InstanceType
      x-stackql-resource-name: capacity_reservation
      description: Resource Type definition for AWS::EC2::CapacityReservation
      x-type-name: AWS::EC2::CapacityReservation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Tenancy
        - InstancePlatform
        - InstanceType
        - AvailabilityZone
        - TagSpecifications
        - OutPostArn
        - EphemeralStorage
        - EbsOptimized
        - PlacementGroupArn
      x-write-only-properties:
        - UnusedReservationBillingOwnerId
      x-read-only-properties:
        - Id
        - AvailableInstanceCount
        - TotalInstanceCount
      x-required-properties:
        - InstanceCount
        - AvailabilityZone
        - InstancePlatform
        - InstanceType
      x-required-permissions:
        create:
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:CreateTags
        delete:
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DeleteTags
        list:
          - ec2:DescribeCapacityReservations
        read:
          - ec2:DescribeCapacityReservations
        update:
          - ec2:ModifyCapacityReservation
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:AssociateCapacityReservationBillingOwner
          - ec2:CreateTags
          - ec2:DeleteTags
    InstanceTypeSpecification:
      type: object
      additionalProperties: false
      properties:
        InstanceType:
          type: string
        InstancePlatform:
          type: string
        Weight:
          type: number
        AvailabilityZone:
          type: string
        AvailabilityZoneId:
          type: string
        EbsOptimized:
          type: boolean
        Priority:
          type: integer
          minimum: 0
          maximum: 999
    CapacityReservationFleet:
      type: object
      properties:
        AllocationStrategy:
          type: string
        TagSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagSpecification'
        InstanceTypeSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          maxItems: 50
          items:
            $ref: '#/components/schemas/InstanceTypeSpecification'
        TotalTargetCapacity:
          type: integer
          minimum: 1
          maximum: 25000
        EndDate:
          type: string
        InstanceMatchCriteria:
          type: string
          enum:
            - open
        CapacityReservationFleetId:
          type: string
        Tenancy:
          type: string
          enum:
            - default
        RemoveEndDate:
          type: boolean
        NoRemoveEndDate:
          type: boolean
      x-stackql-resource-name: capacity_reservation_fleet
      description: Resource Type definition for AWS::EC2::CapacityReservationFleet
      x-type-name: AWS::EC2::CapacityReservationFleet
      x-stackql-primary-identifier:
        - CapacityReservationFleetId
      x-create-only-properties:
        - InstanceTypeSpecifications
        - AllocationStrategy
        - TagSpecifications
        - EndDate
        - Tenancy
        - InstanceMatchCriteria
      x-read-only-properties:
        - CapacityReservationFleetId
      x-taggable: true
      x-required-permissions:
        create:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DescribeInstances
          - ec2:CreateTags
          - iam:CreateServiceLinkedRole
        delete:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DeleteTags
        list:
          - ec2:DescribeCapacityReservationFleets
          - ec2:DescribeCapacityReservations
          - ec2:DescribeInstances
        read:
          - ec2:DescribeCapacityReservationFleets
          - ec2:DescribeInstances
          - ec2:DescribeCapacityReservations
        update:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:ModifyCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DescribeInstances
          - ec2:DeleteTags
    Tags:
      type: array
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Tag'
    CarrierGateway:
      type: object
      properties:
        CarrierGatewayId:
          description: The ID of the carrier gateway.
          type: string
        State:
          description: The state of the carrier gateway.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        OwnerId:
          description: The ID of the owner.
          type: string
        Tags:
          description: The tags for the carrier gateway.
          $ref: '#/components/schemas/Tags'
      required:
        - VpcId
      x-stackql-resource-name: carrier_gateway
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::EC2::CarrierGateway
      x-stackql-primary-identifier:
        - CarrierGatewayId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - CarrierGatewayId
        - OwnerId
        - State
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
      x-required-permissions:
        create:
          - ec2:CreateCarrierGateway
          - ec2:DescribeCarrierGateways
          - ec2:CreateTags
        read:
          - ec2:DescribeCarrierGateways
          - ec2:DescribeTags
        update:
          - ec2:DescribeCarrierGateways
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
        delete:
          - ec2:DeleteCarrierGateway
          - ec2:DescribeCarrierGateways
        list:
          - ec2:DescribeCarrierGateways
    CustomerGateway:
      type: object
      properties:
        Type:
          description: The type of VPN connection that this customer gateway supports (``ipsec.1``).
          type: string
        CustomerGatewayId:
          description: ''
          type: string
        IpAddress:
          description: IPv4 address for the customer gateway device's outside interface. The address must be static. If ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918 private IPv4 address. If ``OutsideIpAddressType`` is set to ``PublicIpv4``, you can use a public IPv4 address.
          type: string
        BgpAsnExtended:
          multipleOf: 1
          maximum: 4294967294
          description: |-
            For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
             Valid values: ``2,147,483,648`` to ``4,294,967,295``
          type: number
          minimum: 2147483648
        BgpAsn:
          default: 65000
          description: |-
            For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
             Default: 65000
             Valid values: ``1`` to ``2,147,483,647``
          type: integer
        Tags:
          uniqueItems: false
          description: One or more tags for the customer gateway.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        CertificateArn:
          pattern: ^arn:(aws[a-zA-Z-]*)?:acm:[a-z]{2}((-gov)|(-iso([a-z]{1})?))?-[a-z]+-\d{1}:\d{12}:certificate\/[a-zA-Z0-9-_]+$
          description: The Amazon Resource Name (ARN) for the customer gateway certificate.
          type: string
        DeviceName:
          description: The name of customer gateway device.
          type: string
      required:
        - IpAddress
        - Type
      x-stackql-resource-name: customer_gateway
      description: Specifies a customer gateway.
      x-type-name: AWS::EC2::CustomerGateway
      x-stackql-primary-identifier:
        - CustomerGatewayId
      x-create-only-properties:
        - CertificateArn
        - BgpAsn
        - BgpAsnExtended
        - Type
        - IpAddress
        - DeviceName
      x-read-only-properties:
        - CustomerGatewayId
      x-required-properties:
        - IpAddress
        - Type
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeCustomerGateways
        create:
          - ec2:CreateCustomerGateway
          - ec2:DescribeCustomerGateways
          - ec2:CreateTags
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeCustomerGateways
        list:
          - ec2:DescribeCustomerGateways
        delete:
          - ec2:DeleteCustomerGateway
          - ec2:DescribeCustomerGateways
    DHCPOptions:
      type: object
      properties:
        DhcpOptionsId:
          type: string
        DomainName:
          type: string
          description: This value is used to complete unqualified DNS hostnames.
        DomainNameServers:
          type: array
          description: The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
          uniqueItems: true
          items:
            type: string
        NetbiosNameServers:
          type: array
          description: The IPv4 addresses of up to four NetBIOS name servers.
          uniqueItems: true
          items:
            type: string
        NetbiosNodeType:
          type: integer
          description: The NetBIOS node type (1, 2, 4, or 8).
        NtpServers:
          type: array
          description: The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
          uniqueItems: false
          items:
            type: string
        Ipv6AddressPreferredLeaseTime:
          type: integer
          description: The preferred Lease Time for ipV6 address in seconds.
        Tags:
          type: array
          description: Any tags assigned to the DHCP options set.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: dhcp_options
      description: Resource Type definition for AWS::EC2::DHCPOptions
      x-type-name: AWS::EC2::DHCPOptions
      x-stackql-primary-identifier:
        - DhcpOptionsId
      x-create-only-properties:
        - NetbiosNameServers
        - NetbiosNodeType
        - NtpServers
        - DomainName
        - DomainNameServers
        - Ipv6AddressPreferredLeaseTime
      x-read-only-properties:
        - DhcpOptionsId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateDhcpOptions
          - ec2:DescribeDhcpOptions
          - ec2:CreateTags
        read:
          - ec2:DescribeDhcpOptions
          - ec2:DescribeTags
        update:
          - ec2:CreateTags
          - ec2:DescribeDhcpOptions
          - ec2:DeleteTags
        delete:
          - ec2:DeleteDhcpOptions
          - ec2:DeleteTags
          - ec2:DescribeDhcpOptions
        list:
          - ec2:DescribeDhcpOptions
    TargetCapacitySpecificationRequest:
      additionalProperties: false
      type: object
      properties:
        DefaultTargetCapacityType:
          type: string
          enum:
            - on-demand
            - spot
        TotalTargetCapacity:
          type: integer
        OnDemandTargetCapacity:
          type: integer
        SpotTargetCapacity:
          type: integer
        TargetCapacityUnitType:
          type: string
          enum:
            - vcpu
            - memory-mib
            - units
      required:
        - TotalTargetCapacity
    FleetLaunchTemplateSpecificationRequest:
      additionalProperties: false
      type: object
      properties:
        LaunchTemplateName:
          minLength: 3
          pattern: '[a-zA-Z0-9\(\)\.\-/_]+'
          type: string
          maxLength: 128
        Version:
          type: string
        LaunchTemplateId:
          type: string
      required:
        - Version
    MemoryGiBPerVCpuRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    CapacityReservationOptionsRequest:
      additionalProperties: false
      type: object
      properties:
        UsageStrategy:
          type: string
          enum:
            - use-capacity-reservations-first
    TotalLocalStorageGBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    NetworkBandwidthGbpsRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    VCpuCountRangeRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    BaselineEbsBandwidthMbpsRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    NetworkInterfaceCountRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    OnDemandOptionsRequest:
      additionalProperties: false
      type: object
      properties:
        SingleAvailabilityZone:
          type: boolean
        AllocationStrategy:
          type: string
        SingleInstanceType:
          type: boolean
        MinTargetCapacity:
          type: integer
        MaxTotalPrice:
          type: string
        CapacityReservationOptions:
          $ref: '#/components/schemas/CapacityReservationOptionsRequest'
    SpotOptionsRequest:
      additionalProperties: false
      type: object
      properties:
        SingleAvailabilityZone:
          type: boolean
        AllocationStrategy:
          type: string
          enum:
            - lowest-price
            - lowestPrice
            - diversified
            - capacityOptimized
            - capacity-optimized
            - capacityOptimizedPrioritized
            - capacity-optimized-prioritized
            - priceCapacityOptimized
            - price-capacity-optimized
        SingleInstanceType:
          type: boolean
        MinTargetCapacity:
          type: integer
        MaxTotalPrice:
          type: string
        MaintenanceStrategies:
          $ref: '#/components/schemas/MaintenanceStrategies'
        InstanceInterruptionBehavior:
          type: string
          enum:
            - hibernate
            - stop
            - terminate
        InstancePoolsToUseCount:
          type: integer
    PerformanceFactorReferenceRequest:
      type: object
      additionalProperties: false
      properties:
        InstanceFamily:
          type: string
    CpuPerformanceFactorRequest:
      type: object
      additionalProperties: false
      properties:
        References:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PerformanceFactorReferenceRequest'
    MaintenanceStrategies:
      additionalProperties: false
      type: object
      properties:
        CapacityRebalance:
          $ref: '#/components/schemas/CapacityRebalance'
    BlockDeviceMapping:
      type: object
      additionalProperties: false
      properties:
        DeviceName:
          type: string
        Ebs:
          $ref: '#/components/schemas/EbsBlockDevice'
        NoDevice:
          type: string
        VirtualName:
          type: string
      required:
        - DeviceName
    AcceleratorCountRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    CapacityRebalance:
      additionalProperties: false
      type: object
      properties:
        TerminationDelay:
          type: integer
        ReplacementStrategy:
          type: string
          enum:
            - launch
            - launch-before-terminate
    FleetLaunchTemplateConfigRequest:
      additionalProperties: false
      type: object
      properties:
        LaunchTemplateSpecification:
          $ref: '#/components/schemas/FleetLaunchTemplateSpecificationRequest'
        Overrides:
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/FleetLaunchTemplateOverridesRequest'
    FleetLaunchTemplateOverridesRequest:
      additionalProperties: false
      type: object
      properties:
        WeightedCapacity:
          type: number
        Placement:
          $ref: '#/components/schemas/Placement'
        Priority:
          type: number
        AvailabilityZone:
          type: string
        SubnetId:
          type: string
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
        InstanceType:
          type: string
        MaxPrice:
          type: string
    InstanceRequirementsRequest:
      type: object
      additionalProperties: false
      properties:
        VCpuCount:
          $ref: '#/components/schemas/VCpuCountRangeRequest'
        MemoryMiB:
          $ref: '#/components/schemas/MemoryMiBRequest'
        CpuManufacturers:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - intel
              - amd
              - amazon-web-services
              - apple
        MemoryGiBPerVCpu:
          $ref: '#/components/schemas/MemoryGiBPerVCpuRequest'
        AllowedInstanceTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            minLength: 1
            maxLength: 30
            pattern: '[a-zA-Z0-9\.\*]+'
        ExcludedInstanceTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            minLength: 1
            maxLength: 30
            pattern: '[a-zA-Z0-9\.\*]+'
        InstanceGenerations:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - current
              - previous
        SpotMaxPricePercentageOverLowestPrice:
          type: integer
        OnDemandMaxPricePercentageOverLowestPrice:
          type: integer
        MaxSpotPriceAsPercentageOfOptimalOnDemandPrice:
          type: integer
        BareMetal:
          type: string
          enum:
            - included
            - required
            - excluded
        BurstablePerformance:
          type: string
          enum:
            - included
            - required
            - excluded
        RequireHibernateSupport:
          type: boolean
        NetworkBandwidthGbps:
          $ref: '#/components/schemas/NetworkBandwidthGbpsRequest'
        NetworkInterfaceCount:
          $ref: '#/components/schemas/NetworkInterfaceCountRequest'
        LocalStorage:
          type: string
          enum:
            - included
            - required
            - excluded
        LocalStorageTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - hdd
              - ssd
        TotalLocalStorageGB:
          $ref: '#/components/schemas/TotalLocalStorageGBRequest'
        BaselineEbsBandwidthMbps:
          $ref: '#/components/schemas/BaselineEbsBandwidthMbpsRequest'
        AcceleratorTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - gpu
              - fpga
              - inference
        AcceleratorCount:
          $ref: '#/components/schemas/AcceleratorCountRequest'
        AcceleratorManufacturers:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - amazon-web-services
              - amd
              - habana
              - nvidia
              - xilinx
        AcceleratorNames:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - a10g
              - a100
              - h100
              - inferentia
              - k520
              - k80
              - m60
              - radeon-pro-v520
              - t4
              - t4g
              - vu9p
              - v100
        AcceleratorTotalMemoryMiB:
          $ref: '#/components/schemas/AcceleratorTotalMemoryMiBRequest'
        BaselinePerformanceFactors:
          $ref: '#/components/schemas/BaselinePerformanceFactorsRequest'
    MemoryMiBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    BaselinePerformanceFactorsRequest:
      type: object
      additionalProperties: false
      properties:
        Cpu:
          $ref: '#/components/schemas/CpuPerformanceFactorRequest'
    AcceleratorTotalMemoryMiBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    EbsBlockDevice:
      type: object
      additionalProperties: false
      properties:
        DeleteOnTermination:
          type: boolean
        Encrypted:
          type: boolean
        Iops:
          type: integer
        SnapshotId:
          type: string
        VolumeSize:
          type: integer
        VolumeType:
          type: string
          enum:
            - gp2
            - gp3
            - io1
            - io2
            - sc1
            - st1
            - standard
    EC2Fleet:
      type: object
      properties:
        Context:
          type: string
        TargetCapacitySpecification:
          $ref: '#/components/schemas/TargetCapacitySpecificationRequest'
        OnDemandOptions:
          $ref: '#/components/schemas/OnDemandOptionsRequest'
        ExcessCapacityTerminationPolicy:
          type: string
          enum:
            - termination
            - no-termination
        TagSpecifications:
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/TagSpecification'
        SpotOptions:
          $ref: '#/components/schemas/SpotOptionsRequest'
        LaunchTemplateConfigs:
          maxItems: 50
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/FleetLaunchTemplateConfigRequest'
        TerminateInstancesWithExpiration:
          type: boolean
        ValidUntil:
          type: string
        Type:
          type: string
          enum:
            - maintain
            - request
            - instant
        FleetId:
          type: string
        ValidFrom:
          type: string
        ReplaceUnhealthyInstances:
          type: boolean
      required:
        - TargetCapacitySpecification
        - LaunchTemplateConfigs
      x-stackql-resource-name: ec2fleet
      description: Resource Type definition for AWS::EC2::EC2Fleet
      x-type-name: AWS::EC2::EC2Fleet
      x-stackql-primary-identifier:
        - FleetId
      x-create-only-properties:
        - LaunchTemplateConfigs
        - OnDemandOptions
        - ReplaceUnhealthyInstances
        - SpotOptions
        - TagSpecifications
        - TerminateInstancesWithExpiration
        - Type
        - ValidFrom
        - ValidUntil
      x-read-only-properties:
        - FleetId
      x-required-properties:
        - TargetCapacitySpecification
        - LaunchTemplateConfigs
      x-required-permissions:
        read:
          - ec2:DescribeFleets
        create:
          - ec2:CreateFleet
          - ec2:DescribeFleets
        update:
          - ec2:ModifyFleet
          - ec2:DescribeFleets
        list:
          - ec2:DescribeFleets
        delete:
          - ec2:DescribeFleets
          - ec2:DeleteFleets
    EgressOnlyInternetGateway:
      type: object
      properties:
        Id:
          description: Service Generated ID of the EgressOnlyInternetGateway
          type: string
        VpcId:
          description: The ID of the VPC for which to create the egress-only internet gateway.
          type: string
      required:
        - VpcId
      x-stackql-resource-name: egress_only_internet_gateway
      description: Resource Type definition for AWS::EC2::EgressOnlyInternetGateway
      x-type-name: AWS::EC2::EgressOnlyInternetGateway
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - Id
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:CreateEgressOnlyInternetGateway
          - ec2:DescribeEgressOnlyInternetGateways
        read:
          - ec2:DescribeEgressOnlyInternetGateways
        delete:
          - ec2:DeleteEgressOnlyInternetGateway
          - ec2:DescribeEgressOnlyInternetGateways
          - ec2:DescribeVpcs
        list:
          - ec2:DescribeEgressOnlyInternetGateways
    EIP:
      type: object
      properties:
        PublicIp:
          description: ''
          type: string
        AllocationId:
          description: ''
          type: string
        Domain:
          description: |-
            The network (``vpc``).
             If you define an Elastic IP address and associate it with a VPC that is defined in the same template, you must declare a dependency on the VPC-gateway attachment by using the [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) on this resource.
          type: string
        NetworkBorderGroup:
          description: |-
            A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups.
             Use [DescribeAvailabilityZones](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html) to view the network border groups.
          type: string
        TransferAddress:
          description: The Elastic IP address you are accepting for transfer. You can only accept one transferred address. For more information on Elastic IP address transfers, see [Transfer Elastic IP addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro) in the *Amazon Virtual Private Cloud User Guide*.
          type: string
        InstanceId:
          description: |-
            The ID of the instance.
              Updates to the ``InstanceId`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: string
        PublicIpv4Pool:
          description: |-
            The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
              Updates to the ``PublicIpv4Pool`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: string
        IpamPoolId:
          description: ''
          type: string
        Address:
          description: ''
          type: string
        Tags:
          description: |-
            Any tags assigned to the Elastic IP address.
              Updates to the ``Tags`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: eip
      description: |-
        Specifies an Elastic IP (EIP) address and can, optionally, associate it with an Amazon EC2 instance.
         You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see [Bring Your Own IP Addresses (BYOIP)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html) in the *Amazon EC2 User Guide*.
         For more information, see [Elastic IP Addresses](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html) in the *Amazon EC2 User Guide*.
      x-type-name: AWS::EC2::EIP
      x-stackql-primary-identifier:
        - PublicIp
        - AllocationId
      x-create-only-properties:
        - Domain
        - NetworkBorderGroup
        - TransferAddress
        - IpamPoolId
        - Address
      x-write-only-properties:
        - TransferAddress
        - IpamPoolId
        - Address
      x-read-only-properties:
        - PublicIp
        - AllocationId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:AllocateAddress
          - ec2:AcceptAddressTransfer
          - ec2:DescribeAddresses
          - ec2:AssociateAddress
          - ec2:CreateTags
        read:
          - ec2:DescribeAddresses
        delete:
          - ec2:ReleaseAddress
          - ec2:DescribeAddresses
          - ec2:DisassociateAddress
        update:
          - ec2:DescribeAddresses
          - ec2:DisassociateAddress
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:AssociateAddress
        list:
          - ec2:DescribeAddresses
    EIPAssociation:
      type: object
      properties:
        Id:
          description: ''
          type: string
        AllocationId:
          description: The allocation ID. This is required.
          type: string
        NetworkInterfaceId:
          description: |-
            The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.
             You can specify either the instance ID or the network interface ID, but not both.
          type: string
        InstanceId:
          description: The ID of the instance. The instance must have exactly one attached network interface. You can specify either the instance ID or the network interface ID, but not both.
          type: string
        PrivateIpAddress:
          description: The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
          type: string
        EIP:
          description: ''
          type: string
      x-stackql-resource-name: eip_association
      description: |-
        Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account. For more information about working with Elastic IP addresses, see [Elastic IP address concepts and rules](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#vpc-eip-overview).
         You must specify ``AllocationId`` and either ``InstanceId``, ``NetworkInterfaceId``, or ``PrivateIpAddress``.
      x-type-name: AWS::EC2::EIPAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - AllocationId
        - NetworkInterfaceId
        - InstanceId
        - PrivateIpAddress
        - EIP
      x-read-only-properties:
        - Id
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:DescribeAddresses
          - ec2:AssociateAddress
        read:
          - ec2:DescribeAddresses
        delete:
          - ec2:DisassociateAddress
          - ec2:DescribeAddresses
        list:
          - ec2:DescribeAddresses
    EnclaveCertificateIamRoleAssociation:
      type: object
      properties:
        CertificateArn:
          description: The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
          type: string
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:acm:[A-Za-z0-9-]{1,64}:([0-9]{12})?:certificate/.+$
          minLength: 1
          maxLength: 1283
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
          type: string
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:iam:.*:([0-9]{12})?:role/.+$
          minLength: 1
          maxLength: 1283
        CertificateS3BucketName:
          description: The name of the Amazon S3 bucket to which the certificate was uploaded.
          type: string
        CertificateS3ObjectKey:
          description: The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
          type: string
        EncryptionKmsKeyId:
          description: The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
          type: string
      required:
        - CertificateArn
        - RoleArn
      x-stackql-resource-name: enclave_certificate_iam_role_association
      description: Associates an AWS Identity and Access Management (IAM) role with an AWS Certificate Manager (ACM) certificate. This association is based on Amazon Resource Names and it enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave.
      x-type-name: AWS::EC2::EnclaveCertificateIamRoleAssociation
      x-stackql-primary-identifier:
        - CertificateArn
        - RoleArn
      x-create-only-properties:
        - CertificateArn
        - RoleArn
      x-read-only-properties:
        - CertificateS3BucketName
        - CertificateS3ObjectKey
        - EncryptionKmsKeyId
      x-required-properties:
        - CertificateArn
        - RoleArn
      x-required-permissions:
        create:
          - ec2:AssociateEnclaveCertificateIamRole
          - ec2:GetAssociatedEnclaveCertificateIamRoles
        read:
          - ec2:GetAssociatedEnclaveCertificateIamRoles
        delete:
          - ec2:DisassociateEnclaveCertificateIamRole
          - ec2:GetAssociatedEnclaveCertificateIamRoles
        list:
          - ec2:GetAssociatedEnclaveCertificateIamRoles
    FlowLog:
      type: object
      properties:
        Id:
          description: The Flow Log ID
          type: string
        DeliverCrossAccountRole:
          description: The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
          type: string
        DeliverLogsPermissionArn:
          description: The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
          type: string
        LogDestination:
          description: Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the value specified for LogDestinationType.
          type: string
        LogDestinationType:
          description: Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
          type: string
          enum:
            - cloud-watch-logs
            - s3
            - kinesis-data-firehose
        LogFormat:
          description: The fields to include in the flow log record, in the order in which they should appear.
          type: string
        LogGroupName:
          description: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
          type: string
        MaxAggregationInterval:
          description: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
          type: integer
        ResourceId:
          description: The ID of the subnet, network interface, or VPC for which you want to create a flow log.
          type: string
        ResourceType:
          description: The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
          type: string
          enum:
            - NetworkInterface
            - Subnet
            - VPC
            - TransitGateway
            - TransitGatewayAttachment
        Tags:
          description: The tags to apply to the flow logs.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        TrafficType:
          description: The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
          type: string
          enum:
            - ACCEPT
            - ALL
            - REJECT
        DestinationOptions:
          type: object
          additionalProperties: false
          properties:
            FileFormat:
              type: string
              enum:
                - plain-text
                - parquet
            HiveCompatiblePartitions:
              type: boolean
            PerHourPartition:
              type: boolean
          required:
            - FileFormat
            - HiveCompatiblePartitions
            - PerHourPartition
      required:
        - ResourceType
        - ResourceId
      x-stackql-resource-name: flow_log
      description: Specifies a VPC flow log, which enables you to capture IP traffic for a specific network interface, subnet, or VPC.
      x-type-name: AWS::EC2::FlowLog
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - DeliverCrossAccountRole
        - DeliverLogsPermissionArn
        - LogGroupName
        - LogDestination
        - ResourceId
        - TrafficType
        - LogDestinationType
        - ResourceType
        - LogFormat
        - MaxAggregationInterval
        - DestinationOptions
      x-read-only-properties:
        - Id
      x-required-properties:
        - ResourceType
        - ResourceId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateFlowLogs
          - ec2:DescribeFlowLogs
          - ec2:CreateTags
          - iam:PassRole
          - logs:CreateLogDelivery
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
        read:
          - ec2:DescribeFlowLogs
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeFlowLogs
        delete:
          - ec2:DeleteFlowLogs
          - ec2:DescribeFlowLogs
          - logs:DeleteLogDelivery
        list:
          - ec2:DescribeFlowLogs
    GatewayRouteTableAssociation:
      type: object
      properties:
        RouteTableId:
          description: The ID of the route table.
          type: string
        GatewayId:
          description: The ID of the gateway.
          type: string
        AssociationId:
          description: The route table association ID.
          type: string
      required:
        - RouteTableId
        - GatewayId
      x-stackql-resource-name: gateway_route_table_association
      description: Associates a gateway with a route table. The gateway and route table must be in the same VPC. This association causes the incoming traffic to the gateway to be routed according to the routes in the route table.
      x-type-name: AWS::EC2::GatewayRouteTableAssociation
      x-stackql-primary-identifier:
        - GatewayId
      x-create-only-properties:
        - GatewayId
      x-read-only-properties:
        - AssociationId
      x-required-properties:
        - RouteTableId
        - GatewayId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:DescribeRouteTables
          - ec2:AssociateRouteTable
        read:
          - ec2:DescribeRouteTables
        update:
          - ec2:DescribeRouteTables
          - ec2:ReplaceRouteTableAssociation
        delete:
          - ec2:DescribeRouteTables
          - ec2:DisassociateRouteTable
    Host:
      type: object
      properties:
        HostId:
          description: ID of the host created.
          type: string
        AutoPlacement:
          description: Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
          type: string
        AvailabilityZone:
          description: The Availability Zone in which to allocate the Dedicated Host.
          type: string
        HostRecovery:
          description: Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
          type: string
        InstanceType:
          description: Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
          type: string
        InstanceFamily:
          description: Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.
          type: string
        OutpostArn:
          description: The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
          type: string
        HostMaintenance:
          description: Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your current host.
          type: string
        AssetId:
          description: The ID of the Outpost hardware asset.
          type: string
      required:
        - AvailabilityZone
      x-stackql-resource-name: host
      description: Resource Type definition for AWS::EC2::Host
      x-type-name: AWS::EC2::Host
      x-stackql-primary-identifier:
        - HostId
      x-create-only-properties:
        - AvailabilityZone
        - InstanceType
        - InstanceFamily
        - OutpostArn
        - AssetId
      x-read-only-properties:
        - HostId
      x-required-properties:
        - AvailabilityZone
      x-required-permissions:
        create:
          - ec2:AllocateHosts
          - ec2:DescribeHosts
        read:
          - ec2:DescribeHosts
        update:
          - ec2:ModifyHosts
          - ec2:DescribeHosts
        delete:
          - ec2:ReleaseHosts
          - ec2:DescribeHosts
        list:
          - ec2:DescribeHosts
    LaunchTemplateSpecification:
      oneOf:
        - required:
            - LaunchTemplateName
            - Version
        - required:
            - LaunchTemplateId
            - Version
      additionalProperties: false
      type: object
      properties:
        LaunchTemplateName:
          description: The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
          type: string
        Version:
          description: The version number of the launch template.
          type: string
        LaunchTemplateId:
          description: The ID of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
          type: string
    LicenseSpecification:
      description: |-
        Specifies a license configuration for an instance.
          ``LicenseSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        LicenseConfigurationArn:
          description: The Amazon Resource Name (ARN) of the license configuration.
          type: string
    ElasticGpuSpecification:
      description: |-
        Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.
          Specifies a specification for an Elastic GPU for an Amazon EC2 launch template.
          ``ElasticGpuSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of Elastic Graphics accelerator.
          type: string
    InstanceIpv6Address:
      type: object
      additionalProperties: false
      properties:
        Ipv6Address:
          type: string
      required:
        - Ipv6Address
    NetworkInterface:
      type: object
      properties:
        Description:
          description: A description for the network interface.
          type: string
        PrivateIpAddress:
          description: 'Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property. '
          type: string
        PrimaryIpv6Address:
          description: The primary IPv6 address
          type: string
        PrivateIpAddresses:
          uniqueItems: false
          description: Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/PrivateIpAddressSpecification'
        SecondaryPrivateIpAddressCount:
          description: The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses
          type: integer
        Ipv6PrefixCount:
          description: 'The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can''t specify a count of IPv6 prefixes if you''ve specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
          type: integer
        PrimaryPrivateIpAddress:
          description: Returns the primary private IP address of the network interface.
          type: string
        Ipv4Prefixes:
          uniqueItems: false
          description: 'Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can''t specify IPv4 prefixes if you''ve specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Ipv4PrefixSpecification'
        Ipv4PrefixCount:
          description: 'The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can''t specify a count of IPv4 prefixes if you''ve specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
          type: integer
        EnablePrimaryIpv6:
          description: >-
            If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached. If you
            have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI becomes the primary IPv6 address.
          type: boolean
        GroupSet:
          uniqueItems: false
          description: A list of security group IDs associated with this network interface.
          x-insertionOrder: false
          type: array
          items:
            type: string
        Ipv6Addresses:
          uniqueItems: true
          description: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/InstanceIpv6Address'
        Ipv6Prefixes:
          uniqueItems: false
          description: 'Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can''t specify IPv6 prefixes if you''ve specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Ipv6PrefixSpecification'
        SubnetId:
          description: The ID of the subnet to associate with the network interface.
          type: string
        SourceDestCheck:
          description: Indicates whether traffic to or from the instance is validated.
          type: boolean
        InterfaceType:
          description: Indicates the type of network interface.
          type: string
        SecondaryPrivateIpAddresses:
          uniqueItems: false
          description: Returns the secondary private IP addresses of the network interface.
          x-insertionOrder: false
          type: array
          items:
            type: string
        VpcId:
          description: The ID of the VPC
          type: string
        Ipv6AddressCount:
          description: The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
          type: integer
        Id:
          description: Network interface id.
          type: string
        Tags:
          uniqueItems: false
          description: An arbitrary set of tags (key-value pairs) for this network interface.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        ConnectionTrackingSpecification:
          $ref: '#/components/schemas/ConnectionTrackingSpecification'
      required:
        - SubnetId
      x-stackql-resource-name: network_interface
      description: The AWS::EC2::NetworkInterface resource creates network interface
      x-type-name: AWS::EC2::NetworkInterface
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - PrivateIpAddress
        - InterfaceType
        - SubnetId
      x-conditional-create-only-properties:
        - PrivateIpAddresses
        - EnablePrimaryIpv6
        - ConnectionTrackingSpecification
      x-read-only-properties:
        - Id
        - SecondaryPrivateIpAddresses
        - PrimaryPrivateIpAddress
        - PrimaryIpv6Address
        - VpcId
      x-required-properties:
        - SubnetId
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeNetworkInterfaces
        create:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:CreateTags
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:ModifyPublicIpDnsNameOptions
        update:
          - ec2:DescribeNetworkInterfaces
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:UnassignIpv6Addresses
          - ec2:AssignIpv6Addresses
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:UnassignPrivateIpAddresses
          - ec2:AssignPrivateIpAddresses
          - ec2:ModifyPublicIpDnsNameOptions
        list:
          - ec2:DescribeNetworkInterfaces
        delete:
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
    PrivateDnsNameOptions:
      description: The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
      additionalProperties: false
      type: object
      properties:
        EnableResourceNameDnsARecord:
          description: Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
          type: boolean
        HostnameType:
          description: The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
          type: string
        EnableResourceNameDnsAAAARecord:
          description: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
          type: boolean
    ElasticInferenceAccelerator:
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of elastic inference accelerator.
          type: string
        Count:
          description: The number of elastic inference accelerators to attach to the instance.
          type: integer
          minimum: 0
      required:
        - Type
    AssociationParameter:
      additionalProperties: false
      type: object
      properties:
        Value:
          uniqueItems: false
          description: The value of an input parameter.
          x-insertionOrder: false
          type: array
          items:
            type: string
        Key:
          description: The name of an input parameter that is in the associated SSM document.
          type: string
      required:
        - Value
        - Key
    SsmAssociation:
      additionalProperties: false
      type: object
      properties:
        AssociationParameters:
          uniqueItems: false
          description: The input parameter values to use with the associated SSM document.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/AssociationParameter'
        DocumentName:
          description: The name of an SSM document to associate with the instance.
          type: string
      required:
        - DocumentName
    PrivateIpAddressSpecification:
      type: object
      additionalProperties: false
      properties:
        Primary:
          type: boolean
        PrivateIpAddress:
          type: string
      required:
        - PrivateIpAddress
    Volume:
      type: object
      properties:
        MultiAttachEnabled:
          description: |-
            Indicates whether Amazon EBS Multi-Attach is enabled.
              CFNlong does not currently support updating a single-attach volume to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number of I/O operations per second (IOPS) of a multi-attach enabled volume.
          type: boolean
        KmsKeyId:
          description: |-
            The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state must be ``true``.
             If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not have a default key, then the volume is encrypted using the aws-managed-key.
             Alternatively, if you want to specify a different key, you can specify one of the following:
              +  Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
              +  Key alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``.
              +  Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
              +  Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
          type: string
        Encrypted:
          description: |-
            Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see [Encryption by default](https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default) in the *Amazon EBS User Guide*.
             Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see [Supported instance types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances).
          type: boolean
        Size:
          description: |-
            The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.
             The following are the supported volumes sizes for each volume type:
              +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
              +   ``io1``: 4 - 16,384 GiB
              +   ``io2``: 4 - 65,536 GiB
              +   ``st1`` and ``sc1``: 125 - 16,384 GiB
              +   ``standard``: 1 - 1024 GiB
          type: integer
        AutoEnableIO:
          description: Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can configure the volume to automatically enable I/O.
          type: boolean
        OutpostArn:
          description: The Amazon Resource Name (ARN) of the Outpost.
          type: string
        AvailabilityZone:
          description: The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
          type: string
        Throughput:
          description: |-
            The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
             This parameter is valid only for ``gp3`` volumes. The default value is 125.
             Valid Range: Minimum value of 125. Maximum value of 1000.
          type: integer
        Iops:
          description: |-
            The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
             The following are the supported values for each volume type:
              +   ``gp3``: 3,000 - 16,000 IOPS
              +   ``io1``: 100 - 64,000 IOPS
              +   ``io2``: 100 - 256,000 IOPS
              
             For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). On other instances, you can achieve performance up to 32,000 IOPS.
             This parameter is required for ``io1`` and ``io2`` volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
          type: integer
        SnapshotId:
          description: The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
          type: string
        VolumeId:
          description: ''
          type: string
        VolumeType:
          description: |-
            The volume type. This parameter can be one of the following values:
              +  General Purpose SSD: ``gp2`` | ``gp3`` 
              +  Provisioned IOPS SSD: ``io1`` | ``io2`` 
              +  Throughput Optimized HDD: ``st1`` 
              +  Cold HDD: ``sc1`` 
              +  Magnetic: ``standard`` 
              
             For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html).
             Default: ``gp2``
          type: string
        Tags:
          uniqueItems: false
          description: The tags to apply to the volume during creation.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AvailabilityZone
      x-stackql-resource-name: volume
      description: |-
        Specifies an Amazon Elastic Block Store (Amazon EBS) volume.
         When you use CFNlong to update an Amazon EBS volume that modifies ``Iops``, ``Size``, or ``VolumeType``, there is a cooldown period before another operation can occur. This can cause your stack to report being in ``UPDATE_IN_PROGRESS`` or ``UPDATE_ROLLBACK_IN_PROGRESS`` for long periods of time.
         Amazon EBS does not support sizing down an Amazon EBS volume. CFNlong does not attempt to modify an Amazon EBS volume to a smaller size on rollback.
         Some common scenarios when you might encounter a cooldown period for Amazon EBS include:
          +  You successfully update an Amazon EBS volume and the update succeeds. When you attempt another update within the cooldown window, that update will be subject to a cooldown period.
          +  You successfully update an Amazon EBS volume and the update succeeds but another change in your ``update-stack`` call fails. The rollback will be subject to a cooldown period.
          
         For more information, see [Requirements for EBS volume modifications](https://docs.aws.amazon.com/ebs/latest/userguide/modify-volume-requirements.html).
          *DeletionPolicy attribute* 
         To control how CFNlong handles the volume when the stack is deleted, set a deletion policy for your volume. You can choose to retain the volume, to delete the volume, or to create a snapshot of the volume. For more information, see [DeletionPolicy attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html).
          If you set a deletion policy that creates a snapshot, all tags on the volume are included in the snapshot.
      x-type-name: AWS::EC2::Volume
      x-stackql-primary-identifier:
        - VolumeId
      x-read-only-properties:
        - VolumeId
      x-required-properties:
        - AvailabilityZone
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeVolumes
          - ec2:DescribeVolumeAttribute
          - ec2:DescribeTags
        create:
          - ec2:CreateVolume
          - ec2:DescribeVolumes
          - ec2:DescribeVolumeAttribute
          - ec2:ModifyVolumeAttribute
          - ec2:CreateTags
          - kms:GenerateDataKeyWithoutPlaintext
          - kms:CreateGrant
        update:
          - ec2:ModifyVolume
          - ec2:ModifyVolumeAttribute
          - ec2:DescribeVolumeAttribute
          - ec2:DescribeVolumesModifications
          - ec2:DescribeVolumes
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeVolumes
          - ec2:DescribeTags
          - ec2:DescribeVolumeAttribute
        delete:
          - ec2:DeleteVolume
          - ec2:CreateSnapshot
          - ec2:DescribeSnapshots
          - ec2:DeleteTags
          - ec2:DescribeVolumes
    State:
      description: The current state of the instance
      additionalProperties: false
      type: object
      properties:
        Code:
          description: The state of the instance as a 16-bit unsigned integer.
          type: string
        Name:
          description: The current state of the instance.
          type: string
    Ebs:
      description: |-
        Parameters for a block device for an EBS volume in an Amazon EC2 launch template.
          ``Ebs`` is a property of [AWS::EC2::LaunchTemplate BlockDeviceMapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html).
      additionalProperties: false
      type: object
      properties:
        SnapshotId:
          description: The ID of the snapshot.
          type: string
        VolumeType:
          description: The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html) in the *Amazon EBS User Guide*.
          type: string
        KmsKeyId:
          description: Identifier (key ID, key alias, key ARN, or alias ARN) of the customer managed KMS key to use for EBS encryption.
          type: string
        Encrypted:
          description: Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
          type: boolean
        Throughput:
          description: |-
            The throughput to provision for a ``gp3`` volume, with a maximum of 1,000 MiB/s.
             Valid Range: Minimum value of 125. Maximum value of 1000.
          type: integer
        Iops:
          description: |-
            The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
             The following are the supported values for each volume type:
              +   ``gp3``: 3,000 - 16,000 IOPS
              +   ``io1``: 100 - 64,000 IOPS
              +   ``io2``: 100 - 256,000 IOPS
              
             For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other instances, you can achieve performance up to 32,000 IOPS.
             This parameter is supported for ``io1``, ``io2``, and ``gp3`` volumes only.
          type: integer
        VolumeSize:
          description: |-
            The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
              +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
              +   ``io1``: 4 - 16,384 GiB
              +   ``io2``: 4 - 65,536 GiB
              +   ``st1`` and ``sc1``: 125 - 16,384 GiB
              +   ``standard``: 1 - 1024 GiB
          type: integer
        DeleteOnTermination:
          description: Indicates whether the EBS volume is deleted on instance termination.
          type: boolean
    Instance:
      type: object
      properties:
        Tenancy:
          description: The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
          type: string
        SecurityGroups:
          uniqueItems: false
          description: the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
          x-insertionOrder: false
          type: array
          items:
            type: string
        PrivateDnsName:
          description: 'The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.'
          type: string
        PrivateIpAddress:
          description: '[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.'
          type: string
        UserData:
          description: The user data to make available to the instance.
          type: string
        BlockDeviceMappings:
          uniqueItems: false
          description: The block device mapping entries that defines the block devices to attach to the instance at launch.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/BlockDeviceMapping'
        IamInstanceProfile:
          description: The IAM instance profile.
          type: string
        Ipv6Addresses:
          uniqueItems: false
          description: '[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.'
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/InstanceIpv6Address'
        KernelId:
          description: The ID of the kernel.
          type: string
        SubnetId:
          description: |+
            [EC2-VPC] The ID of the subnet to launch the instance into.

          type: string
        EbsOptimized:
          description: Indicates whether the instance is optimized for Amazon EBS I/O.
          type: boolean
        PropagateTagsToVolumeOnCreation:
          description: Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
          type: boolean
        ElasticGpuSpecifications:
          uniqueItems: false
          description: An elastic GPU to associate with the instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ElasticGpuSpecification'
        ElasticInferenceAccelerators:
          uniqueItems: false
          description: An elastic inference accelerator to associate with the instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ElasticInferenceAccelerator'
        Volumes:
          uniqueItems: false
          description: The volumes to attach to the instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Volume'
        PrivateIp:
          description: 'The private IP address of the specified instance. For example: 10.24.34.0.'
          type: string
        Ipv6AddressCount:
          description: '[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.'
          type: integer
        LaunchTemplate:
          description: The launch template to use to launch the instances.
          type: object
          $ref: '#/components/schemas/LaunchTemplateSpecification'
        EnclaveOptions:
          description: Indicates whether the instance is enabled for AWS Nitro Enclaves.
          additionalProperties: false
          type: object
          properties:
            Enabled:
              description: If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
              type: boolean
        NetworkInterfaces:
          uniqueItems: false
          description: The network interfaces to associate with the instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
        ImageId:
          description: The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
          type: string
        InstanceType:
          description: The instance type.
          type: string
        Monitoring:
          description: Specifies whether detailed monitoring is enabled for the instance.
          type: boolean
        Tags:
          uniqueItems: false
          description: The tags to add to the instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        AdditionalInfo:
          description: 'This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).'
          type: string
        HibernationOptions:
          description: Indicates whether an instance is enabled for hibernation.
          additionalProperties: false
          type: object
          properties:
            Configured:
              default: false
              description: If you set this parameter to true, your instance is enabled for hibernation.
              type: boolean
        LicenseSpecifications:
          uniqueItems: false
          description: The license configurations.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/LicenseSpecification'
        InstanceId:
          description: The EC2 Instance ID.
          type: string
        PublicIp:
          description: 'The public IP address of the specified instance. For example: 192.0.2.0.'
          type: string
        InstanceInitiatedShutdownBehavior:
          description: Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
          type: string
        CpuOptions:
          description: The CPU options for the instance.
          additionalProperties: false
          type: object
          properties:
            ThreadsPerCore:
              type: integer
            CoreCount:
              type: integer
        AvailabilityZone:
          description: The Availability Zone of the instance.
          type: string
        PrivateDnsNameOptions:
          description: The options for the instance hostname.
          type: object
          $ref: '#/components/schemas/PrivateDnsNameOptions'
        HostId:
          description: If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
          type: string
        HostResourceGroupArn:
          description: The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
          type: string
        PublicDnsName:
          description: 'The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.'
          type: string
        SecurityGroupIds:
          uniqueItems: false
          description: The IDs of the security groups.
          x-insertionOrder: false
          type: array
          items:
            type: string
        DisableApiTermination:
          description: If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.
          type: boolean
        KeyName:
          description: The name of the key pair.
          type: string
        RamdiskId:
          description: The ID of the RAM disk to select.
          type: string
        SourceDestCheck:
          description: Specifies whether to enable an instance launched in a VPC to perform NAT.
          type: boolean
        PlacementGroupName:
          description: The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
          type: string
        SsmAssociations:
          uniqueItems: false
          description: The SSM document and parameter values in AWS Systems Manager to associate with this instance.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/SsmAssociation'
        VpcId:
          description: The ID of the VPC that the instance is running in.
          type: string
        State:
          description: The current state of the instance.
          type: object
          $ref: '#/components/schemas/State'
        Affinity:
          description: Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.
          type: string
          enum:
            - default
            - host
        CreditSpecification:
          description: The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
          additionalProperties: false
          type: object
          properties:
            CPUCredits:
              type: string
      x-stackql-resource-name: instance
      description: Resource Type definition for AWS::EC2::Instance
      x-type-name: AWS::EC2::Instance
      x-stackql-primary-identifier:
        - InstanceId
      x-create-only-properties:
        - AvailabilityZone
        - CpuOptions
        - ElasticGpuSpecifications
        - ElasticInferenceAccelerators
        - EnclaveOptions
        - HibernationOptions
        - HostResourceGroupArn
        - ImageId
        - Ipv6AddressCount
        - Ipv6Addresses
        - KeyName
        - LaunchTemplate
        - LicenseSpecifications
        - NetworkInterfaces
        - PlacementGroupName
        - PrivateIpAddress
        - SecurityGroups
        - SubnetId
      x-conditional-create-only-properties:
        - AdditionalInfo
        - Affinity
        - EbsOptimized
        - HostId
        - InstanceType
        - KernelId
        - PrivateDnsNameOptions
        - RamdiskId
        - SecurityGroupIds
        - Tenancy
        - UserData
        - BlockDeviceMappings
      x-write-only-properties:
        - BlockDeviceMappings/*/NoDevice
        - BlockDeviceMappings/*/VirtualName
        - LicenseSpecification
        - AdditionalInfo
        - Ipv6AddressCount
        - Ipv6Addresses
        - PropagateTagsToVolumeOnCreation
        - LaunchTemplate
      x-read-only-properties:
        - InstanceId
        - PrivateIp
        - PublicDnsName
        - PublicIp
        - PrivateDnsName
        - VpcId
        - State
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeElasticGpus
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVolumes
          - ec2:DescribeInstances
          - ec2:DescribeInstanceAttribute
          - ec2:DescribeInstanceCreditSpecifications
          - ec2:DescribeLaunchTemplates
          - elastic-inference:DescribeAccelerators
          - ssm:DescribeAssociation
          - ssm:ListAssociations
        create:
          - iam:PassRole
          - ec2:ModifyPrivateDnsNameOptions
          - ec2:DescribeElasticGpus
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVolumes
          - ec2:RunInstances
          - ec2:AssociateIamInstanceProfile
          - ec2:DescribeIamInstanceProfileAssociations
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeKeyPairs
          - ec2:DescribeSecurityGroups
          - ec2:DescribeVpcs
          - ec2:DescribeInstanceAttribute
          - ec2:DescribeInstanceCreditSpecifications
          - ec2:DescribeLaunchTemplates
          - ec2:DescribeLaunchTemplateVersions
          - ec2:DetachVolume
          - ec2:DisassociateIamInstanceProfile
          - ec2:ModifyInstanceAttribute
          - ec2:ModifyInstanceCreditSpecification
          - ec2:ModifyInstancePlacement
          - ec2:MonitorInstances
          - ec2:AttachVolume
          - ec2:CreateTags
          - ec2:ReplaceIamInstanceProfileAssociation
          - ec2:StartInstances
          - elastic-inference:DescribeAccelerators
          - ssm:CreateAssociation
          - ssm:DescribeAssociation
          - ssm:ListAssociations
        update:
          - ec2:DescribeElasticGpus
          - ec2:ModifyPrivateDnsNameOptions
          - ec2:DescribeNetworkInterfaces
          - ec2:AssociateIamInstanceProfile
          - ec2:DescribeIamInstanceProfileAssociations
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeKeyPairs
          - ec2:DescribeSecurityGroups
          - ec2:DescribeVpcs
          - ec2:DescribeInstanceAttribute
          - ec2:DescribeInstanceCreditSpecifications
          - ec2:DescribeLaunchTemplates
          - ec2:DetachVolume
          - ec2:DisassociateIamInstanceProfile
          - ec2:ModifyInstanceAttribute
          - ec2:ModifyInstanceCreditSpecification
          - ec2:ModifyInstanceMaintenanceOptions
          - ec2:ModifyInstancePlacement
          - ec2:MonitorInstances
          - ec2:AttachVolume
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:ReplaceIamInstanceProfileAssociation
          - ec2:StartInstances
          - ec2:StopInstances
          - ec2:UnmonitorInstances
          - elastic-inference:DescribeAccelerators
          - ssm:CreateAssociation
          - ssm:DeleteAssociation
          - ssm:DescribeAssociation
          - ssm:ListAssociations
        list:
          - ec2:DescribeInstances
        delete:
          - ec2:DescribeInstances
          - ec2:TerminateInstances
          - ec2:DescribeElasticGpus
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeVolumes
          - ec2:DescribeInstances
          - ec2:DescribeInstanceAttribute
          - ec2:DescribeInstanceCreditSpecifications
          - ec2:DescribeLaunchTemplates
          - elastic-inference:DescribeAccelerators
          - ssm:DescribeAssociation
          - ssm:ListAssociations
    InstanceConnectEndpoint:
      type: object
      properties:
        Id:
          description: The id of the instance connect endpoint
          type: string
        SubnetId:
          description: The subnet id of the instance connect endpoint
          type: string
        ClientToken:
          description: The client token of the instance connect endpoint.
          type: string
        PreserveClientIp:
          description: If true, the address of the instance connect endpoint client is preserved when connecting to the end resource
          type: boolean
        Tags:
          description: The tags of the instance connect endpoint.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SecurityGroupIds:
          description: The security group IDs of the instance connect endpoint.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SecurityGroupId'
      required:
        - SubnetId
      x-stackql-resource-name: instance_connect_endpoint
      description: Resource Type definition for AWS::EC2::InstanceConnectEndpoint
      x-type-name: AWS::EC2::InstanceConnectEndpoint
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - SubnetId
        - ClientToken
        - PreserveClientIp
        - SecurityGroupIds
      x-write-only-properties:
        - ClientToken
      x-read-only-properties:
        - Id
      x-required-properties:
        - SubnetId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:CreateInstanceConnectEndpoint
          - ec2:DescribeInstanceConnectEndpoints
          - ec2:CreateTags
          - ec2:CreateNetworkInterface
          - iam:CreateServiceLinkedRole
        read:
          - ec2:DescribeInstanceConnectEndpoints
        update:
          - ec2:DescribeInstanceConnectEndpoints
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteInstanceConnectEndpoint
          - ec2:DescribeInstanceConnectEndpoints
        list:
          - ec2:DescribeInstanceConnectEndpoints
    InternetGateway:
      type: object
      properties:
        InternetGatewayId:
          description: ''
          type: string
        Tags:
          description: Any tags to assign to the internet gateway.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: internet_gateway
      description: Allocates an internet gateway for use with a VPC. After creating the Internet gateway, you then attach it to a VPC.
      x-type-name: AWS::EC2::InternetGateway
      x-stackql-primary-identifier:
        - InternetGatewayId
      x-read-only-properties:
        - InternetGatewayId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateInternetGateway
          - ec2:CreateTags
          - ec2:DescribeInternetGateways
        read:
          - ec2:DescribeInternetGateways
        delete:
          - ec2:DeleteInternetGateway
          - ec2:DescribeInternetGateways
        update:
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:DescribeInternetGateways
        list:
          - ec2:DescribeInternetGateways
    IpamOperatingRegion:
      description: The regions IPAM Resource Discovery is enabled for. Allows for monitoring.
      type: object
      properties:
        RegionName:
          type: string
          description: The name of the region.
      required:
        - RegionName
      additionalProperties: false
    IPAM:
      type: object
      properties:
        IpamId:
          description: Id of the IPAM.
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM.
          type: string
        DefaultResourceDiscoveryId:
          description: The Id of the default resource discovery, created with this IPAM.
          type: string
        DefaultResourceDiscoveryAssociationId:
          description: The Id of the default association to the default resource discovery, created with this IPAM.
          type: string
        ResourceDiscoveryAssociationCount:
          description: The count of resource discoveries associated with this IPAM.
          type: integer
        Description:
          type: string
        PublicDefaultScopeId:
          description: The Id of the default scope for publicly routable IP space, created with this IPAM.
          type: string
          maxLength: 255
        PrivateDefaultScopeId:
          description: The Id of the default scope for publicly routable IP space, created with this IPAM.
          type: string
        ScopeCount:
          description: The number of scopes that currently exist in this IPAM.
          type: integer
        OperatingRegions:
          description: The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/IpamOperatingRegion'
        Tier:
          description: The tier of the IPAM.
          type: string
          enum:
            - free
            - advanced
        EnablePrivateGua:
          description: Enable provisioning of GUA space in private pools.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: ipam
      description: Resource Schema of AWS::EC2::IPAM Type
      x-type-name: AWS::EC2::IPAM
      x-stackql-primary-identifier:
        - IpamId
      x-read-only-properties:
        - IpamId
        - Arn
        - PublicDefaultScopeId
        - PrivateDefaultScopeId
        - ScopeCount
        - ResourceDiscoveryAssociationCount
        - DefaultResourceDiscoveryId
        - DefaultResourceDiscoveryAssociationId
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateIpam
          - iam:CreateServiceLinkedRole
          - ec2:CreateTags
          - ec2:DescribeIpams
        read:
          - ec2:DescribeIpams
        update:
          - ec2:ModifyIpam
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeIpams
        delete:
          - ec2:DeleteIpam
          - ec2:DeleteTags
          - ec2:DescribeIpams
        list:
          - ec2:DescribeIpams
    Cidr:
      description: Represents a single IPv4 or IPv6 CIDR
      type: string
    IPAMAllocation:
      type: object
      properties:
        IpamPoolAllocationId:
          description: Id of the allocation.
          type: string
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        Cidr:
          $ref: '#/components/schemas/Cidr'
        NetmaskLength:
          description: The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
          type: integer
        Description:
          type: string
      required:
        - IpamPoolId
      x-stackql-resource-name: ipam_allocation
      description: Resource Schema of AWS::EC2::IPAMAllocation Type
      x-type-name: AWS::EC2::IPAMAllocation
      x-stackql-primary-identifier:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      x-create-only-properties:
        - IpamPoolId
        - Cidr
        - Description
        - NetmaskLength
      x-write-only-properties:
        - NetmaskLength
      x-read-only-properties:
        - IpamPoolAllocationId
      x-required-properties:
        - IpamPoolId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AllocateIpamPoolCidr
          - ec2:GetIpamPoolAllocations
        read:
          - ec2:GetIpamPoolAllocations
        delete:
          - ec2:ReleaseIpamPoolAllocation
        list:
          - ec2:GetIpamPoolAllocations
    ProvisionedCidr:
      description: An address space to be inserted into this pool. All allocations must be made from this address space.
      type: object
      properties:
        Cidr:
          $ref: '#/components/schemas/Cidr'
      required:
        - Cidr
      additionalProperties: false
    SourceResource:
      description: The resource associated with this pool's space. Depending on the ResourceType, setting a SourceResource changes which space can be provisioned in this pool and which types of resources can receive allocations
      type: object
      properties:
        ResourceId:
          type: string
        ResourceType:
          type: string
        ResourceRegion:
          type: string
        ResourceOwner:
          type: string
      required:
        - ResourceId
        - ResourceType
        - ResourceRegion
        - ResourceOwner
      additionalProperties: false
    IPAMPool:
      type: object
      properties:
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        AddressFamily:
          description: The address family of the address space in this pool. Either IPv4 or IPv6.
          type: string
        AllocationMinNetmaskLength:
          description: The minimum allowed netmask length for allocations made from this pool.
          type: integer
        AllocationDefaultNetmaskLength:
          description: The default netmask length for allocations made from this pool. This value is used when the netmask length of an allocation isn't specified.
          type: integer
        AllocationMaxNetmaskLength:
          description: The maximum allowed netmask length for allocations made from this pool.
          type: integer
        AllocationResourceTags:
          description: When specified, an allocation will not be allowed unless a resource has a matching set of tags.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM Pool.
          type: string
        AutoImport:
          description: Determines what to do if IPAM discovers resources that haven't been assigned an allocation. If set to true, an allocation will be made automatically.
          type: boolean
        AwsService:
          description: Limits which service in Amazon Web Services that the pool can be used in.
          type: string
          enum:
            - ec2
        Description:
          type: string
        IpamScopeId:
          description: The Id of the scope this pool is a part of.
          type: string
        IpamScopeArn:
          description: The Amazon Resource Name (ARN) of the scope this pool is a part of.
          type: string
        IpamScopeType:
          description: Determines whether this scope contains publicly routable space or space for a private network
          type: string
          enum:
            - public
            - private
        IpamArn:
          description: The Amazon Resource Name (ARN) of the IPAM this pool is a part of.
          type: string
        Locale:
          description: The region of this pool. If not set, this will default to "None" which will disable non-custom allocations. If the locale has been specified for the source pool, this value must match.
          type: string
        PoolDepth:
          description: The depth of this pool in the source pool hierarchy.
          type: integer
        ProvisionedCidrs:
          description: A list of cidrs representing the address space available for allocation in this pool.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ProvisionedCidr'
        PublicIpSource:
          description: The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is `byoip`.
          type: string
          enum:
            - byoip
            - amazon
        PubliclyAdvertisable:
          description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
          type: boolean
        SourceIpamPoolId:
          description: The Id of this pool's source. If set, all space provisioned in this pool must be free space provisioned in the parent pool.
          type: string
        SourceResource:
          $ref: '#/components/schemas/SourceResource'
        State:
          description: 'The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"'
          type: string
          enum:
            - create-in-progress
            - create-complete
            - modify-in-progress
            - modify-complete
            - delete-in-progress
            - delete-complete
        StateMessage:
          description: An explanation of how the pool arrived at it current state.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamScopeId
        - AddressFamily
      x-stackql-resource-name: ipam_pool
      description: Resource Schema of AWS::EC2::IPAMPool Type
      x-type-name: AWS::EC2::IPAMPool
      x-stackql-primary-identifier:
        - IpamPoolId
      x-create-only-properties:
        - IpamScopeId
        - SourceIpamPoolId
        - Locale
        - AddressFamily
        - PubliclyAdvertisable
        - PublicIpSource
        - AwsService
        - SourceResource
      x-read-only-properties:
        - IpamPoolId
        - Arn
        - IpamScopeArn
        - IpamScopeType
        - IpamArn
        - PoolDepth
        - State
        - StateMessage
      x-required-properties:
        - IpamScopeId
        - AddressFamily
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateIpamPool
          - ec2:DescribeIpamPools
          - ec2:ProvisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
        update:
          - ec2:ModifyIpamPool
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
          - ec2:ProvisionIpamPoolCidr
          - ec2:DeprovisionIpamPoolCidr
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamPool
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
          - ec2:DeprovisionIpamPoolCidr
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamPools
    IPAMPoolCidr:
      type: object
      properties:
        IpamPoolCidrId:
          description: Id of the IPAM Pool Cidr.
          type: string
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        Cidr:
          description: Represents a single IPv4 or IPv6 CIDR
          type: string
        NetmaskLength:
          description: The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
          type: integer
        State:
          description: Provisioned state of the cidr.
          type: string
      required:
        - IpamPoolId
      x-stackql-resource-name: ipam_pool_cidr
      description: Resource Schema of AWS::EC2::IPAMPoolCidr Type
      x-type-name: AWS::EC2::IPAMPoolCidr
      x-stackql-primary-identifier:
        - IpamPoolId
        - IpamPoolCidrId
      x-create-only-properties:
        - IpamPoolId
        - Cidr
        - NetmaskLength
      x-read-only-properties:
        - IpamPoolCidrId
        - State
      x-required-properties:
        - IpamPoolId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:ProvisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
        read:
          - ec2:GetIpamPoolCidrs
        delete:
          - ec2:DeprovisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
        list:
          - ec2:GetIpamPoolCidrs
    IPAMResourceDiscovery:
      type: object
      properties:
        IpamResourceDiscoveryId:
          description: Id of the IPAM Pool.
          type: string
        OwnerId:
          description: Owner Account ID of the Resource Discovery
          type: string
        OperatingRegions:
          description: The regions Resource Discovery is enabled for. Allows resource discoveries to be created in these regions, as well as enabling monitoring
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/IpamOperatingRegion'
        IpamResourceDiscoveryRegion:
          description: 'The region the resource discovery is setup in. '
          type: string
        Description:
          type: string
        IsDefault:
          description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
          type: boolean
        IpamResourceDiscoveryArn:
          description: Amazon Resource Name (Arn) for the Resource Discovery.
          type: string
        State:
          description: The state of this Resource Discovery.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: ipam_resource_discovery
      description: Resource Schema of AWS::EC2::IPAMResourceDiscovery Type
      x-type-name: AWS::EC2::IPAMResourceDiscovery
      x-stackql-primary-identifier:
        - IpamResourceDiscoveryId
      x-read-only-properties:
        - IpamResourceDiscoveryId
        - IpamResourceDiscoveryArn
        - OwnerId
        - IpamResourceDiscoveryRegion
        - IsDefault
        - State
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamResourceDiscoveries
        update:
          - ec2:ModifyIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamResourceDiscoveries
    IPAMResourceDiscoveryAssociation:
      type: object
      properties:
        IpamArn:
          description: Arn of the IPAM.
          type: string
        IpamRegion:
          description: The home region of the IPAM.
          type: string
        IpamResourceDiscoveryAssociationId:
          description: Id of the IPAM Resource Discovery Association.
          type: string
        IpamResourceDiscoveryId:
          description: The Amazon Resource Name (ARN) of the IPAM Resource Discovery Association.
          type: string
        IpamId:
          description: The Id of the IPAM this Resource Discovery is associated to.
          type: string
        IpamResourceDiscoveryAssociationArn:
          description: The Amazon Resource Name (ARN) of the resource discovery association is a part of.
          type: string
        IsDefault:
          description: If the Resource Discovery Association exists due as part of CreateIpam.
          type: boolean
        OwnerId:
          description: The AWS Account ID for the account where the shared IPAM exists.
          type: string
        State:
          description: The operational state of the Resource Discovery Association. Related to Create/Delete activities.
          type: string
        ResourceDiscoveryStatus:
          description: The status of the resource discovery.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamId
        - IpamResourceDiscoveryId
      x-stackql-resource-name: ipam_resource_discovery_association
      description: Resource Schema of AWS::EC2::IPAMResourceDiscoveryAssociation Type
      x-type-name: AWS::EC2::IPAMResourceDiscoveryAssociation
      x-stackql-primary-identifier:
        - IpamResourceDiscoveryAssociationId
      x-create-only-properties:
        - IpamId
        - IpamResourceDiscoveryId
      x-read-only-properties:
        - IpamArn
        - IpamRegion
        - IpamResourceDiscoveryAssociationId
        - IpamResourceDiscoveryAssociationArn
        - IsDefault
        - ResourceDiscoveryStatus
        - State
        - OwnerId
      x-required-properties:
        - IpamId
        - IpamResourceDiscoveryId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:AssociateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamResourceDiscoveryAssociations
        update:
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DisassociateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamResourceDiscoveryAssociations
    IPAMScope:
      type: object
      properties:
        IpamScopeId:
          description: Id of the IPAM scope.
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM scope.
          type: string
        IpamId:
          description: The Id of the IPAM this scope is a part of.
          type: string
        IpamArn:
          description: The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
          type: string
        IpamScopeType:
          description: Determines whether this scope contains publicly routable space or space for a private network
          type: string
          enum:
            - public
            - private
        IsDefault:
          description: Is this one of the default scopes created with the IPAM.
          type: boolean
        Description:
          type: string
        PoolCount:
          description: The number of pools that currently exist in this scope.
          type: integer
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamId
      x-stackql-resource-name: ipam_scope
      description: Resource Schema of AWS::EC2::IPAMScope Type
      x-type-name: AWS::EC2::IPAMScope
      x-stackql-primary-identifier:
        - IpamScopeId
      x-create-only-properties:
        - IpamId
      x-read-only-properties:
        - IpamScopeId
        - Arn
        - IpamArn
        - IsDefault
        - PoolCount
        - IpamScopeType
      x-required-properties:
        - IpamId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateIpamScope
          - ec2:DescribeIpamScopes
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamScopes
        update:
          - ec2:ModifyIpamScope
          - ec2:DescribeIpamScopes
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamScope
          - ec2:DescribeIpamScopes
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamScopes
    KeyPair:
      type: object
      properties:
        KeyName:
          description: |-
            A unique name for the key pair.
             Constraints: Up to 255 ASCII characters
          type: string
        KeyType:
          description: |-
            The type of key pair. Note that ED25519 keys are not supported for Windows instances.
             If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
             Default: ``rsa``
          type: string
          default: rsa
          enum:
            - rsa
            - ed25519
        KeyFormat:
          description: |-
            The format of the key pair.
             Default: ``pem``
          type: string
          default: pem
          enum:
            - pem
            - ppk
        PublicKeyMaterial:
          description: The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
          type: string
        KeyFingerprint:
          description: ''
          type: string
        KeyPairId:
          description: ''
          type: string
        Tags:
          description: The tags to apply to the key pair.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - KeyName
      x-stackql-resource-name: key_pair
      description: |-
        Specifies a key pair for use with an EC2long instance as follows:
          +  To import an existing key pair, include the ``PublicKeyMaterial`` property.
          +  To create a new key pair, omit the ``PublicKeyMaterial`` property.
          
         When you import an existing key pair, you specify the public key material for the key. We assume that you have the private key material for the key. CFNlong does not create or return the private key material when you import a key pair.
         When you create a new key pair, the private key is saved to SYSlong Parameter Store, using a parameter with the following name: ``/ec2/keypair/{key_pair_id}``. For more information about retrieving private key, and the required permissions, see [Create a key pair using](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html#create-key-pair-cloudformation) in the *User Guide*.
         When CFN deletes a key pair that was created or imported by a stack, it also deletes the parameter that was used to store the private key material in Parameter Store.
      x-type-name: AWS::EC2::KeyPair
      x-stackql-primary-identifier:
        - KeyName
      x-stackql-additional-identifiers:
        - - KeyPairId
      x-create-only-properties:
        - KeyName
        - KeyType
        - KeyFormat
        - PublicKeyMaterial
        - Tags
      x-write-only-properties:
        - KeyFormat
      x-read-only-properties:
        - KeyPairId
        - KeyFingerprint
      x-required-properties:
        - KeyName
      x-tagging:
        taggable: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateKeyPair
          - ec2:ImportKeyPair
          - ec2:CreateTags
          - ssm:PutParameter
        read:
          - ec2:DescribeKeyPairs
        list:
          - ec2:DescribeKeyPairs
        delete:
          - ec2:DeleteKeyPair
          - ssm:DeleteParameter
          - ec2:DescribeKeyPairs
    LaunchTemplateData:
      description: |-
        The information to include in the launch template.
          You must specify at least one parameter for the launch template data.
      additionalProperties: false
      type: object
      properties:
        SecurityGroups:
          uniqueItems: false
          description: |-
            The names of the security groups. For a nondefault VPC, you must use security group IDs instead.
             If you specify a network interface, you must specify any security groups as part of the network interface instead of using this parameter.
          type: array
          items:
            type: string
        TagSpecifications:
          uniqueItems: false
          description: |-
            The tags to apply to resources that are created during instance launch.
             To tag the launch template itself, use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-tagspecifications).
          type: array
          items:
            $ref: '#/components/schemas/TagSpecification'
        NetworkPerformanceOptions:
          description: ''
        UserData:
          description: |-
            The user data to make available to the instance. You must provide base64-encoded text. User data is limited to 16 KB. For more information, see [Run commands on your Amazon EC2 instance at launch](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) in the *Amazon EC2 User Guide*.
             If you are creating the launch template for use with BATCH, the user data must be provided in the [MIME multi-part archive format](https://docs.aws.amazon.com/https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive). For more information, see [Amazon EC2 user data in launch templates](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the *User Guide*.
          type: string
        BlockDeviceMappings:
          uniqueItems: false
          description: The block device mapping.
          type: array
          items:
            $ref: '#/components/schemas/BlockDeviceMapping'
        MaintenanceOptions:
          description: The maintenance options of your instance.
          $ref: '#/components/schemas/MaintenanceOptions'
        IamInstanceProfile:
          description: The name or Amazon Resource Name (ARN) of an IAM instance profile.
          $ref: '#/components/schemas/IamInstanceProfile'
        KernelId:
          description: |-
            The ID of the kernel.
             We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User Provided Kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon EC2 User Guide*.
          type: string
        EbsOptimized:
          description: Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
          type: boolean
        ElasticGpuSpecifications:
          uniqueItems: false
          description: |-
            Deprecated.
              Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.
          type: array
          items:
            $ref: '#/components/schemas/ElasticGpuSpecification'
        ElasticInferenceAccelerators:
          uniqueItems: false
          description: |-
            Amazon Elastic Inference is no longer available.
              An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.
             You cannot specify accelerators from different generations in the same request.
              Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
          type: array
          items:
            $ref: '#/components/schemas/LaunchTemplateElasticInferenceAccelerator'
        Placement:
          description: The placement for the instance.
          $ref: '#/components/schemas/Placement'
        NetworkInterfaces:
          uniqueItems: false
          description: The network interfaces for the instance.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
        EnclaveOptions:
          description: |-
            Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see [What is Nitro Enclaves?](https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the *Nitro Enclaves User Guide*.
             You can't enable AWS Nitro Enclaves and hibernation on the same instance.
          $ref: '#/components/schemas/EnclaveOptions'
        ImageId:
          description: |-
            The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
             Valid formats:
              +   ``ami-0ac394d6a3example`` 
              +   ``resolve:ssm:parameter-name`` 
              +   ``resolve:ssm:parameter-name:version-number`` 
              +   ``resolve:ssm:parameter-name:label`` 
              
             For more information, see [Use a Systems Manager parameter to find an AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html#using-systems-manager-parameter-to-find-AMI) in the *Amazon Elastic Compute Cloud User Guide*.
          type: string
        InstanceType:
          description: |-
            The instance type. For more information, see [Amazon EC2 instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide*.
             If you specify ``InstanceType``, you can't specify ``InstanceRequirements``.
          type: string
        Monitoring:
          description: The monitoring for the instance.
          $ref: '#/components/schemas/Monitoring'
        HibernationOptions:
          description: Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html). For more information, see [Hibernate your Amazon EC2 instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon EC2 User Guide*.
          $ref: '#/components/schemas/HibernationOptions'
        MetadataOptions:
          description: The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon EC2 User Guide*.
          $ref: '#/components/schemas/MetadataOptions'
        LicenseSpecifications:
          uniqueItems: false
          description: The license configurations.
          type: array
          items:
            $ref: '#/components/schemas/LicenseSpecification'
        InstanceInitiatedShutdownBehavior:
          description: |-
            Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
             Default: ``stop``
          type: string
        DisableApiStop:
          description: Indicates whether to enable the instance for stop protection. For more information, see [Enable stop protection for your instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-stop-protection.html) in the *Amazon EC2 User Guide*.
          type: boolean
        CpuOptions:
          description: The CPU options for the instance. For more information, see [Optimize CPU options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *Amazon EC2 User Guide*.
          $ref: '#/components/schemas/CpuOptions'
        PrivateDnsNameOptions:
          description: The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
          $ref: '#/components/schemas/PrivateDnsNameOptions'
        SecurityGroupIds:
          uniqueItems: false
          description: |-
            The IDs of the security groups. You can specify the IDs of existing security groups and references to resources created by the stack template.
             If you specify a network interface, you must specify any security groups as part of the network interface instead.
          type: array
          items:
            type: string
        KeyName:
          description: |-
            The name of the key pair. You can create a key pair using [CreateKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or [ImportKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).
              If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
          type: string
        DisableApiTermination:
          description: If you set this parameter to ``true``, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use [ModifyInstanceAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set ``InstanceInitiatedShutdownBehavior`` to ``terminate``, you can terminate the instance by running the shutdown command from the instance.
          type: boolean
        InstanceMarketOptions:
          description: The market (purchasing) option for the instances.
          $ref: '#/components/schemas/InstanceMarketOptions'
        InstanceRequirements:
          description: |-
            The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
             You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
             When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
             To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
              +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
              +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
              
              If you specify ``InstanceRequirements``, you can't specify ``InstanceType``.
             Attribute-based instance type selection is only supported when using Auto Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan to use the launch template in the [launch instance wizard](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html), or with the [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API or [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) AWS CloudFormation resource, you can't specify ``InstanceRequirements``.
              For more information, see [Specify attributes for instance type selection for EC2 Fleet or Spot Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html) and [Spot placement score](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html) in the *Amazon EC2 User Guide*.
          $ref: '#/components/schemas/InstanceRequirements'
        RamDiskId:
          description: |-
            The ID of the RAM disk.
              We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon EC2 User Guide*.
          type: string
        CapacityReservationSpecification:
          description: The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to ``open``, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
          $ref: '#/components/schemas/CapacityReservationSpecification'
        CreditSpecification:
          description: The credit option for CPU usage of the instance. Valid only for T instances.
          $ref: '#/components/schemas/CreditSpecification'
    Ipv6Add:
      description: |-
        Specifies an IPv6 address in an Amazon EC2 launch template.
          ``Ipv6Add`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
      additionalProperties: false
      type: object
      properties:
        Ipv6Address:
          description: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
          type: string
    MaintenanceOptions:
      description: The maintenance options of your instance.
      additionalProperties: false
      type: object
      properties:
        AutoRecovery:
          description: Disables the automatic recovery behavior of your instance or sets it to default.
          type: string
    Cpu:
      description: Specifies the CPU performance to consider when using an instance family as the baseline reference.
      additionalProperties: false
      type: object
      properties:
        References:
          description: The instance family to use as the baseline reference for CPU performance. All instance types that match your specified attributes are compared against the CPU performance of the referenced instance family, regardless of CPU manufacturer or architecture differences.
          $ref: '#/components/schemas/References'
    IamInstanceProfile:
      description: |-
        Specifies an IAM instance profile, which is a container for an IAM role for your instance. You can use an IAM role to distribute your AWS credentials to your instances.
         If you are creating the launch template for use with an ASlong group, you can specify either the name or the ARN of the instance profile, but not both.
          ``IamInstanceProfile`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the instance profile.
          type: string
        Name:
          description: The name of the instance profile.
          type: string
    MemoryGiBPerVCpu:
      description: The minimum and maximum amount of memory per vCPU, in GiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
          type: number
        Max:
          description: The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
          type: number
    VCpuCount:
      description: The minimum and maximum number of vCPUs.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of vCPUs. To specify no minimum limit, specify ``0``.
          type: integer
        Max:
          description: The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
          type: integer
    Ipv4PrefixSpecification:
      additionalProperties: false
      type: object
      properties:
        Ipv4Prefix:
          type: string
      required:
        - Ipv4Prefix
    EnaSrdSpecification:
      type: object
      additionalProperties: false
      properties:
        EnaSrdEnabled:
          type: boolean
          description: Indicates whether ENA Express is enabled for the network interface.
        EnaSrdUdpSpecification:
          type: object
          additionalProperties: false
          properties:
            EnaSrdUdpEnabled:
              type: boolean
          description: Configures ENA Express for UDP network traffic.
      description: |-
        ENA Express uses AWS Scalable Reliable Datagram (SRD) technology to increase the maximum bandwidth used per stream and minimize tail latency of network traffic between EC2 instances. With ENA Express, you can communicate between two EC2 instances in the same subnet within the same account, or in different accounts. Both sending and receiving instances must have ENA Express enabled.
         To improve the reliability of network packet delivery, ENA Express reorders network packets on the receiving end by default. However, some UDP-based applications are designed to handle network packets that are out of order to reduce the overhead for packet delivery at the network layer. When ENA Express is enabled, you can specify whether UDP network traffic uses it.
    EnclaveOptions:
      description: Indicates whether the instance is enabled for AWS Nitro Enclaves.
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: If this parameter is set to ``true``, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
          type: boolean
    MemoryMiB:
      description: The minimum and maximum amount of memory, in MiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of memory, in MiB. To specify no minimum limit, specify ``0``.
          type: integer
        Max:
          description: The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
          type: integer
    HibernationOptions:
      description: |-
        Specifies whether your instance is configured for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites). For more information, see [Hibernate Your Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon EC2 User Guide*.
          ``HibernationOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Configured:
          description: |-
            If you set this parameter to ``true``, the instance is enabled for hibernation.
             Default: ``false``
          type: boolean
    MetadataOptions:
      description: |-
        The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon EC2 User Guide*.
          ``MetadataOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        HttpPutResponseHopLimit:
          description: |-
            The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.
             Default: ``1`` 
             Possible values: Integers from 1 to 64
          type: integer
        HttpTokens:
          description: |-
            Indicates whether IMDSv2 is required.
              +   ``optional`` - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.
              +   ``required`` - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.
              
             Default: If the value of ``ImdsSupport`` for the Amazon Machine Image (AMI) for your instance is ``v2.0``, the default is ``required``.
          type: string
        HttpProtocolIpv6:
          description: |-
            Enables or disables the IPv6 endpoint for the instance metadata service.
             Default: ``disabled``
          type: string
        InstanceMetadataTags:
          description: |-
            Set to ``enabled`` to allow access to instance tags from the instance metadata. Set to ``disabled`` to turn off access to instance tags from the instance metadata. For more information, see [Work with instance tags using the instance metadata](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS).
             Default: ``disabled``
          type: string
        HttpEndpoint:
          description: |-
            Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is ``enabled``.
              If you specify a value of ``disabled``, you will not be able to access your instance metadata.
          type: string
    NetworkInterfaceCount:
      description: The minimum and maximum number of network interfaces.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
          type: integer
    Reference:
      description: Specifies an instance family to use as the baseline reference for CPU performance.
      additionalProperties: false
      type: object
      properties:
        InstanceFamily:
          description: |-
            The instance family to use as a baseline reference.
              Ensure that you specify the correct value for the instance family. The instance family is everything before the period (``.``) in the instance type name. For example, in the instance type ``c6i.large``, the instance family is ``c6i``, not ``c6``. For more information, see [Amazon EC2 instance type naming conventions](https://docs.aws.amazon.com/ec2/latest/instancetypes/instance-type-names.html) in *Amazon EC2 Instance Types*.
              The following instance families are *not supported* for performance protection:
              +   ``c1`` 
              +   ``g3`` | ``g3s`` 
              +   ``hpc7g`` 
              +   ``m1`` | ``m2`` 
              +   ``mac1`` | ``mac2`` | ``mac2-m1ultra`` | ``mac2-m2`` | ``mac2-m2pro`` 
              +   ``p3dn`` | ``p4d`` | ``p5`` 
              +   ``t1`` 
              +   ``u-12tb1`` | ``u-18tb1`` | ``u-24tb1`` | ``u-3tb1`` | ``u-6tb1`` | ``u-9tb1`` | ``u7i-12tb`` | ``u7in-16tb`` | ``u7in-24tb`` | ``u7in-32tb`` 
              
             If you enable performance protection by specifying a supported instance family, the returned instance types will exclude the above unsupported instance families.
          type: string
    CpuOptions:
      description: |-
        Specifies the CPU options for an instance. For more information, see [Optimize CPU options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *User Guide*.
          ``CpuOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        ThreadsPerCore:
          description: The number of threads per CPU core. To disable multithreading for the instance, specify a value of ``1``. Otherwise, specify the default value of ``2``.
          type: integer
        AmdSevSnp:
          description: Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. For more information, see [AMD SEV-SNP](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html).
          type: string
          enum:
            - enabled
            - disabled
        CoreCount:
          description: The number of CPU cores for the instance.
          type: integer
    SpotOptions:
      description: |-
        Specifies options for Spot Instances.
          ``SpotOptions`` is a property of [AWS::EC2::LaunchTemplate InstanceMarketOptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata-instancemarketoptions.html).
      additionalProperties: false
      type: object
      properties:
        SpotInstanceType:
          description: |-
            The Spot Instance request type.
             If you are using Spot Instances with an Auto Scaling group, use ``one-time`` requests, as the ASlong service handles requesting new Spot Instances whenever the group is below its desired capacity.
          type: string
        InstanceInterruptionBehavior:
          description: The behavior when a Spot Instance is interrupted. The default is ``terminate``.
          type: string
        MaxPrice:
          description: |-
            The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
              If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
          type: string
        BlockDurationMinutes:
          description: Deprecated.
          type: integer
        ValidUntil:
          description: |-
            The end date of the request, in UTC format (*YYYY-MM-DD*T*HH:MM:SS*Z). Supported only for persistent requests.
              +  For a persistent request, the request remains active until the ``ValidUntil`` date and time is reached. Otherwise, the request remains active until you cancel it.
              +  For a one-time request, ``ValidUntil`` is not supported. The request remains active until all instances launch or you cancel the request.
              
             Default: 7 days from the current date
          type: string
    PrivateIpAdd:
      description: |-
        Specifies a secondary private IPv4 address for a network interface.
          ``PrivateIpAdd`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
      additionalProperties: false
      type: object
      properties:
        PrivateIpAddress:
          description: The private IPv4 address.
          type: string
        Primary:
          description: Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
          type: boolean
    Ipv6PrefixSpecification:
      additionalProperties: false
      type: object
      properties:
        Ipv6Prefix:
          type: string
      required:
        - Ipv6Prefix
    LaunchTemplateTagSpecification:
      description: |-
        Specifies the tags to apply to the launch template during creation.
         To specify the tags for the resources that are created during instance launch, use [AWS::EC2::LaunchTemplate TagSpecification](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-tagspecification.html).
          ``LaunchTemplateTagSpecification`` is a property of [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html).
      additionalProperties: false
      type: object
      properties:
        ResourceType:
          description: The type of resource. To tag a launch template, ``ResourceType`` must be ``launch-template``.
          type: string
        Tags:
          uniqueItems: false
          description: The tags for the resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    EnaSrdUdpSpecification:
      description: ENA Express is compatible with both TCP and UDP transport protocols. When it's enabled, TCP traffic automatically uses it. However, some UDP-based applications are designed to handle network packets that are out of order, without a need for retransmission, such as live video broadcasting or other near-real-time applications. For UDP traffic, you can specify whether to use ENA Express, based on your application environment needs.
      additionalProperties: false
      type: object
      properties:
        EnaSrdUdpEnabled:
          description: Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting, you must first enable ENA Express.
          type: boolean
    NetworkBandwidthGbps:
      description: |-
        The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
          Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the *Amazon EC2 User Guide*.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of network bandwidth, in Gbps. If this parameter is not specified, there is no minimum limit.
          type: number
        Max:
          description: The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
          type: number
    AcceleratorCount:
      description: The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of accelerators. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
          type: integer
    InstanceMarketOptions:
      description: |-
        Specifies the market (purchasing) option for an instance.
          ``InstanceMarketOptions`` is a property of the [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        SpotOptions:
          description: The options for Spot Instances.
          $ref: '#/components/schemas/SpotOptions'
        MarketType:
          description: The market type.
          type: string
    References:
      uniqueItems: true
      description: A list of references to be used as baseline for the CPU performance. Currently, you can only specify a single reference across different instance type variations such as CPU manufacturers, architectures etc.
      x-insertionOrder: true
      type: array
      items:
        $ref: '#/components/schemas/Reference'
    BaselinePerformanceFactors:
      description: |-
        The baseline performance to consider, using an instance family as a baseline reference. The instance family establishes the lowest acceptable level of performance. Amazon EC2 uses this baseline to guide instance type selection, but there is no guarantee that the selected instance types will always exceed the baseline for every application.
         Currently, this parameter only supports CPU performance as a baseline performance factor. For example, specifying ``c6i`` would use the CPU performance of the ``c6i`` family as the baseline reference.
      additionalProperties: false
      type: object
      properties:
        Cpu:
          description: The CPU performance to consider, using an instance family as the baseline reference.
          $ref: '#/components/schemas/Cpu'
    LaunchTemplateElasticInferenceAccelerator:
      description: |-
        Specifies an elastic inference accelerator.
          ``LaunchTemplateElasticInferenceAccelerator`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
          type: string
        Count:
          description: |-
            The number of elastic inference accelerators to attach to the instance. 
             Default: 1
          type: integer
    BaselineEbsBandwidthMbps:
      description: The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
          type: integer
    InstanceRequirements:
      description: |-
        The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
         You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
         When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
         To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
          +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
          +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
          
          If you specify ``InstanceRequirements``, you can't specify ``InstanceType``.
         Attribute-based instance type selection is only supported when using Auto Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan to use the launch template in the [launch instance wizard](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html), or with the [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API or [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) AWS CloudFormation resource, you can't specify ``InstanceRequirements``.
          For more information, see [Specify attributes for instance type selection for EC2 Fleet or Spot Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html) and [Spot placement score](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html) in the *Amazon EC2 User Guide*.
      additionalProperties: false
      type: object
      properties:
        InstanceGenerations:
          uniqueItems: false
          description: |-
            Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide*.
             For current generation instance types, specify ``current``.
             For previous generation instance types, specify ``previous``.
             Default: Current and previous generation instance types
          type: array
          items:
            type: string
        MemoryGiBPerVCpu:
          description: |-
            The minimum and maximum amount of memory per vCPU, in GiB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/MemoryGiBPerVCpu'
        AcceleratorTypes:
          uniqueItems: false
          description: |-
            The accelerator types that must be on the instance type.
              +  For instance types with GPU accelerators, specify ``gpu``.
              +  For instance types with FPGA accelerators, specify ``fpga``.
              
             Default: Any accelerator type
          type: array
          items:
            type: string
        VCpuCount:
          description: The minimum and maximum number of vCPUs.
          $ref: '#/components/schemas/VCpuCount'
        AcceleratorManufacturers:
          uniqueItems: false
          description: |-
            Indicates whether instance types must have accelerators by specific manufacturers.
              +  For instance types with AWS devices, specify ``amazon-web-services``.
              +  For instance types with AMD devices, specify ``amd``.
              +  For instance types with Habana devices, specify ``habana``.
              +  For instance types with NVIDIA devices, specify ``nvidia``.
              +  For instance types with Xilinx devices, specify ``xilinx``.
              
             Default: Any manufacturer
          type: array
          items:
            type: string
        LocalStorage:
          description: |-
            Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide*.
              +  To include instance types with instance store volumes, specify ``included``.
              +  To require only instance types with instance store volumes, specify ``required``.
              +  To exclude instance types with instance store volumes, specify ``excluded``.
              
             Default: ``included``
          type: string
        CpuManufacturers:
          uniqueItems: false
          description: |-
            The CPU manufacturers to include.
              +  For instance types with Intel CPUs, specify ``intel``.
              +  For instance types with AMD CPUs, specify ``amd``.
              +  For instance types with AWS CPUs, specify ``amazon-web-services``.
              +  For instance types with Apple CPUs, specify ``apple``.
              
              Don't confuse the CPU manufacturer with the CPU architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
              Default: Any manufacturer
          type: array
          items:
            type: string
        BareMetal:
          description: |-
            Indicates whether bare metal instance types must be included, excluded, or required.
              +  To include bare metal instance types, specify ``included``.
              +  To require only bare metal instance types, specify ``required``.
              +  To exclude bare metal instance types, specify ``excluded``.
              
             Default: ``excluded``
          type: string
        RequireHibernateSupport:
          description: |-
            Indicates whether instance types must support hibernation for On-Demand Instances.
             This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html).
             Default: ``false``
          type: boolean
        MaxSpotPriceAsPercentageOfOptimalOnDemandPrice:
          description: >-
            [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation
            instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.
              Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
          type: integer
        OnDemandMaxPricePercentageOverLowestPrice:
          description: |-
            [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             To turn off price protection, specify a high value, such as ``999999``.
             This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html).
              If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
              Default: ``20``
          type: integer
        MemoryMiB:
          description: The minimum and maximum amount of memory, in MiB.
          $ref: '#/components/schemas/MemoryMiB'
        LocalStorageTypes:
          uniqueItems: false
          description: |-
            The type of local storage that is required.
              +  For instance types with hard disk drive (HDD) storage, specify ``hdd``.
              +  For instance types with solid state drive (SSD) storage, specify ``ssd``.
              
             Default: ``hdd`` and ``ssd``
          type: array
          items:
            type: string
        NetworkInterfaceCount:
          description: |-
            The minimum and maximum number of network interfaces.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/NetworkInterfaceCount'
        ExcludedInstanceTypes:
          uniqueItems: false
          description: |-
            The instance types to exclude.
             You can use strings with one or more wild cards, represented by an asterisk (``*``), to exclude an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
             For example, if you specify ``c5*``,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.
              If you specify ``ExcludedInstanceTypes``, you can't specify ``AllowedInstanceTypes``.
              Default: No excluded instance types
          type: array
          items:
            description: The user data to make available to the instance.
            type: string
        AllowedInstanceTypes:
          uniqueItems: false
          description: |-
            The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
             You can use strings with one or more wild cards, represented by an asterisk (``*``), to allow an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
             For example, if you specify ``c5*``,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.
              If you specify ``AllowedInstanceTypes``, you can't specify ``ExcludedInstanceTypes``.
              Default: All instance types
          type: array
          items:
            type: string
        AcceleratorCount:
          description: |-
            The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
             To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/AcceleratorCount'
        NetworkBandwidthGbps:
          description: |-
            The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/NetworkBandwidthGbps'
        BaselinePerformanceFactors:
          description: >-
            The baseline performance to consider, using an instance family as a baseline reference. The instance family establishes the lowest acceptable level of performance. Amazon EC2 uses this baseline to guide instance type selection, but there is no guarantee that the selected instance types will always exceed the baseline for every application. Currently, this parameter only supports CPU performance as a baseline performance factor. For more information, see [Performance
            protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-abis-performance-protection) in the *Amazon EC2 User Guide*.
          $ref: '#/components/schemas/BaselinePerformanceFactors'
        SpotMaxPricePercentageOverLowestPrice:
          description: >-
            [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous
            generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
             This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html).
              Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
              Default: ``100``
          type: integer
        BaselineEbsBandwidthMbps:
          description: |-
            The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/BaselineEbsBandwidthMbps'
        AcceleratorNames:
          uniqueItems: false
          description: |-
            The accelerators that must be on the instance type.
              +  For instance types with NVIDIA A10G GPUs, specify ``a10g``.
              +  For instance types with NVIDIA A100 GPUs, specify ``a100``.
              +  For instance types with NVIDIA H100 GPUs, specify ``h100``.
              +  For instance types with AWS Inferentia chips, specify ``inferentia``.
              +  For instance types with NVIDIA GRID K520 GPUs, specify ``k520``.
              +  For instance types with NVIDIA K80 GPUs, specify ``k80``.
              +  For instance types with NVIDIA M60 GPUs, specify ``m60``.
              +  For instance types with AMD Radeon Pro V520 GPUs, specify ``radeon-pro-v520``.
              +  For instance types with NVIDIA T4 GPUs, specify ``t4``.
              +  For instance types with NVIDIA T4G GPUs, specify ``t4g``.
              +  For instance types with Xilinx VU9P FPGAs, specify ``vu9p``.
              +  For instance types with NVIDIA V100 GPUs, specify ``v100``.
              
             Default: Any accelerator
          type: array
          items:
            type: string
        AcceleratorTotalMemoryMiB:
          description: |-
            The minimum and maximum amount of total accelerator memory, in MiB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/AcceleratorTotalMemoryMiB'
        BurstablePerformance:
          description: |-
            Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html).
              +  To include burstable performance instance types, specify ``included``.
              +  To require only burstable performance instance types, specify ``required``.
              +  To exclude burstable performance instance types, specify ``excluded``.
              
             Default: ``excluded``
          type: string
        TotalLocalStorageGB:
          description: |-
            The minimum and maximum amount of total local storage, in GB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/TotalLocalStorageGB'
    AcceleratorTotalMemoryMiB:
      description: The minimum and maximum amount of total accelerator memory, in MiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
          type: integer
    CapacityReservationTarget:
      description: |-
        Specifies a target Capacity Reservation.
          ``CapacityReservationTarget`` is a property of the [Amazon EC2 LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html) property type.
      additionalProperties: false
      type: object
      properties:
        CapacityReservationResourceGroupArn:
          description: The ARN of the Capacity Reservation resource group in which to run the instance.
          type: string
        CapacityReservationId:
          description: The ID of the Capacity Reservation in which to run the instance.
          type: string
    CapacityReservationSpecification:
      description: |-
        Specifies an instance's Capacity Reservation targeting option. You can specify only one option at a time.
          ``CapacityReservationSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        CapacityReservationPreference:
          description: |-
            Indicates the instance's Capacity Reservation preferences. Possible preferences include:
              +   ``capacity-reservations-only`` - The instance will only run in a Capacity Reservation or Capacity Reservation group. If capacity isn't available, the instance will fail to launch.
              +   ``open`` - The instance can run in any ``open`` Capacity Reservation that has matching attributes (instance type, platform, Availability Zone, tenancy).
              +   ``none`` - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
          type: string
        CapacityReservationTarget:
          description: Information about the target Capacity Reservation or Capacity Reservation group.
          $ref: '#/components/schemas/CapacityReservationTarget'
    CreditSpecification:
      description: |-
        Specifies the credit option for CPU usage of a T2, T3, or T3a instance.
          ``CreditSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        CpuCredits:
          description: |-
            The credit option for CPU usage of a T instance.
             Valid values: ``standard`` | ``unlimited``
          type: string
    TotalLocalStorageGB:
      description: The minimum and maximum amount of total local storage, in GB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
          type: number
        Max:
          description: The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
          type: number
    ConnectionTrackingSpecification:
      additionalProperties: false
      type: object
      properties:
        UdpTimeout:
          type: integer
        TcpEstablishedTimeout:
          type: integer
        UdpStreamTimeout:
          type: integer
    LaunchTemplate:
      type: object
      properties:
        LaunchTemplateName:
          description: A name for the launch template.
          type: string
        LaunchTemplateData:
          description: The information for the launch template.
          $ref: '#/components/schemas/LaunchTemplateData'
        VersionDescription:
          description: A description for the first version of the launch template.
          type: string
        TagSpecifications:
          uniqueItems: false
          description: |-
            The tags to apply to the launch template on creation. To tag the launch template, the resource type must be ``launch-template``.
             To specify the tags for resources that are created during instance launch, use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications).
          type: array
          items:
            $ref: '#/components/schemas/LaunchTemplateTagSpecification'
        LatestVersionNumber:
          description: ''
          type: string
        LaunchTemplateId:
          description: ''
          type: string
        DefaultVersionNumber:
          description: ''
          type: string
      required:
        - LaunchTemplateData
      x-stackql-resource-name: launch_template
      description: |-
        Specifies the properties for creating a launch template.
         The minimum required properties for specifying a launch template are as follows:
          +  You must specify at least one property for the launch template data.
          +  You can optionally specify a name for the launch template. If you do not specify a name, CFN creates a name for you.
          
         A launch template can contain some or all of the configuration information to launch an instance. When you launch an instance using a launch template, instance properties that are not specified in the launch template use default values, except the ``ImageId`` property, which has no default value. If you do not specify an AMI ID for the launch template ``ImageId`` property, you must specify an AMI ID for the instance ``ImageId`` property.
         For more information, see [Launch an instance from a launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html) in the *Amazon EC2 User Guide*.
      x-type-name: AWS::EC2::LaunchTemplate
      x-stackql-primary-identifier:
        - LaunchTemplateId
      x-create-only-properties:
        - LaunchTemplateName
      x-write-only-properties:
        - LaunchTemplateData
        - VersionDescription
        - TagSpecifications
      x-read-only-properties:
        - DefaultVersionNumber
        - LaunchTemplateId
        - LatestVersionNumber
      x-required-properties:
        - LaunchTemplateData
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeLaunchTemplates
        create:
          - ec2:CreateLaunchTemplate
          - ec2:CreateTags
        update:
          - ec2:CreateLaunchTemplateVersion
        list:
          - ec2:DescribeLaunchTemplates
        delete:
          - ec2:DeleteLaunchTemplate
          - ec2:DeleteTags
          - ec2:DescribeLaunchTemplates
    LocalGatewayRoute:
      type: object
      properties:
        DestinationCidrBlock:
          description: The CIDR block used for destination matches.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayVirtualInterfaceGroupId:
          description: The ID of the virtual interface group.
          type: string
        NetworkInterfaceId:
          description: The ID of the network interface.
          type: string
        State:
          description: The state of the route.
          type: string
        Type:
          description: The route type.
          type: string
      x-stackql-resource-name: local_gateway_route
      description: Describes a route for a local gateway route table.
      x-type-name: AWS::EC2::LocalGatewayRoute
      x-stackql-primary-identifier:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-create-only-properties:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-read-only-properties:
        - State
        - Type
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
        read:
          - ec2:SearchLocalGatewayRoutes
        delete:
          - ec2:DeleteLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
        list:
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:SearchLocalGatewayRoutes
        update:
          - ec2:ModifyLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
    LocalGatewayRouteTable:
      type: object
      properties:
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableArn:
          description: The ARN of the local gateway route table.
          type: string
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        OutpostArn:
          description: The ARN of the outpost.
          type: string
        OwnerId:
          description: The owner of the local gateway route table.
          type: string
        State:
          description: The state of the local gateway route table.
          type: string
        Mode:
          description: The mode of the local gateway route table.
          type: string
        Tags:
          description: The tags for the local gateway route table.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayId
      x-stackql-resource-name: local_gateway_route_table
      description: Describes a route table for a local gateway.
      x-type-name: AWS::EC2::LocalGatewayRouteTable
      x-stackql-primary-identifier:
        - LocalGatewayRouteTableId
      x-create-only-properties:
        - LocalGatewayId
        - Mode
      x-read-only-properties:
        - LocalGatewayRouteTableId
        - LocalGatewayRouteTableArn
        - OutpostArn
        - OwnerId
        - State
      x-required-properties:
        - LocalGatewayId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTable
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTables
        update:
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTable
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTables
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation:
      type: object
      properties:
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId:
          description: The ID of the local gateway route table virtual interface group association.
          type: string
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableArn:
          description: The ARN of the local gateway route table.
          type: string
        LocalGatewayVirtualInterfaceGroupId:
          description: The ID of the local gateway route table virtual interface group.
          type: string
        OwnerId:
          description: The owner of the local gateway route table virtual interface group association.
          type: string
        State:
          description: The state of the local gateway route table virtual interface group association.
          type: string
        Tags:
          description: The tags for the local gateway route table virtual interface group association.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayRouteTableId
        - LocalGatewayVirtualInterfaceGroupId
      x-stackql-resource-name: local_gateway_route_table_virtual_interface_group_association
      description: Describes a local gateway route table virtual interface group association for a local gateway.
      x-type-name: AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-stackql-primary-identifier:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      x-create-only-properties:
        - LocalGatewayRouteTableId
        - LocalGatewayVirtualInterfaceGroupId
      x-read-only-properties:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
        - LocalGatewayId
        - LocalGatewayRouteTableArn
        - OwnerId
        - State
      x-required-properties:
        - LocalGatewayRouteTableId
        - LocalGatewayVirtualInterfaceGroupId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
        update:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
    LocalGatewayRouteTableVPCAssociation:
      type: object
      properties:
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableVpcAssociationId:
          description: The ID of the association.
          type: string
        State:
          description: The state of the association.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        Tags:
          description: The tags for the association.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayRouteTableId
        - VpcId
      x-stackql-resource-name: local_gateway_route_tablevpc_association
      description: Describes an association between a local gateway route table and a VPC.
      x-type-name: AWS::EC2::LocalGatewayRouteTableVPCAssociation
      x-stackql-primary-identifier:
        - LocalGatewayRouteTableVpcAssociationId
      x-create-only-properties:
        - LocalGatewayRouteTableId
        - VpcId
      x-read-only-properties:
        - LocalGatewayId
        - LocalGatewayRouteTableVpcAssociationId
        - State
      x-required-properties:
        - LocalGatewayRouteTableId
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTableVpcAssociation
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
        update:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTableVpcAssociation
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
    NatGateway:
      type: object
      properties:
        SecondaryAllocationIds:
          uniqueItems: true
          description: Secondary EIP allocation IDs. For more information, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html) in the *Amazon VPC User Guide*.
          x-insertionOrder: true
          type: array
          items:
            type: string
        PrivateIpAddress:
          description: The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
          type: string
        ConnectivityType:
          description: Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
          type: string
        SecondaryPrivateIpAddresses:
          uniqueItems: true
          description: |-
            Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
              ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
          x-insertionOrder: true
          type: array
          items:
            type: string
        SecondaryPrivateIpAddressCount:
          description: |-
            [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
              ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
          type: integer
          minimum: 1
        AllocationId:
          description: '[Public NAT gateway only] The allocation ID of the Elastic IP address that''s associated with the NAT gateway. This property is required for a public NAT gateway and cannot be specified with a private NAT gateway.'
          type: string
        SubnetId:
          description: The ID of the subnet in which the NAT gateway is located.
          type: string
        NatGatewayId:
          description: ''
          type: string
        Tags:
          uniqueItems: false
          description: The tags for the NAT gateway.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        MaxDrainDurationSeconds:
          description: The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
          type: integer
      required:
        - SubnetId
      x-stackql-resource-name: nat_gateway
      description: |-
        Specifies a network address translation (NAT) gateway in the specified subnet. You can create either a public NAT gateway or a private NAT gateway. The default is a public NAT gateway. If you create a public NAT gateway, you must specify an elastic IP address.
         With a NAT gateway, instances in a private subnet can connect to the internet, other AWS services, or an on-premises network using the IP address of the NAT gateway. For more information, see [NAT gateways](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html) in the *Amazon VPC User Guide*.
         If you add a default route (``AWS::EC2::Route`` resource) that points to a NAT gateway, specify the NAT gateway ID for the route's ``NatGatewayId`` property.
          When you associate an Elastic IP address or secondary Elastic IP address with a public NAT gateway, the network border group of the Elastic IP address must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. Otherwise, the NAT gateway fails to launch. You can see the network border group for the AZ by viewing the details of the subnet. Similarly, you can view the network border group for the Elastic IP address by viewing its details. For more information, see [Allocate an Elastic IP address](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#allocate-eip) in the *Amazon VPC User Guide*.
      x-type-name: AWS::EC2::NatGateway
      x-stackql-primary-identifier:
        - NatGatewayId
      x-create-only-properties:
        - SubnetId
        - ConnectivityType
        - AllocationId
        - PrivateIpAddress
      x-write-only-properties:
        - MaxDrainDurationSeconds
      x-read-only-properties:
        - NatGatewayId
      x-required-properties:
        - SubnetId
      x-tagging:
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeNatGateways
        create:
          - ec2:CreateNatGateway
          - ec2:DescribeNatGateways
          - ec2:CreateTags
        update:
          - ec2:DescribeNatGateways
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:AssociateNatGatewayAddress
          - ec2:DisassociateNatGatewayAddress
          - ec2:AssignPrivateNatGatewayAddress
          - ec2:UnassignPrivateNatGatewayAddress
        list:
          - ec2:DescribeNatGateways
        delete:
          - ec2:DeleteNatGateway
          - ec2:DescribeNatGateways
    NetworkAcl:
      type: object
      properties:
        VpcId:
          description: The ID of the VPC for the network ACL.
          type: string
        Id:
          description: ''
          type: string
        Tags:
          uniqueItems: false
          description: The tags for the network ACL.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
      x-stackql-resource-name: network_acl
      description: |-
        Specifies a network ACL for your VPC.
         To add a network ACL entry, see [AWS::EC2::NetworkAclEntry](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkaclentry.html).
      x-type-name: AWS::EC2::NetworkAcl
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - Id
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeNetworkAcls
          - ec2:DescribeTags
        create:
          - ec2:CreateNetworkAcl
          - ec2:DescribeNetworkAcls
          - ec2:CreateTags
        update:
          - ec2:DescribeNetworkAcls
          - ec2:DeleteTags
          - ec2:CreateTags
        list:
          - ec2:DescribeNetworkAcls
        delete:
          - ec2:DeleteTags
          - ec2:DeleteNetworkAcl
          - ec2:DescribeNetworkAcls
    AccessScopePathRequest:
      type: object
      additionalProperties: false
      properties:
        Source:
          $ref: '#/components/schemas/PathStatementRequest'
        Destination:
          $ref: '#/components/schemas/PathStatementRequest'
        ThroughResources:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ThroughResourcesStatementRequest'
    PathStatementRequest:
      type: object
      additionalProperties: false
      properties:
        PacketHeaderStatement:
          $ref: '#/components/schemas/PacketHeaderStatementRequest'
        ResourceStatement:
          $ref: '#/components/schemas/ResourceStatementRequest'
    PacketHeaderStatementRequest:
      type: object
      additionalProperties: false
      properties:
        SourceAddresses:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationAddresses:
          type: array
          x-insertionOrder: true
          items:
            type: string
        SourcePorts:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationPorts:
          type: array
          x-insertionOrder: true
          items:
            type: string
        SourcePrefixLists:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationPrefixLists:
          type: array
          x-insertionOrder: true
          items:
            type: string
        Protocols:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Protocol'
    Protocol:
      type: string
      enum:
        - tcp
        - udp
    ResourceStatementRequest:
      type: object
      additionalProperties: false
      properties:
        Resources:
          type: array
          x-insertionOrder: true
          items:
            type: string
        ResourceTypes:
          type: array
          x-insertionOrder: true
          items:
            type: string
    ThroughResourcesStatementRequest:
      type: object
      additionalProperties: false
      properties:
        ResourceStatement:
          $ref: '#/components/schemas/ResourceStatementRequest'
    NetworkInsightsAccessScope:
      type: object
      properties:
        NetworkInsightsAccessScopeId:
          type: string
        NetworkInsightsAccessScopeArn:
          type: string
        CreatedDate:
          type: string
        UpdatedDate:
          type: string
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        MatchPaths:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/AccessScopePathRequest'
        ExcludePaths:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/AccessScopePathRequest'
      x-stackql-resource-name: network_insights_access_scope
      description: Resource schema for AWS::EC2::NetworkInsightsAccessScope
      x-type-name: AWS::EC2::NetworkInsightsAccessScope
      x-stackql-primary-identifier:
        - NetworkInsightsAccessScopeId
      x-stackql-additional-identifiers:
        - - NetworkInsightsAccessScopeArn
      x-create-only-properties:
        - MatchPaths
        - ExcludePaths
      x-write-only-properties:
        - MatchPaths
        - ExcludePaths
      x-read-only-properties:
        - NetworkInsightsAccessScopeId
        - NetworkInsightsAccessScopeArn
        - CreatedDate
        - UpdatedDate
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateNetworkInsightsAccessScope
          - ec2:CreateTags
          - tiros:CreateQuery
        read:
          - ec2:DescribeNetworkInsightsAccessScopes
          - ec2:GetNetworkInsightsAccessScopeContent
        update:
          - ec2:DescribeNetworkInsightsAccessScopes
          - ec2:GetNetworkInsightsAccessScopeContent
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteNetworkInsightsAccessScope
          - ec2:DeleteTags
        list:
          - ec2:DescribeNetworkInsightsAccessScopes
    NetworkInsightsAccessScopeAnalysis:
      type: object
      properties:
        NetworkInsightsAccessScopeAnalysisId:
          type: string
        NetworkInsightsAccessScopeAnalysisArn:
          type: string
        NetworkInsightsAccessScopeId:
          type: string
        Status:
          type: string
          enum:
            - running
            - failed
            - succeeded
        StatusMessage:
          type: string
        StartDate:
          type: string
        EndDate:
          type: string
        FindingsFound:
          type: string
          enum:
            - 'true'
            - 'false'
            - unknown
        AnalyzedEniCount:
          type: integer
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - NetworkInsightsAccessScopeId
      x-stackql-resource-name: network_insights_access_scope_analysis
      description: Resource schema for AWS::EC2::NetworkInsightsAccessScopeAnalysis
      x-type-name: AWS::EC2::NetworkInsightsAccessScopeAnalysis
      x-stackql-primary-identifier:
        - NetworkInsightsAccessScopeAnalysisId
      x-stackql-additional-identifiers:
        - - NetworkInsightsAccessScopeAnalysisArn
      x-create-only-properties:
        - NetworkInsightsAccessScopeId
      x-read-only-properties:
        - NetworkInsightsAccessScopeAnalysisId
        - NetworkInsightsAccessScopeAnalysisArn
        - Status
        - StatusMessage
        - StartDate
        - EndDate
        - FindingsFound
        - AnalyzedEniCount
      x-required-properties:
        - NetworkInsightsAccessScopeId
      x-required-permissions:
        create:
          - ec2:CreateTags
          - ec2:StartNetworkInsightsAccessScopeAnalysis
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:Describe*
          - elasticloadbalancing:Describe*
          - directconnect:Describe*
          - tiros:CreateQuery
          - tiros:GetQueryAnswer
          - tiros:GetQueryExplanation
        read:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
        update:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteNetworkInsightsAccessScopeAnalysis
          - ec2:DeleteTags
        list:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
    PathComponent:
      additionalProperties: false
      type: object
      properties:
        AdditionalDetails:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AdditionalDetail'
        InboundHeader:
          $ref: '#/components/schemas/AnalysisPacketHeader'
        Vpc:
          $ref: '#/components/schemas/AnalysisComponent'
        DestinationVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroupRule:
          $ref: '#/components/schemas/AnalysisSecurityGroupRule'
        TransitGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        ElasticLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisComponent'
        Explanations:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Explanation'
        ServiceName:
          type: string
        SequenceNumber:
          type: integer
        SourceVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        OutboundHeader:
          $ref: '#/components/schemas/AnalysisPacketHeader'
        AclRule:
          $ref: '#/components/schemas/AnalysisAclRule'
        TransitGatewayRouteTableRoute:
          $ref: '#/components/schemas/TransitGatewayRouteTableRoute'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
        Subnet:
          $ref: '#/components/schemas/AnalysisComponent'
        RouteTableRoute:
          $ref: '#/components/schemas/AnalysisRouteTableRoute'
    AnalysisLoadBalancerListener:
      additionalProperties: false
      type: object
      properties:
        InstancePort:
          $ref: '#/components/schemas/Port'
        LoadBalancerPort:
          $ref: '#/components/schemas/Port'
    AnalysisLoadBalancerTarget:
      additionalProperties: false
      type: object
      properties:
        Address:
          $ref: '#/components/schemas/IpAddress'
        Instance:
          $ref: '#/components/schemas/AnalysisComponent'
        Port:
          $ref: '#/components/schemas/Port'
        AvailabilityZone:
          type: string
    Explanation:
      additionalProperties: false
      type: object
      properties:
        VpnGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        PacketField:
          type: string
        TransitGatewayAttachment:
          $ref: '#/components/schemas/AnalysisComponent'
        Protocols:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Protocol'
        IngressRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        ClassicLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisLoadBalancerListener'
        VpcPeeringConnection:
          $ref: '#/components/schemas/AnalysisComponent'
        Address:
          $ref: '#/components/schemas/IpAddress'
        Port:
          $ref: '#/components/schemas/Port'
        Addresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        ElasticLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGatewayRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        ExplanationCode:
          type: string
        InternetGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        SourceVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        AttachedTo:
          $ref: '#/components/schemas/AnalysisComponent'
        PrefixList:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGatewayRouteTableRoute:
          $ref: '#/components/schemas/TransitGatewayRouteTableRoute'
        ComponentRegion:
          type: string
        LoadBalancerTargetGroup:
          $ref: '#/components/schemas/AnalysisComponent'
        NetworkInterface:
          $ref: '#/components/schemas/AnalysisComponent'
        CustomerGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        DestinationVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroup:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        RouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        State:
          type: string
        LoadBalancerListenerPort:
          $ref: '#/components/schemas/Port'
        vpcEndpoint:
          $ref: '#/components/schemas/AnalysisComponent'
        Subnet:
          $ref: '#/components/schemas/AnalysisComponent'
        Cidrs:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            type: string
        Destination:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroups:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        ComponentAccount:
          type: string
        VpnConnection:
          $ref: '#/components/schemas/AnalysisComponent'
        Vpc:
          $ref: '#/components/schemas/AnalysisComponent'
        NatGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        Direction:
          type: string
        LoadBalancerTargetPort:
          $ref: '#/components/schemas/Port'
        LoadBalancerTarget:
          $ref: '#/components/schemas/AnalysisLoadBalancerTarget'
        LoadBalancerTargetGroups:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
        MissingComponent:
          type: string
        RouteTableRoute:
          $ref: '#/components/schemas/AnalysisRouteTableRoute'
        AvailabilityZones:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            type: string
        PortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        Acl:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroupRule:
          $ref: '#/components/schemas/AnalysisSecurityGroupRule'
        SubnetRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        LoadBalancerArn:
          $ref: '#/components/schemas/ResourceArn'
        AclRule:
          $ref: '#/components/schemas/AnalysisAclRule'
    Port:
      type: integer
    AnalysisPacketHeader:
      additionalProperties: false
      type: object
      properties:
        DestinationPortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        SourcePortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        DestinationAddresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        Protocol:
          $ref: '#/components/schemas/Protocol'
        SourceAddresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
    AdditionalDetail:
      additionalProperties: false
      type: object
      properties:
        ServiceName:
          type: string
        AdditionalDetailType:
          type: string
        LoadBalancers:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
    AlternatePathHint:
      additionalProperties: false
      type: object
      properties:
        ComponentArn:
          type: string
        ComponentId:
          type: string
    TransitGatewayRouteTableRoute:
      additionalProperties: false
      type: object
      properties:
        PrefixListId:
          type: string
        ResourceId:
          type: string
        State:
          type: string
        ResourceType:
          type: string
        RouteOrigin:
          type: string
        DestinationCidr:
          type: string
        AttachmentId:
          type: string
    AnalysisSecurityGroupRule:
      additionalProperties: false
      type: object
      properties:
        PortRange:
          $ref: '#/components/schemas/PortRange'
        Cidr:
          type: string
        PrefixListId:
          type: string
        SecurityGroupId:
          type: string
        Protocol:
          $ref: '#/components/schemas/Protocol'
        Direction:
          type: string
    AnalysisComponent:
      additionalProperties: false
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
    AnalysisAclRule:
      additionalProperties: false
      type: object
      properties:
        PortRange:
          $ref: '#/components/schemas/PortRange'
        Cidr:
          type: string
        RuleAction:
          type: string
        Egress:
          type: boolean
        RuleNumber:
          type: integer
        Protocol:
          $ref: '#/components/schemas/Protocol'
    AnalysisRouteTableRoute:
      additionalProperties: false
      type: object
      properties:
        Origin:
          type: string
        destinationPrefixListId:
          type: string
        destinationCidr:
          type: string
        NetworkInterfaceId:
          type: string
        TransitGatewayId:
          type: string
        VpcPeeringConnectionId:
          type: string
        instanceId:
          type: string
        State:
          type: string
        egressOnlyInternetGatewayId:
          type: string
        NatGatewayId:
          type: string
        gatewayId:
          type: string
    ResourceArn:
      type: string
    PortRange:
      additionalProperties: false
      type: object
      properties:
        From:
          type: integer
        To:
          type: integer
    IpAddress:
      type: string
    NetworkInsightsAnalysis:
      type: object
      properties:
        Status:
          type: string
          enum:
            - running
            - failed
            - succeeded
        ReturnPathComponents:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PathComponent'
        NetworkInsightsAnalysisId:
          type: string
        NetworkInsightsPathId:
          type: string
        NetworkPathFound:
          type: boolean
        SuggestedAccounts:
          uniqueItems: true
          x-insertionOrder: true
          type: array
          items:
            type: string
        FilterInArns:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceArn'
        NetworkInsightsAnalysisArn:
          type: string
        StatusMessage:
          type: string
        StartDate:
          type: string
        AlternatePathHints:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AlternatePathHint'
        Explanations:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Explanation'
        ForwardPathComponents:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PathComponent'
        AdditionalAccounts:
          uniqueItems: true
          x-insertionOrder: true
          type: array
          items:
            type: string
        Tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - NetworkInsightsPathId
      x-stackql-resource-name: network_insights_analysis
      description: Resource schema for AWS::EC2::NetworkInsightsAnalysis
      x-type-name: AWS::EC2::NetworkInsightsAnalysis
      x-stackql-primary-identifier:
        - NetworkInsightsAnalysisId
      x-stackql-additional-identifiers:
        - - NetworkInsightsAnalysisArn
      x-create-only-properties:
        - NetworkInsightsPathId
        - FilterInArns
      x-read-only-properties:
        - NetworkInsightsAnalysisId
        - NetworkInsightsAnalysisArn
        - StartDate
        - Status
        - StatusMessage
        - NetworkPathFound
        - ForwardPathComponents
        - ReturnPathComponents
        - Explanations
        - AlternatePathHints
        - SuggestedAccounts
      x-required-properties:
        - NetworkInsightsPathId
      x-required-permissions:
        read:
          - ec2:Describe*
        create:
          - ec2:CreateTags
          - ec2:StartNetworkInsightsAnalysis
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:SearchTransitGatewayRoutes
          - ec2:Describe*
          - ec2:GetManagedPrefixListEntries
          - elasticloadbalancing:Describe*
          - directconnect:Describe*
          - tiros:CreateQuery
          - tiros:GetQueryAnswer
          - tiros:GetQueryExplanation
        update:
          - ec2:CreateTags
          - ec2:Describe*
          - ec2:DeleteTags
        list:
          - ec2:Describe*
        delete:
          - ec2:DeleteNetworkInsightsAnalysis
          - ec2:DeleteTags
    FilterPortRange:
      type: object
      additionalProperties: false
      properties:
        FromPort:
          type: integer
        ToPort:
          type: integer
    PathFilter:
      type: object
      additionalProperties: false
      properties:
        SourceAddress:
          $ref: '#/components/schemas/IpAddress'
        SourcePortRange:
          $ref: '#/components/schemas/FilterPortRange'
        DestinationAddress:
          $ref: '#/components/schemas/IpAddress'
        DestinationPortRange:
          $ref: '#/components/schemas/FilterPortRange'
    NetworkInsightsPath:
      type: object
      properties:
        NetworkInsightsPathId:
          type: string
        NetworkInsightsPathArn:
          type: string
        CreatedDate:
          type: string
        SourceIp:
          $ref: '#/components/schemas/IpAddress'
        FilterAtSource:
          $ref: '#/components/schemas/PathFilter'
        FilterAtDestination:
          $ref: '#/components/schemas/PathFilter'
        DestinationIp:
          $ref: '#/components/schemas/IpAddress'
        Source:
          type: string
        Destination:
          type: string
        SourceArn:
          type: string
        DestinationArn:
          type: string
        Protocol:
          $ref: '#/components/schemas/Protocol'
        DestinationPort:
          $ref: '#/components/schemas/Port'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Protocol
        - Source
      x-stackql-resource-name: network_insights_path
      description: Resource schema for AWS::EC2::NetworkInsightsPath
      x-type-name: AWS::EC2::NetworkInsightsPath
      x-stackql-primary-identifier:
        - NetworkInsightsPathId
      x-stackql-additional-identifiers:
        - - NetworkInsightsPathArn
      x-create-only-properties:
        - SourceIp
        - DestinationIp
        - Source
        - Destination
        - Protocol
        - DestinationPort
        - FilterAtSource
        - FilterAtDestination
      x-read-only-properties:
        - NetworkInsightsPathId
        - NetworkInsightsPathArn
        - CreatedDate
        - SourceArn
        - DestinationArn
      x-required-properties:
        - Protocol
        - Source
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateNetworkInsightsPath
          - ec2:CreateTags
        delete:
          - ec2:DeleteNetworkInsightsPath
          - ec2:DeleteTags
        read:
          - ec2:DescribeNetworkInsightsPaths
        list:
          - ec2:DescribeNetworkInsightsPaths
        update:
          - ec2:DescribeNetworkInsightsPaths
          - ec2:CreateTags
          - ec2:DeleteTags
    NetworkInterfaceAttachment:
      type: object
      properties:
        AttachmentId:
          description: ''
          type: string
        DeleteOnTermination:
          description: Whether to delete the network interface when the instance terminates. By default, this value is set to ``true``.
          type: boolean
          default: true
        DeviceIndex:
          description: The network interface's position in the attachment order. For example, the first attached network interface has a ``DeviceIndex`` of 0.
          type: string
        InstanceId:
          description: The ID of the instance to which you will attach the ENI.
          type: string
        NetworkInterfaceId:
          description: The ID of the ENI that you want to attach.
          type: string
        EnaSrdSpecification:
          $ref: '#/components/schemas/EnaSrdSpecification'
          description: Configures ENA Express for the network interface that this action attaches to the instance.
      required:
        - DeviceIndex
        - InstanceId
        - NetworkInterfaceId
      x-stackql-resource-name: network_interface_attachment
      description: Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instance without interruption.
      x-type-name: AWS::EC2::NetworkInterfaceAttachment
      x-stackql-primary-identifier:
        - AttachmentId
      x-stackql-additional-identifiers:
        - - NetworkInterfaceId
      x-create-only-properties:
        - DeviceIndex
        - InstanceId
        - NetworkInterfaceId
      x-read-only-properties:
        - AttachmentId
      x-required-properties:
        - DeviceIndex
        - InstanceId
        - NetworkInterfaceId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AttachNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:ModifyNetworkInterfaceAttribute
        read:
          - ec2:DescribeNetworkInterfaces
        list:
          - ec2:DescribeNetworkInterfaces
        update:
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:DescribeNetworkInterfaces
          - ec2:AttachNetworkInterface
          - ec2:DetachNetworkInterface
        delete:
          - ec2:DetachNetworkInterface
          - ec2:DescribeNetworkInterfaces
    NetworkPerformanceMetricSubscription:
      type: object
      properties:
        Source:
          description: The starting Region or Availability Zone for metric to subscribe to.
          type: string
        Destination:
          description: The target Region or Availability Zone for the metric to subscribe to.
          type: string
        Metric:
          description: The metric type to subscribe to.
          type: string
        Statistic:
          description: The statistic to subscribe to.
          type: string
      required:
        - Source
        - Destination
        - Metric
        - Statistic
      x-stackql-resource-name: network_performance_metric_subscription
      description: Resource Type definition for AWS::EC2::NetworkPerformanceMetricSubscription
      x-type-name: AWS::EC2::NetworkPerformanceMetricSubscription
      x-stackql-primary-identifier:
        - Source
        - Destination
        - Metric
        - Statistic
      x-create-only-properties:
        - Source
        - Destination
        - Metric
        - Statistic
      x-required-properties:
        - Source
        - Destination
        - Metric
        - Statistic
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
          - ec2:EnableAwsNetworkPerformanceMetricSubscription
        read:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
        delete:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
          - ec2:DisableAwsNetworkPerformanceMetricSubscription
        list:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
    PlacementGroup:
      type: object
      properties:
        Strategy:
          description: The placement strategy.
          type: string
        GroupName:
          description: The Group Name of Placement Group.
          type: string
        SpreadLevel:
          description: The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
          type: string
        PartitionCount:
          description: The number of partitions. Valid only when **Strategy** is set to `partition`
          type: integer
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: placement_group
      description: Resource Type definition for AWS::EC2::PlacementGroup
      x-type-name: AWS::EC2::PlacementGroup
      x-stackql-primary-identifier:
        - GroupName
      x-create-only-properties:
        - Tags
        - Strategy
        - SpreadLevel
        - PartitionCount
      x-read-only-properties:
        - GroupName
      x-tagging:
        taggable: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
      x-required-permissions:
        create:
          - ec2:CreatePlacementGroup
          - ec2:DescribePlacementGroups
          - ec2:CreateTags
        read:
          - ec2:DescribePlacementGroups
        delete:
          - ec2:DeletePlacementGroup
          - ec2:DescribePlacementGroups
        list:
          - ec2:DescribePlacementGroups
    Entry:
      type: object
      properties:
        Cidr:
          type: string
          minLength: 1
          maxLength: 46
        Description:
          type: string
          minLength: 0
          maxLength: 255
      required:
        - Cidr
      additionalProperties: false
    PrefixList:
      type: object
      properties:
        PrefixListName:
          description: Name of Prefix List.
          type: string
          minLength: 1
          maxLength: 255
        PrefixListId:
          description: Id of Prefix List.
          type: string
        OwnerId:
          description: Owner Id of Prefix List.
          type: string
        AddressFamily:
          description: Ip Version of Prefix List.
          type: string
          enum:
            - IPv4
            - IPv6
        MaxEntries:
          description: Max Entries of Prefix List.
          type: integer
          minimum: 1
        Version:
          description: Version of Prefix List.
          type: integer
        Tags:
          description: Tags for Prefix List
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Entries:
          description: Entries of Prefix List.
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        Arn:
          description: The Amazon Resource Name (ARN) of the Prefix List.
          type: string
      required:
        - PrefixListName
        - AddressFamily
      x-stackql-resource-name: prefix_list
      description: Resource schema of AWS::EC2::PrefixList Type
      x-type-name: AWS::EC2::PrefixList
      x-stackql-primary-identifier:
        - PrefixListId
      x-read-only-properties:
        - PrefixListId
        - OwnerId
        - Version
        - Arn
      x-required-properties:
        - PrefixListName
        - AddressFamily
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - EC2:DeleteTags
          - EC2:CreateTags
      x-required-permissions:
        create:
          - EC2:CreateManagedPrefixList
          - EC2:DescribeManagedPrefixLists
          - EC2:CreateTags
        read:
          - EC2:GetManagedPrefixListEntries
          - EC2:DescribeManagedPrefixLists
        update:
          - EC2:DescribeManagedPrefixLists
          - EC2:GetManagedPrefixListEntries
          - EC2:ModifyManagedPrefixList
          - EC2:CreateTags
          - EC2:DeleteTags
        delete:
          - EC2:DeleteManagedPrefixList
          - EC2:DescribeManagedPrefixLists
        list:
          - EC2:DescribeManagedPrefixLists
          - EC2:GetManagedPrefixListEntries
    Ingress:
      additionalProperties: false
      type: object
      properties:
        CidrIp:
          type: string
        CidrIpv6:
          type: string
        Description:
          type: string
        FromPort:
          type: integer
        SourceSecurityGroupName:
          type: string
        ToPort:
          type: integer
        SourceSecurityGroupOwnerId:
          type: string
        IpProtocol:
          type: string
        SourceSecurityGroupId:
          type: string
        SourcePrefixListId:
          type: string
      required:
        - IpProtocol
    Egress:
      additionalProperties: false
      type: object
      properties:
        CidrIp:
          type: string
        CidrIpv6:
          type: string
        Description:
          type: string
        FromPort:
          type: integer
        ToPort:
          type: integer
        IpProtocol:
          type: string
        DestinationSecurityGroupId:
          type: string
        DestinationPrefixListId:
          type: string
      required:
        - IpProtocol
    SecurityGroup:
      type: object
      properties:
        GroupDescription:
          description: A description for the security group.
          type: string
        GroupName:
          description: The name of the security group.
          type: string
        VpcId:
          description: The ID of the VPC for the security group.
          type: string
        Id:
          description: The group name or group ID depending on whether the SG is created in default or specific VPC
          type: string
        SecurityGroupIngress:
          uniqueItems: false
          description: The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Ingress'
        SecurityGroupEgress:
          uniqueItems: false
          description: '[VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.'
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Egress'
        Tags:
          uniqueItems: false
          description: Any tags assigned to the security group.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        GroupId:
          description: The group ID of the specified security group.
          type: string
      required:
        - GroupDescription
      x-stackql-resource-name: security_group
      description: Resource Type definition for AWS::EC2::SecurityGroup
      x-type-name: AWS::EC2::SecurityGroup
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - GroupDescription
        - GroupName
        - VpcId
      x-write-only-properties:
        - SecurityGroupIngress/*/SourceSecurityGroupName
      x-read-only-properties:
        - Id
        - GroupId
      x-required-properties:
        - GroupDescription
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeSecurityGroups
        create:
          - ec2:CreateSecurityGroup
          - ec2:DescribeSecurityGroups
          - ec2:RevokeSecurityGroupEgress
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateTags
        update:
          - ec2:RevokeSecurityGroupEgress
          - ec2:RevokeSecurityGroupIngress
          - ec2:DescribeSecurityGroups
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeSecurityGroups
        delete:
          - ec2:DescribeSecurityGroups
          - ec2:DeleteSecurityGroup
          - ec2:DescribeInstances
    SecurityGroupEgress:
      type: object
      properties:
        CidrIp:
          description: |-
            The IPv4 address range, in CIDR format.
             You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
             For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
          type: string
        CidrIpv6:
          description: |-
            The IPv6 address range, in CIDR format.
             You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
             For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
          type: string
        Description:
          description: |-
            The description of an egress (outbound) security group rule.
             Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
          type: string
        FromPort:
          description: If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
          type: integer
        ToPort:
          description: If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
          type: integer
        IpProtocol:
          description: |-
            The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
             Use ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify. For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
          type: string
        DestinationSecurityGroupId:
          description: |-
            The ID of the security group.
             You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
          type: string
        Id:
          description: ''
          type: string
        DestinationPrefixListId:
          description: |-
            The prefix list IDs for an AWS service. This is the AWS service to access through a VPC endpoint from instances associated with the security group.
             You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
          type: string
        GroupId:
          description: The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
          type: string
      required:
        - IpProtocol
        - GroupId
      x-stackql-resource-name: security_group_egress
      description: |-
        Adds the specified outbound (egress) rule to a security group.
         An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 address range, the IP addresses that are specified by a prefix list, or the instances that are associated with a destination security group. For more information, see [Security group rules](https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html).
         You must specify exactly one of the following destinations: an IPv4 address range, an IPv6 address range, a prefix list, or a security group.
         You must specify a protocol for each rule (for example, TCP). If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is ICMP or ICMPv6, you must also specify the ICMP/ICMPv6 type and code. To specify all types or all codes, use -1.
         Rule changes are propagated to instances associated with the security group as quickly as possible. However, a small delay might occur.
      x-type-name: AWS::EC2::SecurityGroupEgress
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - IpProtocol
        - DestinationSecurityGroupId
        - ToPort
        - CidrIp
        - FromPort
        - GroupId
        - CidrIpv6
        - DestinationPrefixListId
      x-read-only-properties:
        - Id
      x-required-properties:
        - IpProtocol
        - GroupId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeSecurityGroupRules
        create:
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:RevokeSecurityGroupEgress
          - ec2:DescribeSecurityGroupRules
        update:
          - ec2:UpdateSecurityGroupRuleDescriptionsEgress
        list:
          - ec2:DescribeSecurityGroupRules
        delete:
          - ec2:RevokeSecurityGroupEgress
          - ec2:DescribeSecurityGroupRules
    SecurityGroupIngress:
      type: object
      properties:
        Id:
          description: The Security Group Rule Id
          type: string
        CidrIp:
          description: The IPv4 ranges
          type: string
        CidrIpv6:
          description: '[VPC only] The IPv6 ranges'
          type: string
        Description:
          description: Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
          type: string
        FromPort:
          description: |-
            The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.

            Use this for ICMP and any protocol that uses ports.
          type: integer
        GroupId:
          description: |-
            The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.

            You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
          type: string
        GroupName:
          description: The name of the security group.
          type: string
        IpProtocol:
          description: |-
            The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).

            [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
          type: string
        SourcePrefixListId:
          description: |+
            [EC2-VPC only] The ID of a prefix list.

          type: string
        SourceSecurityGroupId:
          description: The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
          type: string
        SourceSecurityGroupName:
          description: |-
            [EC2-Classic, default VPC] The name of the source security group.

            You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
          type: string
        SourceSecurityGroupOwnerId:
          description: |-
            [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.

            If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
          type: string
        ToPort:
          description: |-
            The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.

            Use this for ICMP and any protocol that uses ports.
          type: integer
      required:
        - IpProtocol
      x-stackql-resource-name: security_group_ingress
      description: Resource Type definition for AWS::EC2::SecurityGroupIngress
      x-type-name: AWS::EC2::SecurityGroupIngress
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - GroupName
        - IpProtocol
        - SourceSecurityGroupId
        - SourcePrefixListId
        - ToPort
        - CidrIp
        - SourceSecurityGroupName
        - SourceSecurityGroupOwnerId
        - FromPort
        - GroupId
        - CidrIpv6
      x-read-only-properties:
        - Id
      x-required-properties:
        - IpProtocol
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:DescribeSecurityGroupRules
          - ec2:AuthorizeSecurityGroupIngress
        update:
          - ec2:UpdateSecurityGroupRuleDescriptionsIngress
        delete:
          - ec2:DescribeSecurityGroupRules
          - ec2:RevokeSecurityGroupIngress
        read:
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSecurityGroupRules
        list:
          - ec2:DescribeSecurityGroupRules
    SecurityGroupVpcAssociationState:
      type: string
      additionalProperties: false
      enum:
        - associating
        - associated
        - association-failed
        - disassociating
        - disassociated
        - disassociation-failed
    SecurityGroupVpcAssociation:
      type: object
      properties:
        GroupId:
          description: The group ID of the specified security group.
          type: string
        VpcId:
          description: The ID of the VPC in the security group vpc association.
          type: string
        VpcOwnerId:
          description: The owner of the VPC in the security group vpc association.
          type: string
        State:
          description: The state of the security group vpc association.
          $ref: '#/components/schemas/SecurityGroupVpcAssociationState'
        StateReason:
          description: The reason for the state of the security group vpc association.
          type: string
      required:
        - GroupId
        - VpcId
      x-stackql-resource-name: security_group_vpc_association
      description: Resource type definition for the AWS::EC2::SecurityGroupVpcAssociation resource
      x-type-name: AWS::EC2::SecurityGroupVpcAssociation
      x-stackql-primary-identifier:
        - GroupId
        - VpcId
      x-create-only-properties:
        - GroupId
        - VpcId
      x-read-only-properties:
        - VpcOwnerId
        - State
        - StateReason
      x-required-properties:
        - GroupId
        - VpcId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:AssociateSecurityGroupVpc
          - ec2:DescribeSecurityGroupVpcAssociations
        read:
          - ec2:DescribeSecurityGroupVpcAssociations
        delete:
          - ec2:DisassociateSecurityGroupVpc
          - ec2:DescribeSecurityGroupVpcAssociations
        list:
          - ec2:DescribeSecurityGroupVpcAssociations
    SnapshotBlockPublicAccess:
      type: object
      properties:
        State:
          type: string
          description: The state of EBS Snapshot Block Public Access.
          enum:
            - block-all-sharing
            - block-new-sharing
        AccountId:
          type: string
          description: The identifier for the specified AWS account.
      required:
        - State
      x-stackql-resource-name: snapshot_block_public_access
      description: Resource Type definition for AWS::EC2::SnapshotBlockPublicAccess
      x-type-name: AWS::EC2::SnapshotBlockPublicAccess
      x-stackql-primary-identifier:
        - AccountId
      x-read-only-properties:
        - AccountId
      x-required-properties:
        - State
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:EnableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        read:
          - ec2:GetSnapshotBlockPublicAccessState
        update:
          - ec2:EnableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        delete:
          - ec2:DisableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        list:
          - ec2:GetSnapshotBlockPublicAccessState
    SpotFleetRequestConfigData:
      type: object
      additionalProperties: false
      properties:
        AllocationStrategy:
          type: string
          enum:
            - capacityOptimized
            - capacityOptimizedPrioritized
            - diversified
            - lowestPrice
            - priceCapacityOptimized
        Context:
          type: string
        ExcessCapacityTerminationPolicy:
          type: string
          enum:
            - Default
            - NoTermination
            - default
            - noTermination
        IamFleetRole:
          type: string
        InstanceInterruptionBehavior:
          type: string
          enum:
            - hibernate
            - stop
            - terminate
        InstancePoolsToUseCount:
          type: integer
        LaunchSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetLaunchSpecification'
        LaunchTemplateConfigs:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LaunchTemplateConfig'
        LoadBalancersConfig:
          $ref: '#/components/schemas/LoadBalancersConfig'
        OnDemandAllocationStrategy:
          type: string
        OnDemandMaxTotalPrice:
          type: string
        OnDemandTargetCapacity:
          type: integer
        ReplaceUnhealthyInstances:
          type: boolean
        SpotMaintenanceStrategies:
          $ref: '#/components/schemas/SpotMaintenanceStrategies'
        SpotMaxTotalPrice:
          type: string
        SpotPrice:
          type: string
        TargetCapacity:
          type: integer
        TerminateInstancesWithExpiration:
          type: boolean
        Type:
          type: string
          enum:
            - maintain
            - request
        ValidFrom:
          type: string
        ValidUntil:
          type: string
        TagSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetTagSpecification'
        TargetCapacityUnitType:
          type: string
          enum:
            - vcpu
            - memory-mib
            - units
      required:
        - IamFleetRole
        - TargetCapacity
    SpotFleetLaunchSpecification:
      type: object
      additionalProperties: false
      properties:
        BlockDeviceMappings:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BlockDeviceMapping'
        EbsOptimized:
          type: boolean
          default: false
        IamInstanceProfile:
          $ref: '#/components/schemas/IamInstanceProfileSpecification'
        ImageId:
          type: string
        InstanceType:
          type: string
        KernelId:
          type: string
        KeyName:
          type: string
        Monitoring:
          $ref: '#/components/schemas/SpotFleetMonitoring'
        NetworkInterfaces:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InstanceNetworkInterfaceSpecification'
        Placement:
          $ref: '#/components/schemas/SpotPlacement'
        RamdiskId:
          type: string
        SecurityGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GroupIdentifier'
        SpotPrice:
          type: string
        SubnetId:
          type: string
        TagSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetTagSpecification'
        UserData:
          type: string
        WeightedCapacity:
          type: number
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
      required:
        - ImageId
    LoadBalancersConfig:
      type: object
      additionalProperties: false
      properties:
        ClassicLoadBalancersConfig:
          $ref: '#/components/schemas/ClassicLoadBalancersConfig'
        TargetGroupsConfig:
          $ref: '#/components/schemas/TargetGroupsConfig'
    SpotMaintenanceStrategies:
      type: object
      additionalProperties: false
      properties:
        CapacityRebalance:
          $ref: '#/components/schemas/SpotCapacityRebalance'
    SpotCapacityRebalance:
      type: object
      additionalProperties: false
      properties:
        ReplacementStrategy:
          type: string
          enum:
            - launch
            - launch-before-terminate
        TerminationDelay:
          type: integer
    LaunchTemplateConfig:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateSpecification:
          $ref: '#/components/schemas/FleetLaunchTemplateSpecification'
        Overrides:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LaunchTemplateOverrides'
    SpotFleetTagSpecification:
      type: object
      additionalProperties: false
      properties:
        ResourceType:
          type: string
          enum:
            - client-vpn-endpoint
            - customer-gateway
            - dedicated-host
            - dhcp-options
            - egress-only-internet-gateway
            - elastic-gpu
            - elastic-ip
            - export-image-task
            - export-instance-task
            - fleet
            - fpga-image
            - host-reservation
            - image
            - import-image-task
            - import-snapshot-task
            - instance
            - internet-gateway
            - key-pair
            - launch-template
            - local-gateway-route-table-vpc-association
            - natgateway
            - network-acl
            - network-insights-analysis
            - network-insights-path
            - network-interface
            - placement-group
            - reserved-instances
            - route-table
            - security-group
            - snapshot
            - spot-fleet-request
            - spot-instances-request
            - subnet
            - traffic-mirror-filter
            - traffic-mirror-session
            - traffic-mirror-target
            - transit-gateway
            - transit-gateway-attachment
            - transit-gateway-connect-peer
            - transit-gateway-multicast-domain
            - transit-gateway-route-table
            - volume
            - vpc
            - vpc-flow-log
            - vpc-peering-connection
            - vpn-connection
            - vpn-gateway
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
    FleetLaunchTemplateSpecification:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateId:
          type: string
        LaunchTemplateName:
          type: string
          minLength: 3
          maxLength: 128
          pattern: '[a-zA-Z0-9\(\)\.\-/_]+'
        Version:
          type: string
      required:
        - Version
    GroupIdentifier:
      type: object
      additionalProperties: false
      properties:
        GroupId:
          type: string
      required:
        - GroupId
    IamInstanceProfileSpecification:
      type: object
      additionalProperties: false
      properties:
        Arn:
          type: string
    ClassicLoadBalancersConfig:
      type: object
      additionalProperties: false
      properties:
        ClassicLoadBalancers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ClassicLoadBalancer'
      required:
        - ClassicLoadBalancers
    LaunchTemplateOverrides:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        InstanceType:
          type: string
        SpotPrice:
          type: string
        SubnetId:
          type: string
        WeightedCapacity:
          type: number
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
        Priority:
          type: number
    SpotFleetMonitoring:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
          default: false
    SpotPlacement:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        GroupName:
          type: string
        Tenancy:
          type: string
          enum:
            - dedicated
            - default
            - host
    InstanceNetworkInterfaceSpecification:
      type: object
      additionalProperties: false
      properties:
        AssociatePublicIpAddress:
          type: boolean
        DeleteOnTermination:
          type: boolean
        Description:
          type: string
        DeviceIndex:
          type: integer
        Groups:
          type: array
          uniqueItems: true
          items:
            type: string
        Ipv6AddressCount:
          type: integer
        Ipv6Addresses:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InstanceIpv6Address'
        NetworkInterfaceId:
          type: string
        PrivateIpAddresses:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PrivateIpAddressSpecification'
        SecondaryPrivateIpAddressCount:
          type: integer
        SubnetId:
          type: string
    TargetGroupsConfig:
      type: object
      additionalProperties: false
      properties:
        TargetGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroup'
      required:
        - TargetGroups
    TargetGroup:
      type: object
      additionalProperties: false
      properties:
        Arn:
          type: string
      required:
        - Arn
    ClassicLoadBalancer:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
      required:
        - Name
    SpotFleet:
      type: object
      properties:
        Id:
          type: string
        SpotFleetRequestConfigData:
          $ref: '#/components/schemas/SpotFleetRequestConfigData'
      required:
        - SpotFleetRequestConfigData
      x-stackql-resource-name: spot_fleet
      description: Resource Type definition for AWS::EC2::SpotFleet
      x-type-name: AWS::EC2::SpotFleet
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - SpotFleetRequestConfigData/AllocationStrategy
        - SpotFleetRequestConfigData/IamFleetRole
        - SpotFleetRequestConfigData/InstanceInterruptionBehavior
        - SpotFleetRequestConfigData/InstancePoolsToUseCount
        - SpotFleetRequestConfigData/LaunchSpecifications
        - SpotFleetRequestConfigData/LaunchTemplateConfigs
        - SpotFleetRequestConfigData/LoadBalancersConfig
        - SpotFleetRequestConfigData/OnDemandAllocationStrategy
        - SpotFleetRequestConfigData/OnDemandMaxTotalPrice
        - SpotFleetRequestConfigData/OnDemandTargetCapacity
        - SpotFleetRequestConfigData/ReplaceUnhealthyInstances
        - SpotFleetRequestConfigData/SpotMaintenanceStrategies
        - SpotFleetRequestConfigData/SpotMaxTotalPrice
        - SpotFleetRequestConfigData/SpotPrice
        - SpotFleetRequestConfigData/TagSpecifications
        - SpotFleetRequestConfigData/TerminateInstancesWithExpiration
        - SpotFleetRequestConfigData/Type
        - SpotFleetRequestConfigData/ValidFrom
        - SpotFleetRequestConfigData/ValidUntil
      x-write-only-properties:
        - SpotFleetRequestConfigData/TagSpecifications
        - SpotFleetRequestConfigData/LaunchSpecifications/*/NetworkInterfaces/*/Groups
      x-read-only-properties:
        - Id
      x-required-properties:
        - SpotFleetRequestConfigData
      x-required-permissions:
        create:
          - iam:PassRole
          - ec2:CreateTags
          - ec2:RequestSpotFleet
          - ec2:DescribeSpotFleetRequests
          - ec2:RunInstances
        delete:
          - ec2:DescribeSpotFleetRequests
          - ec2:CancelSpotFleetRequests
        list:
          - ec2:DescribeSpotFleetRequests
        read:
          - ec2:DescribeSpotFleetRequests
        update:
          - ec2:ModifySpotFleetRequest
          - ec2:DescribeSpotFleetRequests
    Subnet:
      type: object
      properties:
        AssignIpv6AddressOnCreation:
          type: boolean
          description: |-
            Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
             If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        VpcId:
          type: string
          description: |-
            The ID of the VPC the subnet is in.
             If you update this property, you must also update the ``CidrBlock`` property.
        MapPublicIpOnLaunch:
          type: boolean
          description: |-
            Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
              AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        EnableLniAtDeviceIndex:
          type: integer
          description: Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface (eth1).
        NetworkAclAssociationId:
          type: string
          description: ''
        AvailabilityZone:
          type: string
          description: |-
            The Availability Zone of the subnet.
             If you update this property, you must also update the ``CidrBlock`` property.
        AvailabilityZoneId:
          type: string
          description: The AZ ID of the subnet.
        CidrBlock:
          type: string
          description: |-
            The IPv4 CIDR block assigned to the subnet.
             If you update this property, we create a new subnet, and then delete the existing one.
        SubnetId:
          type: string
          description: ''
        Ipv6CidrBlocks:
          type: array
          uniqueItems: false
          items:
            type: string
          description: ''
        Ipv6CidrBlock:
          type: string
          description: |-
            The IPv6 CIDR block.
             If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        OutpostArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Outpost.
        Ipv6Native:
          type: boolean
          description: Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
        EnableDns64:
          type: boolean
          description: |-
            Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
              You must first configure a NAT gateway in a public subnet (separate from the subnet containing the IPv6-only workloads). For example, the subnet containing the NAT gateway should have a ``0.0.0.0/0`` route pointing to the internet gateway. For more information, see [Configure DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html#nat-gateway-nat64-dns64-walkthrough) in the *User Guide*.
        PrivateDnsNameOptionsOnLaunch:
          type: object
          additionalProperties: false
          properties:
            HostnameType:
              type: string
            EnableResourceNameDnsARecord:
              type: boolean
            EnableResourceNameDnsAAAARecord:
              type: boolean
          description: |-
            The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
             Available options:
              +  EnableResourceNameDnsAAAARecord (true | false)
              +  EnableResourceNameDnsARecord (true | false)
              +  HostnameType (ip-name | resource-name)
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Any tags assigned to the subnet.
        Ipv4IpamPoolId:
          type: string
          description: An IPv4 IPAM pool ID for the subnet.
        Ipv4NetmaskLength:
          type: integer
          description: An IPv4 netmask length for the subnet.
        Ipv6IpamPoolId:
          type: string
          description: An IPv6 IPAM pool ID for the subnet.
        Ipv6NetmaskLength:
          type: integer
          description: An IPv6 netmask length for the subnet.
      required:
        - VpcId
      x-stackql-resource-name: subnet
      description: |-
        Specifies a subnet for the specified VPC.
         For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
         For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
      x-type-name: AWS::EC2::Subnet
      x-stackql-primary-identifier:
        - SubnetId
      x-create-only-properties:
        - VpcId
        - AvailabilityZone
        - AvailabilityZoneId
        - CidrBlock
        - OutpostArn
        - Ipv6Native
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-conditional-create-only-properties:
        - Ipv6CidrBlock
      x-write-only-properties:
        - EnableLniAtDeviceIndex
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-read-only-properties:
        - NetworkAclAssociationId
        - SubnetId
        - Ipv6CidrBlocks
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:DescribeSubnets
          - ec2:CreateSubnet
          - ec2:CreateTags
          - ec2:ModifySubnetAttribute
        read:
          - ec2:DescribeSubnets
          - ec2:DescribeNetworkAcls
        update:
          - ec2:DescribeSubnets
          - ec2:ModifySubnetAttribute
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:AssociateSubnetCidrBlock
          - ec2:DisassociateSubnetCidrBlock
        delete:
          - ec2:DescribeSubnets
          - ec2:DeleteSubnet
        list:
          - ec2:DescribeSubnets
          - ec2:DescribeNetworkAcls
    SubnetCidrBlock:
      type: object
      properties:
        Id:
          description: Information about the IPv6 association.
          type: string
        Ipv6CidrBlock:
          description: The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
          type: string
          maxLength: 42
        Ipv6IpamPoolId:
          description: The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
          type: string
        Ipv6NetmaskLength:
          description: The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
          type: integer
          minimum: 0
          maximum: 128
        SubnetId:
          description: The ID of the subnet
          type: string
        Ipv6AddressAttribute:
          type: string
          description: The value denoting whether an IPv6 Subnet CIDR Block is public or private.
        IpSource:
          type: string
          description: The IP Source of an IPv6 Subnet CIDR Block.
      required:
        - SubnetId
      x-stackql-resource-name: subnet_cidr_block
      description: The AWS::EC2::SubnetCidrBlock resource creates association between subnet and IPv6 CIDR
      x-type-name: AWS::EC2::SubnetCidrBlock
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Ipv6CidrBlock
        - SubnetId
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-write-only-properties:
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-read-only-properties:
        - Id
        - Ipv6AddressAttribute
        - IpSource
      x-required-properties:
        - SubnetId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AssociateSubnetCidrBlock
          - ec2:DescribeSubnets
        delete:
          - ec2:DisassociateSubnetCidrBlock
          - ec2:DescribeSubnets
        list:
          - ec2:DescribeSubnets
        read:
          - ec2:DescribeSubnets
    SubnetNetworkAclAssociation:
      type: object
      properties:
        SubnetId:
          type: string
          description: The ID of the subnet
        NetworkAclId:
          type: string
          description: The ID of the network ACL
        AssociationId:
          type: string
      required:
        - NetworkAclId
        - SubnetId
      x-stackql-resource-name: subnet_network_acl_association
      description: Resource Type definition for AWS::EC2::SubnetNetworkAclAssociation
      x-type-name: AWS::EC2::SubnetNetworkAclAssociation
      x-stackql-primary-identifier:
        - AssociationId
      x-create-only-properties:
        - SubnetId
        - NetworkAclId
      x-read-only-properties:
        - AssociationId
      x-required-properties:
        - NetworkAclId
        - SubnetId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:DescribeNetworkAcls
          - ec2:ReplaceNetworkAclAssociation
        read:
          - ec2:DescribeNetworkAcls
        delete:
          - ec2:DescribeNetworkAcls
          - ec2:ReplaceNetworkAclAssociation
        list:
          - ec2:DescribeNetworkAcls
    SubnetRouteTableAssociation:
      type: object
      properties:
        RouteTableId:
          description: |-
            The ID of the route table.
             The physical ID changes when the route table ID is changed.
          type: string
        Id:
          description: ''
          type: string
        SubnetId:
          description: The ID of the subnet.
          type: string
      required:
        - RouteTableId
        - SubnetId
      x-stackql-resource-name: subnet_route_table_association
      description: Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. A route table can be associated with multiple subnets. To create a route table, see [AWS::EC2::RouteTable](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-routetable.html).
      x-type-name: AWS::EC2::SubnetRouteTableAssociation
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - SubnetId
        - RouteTableId
      x-read-only-properties:
        - Id
      x-required-properties:
        - RouteTableId
        - SubnetId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeRouteTables
        create:
          - ec2:AssociateRouteTable
          - ec2:ReplaceRouteTableAssociation
          - ec2:DescribeSubnets
          - ec2:DescribeRouteTables
        list:
          - ec2:DescribeRouteTables
        delete:
          - ec2:DisassociateRouteTable
          - ec2:DescribeSubnets
          - ec2:DescribeRouteTables
    TransitGateway:
      type: object
      properties:
        DefaultRouteTablePropagation:
          type: string
        TransitGatewayArn:
          type: string
        Description:
          type: string
        AutoAcceptSharedAttachments:
          type: string
        DefaultRouteTableAssociation:
          type: string
        Id:
          type: string
        VpnEcmpSupport:
          type: string
        DnsSupport:
          type: string
        SecurityGroupReferencingSupport:
          type: string
        MulticastSupport:
          type: string
        AmazonSideAsn:
          type: integer
          format: int64
        TransitGatewayCidrBlocks:
          type: array
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        AssociationDefaultRouteTableId:
          type: string
        PropagationDefaultRouteTableId:
          type: string
      x-stackql-resource-name: transit_gateway
      description: Resource Type definition for AWS::EC2::TransitGateway
      x-type-name: AWS::EC2::TransitGateway
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - AmazonSideAsn
        - MulticastSupport
      x-read-only-properties:
        - Id
        - TransitGatewayArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        read:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        delete:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        update:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        list:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
    TransitGatewayAttachment:
      type: object
      properties:
        Options:
          description: The options for the transit gateway vpc attachment.
          additionalProperties: false
          type: object
          properties:
            Ipv6Support:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            ApplianceModeSupport:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            SecurityGroupReferencingSupport:
              description: 'Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            DnsSupport:
              description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
        TransitGatewayId:
          type: string
        VpcId:
          type: string
        Id:
          type: string
        SubnetIds:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::Subnet
              propertyPath: /properties/SubnetId
            type: string
        Tags:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
        - SubnetIds
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_attachment
      description: Resource Type definition for AWS::EC2::TransitGatewayAttachment
      x-type-name: AWS::EC2::TransitGatewayAttachment
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - TransitGatewayId
        - VpcId
      x-read-only-properties:
        - Id
      x-required-properties:
        - VpcId
        - SubnetIds
        - TransitGatewayId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        create:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        update:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        list:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        delete:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
    TransitGatewayConnectOptions:
      type: object
      properties:
        Protocol:
          description: The tunnel protocol.
          type: string
      additionalProperties: false
    TransitGatewayConnect:
      type: object
      properties:
        TransitGatewayAttachmentId:
          description: The ID of the Connect attachment.
          type: string
        TransportTransitGatewayAttachmentId:
          description: The ID of the attachment from which the Connect attachment was created.
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        State:
          description: The state of the attachment.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        Tags:
          description: The tags for the attachment.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          $ref: '#/components/schemas/TransitGatewayConnectOptions'
          description: The Connect attachment options.
      required:
        - TransportTransitGatewayAttachmentId
        - Options
      x-stackql-resource-name: transit_gateway_connect
      description: The AWS::EC2::TransitGatewayConnect type
      x-type-name: AWS::EC2::TransitGatewayConnect
      x-stackql-primary-identifier:
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransportTransitGatewayAttachmentId
        - Options
      x-read-only-properties:
        - TransitGatewayAttachmentId
        - State
        - CreationTime
        - TransitGatewayId
      x-required-properties:
        - TransportTransitGatewayAttachmentId
        - Options
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:CreateTransitGatewayConnect
          - ec2:DescribeTransitGatewayConnects
          - ec2:CreateTags
        read:
          - ec2:DescribeTransitGatewayConnects
        update:
          - ec2:DescribeTransitGatewayConnects
          - ec2:DeleteTags
          - ec2:CreateTags
        delete:
          - ec2:DeleteTransitGatewayConnect
          - ec2:DescribeTransitGatewayConnects
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayConnects
    TransitGatewayMulticastDomain:
      type: object
      properties:
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        TransitGatewayMulticastDomainArn:
          description: The Amazon Resource Name (ARN) of the transit gateway multicast domain.
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        State:
          description: The state of the transit gateway multicast domain.
          type: string
        CreationTime:
          description: The time the transit gateway multicast domain was created.
          type: string
          format: date-time
        Tags:
          description: The tags for the transit gateway multicast domain.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          description: The options for the transit gateway multicast domain.
          type: object
          properties:
            AutoAcceptSharedAssociations:
              description: 'Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain. Valid Values: enable | disable'
              type: string
            Igmpv2Support:
              description: 'Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain. Valid Values: enable | disable'
              type: string
            StaticSourcesSupport:
              description: 'Indicates whether support for statically configuring transit gateway multicast group sources is turned on. Valid Values: enable | disable'
              type: string
          additionalProperties: false
      required:
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_multicast_domain
      description: The AWS::EC2::TransitGatewayMulticastDomain type
      x-type-name: AWS::EC2::TransitGatewayMulticastDomain
      x-stackql-primary-identifier:
        - TransitGatewayMulticastDomainId
      x-create-only-properties:
        - TransitGatewayId
      x-read-only-properties:
        - TransitGatewayMulticastDomainId
        - State
        - CreationTime
        - TransitGatewayMulticastDomainArn
      x-required-properties:
        - TransitGatewayId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:CreateTransitGatewayMulticastDomain
          - ec2:CreateTags
        read:
          - ec2:DescribeTransitGatewayMulticastDomains
        update:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:DeleteTags
          - ec2:CreateTags
        delete:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:DeleteTransitGatewayMulticastDomain
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayMulticastDomains
    TransitGatewayMulticastDomainAssociation:
      type: object
      properties:
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        State:
          description: The state of the subnet association.
          type: string
        SubnetId:
          description: The IDs of the subnets to associate with the transit gateway multicast domain.
          type: string
      required:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-stackql-resource-name: transit_gateway_multicast_domain_association
      description: The AWS::EC2::TransitGatewayMulticastDomainAssociation type
      x-type-name: AWS::EC2::TransitGatewayMulticastDomainAssociation
      x-stackql-primary-identifier:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-read-only-properties:
        - ResourceId
        - ResourceType
        - State
      x-required-properties:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AssociateTransitGatewayMulticastDomain
          - ec2:GetTransitGatewayMulticastDomainAssociations
        read:
          - ec2:GetTransitGatewayMulticastDomainAssociations
        delete:
          - ec2:DisassociateTransitGatewayMulticastDomain
          - ec2:GetTransitGatewayMulticastDomainAssociations
        list:
          - ec2:GetTransitGatewayMulticastDomainAssociations
    TransitGatewayMulticastGroupMember:
      type: object
      properties:
        GroupIpAddress:
          description: The IP address assigned to the transit gateway multicast group.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        SubnetId:
          description: The ID of the subnet.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        NetworkInterfaceId:
          description: The ID of the transit gateway attachment.
          type: string
        GroupMember:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        GroupSource:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        MemberType:
          description: The member type (for example, static).
          type: string
      required:
        - GroupIpAddress
        - NetworkInterfaceId
        - TransitGatewayMulticastDomainId
      x-stackql-resource-name: transit_gateway_multicast_group_member
      description: The AWS::EC2::TransitGatewayMulticastGroupMember registers and deregisters members and sources (network interfaces) with the transit gateway multicast group
      x-type-name: AWS::EC2::TransitGatewayMulticastGroupMember
      x-stackql-primary-identifier:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-read-only-properties:
        - SubnetId
        - ResourceId
        - ResourceType
        - GroupSource
        - GroupMember
        - MemberType
        - TransitGatewayAttachmentId
      x-required-properties:
        - GroupIpAddress
        - NetworkInterfaceId
        - TransitGatewayMulticastDomainId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:RegisterTransitGatewayMulticastGroupMembers
          - ec2:SearchTransitGatewayMulticastGroups
        read:
          - ec2:SearchTransitGatewayMulticastGroups
        delete:
          - ec2:DeregisterTransitGatewayMulticastGroupMembers
          - ec2:SearchTransitGatewayMulticastGroups
        list:
          - ec2:SearchTransitGatewayMulticastGroups
    TransitGatewayMulticastGroupSource:
      type: object
      properties:
        GroupIpAddress:
          description: The IP address assigned to the transit gateway multicast group.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        SubnetId:
          description: The ID of the subnet.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        NetworkInterfaceId:
          description: The ID of the transit gateway attachment.
          type: string
        GroupMember:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        GroupSource:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        SourceType:
          description: The source type.
          type: string
      required:
        - TransitGatewayMulticastDomainId
        - NetworkInterfaceId
        - GroupIpAddress
      x-stackql-resource-name: transit_gateway_multicast_group_source
      description: The AWS::EC2::TransitGatewayMulticastGroupSource registers and deregisters members and sources (network interfaces) with the transit gateway multicast group
      x-type-name: AWS::EC2::TransitGatewayMulticastGroupSource
      x-stackql-primary-identifier:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-read-only-properties:
        - SubnetId
        - ResourceId
        - ResourceType
        - GroupSource
        - GroupMember
        - SourceType
        - TransitGatewayAttachmentId
      x-required-properties:
        - TransitGatewayMulticastDomainId
        - NetworkInterfaceId
        - GroupIpAddress
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:RegisterTransitGatewayMulticastGroupSources
          - ec2:SearchTransitGatewayMulticastGroups
        read:
          - ec2:SearchTransitGatewayMulticastGroups
        delete:
          - ec2:DeregisterTransitGatewayMulticastGroupSources
          - ec2:SearchTransitGatewayMulticastGroups
        list:
          - ec2:SearchTransitGatewayMulticastGroups
    PeeringAttachmentStatus:
      additionalProperties: false
      type: object
      properties:
        Message:
          description: The status message, if applicable.
          type: string
        Code:
          description: The status code.
          type: string
    TransitGatewayPeeringAttachment:
      type: object
      properties:
        Status:
          description: The status of the transit gateway peering attachment.
          $ref: '#/components/schemas/PeeringAttachmentStatus'
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        PeerTransitGatewayId:
          description: The ID of the peer transit gateway.
          type: string
        PeerAccountId:
          description: The ID of the peer account
          type: string
        State:
          description: The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
          type: string
        CreationTime:
          format: date-time
          description: The time the transit gateway peering attachment was created.
          type: string
        PeerRegion:
          description: Peer Region
          type: string
        Tags:
          description: The tags for the transit gateway peering attachment.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway peering attachment.
          type: string
      required:
        - TransitGatewayId
        - PeerTransitGatewayId
        - PeerAccountId
        - PeerRegion
      x-stackql-resource-name: transit_gateway_peering_attachment
      description: The AWS::EC2::TransitGatewayPeeringAttachment type
      x-type-name: AWS::EC2::TransitGatewayPeeringAttachment
      x-stackql-primary-identifier:
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransitGatewayId
        - PeerTransitGatewayId
        - PeerRegion
        - PeerAccountId
      x-read-only-properties:
        - TransitGatewayAttachmentId
        - Status
        - State
        - CreationTime
      x-required-properties:
        - TransitGatewayId
        - PeerTransitGatewayId
        - PeerAccountId
        - PeerRegion
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeTransitGatewayPeeringAttachments
        create:
          - ec2:CreateTransitGatewayPeeringAttachment
          - ec2:DescribeTransitGatewayPeeringAttachments
          - ec2:CreateTags
        update:
          - ec2:DescribeTransitGatewayPeeringAttachments
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayPeeringAttachments
        delete:
          - ec2:DeleteTransitGatewayPeeringAttachment
          - ec2:DescribeTransitGatewayPeeringAttachments
          - ec2:DeleteTags
    TransitGatewayRoute:
      type: object
      properties:
        TransitGatewayRouteTableId:
          description: The ID of transit gateway route table.
          type: string
        DestinationCidrBlock:
          description: The CIDR range used for destination matches. Routing decisions are based on the most specific match.
          type: string
        Blackhole:
          description: Indicates whether to drop traffic that matches this route.
          type: boolean
        TransitGatewayAttachmentId:
          description: The ID of transit gateway attachment.
          type: string
      required:
        - TransitGatewayRouteTableId
        - DestinationCidrBlock
      x-stackql-resource-name: transit_gateway_route
      description: Resource Type definition for AWS::EC2::TransitGatewayRoute
      x-type-name: AWS::EC2::TransitGatewayRoute
      x-stackql-primary-identifier:
        - TransitGatewayRouteTableId
        - DestinationCidrBlock
      x-create-only-properties:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
        - DestinationCidrBlock
        - Blackhole
      x-required-properties:
        - TransitGatewayRouteTableId
        - DestinationCidrBlock
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:SearchTransitGatewayRoutes
        create:
          - ec2:CreateTransitGatewayRoute
          - ec2:SearchTransitGatewayRoutes
        list:
          - ec2:SearchTransitGatewayRoutes
        delete:
          - ec2:DeleteTransitGatewayRoute
          - ec2:SearchTransitGatewayRoutes
    TransitGatewayRouteTable:
      type: object
      properties:
        TransitGatewayRouteTableId:
          description: Transit Gateway Route Table primary identifier
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        Tags:
          uniqueItems: false
          description: Tags are composed of a Key/Value pair. You can use tags to categorize and track each parameter group. The tag value null is permitted.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_route_table
      description: Resource Type definition for AWS::EC2::TransitGatewayRouteTable
      x-type-name: AWS::EC2::TransitGatewayRouteTable
      x-stackql-primary-identifier:
        - TransitGatewayRouteTableId
      x-create-only-properties:
        - TransitGatewayId
      x-read-only-properties:
        - TransitGatewayRouteTableId
      x-required-properties:
        - TransitGatewayId
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeTransitGatewayRouteTables
        create:
          - ec2:CreateTransitGatewayRouteTable
          - ec2:CreateTags
          - ec2:DescribeTransitGatewayRouteTables
        update:
          - ec2:DescribeTransitGatewayRouteTables
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayRouteTables
        delete:
          - ec2:DeleteTransitGatewayRouteTable
          - ec2:DescribeTransitGatewayRouteTables
          - ec2:GetTransitGatewayRouteTableAssociations
          - ec2:DisassociateTransitGatewayRouteTable
    TransitGatewayRouteTableAssociation:
      type: object
      properties:
        TransitGatewayRouteTableId:
          description: The ID of transit gateway route table.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of transit gateway attachment.
          type: string
      required:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-stackql-resource-name: transit_gateway_route_table_association
      description: Resource Type definition for AWS::EC2::TransitGatewayRouteTableAssociation
      x-type-name: AWS::EC2::TransitGatewayRouteTableAssociation
      x-stackql-primary-identifier:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-required-properties:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:GetTransitGatewayRouteTableAssociations
        create:
          - ec2:AssociateTransitGatewayRouteTable
          - ec2:GetTransitGatewayRouteTableAssociations
        list:
          - ec2:GetTransitGatewayRouteTableAssociations
        delete:
          - ec2:GetTransitGatewayRouteTableAssociations
          - ec2:DisassociateTransitGatewayRouteTable
    TransitGatewayRouteTablePropagation:
      type: object
      properties:
        TransitGatewayRouteTableId:
          description: The ID of transit gateway route table.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of transit gateway attachment.
          type: string
      required:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-stackql-resource-name: transit_gateway_route_table_propagation
      description: AWS::EC2::TransitGatewayRouteTablePropagation Type
      x-type-name: AWS::EC2::TransitGatewayRouteTablePropagation
      x-stackql-primary-identifier:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransitGatewayAttachmentId
        - TransitGatewayRouteTableId
      x-required-properties:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:GetTransitGatewayRouteTablePropagations
        create:
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:EnableTransitGatewayRouteTablePropagation
        list:
          - ec2:GetTransitGatewayRouteTablePropagations
        delete:
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:DisableTransitGatewayRouteTablePropagation
    TransitGatewayVpcAttachment:
      type: object
      properties:
        Id:
          type: string
        TransitGatewayId:
          type: string
        VpcId:
          type: string
        SubnetIds:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        AddSubnetIds:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        RemoveSubnetIds:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          description: The options for the transit gateway vpc attachment.
          type: object
          properties:
            DnsSupport:
              description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            Ipv6Support:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            ApplianceModeSupport:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            SecurityGroupReferencingSupport:
              description: 'Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid values: enable | disable'
              type: string
          additionalProperties: false
      required:
        - SubnetIds
        - VpcId
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_vpc_attachment
      description: Resource Type definition for AWS::EC2::TransitGatewayVpcAttachment
      x-type-name: AWS::EC2::TransitGatewayVpcAttachment
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - TransitGatewayId
        - SubnetIds
        - VpcId
      x-write-only-properties:
        - AddSubnetIds
        - RemoveSubnetIds
      x-read-only-properties:
        - Id
      x-required-properties:
        - SubnetIds
        - VpcId
        - TransitGatewayId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        read:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        delete:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        list:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        update:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
    NetworkInterfaceOptions:
      description: The options for network-interface type endpoint.
      type: object
      properties:
        NetworkInterfaceId:
          description: The ID of the network interface.
          type: string
        Port:
          description: The IP port number.
          type: integer
          minimum: 1
          maximum: 65535
        Protocol:
          description: The IP protocol.
          type: string
      additionalProperties: false
    LoadBalancerOptions:
      description: The load balancer details if creating the AWS Verified Access endpoint as load-balancertype.
      type: object
      properties:
        LoadBalancerArn:
          description: The ARN of the load balancer.
          type: string
        Port:
          description: The IP port number.
          type: integer
          minimum: 1
          maximum: 65535
        Protocol:
          description: The IP protocol.
          type: string
        SubnetIds:
          description: The IDs of the subnets.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubnetId'
      additionalProperties: false
    SseSpecification:
      description: The configuration options for customer provided KMS encryption.
      type: object
      properties:
        KmsKeyArn:
          description: KMS Key Arn used to encrypt the group policy
          type: string
        CustomerManagedKeyEnabled:
          description: Whether to encrypt the policy with the provided key or disable encryption
          type: boolean
      additionalProperties: false
    VerifiedAccessEndpoint:
      type: object
      properties:
        VerifiedAccessEndpointId:
          description: The ID of the AWS Verified Access endpoint.
          type: string
        VerifiedAccessGroupId:
          description: The ID of the AWS Verified Access group.
          type: string
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        Status:
          description: The endpoint status.
          type: string
        SecurityGroupIds:
          description: The IDs of the security groups for the endpoint.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SecurityGroupId'
        NetworkInterfaceOptions:
          description: The options for network-interface type endpoint.
          $ref: '#/components/schemas/NetworkInterfaceOptions'
        LoadBalancerOptions:
          description: The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
          $ref: '#/components/schemas/LoadBalancerOptions'
        EndpointType:
          description: The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
          type: string
        EndpointDomain:
          description: A DNS name that is generated for the endpoint.
          type: string
        EndpointDomainPrefix:
          description: A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
          type: string
        DeviceValidationDomain:
          description: Returned if endpoint has a device trust provider attached.
          type: string
        DomainCertificateArn:
          description: The ARN of a public TLS/SSL certificate imported into or created with ACM.
          type: string
        AttachmentType:
          description: The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
          type: string
        ApplicationDomain:
          description: The DNS name for users to reach your application.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        LastUpdatedTime:
          description: The last updated time.
          type: string
        Description:
          description: A description for the AWS Verified Access endpoint.
          type: string
        PolicyDocument:
          description: The AWS Verified Access policy document.
          type: string
        PolicyEnabled:
          description: The status of the Verified Access policy.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          $ref: '#/components/schemas/SseSpecification'
      required:
        - ApplicationDomain
        - AttachmentType
        - DomainCertificateArn
        - EndpointType
        - VerifiedAccessGroupId
        - EndpointDomainPrefix
      x-stackql-resource-name: verified_access_endpoint
      description: The AWS::EC2::VerifiedAccessEndpoint resource creates an AWS EC2 Verified Access Endpoint.
      x-type-name: AWS::EC2::VerifiedAccessEndpoint
      x-stackql-primary-identifier:
        - VerifiedAccessEndpointId
      x-create-only-properties:
        - ApplicationDomain
        - AttachmentType
        - DomainCertificateArn
        - EndpointDomainPrefix
        - EndpointType
        - SecurityGroupIds
        - NetworkInterfaceOptions/NetworkInterfaceId
        - LoadBalancerOptions/LoadBalancerArn
      x-read-only-properties:
        - VerifiedAccessEndpointId
        - EndpointDomain
        - CreationTime
        - LastUpdatedTime
        - Status
        - DeviceValidationDomain
        - VerifiedAccessInstanceId
      x-required-properties:
        - ApplicationDomain
        - AttachmentType
        - DomainCertificateArn
        - EndpointType
        - VerifiedAccessGroupId
        - EndpointDomainPrefix
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DescribeTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DescribeVerifiedAccessEndpoints
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - acm:GetCertificateWithPK
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - sso:CreateManagedApplicationInstance
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeAccountAttributes
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerCertificates
          - ec2:CreateTags
          - ec2:DescribeTags
          - acm:DeleteCertificateRelation
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - sso:DeleteManagedApplicationInstance
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:DescribeTags
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:GetCertificateWithPK
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:GetVerifiedAccessEndpointPolicy
          - acm:GetCertificateWithPK
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeAccountAttributes
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerCertificates
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteVerifiedAccessEndpoint
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DescribeTags
          - ec2:DeleteTags
          - sso:DeleteManagedApplicationInstance
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - acm:GetCertificateWithPK
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:DescribeTags
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:GetCertificateWithPK
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessGroup:
      type: object
      properties:
        VerifiedAccessGroupId:
          description: The ID of the AWS Verified Access group.
          type: string
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        VerifiedAccessGroupArn:
          description: The ARN of the Verified Access group.
          type: string
        Owner:
          description: The AWS account number that owns the group.
          type: string
        CreationTime:
          description: Time this Verified Access Group was created.
          type: string
        LastUpdatedTime:
          description: Time this Verified Access Group was last updated.
          type: string
        Description:
          description: A description for the AWS Verified Access group.
          type: string
        PolicyDocument:
          description: The AWS Verified Access policy document.
          type: string
        PolicyEnabled:
          description: The status of the Verified Access policy.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          $ref: '#/components/schemas/SseSpecification'
      required:
        - VerifiedAccessInstanceId
      x-stackql-resource-name: verified_access_group
      description: The AWS::EC2::VerifiedAccessGroup resource creates an AWS EC2 Verified Access Group.
      x-type-name: AWS::EC2::VerifiedAccessGroup
      x-stackql-primary-identifier:
        - VerifiedAccessGroupId
      x-read-only-properties:
        - VerifiedAccessGroupId
        - CreationTime
        - LastUpdatedTime
        - Owner
        - VerifiedAccessGroupArn
      x-required-properties:
        - VerifiedAccessInstanceId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DescribeTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessGroup
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:CreateTags
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessGroup
          - ec2:ModifyVerifiedAccessGroupPolicy
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DeleteVerifiedAccessGroup
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessGroups
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessGroups
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessTrustProvider:
      type: object
      properties:
        TrustProviderType:
          description: 'Type of trust provider. Possible values: user|device'
          type: string
        DeviceTrustProviderType:
          description: 'The type of device-based trust provider. Possible values: jamf|crowdstrike'
          type: string
        UserTrustProviderType:
          description: 'The type of device-based trust provider. Possible values: oidc|iam-identity-center'
          type: string
        OidcOptions:
          $ref: '#/components/schemas/OidcOptions'
        DeviceOptions:
          $ref: '#/components/schemas/DeviceOptions'
        PolicyReferenceName:
          description: The identifier to be used when working with policy rules.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        LastUpdatedTime:
          description: The last updated time.
          type: string
        VerifiedAccessTrustProviderId:
          description: The ID of the Amazon Web Services Verified Access trust provider.
          type: string
        Description:
          description: A description for the Amazon Web Services Verified Access trust provider.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          type: object
          properties:
            KmsKeyArn:
              description: KMS Key Arn used to encrypt the group policy
              type: string
            CustomerManagedKeyEnabled:
              description: Whether to encrypt the policy with the provided key or disable encryption
              type: boolean
          additionalProperties: false
      required:
        - TrustProviderType
        - PolicyReferenceName
      x-stackql-resource-name: verified_access_trust_provider
      description: The AWS::EC2::VerifiedAccessTrustProvider type describes a verified access trust provider
      x-type-name: AWS::EC2::VerifiedAccessTrustProvider
      x-stackql-primary-identifier:
        - VerifiedAccessTrustProviderId
      x-create-only-properties:
        - PolicyReferenceName
        - DeviceOptions
        - DeviceTrustProviderType
        - TrustProviderType
        - UserTrustProviderType
      x-read-only-properties:
        - VerifiedAccessTrustProviderId
        - CreationTime
        - LastUpdatedTime
      x-required-properties:
        - TrustProviderType
        - PolicyReferenceName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DescribeTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessTrustProvider
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:CreateTags
          - ec2:DescribeTags
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessTrustProvider
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DeleteVerifiedAccessTrustProvider
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessTrustProviderId:
      description: The ID of the AWS Verified Access trust provider.
      type: string
    VerifiedAccessLogs:
      description: The configuration options for AWS Verified Access instances.
      type: object
      properties:
        LogVersion:
          description: Select log version for Verified Access logs.
          type: string
        IncludeTrustContext:
          description: Include claims from trust providers in Verified Access logs.
          type: boolean
        CloudWatchLogs:
          description: Sends Verified Access logs to CloudWatch Logs.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            LogGroup:
              description: The ID of the CloudWatch Logs log group.
              type: string
          additionalProperties: false
        KinesisDataFirehose:
          description: Sends Verified Access logs to Kinesis.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            DeliveryStream:
              description: The ID of the delivery stream.
              type: string
          additionalProperties: false
        S3:
          description: Sends Verified Access logs to Amazon S3.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            BucketName:
              description: The bucket name.
              type: string
            BucketOwner:
              description: The ID of the AWS account that owns the Amazon S3 bucket.
              type: string
            Prefix:
              description: The bucket prefix.
              type: string
          additionalProperties: false
      additionalProperties: false
    VerifiedAccessInstance:
      type: object
      properties:
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        VerifiedAccessTrustProviders:
          description: AWS Verified Access trust providers.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VerifiedAccessTrustProvider'
        VerifiedAccessTrustProviderIds:
          description: The IDs of the AWS Verified Access trust providers.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VerifiedAccessTrustProviderId'
        CreationTime:
          description: Time this Verified Access Instance was created.
          type: string
        LastUpdatedTime:
          description: Time this Verified Access Instance was last updated.
          type: string
        Description:
          description: A description for the AWS Verified Access instance.
          type: string
        LoggingConfigurations:
          description: The configuration options for AWS Verified Access instances.
          $ref: '#/components/schemas/VerifiedAccessLogs'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        FipsEnabled:
          description: Indicates whether FIPS is enabled
          type: boolean
      x-stackql-resource-name: verified_access_instance
      description: The AWS::EC2::VerifiedAccessInstance resource creates an AWS EC2 Verified Access Instance.
      x-type-name: AWS::EC2::VerifiedAccessInstance
      x-stackql-primary-identifier:
        - VerifiedAccessInstanceId
      x-read-only-properties:
        - VerifiedAccessInstanceId
        - CreationTime
        - LastUpdatedTime
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DescribeTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessInstance
          - ec2:AttachVerifiedAccessTrustProvider
          - ec2:ModifyVerifiedAccessInstanceLoggingConfiguration
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DetachVerifiedAccessTrustProvider
          - ec2:DeleteVerifiedAccessInstance
          - ec2:CreateTags
          - ec2:DescribeTags
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:PutDestination
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - s3:listBuckets
          - s3:PutObject
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - logs:DescribeLogGroups
          - logs:PutResourcePolicy
          - firehose:TagDeliveryStream
          - logs:DescribeResourcePolicies
          - iam:CreateServiceLinkedRole
          - verified-access:AllowVerifiedAccess
        read:
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DescribeTags
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
        update:
          - ec2:ModifyVerifiedAccessInstance
          - ec2:ModifyVerifiedAccessInstanceLoggingConfiguration
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DescribeTags
          - ec2:AttachVerifiedAccessTrustProvider
          - ec2:DetachVerifiedAccessTrustProvider
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:DescribeTags
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:PutDestination
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - s3:listBuckets
          - s3:PutObject
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - logs:DescribeLogGroups
          - logs:PutResourcePolicy
          - firehose:TagDeliveryStream
          - iam:CreateServiceLinkedRole
          - logs:DescribeResourcePolicies
        delete:
          - ec2:DeleteVerifiedAccessInstance
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DetachVerifiedAccessTrustProvider
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - logs:ListLogDeliveries
          - logs:GetLogDelivery
          - logs:DeleteLogDelivery
        list:
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeTags
          - logs:ListLogDeliveries
          - logs:GetLogDelivery
    OidcOptions:
      description: The OpenID Connect details for an oidc -type, user-identity based trust provider.
      type: object
      properties:
        Issuer:
          type: string
          description: The OIDC issuer.
        AuthorizationEndpoint:
          type: string
          description: The OIDC authorization endpoint.
        TokenEndpoint:
          type: string
          description: The OIDC token endpoint.
        UserInfoEndpoint:
          type: string
          description: The OIDC user info endpoint.
        ClientId:
          type: string
          description: The client identifier.
        ClientSecret:
          type: string
          description: The client secret.
        Scope:
          type: string
          description: OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to details of a user. Each scope returns a specific set of user attributes.
      additionalProperties: false
    DeviceOptions:
      description: The options for device identity based trust providers.
      type: object
      properties:
        TenantId:
          type: string
          description: The ID of the tenant application with the device-identity provider.
        PublicSigningKeyUrl:
          type: string
          description: URL Verified Access will use to verify authenticity of the device tokens.
      additionalProperties: false
    VolumeId:
      description: The ID of the Amazon EBS volume
      type: string
    Id:
      description: ''
      type: string
    Device:
      description: The device name
      type: string
    VolumeAttachment:
      type: object
      properties:
        VolumeId:
          $ref: '#/components/schemas/VolumeId'
          description: The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an [AWS::EC2::Volume](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html) resource, or it can be the volume ID of an existing Amazon EBS volume.
        InstanceId:
          $ref: '#/components/schemas/InstanceId'
          description: The ID of the instance to which the volume attaches. This value can be a reference to an [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) resource, or it can be the physical ID of an existing EC2 instance.
        Device:
          $ref: '#/components/schemas/Device'
          description: The device name (for example, ``/dev/sdh`` or ``xvdh``).
      required:
        - VolumeId
        - InstanceId
      x-stackql-resource-name: volume_attachment
      description: |-
        Attaches an Amazon EBS volume to a running instance and exposes it to the instance with the specified device name.
         Before this resource can be deleted (and therefore the volume detached), you must first unmount the volume in the instance. Failure to do so results in the volume being stuck in the busy state while it is trying to detach, which could possibly damage the file system or the data it contains.
         If an Amazon EBS volume is the root device of an instance, it cannot be detached while the instance is in the "running" state. To detach the root volume, stop the instance first.
         If the root volume is detached from an instance with an MKT product code, then the product codes from that volume are no longer associated with the instance.
      x-type-name: AWS::EC2::VolumeAttachment
      x-stackql-primary-identifier:
        - VolumeId
        - InstanceId
      x-create-only-properties:
        - Device
        - InstanceId
        - VolumeId
      x-required-properties:
        - VolumeId
        - InstanceId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AttachVolume
          - ec2:DescribeVolumes
        read:
          - ec2:DescribeVolumes
        delete:
          - ec2:DetachVolume
          - ec2:DescribeVolumes
        list:
          - ec2:DescribeVolumes
    VPC:
      type: object
      properties:
        VpcId:
          description: ''
          type: string
        InstanceTenancy:
          description: |-
            The allowed tenancy of instances launched into the VPC.
              +   ``default``: An instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different tenancy during instance launch.
              +   ``dedicated``: An instance launched into the VPC runs on dedicated hardware by default, unless you explicitly specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy of ``default`` during instance launch.
              
             Updating ``InstanceTenancy`` requires no replacement only if you are updating its value from ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to ``dedicated`` requires replacement.
          type: string
        Ipv4NetmaskLength:
          description: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
          type: integer
        CidrBlockAssociations:
          uniqueItems: false
          description: ''
          x-insertionOrder: false
          type: array
          items:
            type: string
        CidrBlock:
          description: |-
            The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``. We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
             You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
          type: string
        Ipv4IpamPoolId:
          description: |-
            The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
             You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
          type: string
        DefaultNetworkAcl:
          description: ''
          x-insertionOrder: false
          type: string
        EnableDnsSupport:
          description: >-
            Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. Enabled by default. For more information, see [DNS attributes in your
            VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
          type: boolean
        Ipv6CidrBlocks:
          uniqueItems: false
          description: ''
          x-insertionOrder: false
          type: array
          items:
            type: string
        DefaultSecurityGroup:
          description: ''
          x-insertionOrder: false
          type: string
        EnableDnsHostnames:
          description: |-
            Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs. For more information, see [DNS attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
             You can only enable DNS hostnames if you've enabled DNS support.
          type: boolean
        Tags:
          uniqueItems: false
          description: The tags for the VPC.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: vpc
      description: |-
        Specifies a virtual private cloud (VPC).
         To add an IPv6 CIDR block to the VPC, see [AWS::EC2::VPCCidrBlock](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpccidrblock.html).
         For more information, see [Virtual private clouds (VPC)](https://docs.aws.amazon.com/vpc/latest/userguide/configure-your-vpc.html) in the *Amazon VPC User Guide*.
      x-type-name: AWS::EC2::VPC
      x-stackql-primary-identifier:
        - VpcId
      x-create-only-properties:
        - CidrBlock
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
      x-conditional-create-only-properties:
        - InstanceTenancy
      x-write-only-properties:
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
      x-read-only-properties:
        - CidrBlockAssociations
        - DefaultNetworkAcl
        - DefaultSecurityGroup
        - Ipv6CidrBlocks
        - VpcId
      x-tagging:
        permissions:
          - ec2:DeleteTags
          - ec2:CreateTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeVpcs
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkAcls
          - ec2:DescribeVpcAttribute
        create:
          - ec2:CreateVpc
          - ec2:DescribeVpcs
          - ec2:ModifyVpcAttribute
          - ec2:CreateTags
        update:
          - ec2:CreateTags
          - ec2:ModifyVpcAttribute
          - ec2:DeleteTags
          - ec2:ModifyVpcTenancy
        list:
          - ec2:DescribeVpcs
        delete:
          - ec2:DeleteVpc
          - ec2:DescribeVpcs
    VPCBlockPublicAccessExclusion:
      type: object
      properties:
        ExclusionId:
          type: string
          description: The ID of the exclusion
        InternetGatewayExclusionMode:
          description: The desired Block Public Access Exclusion Mode for a specific VPC/Subnet.
          type: string
          enum:
            - allow-bidirectional
            - allow-egress
        VpcId:
          type: string
          description: The ID of the vpc. Required only if you don't specify SubnetId.
        SubnetId:
          type: string
          description: The ID of the subnet. Required only if you don't specify VpcId
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - InternetGatewayExclusionMode
      x-stackql-resource-name: vpc_block_public_access_exclusion
      description: Resource Type definition for AWS::EC2::VPCBlockPublicAccessExclusion.
      x-type-name: AWS::EC2::VPCBlockPublicAccessExclusion
      x-stackql-primary-identifier:
        - ExclusionId
      x-create-only-properties:
        - VpcId
        - SubnetId
      x-read-only-properties:
        - ExclusionId
      x-required-properties:
        - InternetGatewayExclusionMode
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:DescribeVpcBlockPublicAccessExclusions
          - ec2:CreateVpcBlockPublicAccessExclusion
          - ec2:CreateTags
        read:
          - ec2:DescribeVpcBlockPublicAccessExclusions
        update:
          - ec2:DescribeVpcBlockPublicAccessExclusions
          - ec2:ModifyVpcBlockPublicAccessExclusion
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DescribeVpcBlockPublicAccessExclusions
          - ec2:DeleteVpcBlockPublicAccessExclusion
        list:
          - ec2:DescribeVpcBlockPublicAccessExclusions
    VPCBlockPublicAccessOptions:
      type: object
      properties:
        InternetGatewayBlockMode:
          description: The desired Block Public Access mode for Internet Gateways in your account. We do not allow to create in a off mode as this is the default value
          type: string
          enum:
            - block-bidirectional
            - block-ingress
        AccountId:
          type: string
          description: The identifier for the specified AWS account.
      required:
        - InternetGatewayBlockMode
      x-stackql-resource-name: vpc_block_public_access_options
      description: Resource Type definition for AWS::EC2::VPCBlockPublicAccessOptions
      x-type-name: AWS::EC2::VPCBlockPublicAccessOptions
      x-stackql-primary-identifier:
        - AccountId
      x-read-only-properties:
        - AccountId
      x-required-properties:
        - InternetGatewayBlockMode
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:DescribeVpcBlockPublicAccessOptions
          - ec2:ModifyVpcBlockPublicAccessOptions
        read:
          - ec2:DescribeVpcBlockPublicAccessOptions
        update:
          - ec2:DescribeVpcBlockPublicAccessOptions
          - ec2:ModifyVpcBlockPublicAccessOptions
        delete:
          - ec2:DescribeVpcBlockPublicAccessOptions
          - ec2:ModifyVpcBlockPublicAccessOptions
    VPCCidrBlock:
      type: object
      properties:
        CidrBlock:
          type: string
          description: An IPv4 CIDR block to associate with the VPC.
        Ipv6Pool:
          type: string
          description: The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        Id:
          type: string
          description: The Id of the VPC associated CIDR Block.
        VpcId:
          type: string
          description: The ID of the VPC.
        Ipv6CidrBlock:
          type: string
          description: An IPv6 CIDR block from the IPv6 address pool.
        Ipv4IpamPoolId:
          type: string
          description: The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
        Ipv4NetmaskLength:
          type: integer
          description: The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
        Ipv6IpamPoolId:
          type: string
          description: The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
        Ipv6NetmaskLength:
          type: integer
          description: The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
        AmazonProvidedIpv6CidrBlock:
          type: boolean
          description: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
        Ipv6AddressAttribute:
          type: string
          description: The value denoting whether an IPv6 VPC CIDR Block is public or private.
        IpSource:
          type: string
          description: The IP Source of an IPv6 VPC CIDR Block.
        Ipv6CidrBlockNetworkBorderGroup:
          type: string
          description: The name of the location from which we advertise the IPV6 CIDR block.
      required:
        - VpcId
      x-stackql-resource-name: vpc_cidr_block
      description: Resource Type definition for AWS::EC2::VPCCidrBlock
      x-type-name: AWS::EC2::VPCCidrBlock
      x-stackql-primary-identifier:
        - Id
        - VpcId
      x-create-only-properties:
        - Ipv6Pool
        - VpcId
        - AmazonProvidedIpv6CidrBlock
        - Ipv6CidrBlock
        - CidrBlock
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
        - Ipv6CidrBlockNetworkBorderGroup
      x-write-only-properties:
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-read-only-properties:
        - Id
        - Ipv6AddressAttribute
        - IpSource
      x-required-properties:
        - VpcId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ec2:AssociateVpcCidrBlock
          - ec2:DescribeVpcs
          - ec2:AllocateIpamPoolCidr
        read:
          - ec2:DescribeVpcs
        delete:
          - ec2:DescribeVpcs
          - ec2:DisassociateVpcCidrBlock
        list:
          - ec2:DescribeVpcs
    VPCDHCPOptionsAssociation:
      type: object
      properties:
        DhcpOptionsId:
          type: string
          description: The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        VpcId:
          type: string
          description: The ID of the VPC.
      required:
        - VpcId
        - DhcpOptionsId
      x-stackql-resource-name: vpcdhcp_options_association
      description: Associates a set of DHCP options with a VPC, or associates no DHCP options with the VPC.
      x-type-name: AWS::EC2::VPCDHCPOptionsAssociation
      x-stackql-primary-identifier:
        - DhcpOptionsId
        - VpcId
      x-create-only-properties:
        - DhcpOptionsId
        - VpcId
      x-required-properties:
        - VpcId
        - DhcpOptionsId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AssociateDhcpOptions
        update:
          - ec2:AssociateDhcpOptions
        delete:
          - ec2:AssociateDhcpOptions
        read:
          - ec2:DescribeVpcs
        list:
          - ec2:DescribeVpcs
    DnsOptionsSpecification:
      description: ''
      additionalProperties: false
      type: object
      properties:
        PrivateDnsOnlyForInboundResolverEndpoint:
          type: string
          enum:
            - OnlyInboundResolver
            - AllResolvers
            - NotSpecified
        DnsRecordIpType:
          type: string
          enum:
            - ipv4
            - ipv6
            - dualstack
            - service-defined
            - not-specified
    VPCEndpoint:
      type: object
      properties:
        PrivateDnsEnabled:
          description: >-
            Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC
            endpoint service.
             To use a private hosted zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
             This property is supported only for interface endpoints.
             Default: ``false``
          type: boolean
        IpAddressType:
          description: ''
          type: string
          enum:
            - ipv4
            - ipv6
            - dualstack
            - not-specified
        CreationTimestamp:
          description: ''
          type: string
        DnsOptions:
          description: ''
          $ref: '#/components/schemas/DnsOptionsSpecification'
        NetworkInterfaceIds:
          uniqueItems: false
          description: ''
          x-insertionOrder: false
          type: array
          items:
            type: string
        DnsEntries:
          uniqueItems: false
          description: ''
          x-insertionOrder: false
          type: array
          items:
            type: string
        ResourceConfigurationArn:
          description: ''
          type: string
        SecurityGroupIds:
          uniqueItems: true
          description: The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not specified, we use the default security group for the VPC. Security groups are supported only for interface endpoints.
          x-insertionOrder: false
          type: array
          items:
            anyOf:
              - relationshipRef:
                  typeName: AWS::EC2::SecurityGroup
                  propertyPath: /properties/GroupId
              - relationshipRef:
                  typeName: AWS::EC2::SecurityGroup
                  propertyPath: /properties/Id
              - relationshipRef:
                  typeName: AWS::EC2::VPC
                  propertyPath: /properties/DefaultSecurityGroup
            type: string
        SubnetIds:
          uniqueItems: true
          description: The IDs of the subnets in which to create endpoint network interfaces. You must specify this property for an interface endpoint or a Gateway Load Balancer endpoint. You can't specify this property for a gateway endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::Subnet
              propertyPath: /properties/SubnetId
            type: string
        ServiceNetworkArn:
          description: ''
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        RouteTableIds:
          uniqueItems: true
          description: The IDs of the route tables. Routing is supported only for gateway endpoints.
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::RouteTable
              propertyPath: /properties/RouteTableId
            type: string
        ServiceName:
          description: The name of the endpoint service.
          type: string
        PolicyDocument:
          description: |-
            An endpoint policy, which controls access to the service from the VPC. The default endpoint policy allows full access to the service. Endpoint policies are supported only for gateway and interface endpoints.
             For CloudFormation templates in YAML, you can provide the policy in JSON or YAML format. For example, if you have a JSON policy, you can convert it to YAML before including it in the YAML template, and CFNlong converts the policy to JSON format before calling the API actions for privatelink. Alternatively, you can include the JSON directly in the YAML, as shown in the following ``Properties`` section:
             ``Properties: VpcEndpointType: 'Interface' ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs' PolicyDocument: '{ "Version":"2012-10-17", "Statement": [{ "Effect":"Allow", "Principal":"*", "Action":["logs:Describe*","logs:Get*","logs:List*","logs:FilterLogEvents"], "Resource":"*" }] }'``
          type: object
        VpcEndpointType:
          description: |-
            The type of endpoint.
             Default: Gateway
          type: string
          enum:
            - Interface
            - Gateway
            - GatewayLoadBalancer
            - ServiceNetwork
            - Resource
        Id:
          description: ''
          type: string
        Tags:
          uniqueItems: false
          description: ''
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
      x-stackql-resource-name: vpc_endpoint
      description: |-
        Specifies a VPC endpoint. A VPC endpoint provides a private connection between your VPC and an endpoint service. You can use an endpoint service provided by AWS, an MKT Partner, or another AWS accounts in your organization. For more information, see the [User Guide](https://docs.aws.amazon.com/vpc/latest/privatelink/).
         An endpoint of type ``Interface`` establishes connections between the subnets in your VPC and an AWS-service, your own service, or a service hosted by another AWS-account. With an interface VPC endpoint, you specify the subnets in which to create the endpoint and the security groups to associate with the endpoint network interfaces.
         An endpoint of type ``gateway`` serves as a target for a route in your route table for traffic destined for S3 or DDB. You can specify an endpoint policy for the endpoint, which controls access to the service from your VPC. You can also specify the VPC route tables that use the endpoint. For more information about connectivity to S3, see [Why can't I connect to an S3 bucket using a gateway VPC endpoint?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/connect-s3-vpc-endpoint) 
         An endpoint of type ``GatewayLoadBalancer`` provides private connectivity between your VPC and virtual appliances from a service provider.
      x-type-name: AWS::EC2::VPCEndpoint
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ServiceName
        - VpcEndpointType
        - VpcId
        - ServiceNetworkArn
        - ResourceConfigurationArn
      x-read-only-properties:
        - NetworkInterfaceIds
        - CreationTimestamp
        - DnsEntries
        - Id
      x-required-properties:
        - VpcId
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeVpcEndpoints
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - vpc-lattice:DescribeServiceNetworkVpcEndpointAssociation
        create:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - vpc-lattice:CreateServiceNetworkVpcEndpointAssociation
          - vpc-lattice:DescribeServiceNetworkVpcEndpointAssociation
          - ec2:CreateTags
          - ec2:DeleteTags
        update:
          - ec2:ModifyVpcEndpoint
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - vpc-lattice:CreateServiceNetworkVpcEndpointAssociation
          - vpc-lattice:DescribeServiceNetworkVpcEndpointAssociation
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - vpc-lattice:DescribeServiceNetworkVpcEndpointAssociation
        delete:
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - vpc-lattice:DescribeServiceNetworkVpcEndpointAssociation
          - ec2:CreateTags
          - ec2:DeleteTags
    VPCEndpointConnectionNotification:
      type: object
      properties:
        ConnectionEvents:
          uniqueItems: false
          description: The endpoint events for which to receive notifications.
          x-insertionOrder: false
          type: array
          items:
            type: string
        VPCEndpointId:
          description: The ID of the endpoint.
          type: string
        VPCEndpointConnectionNotificationId:
          description: VPC Endpoint Connection ID generated by service
          type: string
        ConnectionNotificationArn:
          description: The ARN of the SNS topic for the notifications.
          type: string
        ServiceId:
          description: The ID of the endpoint service.
          type: string
      required:
        - ConnectionEvents
        - ConnectionNotificationArn
      x-stackql-resource-name: vpc_endpoint_connection_notification
      description: Resource Type definition for AWS::EC2::VPCEndpointConnectionNotification
      x-type-name: AWS::EC2::VPCEndpointConnectionNotification
      x-stackql-primary-identifier:
        - VPCEndpointConnectionNotificationId
      x-create-only-properties:
        - ServiceId
        - VPCEndpointId
      x-read-only-properties:
        - VPCEndpointConnectionNotificationId
      x-required-properties:
        - ConnectionEvents
        - ConnectionNotificationArn
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeVpcEndpointConnectionNotifications
        create:
          - ec2:CreateVpcEndpointConnectionNotification
        update:
          - ec2:ModifyVpcEndpointConnectionNotification
          - ec2:DescribeVpcEndpointConnectionNotifications
        list:
          - ec2:DescribeVpcEndpointConnectionNotifications
        delete:
          - ec2:DeleteVpcEndpointConnectionNotifications
    VPCEndpointService:
      type: object
      properties:
        NetworkLoadBalancerArns:
          type: array
          uniqueItems: false
          items:
            type: string
            relationshipRef:
              typeName: AWS::ElasticLoadBalancingV2::LoadBalancer
              propertyPath: /properties/LoadBalancerArn
        ContributorInsightsEnabled:
          type: boolean
        PayerResponsibility:
          type: string
        ServiceId:
          type: string
        AcceptanceRequired:
          type: boolean
        GatewayLoadBalancerArns:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          description: The tags to add to the VPC endpoint service.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: vpc_endpoint_service
      description: Resource Type definition for AWS::EC2::VPCEndpointService
      x-type-name: AWS::EC2::VPCEndpointService
      x-stackql-primary-identifier:
        - ServiceId
      x-write-only-properties:
        - ContributorInsightsEnabled
      x-read-only-properties:
        - ServiceId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:ModifyVpcEndpointServicePayerResponsibility
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
          - cloudwatch:PutManagedInsightRules
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:CreateTags
        update:
          - ec2:ModifyVpcEndpointServiceConfiguration
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePayerResponsibility
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
          - cloudwatch:PutManagedInsightRules
          - ec2:CreateTags
          - ec2:DeleteTags
        read:
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
        delete:
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
          - ec2:DeleteTags
        list:
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
    VPCEndpointServicePermissions:
      type: object
      properties:
        AllowedPrincipals:
          uniqueItems: false
          type: array
          items:
            type: string
        ServiceId:
          type: string
      required:
        - ServiceId
      x-stackql-resource-name: vpc_endpoint_service_permissions
      description: Resource Type definition for AWS::EC2::VPCEndpointServicePermissions
      x-type-name: AWS::EC2::VPCEndpointServicePermissions
      x-stackql-primary-identifier:
        - ServiceId
      x-create-only-properties:
        - ServiceId
      x-required-properties:
        - ServiceId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        create:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        update:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        list:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        delete:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
    VPCGatewayAttachment:
      type: object
      properties:
        AttachmentType:
          type: string
          description: 'Used to identify if this resource is an Internet Gateway or Vpn Gateway Attachment '
        InternetGatewayId:
          type: string
          description: The ID of the internet gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
        VpcId:
          type: string
          description: The ID of the VPC.
        VpnGatewayId:
          type: string
          description: The ID of the virtual private gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
      required:
        - VpcId
      x-stackql-resource-name: vpc_gateway_attachment
      description: Resource Type definition for AWS::EC2::VPCGatewayAttachment
      x-type-name: AWS::EC2::VPCGatewayAttachment
      x-stackql-primary-identifier:
        - AttachmentType
        - VpcId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - AttachmentType
      x-required-properties:
        - VpcId
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:AttachInternetGateway
          - ec2:AttachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        read:
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        update:
          - ec2:AttachInternetGateway
          - ec2:AttachVpnGateway
          - ec2:DetachInternetGateway
          - ec2:DetachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        delete:
          - ec2:DetachInternetGateway
          - ec2:DetachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        list:
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
    VPCPeeringConnection:
      type: object
      properties:
        PeerRoleArn:
          description: The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        PeerVpcId:
          description: The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
          type: string
        Id:
          type: string
        PeerRegion:
          description: The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
          type: string
        PeerOwnerId:
          description: The AWS account ID of the owner of the accepter VPC.
          type: string
        Tags:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
        - PeerVpcId
      x-stackql-resource-name: vpc_peering_connection
      description: Resource Type definition for AWS::EC2::VPCPeeringConnection
      x-type-name: AWS::EC2::VPCPeeringConnection
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - PeerRegion
        - PeerOwnerId
        - PeerVpcId
        - PeerRoleArn
        - VpcId
      x-write-only-properties:
        - PeerRoleArn
      x-read-only-properties:
        - Id
      x-required-properties:
        - VpcId
        - PeerVpcId
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - ec2:DescribeVpcPeeringConnections
        create:
          - ec2:CreateVpcPeeringConnection
          - ec2:DescribeVpcPeeringConnections
          - ec2:AcceptVpcPeeringConnection
          - ec2:CreateTags
          - sts:AssumeRole
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeVpcPeeringConnections
        list:
          - ec2:DescribeVpcPeeringConnections
        delete:
          - ec2:DeleteVpcPeeringConnection
          - ec2:DescribeVpcPeeringConnections
    CloudwatchLogOptionsSpecification:
      description: Options for sending VPN tunnel logs to CloudWatch.
      additionalProperties: false
      type: object
      properties:
        LogEnabled:
          description: |-
            Enable or disable VPN tunnel logging feature. Default value is ``False``.
             Valid values: ``True`` | ``False``
          type: boolean
        LogOutputFormat:
          description: |-
            Set log format. Default format is ``json``.
             Valid values: ``json`` | ``text``
          type: string
          enum:
            - json
            - text
        LogGroupArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
          type: string
    Phase1IntegrityAlgorithmsRequestListValue:
      description: Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value for the integrity algorithm.
          type: string
          enum:
            - SHA1
            - SHA2-256
            - SHA2-384
            - SHA2-512
    Phase2EncryptionAlgorithmsRequestListValue:
      description: Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The encryption algorithm.
          type: string
          enum:
            - AES128
            - AES256
            - AES128-GCM-16
            - AES256-GCM-16
    Phase2IntegrityAlgorithmsRequestListValue:
      description: Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The integrity algorithm.
          type: string
          enum:
            - SHA1
            - SHA2-256
            - SHA2-384
            - SHA2-512
    Phase1DHGroupNumbersRequestListValue:
      description: Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The Diffie-Hellmann group number.
          type: integer
          enum:
            - 2
            - 14
            - 15
            - 16
            - 17
            - 18
            - 19
            - 20
            - 21
            - 22
            - 23
            - 24
    VpnTunnelOptionsSpecification:
      description: The tunnel options for a single VPN tunnel.
      additionalProperties: false
      type: object
      properties:
        Phase2EncryptionAlgorithms:
          uniqueItems: false
          description: |-
            One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
             Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase2EncryptionAlgorithmsRequestListValue'
        Phase2DHGroupNumbers:
          uniqueItems: false
          description: |-
            One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.
             Valid values: ``2`` | ``5`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase2DHGroupNumbersRequestListValue'
        TunnelInsideIpv6Cidr:
          description: |-
            The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.
             Constraints: A size /126 CIDR block from the local ``fd00::/8`` range.
          type: string
        StartupAction:
          description: |-
            The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify ``start`` for AWS to initiate the IKE negotiation.
             Valid Values: ``add`` | ``start`` 
             Default: ``add``
          type: string
          enum:
            - add
            - start
        TunnelInsideCidr:
          description: |-
            The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. 
             Constraints: A size /30 CIDR block from the ``169.254.0.0/16`` range. The following CIDR blocks are reserved and cannot be used:
              +   ``169.254.0.0/30`` 
              +   ``169.254.1.0/30`` 
              +   ``169.254.2.0/30`` 
              +   ``169.254.3.0/30`` 
              +   ``169.254.4.0/30`` 
              +   ``169.254.5.0/30`` 
              +   ``169.254.169.252/30``
          type: string
        IKEVersions:
          uniqueItems: false
          description: |-
            The IKE versions that are permitted for the VPN tunnel.
             Valid values: ``ikev1`` | ``ikev2``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/IKEVersionsRequestListValue'
        LogOptions:
          description: Options for logging VPN tunnel activity.
          $ref: '#/components/schemas/VpnTunnelLogOptionsSpecification'
        Phase1DHGroupNumbers:
          uniqueItems: false
          description: |-
            One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.
             Valid values: ``2`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase1DHGroupNumbersRequestListValue'
        ReplayWindowSize:
          description: |-
            The number of packets in an IKE replay window.
             Constraints: A value between 64 and 2048.
             Default: ``1024``
          maximum: 2048
          type: integer
          minimum: 64
        EnableTunnelLifecycleControl:
          description: Turn on or off tunnel endpoint lifecycle control feature.
          type: boolean
        RekeyMarginTimeSeconds:
          description: |-
            The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for ``RekeyFuzzPercentage``.
             Constraints: A value between 60 and half of ``Phase2LifetimeSeconds``.
             Default: ``270``
          type: integer
          minimum: 60
        DPDTimeoutAction:
          description: |-
            The action to take after DPD timeout occurs. Specify ``restart`` to restart the IKE initiation. Specify ``clear`` to end the IKE session.
             Valid Values: ``clear`` | ``none`` | ``restart`` 
             Default: ``clear``
          type: string
          enum:
            - clear
            - none
            - restart
        Phase2LifetimeSeconds:
          description: |-
            The lifetime for phase 2 of the IKE negotiation, in seconds.
             Constraints: A value between 900 and 3,600. The value must be less than the value for ``Phase1LifetimeSeconds``.
             Default: ``3600``
          maximum: 3600
          type: integer
          minimum: 900
        Phase2IntegrityAlgorithms:
          uniqueItems: false
          description: |-
            One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
             Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase2IntegrityAlgorithmsRequestListValue'
        Phase1IntegrityAlgorithms:
          uniqueItems: false
          description: |-
            One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
             Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase1IntegrityAlgorithmsRequestListValue'
        PreSharedKey:
          description: |-
            The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.
             Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
          type: string
        Phase1LifetimeSeconds:
          description: |-
            The lifetime for phase 1 of the IKE negotiation, in seconds.
             Constraints: A value between 900 and 28,800.
             Default: ``28800``
          maximum: 28800
          type: integer
          minimum: 900
        RekeyFuzzPercentage:
          description: |-
            The percentage of the rekey window (determined by ``RekeyMarginTimeSeconds``) during which the rekey time is randomly selected.
             Constraints: A value between 0 and 100.
             Default: ``100``
          maximum: 100
          type: integer
          minimum: 0
        Phase1EncryptionAlgorithms:
          uniqueItems: false
          description: |-
            One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
             Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Phase1EncryptionAlgorithmsRequestListValue'
        DPDTimeoutSeconds:
          description: |-
            The number of seconds after which a DPD timeout occurs.
             Constraints: A value greater than or equal to 30.
             Default: ``30``
          type: integer
          minimum: 30
    Phase1EncryptionAlgorithmsRequestListValue:
      description: Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value for the encryption algorithm.
          type: string
          enum:
            - AES128
            - AES256
            - AES128-GCM-16
            - AES256-GCM-16
    IKEVersionsRequestListValue:
      description: The IKE version that is permitted for the VPN tunnel.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The IKE version.
          type: string
          enum:
            - ikev1
            - ikev2
    VpnTunnelLogOptionsSpecification:
      description: Options for logging VPN tunnel activity.
      additionalProperties: false
      type: object
      properties:
        CloudwatchLogOptions:
          description: Options for sending VPN tunnel logs to CloudWatch.
          $ref: '#/components/schemas/CloudwatchLogOptionsSpecification'
    Phase2DHGroupNumbersRequestListValue:
      description: Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The Diffie-Hellmann group number.
          type: integer
          enum:
            - 2
            - 5
            - 14
            - 15
            - 16
            - 17
            - 18
            - 19
            - 20
            - 21
            - 22
            - 23
            - 24
    VPNConnection:
      type: object
      properties:
        RemoteIpv6NetworkCidr:
          description: |-
            The IPv6 CIDR on the AWS side of the VPN connection.
             Default: ``::/0``
          type: string
        RemoteIpv4NetworkCidr:
          description: |-
            The IPv4 CIDR on the AWS side of the VPN connection.
             Default: ``0.0.0.0/0``
          type: string
        VpnTunnelOptionsSpecifications:
          uniqueItems: false
          description: The tunnel options for the VPN connection.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/VpnTunnelOptionsSpecification'
        CustomerGatewayId:
          description: The ID of the customer gateway at your end of the VPN connection.
          type: string
        OutsideIpAddressType:
          description: |-
            The type of IPv4 address assigned to the outside interface of the customer gateway device.
             Valid values: ``PrivateIpv4`` | ``PublicIpv4`` 
             Default: ``PublicIpv4``
          type: string
        StaticRoutesOnly:
          description: |-
            Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
             If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
          type: boolean
        EnableAcceleration:
          description: |-
            Indicate whether to enable acceleration for the VPN connection.
             Default: ``false``
          type: boolean
        TransitGatewayId:
          description: |-
            The ID of the transit gateway associated with the VPN connection.
             You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
          type: string
        Type:
          description: The type of VPN connection.
          type: string
        LocalIpv4NetworkCidr:
          description: |-
            The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
             Default: ``0.0.0.0/0``
          type: string
        VpnGatewayId:
          description: |-
            The ID of the virtual private gateway at the AWS side of the VPN connection.
             You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
          type: string
        TransportTransitGatewayAttachmentId:
          description: |-
            The transit gateway attachment ID to use for the VPN tunnel.
             Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
          type: string
        LocalIpv6NetworkCidr:
          description: |-
            The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
             Default: ``::/0``
          type: string
        VpnConnectionId:
          description: ''
          type: string
        TunnelInsideIpVersion:
          description: |-
            Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
             Default: ``ipv4``
          type: string
        Tags:
          uniqueItems: false
          description: Any tags assigned to the VPN connection.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Type
        - CustomerGatewayId
      x-stackql-resource-name: vpn_connection
      description: |-
        Specifies a VPN connection between a virtual private gateway and a VPN customer gateway or a transit gateway and a VPN customer gateway.
         To specify a VPN connection between a transit gateway and customer gateway, use the ``TransitGatewayId`` and ``CustomerGatewayId`` properties.
         To specify a VPN connection between a virtual private gateway and customer gateway, use the ``VpnGatewayId`` and ``CustomerGatewayId`` properties.
         For more information, see [](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html) in the *User Guide*.
      x-type-name: AWS::EC2::VPNConnection
      x-stackql-primary-identifier:
        - VpnConnectionId
      x-create-only-properties:
        - Type
        - CustomerGatewayId
        - VpnGatewayId
        - TransitGatewayId
        - EnableAcceleration
        - LocalIpv4NetworkCidr
        - LocalIpv6NetworkCidr
        - OutsideIpAddressType
        - RemoteIpv4NetworkCidr
        - RemoteIpv6NetworkCidr
        - StaticRoutesOnly
        - TransportTransitGatewayAttachmentId
        - TunnelInsideIpVersion
        - VpnTunnelOptionsSpecifications
      x-read-only-properties:
        - VpnConnectionId
      x-required-properties:
        - Type
        - CustomerGatewayId
      x-tagging:
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - ec2:DescribeVpnConnections
        create:
          - ec2:DescribeVpnConnections
          - ec2:CreateVpnConnection
          - ec2:CreateTags
        update:
          - ec2:DescribeVpnConnections
          - ec2:CreateTags
          - ec2:DeleteTags
        list:
          - ec2:DescribeVpnConnections
        delete:
          - ec2:DescribeVpnConnections
          - ec2:DeleteVpnConnection
    VPNConnectionRoute:
      type: object
      properties:
        DestinationCidrBlock:
          description: The CIDR block associated with the local subnet of the customer network.
          type: string
        VpnConnectionId:
          description: The ID of the VPN connection.
          type: string
      required:
        - DestinationCidrBlock
        - VpnConnectionId
      x-stackql-resource-name: vpn_connection_route
      description: |-
        Specifies a static route for a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
         For more information, see [](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html) in the *User Guide*.
      x-type-name: AWS::EC2::VPNConnectionRoute
      x-stackql-primary-identifier:
        - DestinationCidrBlock
        - VpnConnectionId
      x-create-only-properties:
        - DestinationCidrBlock
        - VpnConnectionId
      x-required-properties:
        - DestinationCidrBlock
        - VpnConnectionId
      x-tagging:
        taggable: false
      x-required-permissions:
        read:
          - ec2:DescribeVpnConnections
        create:
          - ec2:CreateVpnConnectionRoute
          - ec2:DescribeVpnConnections
        list:
          - ec2:DescribeVpnConnections
        delete:
          - ec2:DeleteVpnConnectionRoute
          - ec2:DescribeVpnConnections
    VPNGateway:
      type: object
      properties:
        VPNGatewayId:
          description: ''
          type: string
        AmazonSideAsn:
          description: The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
          type: integer
          format: int64
        Tags:
          description: Any tags assigned to the virtual private gateway.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Type:
          description: The type of VPN connection the virtual private gateway supports.
          type: string
      required:
        - Type
      x-stackql-resource-name: vpn_gateway
      description: |-
        Specifies a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.
         For more information, see [](https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html) in the *User Guide*.
      x-type-name: AWS::EC2::VPNGateway
      x-stackql-primary-identifier:
        - VPNGatewayId
      x-create-only-properties:
        - AmazonSideAsn
        - Type
      x-read-only-properties:
        - VPNGatewayId
      x-required-properties:
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ec2:CreateTags
          - ec2:DeleteTags
      x-required-permissions:
        create:
          - ec2:CreateVpnGateway
          - ec2:DescribeVpnGateways
          - ec2:CreateTags
        read:
          - ec2:DescribeVpnGateways
        update:
          - ec2:DescribeVpnGateways
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteVpnGateway
          - ec2:DescribeVpnGateways
        list:
          - ec2:DescribeVpnGateways
    CreateCapacityReservationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Tenancy:
              type: string
            EndDateType:
              type: string
            TagSpecifications:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/TagSpecification'
            AvailabilityZone:
              type: string
            TotalInstanceCount:
              type: integer
            EndDate:
              type: string
            EbsOptimized:
              type: boolean
            OutPostArn:
              type: string
            InstanceCount:
              type: integer
            PlacementGroupArn:
              type: string
            AvailableInstanceCount:
              type: integer
            InstancePlatform:
              type: string
            Id:
              type: string
            InstanceType:
              type: string
            EphemeralStorage:
              type: boolean
            InstanceMatchCriteria:
              type: string
            UnusedReservationBillingOwnerId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateCapacityReservationRequest
      type: object
      required: []
    CreateCapacityReservationFleetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AllocationStrategy:
              type: string
            TagSpecifications:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/TagSpecification'
            InstanceTypeSpecifications:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              maxItems: 50
              items:
                $ref: '#/components/schemas/InstanceTypeSpecification'
            TotalTargetCapacity:
              type: integer
              minimum: 1
              maximum: 25000
            EndDate:
              type: string
            InstanceMatchCriteria:
              type: string
              enum:
                - open
            CapacityReservationFleetId:
              type: string
            Tenancy:
              type: string
              enum:
                - default
            RemoveEndDate:
              type: boolean
            NoRemoveEndDate:
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateCapacityReservationFleetRequest
      type: object
      required: []
    CreateCarrierGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CarrierGatewayId:
              description: The ID of the carrier gateway.
              type: string
            State:
              description: The state of the carrier gateway.
              type: string
            VpcId:
              description: The ID of the VPC.
              type: string
            OwnerId:
              description: The ID of the owner.
              type: string
            Tags:
              description: The tags for the carrier gateway.
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateCarrierGatewayRequest
      type: object
      required: []
    CreateCustomerGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Type:
              description: The type of VPN connection that this customer gateway supports (``ipsec.1``).
              type: string
            CustomerGatewayId:
              description: ''
              type: string
            IpAddress:
              description: IPv4 address for the customer gateway device's outside interface. The address must be static. If ``OutsideIpAddressType`` in your VPN connection options is set to ``PrivateIpv4``, you can use an RFC6598 or RFC1918 private IPv4 address. If ``OutsideIpAddressType`` is set to ``PublicIpv4``, you can use a public IPv4 address.
              type: string
            BgpAsnExtended:
              multipleOf: 1
              maximum: 4294967294
              description: |-
                For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
                 Valid values: ``2,147,483,648`` to ``4,294,967,295``
              type: number
              minimum: 2147483648
            BgpAsn:
              default: 65000
              description: |-
                For customer gateway devices that support BGP, specify the device's ASN. You must specify either ``BgpAsn`` or ``BgpAsnExtended`` when creating the customer gateway. If the ASN is larger than ``2,147,483,647``, you must use ``BgpAsnExtended``.
                 Default: 65000
                 Valid values: ``1`` to ``2,147,483,647``
              type: integer
            Tags:
              uniqueItems: false
              description: One or more tags for the customer gateway.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            CertificateArn:
              pattern: ^arn:(aws[a-zA-Z-]*)?:acm:[a-z]{2}((-gov)|(-iso([a-z]{1})?))?-[a-z]+-\d{1}:\d{12}:certificate\/[a-zA-Z0-9-_]+$
              description: The Amazon Resource Name (ARN) for the customer gateway certificate.
              type: string
            DeviceName:
              description: The name of customer gateway device.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateCustomerGatewayRequest
      type: object
      required: []
    CreateDHCPOptionsRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DhcpOptionsId:
              type: string
            DomainName:
              type: string
              description: This value is used to complete unqualified DNS hostnames.
            DomainNameServers:
              type: array
              description: The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
              uniqueItems: true
              items:
                type: string
            NetbiosNameServers:
              type: array
              description: The IPv4 addresses of up to four NetBIOS name servers.
              uniqueItems: true
              items:
                type: string
            NetbiosNodeType:
              type: integer
              description: The NetBIOS node type (1, 2, 4, or 8).
            NtpServers:
              type: array
              description: The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
              uniqueItems: false
              items:
                type: string
            Ipv6AddressPreferredLeaseTime:
              type: integer
              description: The preferred Lease Time for ipV6 address in seconds.
            Tags:
              type: array
              description: Any tags assigned to the DHCP options set.
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDHCPOptionsRequest
      type: object
      required: []
    CreateEC2FleetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Context:
              type: string
            TargetCapacitySpecification:
              $ref: '#/components/schemas/TargetCapacitySpecificationRequest'
            OnDemandOptions:
              $ref: '#/components/schemas/OnDemandOptionsRequest'
            ExcessCapacityTerminationPolicy:
              type: string
              enum:
                - termination
                - no-termination
            TagSpecifications:
              uniqueItems: false
              type: array
              items:
                $ref: '#/components/schemas/TagSpecification'
            SpotOptions:
              $ref: '#/components/schemas/SpotOptionsRequest'
            LaunchTemplateConfigs:
              maxItems: 50
              uniqueItems: false
              type: array
              items:
                $ref: '#/components/schemas/FleetLaunchTemplateConfigRequest'
            TerminateInstancesWithExpiration:
              type: boolean
            ValidUntil:
              type: string
            Type:
              type: string
              enum:
                - maintain
                - request
                - instant
            FleetId:
              type: string
            ValidFrom:
              type: string
            ReplaceUnhealthyInstances:
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateEC2FleetRequest
      type: object
      required: []
    CreateEgressOnlyInternetGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Service Generated ID of the EgressOnlyInternetGateway
              type: string
            VpcId:
              description: The ID of the VPC for which to create the egress-only internet gateway.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateEgressOnlyInternetGatewayRequest
      type: object
      required: []
    CreateEIPRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PublicIp:
              description: ''
              type: string
            AllocationId:
              description: ''
              type: string
            Domain:
              description: |-
                The network (``vpc``).
                 If you define an Elastic IP address and associate it with a VPC that is defined in the same template, you must declare a dependency on the VPC-gateway attachment by using the [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) on this resource.
              type: string
            NetworkBorderGroup:
              description: |-
                A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups.
                 Use [DescribeAvailabilityZones](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html) to view the network border groups.
              type: string
            TransferAddress:
              description: The Elastic IP address you are accepting for transfer. You can only accept one transferred address. For more information on Elastic IP address transfers, see [Transfer Elastic IP addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro) in the *Amazon Virtual Private Cloud User Guide*.
              type: string
            InstanceId:
              description: |-
                The ID of the instance.
                  Updates to the ``InstanceId`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
              type: string
            PublicIpv4Pool:
              description: |-
                The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
                  Updates to the ``PublicIpv4Pool`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
              type: string
            IpamPoolId:
              description: ''
              type: string
            Address:
              description: ''
              type: string
            Tags:
              description: |-
                Any tags assigned to the Elastic IP address.
                  Updates to the ``Tags`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateEIPRequest
      type: object
      required: []
    CreateEIPAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ''
              type: string
            AllocationId:
              description: The allocation ID. This is required.
              type: string
            NetworkInterfaceId:
              description: |-
                The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.
                 You can specify either the instance ID or the network interface ID, but not both.
              type: string
            InstanceId:
              description: The ID of the instance. The instance must have exactly one attached network interface. You can specify either the instance ID or the network interface ID, but not both.
              type: string
            PrivateIpAddress:
              description: The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
              type: string
            EIP:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateEIPAssociationRequest
      type: object
      required: []
    CreateEnclaveCertificateIamRoleAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CertificateArn:
              description: The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
              type: string
              pattern: ^arn:aws[A-Za-z0-9-]{0,64}:acm:[A-Za-z0-9-]{1,64}:([0-9]{12})?:certificate/.+$
              minLength: 1
              maxLength: 1283
            RoleArn:
              description: The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
              type: string
              pattern: ^arn:aws[A-Za-z0-9-]{0,64}:iam:.*:([0-9]{12})?:role/.+$
              minLength: 1
              maxLength: 1283
            CertificateS3BucketName:
              description: The name of the Amazon S3 bucket to which the certificate was uploaded.
              type: string
            CertificateS3ObjectKey:
              description: The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
              type: string
            EncryptionKmsKeyId:
              description: The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateEnclaveCertificateIamRoleAssociationRequest
      type: object
      required: []
    CreateFlowLogRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The Flow Log ID
              type: string
            DeliverCrossAccountRole:
              description: The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
              type: string
            DeliverLogsPermissionArn:
              description: The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
              type: string
            LogDestination:
              description: Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the value specified for LogDestinationType.
              type: string
            LogDestinationType:
              description: Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
              type: string
              enum:
                - cloud-watch-logs
                - s3
                - kinesis-data-firehose
            LogFormat:
              description: The fields to include in the flow log record, in the order in which they should appear.
              type: string
            LogGroupName:
              description: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
              type: string
            MaxAggregationInterval:
              description: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
              type: integer
            ResourceId:
              description: The ID of the subnet, network interface, or VPC for which you want to create a flow log.
              type: string
            ResourceType:
              description: The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
              type: string
              enum:
                - NetworkInterface
                - Subnet
                - VPC
                - TransitGateway
                - TransitGatewayAttachment
            Tags:
              description: The tags to apply to the flow logs.
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            TrafficType:
              description: The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
              type: string
              enum:
                - ACCEPT
                - ALL
                - REJECT
            DestinationOptions:
              type: object
              additionalProperties: false
              properties:
                FileFormat:
                  type: string
                  enum:
                    - plain-text
                    - parquet
                HiveCompatiblePartitions:
                  type: boolean
                PerHourPartition:
                  type: boolean
              required:
                - FileFormat
                - HiveCompatiblePartitions
                - PerHourPartition
          x-stackQL-stringOnly: true
      x-title: CreateFlowLogRequest
      type: object
      required: []
    CreateGatewayRouteTableAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteTableId:
              description: The ID of the route table.
              type: string
            GatewayId:
              description: The ID of the gateway.
              type: string
            AssociationId:
              description: The route table association ID.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateGatewayRouteTableAssociationRequest
      type: object
      required: []
    CreateHostRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            HostId:
              description: ID of the host created.
              type: string
            AutoPlacement:
              description: Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
              type: string
            AvailabilityZone:
              description: The Availability Zone in which to allocate the Dedicated Host.
              type: string
            HostRecovery:
              description: Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
              type: string
            InstanceType:
              description: Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
              type: string
            InstanceFamily:
              description: Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.
              type: string
            OutpostArn:
              description: The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
              type: string
            HostMaintenance:
              description: Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your current host.
              type: string
            AssetId:
              description: The ID of the Outpost hardware asset.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateHostRequest
      type: object
      required: []
    CreateNetworkInterfaceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: A description for the network interface.
              type: string
            PrivateIpAddress:
              description: 'Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property. '
              type: string
            PrimaryIpv6Address:
              description: The primary IPv6 address
              type: string
            PrivateIpAddresses:
              uniqueItems: false
              description: Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/PrivateIpAddressSpecification'
            SecondaryPrivateIpAddressCount:
              description: The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses
              type: integer
            Ipv6PrefixCount:
              description: 'The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can''t specify a count of IPv6 prefixes if you''ve specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
              type: integer
            PrimaryPrivateIpAddress:
              description: Returns the primary private IP address of the network interface.
              type: string
            Ipv4Prefixes:
              uniqueItems: false
              description: 'Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can''t specify IPv4 prefixes if you''ve specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Ipv4PrefixSpecification'
            Ipv4PrefixCount:
              description: 'The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can''t specify a count of IPv4 prefixes if you''ve specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
              type: integer
            EnablePrimaryIpv6:
              description: >-
                If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached. If
                you have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI becomes the primary IPv6 address.
              type: boolean
            GroupSet:
              uniqueItems: false
              description: A list of security group IDs associated with this network interface.
              x-insertionOrder: false
              type: array
              items:
                type: string
            Ipv6Addresses:
              uniqueItems: true
              description: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/InstanceIpv6Address'
            Ipv6Prefixes:
              uniqueItems: false
              description: 'Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can''t specify IPv6 prefixes if you''ve specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Ipv6PrefixSpecification'
            SubnetId:
              description: The ID of the subnet to associate with the network interface.
              type: string
            SourceDestCheck:
              description: Indicates whether traffic to or from the instance is validated.
              type: boolean
            InterfaceType:
              description: Indicates the type of network interface.
              type: string
            SecondaryPrivateIpAddresses:
              uniqueItems: false
              description: Returns the secondary private IP addresses of the network interface.
              x-insertionOrder: false
              type: array
              items:
                type: string
            VpcId:
              description: The ID of the VPC
              type: string
            Ipv6AddressCount:
              description: The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
              type: integer
            Id:
              description: Network interface id.
              type: string
            Tags:
              uniqueItems: false
              description: An arbitrary set of tags (key-value pairs) for this network interface.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            ConnectionTrackingSpecification:
              $ref: '#/components/schemas/ConnectionTrackingSpecification'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInterfaceRequest
      type: object
      required: []
    CreateVolumeRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            MultiAttachEnabled:
              description: |-
                Indicates whether Amazon EBS Multi-Attach is enabled.
                  CFNlong does not currently support updating a single-attach volume to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number of I/O operations per second (IOPS) of a multi-attach enabled volume.
              type: boolean
            KmsKeyId:
              description: |-
                The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state must be ``true``.
                 If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not have a default key, then the volume is encrypted using the aws-managed-key.
                 Alternatively, if you want to specify a different key, you can specify one of the following:
                  +  Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
                  +  Key alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``.
                  +  Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
                  +  Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
              type: string
            Encrypted:
              description: |-
                Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see [Encryption by default](https://docs.aws.amazon.com/ebs/latest/userguide/work-with-ebs-encr.html#encryption-by-default) in the *Amazon EBS User Guide*.
                 Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see [Supported instance types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances).
              type: boolean
            Size:
              description: |-
                The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.
                 The following are the supported volumes sizes for each volume type:
                  +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
                  +   ``io1``: 4 - 16,384 GiB
                  +   ``io2``: 4 - 65,536 GiB
                  +   ``st1`` and ``sc1``: 125 - 16,384 GiB
                  +   ``standard``: 1 - 1024 GiB
              type: integer
            AutoEnableIO:
              description: Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can configure the volume to automatically enable I/O.
              type: boolean
            OutpostArn:
              description: The Amazon Resource Name (ARN) of the Outpost.
              type: string
            AvailabilityZone:
              description: The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
              type: string
            Throughput:
              description: |-
                The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
                 This parameter is valid only for ``gp3`` volumes. The default value is 125.
                 Valid Range: Minimum value of 125. Maximum value of 1000.
              type: integer
            Iops:
              description: |-
                The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
                 The following are the supported values for each volume type:
                  +   ``gp3``: 3,000 - 16,000 IOPS
                  +   ``io1``: 100 - 64,000 IOPS
                  +   ``io2``: 100 - 256,000 IOPS
                  
                 For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). On other instances, you can achieve performance up to 32,000 IOPS.
                 This parameter is required for ``io1`` and ``io2`` volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
              type: integer
            SnapshotId:
              description: The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
              type: string
            VolumeId:
              description: ''
              type: string
            VolumeType:
              description: |-
                The volume type. This parameter can be one of the following values:
                  +  General Purpose SSD: ``gp2`` | ``gp3`` 
                  +  Provisioned IOPS SSD: ``io1`` | ``io2`` 
                  +  Throughput Optimized HDD: ``st1`` 
                  +  Cold HDD: ``sc1`` 
                  +  Magnetic: ``standard`` 
                  
                 For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html).
                 Default: ``gp2``
              type: string
            Tags:
              uniqueItems: false
              description: The tags to apply to the volume during creation.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVolumeRequest
      type: object
      required: []
    CreateInstanceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Tenancy:
              description: The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
              type: string
            SecurityGroups:
              uniqueItems: false
              description: the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
              x-insertionOrder: false
              type: array
              items:
                type: string
            PrivateDnsName:
              description: 'The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.'
              type: string
            PrivateIpAddress:
              description: '[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.'
              type: string
            UserData:
              description: The user data to make available to the instance.
              type: string
            BlockDeviceMappings:
              uniqueItems: false
              description: The block device mapping entries that defines the block devices to attach to the instance at launch.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/BlockDeviceMapping'
            IamInstanceProfile:
              description: The IAM instance profile.
              type: string
            Ipv6Addresses:
              uniqueItems: false
              description: '[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.'
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/InstanceIpv6Address'
            KernelId:
              description: The ID of the kernel.
              type: string
            SubnetId:
              description: |+
                [EC2-VPC] The ID of the subnet to launch the instance into.

              type: string
            EbsOptimized:
              description: Indicates whether the instance is optimized for Amazon EBS I/O.
              type: boolean
            PropagateTagsToVolumeOnCreation:
              description: Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
              type: boolean
            ElasticGpuSpecifications:
              uniqueItems: false
              description: An elastic GPU to associate with the instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/ElasticGpuSpecification'
            ElasticInferenceAccelerators:
              uniqueItems: false
              description: An elastic inference accelerator to associate with the instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/ElasticInferenceAccelerator'
            Volumes:
              uniqueItems: false
              description: The volumes to attach to the instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Volume'
            PrivateIp:
              description: 'The private IP address of the specified instance. For example: 10.24.34.0.'
              type: string
            Ipv6AddressCount:
              description: '[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.'
              type: integer
            LaunchTemplate:
              description: The launch template to use to launch the instances.
              type: object
              $ref: '#/components/schemas/LaunchTemplateSpecification'
            EnclaveOptions:
              description: Indicates whether the instance is enabled for AWS Nitro Enclaves.
              additionalProperties: false
              type: object
              properties:
                Enabled:
                  description: If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
                  type: boolean
            NetworkInterfaces:
              uniqueItems: false
              description: The network interfaces to associate with the instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/NetworkInterface'
            ImageId:
              description: The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
              type: string
            InstanceType:
              description: The instance type.
              type: string
            Monitoring:
              description: Specifies whether detailed monitoring is enabled for the instance.
              type: boolean
            Tags:
              uniqueItems: false
              description: The tags to add to the instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            AdditionalInfo:
              description: 'This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).'
              type: string
            HibernationOptions:
              description: Indicates whether an instance is enabled for hibernation.
              additionalProperties: false
              type: object
              properties:
                Configured:
                  default: false
                  description: If you set this parameter to true, your instance is enabled for hibernation.
                  type: boolean
            LicenseSpecifications:
              uniqueItems: false
              description: The license configurations.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/LicenseSpecification'
            InstanceId:
              description: The EC2 Instance ID.
              type: string
            PublicIp:
              description: 'The public IP address of the specified instance. For example: 192.0.2.0.'
              type: string
            InstanceInitiatedShutdownBehavior:
              description: Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
              type: string
            CpuOptions:
              description: The CPU options for the instance.
              additionalProperties: false
              type: object
              properties:
                ThreadsPerCore:
                  type: integer
                CoreCount:
                  type: integer
            AvailabilityZone:
              description: The Availability Zone of the instance.
              type: string
            PrivateDnsNameOptions:
              description: The options for the instance hostname.
              type: object
              $ref: '#/components/schemas/PrivateDnsNameOptions'
            HostId:
              description: If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
              type: string
            HostResourceGroupArn:
              description: The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
              type: string
            PublicDnsName:
              description: 'The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.'
              type: string
            SecurityGroupIds:
              uniqueItems: false
              description: The IDs of the security groups.
              x-insertionOrder: false
              type: array
              items:
                type: string
            DisableApiTermination:
              description: If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.
              type: boolean
            KeyName:
              description: The name of the key pair.
              type: string
            RamdiskId:
              description: The ID of the RAM disk to select.
              type: string
            SourceDestCheck:
              description: Specifies whether to enable an instance launched in a VPC to perform NAT.
              type: boolean
            PlacementGroupName:
              description: The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
              type: string
            SsmAssociations:
              uniqueItems: false
              description: The SSM document and parameter values in AWS Systems Manager to associate with this instance.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/SsmAssociation'
            VpcId:
              description: The ID of the VPC that the instance is running in.
              type: string
            State:
              description: The current state of the instance.
              type: object
              $ref: '#/components/schemas/State'
            Affinity:
              description: Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.
              type: string
              enum:
                - default
                - host
            CreditSpecification:
              description: The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
              additionalProperties: false
              type: object
              properties:
                CPUCredits:
                  type: string
          x-stackQL-stringOnly: true
      x-title: CreateInstanceRequest
      type: object
      required: []
    CreateInstanceConnectEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The id of the instance connect endpoint
              type: string
            SubnetId:
              description: The subnet id of the instance connect endpoint
              type: string
            ClientToken:
              description: The client token of the instance connect endpoint.
              type: string
            PreserveClientIp:
              description: If true, the address of the instance connect endpoint client is preserved when connecting to the end resource
              type: boolean
            Tags:
              description: The tags of the instance connect endpoint.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            SecurityGroupIds:
              description: The security group IDs of the instance connect endpoint.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SecurityGroupId'
          x-stackQL-stringOnly: true
      x-title: CreateInstanceConnectEndpointRequest
      type: object
      required: []
    CreateInternetGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            InternetGatewayId:
              description: ''
              type: string
            Tags:
              description: Any tags to assign to the internet gateway.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateInternetGatewayRequest
      type: object
      required: []
    CreateIPAMRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamId:
              description: Id of the IPAM.
              type: string
            Arn:
              description: The Amazon Resource Name (ARN) of the IPAM.
              type: string
            DefaultResourceDiscoveryId:
              description: The Id of the default resource discovery, created with this IPAM.
              type: string
            DefaultResourceDiscoveryAssociationId:
              description: The Id of the default association to the default resource discovery, created with this IPAM.
              type: string
            ResourceDiscoveryAssociationCount:
              description: The count of resource discoveries associated with this IPAM.
              type: integer
            Description:
              type: string
            PublicDefaultScopeId:
              description: The Id of the default scope for publicly routable IP space, created with this IPAM.
              type: string
              maxLength: 255
            PrivateDefaultScopeId:
              description: The Id of the default scope for publicly routable IP space, created with this IPAM.
              type: string
            ScopeCount:
              description: The number of scopes that currently exist in this IPAM.
              type: integer
            OperatingRegions:
              description: The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/IpamOperatingRegion'
            Tier:
              description: The tier of the IPAM.
              type: string
              enum:
                - free
                - advanced
            EnablePrivateGua:
              description: Enable provisioning of GUA space in private pools.
              type: boolean
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIPAMRequest
      type: object
      required: []
    CreateIPAMAllocationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamPoolAllocationId:
              description: Id of the allocation.
              type: string
            IpamPoolId:
              description: Id of the IPAM Pool.
              type: string
            Cidr:
              $ref: '#/components/schemas/Cidr'
            NetmaskLength:
              description: The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
              type: integer
            Description:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateIPAMAllocationRequest
      type: object
      required: []
    CreateIPAMPoolRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamPoolId:
              description: Id of the IPAM Pool.
              type: string
            AddressFamily:
              description: The address family of the address space in this pool. Either IPv4 or IPv6.
              type: string
            AllocationMinNetmaskLength:
              description: The minimum allowed netmask length for allocations made from this pool.
              type: integer
            AllocationDefaultNetmaskLength:
              description: The default netmask length for allocations made from this pool. This value is used when the netmask length of an allocation isn't specified.
              type: integer
            AllocationMaxNetmaskLength:
              description: The maximum allowed netmask length for allocations made from this pool.
              type: integer
            AllocationResourceTags:
              description: When specified, an allocation will not be allowed unless a resource has a matching set of tags.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              description: The Amazon Resource Name (ARN) of the IPAM Pool.
              type: string
            AutoImport:
              description: Determines what to do if IPAM discovers resources that haven't been assigned an allocation. If set to true, an allocation will be made automatically.
              type: boolean
            AwsService:
              description: Limits which service in Amazon Web Services that the pool can be used in.
              type: string
              enum:
                - ec2
            Description:
              type: string
            IpamScopeId:
              description: The Id of the scope this pool is a part of.
              type: string
            IpamScopeArn:
              description: The Amazon Resource Name (ARN) of the scope this pool is a part of.
              type: string
            IpamScopeType:
              description: Determines whether this scope contains publicly routable space or space for a private network
              type: string
              enum:
                - public
                - private
            IpamArn:
              description: The Amazon Resource Name (ARN) of the IPAM this pool is a part of.
              type: string
            Locale:
              description: The region of this pool. If not set, this will default to "None" which will disable non-custom allocations. If the locale has been specified for the source pool, this value must match.
              type: string
            PoolDepth:
              description: The depth of this pool in the source pool hierarchy.
              type: integer
            ProvisionedCidrs:
              description: A list of cidrs representing the address space available for allocation in this pool.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ProvisionedCidr'
            PublicIpSource:
              description: The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is `byoip`.
              type: string
              enum:
                - byoip
                - amazon
            PubliclyAdvertisable:
              description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
              type: boolean
            SourceIpamPoolId:
              description: The Id of this pool's source. If set, all space provisioned in this pool must be free space provisioned in the parent pool.
              type: string
            SourceResource:
              $ref: '#/components/schemas/SourceResource'
            State:
              description: 'The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"'
              type: string
              enum:
                - create-in-progress
                - create-complete
                - modify-in-progress
                - modify-complete
                - delete-in-progress
                - delete-complete
            StateMessage:
              description: An explanation of how the pool arrived at it current state.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIPAMPoolRequest
      type: object
      required: []
    CreateIPAMPoolCidrRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamPoolCidrId:
              description: Id of the IPAM Pool Cidr.
              type: string
            IpamPoolId:
              description: Id of the IPAM Pool.
              type: string
            Cidr:
              description: Represents a single IPv4 or IPv6 CIDR
              type: string
            NetmaskLength:
              description: The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
              type: integer
            State:
              description: Provisioned state of the cidr.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateIPAMPoolCidrRequest
      type: object
      required: []
    CreateIPAMResourceDiscoveryRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamResourceDiscoveryId:
              description: Id of the IPAM Pool.
              type: string
            OwnerId:
              description: Owner Account ID of the Resource Discovery
              type: string
            OperatingRegions:
              description: The regions Resource Discovery is enabled for. Allows resource discoveries to be created in these regions, as well as enabling monitoring
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/IpamOperatingRegion'
            IpamResourceDiscoveryRegion:
              description: 'The region the resource discovery is setup in. '
              type: string
            Description:
              type: string
            IsDefault:
              description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
              type: boolean
            IpamResourceDiscoveryArn:
              description: Amazon Resource Name (Arn) for the Resource Discovery.
              type: string
            State:
              description: The state of this Resource Discovery.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIPAMResourceDiscoveryRequest
      type: object
      required: []
    CreateIPAMResourceDiscoveryAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamArn:
              description: Arn of the IPAM.
              type: string
            IpamRegion:
              description: The home region of the IPAM.
              type: string
            IpamResourceDiscoveryAssociationId:
              description: Id of the IPAM Resource Discovery Association.
              type: string
            IpamResourceDiscoveryId:
              description: The Amazon Resource Name (ARN) of the IPAM Resource Discovery Association.
              type: string
            IpamId:
              description: The Id of the IPAM this Resource Discovery is associated to.
              type: string
            IpamResourceDiscoveryAssociationArn:
              description: The Amazon Resource Name (ARN) of the resource discovery association is a part of.
              type: string
            IsDefault:
              description: If the Resource Discovery Association exists due as part of CreateIpam.
              type: boolean
            OwnerId:
              description: The AWS Account ID for the account where the shared IPAM exists.
              type: string
            State:
              description: The operational state of the Resource Discovery Association. Related to Create/Delete activities.
              type: string
            ResourceDiscoveryStatus:
              description: The status of the resource discovery.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIPAMResourceDiscoveryAssociationRequest
      type: object
      required: []
    CreateIPAMScopeRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpamScopeId:
              description: Id of the IPAM scope.
              type: string
            Arn:
              description: The Amazon Resource Name (ARN) of the IPAM scope.
              type: string
            IpamId:
              description: The Id of the IPAM this scope is a part of.
              type: string
            IpamArn:
              description: The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
              type: string
            IpamScopeType:
              description: Determines whether this scope contains publicly routable space or space for a private network
              type: string
              enum:
                - public
                - private
            IsDefault:
              description: Is this one of the default scopes created with the IPAM.
              type: boolean
            Description:
              type: string
            PoolCount:
              description: The number of pools that currently exist in this scope.
              type: integer
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateIPAMScopeRequest
      type: object
      required: []
    CreateKeyPairRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            KeyName:
              description: |-
                A unique name for the key pair.
                 Constraints: Up to 255 ASCII characters
              type: string
            KeyType:
              description: |-
                The type of key pair. Note that ED25519 keys are not supported for Windows instances.
                 If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
                 Default: ``rsa``
              type: string
              default: rsa
              enum:
                - rsa
                - ed25519
            KeyFormat:
              description: |-
                The format of the key pair.
                 Default: ``pem``
              type: string
              default: pem
              enum:
                - pem
                - ppk
            PublicKeyMaterial:
              description: The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
              type: string
            KeyFingerprint:
              description: ''
              type: string
            KeyPairId:
              description: ''
              type: string
            Tags:
              description: The tags to apply to the key pair.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateKeyPairRequest
      type: object
      required: []
    CreateLaunchTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LaunchTemplateName:
              description: A name for the launch template.
              type: string
            LaunchTemplateData:
              description: The information for the launch template.
              $ref: '#/components/schemas/LaunchTemplateData'
            VersionDescription:
              description: A description for the first version of the launch template.
              type: string
            TagSpecifications:
              uniqueItems: false
              description: |-
                The tags to apply to the launch template on creation. To tag the launch template, the resource type must be ``launch-template``.
                 To specify the tags for resources that are created during instance launch, use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications).
              type: array
              items:
                $ref: '#/components/schemas/LaunchTemplateTagSpecification'
            LatestVersionNumber:
              description: ''
              type: string
            LaunchTemplateId:
              description: ''
              type: string
            DefaultVersionNumber:
              description: ''
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLaunchTemplateRequest
      type: object
      required: []
    CreateLocalGatewayRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DestinationCidrBlock:
              description: The CIDR block used for destination matches.
              type: string
            LocalGatewayRouteTableId:
              description: The ID of the local gateway route table.
              type: string
            LocalGatewayVirtualInterfaceGroupId:
              description: The ID of the virtual interface group.
              type: string
            NetworkInterfaceId:
              description: The ID of the network interface.
              type: string
            State:
              description: The state of the route.
              type: string
            Type:
              description: The route type.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLocalGatewayRouteRequest
      type: object
      required: []
    CreateLocalGatewayRouteTableRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LocalGatewayRouteTableId:
              description: The ID of the local gateway route table.
              type: string
            LocalGatewayRouteTableArn:
              description: The ARN of the local gateway route table.
              type: string
            LocalGatewayId:
              description: The ID of the local gateway.
              type: string
            OutpostArn:
              description: The ARN of the outpost.
              type: string
            OwnerId:
              description: The owner of the local gateway route table.
              type: string
            State:
              description: The state of the local gateway route table.
              type: string
            Mode:
              description: The mode of the local gateway route table.
              type: string
            Tags:
              description: The tags for the local gateway route table.
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateLocalGatewayRouteTableRequest
      type: object
      required: []
    CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LocalGatewayRouteTableVirtualInterfaceGroupAssociationId:
              description: The ID of the local gateway route table virtual interface group association.
              type: string
            LocalGatewayId:
              description: The ID of the local gateway.
              type: string
            LocalGatewayRouteTableId:
              description: The ID of the local gateway route table.
              type: string
            LocalGatewayRouteTableArn:
              description: The ARN of the local gateway route table.
              type: string
            LocalGatewayVirtualInterfaceGroupId:
              description: The ID of the local gateway route table virtual interface group.
              type: string
            OwnerId:
              description: The owner of the local gateway route table virtual interface group association.
              type: string
            State:
              description: The state of the local gateway route table virtual interface group association.
              type: string
            Tags:
              description: The tags for the local gateway route table virtual interface group association.
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest
      type: object
      required: []
    CreateLocalGatewayRouteTableVPCAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            LocalGatewayId:
              description: The ID of the local gateway.
              type: string
            LocalGatewayRouteTableId:
              description: The ID of the local gateway route table.
              type: string
            LocalGatewayRouteTableVpcAssociationId:
              description: The ID of the association.
              type: string
            State:
              description: The state of the association.
              type: string
            VpcId:
              description: The ID of the VPC.
              type: string
            Tags:
              description: The tags for the association.
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateLocalGatewayRouteTableVPCAssociationRequest
      type: object
      required: []
    CreateNatGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SecondaryAllocationIds:
              uniqueItems: true
              description: Secondary EIP allocation IDs. For more information, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html) in the *Amazon VPC User Guide*.
              x-insertionOrder: true
              type: array
              items:
                type: string
            PrivateIpAddress:
              description: The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
              type: string
            ConnectivityType:
              description: Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
              type: string
            SecondaryPrivateIpAddresses:
              uniqueItems: true
              description: |-
                Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
                  ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
              x-insertionOrder: true
              type: array
              items:
                type: string
            SecondaryPrivateIpAddressCount:
              description: |-
                [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
                  ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
              type: integer
              minimum: 1
            AllocationId:
              description: '[Public NAT gateway only] The allocation ID of the Elastic IP address that''s associated with the NAT gateway. This property is required for a public NAT gateway and cannot be specified with a private NAT gateway.'
              type: string
            SubnetId:
              description: The ID of the subnet in which the NAT gateway is located.
              type: string
            NatGatewayId:
              description: ''
              type: string
            Tags:
              uniqueItems: false
              description: The tags for the NAT gateway.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            MaxDrainDurationSeconds:
              description: The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
              type: integer
          x-stackQL-stringOnly: true
      x-title: CreateNatGatewayRequest
      type: object
      required: []
    CreateNetworkAclRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VpcId:
              description: The ID of the VPC for the network ACL.
              type: string
            Id:
              description: ''
              type: string
            Tags:
              uniqueItems: false
              description: The tags for the network ACL.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkAclRequest
      type: object
      required: []
    CreateNetworkInsightsAccessScopeRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            NetworkInsightsAccessScopeId:
              type: string
            NetworkInsightsAccessScopeArn:
              type: string
            CreatedDate:
              type: string
            UpdatedDate:
              type: string
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            MatchPaths:
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/AccessScopePathRequest'
            ExcludePaths:
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/AccessScopePathRequest'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInsightsAccessScopeRequest
      type: object
      required: []
    CreateNetworkInsightsAccessScopeAnalysisRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            NetworkInsightsAccessScopeAnalysisId:
              type: string
            NetworkInsightsAccessScopeAnalysisArn:
              type: string
            NetworkInsightsAccessScopeId:
              type: string
            Status:
              type: string
              enum:
                - running
                - failed
                - succeeded
            StatusMessage:
              type: string
            StartDate:
              type: string
            EndDate:
              type: string
            FindingsFound:
              type: string
              enum:
                - 'true'
                - 'false'
                - unknown
            AnalyzedEniCount:
              type: integer
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInsightsAccessScopeAnalysisRequest
      type: object
      required: []
    CreateNetworkInsightsAnalysisRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              type: string
              enum:
                - running
                - failed
                - succeeded
            ReturnPathComponents:
              uniqueItems: false
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/PathComponent'
            NetworkInsightsAnalysisId:
              type: string
            NetworkInsightsPathId:
              type: string
            NetworkPathFound:
              type: boolean
            SuggestedAccounts:
              uniqueItems: true
              x-insertionOrder: true
              type: array
              items:
                type: string
            FilterInArns:
              uniqueItems: false
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/ResourceArn'
            NetworkInsightsAnalysisArn:
              type: string
            StatusMessage:
              type: string
            StartDate:
              type: string
            AlternatePathHints:
              uniqueItems: false
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/AlternatePathHint'
            Explanations:
              uniqueItems: false
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/Explanation'
            ForwardPathComponents:
              uniqueItems: false
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/PathComponent'
            AdditionalAccounts:
              uniqueItems: true
              x-insertionOrder: true
              type: array
              items:
                type: string
            Tags:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInsightsAnalysisRequest
      type: object
      required: []
    CreateNetworkInsightsPathRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            NetworkInsightsPathId:
              type: string
            NetworkInsightsPathArn:
              type: string
            CreatedDate:
              type: string
            SourceIp:
              $ref: '#/components/schemas/IpAddress'
            FilterAtSource:
              $ref: '#/components/schemas/PathFilter'
            FilterAtDestination:
              $ref: '#/components/schemas/PathFilter'
            DestinationIp:
              $ref: '#/components/schemas/IpAddress'
            Source:
              type: string
            Destination:
              type: string
            SourceArn:
              type: string
            DestinationArn:
              type: string
            Protocol:
              $ref: '#/components/schemas/Protocol'
            DestinationPort:
              $ref: '#/components/schemas/Port'
            Tags:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInsightsPathRequest
      type: object
      required: []
    CreateNetworkInterfaceAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AttachmentId:
              description: ''
              type: string
            DeleteOnTermination:
              description: Whether to delete the network interface when the instance terminates. By default, this value is set to ``true``.
              type: boolean
              default: true
            DeviceIndex:
              description: The network interface's position in the attachment order. For example, the first attached network interface has a ``DeviceIndex`` of 0.
              type: string
            InstanceId:
              description: The ID of the instance to which you will attach the ENI.
              type: string
            NetworkInterfaceId:
              description: The ID of the ENI that you want to attach.
              type: string
            EnaSrdSpecification:
              $ref: '#/components/schemas/EnaSrdSpecification'
              description: Configures ENA Express for the network interface that this action attaches to the instance.
          x-stackQL-stringOnly: true
      x-title: CreateNetworkInterfaceAttachmentRequest
      type: object
      required: []
    CreateNetworkPerformanceMetricSubscriptionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Source:
              description: The starting Region or Availability Zone for metric to subscribe to.
              type: string
            Destination:
              description: The target Region or Availability Zone for the metric to subscribe to.
              type: string
            Metric:
              description: The metric type to subscribe to.
              type: string
            Statistic:
              description: The statistic to subscribe to.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateNetworkPerformanceMetricSubscriptionRequest
      type: object
      required: []
    CreatePlacementGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Strategy:
              description: The placement strategy.
              type: string
            GroupName:
              description: The Group Name of Placement Group.
              type: string
            SpreadLevel:
              description: The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
              type: string
            PartitionCount:
              description: The number of partitions. Valid only when **Strategy** is set to `partition`
              type: integer
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreatePlacementGroupRequest
      type: object
      required: []
    CreatePrefixListRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PrefixListName:
              description: Name of Prefix List.
              type: string
              minLength: 1
              maxLength: 255
            PrefixListId:
              description: Id of Prefix List.
              type: string
            OwnerId:
              description: Owner Id of Prefix List.
              type: string
            AddressFamily:
              description: Ip Version of Prefix List.
              type: string
              enum:
                - IPv4
                - IPv6
            MaxEntries:
              description: Max Entries of Prefix List.
              type: integer
              minimum: 1
            Version:
              description: Version of Prefix List.
              type: integer
            Tags:
              description: Tags for Prefix List
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Entries:
              description: Entries of Prefix List.
              type: array
              items:
                $ref: '#/components/schemas/Entry'
            Arn:
              description: The Amazon Resource Name (ARN) of the Prefix List.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreatePrefixListRequest
      type: object
      required: []
    CreateRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CarrierGatewayId:
              type: string
              description: |-
                The ID of the carrier gateway.
                 You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
            CidrBlock:
              type: string
              description: ''
            CoreNetworkArn:
              type: string
              description: The Amazon Resource Name (ARN) of the core network.
            DestinationCidrBlock:
              type: string
              description: The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
            DestinationIpv6CidrBlock:
              type: string
              description: The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
            DestinationPrefixListId:
              type: string
              description: The ID of a prefix list used for the destination match.
            EgressOnlyInternetGatewayId:
              type: string
              description: '[IPv6 traffic only] The ID of an egress-only internet gateway.'
            GatewayId:
              type: string
              description: The ID of an internet gateway or virtual private gateway attached to your VPC.
            InstanceId:
              type: string
              description: The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
            LocalGatewayId:
              type: string
              description: The ID of the local gateway.
            NatGatewayId:
              type: string
              description: '[IPv4 traffic only] The ID of a NAT gateway.'
            NetworkInterfaceId:
              type: string
              description: The ID of a network interface.
            RouteTableId:
              type: string
              description: The ID of the route table for the route.
            TransitGatewayId:
              type: string
              description: The ID of a transit gateway.
            VpcEndpointId:
              type: string
              description: The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
            VpcPeeringConnectionId:
              type: string
              description: The ID of a VPC peering connection.
          x-stackQL-stringOnly: true
      x-title: CreateRouteRequest
      type: object
      required: []
    CreateRouteTableRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteTableId:
              description: ''
              type: string
            VpcId:
              description: The ID of the VPC.
              type: string
            Tags:
              uniqueItems: false
              description: Any tags assigned to the route table.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRouteTableRequest
      type: object
      required: []
    CreateSecurityGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GroupDescription:
              description: A description for the security group.
              type: string
            GroupName:
              description: The name of the security group.
              type: string
            VpcId:
              description: The ID of the VPC for the security group.
              type: string
            Id:
              description: The group name or group ID depending on whether the SG is created in default or specific VPC
              type: string
            SecurityGroupIngress:
              uniqueItems: false
              description: The inbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Ingress'
            SecurityGroupEgress:
              uniqueItems: false
              description: '[VPC only] The outbound rules associated with the security group. There is a short interruption during which you cannot connect to the security group.'
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Egress'
            Tags:
              uniqueItems: false
              description: Any tags assigned to the security group.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            GroupId:
              description: The group ID of the specified security group.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSecurityGroupRequest
      type: object
      required: []
    CreateSecurityGroupEgressRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CidrIp:
              description: |-
                The IPv4 address range, in CIDR format.
                 You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
                 For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
              type: string
            CidrIpv6:
              description: |-
                The IPv6 address range, in CIDR format.
                 You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
                 For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
              type: string
            Description:
              description: |-
                The description of an egress (outbound) security group rule.
                 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
              type: string
            FromPort:
              description: If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
              type: integer
            ToPort:
              description: If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
              type: integer
            IpProtocol:
              description: |-
                The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
                 Use ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify. For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
              type: string
            DestinationSecurityGroupId:
              description: |-
                The ID of the security group.
                 You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
              type: string
            Id:
              description: ''
              type: string
            DestinationPrefixListId:
              description: |-
                The prefix list IDs for an AWS service. This is the AWS service to access through a VPC endpoint from instances associated with the security group.
                 You must specify exactly one of the following: ``CidrIp``, ``CidrIpv6``, ``DestinationPrefixListId``, or ``DestinationSecurityGroupId``.
              type: string
            GroupId:
              description: The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSecurityGroupEgressRequest
      type: object
      required: []
    CreateSecurityGroupIngressRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The Security Group Rule Id
              type: string
            CidrIp:
              description: The IPv4 ranges
              type: string
            CidrIpv6:
              description: '[VPC only] The IPv6 ranges'
              type: string
            Description:
              description: Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
              type: string
            FromPort:
              description: |-
                The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.

                Use this for ICMP and any protocol that uses ports.
              type: integer
            GroupId:
              description: |-
                The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.

                You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
              type: string
            GroupName:
              description: The name of the security group.
              type: string
            IpProtocol:
              description: |-
                The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).

                [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
              type: string
            SourcePrefixListId:
              description: |+
                [EC2-VPC only] The ID of a prefix list.

              type: string
            SourceSecurityGroupId:
              description: The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
              type: string
            SourceSecurityGroupName:
              description: |-
                [EC2-Classic, default VPC] The name of the source security group.

                You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
              type: string
            SourceSecurityGroupOwnerId:
              description: |-
                [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.

                If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
              type: string
            ToPort:
              description: |-
                The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.

                Use this for ICMP and any protocol that uses ports.
              type: integer
          x-stackQL-stringOnly: true
      x-title: CreateSecurityGroupIngressRequest
      type: object
      required: []
    CreateSecurityGroupVpcAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GroupId:
              description: The group ID of the specified security group.
              type: string
            VpcId:
              description: The ID of the VPC in the security group vpc association.
              type: string
            VpcOwnerId:
              description: The owner of the VPC in the security group vpc association.
              type: string
            State:
              description: The state of the security group vpc association.
              $ref: '#/components/schemas/SecurityGroupVpcAssociationState'
            StateReason:
              description: The reason for the state of the security group vpc association.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSecurityGroupVpcAssociationRequest
      type: object
      required: []
    CreateSnapshotBlockPublicAccessRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            State:
              type: string
              description: The state of EBS Snapshot Block Public Access.
              enum:
                - block-all-sharing
                - block-new-sharing
            AccountId:
              type: string
              description: The identifier for the specified AWS account.
          x-stackQL-stringOnly: true
      x-title: CreateSnapshotBlockPublicAccessRequest
      type: object
      required: []
    CreateSpotFleetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            SpotFleetRequestConfigData:
              $ref: '#/components/schemas/SpotFleetRequestConfigData'
          x-stackQL-stringOnly: true
      x-title: CreateSpotFleetRequest
      type: object
      required: []
    CreateSubnetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AssignIpv6AddressOnCreation:
              type: boolean
              description: |-
                Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
                 If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
            VpcId:
              type: string
              description: |-
                The ID of the VPC the subnet is in.
                 If you update this property, you must also update the ``CidrBlock`` property.
            MapPublicIpOnLaunch:
              type: boolean
              description: |-
                Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
                  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
            EnableLniAtDeviceIndex:
              type: integer
              description: Indicates the device position for local network interfaces in this subnet. For example, ``1`` indicates local network interfaces in this subnet are the secondary network interface (eth1).
            NetworkAclAssociationId:
              type: string
              description: ''
            AvailabilityZone:
              type: string
              description: |-
                The Availability Zone of the subnet.
                 If you update this property, you must also update the ``CidrBlock`` property.
            AvailabilityZoneId:
              type: string
              description: The AZ ID of the subnet.
            CidrBlock:
              type: string
              description: |-
                The IPv4 CIDR block assigned to the subnet.
                 If you update this property, we create a new subnet, and then delete the existing one.
            SubnetId:
              type: string
              description: ''
            Ipv6CidrBlocks:
              type: array
              uniqueItems: false
              items:
                type: string
              description: ''
            Ipv6CidrBlock:
              type: string
              description: |-
                The IPv6 CIDR block.
                 If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
            OutpostArn:
              type: string
              description: The Amazon Resource Name (ARN) of the Outpost.
            Ipv6Native:
              type: boolean
              description: Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
            EnableDns64:
              type: boolean
              description: |-
                Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.
                  You must first configure a NAT gateway in a public subnet (separate from the subnet containing the IPv6-only workloads). For example, the subnet containing the NAT gateway should have a ``0.0.0.0/0`` route pointing to the internet gateway. For more information, see [Configure DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html#nat-gateway-nat64-dns64-walkthrough) in the *User Guide*.
            PrivateDnsNameOptionsOnLaunch:
              type: object
              additionalProperties: false
              properties:
                HostnameType:
                  type: string
                EnableResourceNameDnsARecord:
                  type: boolean
                EnableResourceNameDnsAAAARecord:
                  type: boolean
              description: |-
                The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
                 Available options:
                  +  EnableResourceNameDnsAAAARecord (true | false)
                  +  EnableResourceNameDnsARecord (true | false)
                  +  HostnameType (ip-name | resource-name)
            Tags:
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
              description: Any tags assigned to the subnet.
            Ipv4IpamPoolId:
              type: string
              description: An IPv4 IPAM pool ID for the subnet.
            Ipv4NetmaskLength:
              type: integer
              description: An IPv4 netmask length for the subnet.
            Ipv6IpamPoolId:
              type: string
              description: An IPv6 IPAM pool ID for the subnet.
            Ipv6NetmaskLength:
              type: integer
              description: An IPv6 netmask length for the subnet.
          x-stackQL-stringOnly: true
      x-title: CreateSubnetRequest
      type: object
      required: []
    CreateSubnetCidrBlockRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: Information about the IPv6 association.
              type: string
            Ipv6CidrBlock:
              description: The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
              type: string
              maxLength: 42
            Ipv6IpamPoolId:
              description: The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
              type: string
            Ipv6NetmaskLength:
              description: The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
              type: integer
              minimum: 0
              maximum: 128
            SubnetId:
              description: The ID of the subnet
              type: string
            Ipv6AddressAttribute:
              type: string
              description: The value denoting whether an IPv6 Subnet CIDR Block is public or private.
            IpSource:
              type: string
              description: The IP Source of an IPv6 Subnet CIDR Block.
          x-stackQL-stringOnly: true
      x-title: CreateSubnetCidrBlockRequest
      type: object
      required: []
    CreateSubnetNetworkAclAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SubnetId:
              type: string
              description: The ID of the subnet
            NetworkAclId:
              type: string
              description: The ID of the network ACL
            AssociationId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSubnetNetworkAclAssociationRequest
      type: object
      required: []
    CreateSubnetRouteTableAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteTableId:
              description: |-
                The ID of the route table.
                 The physical ID changes when the route table ID is changed.
              type: string
            Id:
              description: ''
              type: string
            SubnetId:
              description: The ID of the subnet.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateSubnetRouteTableAssociationRequest
      type: object
      required: []
    CreateTransitGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DefaultRouteTablePropagation:
              type: string
            TransitGatewayArn:
              type: string
            Description:
              type: string
            AutoAcceptSharedAttachments:
              type: string
            DefaultRouteTableAssociation:
              type: string
            Id:
              type: string
            VpnEcmpSupport:
              type: string
            DnsSupport:
              type: string
            SecurityGroupReferencingSupport:
              type: string
            MulticastSupport:
              type: string
            AmazonSideAsn:
              type: integer
              format: int64
            TransitGatewayCidrBlocks:
              type: array
              items:
                type: string
            Tags:
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            AssociationDefaultRouteTableId:
              type: string
            PropagationDefaultRouteTableId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRequest
      type: object
      required: []
    CreateTransitGatewayAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Options:
              description: The options for the transit gateway vpc attachment.
              additionalProperties: false
              type: object
              properties:
                Ipv6Support:
                  description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                ApplianceModeSupport:
                  description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                SecurityGroupReferencingSupport:
                  description: 'Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                DnsSupport:
                  description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
            TransitGatewayId:
              type: string
            VpcId:
              type: string
            Id:
              type: string
            SubnetIds:
              uniqueItems: false
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::EC2::Subnet
                  propertyPath: /properties/SubnetId
                type: string
            Tags:
              uniqueItems: false
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayAttachmentRequest
      type: object
      required: []
    CreateTransitGatewayConnectRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayAttachmentId:
              description: The ID of the Connect attachment.
              type: string
            TransportTransitGatewayAttachmentId:
              description: The ID of the attachment from which the Connect attachment was created.
              type: string
            TransitGatewayId:
              description: The ID of the transit gateway.
              type: string
            State:
              description: The state of the attachment.
              type: string
            CreationTime:
              description: The creation time.
              type: string
            Tags:
              description: The tags for the attachment.
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Options:
              $ref: '#/components/schemas/TransitGatewayConnectOptions'
              description: The Connect attachment options.
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayConnectRequest
      type: object
      required: []
    CreateTransitGatewayMulticastDomainRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayMulticastDomainId:
              description: The ID of the transit gateway multicast domain.
              type: string
            TransitGatewayMulticastDomainArn:
              description: The Amazon Resource Name (ARN) of the transit gateway multicast domain.
              type: string
            TransitGatewayId:
              description: The ID of the transit gateway.
              type: string
            State:
              description: The state of the transit gateway multicast domain.
              type: string
            CreationTime:
              description: The time the transit gateway multicast domain was created.
              type: string
              format: date-time
            Tags:
              description: The tags for the transit gateway multicast domain.
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Options:
              description: The options for the transit gateway multicast domain.
              type: object
              properties:
                AutoAcceptSharedAssociations:
                  description: 'Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain. Valid Values: enable | disable'
                  type: string
                Igmpv2Support:
                  description: 'Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain. Valid Values: enable | disable'
                  type: string
                StaticSourcesSupport:
                  description: 'Indicates whether support for statically configuring transit gateway multicast group sources is turned on. Valid Values: enable | disable'
                  type: string
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayMulticastDomainRequest
      type: object
      required: []
    CreateTransitGatewayMulticastDomainAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayMulticastDomainId:
              description: The ID of the transit gateway multicast domain.
              type: string
            TransitGatewayAttachmentId:
              description: The ID of the transit gateway attachment.
              type: string
            ResourceId:
              description: The ID of the resource.
              type: string
            ResourceType:
              description: The type of resource, for example a VPC attachment.
              type: string
            State:
              description: The state of the subnet association.
              type: string
            SubnetId:
              description: The IDs of the subnets to associate with the transit gateway multicast domain.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayMulticastDomainAssociationRequest
      type: object
      required: []
    CreateTransitGatewayMulticastGroupMemberRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GroupIpAddress:
              description: The IP address assigned to the transit gateway multicast group.
              type: string
            TransitGatewayAttachmentId:
              description: The ID of the transit gateway attachment.
              type: string
            TransitGatewayMulticastDomainId:
              description: The ID of the transit gateway multicast domain.
              type: string
            SubnetId:
              description: The ID of the subnet.
              type: string
            ResourceId:
              description: The ID of the resource.
              type: string
            ResourceType:
              description: The type of resource, for example a VPC attachment.
              type: string
            NetworkInterfaceId:
              description: The ID of the transit gateway attachment.
              type: string
            GroupMember:
              description: Indicates that the resource is a transit gateway multicast group member.
              type: boolean
            GroupSource:
              description: Indicates that the resource is a transit gateway multicast group member.
              type: boolean
            MemberType:
              description: The member type (for example, static).
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayMulticastGroupMemberRequest
      type: object
      required: []
    CreateTransitGatewayMulticastGroupSourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GroupIpAddress:
              description: The IP address assigned to the transit gateway multicast group.
              type: string
            TransitGatewayAttachmentId:
              description: The ID of the transit gateway attachment.
              type: string
            TransitGatewayMulticastDomainId:
              description: The ID of the transit gateway multicast domain.
              type: string
            SubnetId:
              description: The ID of the subnet.
              type: string
            ResourceId:
              description: The ID of the resource.
              type: string
            ResourceType:
              description: The type of resource, for example a VPC attachment.
              type: string
            NetworkInterfaceId:
              description: The ID of the transit gateway attachment.
              type: string
            GroupMember:
              description: Indicates that the resource is a transit gateway multicast group member.
              type: boolean
            GroupSource:
              description: Indicates that the resource is a transit gateway multicast group member.
              type: boolean
            SourceType:
              description: The source type.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayMulticastGroupSourceRequest
      type: object
      required: []
    CreateTransitGatewayPeeringAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Status:
              description: The status of the transit gateway peering attachment.
              $ref: '#/components/schemas/PeeringAttachmentStatus'
            TransitGatewayId:
              description: The ID of the transit gateway.
              type: string
            PeerTransitGatewayId:
              description: The ID of the peer transit gateway.
              type: string
            PeerAccountId:
              description: The ID of the peer account
              type: string
            State:
              description: The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
              type: string
            CreationTime:
              format: date-time
              description: The time the transit gateway peering attachment was created.
              type: string
            PeerRegion:
              description: Peer Region
              type: string
            Tags:
              description: The tags for the transit gateway peering attachment.
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            TransitGatewayAttachmentId:
              description: The ID of the transit gateway peering attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayPeeringAttachmentRequest
      type: object
      required: []
    CreateTransitGatewayRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayRouteTableId:
              description: The ID of transit gateway route table.
              type: string
            DestinationCidrBlock:
              description: The CIDR range used for destination matches. Routing decisions are based on the most specific match.
              type: string
            Blackhole:
              description: Indicates whether to drop traffic that matches this route.
              type: boolean
            TransitGatewayAttachmentId:
              description: The ID of transit gateway attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRouteRequest
      type: object
      required: []
    CreateTransitGatewayRouteTableRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayRouteTableId:
              description: Transit Gateway Route Table primary identifier
              type: string
            TransitGatewayId:
              description: The ID of the transit gateway.
              type: string
            Tags:
              uniqueItems: false
              description: Tags are composed of a Key/Value pair. You can use tags to categorize and track each parameter group. The tag value null is permitted.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRouteTableRequest
      type: object
      required: []
    CreateTransitGatewayRouteTableAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayRouteTableId:
              description: The ID of transit gateway route table.
              type: string
            TransitGatewayAttachmentId:
              description: The ID of transit gateway attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRouteTableAssociationRequest
      type: object
      required: []
    CreateTransitGatewayRouteTablePropagationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TransitGatewayRouteTableId:
              description: The ID of transit gateway route table.
              type: string
            TransitGatewayAttachmentId:
              description: The ID of transit gateway attachment.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayRouteTablePropagationRequest
      type: object
      required: []
    CreateTransitGatewayVpcAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            TransitGatewayId:
              type: string
            VpcId:
              type: string
            SubnetIds:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                type: string
            AddSubnetIds:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            RemoveSubnetIds:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Options:
              description: The options for the transit gateway vpc attachment.
              type: object
              properties:
                DnsSupport:
                  description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                Ipv6Support:
                  description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                ApplianceModeSupport:
                  description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
                  type: string
                SecurityGroupReferencingSupport:
                  description: 'Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid values: enable | disable'
                  type: string
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateTransitGatewayVpcAttachmentRequest
      type: object
      required: []
    CreateVerifiedAccessEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VerifiedAccessEndpointId:
              description: The ID of the AWS Verified Access endpoint.
              type: string
            VerifiedAccessGroupId:
              description: The ID of the AWS Verified Access group.
              type: string
            VerifiedAccessInstanceId:
              description: The ID of the AWS Verified Access instance.
              type: string
            Status:
              description: The endpoint status.
              type: string
            SecurityGroupIds:
              description: The IDs of the security groups for the endpoint.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SecurityGroupId'
            NetworkInterfaceOptions:
              description: The options for network-interface type endpoint.
              $ref: '#/components/schemas/NetworkInterfaceOptions'
            LoadBalancerOptions:
              description: The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
              $ref: '#/components/schemas/LoadBalancerOptions'
            EndpointType:
              description: The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
              type: string
            EndpointDomain:
              description: A DNS name that is generated for the endpoint.
              type: string
            EndpointDomainPrefix:
              description: A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
              type: string
            DeviceValidationDomain:
              description: Returned if endpoint has a device trust provider attached.
              type: string
            DomainCertificateArn:
              description: The ARN of a public TLS/SSL certificate imported into or created with ACM.
              type: string
            AttachmentType:
              description: The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
              type: string
            ApplicationDomain:
              description: The DNS name for users to reach your application.
              type: string
            CreationTime:
              description: The creation time.
              type: string
            LastUpdatedTime:
              description: The last updated time.
              type: string
            Description:
              description: A description for the AWS Verified Access endpoint.
              type: string
            PolicyDocument:
              description: The AWS Verified Access policy document.
              type: string
            PolicyEnabled:
              description: The status of the Verified Access policy.
              type: boolean
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            SseSpecification:
              description: The configuration options for customer provided KMS encryption.
              $ref: '#/components/schemas/SseSpecification'
          x-stackQL-stringOnly: true
      x-title: CreateVerifiedAccessEndpointRequest
      type: object
      required: []
    CreateVerifiedAccessGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VerifiedAccessGroupId:
              description: The ID of the AWS Verified Access group.
              type: string
            VerifiedAccessInstanceId:
              description: The ID of the AWS Verified Access instance.
              type: string
            VerifiedAccessGroupArn:
              description: The ARN of the Verified Access group.
              type: string
            Owner:
              description: The AWS account number that owns the group.
              type: string
            CreationTime:
              description: Time this Verified Access Group was created.
              type: string
            LastUpdatedTime:
              description: Time this Verified Access Group was last updated.
              type: string
            Description:
              description: A description for the AWS Verified Access group.
              type: string
            PolicyDocument:
              description: The AWS Verified Access policy document.
              type: string
            PolicyEnabled:
              description: The status of the Verified Access policy.
              type: boolean
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            SseSpecification:
              description: The configuration options for customer provided KMS encryption.
              $ref: '#/components/schemas/SseSpecification'
          x-stackQL-stringOnly: true
      x-title: CreateVerifiedAccessGroupRequest
      type: object
      required: []
    CreateVerifiedAccessTrustProviderRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TrustProviderType:
              description: 'Type of trust provider. Possible values: user|device'
              type: string
            DeviceTrustProviderType:
              description: 'The type of device-based trust provider. Possible values: jamf|crowdstrike'
              type: string
            UserTrustProviderType:
              description: 'The type of device-based trust provider. Possible values: oidc|iam-identity-center'
              type: string
            OidcOptions:
              $ref: '#/components/schemas/OidcOptions'
            DeviceOptions:
              $ref: '#/components/schemas/DeviceOptions'
            PolicyReferenceName:
              description: The identifier to be used when working with policy rules.
              type: string
            CreationTime:
              description: The creation time.
              type: string
            LastUpdatedTime:
              description: The last updated time.
              type: string
            VerifiedAccessTrustProviderId:
              description: The ID of the Amazon Web Services Verified Access trust provider.
              type: string
            Description:
              description: A description for the Amazon Web Services Verified Access trust provider.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            SseSpecification:
              description: The configuration options for customer provided KMS encryption.
              type: object
              properties:
                KmsKeyArn:
                  description: KMS Key Arn used to encrypt the group policy
                  type: string
                CustomerManagedKeyEnabled:
                  description: Whether to encrypt the policy with the provided key or disable encryption
                  type: boolean
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateVerifiedAccessTrustProviderRequest
      type: object
      required: []
    CreateVerifiedAccessInstanceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VerifiedAccessInstanceId:
              description: The ID of the AWS Verified Access instance.
              type: string
            VerifiedAccessTrustProviders:
              description: AWS Verified Access trust providers.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/VerifiedAccessTrustProvider'
            VerifiedAccessTrustProviderIds:
              description: The IDs of the AWS Verified Access trust providers.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/VerifiedAccessTrustProviderId'
            CreationTime:
              description: Time this Verified Access Instance was created.
              type: string
            LastUpdatedTime:
              description: Time this Verified Access Instance was last updated.
              type: string
            Description:
              description: A description for the AWS Verified Access instance.
              type: string
            LoggingConfigurations:
              description: The configuration options for AWS Verified Access instances.
              $ref: '#/components/schemas/VerifiedAccessLogs'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            FipsEnabled:
              description: Indicates whether FIPS is enabled
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateVerifiedAccessInstanceRequest
      type: object
      required: []
    CreateVolumeAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VolumeId:
              $ref: '#/components/schemas/VolumeId'
              description: The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an [AWS::EC2::Volume](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html) resource, or it can be the volume ID of an existing Amazon EBS volume.
            InstanceId:
              $ref: '#/components/schemas/InstanceId'
              description: The ID of the instance to which the volume attaches. This value can be a reference to an [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) resource, or it can be the physical ID of an existing EC2 instance.
            Device:
              $ref: '#/components/schemas/Device'
              description: The device name (for example, ``/dev/sdh`` or ``xvdh``).
          x-stackQL-stringOnly: true
      x-title: CreateVolumeAttachmentRequest
      type: object
      required: []
    CreateVPCRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VpcId:
              description: ''
              type: string
            InstanceTenancy:
              description: |-
                The allowed tenancy of instances launched into the VPC.
                  +   ``default``: An instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different tenancy during instance launch.
                  +   ``dedicated``: An instance launched into the VPC runs on dedicated hardware by default, unless you explicitly specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy of ``default`` during instance launch.
                  
                 Updating ``InstanceTenancy`` requires no replacement only if you are updating its value from ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to ``dedicated`` requires replacement.
              type: string
            Ipv4NetmaskLength:
              description: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
              type: integer
            CidrBlockAssociations:
              uniqueItems: false
              description: ''
              x-insertionOrder: false
              type: array
              items:
                type: string
            CidrBlock:
              description: |-
                The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``. We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
                 You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
              type: string
            Ipv4IpamPoolId:
              description: |-
                The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
                 You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
              type: string
            DefaultNetworkAcl:
              description: ''
              x-insertionOrder: false
              type: string
            EnableDnsSupport:
              description: >-
                Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. Enabled by default. For more information, see [DNS attributes in your
                VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
              type: boolean
            Ipv6CidrBlocks:
              uniqueItems: false
              description: ''
              x-insertionOrder: false
              type: array
              items:
                type: string
            DefaultSecurityGroup:
              description: ''
              x-insertionOrder: false
              type: string
            EnableDnsHostnames:
              description: |-
                Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs. For more information, see [DNS attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
                 You can only enable DNS hostnames if you've enabled DNS support.
              type: boolean
            Tags:
              uniqueItems: false
              description: The tags for the VPC.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPCRequest
      type: object
      required: []
    CreateVPCBlockPublicAccessExclusionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ExclusionId:
              type: string
              description: The ID of the exclusion
            InternetGatewayExclusionMode:
              description: The desired Block Public Access Exclusion Mode for a specific VPC/Subnet.
              type: string
              enum:
                - allow-bidirectional
                - allow-egress
            VpcId:
              type: string
              description: The ID of the vpc. Required only if you don't specify SubnetId.
            SubnetId:
              type: string
              description: The ID of the subnet. Required only if you don't specify VpcId
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPCBlockPublicAccessExclusionRequest
      type: object
      required: []
    CreateVPCBlockPublicAccessOptionsRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            InternetGatewayBlockMode:
              description: The desired Block Public Access mode for Internet Gateways in your account. We do not allow to create in a off mode as this is the default value
              type: string
              enum:
                - block-bidirectional
                - block-ingress
            AccountId:
              type: string
              description: The identifier for the specified AWS account.
          x-stackQL-stringOnly: true
      x-title: CreateVPCBlockPublicAccessOptionsRequest
      type: object
      required: []
    CreateVPCCidrBlockRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CidrBlock:
              type: string
              description: An IPv4 CIDR block to associate with the VPC.
            Ipv6Pool:
              type: string
              description: The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
            Id:
              type: string
              description: The Id of the VPC associated CIDR Block.
            VpcId:
              type: string
              description: The ID of the VPC.
            Ipv6CidrBlock:
              type: string
              description: An IPv6 CIDR block from the IPv6 address pool.
            Ipv4IpamPoolId:
              type: string
              description: The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.
            Ipv4NetmaskLength:
              type: integer
              description: The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
            Ipv6IpamPoolId:
              type: string
              description: The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.
            Ipv6NetmaskLength:
              type: integer
              description: The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.
            AmazonProvidedIpv6CidrBlock:
              type: boolean
              description: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
            Ipv6AddressAttribute:
              type: string
              description: The value denoting whether an IPv6 VPC CIDR Block is public or private.
            IpSource:
              type: string
              description: The IP Source of an IPv6 VPC CIDR Block.
            Ipv6CidrBlockNetworkBorderGroup:
              type: string
              description: The name of the location from which we advertise the IPV6 CIDR block.
          x-stackQL-stringOnly: true
      x-title: CreateVPCCidrBlockRequest
      type: object
      required: []
    CreateVPCDHCPOptionsAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DhcpOptionsId:
              type: string
              description: The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
            VpcId:
              type: string
              description: The ID of the VPC.
          x-stackQL-stringOnly: true
      x-title: CreateVPCDHCPOptionsAssociationRequest
      type: object
      required: []
    CreateVPCEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PrivateDnsEnabled:
              description: >-
                Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC
                endpoint service.
                 To use a private hosted zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
                 This property is supported only for interface endpoints.
                 Default: ``false``
              type: boolean
            IpAddressType:
              description: ''
              type: string
              enum:
                - ipv4
                - ipv6
                - dualstack
                - not-specified
            CreationTimestamp:
              description: ''
              type: string
            DnsOptions:
              description: ''
              $ref: '#/components/schemas/DnsOptionsSpecification'
            NetworkInterfaceIds:
              uniqueItems: false
              description: ''
              x-insertionOrder: false
              type: array
              items:
                type: string
            DnsEntries:
              uniqueItems: false
              description: ''
              x-insertionOrder: false
              type: array
              items:
                type: string
            ResourceConfigurationArn:
              description: ''
              type: string
            SecurityGroupIds:
              uniqueItems: true
              description: The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not specified, we use the default security group for the VPC. Security groups are supported only for interface endpoints.
              x-insertionOrder: false
              type: array
              items:
                anyOf:
                  - relationshipRef:
                      typeName: AWS::EC2::SecurityGroup
                      propertyPath: /properties/GroupId
                  - relationshipRef:
                      typeName: AWS::EC2::SecurityGroup
                      propertyPath: /properties/Id
                  - relationshipRef:
                      typeName: AWS::EC2::VPC
                      propertyPath: /properties/DefaultSecurityGroup
                type: string
            SubnetIds:
              uniqueItems: true
              description: The IDs of the subnets in which to create endpoint network interfaces. You must specify this property for an interface endpoint or a Gateway Load Balancer endpoint. You can't specify this property for a gateway endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::EC2::Subnet
                  propertyPath: /properties/SubnetId
                type: string
            ServiceNetworkArn:
              description: ''
              type: string
            VpcId:
              description: The ID of the VPC.
              type: string
            RouteTableIds:
              uniqueItems: true
              description: The IDs of the route tables. Routing is supported only for gateway endpoints.
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::EC2::RouteTable
                  propertyPath: /properties/RouteTableId
                type: string
            ServiceName:
              description: The name of the endpoint service.
              type: string
            PolicyDocument:
              description: |-
                An endpoint policy, which controls access to the service from the VPC. The default endpoint policy allows full access to the service. Endpoint policies are supported only for gateway and interface endpoints.
                 For CloudFormation templates in YAML, you can provide the policy in JSON or YAML format. For example, if you have a JSON policy, you can convert it to YAML before including it in the YAML template, and CFNlong converts the policy to JSON format before calling the API actions for privatelink. Alternatively, you can include the JSON directly in the YAML, as shown in the following ``Properties`` section:
                 ``Properties: VpcEndpointType: 'Interface' ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs' PolicyDocument: '{ "Version":"2012-10-17", "Statement": [{ "Effect":"Allow", "Principal":"*", "Action":["logs:Describe*","logs:Get*","logs:List*","logs:FilterLogEvents"], "Resource":"*" }] }'``
              type: object
            VpcEndpointType:
              description: |-
                The type of endpoint.
                 Default: Gateway
              type: string
              enum:
                - Interface
                - Gateway
                - GatewayLoadBalancer
                - ServiceNetwork
                - Resource
            Id:
              description: ''
              type: string
            Tags:
              uniqueItems: false
              description: ''
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPCEndpointRequest
      type: object
      required: []
    CreateVPCEndpointConnectionNotificationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ConnectionEvents:
              uniqueItems: false
              description: The endpoint events for which to receive notifications.
              x-insertionOrder: false
              type: array
              items:
                type: string
            VPCEndpointId:
              description: The ID of the endpoint.
              type: string
            VPCEndpointConnectionNotificationId:
              description: VPC Endpoint Connection ID generated by service
              type: string
            ConnectionNotificationArn:
              description: The ARN of the SNS topic for the notifications.
              type: string
            ServiceId:
              description: The ID of the endpoint service.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVPCEndpointConnectionNotificationRequest
      type: object
      required: []
    CreateVPCEndpointServiceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            NetworkLoadBalancerArns:
              type: array
              uniqueItems: false
              items:
                type: string
                relationshipRef:
                  typeName: AWS::ElasticLoadBalancingV2::LoadBalancer
                  propertyPath: /properties/LoadBalancerArn
            ContributorInsightsEnabled:
              type: boolean
            PayerResponsibility:
              type: string
            ServiceId:
              type: string
            AcceptanceRequired:
              type: boolean
            GatewayLoadBalancerArns:
              type: array
              uniqueItems: false
              items:
                type: string
            Tags:
              type: array
              description: The tags to add to the VPC endpoint service.
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPCEndpointServiceRequest
      type: object
      required: []
    CreateVPCEndpointServicePermissionsRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AllowedPrincipals:
              uniqueItems: false
              type: array
              items:
                type: string
            ServiceId:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVPCEndpointServicePermissionsRequest
      type: object
      required: []
    CreateVPCGatewayAttachmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AttachmentType:
              type: string
              description: 'Used to identify if this resource is an Internet Gateway or Vpn Gateway Attachment '
            InternetGatewayId:
              type: string
              description: The ID of the internet gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
            VpcId:
              type: string
              description: The ID of the VPC.
            VpnGatewayId:
              type: string
              description: The ID of the virtual private gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
          x-stackQL-stringOnly: true
      x-title: CreateVPCGatewayAttachmentRequest
      type: object
      required: []
    CreateVPCPeeringConnectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PeerRoleArn:
              description: The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
              type: string
            VpcId:
              description: The ID of the VPC.
              type: string
            PeerVpcId:
              description: The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
              type: string
            Id:
              type: string
            PeerRegion:
              description: The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
              type: string
            PeerOwnerId:
              description: The AWS account ID of the owner of the accepter VPC.
              type: string
            Tags:
              uniqueItems: false
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPCPeeringConnectionRequest
      type: object
      required: []
    CreateVPNConnectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RemoteIpv6NetworkCidr:
              description: |-
                The IPv6 CIDR on the AWS side of the VPN connection.
                 Default: ``::/0``
              type: string
            RemoteIpv4NetworkCidr:
              description: |-
                The IPv4 CIDR on the AWS side of the VPN connection.
                 Default: ``0.0.0.0/0``
              type: string
            VpnTunnelOptionsSpecifications:
              uniqueItems: false
              description: The tunnel options for the VPN connection.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/VpnTunnelOptionsSpecification'
            CustomerGatewayId:
              description: The ID of the customer gateway at your end of the VPN connection.
              type: string
            OutsideIpAddressType:
              description: |-
                The type of IPv4 address assigned to the outside interface of the customer gateway device.
                 Valid values: ``PrivateIpv4`` | ``PublicIpv4`` 
                 Default: ``PublicIpv4``
              type: string
            StaticRoutesOnly:
              description: |-
                Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
                 If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.
              type: boolean
            EnableAcceleration:
              description: |-
                Indicate whether to enable acceleration for the VPN connection.
                 Default: ``false``
              type: boolean
            TransitGatewayId:
              description: |-
                The ID of the transit gateway associated with the VPN connection.
                 You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
              type: string
            Type:
              description: The type of VPN connection.
              type: string
            LocalIpv4NetworkCidr:
              description: |-
                The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
                 Default: ``0.0.0.0/0``
              type: string
            VpnGatewayId:
              description: |-
                The ID of the virtual private gateway at the AWS side of the VPN connection.
                 You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.
              type: string
            TransportTransitGatewayAttachmentId:
              description: |-
                The transit gateway attachment ID to use for the VPN tunnel.
                 Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.
              type: string
            LocalIpv6NetworkCidr:
              description: |-
                The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
                 Default: ``::/0``
              type: string
            VpnConnectionId:
              description: ''
              type: string
            TunnelInsideIpVersion:
              description: |-
                Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
                 Default: ``ipv4``
              type: string
            Tags:
              uniqueItems: false
              description: Any tags assigned to the VPN connection.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateVPNConnectionRequest
      type: object
      required: []
    CreateVPNConnectionRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DestinationCidrBlock:
              description: The CIDR block associated with the local subnet of the customer network.
              type: string
            VpnConnectionId:
              description: The ID of the VPN connection.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVPNConnectionRouteRequest
      type: object
      required: []
    CreateVPNGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VPNGatewayId:
              description: ''
              type: string
            AmazonSideAsn:
              description: The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
              type: integer
              format: int64
            Tags:
              description: Any tags assigned to the virtual private gateway.
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            Type:
              description: The type of VPN connection the virtual private gateway supports.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVPNGatewayRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    route_tables_native:
      name: route_tables_native
      x-cfn-schema-name: RouteTable
      x-example-where-clause: WHERE region = 'us-east-1' AND RouteTableId = '<RouteTableId>'
      x-type: native
      methods:
        describe_route_tables:
          serviceName: ec2
          operation:
            $ref: '#/paths/~1?Action=DescribeRouteTables&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            objectKey: /*/routeTableSet/item
            openAPIDocKey: '200'
      id: aws.ec2.route_tables_native
      sqlVerbs:
        delete: []
        insert: []
        select:
          - $ref: '#/components/x-stackQL-resources/route_tables_native/methods/describe_route_tables'
        update: []
      title: route_tables_native
    instances:
      name: instances
      methods:
        bundle:
          operation:
            $ref: '#/paths/~1?Action=BundleInstance&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1?Action=ImportInstance&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        monitor:
          operation:
            $ref: '#/paths/~1?Action=MonitorInstances&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        reboot:
          operation:
            $ref: '#/paths/~1?Action=RebootInstances&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            openAPIDocKey: '200'
        start:
          operation:
            $ref: '#/paths/~1?Action=StartInstances&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        stop:
          operation:
            $ref: '#/paths/~1?Action=StopInstances&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        unmonitor:
          operation:
            $ref: '#/paths/~1?Action=UnmonitorInstances&Version=2016-11-15&__nativeEndpoint=true/get'
          response:
            mediaType: text/xml
            openAPIDocKey: '200'
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Instance&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Instance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      id: aws.ec2.instances
      sqlVerbs:
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete_resource'
        insert:
          - $ref: '#/components/x-stackQL-resources/instances/methods/create_resource'
        select: []
        update:
          - $ref: '#/components/x-stackQL-resources/instances/methods/update_resource'
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::EC2::Instance
      x-identifiers:
        - InstanceId
      x-type: cloud_control
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.PrivateDnsName') as private_dns_name,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.UserData') as user_data,
              JSON_EXTRACT(Properties, '$.BlockDeviceMappings') as block_device_mappings,
              JSON_EXTRACT(Properties, '$.IamInstanceProfile') as iam_instance_profile,
              JSON_EXTRACT(Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(Properties, '$.KernelId') as kernel_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.EbsOptimized') as ebs_optimized,
              JSON_EXTRACT(Properties, '$.PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
              JSON_EXTRACT(Properties, '$.ElasticGpuSpecifications') as elastic_gpu_specifications,
              JSON_EXTRACT(Properties, '$.ElasticInferenceAccelerators') as elastic_inference_accelerators,
              JSON_EXTRACT(Properties, '$.Volumes') as volumes,
              JSON_EXTRACT(Properties, '$.PrivateIp') as private_ip,
              JSON_EXTRACT(Properties, '$.Ipv6AddressCount') as ipv6_address_count,
              JSON_EXTRACT(Properties, '$.LaunchTemplate') as launch_template,
              JSON_EXTRACT(Properties, '$.EnclaveOptions') as enclave_options,
              JSON_EXTRACT(Properties, '$.NetworkInterfaces') as network_interfaces,
              JSON_EXTRACT(Properties, '$.ImageId') as image_id,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.Monitoring') as monitoring,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AdditionalInfo') as additional_info,
              JSON_EXTRACT(Properties, '$.HibernationOptions') as hibernation_options,
              JSON_EXTRACT(Properties, '$.LicenseSpecifications') as license_specifications,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(Properties, '$.InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
              JSON_EXTRACT(Properties, '$.CpuOptions') as cpu_options,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.PrivateDnsNameOptions') as private_dns_name_options,
              JSON_EXTRACT(Properties, '$.HostId') as host_id,
              JSON_EXTRACT(Properties, '$.HostResourceGroupArn') as host_resource_group_arn,
              JSON_EXTRACT(Properties, '$.PublicDnsName') as public_dns_name,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.DisableApiTermination') as disable_api_termination,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(Properties, '$.RamdiskId') as ramdisk_id,
              JSON_EXTRACT(Properties, '$.SourceDestCheck') as source_dest_check,
              JSON_EXTRACT(Properties, '$.PlacementGroupName') as placement_group_name,
              JSON_EXTRACT(Properties, '$.SsmAssociations') as ssm_associations,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Affinity') as affinity,
              JSON_EXTRACT(Properties, '$.CreditSpecification') as credit_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Instance'
              AND data__Identifier = '<InstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Tenancy') as tenancy,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroups') as security_groups,
                JSON_EXTRACT(detail.Properties, '$.PrivateDnsName') as private_dns_name,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.UserData') as user_data,
                JSON_EXTRACT(detail.Properties, '$.BlockDeviceMappings') as block_device_mappings,
                JSON_EXTRACT(detail.Properties, '$.IamInstanceProfile') as iam_instance_profile,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
                JSON_EXTRACT(detail.Properties, '$.KernelId') as kernel_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.EbsOptimized') as ebs_optimized,
                JSON_EXTRACT(detail.Properties, '$.PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
                JSON_EXTRACT(detail.Properties, '$.ElasticGpuSpecifications') as elastic_gpu_specifications,
                JSON_EXTRACT(detail.Properties, '$.ElasticInferenceAccelerators') as elastic_inference_accelerators,
                JSON_EXTRACT(detail.Properties, '$.Volumes') as volumes,
                JSON_EXTRACT(detail.Properties, '$.PrivateIp') as private_ip,
                JSON_EXTRACT(detail.Properties, '$.Ipv6AddressCount') as ipv6_address_count,
                JSON_EXTRACT(detail.Properties, '$.LaunchTemplate') as launch_template,
                JSON_EXTRACT(detail.Properties, '$.EnclaveOptions') as enclave_options,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaces') as network_interfaces,
                JSON_EXTRACT(detail.Properties, '$.ImageId') as image_id,
                JSON_EXTRACT(detail.Properties, '$.InstanceType') as instance_type,
                JSON_EXTRACT(detail.Properties, '$.Monitoring') as monitoring,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.AdditionalInfo') as additional_info,
                JSON_EXTRACT(detail.Properties, '$.HibernationOptions') as hibernation_options,
                JSON_EXTRACT(detail.Properties, '$.LicenseSpecifications') as license_specifications,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.PublicIp') as public_ip,
                JSON_EXTRACT(detail.Properties, '$.InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
                JSON_EXTRACT(detail.Properties, '$.CpuOptions') as cpu_options,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.PrivateDnsNameOptions') as private_dns_name_options,
                JSON_EXTRACT(detail.Properties, '$.HostId') as host_id,
                JSON_EXTRACT(detail.Properties, '$.HostResourceGroupArn') as host_resource_group_arn,
                JSON_EXTRACT(detail.Properties, '$.PublicDnsName') as public_dns_name,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.DisableApiTermination') as disable_api_termination,
                JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
                JSON_EXTRACT(detail.Properties, '$.RamdiskId') as ramdisk_id,
                JSON_EXTRACT(detail.Properties, '$.SourceDestCheck') as source_dest_check,
                JSON_EXTRACT(detail.Properties, '$.PlacementGroupName') as placement_group_name,
                JSON_EXTRACT(detail.Properties, '$.SsmAssociations') as ssm_associations,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Affinity') as affinity,
                JSON_EXTRACT(detail.Properties, '$.CreditSpecification') as credit_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::Instance'
                AND detail.data__TypeName = 'AWS::EC2::Instance'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Tenancy') as tenancy,
                  json_extract_path_text(Properties, 'SecurityGroups') as security_groups,
                  json_extract_path_text(Properties, 'PrivateDnsName') as private_dns_name,
                  json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                  json_extract_path_text(Properties, 'UserData') as user_data,
                  json_extract_path_text(Properties, 'BlockDeviceMappings') as block_device_mappings,
                  json_extract_path_text(Properties, 'IamInstanceProfile') as iam_instance_profile,
                  json_extract_path_text(Properties, 'Ipv6Addresses') as ipv6_addresses,
                  json_extract_path_text(Properties, 'KernelId') as kernel_id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'EbsOptimized') as ebs_optimized,
                  json_extract_path_text(Properties, 'PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
                  json_extract_path_text(Properties, 'ElasticGpuSpecifications') as elastic_gpu_specifications,
                  json_extract_path_text(Properties, 'ElasticInferenceAccelerators') as elastic_inference_accelerators,
                  json_extract_path_text(Properties, 'Volumes') as volumes,
                  json_extract_path_text(Properties, 'PrivateIp') as private_ip,
                  json_extract_path_text(Properties, 'Ipv6AddressCount') as ipv6_address_count,
                  json_extract_path_text(Properties, 'LaunchTemplate') as launch_template,
                  json_extract_path_text(Properties, 'EnclaveOptions') as enclave_options,
                  json_extract_path_text(Properties, 'NetworkInterfaces') as network_interfaces,
                  json_extract_path_text(Properties, 'ImageId') as image_id,
                  json_extract_path_text(Properties, 'InstanceType') as instance_type,
                  json_extract_path_text(Properties, 'Monitoring') as monitoring,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'AdditionalInfo') as additional_info,
                  json_extract_path_text(Properties, 'HibernationOptions') as hibernation_options,
                  json_extract_path_text(Properties, 'LicenseSpecifications') as license_specifications,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'PublicIp') as public_ip,
                  json_extract_path_text(Properties, 'InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
                  json_extract_path_text(Properties, 'CpuOptions') as cpu_options,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'PrivateDnsNameOptions') as private_dns_name_options,
                  json_extract_path_text(Properties, 'HostId') as host_id,
                  json_extract_path_text(Properties, 'HostResourceGroupArn') as host_resource_group_arn,
                  json_extract_path_text(Properties, 'PublicDnsName') as public_dns_name,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'DisableApiTermination') as disable_api_termination,
                  json_extract_path_text(Properties, 'KeyName') as key_name,
                  json_extract_path_text(Properties, 'RamdiskId') as ramdisk_id,
                  json_extract_path_text(Properties, 'SourceDestCheck') as source_dest_check,
                  json_extract_path_text(Properties, 'PlacementGroupName') as placement_group_name,
                  json_extract_path_text(Properties, 'SsmAssociations') as ssm_associations,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Affinity') as affinity,
                  json_extract_path_text(Properties, 'CreditSpecification') as credit_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Instance'
                  AND data__Identifier = '<InstanceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Tenancy') as tenancy,
                    json_extract_path_text(detail.Properties, 'SecurityGroups') as security_groups,
                    json_extract_path_text(detail.Properties, 'PrivateDnsName') as private_dns_name,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                    json_extract_path_text(detail.Properties, 'UserData') as user_data,
                    json_extract_path_text(detail.Properties, 'BlockDeviceMappings') as block_device_mappings,
                    json_extract_path_text(detail.Properties, 'IamInstanceProfile') as iam_instance_profile,
                    json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                    json_extract_path_text(detail.Properties, 'KernelId') as kernel_id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'EbsOptimized') as ebs_optimized,
                    json_extract_path_text(detail.Properties, 'PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
                    json_extract_path_text(detail.Properties, 'ElasticGpuSpecifications') as elastic_gpu_specifications,
                    json_extract_path_text(detail.Properties, 'ElasticInferenceAccelerators') as elastic_inference_accelerators,
                    json_extract_path_text(detail.Properties, 'Volumes') as volumes,
                    json_extract_path_text(detail.Properties, 'PrivateIp') as private_ip,
                    json_extract_path_text(detail.Properties, 'Ipv6AddressCount') as ipv6_address_count,
                    json_extract_path_text(detail.Properties, 'LaunchTemplate') as launch_template,
                    json_extract_path_text(detail.Properties, 'EnclaveOptions') as enclave_options,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaces') as network_interfaces,
                    json_extract_path_text(detail.Properties, 'ImageId') as image_id,
                    json_extract_path_text(detail.Properties, 'InstanceType') as instance_type,
                    json_extract_path_text(detail.Properties, 'Monitoring') as monitoring,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'AdditionalInfo') as additional_info,
                    json_extract_path_text(detail.Properties, 'HibernationOptions') as hibernation_options,
                    json_extract_path_text(detail.Properties, 'LicenseSpecifications') as license_specifications,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'PublicIp') as public_ip,
                    json_extract_path_text(detail.Properties, 'InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
                    json_extract_path_text(detail.Properties, 'CpuOptions') as cpu_options,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'PrivateDnsNameOptions') as private_dns_name_options,
                    json_extract_path_text(detail.Properties, 'HostId') as host_id,
                    json_extract_path_text(detail.Properties, 'HostResourceGroupArn') as host_resource_group_arn,
                    json_extract_path_text(detail.Properties, 'PublicDnsName') as public_dns_name,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'DisableApiTermination') as disable_api_termination,
                    json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                    json_extract_path_text(detail.Properties, 'RamdiskId') as ramdisk_id,
                    json_extract_path_text(detail.Properties, 'SourceDestCheck') as source_dest_check,
                    json_extract_path_text(detail.Properties, 'PlacementGroupName') as placement_group_name,
                    json_extract_path_text(detail.Properties, 'SsmAssociations') as ssm_associations,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Affinity') as affinity,
                    json_extract_path_text(detail.Properties, 'CreditSpecification') as credit_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::Instance'
                    AND detail.data__TypeName = 'AWS::EC2::Instance'
                    AND listing.region = 'us-east-1'
    capacity_reservations:
      name: capacity_reservations
      id: aws.ec2.capacity_reservations
      x-cfn-schema-name: CapacityReservation
      x-cfn-type-name: AWS::EC2::CapacityReservation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CapacityReservation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/capacity_reservations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(Properties, '$.EndDateType') as end_date_type,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.TotalInstanceCount') as total_instance_count,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.EbsOptimized') as ebs_optimized,
              JSON_EXTRACT(Properties, '$.OutPostArn') as out_post_arn,
              JSON_EXTRACT(Properties, '$.InstanceCount') as instance_count,
              JSON_EXTRACT(Properties, '$.PlacementGroupArn') as placement_group_arn,
              JSON_EXTRACT(Properties, '$.AvailableInstanceCount') as available_instance_count,
              JSON_EXTRACT(Properties, '$.InstancePlatform') as instance_platform,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(Properties, '$.InstanceMatchCriteria') as instance_match_criteria,
              JSON_EXTRACT(Properties, '$.UnusedReservationBillingOwnerId') as unused_reservation_billing_owner_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Tenancy') as tenancy,
                JSON_EXTRACT(detail.Properties, '$.EndDateType') as end_date_type,
                JSON_EXTRACT(detail.Properties, '$.TagSpecifications') as tag_specifications,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.TotalInstanceCount') as total_instance_count,
                JSON_EXTRACT(detail.Properties, '$.EndDate') as end_date,
                JSON_EXTRACT(detail.Properties, '$.EbsOptimized') as ebs_optimized,
                JSON_EXTRACT(detail.Properties, '$.OutPostArn') as out_post_arn,
                JSON_EXTRACT(detail.Properties, '$.InstanceCount') as instance_count,
                JSON_EXTRACT(detail.Properties, '$.PlacementGroupArn') as placement_group_arn,
                JSON_EXTRACT(detail.Properties, '$.AvailableInstanceCount') as available_instance_count,
                JSON_EXTRACT(detail.Properties, '$.InstancePlatform') as instance_platform,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.InstanceType') as instance_type,
                JSON_EXTRACT(detail.Properties, '$.EphemeralStorage') as ephemeral_storage,
                JSON_EXTRACT(detail.Properties, '$.InstanceMatchCriteria') as instance_match_criteria,
                JSON_EXTRACT(detail.Properties, '$.UnusedReservationBillingOwnerId') as unused_reservation_billing_owner_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::CapacityReservation'
                AND detail.data__TypeName = 'AWS::EC2::CapacityReservation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Tenancy') as tenancy,
                  json_extract_path_text(Properties, 'EndDateType') as end_date_type,
                  json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'TotalInstanceCount') as total_instance_count,
                  json_extract_path_text(Properties, 'EndDate') as end_date,
                  json_extract_path_text(Properties, 'EbsOptimized') as ebs_optimized,
                  json_extract_path_text(Properties, 'OutPostArn') as out_post_arn,
                  json_extract_path_text(Properties, 'InstanceCount') as instance_count,
                  json_extract_path_text(Properties, 'PlacementGroupArn') as placement_group_arn,
                  json_extract_path_text(Properties, 'AvailableInstanceCount') as available_instance_count,
                  json_extract_path_text(Properties, 'InstancePlatform') as instance_platform,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'InstanceType') as instance_type,
                  json_extract_path_text(Properties, 'EphemeralStorage') as ephemeral_storage,
                  json_extract_path_text(Properties, 'InstanceMatchCriteria') as instance_match_criteria,
                  json_extract_path_text(Properties, 'UnusedReservationBillingOwnerId') as unused_reservation_billing_owner_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Tenancy') as tenancy,
                    json_extract_path_text(detail.Properties, 'EndDateType') as end_date_type,
                    json_extract_path_text(detail.Properties, 'TagSpecifications') as tag_specifications,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'TotalInstanceCount') as total_instance_count,
                    json_extract_path_text(detail.Properties, 'EndDate') as end_date,
                    json_extract_path_text(detail.Properties, 'EbsOptimized') as ebs_optimized,
                    json_extract_path_text(detail.Properties, 'OutPostArn') as out_post_arn,
                    json_extract_path_text(detail.Properties, 'InstanceCount') as instance_count,
                    json_extract_path_text(detail.Properties, 'PlacementGroupArn') as placement_group_arn,
                    json_extract_path_text(detail.Properties, 'AvailableInstanceCount') as available_instance_count,
                    json_extract_path_text(detail.Properties, 'InstancePlatform') as instance_platform,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'InstanceType') as instance_type,
                    json_extract_path_text(detail.Properties, 'EphemeralStorage') as ephemeral_storage,
                    json_extract_path_text(detail.Properties, 'InstanceMatchCriteria') as instance_match_criteria,
                    json_extract_path_text(detail.Properties, 'UnusedReservationBillingOwnerId') as unused_reservation_billing_owner_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::CapacityReservation'
                    AND detail.data__TypeName = 'AWS::EC2::CapacityReservation'
                    AND listing.region = 'us-east-1'
    capacity_reservations_list_only:
      name: capacity_reservations_list_only
      id: aws.ec2.capacity_reservations_list_only
      x-cfn-schema-name: CapacityReservation
      x-cfn-type-name: AWS::EC2::CapacityReservation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
                AND region = 'us-east-1'
    capacity_reservation_fleets:
      name: capacity_reservation_fleets
      id: aws.ec2.capacity_reservation_fleets
      x-cfn-schema-name: CapacityReservationFleet
      x-cfn-type-name: AWS::EC2::CapacityReservationFleet
      x-identifiers:
        - CapacityReservationFleetId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CapacityReservationFleet&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservationFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservationFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CapacityReservationFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/capacity_reservation_fleets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/capacity_reservation_fleets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/capacity_reservation_fleets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllocationStrategy') as allocation_strategy,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.InstanceTypeSpecifications') as instance_type_specifications,
              JSON_EXTRACT(Properties, '$.TotalTargetCapacity') as total_target_capacity,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.InstanceMatchCriteria') as instance_match_criteria,
              JSON_EXTRACT(Properties, '$.CapacityReservationFleetId') as capacity_reservation_fleet_id,
              JSON_EXTRACT(Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(Properties, '$.RemoveEndDate') as remove_end_date,
              JSON_EXTRACT(Properties, '$.NoRemoveEndDate') as no_remove_end_date
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
              AND data__Identifier = '<CapacityReservationFleetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AllocationStrategy') as allocation_strategy,
                JSON_EXTRACT(detail.Properties, '$.TagSpecifications') as tag_specifications,
                JSON_EXTRACT(detail.Properties, '$.InstanceTypeSpecifications') as instance_type_specifications,
                JSON_EXTRACT(detail.Properties, '$.TotalTargetCapacity') as total_target_capacity,
                JSON_EXTRACT(detail.Properties, '$.EndDate') as end_date,
                JSON_EXTRACT(detail.Properties, '$.InstanceMatchCriteria') as instance_match_criteria,
                JSON_EXTRACT(detail.Properties, '$.CapacityReservationFleetId') as capacity_reservation_fleet_id,
                JSON_EXTRACT(detail.Properties, '$.Tenancy') as tenancy,
                JSON_EXTRACT(detail.Properties, '$.RemoveEndDate') as remove_end_date,
                JSON_EXTRACT(detail.Properties, '$.NoRemoveEndDate') as no_remove_end_date
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                AND detail.data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AllocationStrategy') as allocation_strategy,
                  json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                  json_extract_path_text(Properties, 'InstanceTypeSpecifications') as instance_type_specifications,
                  json_extract_path_text(Properties, 'TotalTargetCapacity') as total_target_capacity,
                  json_extract_path_text(Properties, 'EndDate') as end_date,
                  json_extract_path_text(Properties, 'InstanceMatchCriteria') as instance_match_criteria,
                  json_extract_path_text(Properties, 'CapacityReservationFleetId') as capacity_reservation_fleet_id,
                  json_extract_path_text(Properties, 'Tenancy') as tenancy,
                  json_extract_path_text(Properties, 'RemoveEndDate') as remove_end_date,
                  json_extract_path_text(Properties, 'NoRemoveEndDate') as no_remove_end_date
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                  AND data__Identifier = '<CapacityReservationFleetId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AllocationStrategy') as allocation_strategy,
                    json_extract_path_text(detail.Properties, 'TagSpecifications') as tag_specifications,
                    json_extract_path_text(detail.Properties, 'InstanceTypeSpecifications') as instance_type_specifications,
                    json_extract_path_text(detail.Properties, 'TotalTargetCapacity') as total_target_capacity,
                    json_extract_path_text(detail.Properties, 'EndDate') as end_date,
                    json_extract_path_text(detail.Properties, 'InstanceMatchCriteria') as instance_match_criteria,
                    json_extract_path_text(detail.Properties, 'CapacityReservationFleetId') as capacity_reservation_fleet_id,
                    json_extract_path_text(detail.Properties, 'Tenancy') as tenancy,
                    json_extract_path_text(detail.Properties, 'RemoveEndDate') as remove_end_date,
                    json_extract_path_text(detail.Properties, 'NoRemoveEndDate') as no_remove_end_date
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                    AND detail.data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                    AND listing.region = 'us-east-1'
    capacity_reservation_fleets_list_only:
      name: capacity_reservation_fleets_list_only
      id: aws.ec2.capacity_reservation_fleets_list_only
      x-cfn-schema-name: CapacityReservationFleet
      x-cfn-type-name: AWS::EC2::CapacityReservationFleet
      x-identifiers:
        - CapacityReservationFleetId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CapacityReservationFleetId') as capacity_reservation_fleet_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CapacityReservationFleetId') as capacity_reservation_fleet_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                AND region = 'us-east-1'
    carrier_gateways:
      name: carrier_gateways
      id: aws.ec2.carrier_gateways
      x-cfn-schema-name: CarrierGateway
      x-cfn-type-name: AWS::EC2::CarrierGateway
      x-identifiers:
        - CarrierGatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CarrierGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CarrierGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CarrierGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CarrierGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/carrier_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/carrier_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/carrier_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
              AND data__Identifier = '<CarrierGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CarrierGatewayId') as carrier_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::CarrierGateway'
                AND detail.data__TypeName = 'AWS::EC2::CarrierGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
                  AND data__Identifier = '<CarrierGatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CarrierGatewayId') as carrier_gateway_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::CarrierGateway'
                    AND detail.data__TypeName = 'AWS::EC2::CarrierGateway'
                    AND listing.region = 'us-east-1'
    carrier_gateways_list_only:
      name: carrier_gateways_list_only
      id: aws.ec2.carrier_gateways_list_only
      x-cfn-schema-name: CarrierGateway
      x-cfn-type-name: AWS::EC2::CarrierGateway
      x-identifiers:
        - CarrierGatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
                AND region = 'us-east-1'
    carrier_gateway_tags:
      name: carrier_gateway_tags
      id: aws.ec2.carrier_gateway_tags
      x-cfn-schema-name: CarrierGateway
      x-cfn-type-name: AWS::EC2::CarrierGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CarrierGatewayId') as carrier_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::CarrierGateway'
              AND detail.data__TypeName = 'AWS::EC2::CarrierGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CarrierGatewayId') as carrier_gateway_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::CarrierGateway'
                AND detail.data__TypeName = 'AWS::EC2::CarrierGateway'
                AND listing.region = 'us-east-1'
    customer_gateways:
      name: customer_gateways
      id: aws.ec2.customer_gateways
      x-cfn-schema-name: CustomerGateway
      x-cfn-type-name: AWS::EC2::CustomerGateway
      x-identifiers:
        - CustomerGatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CustomerGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CustomerGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CustomerGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::CustomerGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/customer_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/customer_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/customer_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(Properties, '$.IpAddress') as ip_address,
              JSON_EXTRACT(Properties, '$.BgpAsnExtended') as bgp_asn_extended,
              JSON_EXTRACT(Properties, '$.BgpAsn') as bgp_asn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.DeviceName') as device_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
              AND data__Identifier = '<CustomerGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.CustomerGatewayId') as customer_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.IpAddress') as ip_address,
                JSON_EXTRACT(detail.Properties, '$.BgpAsnExtended') as bgp_asn_extended,
                JSON_EXTRACT(detail.Properties, '$.BgpAsn') as bgp_asn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.DeviceName') as device_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::CustomerGateway'
                AND detail.data__TypeName = 'AWS::EC2::CustomerGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id,
                  json_extract_path_text(Properties, 'IpAddress') as ip_address,
                  json_extract_path_text(Properties, 'BgpAsnExtended') as bgp_asn_extended,
                  json_extract_path_text(Properties, 'BgpAsn') as bgp_asn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'DeviceName') as device_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
                  AND data__Identifier = '<CustomerGatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'CustomerGatewayId') as customer_gateway_id,
                    json_extract_path_text(detail.Properties, 'IpAddress') as ip_address,
                    json_extract_path_text(detail.Properties, 'BgpAsnExtended') as bgp_asn_extended,
                    json_extract_path_text(detail.Properties, 'BgpAsn') as bgp_asn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'DeviceName') as device_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::CustomerGateway'
                    AND detail.data__TypeName = 'AWS::EC2::CustomerGateway'
                    AND listing.region = 'us-east-1'
    customer_gateways_list_only:
      name: customer_gateways_list_only
      id: aws.ec2.customer_gateways_list_only
      x-cfn-schema-name: CustomerGateway
      x-cfn-type-name: AWS::EC2::CustomerGateway
      x-identifiers:
        - CustomerGatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
                AND region = 'us-east-1'
    customer_gateway_tags:
      name: customer_gateway_tags
      id: aws.ec2.customer_gateway_tags
      x-cfn-schema-name: CustomerGateway
      x-cfn-type-name: AWS::EC2::CustomerGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.IpAddress') as ip_address,
              JSON_EXTRACT(detail.Properties, '$.BgpAsnExtended') as bgp_asn_extended,
              JSON_EXTRACT(detail.Properties, '$.BgpAsn') as bgp_asn,
              JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.DeviceName') as device_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::CustomerGateway'
              AND detail.data__TypeName = 'AWS::EC2::CustomerGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'CustomerGatewayId') as customer_gateway_id,
                json_extract_path_text(detail.Properties, 'IpAddress') as ip_address,
                json_extract_path_text(detail.Properties, 'BgpAsnExtended') as bgp_asn_extended,
                json_extract_path_text(detail.Properties, 'BgpAsn') as bgp_asn,
                json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(detail.Properties, 'DeviceName') as device_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::CustomerGateway'
                AND detail.data__TypeName = 'AWS::EC2::CustomerGateway'
                AND listing.region = 'us-east-1'
    dhcp_options:
      name: dhcp_options
      id: aws.ec2.dhcp_options
      x-cfn-schema-name: DHCPOptions
      x-cfn-type-name: AWS::EC2::DHCPOptions
      x-identifiers:
        - DhcpOptionsId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DHCPOptions&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::DHCPOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::DHCPOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::DHCPOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/dhcp_options/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/dhcp_options/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/dhcp_options/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DomainNameServers') as domain_name_servers,
              JSON_EXTRACT(Properties, '$.NetbiosNameServers') as netbios_name_servers,
              JSON_EXTRACT(Properties, '$.NetbiosNodeType') as netbios_node_type,
              JSON_EXTRACT(Properties, '$.NtpServers') as ntp_servers,
              JSON_EXTRACT(Properties, '$.Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
              AND data__Identifier = '<DhcpOptionsId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DhcpOptionsId') as dhcp_options_id,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.DomainNameServers') as domain_name_servers,
                JSON_EXTRACT(detail.Properties, '$.NetbiosNameServers') as netbios_name_servers,
                JSON_EXTRACT(detail.Properties, '$.NetbiosNodeType') as netbios_node_type,
                JSON_EXTRACT(detail.Properties, '$.NtpServers') as ntp_servers,
                JSON_EXTRACT(detail.Properties, '$.Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::DHCPOptions'
                AND detail.data__TypeName = 'AWS::EC2::DHCPOptions'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'DomainNameServers') as domain_name_servers,
                  json_extract_path_text(Properties, 'NetbiosNameServers') as netbios_name_servers,
                  json_extract_path_text(Properties, 'NetbiosNodeType') as netbios_node_type,
                  json_extract_path_text(Properties, 'NtpServers') as ntp_servers,
                  json_extract_path_text(Properties, 'Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
                  AND data__Identifier = '<DhcpOptionsId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DhcpOptionsId') as dhcp_options_id,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'DomainNameServers') as domain_name_servers,
                    json_extract_path_text(detail.Properties, 'NetbiosNameServers') as netbios_name_servers,
                    json_extract_path_text(detail.Properties, 'NetbiosNodeType') as netbios_node_type,
                    json_extract_path_text(detail.Properties, 'NtpServers') as ntp_servers,
                    json_extract_path_text(detail.Properties, 'Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::DHCPOptions'
                    AND detail.data__TypeName = 'AWS::EC2::DHCPOptions'
                    AND listing.region = 'us-east-1'
    dhcp_options_list_only:
      name: dhcp_options_list_only
      id: aws.ec2.dhcp_options_list_only
      x-cfn-schema-name: DHCPOptions
      x-cfn-type-name: AWS::EC2::DHCPOptions
      x-identifiers:
        - DhcpOptionsId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
                AND region = 'us-east-1'
    dhcp_options_tags:
      name: dhcp_options_tags
      id: aws.ec2.dhcp_options_tags
      x-cfn-schema-name: DHCPOptions
      x-cfn-type-name: AWS::EC2::DHCPOptions
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.DomainNameServers') as domain_name_servers,
              JSON_EXTRACT(detail.Properties, '$.NetbiosNameServers') as netbios_name_servers,
              JSON_EXTRACT(detail.Properties, '$.NetbiosNodeType') as netbios_node_type,
              JSON_EXTRACT(detail.Properties, '$.NtpServers') as ntp_servers,
              JSON_EXTRACT(detail.Properties, '$.Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::DHCPOptions'
              AND detail.data__TypeName = 'AWS::EC2::DHCPOptions'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DhcpOptionsId') as dhcp_options_id,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'DomainNameServers') as domain_name_servers,
                json_extract_path_text(detail.Properties, 'NetbiosNameServers') as netbios_name_servers,
                json_extract_path_text(detail.Properties, 'NetbiosNodeType') as netbios_node_type,
                json_extract_path_text(detail.Properties, 'NtpServers') as ntp_servers,
                json_extract_path_text(detail.Properties, 'Ipv6AddressPreferredLeaseTime') as ipv6_address_preferred_lease_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::DHCPOptions'
                AND detail.data__TypeName = 'AWS::EC2::DHCPOptions'
                AND listing.region = 'us-east-1'
    ec2fleets:
      name: ec2fleets
      id: aws.ec2.ec2fleets
      x-cfn-schema-name: EC2Fleet
      x-cfn-type-name: AWS::EC2::EC2Fleet
      x-identifiers:
        - FleetId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EC2Fleet&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EC2Fleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EC2Fleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EC2Fleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ec2fleets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ec2fleets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ec2fleets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Context') as context,
              JSON_EXTRACT(Properties, '$.TargetCapacitySpecification') as target_capacity_specification,
              JSON_EXTRACT(Properties, '$.OnDemandOptions') as on_demand_options,
              JSON_EXTRACT(Properties, '$.ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.SpotOptions') as spot_options,
              JSON_EXTRACT(Properties, '$.LaunchTemplateConfigs') as launch_template_configs,
              JSON_EXTRACT(Properties, '$.TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
              JSON_EXTRACT(Properties, '$.ValidUntil') as valid_until,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.ValidFrom') as valid_from,
              JSON_EXTRACT(Properties, '$.ReplaceUnhealthyInstances') as replace_unhealthy_instances
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
              AND data__Identifier = '<FleetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Context') as context,
                JSON_EXTRACT(detail.Properties, '$.TargetCapacitySpecification') as target_capacity_specification,
                JSON_EXTRACT(detail.Properties, '$.OnDemandOptions') as on_demand_options,
                JSON_EXTRACT(detail.Properties, '$.ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
                JSON_EXTRACT(detail.Properties, '$.TagSpecifications') as tag_specifications,
                JSON_EXTRACT(detail.Properties, '$.SpotOptions') as spot_options,
                JSON_EXTRACT(detail.Properties, '$.LaunchTemplateConfigs') as launch_template_configs,
                JSON_EXTRACT(detail.Properties, '$.TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
                JSON_EXTRACT(detail.Properties, '$.ValidUntil') as valid_until,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.FleetId') as fleet_id,
                JSON_EXTRACT(detail.Properties, '$.ValidFrom') as valid_from,
                JSON_EXTRACT(detail.Properties, '$.ReplaceUnhealthyInstances') as replace_unhealthy_instances
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::EC2Fleet'
                AND detail.data__TypeName = 'AWS::EC2::EC2Fleet'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Context') as context,
                  json_extract_path_text(Properties, 'TargetCapacitySpecification') as target_capacity_specification,
                  json_extract_path_text(Properties, 'OnDemandOptions') as on_demand_options,
                  json_extract_path_text(Properties, 'ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
                  json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                  json_extract_path_text(Properties, 'SpotOptions') as spot_options,
                  json_extract_path_text(Properties, 'LaunchTemplateConfigs') as launch_template_configs,
                  json_extract_path_text(Properties, 'TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
                  json_extract_path_text(Properties, 'ValidUntil') as valid_until,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'FleetId') as fleet_id,
                  json_extract_path_text(Properties, 'ValidFrom') as valid_from,
                  json_extract_path_text(Properties, 'ReplaceUnhealthyInstances') as replace_unhealthy_instances
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
                  AND data__Identifier = '<FleetId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Context') as context,
                    json_extract_path_text(detail.Properties, 'TargetCapacitySpecification') as target_capacity_specification,
                    json_extract_path_text(detail.Properties, 'OnDemandOptions') as on_demand_options,
                    json_extract_path_text(detail.Properties, 'ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
                    json_extract_path_text(detail.Properties, 'TagSpecifications') as tag_specifications,
                    json_extract_path_text(detail.Properties, 'SpotOptions') as spot_options,
                    json_extract_path_text(detail.Properties, 'LaunchTemplateConfigs') as launch_template_configs,
                    json_extract_path_text(detail.Properties, 'TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
                    json_extract_path_text(detail.Properties, 'ValidUntil') as valid_until,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'FleetId') as fleet_id,
                    json_extract_path_text(detail.Properties, 'ValidFrom') as valid_from,
                    json_extract_path_text(detail.Properties, 'ReplaceUnhealthyInstances') as replace_unhealthy_instances
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::EC2Fleet'
                    AND detail.data__TypeName = 'AWS::EC2::EC2Fleet'
                    AND listing.region = 'us-east-1'
    ec2fleets_list_only:
      name: ec2fleets_list_only
      id: aws.ec2.ec2fleets_list_only
      x-cfn-schema-name: EC2Fleet
      x-cfn-type-name: AWS::EC2::EC2Fleet
      x-identifiers:
        - FleetId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FleetId') as fleet_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
                AND region = 'us-east-1'
    egress_only_internet_gateways:
      name: egress_only_internet_gateways
      id: aws.ec2.egress_only_internet_gateways
      x-cfn-schema-name: EgressOnlyInternetGateway
      x-cfn-type-name: AWS::EC2::EgressOnlyInternetGateway
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EgressOnlyInternetGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EgressOnlyInternetGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EgressOnlyInternetGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/egress_only_internet_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/egress_only_internet_gateways/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                AND detail.data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                    AND detail.data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                    AND listing.region = 'us-east-1'
    egress_only_internet_gateways_list_only:
      name: egress_only_internet_gateways_list_only
      id: aws.ec2.egress_only_internet_gateways_list_only
      x-cfn-schema-name: EgressOnlyInternetGateway
      x-cfn-type-name: AWS::EC2::EgressOnlyInternetGateway
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                AND region = 'us-east-1'
    eips:
      name: eips
      id: aws.ec2.eips
      x-cfn-schema-name: EIP
      x-cfn-type-name: AWS::EC2::EIP
      x-identifiers:
        - PublicIp
        - AllocationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EIP&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EIP"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EIP"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EIP"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/eips/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/eips/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/eips/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.NetworkBorderGroup') as network_border_group,
              JSON_EXTRACT(Properties, '$.TransferAddress') as transfer_address,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.PublicIpv4Pool') as public_ipv4_pool,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Address') as address,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIP'
              AND data__Identifier = '<PublicIp>|<AllocationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PublicIp') as public_ip,
                JSON_EXTRACT(detail.Properties, '$.AllocationId') as allocation_id,
                JSON_EXTRACT(detail.Properties, '$.Domain') as domain,
                JSON_EXTRACT(detail.Properties, '$.NetworkBorderGroup') as network_border_group,
                JSON_EXTRACT(detail.Properties, '$.TransferAddress') as transfer_address,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.PublicIpv4Pool') as public_ipv4_pool,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Address') as address,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::EIP'
                AND detail.data__TypeName = 'AWS::EC2::EIP'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PublicIp') as public_ip,
                  json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                  json_extract_path_text(Properties, 'Domain') as domain,
                  json_extract_path_text(Properties, 'NetworkBorderGroup') as network_border_group,
                  json_extract_path_text(Properties, 'TransferAddress') as transfer_address,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'PublicIpv4Pool') as public_ipv4_pool,
                  json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                  json_extract_path_text(Properties, 'Address') as address,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIP'
                  AND data__Identifier = '<PublicIp>|<AllocationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PublicIp') as public_ip,
                    json_extract_path_text(detail.Properties, 'AllocationId') as allocation_id,
                    json_extract_path_text(detail.Properties, 'Domain') as domain,
                    json_extract_path_text(detail.Properties, 'NetworkBorderGroup') as network_border_group,
                    json_extract_path_text(detail.Properties, 'TransferAddress') as transfer_address,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'PublicIpv4Pool') as public_ipv4_pool,
                    json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Address') as address,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::EIP'
                    AND detail.data__TypeName = 'AWS::EC2::EIP'
                    AND listing.region = 'us-east-1'
    eips_list_only:
      name: eips_list_only
      id: aws.ec2.eips_list_only
      x-cfn-schema-name: EIP
      x-cfn-type-name: AWS::EC2::EIP
      x-identifiers:
        - PublicIp
        - AllocationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIP'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PublicIp') as public_ip,
                json_extract_path_text(Properties, 'AllocationId') as allocation_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIP'
                AND region = 'us-east-1'
    eip_tags:
      name: eip_tags
      id: aws.ec2.eip_tags
      x-cfn-schema-name: EIP
      x-cfn-type-name: AWS::EC2::EIP
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(detail.Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(detail.Properties, '$.Domain') as domain,
              JSON_EXTRACT(detail.Properties, '$.NetworkBorderGroup') as network_border_group,
              JSON_EXTRACT(detail.Properties, '$.TransferAddress') as transfer_address,
              JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(detail.Properties, '$.PublicIpv4Pool') as public_ipv4_pool,
              JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.Address') as address
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::EIP'
              AND detail.data__TypeName = 'AWS::EC2::EIP'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PublicIp') as public_ip,
                json_extract_path_text(detail.Properties, 'AllocationId') as allocation_id,
                json_extract_path_text(detail.Properties, 'Domain') as domain,
                json_extract_path_text(detail.Properties, 'NetworkBorderGroup') as network_border_group,
                json_extract_path_text(detail.Properties, 'TransferAddress') as transfer_address,
                json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                json_extract_path_text(detail.Properties, 'PublicIpv4Pool') as public_ipv4_pool,
                json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(detail.Properties, 'Address') as address
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::EIP'
                AND detail.data__TypeName = 'AWS::EC2::EIP'
                AND listing.region = 'us-east-1'
    eip_associations:
      name: eip_associations
      id: aws.ec2.eip_associations
      x-cfn-schema-name: EIPAssociation
      x-cfn-type-name: AWS::EC2::EIPAssociation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EIPAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EIPAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EIPAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/eip_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/eip_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.EIP') as e_ip
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.AllocationId') as allocation_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.EIP') as e_ip
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::EIPAssociation'
                AND detail.data__TypeName = 'AWS::EC2::EIPAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                  json_extract_path_text(Properties, 'EIP') as e_ip
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'AllocationId') as allocation_id,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                    json_extract_path_text(detail.Properties, 'EIP') as e_ip
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::EIPAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::EIPAssociation'
                    AND listing.region = 'us-east-1'
    eip_associations_list_only:
      name: eip_associations_list_only
      id: aws.ec2.eip_associations_list_only
      x-cfn-schema-name: EIPAssociation
      x-cfn-type-name: AWS::EC2::EIPAssociation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
                AND region = 'us-east-1'
    enclave_certificate_iam_role_associations:
      name: enclave_certificate_iam_role_associations
      id: aws.ec2.enclave_certificate_iam_role_associations
      x-cfn-schema-name: EnclaveCertificateIamRoleAssociation
      x-cfn-type-name: AWS::EC2::EnclaveCertificateIamRoleAssociation
      x-identifiers:
        - CertificateArn
        - RoleArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EnclaveCertificateIamRoleAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EnclaveCertificateIamRoleAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::EnclaveCertificateIamRoleAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/enclave_certificate_iam_role_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/enclave_certificate_iam_role_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.CertificateS3BucketName') as certificate_s3_bucket_name,
              JSON_EXTRACT(Properties, '$.CertificateS3ObjectKey') as certificate_s3_object_key,
              JSON_EXTRACT(Properties, '$.EncryptionKmsKeyId') as encryption_kms_key_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
              AND data__Identifier = '<CertificateArn>|<RoleArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.CertificateS3BucketName') as certificate_s3_bucket_name,
                JSON_EXTRACT(detail.Properties, '$.CertificateS3ObjectKey') as certificate_s3_object_key,
                JSON_EXTRACT(detail.Properties, '$.EncryptionKmsKeyId') as encryption_kms_key_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                AND detail.data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'CertificateS3BucketName') as certificate_s3_bucket_name,
                  json_extract_path_text(Properties, 'CertificateS3ObjectKey') as certificate_s3_object_key,
                  json_extract_path_text(Properties, 'EncryptionKmsKeyId') as encryption_kms_key_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                  AND data__Identifier = '<CertificateArn>|<RoleArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'CertificateS3BucketName') as certificate_s3_bucket_name,
                    json_extract_path_text(detail.Properties, 'CertificateS3ObjectKey') as certificate_s3_object_key,
                    json_extract_path_text(detail.Properties, 'EncryptionKmsKeyId') as encryption_kms_key_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                    AND listing.region = 'us-east-1'
    enclave_certificate_iam_role_associations_list_only:
      name: enclave_certificate_iam_role_associations_list_only
      id: aws.ec2.enclave_certificate_iam_role_associations_list_only
      x-cfn-schema-name: EnclaveCertificateIamRoleAssociation
      x-cfn-type-name: AWS::EC2::EnclaveCertificateIamRoleAssociation
      x-identifiers:
        - CertificateArn
        - RoleArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'RoleArn') as role_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                AND region = 'us-east-1'
    flow_logs:
      name: flow_logs
      id: aws.ec2.flow_logs
      x-cfn-schema-name: FlowLog
      x-cfn-type-name: AWS::EC2::FlowLog
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__FlowLog&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::FlowLog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::FlowLog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::FlowLog"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/flow_logs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/flow_logs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/flow_logs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DeliverCrossAccountRole') as deliver_cross_account_role,
              JSON_EXTRACT(Properties, '$.DeliverLogsPermissionArn') as deliver_logs_permission_arn,
              JSON_EXTRACT(Properties, '$.LogDestination') as log_destination,
              JSON_EXTRACT(Properties, '$.LogDestinationType') as log_destination_type,
              JSON_EXTRACT(Properties, '$.LogFormat') as log_format,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.MaxAggregationInterval') as max_aggregation_interval,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrafficType') as traffic_type,
              JSON_EXTRACT(Properties, '$.DestinationOptions') as destination_options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::FlowLog'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.DeliverCrossAccountRole') as deliver_cross_account_role,
                JSON_EXTRACT(detail.Properties, '$.DeliverLogsPermissionArn') as deliver_logs_permission_arn,
                JSON_EXTRACT(detail.Properties, '$.LogDestination') as log_destination,
                JSON_EXTRACT(detail.Properties, '$.LogDestinationType') as log_destination_type,
                JSON_EXTRACT(detail.Properties, '$.LogFormat') as log_format,
                JSON_EXTRACT(detail.Properties, '$.LogGroupName') as log_group_name,
                JSON_EXTRACT(detail.Properties, '$.MaxAggregationInterval') as max_aggregation_interval,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TrafficType') as traffic_type,
                JSON_EXTRACT(detail.Properties, '$.DestinationOptions') as destination_options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::FlowLog'
                AND detail.data__TypeName = 'AWS::EC2::FlowLog'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'DeliverCrossAccountRole') as deliver_cross_account_role,
                  json_extract_path_text(Properties, 'DeliverLogsPermissionArn') as deliver_logs_permission_arn,
                  json_extract_path_text(Properties, 'LogDestination') as log_destination,
                  json_extract_path_text(Properties, 'LogDestinationType') as log_destination_type,
                  json_extract_path_text(Properties, 'LogFormat') as log_format,
                  json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                  json_extract_path_text(Properties, 'MaxAggregationInterval') as max_aggregation_interval,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ResourceType') as resource_type,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TrafficType') as traffic_type,
                  json_extract_path_text(Properties, 'DestinationOptions') as destination_options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::FlowLog'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'DeliverCrossAccountRole') as deliver_cross_account_role,
                    json_extract_path_text(detail.Properties, 'DeliverLogsPermissionArn') as deliver_logs_permission_arn,
                    json_extract_path_text(detail.Properties, 'LogDestination') as log_destination,
                    json_extract_path_text(detail.Properties, 'LogDestinationType') as log_destination_type,
                    json_extract_path_text(detail.Properties, 'LogFormat') as log_format,
                    json_extract_path_text(detail.Properties, 'LogGroupName') as log_group_name,
                    json_extract_path_text(detail.Properties, 'MaxAggregationInterval') as max_aggregation_interval,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TrafficType') as traffic_type,
                    json_extract_path_text(detail.Properties, 'DestinationOptions') as destination_options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::FlowLog'
                    AND detail.data__TypeName = 'AWS::EC2::FlowLog'
                    AND listing.region = 'us-east-1'
    flow_logs_list_only:
      name: flow_logs_list_only
      id: aws.ec2.flow_logs_list_only
      x-cfn-schema-name: FlowLog
      x-cfn-type-name: AWS::EC2::FlowLog
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::FlowLog'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::FlowLog'
                AND region = 'us-east-1'
    flow_log_tags:
      name: flow_log_tags
      id: aws.ec2.flow_log_tags
      x-cfn-schema-name: FlowLog
      x-cfn-type-name: AWS::EC2::FlowLog
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.DeliverCrossAccountRole') as deliver_cross_account_role,
              JSON_EXTRACT(detail.Properties, '$.DeliverLogsPermissionArn') as deliver_logs_permission_arn,
              JSON_EXTRACT(detail.Properties, '$.LogDestination') as log_destination,
              JSON_EXTRACT(detail.Properties, '$.LogDestinationType') as log_destination_type,
              JSON_EXTRACT(detail.Properties, '$.LogFormat') as log_format,
              JSON_EXTRACT(detail.Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(detail.Properties, '$.MaxAggregationInterval') as max_aggregation_interval,
              JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(detail.Properties, '$.TrafficType') as traffic_type,
              JSON_EXTRACT(detail.Properties, '$.DestinationOptions') as destination_options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::FlowLog'
              AND detail.data__TypeName = 'AWS::EC2::FlowLog'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'DeliverCrossAccountRole') as deliver_cross_account_role,
                json_extract_path_text(detail.Properties, 'DeliverLogsPermissionArn') as deliver_logs_permission_arn,
                json_extract_path_text(detail.Properties, 'LogDestination') as log_destination,
                json_extract_path_text(detail.Properties, 'LogDestinationType') as log_destination_type,
                json_extract_path_text(detail.Properties, 'LogFormat') as log_format,
                json_extract_path_text(detail.Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(detail.Properties, 'MaxAggregationInterval') as max_aggregation_interval,
                json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                json_extract_path_text(detail.Properties, 'TrafficType') as traffic_type,
                json_extract_path_text(detail.Properties, 'DestinationOptions') as destination_options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::FlowLog'
                AND detail.data__TypeName = 'AWS::EC2::FlowLog'
                AND listing.region = 'us-east-1'
    gateway_route_table_associations:
      name: gateway_route_table_associations
      id: aws.ec2.gateway_route_table_associations
      x-cfn-schema-name: GatewayRouteTableAssociation
      x-cfn-type-name: AWS::EC2::GatewayRouteTableAssociation
      x-identifiers:
        - GatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__GatewayRouteTableAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::GatewayRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::GatewayRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::GatewayRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/gateway_route_table_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/gateway_route_table_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/gateway_route_table_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::GatewayRouteTableAssociation'
              AND data__Identifier = '<GatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'GatewayId') as gateway_id,
                json_extract_path_text(Properties, 'AssociationId') as association_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::GatewayRouteTableAssociation'
                AND data__Identifier = '<GatewayId>'
                AND region = 'us-east-1'
    hosts:
      name: hosts
      id: aws.ec2.hosts
      x-cfn-schema-name: Host
      x-cfn-type-name: AWS::EC2::Host
      x-identifiers:
        - HostId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Host&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Host"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Host"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Host"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/hosts/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.HostId') as host_id,
              JSON_EXTRACT(Properties, '$.AutoPlacement') as auto_placement,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.HostRecovery') as host_recovery,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.InstanceFamily') as instance_family,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.HostMaintenance') as host_maintenance,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Host'
              AND data__Identifier = '<HostId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.HostId') as host_id,
                JSON_EXTRACT(detail.Properties, '$.AutoPlacement') as auto_placement,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.HostRecovery') as host_recovery,
                JSON_EXTRACT(detail.Properties, '$.InstanceType') as instance_type,
                JSON_EXTRACT(detail.Properties, '$.InstanceFamily') as instance_family,
                JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
                JSON_EXTRACT(detail.Properties, '$.HostMaintenance') as host_maintenance,
                JSON_EXTRACT(detail.Properties, '$.AssetId') as asset_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::Host'
                AND detail.data__TypeName = 'AWS::EC2::Host'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'HostId') as host_id,
                  json_extract_path_text(Properties, 'AutoPlacement') as auto_placement,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'HostRecovery') as host_recovery,
                  json_extract_path_text(Properties, 'InstanceType') as instance_type,
                  json_extract_path_text(Properties, 'InstanceFamily') as instance_family,
                  json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                  json_extract_path_text(Properties, 'HostMaintenance') as host_maintenance,
                  json_extract_path_text(Properties, 'AssetId') as asset_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Host'
                  AND data__Identifier = '<HostId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'HostId') as host_id,
                    json_extract_path_text(detail.Properties, 'AutoPlacement') as auto_placement,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'HostRecovery') as host_recovery,
                    json_extract_path_text(detail.Properties, 'InstanceType') as instance_type,
                    json_extract_path_text(detail.Properties, 'InstanceFamily') as instance_family,
                    json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                    json_extract_path_text(detail.Properties, 'HostMaintenance') as host_maintenance,
                    json_extract_path_text(detail.Properties, 'AssetId') as asset_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::Host'
                    AND detail.data__TypeName = 'AWS::EC2::Host'
                    AND listing.region = 'us-east-1'
    hosts_list_only:
      name: hosts_list_only
      id: aws.ec2.hosts_list_only
      x-cfn-schema-name: Host
      x-cfn-type-name: AWS::EC2::Host
      x-identifiers:
        - HostId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostId') as host_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Host'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'HostId') as host_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Host'
                AND region = 'us-east-1'
    network_interfaces:
      name: network_interfaces
      id: aws.ec2.network_interfaces
      x-cfn-schema-name: NetworkInterface
      x-cfn-type-name: AWS::EC2::NetworkInterface
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInterface&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterface"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterface"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterface"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_interfaces/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_interfaces/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_interfaces/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.PrimaryIpv6Address') as primary_ipv6_address,
              JSON_EXTRACT(Properties, '$.PrivateIpAddresses') as private_ip_addresses,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(Properties, '$.Ipv6PrefixCount') as ipv6_prefix_count,
              JSON_EXTRACT(Properties, '$.PrimaryPrivateIpAddress') as primary_private_ip_address,
              JSON_EXTRACT(Properties, '$.Ipv4Prefixes') as ipv4_prefixes,
              JSON_EXTRACT(Properties, '$.Ipv4PrefixCount') as ipv4_prefix_count,
              JSON_EXTRACT(Properties, '$.EnablePrimaryIpv6') as enable_primary_ipv6,
              JSON_EXTRACT(Properties, '$.GroupSet') as group_set,
              JSON_EXTRACT(Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(Properties, '$.Ipv6Prefixes') as ipv6_prefixes,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.SourceDestCheck') as source_dest_check,
              JSON_EXTRACT(Properties, '$.InterfaceType') as interface_type,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Ipv6AddressCount') as ipv6_address_count,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ConnectionTrackingSpecification') as connection_tracking_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.PrimaryIpv6Address') as primary_ipv6_address,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddresses') as private_ip_addresses,
                JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                JSON_EXTRACT(detail.Properties, '$.Ipv6PrefixCount') as ipv6_prefix_count,
                JSON_EXTRACT(detail.Properties, '$.PrimaryPrivateIpAddress') as primary_private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.Ipv4Prefixes') as ipv4_prefixes,
                JSON_EXTRACT(detail.Properties, '$.Ipv4PrefixCount') as ipv4_prefix_count,
                JSON_EXTRACT(detail.Properties, '$.EnablePrimaryIpv6') as enable_primary_ipv6,
                JSON_EXTRACT(detail.Properties, '$.GroupSet') as group_set,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Prefixes') as ipv6_prefixes,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.SourceDestCheck') as source_dest_check,
                JSON_EXTRACT(detail.Properties, '$.InterfaceType') as interface_type,
                JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6AddressCount') as ipv6_address_count,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.ConnectionTrackingSpecification') as connection_tracking_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterface'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInterface'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                  json_extract_path_text(Properties, 'PrimaryIpv6Address') as primary_ipv6_address,
                  json_extract_path_text(Properties, 'PrivateIpAddresses') as private_ip_addresses,
                  json_extract_path_text(Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                  json_extract_path_text(Properties, 'Ipv6PrefixCount') as ipv6_prefix_count,
                  json_extract_path_text(Properties, 'PrimaryPrivateIpAddress') as primary_private_ip_address,
                  json_extract_path_text(Properties, 'Ipv4Prefixes') as ipv4_prefixes,
                  json_extract_path_text(Properties, 'Ipv4PrefixCount') as ipv4_prefix_count,
                  json_extract_path_text(Properties, 'EnablePrimaryIpv6') as enable_primary_ipv6,
                  json_extract_path_text(Properties, 'GroupSet') as group_set,
                  json_extract_path_text(Properties, 'Ipv6Addresses') as ipv6_addresses,
                  json_extract_path_text(Properties, 'Ipv6Prefixes') as ipv6_prefixes,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'SourceDestCheck') as source_dest_check,
                  json_extract_path_text(Properties, 'InterfaceType') as interface_type,
                  json_extract_path_text(Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Ipv6AddressCount') as ipv6_address_count,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'ConnectionTrackingSpecification') as connection_tracking_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                    json_extract_path_text(detail.Properties, 'PrimaryIpv6Address') as primary_ipv6_address,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddresses') as private_ip_addresses,
                    json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                    json_extract_path_text(detail.Properties, 'Ipv6PrefixCount') as ipv6_prefix_count,
                    json_extract_path_text(detail.Properties, 'PrimaryPrivateIpAddress') as primary_private_ip_address,
                    json_extract_path_text(detail.Properties, 'Ipv4Prefixes') as ipv4_prefixes,
                    json_extract_path_text(detail.Properties, 'Ipv4PrefixCount') as ipv4_prefix_count,
                    json_extract_path_text(detail.Properties, 'EnablePrimaryIpv6') as enable_primary_ipv6,
                    json_extract_path_text(detail.Properties, 'GroupSet') as group_set,
                    json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                    json_extract_path_text(detail.Properties, 'Ipv6Prefixes') as ipv6_prefixes,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'SourceDestCheck') as source_dest_check,
                    json_extract_path_text(detail.Properties, 'InterfaceType') as interface_type,
                    json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Ipv6AddressCount') as ipv6_address_count,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'ConnectionTrackingSpecification') as connection_tracking_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterface'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInterface'
                    AND listing.region = 'us-east-1'
    network_interfaces_list_only:
      name: network_interfaces_list_only
      id: aws.ec2.network_interfaces_list_only
      x-cfn-schema-name: NetworkInterface
      x-cfn-type-name: AWS::EC2::NetworkInterface
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
                AND region = 'us-east-1'
    network_interface_tags:
      name: network_interface_tags
      id: aws.ec2.network_interface_tags
      x-cfn-schema-name: NetworkInterface
      x-cfn-type-name: AWS::EC2::NetworkInterface
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(detail.Properties, '$.PrimaryIpv6Address') as primary_ipv6_address,
              JSON_EXTRACT(detail.Properties, '$.PrivateIpAddresses') as private_ip_addresses,
              JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(detail.Properties, '$.Ipv6PrefixCount') as ipv6_prefix_count,
              JSON_EXTRACT(detail.Properties, '$.PrimaryPrivateIpAddress') as primary_private_ip_address,
              JSON_EXTRACT(detail.Properties, '$.Ipv4Prefixes') as ipv4_prefixes,
              JSON_EXTRACT(detail.Properties, '$.Ipv4PrefixCount') as ipv4_prefix_count,
              JSON_EXTRACT(detail.Properties, '$.EnablePrimaryIpv6') as enable_primary_ipv6,
              JSON_EXTRACT(detail.Properties, '$.GroupSet') as group_set,
              JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(detail.Properties, '$.Ipv6Prefixes') as ipv6_prefixes,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(detail.Properties, '$.SourceDestCheck') as source_dest_check,
              JSON_EXTRACT(detail.Properties, '$.InterfaceType') as interface_type,
              JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Ipv6AddressCount') as ipv6_address_count,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ConnectionTrackingSpecification') as connection_tracking_specification
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterface'
              AND detail.data__TypeName = 'AWS::EC2::NetworkInterface'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(detail.Properties, 'PrimaryIpv6Address') as primary_ipv6_address,
                json_extract_path_text(detail.Properties, 'PrivateIpAddresses') as private_ip_addresses,
                json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                json_extract_path_text(detail.Properties, 'Ipv6PrefixCount') as ipv6_prefix_count,
                json_extract_path_text(detail.Properties, 'PrimaryPrivateIpAddress') as primary_private_ip_address,
                json_extract_path_text(detail.Properties, 'Ipv4Prefixes') as ipv4_prefixes,
                json_extract_path_text(detail.Properties, 'Ipv4PrefixCount') as ipv4_prefix_count,
                json_extract_path_text(detail.Properties, 'EnablePrimaryIpv6') as enable_primary_ipv6,
                json_extract_path_text(detail.Properties, 'GroupSet') as group_set,
                json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                json_extract_path_text(detail.Properties, 'Ipv6Prefixes') as ipv6_prefixes,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(detail.Properties, 'SourceDestCheck') as source_dest_check,
                json_extract_path_text(detail.Properties, 'InterfaceType') as interface_type,
                json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'Ipv6AddressCount') as ipv6_address_count,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ConnectionTrackingSpecification') as connection_tracking_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterface'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInterface'
                AND listing.region = 'us-east-1'
    volumes:
      name: volumes
      id: aws.ec2.volumes
      x-cfn-schema-name: Volume
      x-cfn-type-name: AWS::EC2::Volume
      x-identifiers:
        - VolumeId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Volume&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Volume"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Volume"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Volume"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/volumes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MultiAttachEnabled') as multi_attach_enabled,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(Properties, '$.Size') as size,
              JSON_EXTRACT(Properties, '$.AutoEnableIO') as auto_enable_io,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.Throughput') as throughput,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.SnapshotId') as snapshot_id,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.VolumeType') as volume_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Volume'
              AND data__Identifier = '<VolumeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.MultiAttachEnabled') as multi_attach_enabled,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.Encrypted') as encrypted,
                JSON_EXTRACT(detail.Properties, '$.Size') as size,
                JSON_EXTRACT(detail.Properties, '$.AutoEnableIO') as auto_enable_io,
                JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.Throughput') as throughput,
                JSON_EXTRACT(detail.Properties, '$.Iops') as iops,
                JSON_EXTRACT(detail.Properties, '$.SnapshotId') as snapshot_id,
                JSON_EXTRACT(detail.Properties, '$.VolumeId') as volume_id,
                JSON_EXTRACT(detail.Properties, '$.VolumeType') as volume_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::Volume'
                AND detail.data__TypeName = 'AWS::EC2::Volume'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'MultiAttachEnabled') as multi_attach_enabled,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'Encrypted') as encrypted,
                  json_extract_path_text(Properties, 'Size') as size,
                  json_extract_path_text(Properties, 'AutoEnableIO') as auto_enable_io,
                  json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'Throughput') as throughput,
                  json_extract_path_text(Properties, 'Iops') as iops,
                  json_extract_path_text(Properties, 'SnapshotId') as snapshot_id,
                  json_extract_path_text(Properties, 'VolumeId') as volume_id,
                  json_extract_path_text(Properties, 'VolumeType') as volume_type,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Volume'
                  AND data__Identifier = '<VolumeId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'MultiAttachEnabled') as multi_attach_enabled,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'Encrypted') as encrypted,
                    json_extract_path_text(detail.Properties, 'Size') as size,
                    json_extract_path_text(detail.Properties, 'AutoEnableIO') as auto_enable_io,
                    json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'Throughput') as throughput,
                    json_extract_path_text(detail.Properties, 'Iops') as iops,
                    json_extract_path_text(detail.Properties, 'SnapshotId') as snapshot_id,
                    json_extract_path_text(detail.Properties, 'VolumeId') as volume_id,
                    json_extract_path_text(detail.Properties, 'VolumeType') as volume_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::Volume'
                    AND detail.data__TypeName = 'AWS::EC2::Volume'
                    AND listing.region = 'us-east-1'
    volumes_list_only:
      name: volumes_list_only
      id: aws.ec2.volumes_list_only
      x-cfn-schema-name: Volume
      x-cfn-type-name: AWS::EC2::Volume
      x-identifiers:
        - VolumeId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Volume'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VolumeId') as volume_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Volume'
                AND region = 'us-east-1'
    volume_tags:
      name: volume_tags
      id: aws.ec2.volume_tags
      x-cfn-schema-name: Volume
      x-cfn-type-name: AWS::EC2::Volume
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.MultiAttachEnabled') as multi_attach_enabled,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(detail.Properties, '$.Size') as size,
              JSON_EXTRACT(detail.Properties, '$.AutoEnableIO') as auto_enable_io,
              JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.Throughput') as throughput,
              JSON_EXTRACT(detail.Properties, '$.Iops') as iops,
              JSON_EXTRACT(detail.Properties, '$.SnapshotId') as snapshot_id,
              JSON_EXTRACT(detail.Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(detail.Properties, '$.VolumeType') as volume_type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::Volume'
              AND detail.data__TypeName = 'AWS::EC2::Volume'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'MultiAttachEnabled') as multi_attach_enabled,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'Encrypted') as encrypted,
                json_extract_path_text(detail.Properties, 'Size') as size,
                json_extract_path_text(detail.Properties, 'AutoEnableIO') as auto_enable_io,
                json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'Throughput') as throughput,
                json_extract_path_text(detail.Properties, 'Iops') as iops,
                json_extract_path_text(detail.Properties, 'SnapshotId') as snapshot_id,
                json_extract_path_text(detail.Properties, 'VolumeId') as volume_id,
                json_extract_path_text(detail.Properties, 'VolumeType') as volume_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::Volume'
                AND detail.data__TypeName = 'AWS::EC2::Volume'
                AND listing.region = 'us-east-1'
    instances_list_only:
      name: instances_list_only
      id: aws.ec2.instances_list_only
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::EC2::Instance
      x-identifiers:
        - InstanceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Instance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InstanceId') as instance_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Instance'
                AND region = 'us-east-1'
    instance_tags:
      name: instance_tags
      id: aws.ec2.instance_tags
      x-cfn-schema-name: Instance
      x-cfn-type-name: AWS::EC2::Instance
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(detail.Properties, '$.PrivateDnsName') as private_dns_name,
              JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(detail.Properties, '$.UserData') as user_data,
              JSON_EXTRACT(detail.Properties, '$.BlockDeviceMappings') as block_device_mappings,
              JSON_EXTRACT(detail.Properties, '$.IamInstanceProfile') as iam_instance_profile,
              JSON_EXTRACT(detail.Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(detail.Properties, '$.KernelId') as kernel_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(detail.Properties, '$.EbsOptimized') as ebs_optimized,
              JSON_EXTRACT(detail.Properties, '$.PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
              JSON_EXTRACT(detail.Properties, '$.ElasticGpuSpecifications') as elastic_gpu_specifications,
              JSON_EXTRACT(detail.Properties, '$.ElasticInferenceAccelerators') as elastic_inference_accelerators,
              JSON_EXTRACT(detail.Properties, '$.Volumes') as volumes,
              JSON_EXTRACT(detail.Properties, '$.PrivateIp') as private_ip,
              JSON_EXTRACT(detail.Properties, '$.Ipv6AddressCount') as ipv6_address_count,
              JSON_EXTRACT(detail.Properties, '$.LaunchTemplate') as launch_template,
              JSON_EXTRACT(detail.Properties, '$.EnclaveOptions') as enclave_options,
              JSON_EXTRACT(detail.Properties, '$.NetworkInterfaces') as network_interfaces,
              JSON_EXTRACT(detail.Properties, '$.ImageId') as image_id,
              JSON_EXTRACT(detail.Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(detail.Properties, '$.Monitoring') as monitoring,
              JSON_EXTRACT(detail.Properties, '$.AdditionalInfo') as additional_info,
              JSON_EXTRACT(detail.Properties, '$.HibernationOptions') as hibernation_options,
              JSON_EXTRACT(detail.Properties, '$.LicenseSpecifications') as license_specifications,
              JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(detail.Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(detail.Properties, '$.InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
              JSON_EXTRACT(detail.Properties, '$.CpuOptions') as cpu_options,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.PrivateDnsNameOptions') as private_dns_name_options,
              JSON_EXTRACT(detail.Properties, '$.HostId') as host_id,
              JSON_EXTRACT(detail.Properties, '$.HostResourceGroupArn') as host_resource_group_arn,
              JSON_EXTRACT(detail.Properties, '$.PublicDnsName') as public_dns_name,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.DisableApiTermination') as disable_api_termination,
              JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(detail.Properties, '$.RamdiskId') as ramdisk_id,
              JSON_EXTRACT(detail.Properties, '$.SourceDestCheck') as source_dest_check,
              JSON_EXTRACT(detail.Properties, '$.PlacementGroupName') as placement_group_name,
              JSON_EXTRACT(detail.Properties, '$.SsmAssociations') as ssm_associations,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.Affinity') as affinity,
              JSON_EXTRACT(detail.Properties, '$.CreditSpecification') as credit_specification
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::Instance'
              AND detail.data__TypeName = 'AWS::EC2::Instance'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Tenancy') as tenancy,
                json_extract_path_text(detail.Properties, 'SecurityGroups') as security_groups,
                json_extract_path_text(detail.Properties, 'PrivateDnsName') as private_dns_name,
                json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(detail.Properties, 'UserData') as user_data,
                json_extract_path_text(detail.Properties, 'BlockDeviceMappings') as block_device_mappings,
                json_extract_path_text(detail.Properties, 'IamInstanceProfile') as iam_instance_profile,
                json_extract_path_text(detail.Properties, 'Ipv6Addresses') as ipv6_addresses,
                json_extract_path_text(detail.Properties, 'KernelId') as kernel_id,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(detail.Properties, 'EbsOptimized') as ebs_optimized,
                json_extract_path_text(detail.Properties, 'PropagateTagsToVolumeOnCreation') as propagate_tags_to_volume_on_creation,
                json_extract_path_text(detail.Properties, 'ElasticGpuSpecifications') as elastic_gpu_specifications,
                json_extract_path_text(detail.Properties, 'ElasticInferenceAccelerators') as elastic_inference_accelerators,
                json_extract_path_text(detail.Properties, 'Volumes') as volumes,
                json_extract_path_text(detail.Properties, 'PrivateIp') as private_ip,
                json_extract_path_text(detail.Properties, 'Ipv6AddressCount') as ipv6_address_count,
                json_extract_path_text(detail.Properties, 'LaunchTemplate') as launch_template,
                json_extract_path_text(detail.Properties, 'EnclaveOptions') as enclave_options,
                json_extract_path_text(detail.Properties, 'NetworkInterfaces') as network_interfaces,
                json_extract_path_text(detail.Properties, 'ImageId') as image_id,
                json_extract_path_text(detail.Properties, 'InstanceType') as instance_type,
                json_extract_path_text(detail.Properties, 'Monitoring') as monitoring,
                json_extract_path_text(detail.Properties, 'AdditionalInfo') as additional_info,
                json_extract_path_text(detail.Properties, 'HibernationOptions') as hibernation_options,
                json_extract_path_text(detail.Properties, 'LicenseSpecifications') as license_specifications,
                json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                json_extract_path_text(detail.Properties, 'PublicIp') as public_ip,
                json_extract_path_text(detail.Properties, 'InstanceInitiatedShutdownBehavior') as instance_initiated_shutdown_behavior,
                json_extract_path_text(detail.Properties, 'CpuOptions') as cpu_options,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'PrivateDnsNameOptions') as private_dns_name_options,
                json_extract_path_text(detail.Properties, 'HostId') as host_id,
                json_extract_path_text(detail.Properties, 'HostResourceGroupArn') as host_resource_group_arn,
                json_extract_path_text(detail.Properties, 'PublicDnsName') as public_dns_name,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'DisableApiTermination') as disable_api_termination,
                json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                json_extract_path_text(detail.Properties, 'RamdiskId') as ramdisk_id,
                json_extract_path_text(detail.Properties, 'SourceDestCheck') as source_dest_check,
                json_extract_path_text(detail.Properties, 'PlacementGroupName') as placement_group_name,
                json_extract_path_text(detail.Properties, 'SsmAssociations') as ssm_associations,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'Affinity') as affinity,
                json_extract_path_text(detail.Properties, 'CreditSpecification') as credit_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::Instance'
                AND detail.data__TypeName = 'AWS::EC2::Instance'
                AND listing.region = 'us-east-1'
    instance_connect_endpoints:
      name: instance_connect_endpoints
      id: aws.ec2.instance_connect_endpoints
      x-cfn-schema-name: InstanceConnectEndpoint
      x-cfn-type-name: AWS::EC2::InstanceConnectEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__InstanceConnectEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InstanceConnectEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InstanceConnectEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InstanceConnectEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/instance_connect_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/instance_connect_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/instance_connect_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(Properties, '$.PreserveClientIp') as preserve_client_ip,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.ClientToken') as client_token,
                JSON_EXTRACT(detail.Properties, '$.PreserveClientIp') as preserve_client_ip,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'ClientToken') as client_token,
                  json_extract_path_text(Properties, 'PreserveClientIp') as preserve_client_ip,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'ClientToken') as client_token,
                    json_extract_path_text(detail.Properties, 'PreserveClientIp') as preserve_client_ip,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                    AND detail.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                    AND listing.region = 'us-east-1'
    instance_connect_endpoints_list_only:
      name: instance_connect_endpoints_list_only
      id: aws.ec2.instance_connect_endpoints_list_only
      x-cfn-schema-name: InstanceConnectEndpoint
      x-cfn-type-name: AWS::EC2::InstanceConnectEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND region = 'us-east-1'
    instance_connect_endpoint_tags:
      name: instance_connect_endpoint_tags
      id: aws.ec2.instance_connect_endpoint_tags
      x-cfn-schema-name: InstanceConnectEndpoint
      x-cfn-type-name: AWS::EC2::InstanceConnectEndpoint
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(detail.Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(detail.Properties, '$.PreserveClientIp') as preserve_client_ip,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND detail.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(detail.Properties, 'ClientToken') as client_token,
                json_extract_path_text(detail.Properties, 'PreserveClientIp') as preserve_client_ip,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND listing.region = 'us-east-1'
    internet_gateways:
      name: internet_gateways
      id: aws.ec2.internet_gateways
      x-cfn-schema-name: InternetGateway
      x-cfn-type-name: AWS::EC2::InternetGateway
      x-identifiers:
        - InternetGatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__InternetGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InternetGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InternetGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::InternetGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/internet_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/internet_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/internet_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InternetGateway'
              AND data__Identifier = '<InternetGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.InternetGatewayId') as internet_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::InternetGateway'
                AND detail.data__TypeName = 'AWS::EC2::InternetGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InternetGateway'
                  AND data__Identifier = '<InternetGatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'InternetGatewayId') as internet_gateway_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::InternetGateway'
                    AND detail.data__TypeName = 'AWS::EC2::InternetGateway'
                    AND listing.region = 'us-east-1'
    internet_gateways_list_only:
      name: internet_gateways_list_only
      id: aws.ec2.internet_gateways_list_only
      x-cfn-schema-name: InternetGateway
      x-cfn-type-name: AWS::EC2::InternetGateway
      x-identifiers:
        - InternetGatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InternetGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InternetGateway'
                AND region = 'us-east-1'
    internet_gateway_tags:
      name: internet_gateway_tags
      id: aws.ec2.internet_gateway_tags
      x-cfn-schema-name: InternetGateway
      x-cfn-type-name: AWS::EC2::InternetGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.InternetGatewayId') as internet_gateway_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::InternetGateway'
              AND detail.data__TypeName = 'AWS::EC2::InternetGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'InternetGatewayId') as internet_gateway_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::InternetGateway'
                AND detail.data__TypeName = 'AWS::EC2::InternetGateway'
                AND listing.region = 'us-east-1'
    ipams:
      name: ipams
      id: aws.ec2.ipams
      x-cfn-schema-name: IPAM
      x-cfn-type-name: AWS::EC2::IPAM
      x-identifiers:
        - IpamId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAM&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAM"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAM"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAM"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipams/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipams/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ipams/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultResourceDiscoveryId') as default_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
              JSON_EXTRACT(Properties, '$.ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PublicDefaultScopeId') as public_default_scope_id,
              JSON_EXTRACT(Properties, '$.PrivateDefaultScopeId') as private_default_scope_id,
              JSON_EXTRACT(Properties, '$.ScopeCount') as scope_count,
              JSON_EXTRACT(Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(Properties, '$.Tier') as tier,
              JSON_EXTRACT(Properties, '$.EnablePrivateGua') as enable_private_gua,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAM'
              AND data__Identifier = '<IpamId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DefaultResourceDiscoveryId') as default_resource_discovery_id,
                JSON_EXTRACT(detail.Properties, '$.DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PublicDefaultScopeId') as public_default_scope_id,
                JSON_EXTRACT(detail.Properties, '$.PrivateDefaultScopeId') as private_default_scope_id,
                JSON_EXTRACT(detail.Properties, '$.ScopeCount') as scope_count,
                JSON_EXTRACT(detail.Properties, '$.OperatingRegions') as operating_regions,
                JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
                JSON_EXTRACT(detail.Properties, '$.EnablePrivateGua') as enable_private_gua,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAM'
                AND detail.data__TypeName = 'AWS::EC2::IPAM'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamId') as ipam_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DefaultResourceDiscoveryId') as default_resource_discovery_id,
                  json_extract_path_text(Properties, 'DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
                  json_extract_path_text(Properties, 'ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PublicDefaultScopeId') as public_default_scope_id,
                  json_extract_path_text(Properties, 'PrivateDefaultScopeId') as private_default_scope_id,
                  json_extract_path_text(Properties, 'ScopeCount') as scope_count,
                  json_extract_path_text(Properties, 'OperatingRegions') as operating_regions,
                  json_extract_path_text(Properties, 'Tier') as tier,
                  json_extract_path_text(Properties, 'EnablePrivateGua') as enable_private_gua,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAM'
                  AND data__Identifier = '<IpamId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DefaultResourceDiscoveryId') as default_resource_discovery_id,
                    json_extract_path_text(detail.Properties, 'DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
                    json_extract_path_text(detail.Properties, 'ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PublicDefaultScopeId') as public_default_scope_id,
                    json_extract_path_text(detail.Properties, 'PrivateDefaultScopeId') as private_default_scope_id,
                    json_extract_path_text(detail.Properties, 'ScopeCount') as scope_count,
                    json_extract_path_text(detail.Properties, 'OperatingRegions') as operating_regions,
                    json_extract_path_text(detail.Properties, 'Tier') as tier,
                    json_extract_path_text(detail.Properties, 'EnablePrivateGua') as enable_private_gua,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAM'
                    AND detail.data__TypeName = 'AWS::EC2::IPAM'
                    AND listing.region = 'us-east-1'
    ipams_list_only:
      name: ipams_list_only
      id: aws.ec2.ipams_list_only
      x-cfn-schema-name: IPAM
      x-cfn-type-name: AWS::EC2::IPAM
      x-identifiers:
        - IpamId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAM'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamId') as ipam_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAM'
                AND region = 'us-east-1'
    ipam_tags:
      name: ipam_tags
      id: aws.ec2.ipam_tags
      x-cfn-schema-name: IPAM
      x-cfn-type-name: AWS::EC2::IPAM
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DefaultResourceDiscoveryId') as default_resource_discovery_id,
              JSON_EXTRACT(detail.Properties, '$.DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
              JSON_EXTRACT(detail.Properties, '$.ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PublicDefaultScopeId') as public_default_scope_id,
              JSON_EXTRACT(detail.Properties, '$.PrivateDefaultScopeId') as private_default_scope_id,
              JSON_EXTRACT(detail.Properties, '$.ScopeCount') as scope_count,
              JSON_EXTRACT(detail.Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
              JSON_EXTRACT(detail.Properties, '$.EnablePrivateGua') as enable_private_gua
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::IPAM'
              AND detail.data__TypeName = 'AWS::EC2::IPAM'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DefaultResourceDiscoveryId') as default_resource_discovery_id,
                json_extract_path_text(detail.Properties, 'DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
                json_extract_path_text(detail.Properties, 'ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PublicDefaultScopeId') as public_default_scope_id,
                json_extract_path_text(detail.Properties, 'PrivateDefaultScopeId') as private_default_scope_id,
                json_extract_path_text(detail.Properties, 'ScopeCount') as scope_count,
                json_extract_path_text(detail.Properties, 'OperatingRegions') as operating_regions,
                json_extract_path_text(detail.Properties, 'Tier') as tier,
                json_extract_path_text(detail.Properties, 'EnablePrivateGua') as enable_private_gua
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::IPAM'
                AND detail.data__TypeName = 'AWS::EC2::IPAM'
                AND listing.region = 'us-east-1'
    ipam_allocations:
      name: ipam_allocations
      id: aws.ec2.ipam_allocations
      x-cfn-schema-name: IPAMAllocation
      x-cfn-type-name: AWS::EC2::IPAMAllocation
      x-identifiers:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMAllocation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMAllocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMAllocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_allocations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_allocations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolAllocationId') as ipam_pool_allocation_id,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr,
              JSON_EXTRACT(Properties, '$.NetmaskLength') as netmask_length,
              JSON_EXTRACT(Properties, '$.Description') as description
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
              AND data__Identifier = '<IpamPoolId>|<IpamPoolAllocationId>|<Cidr>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolAllocationId') as ipam_pool_allocation_id,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Cidr') as cidr,
                JSON_EXTRACT(detail.Properties, '$.NetmaskLength') as netmask_length,
                JSON_EXTRACT(detail.Properties, '$.Description') as description
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMAllocation'
                AND detail.data__TypeName = 'AWS::EC2::IPAMAllocation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamPoolAllocationId') as ipam_pool_allocation_id,
                  json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                  json_extract_path_text(Properties, 'Cidr') as cidr,
                  json_extract_path_text(Properties, 'NetmaskLength') as netmask_length,
                  json_extract_path_text(Properties, 'Description') as description
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
                  AND data__Identifier = '<IpamPoolId>|<IpamPoolAllocationId>|<Cidr>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamPoolAllocationId') as ipam_pool_allocation_id,
                    json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Cidr') as cidr,
                    json_extract_path_text(detail.Properties, 'NetmaskLength') as netmask_length,
                    json_extract_path_text(detail.Properties, 'Description') as description
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMAllocation'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMAllocation'
                    AND listing.region = 'us-east-1'
    ipam_allocations_list_only:
      name: ipam_allocations_list_only
      id: aws.ec2.ipam_allocations_list_only
      x-cfn-schema-name: IPAMAllocation
      x-cfn-type-name: AWS::EC2::IPAMAllocation
      x-identifiers:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.IpamPoolAllocationId') as ipam_pool_allocation_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'IpamPoolAllocationId') as ipam_pool_allocation_id,
                json_extract_path_text(Properties, 'Cidr') as cidr
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
                AND region = 'us-east-1'
    ipam_pools:
      name: ipam_pools
      id: aws.ec2.ipam_pools
      x-cfn-schema-name: IPAMPool
      x-cfn-type-name: AWS::EC2::IPAMPool
      x-identifiers:
        - IpamPoolId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMPool&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMPool"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMPool"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMPool"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_pools/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_pools/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ipam_pools/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(Properties, '$.AllocationMinNetmaskLength') as allocation_min_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationMaxNetmaskLength') as allocation_max_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationResourceTags') as allocation_resource_tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AutoImport') as auto_import,
              JSON_EXTRACT(Properties, '$.AwsService') as aws_service,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(Properties, '$.IpamScopeArn') as ipam_scope_arn,
              JSON_EXTRACT(Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.Locale') as locale,
              JSON_EXTRACT(Properties, '$.PoolDepth') as pool_depth,
              JSON_EXTRACT(Properties, '$.ProvisionedCidrs') as provisioned_cidrs,
              JSON_EXTRACT(Properties, '$.PublicIpSource') as public_ip_source,
              JSON_EXTRACT(Properties, '$.PubliclyAdvertisable') as publicly_advertisable,
              JSON_EXTRACT(Properties, '$.SourceIpamPoolId') as source_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.SourceResource') as source_resource,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.StateMessage') as state_message,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPool'
              AND data__Identifier = '<IpamPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.AddressFamily') as address_family,
                JSON_EXTRACT(detail.Properties, '$.AllocationMinNetmaskLength') as allocation_min_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.AllocationMaxNetmaskLength') as allocation_max_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.AllocationResourceTags') as allocation_resource_tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AutoImport') as auto_import,
                JSON_EXTRACT(detail.Properties, '$.AwsService') as aws_service,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.IpamScopeId') as ipam_scope_id,
                JSON_EXTRACT(detail.Properties, '$.IpamScopeArn') as ipam_scope_arn,
                JSON_EXTRACT(detail.Properties, '$.IpamScopeType') as ipam_scope_type,
                JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
                JSON_EXTRACT(detail.Properties, '$.Locale') as locale,
                JSON_EXTRACT(detail.Properties, '$.PoolDepth') as pool_depth,
                JSON_EXTRACT(detail.Properties, '$.ProvisionedCidrs') as provisioned_cidrs,
                JSON_EXTRACT(detail.Properties, '$.PublicIpSource') as public_ip_source,
                JSON_EXTRACT(detail.Properties, '$.PubliclyAdvertisable') as publicly_advertisable,
                JSON_EXTRACT(detail.Properties, '$.SourceIpamPoolId') as source_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.SourceResource') as source_resource,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.StateMessage') as state_message,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMPool'
                AND detail.data__TypeName = 'AWS::EC2::IPAMPool'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                  json_extract_path_text(Properties, 'AddressFamily') as address_family,
                  json_extract_path_text(Properties, 'AllocationMinNetmaskLength') as allocation_min_netmask_length,
                  json_extract_path_text(Properties, 'AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
                  json_extract_path_text(Properties, 'AllocationMaxNetmaskLength') as allocation_max_netmask_length,
                  json_extract_path_text(Properties, 'AllocationResourceTags') as allocation_resource_tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AutoImport') as auto_import,
                  json_extract_path_text(Properties, 'AwsService') as aws_service,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id,
                  json_extract_path_text(Properties, 'IpamScopeArn') as ipam_scope_arn,
                  json_extract_path_text(Properties, 'IpamScopeType') as ipam_scope_type,
                  json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                  json_extract_path_text(Properties, 'Locale') as locale,
                  json_extract_path_text(Properties, 'PoolDepth') as pool_depth,
                  json_extract_path_text(Properties, 'ProvisionedCidrs') as provisioned_cidrs,
                  json_extract_path_text(Properties, 'PublicIpSource') as public_ip_source,
                  json_extract_path_text(Properties, 'PubliclyAdvertisable') as publicly_advertisable,
                  json_extract_path_text(Properties, 'SourceIpamPoolId') as source_ipam_pool_id,
                  json_extract_path_text(Properties, 'SourceResource') as source_resource,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'StateMessage') as state_message,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPool'
                  AND data__Identifier = '<IpamPoolId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'AddressFamily') as address_family,
                    json_extract_path_text(detail.Properties, 'AllocationMinNetmaskLength') as allocation_min_netmask_length,
                    json_extract_path_text(detail.Properties, 'AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
                    json_extract_path_text(detail.Properties, 'AllocationMaxNetmaskLength') as allocation_max_netmask_length,
                    json_extract_path_text(detail.Properties, 'AllocationResourceTags') as allocation_resource_tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AutoImport') as auto_import,
                    json_extract_path_text(detail.Properties, 'AwsService') as aws_service,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'IpamScopeId') as ipam_scope_id,
                    json_extract_path_text(detail.Properties, 'IpamScopeArn') as ipam_scope_arn,
                    json_extract_path_text(detail.Properties, 'IpamScopeType') as ipam_scope_type,
                    json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                    json_extract_path_text(detail.Properties, 'Locale') as locale,
                    json_extract_path_text(detail.Properties, 'PoolDepth') as pool_depth,
                    json_extract_path_text(detail.Properties, 'ProvisionedCidrs') as provisioned_cidrs,
                    json_extract_path_text(detail.Properties, 'PublicIpSource') as public_ip_source,
                    json_extract_path_text(detail.Properties, 'PubliclyAdvertisable') as publicly_advertisable,
                    json_extract_path_text(detail.Properties, 'SourceIpamPoolId') as source_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'SourceResource') as source_resource,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'StateMessage') as state_message,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMPool'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMPool'
                    AND listing.region = 'us-east-1'
    ipam_pools_list_only:
      name: ipam_pools_list_only
      id: aws.ec2.ipam_pools_list_only
      x-cfn-schema-name: IPAMPool
      x-cfn-type-name: AWS::EC2::IPAMPool
      x-identifiers:
        - IpamPoolId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPool'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPool'
                AND region = 'us-east-1'
    ipam_pool_tags:
      name: ipam_pool_tags
      id: aws.ec2.ipam_pool_tags
      x-cfn-schema-name: IPAMPool
      x-cfn-type-name: AWS::EC2::IPAMPool
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(detail.Properties, '$.AllocationMinNetmaskLength') as allocation_min_netmask_length,
              JSON_EXTRACT(detail.Properties, '$.AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
              JSON_EXTRACT(detail.Properties, '$.AllocationMaxNetmaskLength') as allocation_max_netmask_length,
              JSON_EXTRACT(detail.Properties, '$.AllocationResourceTags') as allocation_resource_tags,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AutoImport') as auto_import,
              JSON_EXTRACT(detail.Properties, '$.AwsService') as aws_service,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(detail.Properties, '$.IpamScopeArn') as ipam_scope_arn,
              JSON_EXTRACT(detail.Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(detail.Properties, '$.Locale') as locale,
              JSON_EXTRACT(detail.Properties, '$.PoolDepth') as pool_depth,
              JSON_EXTRACT(detail.Properties, '$.ProvisionedCidrs') as provisioned_cidrs,
              JSON_EXTRACT(detail.Properties, '$.PublicIpSource') as public_ip_source,
              JSON_EXTRACT(detail.Properties, '$.PubliclyAdvertisable') as publicly_advertisable,
              JSON_EXTRACT(detail.Properties, '$.SourceIpamPoolId') as source_ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.SourceResource') as source_resource,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.StateMessage') as state_message
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::IPAMPool'
              AND detail.data__TypeName = 'AWS::EC2::IPAMPool'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(detail.Properties, 'AddressFamily') as address_family,
                json_extract_path_text(detail.Properties, 'AllocationMinNetmaskLength') as allocation_min_netmask_length,
                json_extract_path_text(detail.Properties, 'AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
                json_extract_path_text(detail.Properties, 'AllocationMaxNetmaskLength') as allocation_max_netmask_length,
                json_extract_path_text(detail.Properties, 'AllocationResourceTags') as allocation_resource_tags,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AutoImport') as auto_import,
                json_extract_path_text(detail.Properties, 'AwsService') as aws_service,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'IpamScopeId') as ipam_scope_id,
                json_extract_path_text(detail.Properties, 'IpamScopeArn') as ipam_scope_arn,
                json_extract_path_text(detail.Properties, 'IpamScopeType') as ipam_scope_type,
                json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(detail.Properties, 'Locale') as locale,
                json_extract_path_text(detail.Properties, 'PoolDepth') as pool_depth,
                json_extract_path_text(detail.Properties, 'ProvisionedCidrs') as provisioned_cidrs,
                json_extract_path_text(detail.Properties, 'PublicIpSource') as public_ip_source,
                json_extract_path_text(detail.Properties, 'PubliclyAdvertisable') as publicly_advertisable,
                json_extract_path_text(detail.Properties, 'SourceIpamPoolId') as source_ipam_pool_id,
                json_extract_path_text(detail.Properties, 'SourceResource') as source_resource,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'StateMessage') as state_message
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMPool'
                AND detail.data__TypeName = 'AWS::EC2::IPAMPool'
                AND listing.region = 'us-east-1'
    ipam_pool_cidrs:
      name: ipam_pool_cidrs
      id: aws.ec2.ipam_pool_cidrs
      x-cfn-schema-name: IPAMPoolCidr
      x-cfn-type-name: AWS::EC2::IPAMPoolCidr
      x-identifiers:
        - IpamPoolId
        - IpamPoolCidrId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMPoolCidr&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMPoolCidr"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMPoolCidr"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_pool_cidrs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_pool_cidrs/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolCidrId') as ipam_pool_cidr_id,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr,
              JSON_EXTRACT(Properties, '$.NetmaskLength') as netmask_length,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
              AND data__Identifier = '<IpamPoolId>|<IpamPoolCidrId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolCidrId') as ipam_pool_cidr_id,
                JSON_EXTRACT(detail.Properties, '$.IpamPoolId') as ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Cidr') as cidr,
                JSON_EXTRACT(detail.Properties, '$.NetmaskLength') as netmask_length,
                JSON_EXTRACT(detail.Properties, '$.State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                AND detail.data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamPoolCidrId') as ipam_pool_cidr_id,
                  json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                  json_extract_path_text(Properties, 'Cidr') as cidr,
                  json_extract_path_text(Properties, 'NetmaskLength') as netmask_length,
                  json_extract_path_text(Properties, 'State') as state
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                  AND data__Identifier = '<IpamPoolId>|<IpamPoolCidrId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamPoolCidrId') as ipam_pool_cidr_id,
                    json_extract_path_text(detail.Properties, 'IpamPoolId') as ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Cidr') as cidr,
                    json_extract_path_text(detail.Properties, 'NetmaskLength') as netmask_length,
                    json_extract_path_text(detail.Properties, 'State') as state
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                    AND listing.region = 'us-east-1'
    ipam_pool_cidrs_list_only:
      name: ipam_pool_cidrs_list_only
      id: aws.ec2.ipam_pool_cidrs_list_only
      x-cfn-schema-name: IPAMPoolCidr
      x-cfn-type-name: AWS::EC2::IPAMPoolCidr
      x-identifiers:
        - IpamPoolId
        - IpamPoolCidrId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.IpamPoolCidrId') as ipam_pool_cidr_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'IpamPoolCidrId') as ipam_pool_cidr_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                AND region = 'us-east-1'
    ipam_resource_discoveries:
      name: ipam_resource_discoveries
      id: aws.ec2.ipam_resource_discoveries
      x-cfn-schema-name: IPAMResourceDiscovery
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscovery
      x-identifiers:
        - IpamResourceDiscoveryId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMResourceDiscovery&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscovery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscovery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscovery"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discoveries/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discoveries/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discoveries/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND data__Identifier = '<IpamResourceDiscoveryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.OperatingRegions') as operating_regions,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'OperatingRegions') as operating_regions,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'IsDefault') as is_default,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                  AND data__Identifier = '<IpamResourceDiscoveryId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'OperatingRegions') as operating_regions,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                    AND listing.region = 'us-east-1'
    ipam_resource_discoveries_list_only:
      name: ipam_resource_discoveries_list_only
      id: aws.ec2.ipam_resource_discoveries_list_only
      x-cfn-schema-name: IPAMResourceDiscovery
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscovery
      x-identifiers:
        - IpamResourceDiscoveryId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND region = 'us-east-1'
    ipam_resource_discovery_tags:
      name: ipam_resource_discovery_tags
      id: aws.ec2.ipam_resource_discovery_tags
      x-cfn-schema-name: IPAMResourceDiscovery
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscovery
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'OperatingRegions') as operating_regions,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND listing.region = 'us-east-1'
    ipam_resource_discovery_associations:
      name: ipam_resource_discovery_associations
      id: aws.ec2.ipam_resource_discovery_associations
      x-cfn-schema-name: IPAMResourceDiscoveryAssociation
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscoveryAssociation
      x-identifiers:
        - IpamResourceDiscoveryAssociationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMResourceDiscoveryAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscoveryAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscoveryAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMResourceDiscoveryAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discovery_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discovery_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ipam_resource_discovery_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.IpamRegion') as ipam_region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.ResourceDiscoveryStatus') as resource_discovery_status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND data__Identifier = '<IpamResourceDiscoveryAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
                JSON_EXTRACT(detail.Properties, '$.IpamRegion') as ipam_region,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
                JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
                JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.ResourceDiscoveryStatus') as resource_discovery_status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                  json_extract_path_text(Properties, 'IpamRegion') as ipam_region,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                  json_extract_path_text(Properties, 'IpamId') as ipam_id,
                  json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
                  json_extract_path_text(Properties, 'IsDefault') as is_default,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'ResourceDiscoveryStatus') as resource_discovery_status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                  AND data__Identifier = '<IpamResourceDiscoveryAssociationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                    json_extract_path_text(detail.Properties, 'IpamRegion') as ipam_region,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                    json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                    json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
                    json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'ResourceDiscoveryStatus') as resource_discovery_status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                    AND listing.region = 'us-east-1'
    ipam_resource_discovery_associations_list_only:
      name: ipam_resource_discovery_associations_list_only
      id: aws.ec2.ipam_resource_discovery_associations_list_only
      x-cfn-schema-name: IPAMResourceDiscoveryAssociation
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscoveryAssociation
      x-identifiers:
        - IpamResourceDiscoveryAssociationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND region = 'us-east-1'
    ipam_resource_discovery_association_tags:
      name: ipam_resource_discovery_association_tags
      id: aws.ec2.ipam_resource_discovery_association_tags
      x-cfn-schema-name: IPAMResourceDiscoveryAssociation
      x-cfn-type-name: AWS::EC2::IPAMResourceDiscoveryAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(detail.Properties, '$.IpamRegion') as ipam_region,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(detail.Properties, '$.IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
              JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.ResourceDiscoveryStatus') as resource_discovery_status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(detail.Properties, 'IpamRegion') as ipam_region,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                json_extract_path_text(detail.Properties, 'IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
                json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'ResourceDiscoveryStatus') as resource_discovery_status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND detail.data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND listing.region = 'us-east-1'
    ipam_scopes:
      name: ipam_scopes
      id: aws.ec2.ipam_scopes
      x-cfn-schema-name: IPAMScope
      x-cfn-type-name: AWS::EC2::IPAMScope
      x-identifiers:
        - IpamScopeId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IPAMScope&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::IPAMScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/ipam_scopes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/ipam_scopes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/ipam_scopes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PoolCount') as pool_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMScope'
              AND data__Identifier = '<IpamScopeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpamScopeId') as ipam_scope_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
                JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
                JSON_EXTRACT(detail.Properties, '$.IpamScopeType') as ipam_scope_type,
                JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PoolCount') as pool_count,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMScope'
                AND detail.data__TypeName = 'AWS::EC2::IPAMScope'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'IpamId') as ipam_id,
                  json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                  json_extract_path_text(Properties, 'IpamScopeType') as ipam_scope_type,
                  json_extract_path_text(Properties, 'IsDefault') as is_default,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PoolCount') as pool_count,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMScope'
                  AND data__Identifier = '<IpamScopeId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpamScopeId') as ipam_scope_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                    json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                    json_extract_path_text(detail.Properties, 'IpamScopeType') as ipam_scope_type,
                    json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PoolCount') as pool_count,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::IPAMScope'
                    AND detail.data__TypeName = 'AWS::EC2::IPAMScope'
                    AND listing.region = 'us-east-1'
    ipam_scopes_list_only:
      name: ipam_scopes_list_only
      id: aws.ec2.ipam_scopes_list_only
      x-cfn-schema-name: IPAMScope
      x-cfn-type-name: AWS::EC2::IPAMScope
      x-identifiers:
        - IpamScopeId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMScope'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMScope'
                AND region = 'us-east-1'
    ipam_scope_tags:
      name: ipam_scope_tags
      id: aws.ec2.ipam_scope_tags
      x-cfn-schema-name: IPAMScope
      x-cfn-type-name: AWS::EC2::IPAMScope
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(detail.Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(detail.Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(detail.Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PoolCount') as pool_count
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::IPAMScope'
              AND detail.data__TypeName = 'AWS::EC2::IPAMScope'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpamScopeId') as ipam_scope_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'IpamId') as ipam_id,
                json_extract_path_text(detail.Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(detail.Properties, 'IpamScopeType') as ipam_scope_type,
                json_extract_path_text(detail.Properties, 'IsDefault') as is_default,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PoolCount') as pool_count
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::IPAMScope'
                AND detail.data__TypeName = 'AWS::EC2::IPAMScope'
                AND listing.region = 'us-east-1'
    key_pairs:
      name: key_pairs
      id: aws.ec2.key_pairs
      x-cfn-schema-name: KeyPair
      x-cfn-type-name: AWS::EC2::KeyPair
      x-identifiers:
        - KeyName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__KeyPair&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::KeyPair"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::KeyPair"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/key_pairs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/key_pairs/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.KeyFormat') as key_format,
              JSON_EXTRACT(Properties, '$.PublicKeyMaterial') as public_key_material,
              JSON_EXTRACT(Properties, '$.KeyFingerprint') as key_fingerprint,
              JSON_EXTRACT(Properties, '$.KeyPairId') as key_pair_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::KeyPair'
              AND data__Identifier = '<KeyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
                JSON_EXTRACT(detail.Properties, '$.KeyType') as key_type,
                JSON_EXTRACT(detail.Properties, '$.KeyFormat') as key_format,
                JSON_EXTRACT(detail.Properties, '$.PublicKeyMaterial') as public_key_material,
                JSON_EXTRACT(detail.Properties, '$.KeyFingerprint') as key_fingerprint,
                JSON_EXTRACT(detail.Properties, '$.KeyPairId') as key_pair_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::KeyPair'
                AND detail.data__TypeName = 'AWS::EC2::KeyPair'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'KeyName') as key_name,
                  json_extract_path_text(Properties, 'KeyType') as key_type,
                  json_extract_path_text(Properties, 'KeyFormat') as key_format,
                  json_extract_path_text(Properties, 'PublicKeyMaterial') as public_key_material,
                  json_extract_path_text(Properties, 'KeyFingerprint') as key_fingerprint,
                  json_extract_path_text(Properties, 'KeyPairId') as key_pair_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::KeyPair'
                  AND data__Identifier = '<KeyName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                    json_extract_path_text(detail.Properties, 'KeyType') as key_type,
                    json_extract_path_text(detail.Properties, 'KeyFormat') as key_format,
                    json_extract_path_text(detail.Properties, 'PublicKeyMaterial') as public_key_material,
                    json_extract_path_text(detail.Properties, 'KeyFingerprint') as key_fingerprint,
                    json_extract_path_text(detail.Properties, 'KeyPairId') as key_pair_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::KeyPair'
                    AND detail.data__TypeName = 'AWS::EC2::KeyPair'
                    AND listing.region = 'us-east-1'
    key_pairs_list_only:
      name: key_pairs_list_only
      id: aws.ec2.key_pairs_list_only
      x-cfn-schema-name: KeyPair
      x-cfn-type-name: AWS::EC2::KeyPair
      x-identifiers:
        - KeyName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::KeyPair'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KeyName') as key_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::KeyPair'
                AND region = 'us-east-1'
    key_pair_tags:
      name: key_pair_tags
      id: aws.ec2.key_pair_tags
      x-cfn-schema-name: KeyPair
      x-cfn-type-name: AWS::EC2::KeyPair
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(detail.Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(detail.Properties, '$.KeyFormat') as key_format,
              JSON_EXTRACT(detail.Properties, '$.PublicKeyMaterial') as public_key_material,
              JSON_EXTRACT(detail.Properties, '$.KeyFingerprint') as key_fingerprint,
              JSON_EXTRACT(detail.Properties, '$.KeyPairId') as key_pair_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::KeyPair'
              AND detail.data__TypeName = 'AWS::EC2::KeyPair'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'KeyName') as key_name,
                json_extract_path_text(detail.Properties, 'KeyType') as key_type,
                json_extract_path_text(detail.Properties, 'KeyFormat') as key_format,
                json_extract_path_text(detail.Properties, 'PublicKeyMaterial') as public_key_material,
                json_extract_path_text(detail.Properties, 'KeyFingerprint') as key_fingerprint,
                json_extract_path_text(detail.Properties, 'KeyPairId') as key_pair_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::KeyPair'
                AND detail.data__TypeName = 'AWS::EC2::KeyPair'
                AND listing.region = 'us-east-1'
    launch_templates:
      name: launch_templates
      id: aws.ec2.launch_templates
      x-cfn-schema-name: LaunchTemplate
      x-cfn-type-name: AWS::EC2::LaunchTemplate
      x-identifiers:
        - LaunchTemplateId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LaunchTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LaunchTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LaunchTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LaunchTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/launch_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/launch_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/launch_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LaunchTemplateName') as launch_template_name,
              JSON_EXTRACT(Properties, '$.LaunchTemplateData') as launch_template_data,
              JSON_EXTRACT(Properties, '$.VersionDescription') as version_description,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.LaunchTemplateId') as launch_template_id,
              JSON_EXTRACT(Properties, '$.DefaultVersionNumber') as default_version_number
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
              AND data__Identifier = '<LaunchTemplateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LaunchTemplateName') as launch_template_name,
                JSON_EXTRACT(detail.Properties, '$.LaunchTemplateData') as launch_template_data,
                JSON_EXTRACT(detail.Properties, '$.VersionDescription') as version_description,
                JSON_EXTRACT(detail.Properties, '$.TagSpecifications') as tag_specifications,
                JSON_EXTRACT(detail.Properties, '$.LatestVersionNumber') as latest_version_number,
                JSON_EXTRACT(detail.Properties, '$.LaunchTemplateId') as launch_template_id,
                JSON_EXTRACT(detail.Properties, '$.DefaultVersionNumber') as default_version_number
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::LaunchTemplate'
                AND detail.data__TypeName = 'AWS::EC2::LaunchTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LaunchTemplateName') as launch_template_name,
                  json_extract_path_text(Properties, 'LaunchTemplateData') as launch_template_data,
                  json_extract_path_text(Properties, 'VersionDescription') as version_description,
                  json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                  json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                  json_extract_path_text(Properties, 'LaunchTemplateId') as launch_template_id,
                  json_extract_path_text(Properties, 'DefaultVersionNumber') as default_version_number
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
                  AND data__Identifier = '<LaunchTemplateId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LaunchTemplateName') as launch_template_name,
                    json_extract_path_text(detail.Properties, 'LaunchTemplateData') as launch_template_data,
                    json_extract_path_text(detail.Properties, 'VersionDescription') as version_description,
                    json_extract_path_text(detail.Properties, 'TagSpecifications') as tag_specifications,
                    json_extract_path_text(detail.Properties, 'LatestVersionNumber') as latest_version_number,
                    json_extract_path_text(detail.Properties, 'LaunchTemplateId') as launch_template_id,
                    json_extract_path_text(detail.Properties, 'DefaultVersionNumber') as default_version_number
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::LaunchTemplate'
                    AND detail.data__TypeName = 'AWS::EC2::LaunchTemplate'
                    AND listing.region = 'us-east-1'
    launch_templates_list_only:
      name: launch_templates_list_only
      id: aws.ec2.launch_templates_list_only
      x-cfn-schema-name: LaunchTemplate
      x-cfn-type-name: AWS::EC2::LaunchTemplate
      x-identifiers:
        - LaunchTemplateId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LaunchTemplateId') as launch_template_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LaunchTemplateId') as launch_template_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
                AND region = 'us-east-1'
    local_gateway_routes:
      name: local_gateway_routes
      id: aws.ec2.local_gateway_routes
      x-cfn-schema-name: LocalGatewayRoute
      x-cfn-type-name: AWS::EC2::LocalGatewayRoute
      x-identifiers:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LocalGatewayRoute&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/local_gateway_routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/local_gateway_routes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/local_gateway_routes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
              AND data__Identifier = '<DestinationCidrBlock>|<LocalGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DestinationCidrBlock') as destination_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                  json_extract_path_text(Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                  AND data__Identifier = '<DestinationCidrBlock>|<LocalGatewayRouteTableId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DestinationCidrBlock') as destination_cidr_block,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                    AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                    AND listing.region = 'us-east-1'
    local_gateway_routes_list_only:
      name: local_gateway_routes_list_only
      id: aws.ec2.local_gateway_routes_list_only
      x-cfn-schema-name: LocalGatewayRoute
      x-cfn-type-name: AWS::EC2::LocalGatewayRoute
      x-identifiers:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                AND region = 'us-east-1'
    local_gateway_route_tables:
      name: local_gateway_route_tables
      id: aws.ec2.local_gateway_route_tables
      x-cfn-schema-name: LocalGatewayRouteTable
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTable
      x-identifiers:
        - LocalGatewayRouteTableId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTable&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tables/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tables/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tables/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND data__Identifier = '<LocalGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Mode') as mode,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                  json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                  json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Mode') as mode,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                  AND data__Identifier = '<LocalGatewayRouteTableId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                    json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                    json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Mode') as mode,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                    AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                    AND listing.region = 'us-east-1'
    local_gateway_route_tables_list_only:
      name: local_gateway_route_tables_list_only
      id: aws.ec2.local_gateway_route_tables_list_only
      x-cfn-schema-name: LocalGatewayRouteTable
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTable
      x-identifiers:
        - LocalGatewayRouteTableId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND region = 'us-east-1'
    local_gateway_route_table_tags:
      name: local_gateway_route_table_tags
      id: aws.ec2.local_gateway_route_table_tags
      x-cfn-schema-name: LocalGatewayRouteTable
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTable
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.Mode') as mode
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'Mode') as mode
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND listing.region = 'us-east-1'
    local_gateway_route_table_virtual_interface_group_associations:
      name: local_gateway_route_table_virtual_interface_group_associations
      id: aws.ec2.local_gateway_route_table_virtual_interface_group_associations
      x-cfn-schema-name: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-identifiers:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTableVirtualInterfaceGroupAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_table_virtual_interface_group_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_table_virtual_interface_group_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_table_virtual_interface_group_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND data__Identifier = '<LocalGatewayRouteTableVirtualInterfaceGroupAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
                  json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                  json_extract_path_text(Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                  AND data__Identifier = '<LocalGatewayRouteTableVirtualInterfaceGroupAssociationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                    json_extract_path_text(detail.Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                    AND listing.region = 'us-east-1'
    local_gateway_route_table_virtual_interface_group_associations_list_only:
      name: local_gateway_route_table_virtual_interface_group_associations_list_only
      id: aws.ec2.local_gateway_route_table_virtual_interface_group_associations_list_only
      x-cfn-schema-name: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-identifiers:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND region = 'us-east-1'
    local_gateway_route_table_virtual_interface_group_association_tags:
      name: local_gateway_route_table_virtual_interface_group_association_tags
      id: aws.ec2.local_gateway_route_table_virtual_interface_group_association_tags
      x-cfn-schema-name: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                json_extract_path_text(detail.Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND listing.region = 'us-east-1'
    local_gateway_route_tablevpc_associations:
      name: local_gateway_route_tablevpc_associations
      id: aws.ec2.local_gateway_route_tablevpc_associations
      x-cfn-schema-name: LocalGatewayRouteTableVPCAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVPCAssociation
      x-identifiers:
        - LocalGatewayRouteTableVpcAssociationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTableVPCAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tablevpc_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tablevpc_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/local_gateway_route_tablevpc_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND data__Identifier = '<LocalGatewayRouteTableVpcAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                  json_extract_path_text(Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                  AND data__Identifier = '<LocalGatewayRouteTableVpcAssociationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                    AND listing.region = 'us-east-1'
    local_gateway_route_tablevpc_associations_list_only:
      name: local_gateway_route_tablevpc_associations_list_only
      id: aws.ec2.local_gateway_route_tablevpc_associations_list_only
      x-cfn-schema-name: LocalGatewayRouteTableVPCAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVPCAssociation
      x-identifiers:
        - LocalGatewayRouteTableVpcAssociationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND region = 'us-east-1'
    local_gateway_route_tablevpc_association_tags:
      name: local_gateway_route_tablevpc_association_tags
      id: aws.ec2.local_gateway_route_tablevpc_association_tags
      x-cfn-schema-name: LocalGatewayRouteTableVPCAssociation
      x-cfn-type-name: AWS::EC2::LocalGatewayRouteTableVPCAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(detail.Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(detail.Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND detail.data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND listing.region = 'us-east-1'
    nat_gateways:
      name: nat_gateways
      id: aws.ec2.nat_gateways
      x-cfn-schema-name: NatGateway
      x-cfn-type-name: AWS::EC2::NatGateway
      x-identifiers:
        - NatGatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NatGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NatGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NatGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NatGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/nat_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/nat_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/nat_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SecondaryAllocationIds') as secondary_allocation_ids,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.ConnectivityType') as connectivity_type,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MaxDrainDurationSeconds') as max_drain_duration_seconds
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NatGateway'
              AND data__Identifier = '<NatGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SecondaryAllocationIds') as secondary_allocation_ids,
                JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
                JSON_EXTRACT(detail.Properties, '$.ConnectivityType') as connectivity_type,
                JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                JSON_EXTRACT(detail.Properties, '$.AllocationId') as allocation_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.NatGatewayId') as nat_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.MaxDrainDurationSeconds') as max_drain_duration_seconds
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NatGateway'
                AND detail.data__TypeName = 'AWS::EC2::NatGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SecondaryAllocationIds') as secondary_allocation_ids,
                  json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                  json_extract_path_text(Properties, 'ConnectivityType') as connectivity_type,
                  json_extract_path_text(Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                  json_extract_path_text(Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                  json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'MaxDrainDurationSeconds') as max_drain_duration_seconds
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NatGateway'
                  AND data__Identifier = '<NatGatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SecondaryAllocationIds') as secondary_allocation_ids,
                    json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                    json_extract_path_text(detail.Properties, 'ConnectivityType') as connectivity_type,
                    json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                    json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                    json_extract_path_text(detail.Properties, 'AllocationId') as allocation_id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'NatGatewayId') as nat_gateway_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'MaxDrainDurationSeconds') as max_drain_duration_seconds
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NatGateway'
                    AND detail.data__TypeName = 'AWS::EC2::NatGateway'
                    AND listing.region = 'us-east-1'
    nat_gateways_list_only:
      name: nat_gateways_list_only
      id: aws.ec2.nat_gateways_list_only
      x-cfn-schema-name: NatGateway
      x-cfn-type-name: AWS::EC2::NatGateway
      x-identifiers:
        - NatGatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NatGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NatGateway'
                AND region = 'us-east-1'
    nat_gateway_tags:
      name: nat_gateway_tags
      id: aws.ec2.nat_gateway_tags
      x-cfn-schema-name: NatGateway
      x-cfn-type-name: AWS::EC2::NatGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SecondaryAllocationIds') as secondary_allocation_ids,
              JSON_EXTRACT(detail.Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(detail.Properties, '$.ConnectivityType') as connectivity_type,
              JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(detail.Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(detail.Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(detail.Properties, '$.NatGatewayId') as nat_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.MaxDrainDurationSeconds') as max_drain_duration_seconds
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NatGateway'
              AND detail.data__TypeName = 'AWS::EC2::NatGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SecondaryAllocationIds') as secondary_allocation_ids,
                json_extract_path_text(detail.Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(detail.Properties, 'ConnectivityType') as connectivity_type,
                json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                json_extract_path_text(detail.Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                json_extract_path_text(detail.Properties, 'AllocationId') as allocation_id,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(detail.Properties, 'NatGatewayId') as nat_gateway_id,
                json_extract_path_text(detail.Properties, 'MaxDrainDurationSeconds') as max_drain_duration_seconds
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NatGateway'
                AND detail.data__TypeName = 'AWS::EC2::NatGateway'
                AND listing.region = 'us-east-1'
    network_acls:
      name: network_acls
      id: aws.ec2.network_acls
      x-cfn-schema-name: NetworkAcl
      x-cfn-type-name: AWS::EC2::NetworkAcl
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkAcl&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkAcl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkAcl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkAcl"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_acls/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_acls/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_acls/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkAcl'
                AND detail.data__TypeName = 'AWS::EC2::NetworkAcl'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkAcl'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkAcl'
                    AND listing.region = 'us-east-1'
    network_acls_list_only:
      name: network_acls_list_only
      id: aws.ec2.network_acls_list_only
      x-cfn-schema-name: NetworkAcl
      x-cfn-type-name: AWS::EC2::NetworkAcl
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
                AND region = 'us-east-1'
    network_acl_tags:
      name: network_acl_tags
      id: aws.ec2.network_acl_tags
      x-cfn-schema-name: NetworkAcl
      x-cfn-type-name: AWS::EC2::NetworkAcl
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Id') as id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkAcl'
              AND detail.data__TypeName = 'AWS::EC2::NetworkAcl'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkAcl'
                AND detail.data__TypeName = 'AWS::EC2::NetworkAcl'
                AND listing.region = 'us-east-1'
    network_insights_access_scopes:
      name: network_insights_access_scopes
      id: aws.ec2.network_insights_access_scopes
      x-cfn-schema-name: NetworkInsightsAccessScope
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScope
      x-identifiers:
        - NetworkInsightsAccessScopeId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAccessScope&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScope"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scopes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scopes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scopes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
              JSON_EXTRACT(Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(Properties, '$.UpdatedDate') as updated_date,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MatchPaths') as match_paths,
              JSON_EXTRACT(Properties, '$.ExcludePaths') as exclude_paths
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND data__Identifier = '<NetworkInsightsAccessScopeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedDate') as created_date,
                JSON_EXTRACT(detail.Properties, '$.UpdatedDate') as updated_date,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.MatchPaths') as match_paths,
                JSON_EXTRACT(detail.Properties, '$.ExcludePaths') as exclude_paths
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                  json_extract_path_text(Properties, 'NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
                  json_extract_path_text(Properties, 'CreatedDate') as created_date,
                  json_extract_path_text(Properties, 'UpdatedDate') as updated_date,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'MatchPaths') as match_paths,
                  json_extract_path_text(Properties, 'ExcludePaths') as exclude_paths
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                  AND data__Identifier = '<NetworkInsightsAccessScopeId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
                    json_extract_path_text(detail.Properties, 'CreatedDate') as created_date,
                    json_extract_path_text(detail.Properties, 'UpdatedDate') as updated_date,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'MatchPaths') as match_paths,
                    json_extract_path_text(detail.Properties, 'ExcludePaths') as exclude_paths
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                    AND listing.region = 'us-east-1'
    network_insights_access_scopes_list_only:
      name: network_insights_access_scopes_list_only
      id: aws.ec2.network_insights_access_scopes_list_only
      x-cfn-schema-name: NetworkInsightsAccessScope
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScope
      x-identifiers:
        - NetworkInsightsAccessScopeId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND region = 'us-east-1'
    network_insights_access_scope_tags:
      name: network_insights_access_scope_tags
      id: aws.ec2.network_insights_access_scope_tags
      x-cfn-schema-name: NetworkInsightsAccessScope
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScope
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(detail.Properties, '$.UpdatedDate') as updated_date,
              JSON_EXTRACT(detail.Properties, '$.MatchPaths') as match_paths,
              JSON_EXTRACT(detail.Properties, '$.ExcludePaths') as exclude_paths
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
                json_extract_path_text(detail.Properties, 'CreatedDate') as created_date,
                json_extract_path_text(detail.Properties, 'UpdatedDate') as updated_date,
                json_extract_path_text(detail.Properties, 'MatchPaths') as match_paths,
                json_extract_path_text(detail.Properties, 'ExcludePaths') as exclude_paths
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND listing.region = 'us-east-1'
    network_insights_access_scope_analyses:
      name: network_insights_access_scope_analyses
      id: aws.ec2.network_insights_access_scope_analyses
      x-cfn-schema-name: NetworkInsightsAccessScopeAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScopeAnalysis
      x-identifiers:
        - NetworkInsightsAccessScopeAnalysisId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAccessScopeAnalysis&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScopeAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScopeAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAccessScopeAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scope_analyses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scope_analyses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_insights_access_scope_analyses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.FindingsFound') as findings_found,
              JSON_EXTRACT(Properties, '$.AnalyzedEniCount') as analyzed_eni_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND data__Identifier = '<NetworkInsightsAccessScopeAnalysisId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.StartDate') as start_date,
                JSON_EXTRACT(detail.Properties, '$.EndDate') as end_date,
                JSON_EXTRACT(detail.Properties, '$.FindingsFound') as findings_found,
                JSON_EXTRACT(detail.Properties, '$.AnalyzedEniCount') as analyzed_eni_count,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
                  json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
                  json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'StartDate') as start_date,
                  json_extract_path_text(Properties, 'EndDate') as end_date,
                  json_extract_path_text(Properties, 'FindingsFound') as findings_found,
                  json_extract_path_text(Properties, 'AnalyzedEniCount') as analyzed_eni_count,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                  AND data__Identifier = '<NetworkInsightsAccessScopeAnalysisId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'StartDate') as start_date,
                    json_extract_path_text(detail.Properties, 'EndDate') as end_date,
                    json_extract_path_text(detail.Properties, 'FindingsFound') as findings_found,
                    json_extract_path_text(detail.Properties, 'AnalyzedEniCount') as analyzed_eni_count,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                    AND listing.region = 'us-east-1'
    network_insights_access_scope_analyses_list_only:
      name: network_insights_access_scope_analyses_list_only
      id: aws.ec2.network_insights_access_scope_analyses_list_only
      x-cfn-schema-name: NetworkInsightsAccessScopeAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScopeAnalysis
      x-identifiers:
        - NetworkInsightsAccessScopeAnalysisId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND region = 'us-east-1'
    network_insights_access_scope_analysis_tags:
      name: network_insights_access_scope_analysis_tags
      id: aws.ec2.network_insights_access_scope_analysis_tags
      x-cfn-schema-name: NetworkInsightsAccessScopeAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAccessScopeAnalysis
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(detail.Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(detail.Properties, '$.FindingsFound') as findings_found,
              JSON_EXTRACT(detail.Properties, '$.AnalyzedEniCount') as analyzed_eni_count
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'StartDate') as start_date,
                json_extract_path_text(detail.Properties, 'EndDate') as end_date,
                json_extract_path_text(detail.Properties, 'FindingsFound') as findings_found,
                json_extract_path_text(detail.Properties, 'AnalyzedEniCount') as analyzed_eni_count
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND listing.region = 'us-east-1'
    network_insights_analyses:
      name: network_insights_analyses
      id: aws.ec2.network_insights_analyses
      x-cfn-schema-name: NetworkInsightsAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAnalysis
      x-identifiers:
        - NetworkInsightsAnalysisId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAnalysis&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsAnalysis"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_insights_analyses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_insights_analyses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_insights_analyses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ReturnPathComponents') as return_path_components,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(Properties, '$.NetworkPathFound') as network_path_found,
              JSON_EXTRACT(Properties, '$.SuggestedAccounts') as suggested_accounts,
              JSON_EXTRACT(Properties, '$.FilterInArns') as filter_in_arns,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(Properties, '$.AlternatePathHints') as alternate_path_hints,
              JSON_EXTRACT(Properties, '$.Explanations') as explanations,
              JSON_EXTRACT(Properties, '$.ForwardPathComponents') as forward_path_components,
              JSON_EXTRACT(Properties, '$.AdditionalAccounts') as additional_accounts,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND data__Identifier = '<NetworkInsightsAnalysisId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.ReturnPathComponents') as return_path_components,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkPathFound') as network_path_found,
                JSON_EXTRACT(detail.Properties, '$.SuggestedAccounts') as suggested_accounts,
                JSON_EXTRACT(detail.Properties, '$.FilterInArns') as filter_in_arns,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.StartDate') as start_date,
                JSON_EXTRACT(detail.Properties, '$.AlternatePathHints') as alternate_path_hints,
                JSON_EXTRACT(detail.Properties, '$.Explanations') as explanations,
                JSON_EXTRACT(detail.Properties, '$.ForwardPathComponents') as forward_path_components,
                JSON_EXTRACT(detail.Properties, '$.AdditionalAccounts') as additional_accounts,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'ReturnPathComponents') as return_path_components,
                  json_extract_path_text(Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id,
                  json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                  json_extract_path_text(Properties, 'NetworkPathFound') as network_path_found,
                  json_extract_path_text(Properties, 'SuggestedAccounts') as suggested_accounts,
                  json_extract_path_text(Properties, 'FilterInArns') as filter_in_arns,
                  json_extract_path_text(Properties, 'NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'StartDate') as start_date,
                  json_extract_path_text(Properties, 'AlternatePathHints') as alternate_path_hints,
                  json_extract_path_text(Properties, 'Explanations') as explanations,
                  json_extract_path_text(Properties, 'ForwardPathComponents') as forward_path_components,
                  json_extract_path_text(Properties, 'AdditionalAccounts') as additional_accounts,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                  AND data__Identifier = '<NetworkInsightsAnalysisId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'ReturnPathComponents') as return_path_components,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                    json_extract_path_text(detail.Properties, 'NetworkPathFound') as network_path_found,
                    json_extract_path_text(detail.Properties, 'SuggestedAccounts') as suggested_accounts,
                    json_extract_path_text(detail.Properties, 'FilterInArns') as filter_in_arns,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'StartDate') as start_date,
                    json_extract_path_text(detail.Properties, 'AlternatePathHints') as alternate_path_hints,
                    json_extract_path_text(detail.Properties, 'Explanations') as explanations,
                    json_extract_path_text(detail.Properties, 'ForwardPathComponents') as forward_path_components,
                    json_extract_path_text(detail.Properties, 'AdditionalAccounts') as additional_accounts,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                    AND listing.region = 'us-east-1'
    network_insights_analyses_list_only:
      name: network_insights_analyses_list_only
      id: aws.ec2.network_insights_analyses_list_only
      x-cfn-schema-name: NetworkInsightsAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAnalysis
      x-identifiers:
        - NetworkInsightsAnalysisId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND region = 'us-east-1'
    network_insights_analysis_tags:
      name: network_insights_analysis_tags
      id: aws.ec2.network_insights_analysis_tags
      x-cfn-schema-name: NetworkInsightsAnalysis
      x-cfn-type-name: AWS::EC2::NetworkInsightsAnalysis
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.ReturnPathComponents') as return_path_components,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(detail.Properties, '$.NetworkPathFound') as network_path_found,
              JSON_EXTRACT(detail.Properties, '$.SuggestedAccounts') as suggested_accounts,
              JSON_EXTRACT(detail.Properties, '$.FilterInArns') as filter_in_arns,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(detail.Properties, '$.AlternatePathHints') as alternate_path_hints,
              JSON_EXTRACT(detail.Properties, '$.Explanations') as explanations,
              JSON_EXTRACT(detail.Properties, '$.ForwardPathComponents') as forward_path_components,
              JSON_EXTRACT(detail.Properties, '$.AdditionalAccounts') as additional_accounts
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'ReturnPathComponents') as return_path_components,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id,
                json_extract_path_text(detail.Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                json_extract_path_text(detail.Properties, 'NetworkPathFound') as network_path_found,
                json_extract_path_text(detail.Properties, 'SuggestedAccounts') as suggested_accounts,
                json_extract_path_text(detail.Properties, 'FilterInArns') as filter_in_arns,
                json_extract_path_text(detail.Properties, 'NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'StartDate') as start_date,
                json_extract_path_text(detail.Properties, 'AlternatePathHints') as alternate_path_hints,
                json_extract_path_text(detail.Properties, 'Explanations') as explanations,
                json_extract_path_text(detail.Properties, 'ForwardPathComponents') as forward_path_components,
                json_extract_path_text(detail.Properties, 'AdditionalAccounts') as additional_accounts
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND listing.region = 'us-east-1'
    network_insights_paths:
      name: network_insights_paths
      id: aws.ec2.network_insights_paths
      x-cfn-schema-name: NetworkInsightsPath
      x-cfn-type-name: AWS::EC2::NetworkInsightsPath
      x-identifiers:
        - NetworkInsightsPathId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInsightsPath&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsPath"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsPath"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInsightsPath"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_insights_paths/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_insights_paths/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_insights_paths/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathArn') as network_insights_path_arn,
              JSON_EXTRACT(Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(Properties, '$.SourceIp') as source_ip,
              JSON_EXTRACT(Properties, '$.FilterAtSource') as filter_at_source,
              JSON_EXTRACT(Properties, '$.FilterAtDestination') as filter_at_destination,
              JSON_EXTRACT(Properties, '$.DestinationIp') as destination_ip,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.DestinationPort') as destination_port,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND data__Identifier = '<NetworkInsightsPathId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathArn') as network_insights_path_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedDate') as created_date,
                JSON_EXTRACT(detail.Properties, '$.SourceIp') as source_ip,
                JSON_EXTRACT(detail.Properties, '$.FilterAtSource') as filter_at_source,
                JSON_EXTRACT(detail.Properties, '$.FilterAtDestination') as filter_at_destination,
                JSON_EXTRACT(detail.Properties, '$.DestinationIp') as destination_ip,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.Destination') as destination,
                JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
                JSON_EXTRACT(detail.Properties, '$.DestinationArn') as destination_arn,
                JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
                JSON_EXTRACT(detail.Properties, '$.DestinationPort') as destination_port,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                  json_extract_path_text(Properties, 'NetworkInsightsPathArn') as network_insights_path_arn,
                  json_extract_path_text(Properties, 'CreatedDate') as created_date,
                  json_extract_path_text(Properties, 'SourceIp') as source_ip,
                  json_extract_path_text(Properties, 'FilterAtSource') as filter_at_source,
                  json_extract_path_text(Properties, 'FilterAtDestination') as filter_at_destination,
                  json_extract_path_text(Properties, 'DestinationIp') as destination_ip,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'Destination') as destination,
                  json_extract_path_text(Properties, 'SourceArn') as source_arn,
                  json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                  json_extract_path_text(Properties, 'Protocol') as protocol,
                  json_extract_path_text(Properties, 'DestinationPort') as destination_port,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                  AND data__Identifier = '<NetworkInsightsPathId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                    json_extract_path_text(detail.Properties, 'NetworkInsightsPathArn') as network_insights_path_arn,
                    json_extract_path_text(detail.Properties, 'CreatedDate') as created_date,
                    json_extract_path_text(detail.Properties, 'SourceIp') as source_ip,
                    json_extract_path_text(detail.Properties, 'FilterAtSource') as filter_at_source,
                    json_extract_path_text(detail.Properties, 'FilterAtDestination') as filter_at_destination,
                    json_extract_path_text(detail.Properties, 'DestinationIp') as destination_ip,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'Destination') as destination,
                    json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                    json_extract_path_text(detail.Properties, 'DestinationArn') as destination_arn,
                    json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                    json_extract_path_text(detail.Properties, 'DestinationPort') as destination_port,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                    AND listing.region = 'us-east-1'
    network_insights_paths_list_only:
      name: network_insights_paths_list_only
      id: aws.ec2.network_insights_paths_list_only
      x-cfn-schema-name: NetworkInsightsPath
      x-cfn-type-name: AWS::EC2::NetworkInsightsPath
      x-identifiers:
        - NetworkInsightsPathId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND region = 'us-east-1'
    network_insights_path_tags:
      name: network_insights_path_tags
      id: aws.ec2.network_insights_path_tags
      x-cfn-schema-name: NetworkInsightsPath
      x-cfn-type-name: AWS::EC2::NetworkInsightsPath
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(detail.Properties, '$.NetworkInsightsPathArn') as network_insights_path_arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(detail.Properties, '$.SourceIp') as source_ip,
              JSON_EXTRACT(detail.Properties, '$.FilterAtSource') as filter_at_source,
              JSON_EXTRACT(detail.Properties, '$.FilterAtDestination') as filter_at_destination,
              JSON_EXTRACT(detail.Properties, '$.DestinationIp') as destination_ip,
              JSON_EXTRACT(detail.Properties, '$.Source') as source,
              JSON_EXTRACT(detail.Properties, '$.Destination') as destination,
              JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(detail.Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(detail.Properties, '$.DestinationPort') as destination_port
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                json_extract_path_text(detail.Properties, 'NetworkInsightsPathArn') as network_insights_path_arn,
                json_extract_path_text(detail.Properties, 'CreatedDate') as created_date,
                json_extract_path_text(detail.Properties, 'SourceIp') as source_ip,
                json_extract_path_text(detail.Properties, 'FilterAtSource') as filter_at_source,
                json_extract_path_text(detail.Properties, 'FilterAtDestination') as filter_at_destination,
                json_extract_path_text(detail.Properties, 'DestinationIp') as destination_ip,
                json_extract_path_text(detail.Properties, 'Source') as source,
                json_extract_path_text(detail.Properties, 'Destination') as destination,
                json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                json_extract_path_text(detail.Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                json_extract_path_text(detail.Properties, 'DestinationPort') as destination_port
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND listing.region = 'us-east-1'
    network_interface_attachments:
      name: network_interface_attachments
      id: aws.ec2.network_interface_attachments
      x-cfn-schema-name: NetworkInterfaceAttachment
      x-cfn-type-name: AWS::EC2::NetworkInterfaceAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkInterfaceAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterfaceAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterfaceAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkInterfaceAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_interface_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_interface_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/network_interface_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.DeleteOnTermination') as delete_on_termination,
              JSON_EXTRACT(Properties, '$.DeviceIndex') as device_index,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.EnaSrdSpecification') as ena_srd_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AttachmentId') as attachment_id,
                JSON_EXTRACT(detail.Properties, '$.DeleteOnTermination') as delete_on_termination,
                JSON_EXTRACT(detail.Properties, '$.DeviceIndex') as device_index,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.EnaSrdSpecification') as ena_srd_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                AND detail.data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                  json_extract_path_text(Properties, 'DeleteOnTermination') as delete_on_termination,
                  json_extract_path_text(Properties, 'DeviceIndex') as device_index,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'EnaSrdSpecification') as ena_srd_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                  AND data__Identifier = '<AttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AttachmentId') as attachment_id,
                    json_extract_path_text(detail.Properties, 'DeleteOnTermination') as delete_on_termination,
                    json_extract_path_text(detail.Properties, 'DeviceIndex') as device_index,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'EnaSrdSpecification') as ena_srd_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                    AND listing.region = 'us-east-1'
    network_interface_attachments_list_only:
      name: network_interface_attachments_list_only
      id: aws.ec2.network_interface_attachments_list_only
      x-cfn-schema-name: NetworkInterfaceAttachment
      x-cfn-type-name: AWS::EC2::NetworkInterfaceAttachment
      x-identifiers:
        - AttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                AND region = 'us-east-1'
    network_performance_metric_subscriptions:
      name: network_performance_metric_subscriptions
      id: aws.ec2.network_performance_metric_subscriptions
      x-cfn-schema-name: NetworkPerformanceMetricSubscription
      x-cfn-type-name: AWS::EC2::NetworkPerformanceMetricSubscription
      x-identifiers:
        - Source
        - Destination
        - Metric
        - Statistic
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__NetworkPerformanceMetricSubscription&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkPerformanceMetricSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::NetworkPerformanceMetricSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/network_performance_metric_subscriptions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/network_performance_metric_subscriptions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.Metric') as metric,
              JSON_EXTRACT(Properties, '$.Statistic') as statistic
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
              AND data__Identifier = '<Source>|<Destination>|<Metric>|<Statistic>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.Destination') as destination,
                JSON_EXTRACT(detail.Properties, '$.Metric') as metric,
                JSON_EXTRACT(detail.Properties, '$.Statistic') as statistic
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                AND detail.data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'Destination') as destination,
                  json_extract_path_text(Properties, 'Metric') as metric,
                  json_extract_path_text(Properties, 'Statistic') as statistic
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                  AND data__Identifier = '<Source>|<Destination>|<Metric>|<Statistic>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'Destination') as destination,
                    json_extract_path_text(detail.Properties, 'Metric') as metric,
                    json_extract_path_text(detail.Properties, 'Statistic') as statistic
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                    AND detail.data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                    AND listing.region = 'us-east-1'
    network_performance_metric_subscriptions_list_only:
      name: network_performance_metric_subscriptions_list_only
      id: aws.ec2.network_performance_metric_subscriptions_list_only
      x-cfn-schema-name: NetworkPerformanceMetricSubscription
      x-cfn-type-name: AWS::EC2::NetworkPerformanceMetricSubscription
      x-identifiers:
        - Source
        - Destination
        - Metric
        - Statistic
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.Metric') as metric,
              JSON_EXTRACT(Properties, '$.Statistic') as statistic
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Destination') as destination,
                json_extract_path_text(Properties, 'Metric') as metric,
                json_extract_path_text(Properties, 'Statistic') as statistic
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                AND region = 'us-east-1'
    placement_groups:
      name: placement_groups
      id: aws.ec2.placement_groups
      x-cfn-schema-name: PlacementGroup
      x-cfn-type-name: AWS::EC2::PlacementGroup
      x-identifiers:
        - GroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PlacementGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::PlacementGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::PlacementGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/placement_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/placement_groups/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Strategy') as strategy,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.SpreadLevel') as spread_level,
              JSON_EXTRACT(Properties, '$.PartitionCount') as partition_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
              AND data__Identifier = '<GroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Strategy') as strategy,
                JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
                JSON_EXTRACT(detail.Properties, '$.SpreadLevel') as spread_level,
                JSON_EXTRACT(detail.Properties, '$.PartitionCount') as partition_count,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::PlacementGroup'
                AND detail.data__TypeName = 'AWS::EC2::PlacementGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Strategy') as strategy,
                  json_extract_path_text(Properties, 'GroupName') as group_name,
                  json_extract_path_text(Properties, 'SpreadLevel') as spread_level,
                  json_extract_path_text(Properties, 'PartitionCount') as partition_count,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
                  AND data__Identifier = '<GroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Strategy') as strategy,
                    json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                    json_extract_path_text(detail.Properties, 'SpreadLevel') as spread_level,
                    json_extract_path_text(detail.Properties, 'PartitionCount') as partition_count,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::PlacementGroup'
                    AND detail.data__TypeName = 'AWS::EC2::PlacementGroup'
                    AND listing.region = 'us-east-1'
    placement_groups_list_only:
      name: placement_groups_list_only
      id: aws.ec2.placement_groups_list_only
      x-cfn-schema-name: PlacementGroup
      x-cfn-type-name: AWS::EC2::PlacementGroup
      x-identifiers:
        - GroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
                AND region = 'us-east-1'
    placement_group_tags:
      name: placement_group_tags
      id: aws.ec2.placement_group_tags
      x-cfn-schema-name: PlacementGroup
      x-cfn-type-name: AWS::EC2::PlacementGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Strategy') as strategy,
              JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(detail.Properties, '$.SpreadLevel') as spread_level,
              JSON_EXTRACT(detail.Properties, '$.PartitionCount') as partition_count
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::PlacementGroup'
              AND detail.data__TypeName = 'AWS::EC2::PlacementGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Strategy') as strategy,
                json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                json_extract_path_text(detail.Properties, 'SpreadLevel') as spread_level,
                json_extract_path_text(detail.Properties, 'PartitionCount') as partition_count
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::PlacementGroup'
                AND detail.data__TypeName = 'AWS::EC2::PlacementGroup'
                AND listing.region = 'us-east-1'
    prefix_lists:
      name: prefix_lists
      id: aws.ec2.prefix_lists
      x-cfn-schema-name: PrefixList
      x-cfn-type-name: AWS::EC2::PrefixList
      x-identifiers:
        - PrefixListId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PrefixList&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::PrefixList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::PrefixList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::PrefixList"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/prefix_lists/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/prefix_lists/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/prefix_lists/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PrefixListName') as prefix_list_name,
              JSON_EXTRACT(Properties, '$.PrefixListId') as prefix_list_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(Properties, '$.MaxEntries') as max_entries,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Entries') as entries,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PrefixList'
              AND data__Identifier = '<PrefixListId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PrefixListName') as prefix_list_name,
                JSON_EXTRACT(detail.Properties, '$.PrefixListId') as prefix_list_id,
                JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
                JSON_EXTRACT(detail.Properties, '$.AddressFamily') as address_family,
                JSON_EXTRACT(detail.Properties, '$.MaxEntries') as max_entries,
                JSON_EXTRACT(detail.Properties, '$.Version') as version,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Entries') as entries,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::PrefixList'
                AND detail.data__TypeName = 'AWS::EC2::PrefixList'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PrefixListName') as prefix_list_name,
                  json_extract_path_text(Properties, 'PrefixListId') as prefix_list_id,
                  json_extract_path_text(Properties, 'OwnerId') as owner_id,
                  json_extract_path_text(Properties, 'AddressFamily') as address_family,
                  json_extract_path_text(Properties, 'MaxEntries') as max_entries,
                  json_extract_path_text(Properties, 'Version') as version,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Entries') as entries,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PrefixList'
                  AND data__Identifier = '<PrefixListId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PrefixListName') as prefix_list_name,
                    json_extract_path_text(detail.Properties, 'PrefixListId') as prefix_list_id,
                    json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                    json_extract_path_text(detail.Properties, 'AddressFamily') as address_family,
                    json_extract_path_text(detail.Properties, 'MaxEntries') as max_entries,
                    json_extract_path_text(detail.Properties, 'Version') as version,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Entries') as entries,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::PrefixList'
                    AND detail.data__TypeName = 'AWS::EC2::PrefixList'
                    AND listing.region = 'us-east-1'
    prefix_lists_list_only:
      name: prefix_lists_list_only
      id: aws.ec2.prefix_lists_list_only
      x-cfn-schema-name: PrefixList
      x-cfn-type-name: AWS::EC2::PrefixList
      x-identifiers:
        - PrefixListId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PrefixListId') as prefix_list_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PrefixList'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PrefixListId') as prefix_list_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PrefixList'
                AND region = 'us-east-1'
    prefix_list_tags:
      name: prefix_list_tags
      id: aws.ec2.prefix_list_tags
      x-cfn-schema-name: PrefixList
      x-cfn-type-name: AWS::EC2::PrefixList
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PrefixListName') as prefix_list_name,
              JSON_EXTRACT(detail.Properties, '$.PrefixListId') as prefix_list_id,
              JSON_EXTRACT(detail.Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(detail.Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(detail.Properties, '$.MaxEntries') as max_entries,
              JSON_EXTRACT(detail.Properties, '$.Version') as version,
              JSON_EXTRACT(detail.Properties, '$.Entries') as entries,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::PrefixList'
              AND detail.data__TypeName = 'AWS::EC2::PrefixList'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PrefixListName') as prefix_list_name,
                json_extract_path_text(detail.Properties, 'PrefixListId') as prefix_list_id,
                json_extract_path_text(detail.Properties, 'OwnerId') as owner_id,
                json_extract_path_text(detail.Properties, 'AddressFamily') as address_family,
                json_extract_path_text(detail.Properties, 'MaxEntries') as max_entries,
                json_extract_path_text(detail.Properties, 'Version') as version,
                json_extract_path_text(detail.Properties, 'Entries') as entries,
                json_extract_path_text(detail.Properties, 'Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::PrefixList'
                AND detail.data__TypeName = 'AWS::EC2::PrefixList'
                AND listing.region = 'us-east-1'
    routes:
      name: routes
      id: aws.ec2.routes
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::EC2::Route
      x-identifiers:
        - RouteTableId
        - CidrBlock
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/routes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
              JSON_EXTRACT(Properties, '$.EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcEndpointId') as vpc_endpoint_id,
              JSON_EXTRACT(Properties, '$.VpcPeeringConnectionId') as vpc_peering_connection_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Route'
              AND data__Identifier = '<RouteTableId>|<CidrBlock>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CarrierGatewayId') as carrier_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
                JSON_EXTRACT(detail.Properties, '$.CoreNetworkArn') as core_network_arn,
                JSON_EXTRACT(detail.Properties, '$.DestinationCidrBlock') as destination_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
                JSON_EXTRACT(detail.Properties, '$.EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.GatewayId') as gateway_id,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.LocalGatewayId') as local_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.NatGatewayId') as nat_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.RouteTableId') as route_table_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.VpcEndpointId') as vpc_endpoint_id,
                JSON_EXTRACT(detail.Properties, '$.VpcPeeringConnectionId') as vpc_peering_connection_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::Route'
                AND detail.data__TypeName = 'AWS::EC2::Route'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id,
                  json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                  json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                  json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                  json_extract_path_text(Properties, 'DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
                  json_extract_path_text(Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                  json_extract_path_text(Properties, 'EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
                  json_extract_path_text(Properties, 'GatewayId') as gateway_id,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                  json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'VpcEndpointId') as vpc_endpoint_id,
                  json_extract_path_text(Properties, 'VpcPeeringConnectionId') as vpc_peering_connection_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Route'
                  AND data__Identifier = '<RouteTableId>|<CidrBlock>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CarrierGatewayId') as carrier_gateway_id,
                    json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                    json_extract_path_text(detail.Properties, 'CoreNetworkArn') as core_network_arn,
                    json_extract_path_text(detail.Properties, 'DestinationCidrBlock') as destination_cidr_block,
                    json_extract_path_text(detail.Properties, 'DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
                    json_extract_path_text(detail.Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                    json_extract_path_text(detail.Properties, 'EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
                    json_extract_path_text(detail.Properties, 'GatewayId') as gateway_id,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'LocalGatewayId') as local_gateway_id,
                    json_extract_path_text(detail.Properties, 'NatGatewayId') as nat_gateway_id,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'RouteTableId') as route_table_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'VpcEndpointId') as vpc_endpoint_id,
                    json_extract_path_text(detail.Properties, 'VpcPeeringConnectionId') as vpc_peering_connection_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::Route'
                    AND detail.data__TypeName = 'AWS::EC2::Route'
                    AND listing.region = 'us-east-1'
    routes_list_only:
      name: routes_list_only
      id: aws.ec2.routes_list_only
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::EC2::Route
      x-identifiers:
        - RouteTableId
        - CidrBlock
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Route'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'CidrBlock') as cidr_block
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Route'
                AND region = 'us-east-1'
    route_tables:
      name: route_tables
      id: aws.ec2.route_tables
      x-cfn-schema-name: RouteTable
      x-cfn-type-name: AWS::EC2::RouteTable
      x-identifiers:
        - RouteTableId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RouteTable&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::RouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::RouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::RouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/route_tables/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/route_tables/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/route_tables/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::RouteTable'
              AND data__Identifier = '<RouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RouteTableId') as route_table_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::RouteTable'
                AND detail.data__TypeName = 'AWS::EC2::RouteTable'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::RouteTable'
                  AND data__Identifier = '<RouteTableId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RouteTableId') as route_table_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::RouteTable'
                    AND detail.data__TypeName = 'AWS::EC2::RouteTable'
                    AND listing.region = 'us-east-1'
    route_tables_list_only:
      name: route_tables_list_only
      id: aws.ec2.route_tables_list_only
      x-cfn-schema-name: RouteTable
      x-cfn-type-name: AWS::EC2::RouteTable
      x-identifiers:
        - RouteTableId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::RouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::RouteTable'
                AND region = 'us-east-1'
    route_table_tags:
      name: route_table_tags
      id: aws.ec2.route_table_tags
      x-cfn-schema-name: RouteTable
      x-cfn-type-name: AWS::EC2::RouteTable
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::RouteTable'
              AND detail.data__TypeName = 'AWS::EC2::RouteTable'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::RouteTable'
                AND detail.data__TypeName = 'AWS::EC2::RouteTable'
                AND listing.region = 'us-east-1'
    security_groups:
      name: security_groups
      id: aws.ec2.security_groups
      x-cfn-schema-name: SecurityGroup
      x-cfn-type-name: AWS::EC2::SecurityGroup
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/security_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupDescription') as group_description,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SecurityGroupIngress') as security_group_ingress,
              JSON_EXTRACT(Properties, '$.SecurityGroupEgress') as security_group_egress,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GroupDescription') as group_description,
                JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIngress') as security_group_ingress,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupEgress') as security_group_egress,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroup'
                AND detail.data__TypeName = 'AWS::EC2::SecurityGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GroupDescription') as group_description,
                  json_extract_path_text(Properties, 'GroupName') as group_name,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'SecurityGroupIngress') as security_group_ingress,
                  json_extract_path_text(Properties, 'SecurityGroupEgress') as security_group_egress,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'GroupId') as group_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroup'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GroupDescription') as group_description,
                    json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIngress') as security_group_ingress,
                    json_extract_path_text(detail.Properties, 'SecurityGroupEgress') as security_group_egress,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroup'
                    AND detail.data__TypeName = 'AWS::EC2::SecurityGroup'
                    AND listing.region = 'us-east-1'
    security_groups_list_only:
      name: security_groups_list_only
      id: aws.ec2.security_groups_list_only
      x-cfn-schema-name: SecurityGroup
      x-cfn-type-name: AWS::EC2::SecurityGroup
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroup'
                AND region = 'us-east-1'
    security_group_tags:
      name: security_group_tags
      id: aws.ec2.security_group_tags
      x-cfn-schema-name: SecurityGroup
      x-cfn-type-name: AWS::EC2::SecurityGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.GroupDescription') as group_description,
              JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIngress') as security_group_ingress,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupEgress') as security_group_egress,
              JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroup'
              AND detail.data__TypeName = 'AWS::EC2::SecurityGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'GroupDescription') as group_description,
                json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'SecurityGroupIngress') as security_group_ingress,
                json_extract_path_text(detail.Properties, 'SecurityGroupEgress') as security_group_egress,
                json_extract_path_text(detail.Properties, 'GroupId') as group_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroup'
                AND detail.data__TypeName = 'AWS::EC2::SecurityGroup'
                AND listing.region = 'us-east-1'
    security_group_egresses:
      name: security_group_egresses
      id: aws.ec2.security_group_egresses
      x-cfn-schema-name: SecurityGroupEgress
      x-cfn-type-name: AWS::EC2::SecurityGroupEgress
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityGroupEgress&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupEgress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupEgress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupEgress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_group_egresses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_group_egresses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/security_group_egresses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CidrIp') as cidr_ip,
              JSON_EXTRACT(Properties, '$.CidrIpv6') as cidr_ipv6,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FromPort') as from_port,
              JSON_EXTRACT(Properties, '$.ToPort') as to_port,
              JSON_EXTRACT(Properties, '$.IpProtocol') as ip_protocol,
              JSON_EXTRACT(Properties, '$.DestinationSecurityGroupId') as destination_security_group_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CidrIp') as cidr_ip,
                JSON_EXTRACT(detail.Properties, '$.CidrIpv6') as cidr_ipv6,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FromPort') as from_port,
                JSON_EXTRACT(detail.Properties, '$.ToPort') as to_port,
                JSON_EXTRACT(detail.Properties, '$.IpProtocol') as ip_protocol,
                JSON_EXTRACT(detail.Properties, '$.DestinationSecurityGroupId') as destination_security_group_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                AND detail.data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CidrIp') as cidr_ip,
                  json_extract_path_text(Properties, 'CidrIpv6') as cidr_ipv6,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FromPort') as from_port,
                  json_extract_path_text(Properties, 'ToPort') as to_port,
                  json_extract_path_text(Properties, 'IpProtocol') as ip_protocol,
                  json_extract_path_text(Properties, 'DestinationSecurityGroupId') as destination_security_group_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                  json_extract_path_text(Properties, 'GroupId') as group_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CidrIp') as cidr_ip,
                    json_extract_path_text(detail.Properties, 'CidrIpv6') as cidr_ipv6,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FromPort') as from_port,
                    json_extract_path_text(detail.Properties, 'ToPort') as to_port,
                    json_extract_path_text(detail.Properties, 'IpProtocol') as ip_protocol,
                    json_extract_path_text(detail.Properties, 'DestinationSecurityGroupId') as destination_security_group_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                    AND detail.data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                    AND listing.region = 'us-east-1'
    security_group_egresses_list_only:
      name: security_group_egresses_list_only
      id: aws.ec2.security_group_egresses_list_only
      x-cfn-schema-name: SecurityGroupEgress
      x-cfn-type-name: AWS::EC2::SecurityGroupEgress
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                AND region = 'us-east-1'
    security_group_ingresses:
      name: security_group_ingresses
      id: aws.ec2.security_group_ingresses
      x-cfn-schema-name: SecurityGroupIngress
      x-cfn-type-name: AWS::EC2::SecurityGroupIngress
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityGroupIngress&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupIngress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupIngress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupIngress"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_group_ingresses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_group_ingresses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/security_group_ingresses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CidrIp') as cidr_ip,
              JSON_EXTRACT(Properties, '$.CidrIpv6') as cidr_ipv6,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FromPort') as from_port,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.IpProtocol') as ip_protocol,
              JSON_EXTRACT(Properties, '$.SourcePrefixListId') as source_prefix_list_id,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupId') as source_security_group_id,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupName') as source_security_group_name,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupOwnerId') as source_security_group_owner_id,
              JSON_EXTRACT(Properties, '$.ToPort') as to_port
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.CidrIp') as cidr_ip,
                JSON_EXTRACT(detail.Properties, '$.CidrIpv6') as cidr_ipv6,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FromPort') as from_port,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
                JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
                JSON_EXTRACT(detail.Properties, '$.IpProtocol') as ip_protocol,
                JSON_EXTRACT(detail.Properties, '$.SourcePrefixListId') as source_prefix_list_id,
                JSON_EXTRACT(detail.Properties, '$.SourceSecurityGroupId') as source_security_group_id,
                JSON_EXTRACT(detail.Properties, '$.SourceSecurityGroupName') as source_security_group_name,
                JSON_EXTRACT(detail.Properties, '$.SourceSecurityGroupOwnerId') as source_security_group_owner_id,
                JSON_EXTRACT(detail.Properties, '$.ToPort') as to_port
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                AND detail.data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'CidrIp') as cidr_ip,
                  json_extract_path_text(Properties, 'CidrIpv6') as cidr_ipv6,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FromPort') as from_port,
                  json_extract_path_text(Properties, 'GroupId') as group_id,
                  json_extract_path_text(Properties, 'GroupName') as group_name,
                  json_extract_path_text(Properties, 'IpProtocol') as ip_protocol,
                  json_extract_path_text(Properties, 'SourcePrefixListId') as source_prefix_list_id,
                  json_extract_path_text(Properties, 'SourceSecurityGroupId') as source_security_group_id,
                  json_extract_path_text(Properties, 'SourceSecurityGroupName') as source_security_group_name,
                  json_extract_path_text(Properties, 'SourceSecurityGroupOwnerId') as source_security_group_owner_id,
                  json_extract_path_text(Properties, 'ToPort') as to_port
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'CidrIp') as cidr_ip,
                    json_extract_path_text(detail.Properties, 'CidrIpv6') as cidr_ipv6,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FromPort') as from_port,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                    json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                    json_extract_path_text(detail.Properties, 'IpProtocol') as ip_protocol,
                    json_extract_path_text(detail.Properties, 'SourcePrefixListId') as source_prefix_list_id,
                    json_extract_path_text(detail.Properties, 'SourceSecurityGroupId') as source_security_group_id,
                    json_extract_path_text(detail.Properties, 'SourceSecurityGroupName') as source_security_group_name,
                    json_extract_path_text(detail.Properties, 'SourceSecurityGroupOwnerId') as source_security_group_owner_id,
                    json_extract_path_text(detail.Properties, 'ToPort') as to_port
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                    AND detail.data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                    AND listing.region = 'us-east-1'
    security_group_ingresses_list_only:
      name: security_group_ingresses_list_only
      id: aws.ec2.security_group_ingresses_list_only
      x-cfn-schema-name: SecurityGroupIngress
      x-cfn-type-name: AWS::EC2::SecurityGroupIngress
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                AND region = 'us-east-1'
    security_group_vpc_associations:
      name: security_group_vpc_associations
      id: aws.ec2.security_group_vpc_associations
      x-cfn-schema-name: SecurityGroupVpcAssociation
      x-cfn-type-name: AWS::EC2::SecurityGroupVpcAssociation
      x-identifiers:
        - GroupId
        - VpcId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityGroupVpcAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupVpcAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SecurityGroupVpcAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_group_vpc_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_group_vpc_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcOwnerId') as vpc_owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.StateReason') as state_reason
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
              AND data__Identifier = '<GroupId>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.VpcOwnerId') as vpc_owner_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.StateReason') as state_reason
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                AND detail.data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GroupId') as group_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'VpcOwnerId') as vpc_owner_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'StateReason') as state_reason
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                  AND data__Identifier = '<GroupId>|<VpcId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'VpcOwnerId') as vpc_owner_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'StateReason') as state_reason
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                    AND listing.region = 'us-east-1'
    security_group_vpc_associations_list_only:
      name: security_group_vpc_associations_list_only
      id: aws.ec2.security_group_vpc_associations_list_only
      x-cfn-schema-name: SecurityGroupVpcAssociation
      x-cfn-type-name: AWS::EC2::SecurityGroupVpcAssociation
      x-identifiers:
        - GroupId
        - VpcId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupId') as group_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupVpcAssociation'
                AND region = 'us-east-1'
    snapshot_block_public_accesses:
      name: snapshot_block_public_accesses
      id: aws.ec2.snapshot_block_public_accesses
      x-cfn-schema-name: SnapshotBlockPublicAccess
      x-cfn-type-name: AWS::EC2::SnapshotBlockPublicAccess
      x-identifiers:
        - AccountId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SnapshotBlockPublicAccess&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SnapshotBlockPublicAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SnapshotBlockPublicAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SnapshotBlockPublicAccess"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/snapshot_block_public_accesses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/snapshot_block_public_accesses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/snapshot_block_public_accesses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.AccountId') as account_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                AND detail.data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'AccountId') as account_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                  AND data__Identifier = '<AccountId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'AccountId') as account_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                    AND detail.data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                    AND listing.region = 'us-east-1'
    snapshot_block_public_accesses_list_only:
      name: snapshot_block_public_accesses_list_only
      id: aws.ec2.snapshot_block_public_accesses_list_only
      x-cfn-schema-name: SnapshotBlockPublicAccess
      x-cfn-type-name: AWS::EC2::SnapshotBlockPublicAccess
      x-identifiers:
        - AccountId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                AND region = 'us-east-1'
    spot_fleets:
      name: spot_fleets
      id: aws.ec2.spot_fleets
      x-cfn-schema-name: SpotFleet
      x-cfn-type-name: AWS::EC2::SpotFleet
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SpotFleet&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SpotFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SpotFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SpotFleet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/spot_fleets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/spot_fleets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/spot_fleets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SpotFleetRequestConfigData') as spot_fleet_request_config_data
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SpotFleet'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.SpotFleetRequestConfigData') as spot_fleet_request_config_data
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SpotFleet'
                AND detail.data__TypeName = 'AWS::EC2::SpotFleet'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'SpotFleetRequestConfigData') as spot_fleet_request_config_data
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SpotFleet'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'SpotFleetRequestConfigData') as spot_fleet_request_config_data
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SpotFleet'
                    AND detail.data__TypeName = 'AWS::EC2::SpotFleet'
                    AND listing.region = 'us-east-1'
    spot_fleets_list_only:
      name: spot_fleets_list_only
      id: aws.ec2.spot_fleets_list_only
      x-cfn-schema-name: SpotFleet
      x-cfn-type-name: AWS::EC2::SpotFleet
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SpotFleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SpotFleet'
                AND region = 'us-east-1'
    subnets:
      name: subnets
      id: aws.ec2.subnets
      x-cfn-schema-name: Subnet
      x-cfn-type-name: AWS::EC2::Subnet
      x-identifiers:
        - SubnetId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Subnet&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Subnet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Subnet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::Subnet"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/subnets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.MapPublicIpOnLaunch') as map_public_ip_on_launch,
              JSON_EXTRACT(Properties, '$.EnableLniAtDeviceIndex') as enable_lni_at_device_index,
              JSON_EXTRACT(Properties, '$.NetworkAclAssociationId') as network_acl_association_id,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneId') as availability_zone_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.Ipv6Native') as ipv6_native,
              JSON_EXTRACT(Properties, '$.EnableDns64') as enable_dns64,
              JSON_EXTRACT(Properties, '$.PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Subnet'
              AND data__Identifier = '<SubnetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.MapPublicIpOnLaunch') as map_public_ip_on_launch,
                JSON_EXTRACT(detail.Properties, '$.EnableLniAtDeviceIndex') as enable_lni_at_device_index,
                JSON_EXTRACT(detail.Properties, '$.NetworkAclAssociationId') as network_acl_association_id,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneId') as availability_zone_id,
                JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Native') as ipv6_native,
                JSON_EXTRACT(detail.Properties, '$.EnableDns64') as enable_dns64,
                JSON_EXTRACT(detail.Properties, '$.PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::Subnet'
                AND detail.data__TypeName = 'AWS::EC2::Subnet'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'MapPublicIpOnLaunch') as map_public_ip_on_launch,
                  json_extract_path_text(Properties, 'EnableLniAtDeviceIndex') as enable_lni_at_device_index,
                  json_extract_path_text(Properties, 'NetworkAclAssociationId') as network_acl_association_id,
                  json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                  json_extract_path_text(Properties, 'AvailabilityZoneId') as availability_zone_id,
                  json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                  json_extract_path_text(Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                  json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                  json_extract_path_text(Properties, 'Ipv6Native') as ipv6_native,
                  json_extract_path_text(Properties, 'EnableDns64') as enable_dns64,
                  json_extract_path_text(Properties, 'PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                  json_extract_path_text(Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                  json_extract_path_text(Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                  json_extract_path_text(Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Subnet'
                  AND data__Identifier = '<SubnetId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'MapPublicIpOnLaunch') as map_public_ip_on_launch,
                    json_extract_path_text(detail.Properties, 'EnableLniAtDeviceIndex') as enable_lni_at_device_index,
                    json_extract_path_text(detail.Properties, 'NetworkAclAssociationId') as network_acl_association_id,
                    json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                    json_extract_path_text(detail.Properties, 'AvailabilityZoneId') as availability_zone_id,
                    json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                    json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                    json_extract_path_text(detail.Properties, 'Ipv6Native') as ipv6_native,
                    json_extract_path_text(detail.Properties, 'EnableDns64') as enable_dns64,
                    json_extract_path_text(detail.Properties, 'PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                    json_extract_path_text(detail.Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::Subnet'
                    AND detail.data__TypeName = 'AWS::EC2::Subnet'
                    AND listing.region = 'us-east-1'
    subnets_list_only:
      name: subnets_list_only
      id: aws.ec2.subnets_list_only
      x-cfn-schema-name: Subnet
      x-cfn-type-name: AWS::EC2::Subnet
      x-identifiers:
        - SubnetId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Subnet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Subnet'
                AND region = 'us-east-1'
    subnet_tags:
      name: subnet_tags
      id: aws.ec2.subnet_tags
      x-cfn-schema-name: Subnet
      x-cfn-type-name: AWS::EC2::Subnet
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.MapPublicIpOnLaunch') as map_public_ip_on_launch,
              JSON_EXTRACT(detail.Properties, '$.EnableLniAtDeviceIndex') as enable_lni_at_device_index,
              JSON_EXTRACT(detail.Properties, '$.NetworkAclAssociationId') as network_acl_association_id,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZoneId') as availability_zone_id,
              JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(detail.Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(detail.Properties, '$.Ipv6Native') as ipv6_native,
              JSON_EXTRACT(detail.Properties, '$.EnableDns64') as enable_dns64,
              JSON_EXTRACT(detail.Properties, '$.PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
              JSON_EXTRACT(detail.Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(detail.Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::Subnet'
              AND detail.data__TypeName = 'AWS::EC2::Subnet'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'MapPublicIpOnLaunch') as map_public_ip_on_launch,
                json_extract_path_text(detail.Properties, 'EnableLniAtDeviceIndex') as enable_lni_at_device_index,
                json_extract_path_text(detail.Properties, 'NetworkAclAssociationId') as network_acl_association_id,
                json_extract_path_text(detail.Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(detail.Properties, 'AvailabilityZoneId') as availability_zone_id,
                json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(detail.Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                json_extract_path_text(detail.Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                json_extract_path_text(detail.Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(detail.Properties, 'Ipv6Native') as ipv6_native,
                json_extract_path_text(detail.Properties, 'EnableDns64') as enable_dns64,
                json_extract_path_text(detail.Properties, 'PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
                json_extract_path_text(detail.Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                json_extract_path_text(detail.Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                json_extract_path_text(detail.Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                json_extract_path_text(detail.Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::Subnet'
                AND detail.data__TypeName = 'AWS::EC2::Subnet'
                AND listing.region = 'us-east-1'
    subnet_cidr_blocks:
      name: subnet_cidr_blocks
      id: aws.ec2.subnet_cidr_blocks
      x-cfn-schema-name: SubnetCidrBlock
      x-cfn-type-name: AWS::EC2::SubnetCidrBlock
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SubnetCidrBlock&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetCidrBlock"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetCidrBlock"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnet_cidr_blocks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnet_cidr_blocks/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.Ipv6AddressAttribute') as ipv6_address_attribute,
              JSON_EXTRACT(Properties, '$.IpSource') as ip_source
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6AddressAttribute') as ipv6_address_attribute,
                JSON_EXTRACT(detail.Properties, '$.IpSource') as ip_source
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                AND detail.data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                  json_extract_path_text(Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                  json_extract_path_text(Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'Ipv6AddressAttribute') as ipv6_address_attribute,
                  json_extract_path_text(Properties, 'IpSource') as ip_source
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                    json_extract_path_text(detail.Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'Ipv6AddressAttribute') as ipv6_address_attribute,
                    json_extract_path_text(detail.Properties, 'IpSource') as ip_source
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                    AND detail.data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                    AND listing.region = 'us-east-1'
    subnet_cidr_blocks_list_only:
      name: subnet_cidr_blocks_list_only
      id: aws.ec2.subnet_cidr_blocks_list_only
      x-cfn-schema-name: SubnetCidrBlock
      x-cfn-type-name: AWS::EC2::SubnetCidrBlock
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                AND region = 'us-east-1'
    subnet_network_acl_associations:
      name: subnet_network_acl_associations
      id: aws.ec2.subnet_network_acl_associations
      x-cfn-schema-name: SubnetNetworkAclAssociation
      x-cfn-type-name: AWS::EC2::SubnetNetworkAclAssociation
      x-identifiers:
        - AssociationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SubnetNetworkAclAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetNetworkAclAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetNetworkAclAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnet_network_acl_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnet_network_acl_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.NetworkAclId') as network_acl_id,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
              AND data__Identifier = '<AssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.NetworkAclId') as network_acl_id,
                JSON_EXTRACT(detail.Properties, '$.AssociationId') as association_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                AND detail.data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'NetworkAclId') as network_acl_id,
                  json_extract_path_text(Properties, 'AssociationId') as association_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                  AND data__Identifier = '<AssociationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'NetworkAclId') as network_acl_id,
                    json_extract_path_text(detail.Properties, 'AssociationId') as association_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                    AND listing.region = 'us-east-1'
    subnet_network_acl_associations_list_only:
      name: subnet_network_acl_associations_list_only
      id: aws.ec2.subnet_network_acl_associations_list_only
      x-cfn-schema-name: SubnetNetworkAclAssociation
      x-cfn-type-name: AWS::EC2::SubnetNetworkAclAssociation
      x-identifiers:
        - AssociationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationId') as association_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                AND region = 'us-east-1'
    subnet_route_table_associations:
      name: subnet_route_table_associations
      id: aws.ec2.subnet_route_table_associations
      x-cfn-schema-name: SubnetRouteTableAssociation
      x-cfn-type-name: AWS::EC2::SubnetRouteTableAssociation
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SubnetRouteTableAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::SubnetRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/subnet_route_table_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/subnet_route_table_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RouteTableId') as route_table_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                AND detail.data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RouteTableId') as route_table_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                    AND listing.region = 'us-east-1'
    subnet_route_table_associations_list_only:
      name: subnet_route_table_associations_list_only
      id: aws.ec2.subnet_route_table_associations_list_only
      x-cfn-schema-name: SubnetRouteTableAssociation
      x-cfn-type-name: AWS::EC2::SubnetRouteTableAssociation
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                AND region = 'us-east-1'
    transit_gateways:
      name: transit_gateways
      id: aws.ec2.transit_gateways
      x-cfn-schema-name: TransitGateway
      x-cfn-type-name: AWS::EC2::TransitGateway
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DefaultRouteTablePropagation') as default_route_table_propagation,
              JSON_EXTRACT(Properties, '$.TransitGatewayArn') as transit_gateway_arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
              JSON_EXTRACT(Properties, '$.DefaultRouteTableAssociation') as default_route_table_association,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpnEcmpSupport') as vpn_ecmp_support,
              JSON_EXTRACT(Properties, '$.DnsSupport') as dns_support,
              JSON_EXTRACT(Properties, '$.SecurityGroupReferencingSupport') as security_group_referencing_support,
              JSON_EXTRACT(Properties, '$.MulticastSupport') as multicast_support,
              JSON_EXTRACT(Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(Properties, '$.TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AssociationDefaultRouteTableId') as association_default_route_table_id,
              JSON_EXTRACT(Properties, '$.PropagationDefaultRouteTableId') as propagation_default_route_table_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGateway'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DefaultRouteTablePropagation') as default_route_table_propagation,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayArn') as transit_gateway_arn,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
                JSON_EXTRACT(detail.Properties, '$.DefaultRouteTableAssociation') as default_route_table_association,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.VpnEcmpSupport') as vpn_ecmp_support,
                JSON_EXTRACT(detail.Properties, '$.DnsSupport') as dns_support,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupReferencingSupport') as security_group_referencing_support,
                JSON_EXTRACT(detail.Properties, '$.MulticastSupport') as multicast_support,
                JSON_EXTRACT(detail.Properties, '$.AmazonSideAsn') as amazon_side_asn,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.AssociationDefaultRouteTableId') as association_default_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.PropagationDefaultRouteTableId') as propagation_default_route_table_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGateway'
                AND detail.data__TypeName = 'AWS::EC2::TransitGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DefaultRouteTablePropagation') as default_route_table_propagation,
                  json_extract_path_text(Properties, 'TransitGatewayArn') as transit_gateway_arn,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
                  json_extract_path_text(Properties, 'DefaultRouteTableAssociation') as default_route_table_association,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'VpnEcmpSupport') as vpn_ecmp_support,
                  json_extract_path_text(Properties, 'DnsSupport') as dns_support,
                  json_extract_path_text(Properties, 'SecurityGroupReferencingSupport') as security_group_referencing_support,
                  json_extract_path_text(Properties, 'MulticastSupport') as multicast_support,
                  json_extract_path_text(Properties, 'AmazonSideAsn') as amazon_side_asn,
                  json_extract_path_text(Properties, 'TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'AssociationDefaultRouteTableId') as association_default_route_table_id,
                  json_extract_path_text(Properties, 'PropagationDefaultRouteTableId') as propagation_default_route_table_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGateway'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DefaultRouteTablePropagation') as default_route_table_propagation,
                    json_extract_path_text(detail.Properties, 'TransitGatewayArn') as transit_gateway_arn,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
                    json_extract_path_text(detail.Properties, 'DefaultRouteTableAssociation') as default_route_table_association,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'VpnEcmpSupport') as vpn_ecmp_support,
                    json_extract_path_text(detail.Properties, 'DnsSupport') as dns_support,
                    json_extract_path_text(detail.Properties, 'SecurityGroupReferencingSupport') as security_group_referencing_support,
                    json_extract_path_text(detail.Properties, 'MulticastSupport') as multicast_support,
                    json_extract_path_text(detail.Properties, 'AmazonSideAsn') as amazon_side_asn,
                    json_extract_path_text(detail.Properties, 'TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'AssociationDefaultRouteTableId') as association_default_route_table_id,
                    json_extract_path_text(detail.Properties, 'PropagationDefaultRouteTableId') as propagation_default_route_table_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGateway'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGateway'
                    AND listing.region = 'us-east-1'
    transit_gateways_list_only:
      name: transit_gateways_list_only
      id: aws.ec2.transit_gateways_list_only
      x-cfn-schema-name: TransitGateway
      x-cfn-type-name: AWS::EC2::TransitGateway
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGateway'
                AND region = 'us-east-1'
    transit_gateway_tags:
      name: transit_gateway_tags
      id: aws.ec2.transit_gateway_tags
      x-cfn-schema-name: TransitGateway
      x-cfn-type-name: AWS::EC2::TransitGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DefaultRouteTablePropagation') as default_route_table_propagation,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayArn') as transit_gateway_arn,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
              JSON_EXTRACT(detail.Properties, '$.DefaultRouteTableAssociation') as default_route_table_association,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.VpnEcmpSupport') as vpn_ecmp_support,
              JSON_EXTRACT(detail.Properties, '$.DnsSupport') as dns_support,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupReferencingSupport') as security_group_referencing_support,
              JSON_EXTRACT(detail.Properties, '$.MulticastSupport') as multicast_support,
              JSON_EXTRACT(detail.Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
              JSON_EXTRACT(detail.Properties, '$.AssociationDefaultRouteTableId') as association_default_route_table_id,
              JSON_EXTRACT(detail.Properties, '$.PropagationDefaultRouteTableId') as propagation_default_route_table_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGateway'
              AND detail.data__TypeName = 'AWS::EC2::TransitGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DefaultRouteTablePropagation') as default_route_table_propagation,
                json_extract_path_text(detail.Properties, 'TransitGatewayArn') as transit_gateway_arn,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
                json_extract_path_text(detail.Properties, 'DefaultRouteTableAssociation') as default_route_table_association,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'VpnEcmpSupport') as vpn_ecmp_support,
                json_extract_path_text(detail.Properties, 'DnsSupport') as dns_support,
                json_extract_path_text(detail.Properties, 'SecurityGroupReferencingSupport') as security_group_referencing_support,
                json_extract_path_text(detail.Properties, 'MulticastSupport') as multicast_support,
                json_extract_path_text(detail.Properties, 'AmazonSideAsn') as amazon_side_asn,
                json_extract_path_text(detail.Properties, 'TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
                json_extract_path_text(detail.Properties, 'AssociationDefaultRouteTableId') as association_default_route_table_id,
                json_extract_path_text(detail.Properties, 'PropagationDefaultRouteTableId') as propagation_default_route_table_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGateway'
                AND detail.data__TypeName = 'AWS::EC2::TransitGateway'
                AND listing.region = 'us-east-1'
    transit_gateway_attachments:
      name: transit_gateway_attachments
      id: aws.ec2.transit_gateway_attachments
      x-cfn-schema-name: TransitGatewayAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayAttachment
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Options') as options,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Options') as options,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Options') as options,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Options') as options,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                    AND listing.region = 'us-east-1'
    transit_gateway_attachments_list_only:
      name: transit_gateway_attachments_list_only
      id: aws.ec2.transit_gateway_attachments_list_only
      x-cfn-schema-name: TransitGatewayAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayAttachment
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND region = 'us-east-1'
    transit_gateway_attachment_tags:
      name: transit_gateway_attachment_tags
      id: aws.ec2.transit_gateway_attachment_tags
      x-cfn-schema-name: TransitGatewayAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Options') as options,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Options') as options,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND listing.region = 'us-east-1'
    transit_gateway_connects:
      name: transit_gateway_connects
      id: aws.ec2.transit_gateway_connects
      x-cfn-schema-name: TransitGatewayConnect
      x-cfn-type-name: AWS::EC2::TransitGatewayConnect
      x-identifiers:
        - TransitGatewayAttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayConnect&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayConnect"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayConnect"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayConnect"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_connects/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_connects/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_connects/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND data__Identifier = '<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Options') as options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                  AND data__Identifier = '<TransitGatewayAttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Options') as options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                    AND listing.region = 'us-east-1'
    transit_gateway_connects_list_only:
      name: transit_gateway_connects_list_only
      id: aws.ec2.transit_gateway_connects_list_only
      x-cfn-schema-name: TransitGatewayConnect
      x-cfn-type-name: AWS::EC2::TransitGatewayConnect
      x-identifiers:
        - TransitGatewayAttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND region = 'us-east-1'
    transit_gateway_connect_tags:
      name: transit_gateway_connect_tags
      id: aws.ec2.transit_gateway_connect_tags
      x-cfn-schema-name: TransitGatewayConnect
      x-cfn-type-name: AWS::EC2::TransitGatewayConnect
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Options') as options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(detail.Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND listing.region = 'us-east-1'
    transit_gateway_multicast_domains:
      name: transit_gateway_multicast_domains
      id: aws.ec2.transit_gateway_multicast_domains
      x-cfn-schema-name: TransitGatewayMulticastDomain
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastDomain
      x-identifiers:
        - TransitGatewayMulticastDomainId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastDomain&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastDomain"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastDomain"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastDomain"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_domains/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_domains/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_domains/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                  json_extract_path_text(Properties, 'TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Options') as options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                  AND data__Identifier = '<TransitGatewayMulticastDomainId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Options') as options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                    AND listing.region = 'us-east-1'
    transit_gateway_multicast_domains_list_only:
      name: transit_gateway_multicast_domains_list_only
      id: aws.ec2.transit_gateway_multicast_domains_list_only
      x-cfn-schema-name: TransitGatewayMulticastDomain
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastDomain
      x-identifiers:
        - TransitGatewayMulticastDomainId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND region = 'us-east-1'
    transit_gateway_multicast_domain_tags:
      name: transit_gateway_multicast_domain_tags
      id: aws.ec2.transit_gateway_multicast_domain_tags
      x-cfn-schema-name: TransitGatewayMulticastDomain
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastDomain
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Options') as options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND listing.region = 'us-east-1'
    transit_gateway_multicast_domain_associations:
      name: transit_gateway_multicast_domain_associations
      id: aws.ec2.transit_gateway_multicast_domain_associations
      x-cfn-schema-name: TransitGatewayMulticastDomainAssociation
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastDomainAssociation
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastDomainAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastDomainAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastDomainAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_domain_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_domain_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<TransitGatewayAttachmentId>|<SubnetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ResourceType') as resource_type,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                  AND data__Identifier = '<TransitGatewayMulticastDomainId>|<TransitGatewayAttachmentId>|<SubnetId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                    AND listing.region = 'us-east-1'
    transit_gateway_multicast_domain_associations_list_only:
      name: transit_gateway_multicast_domain_associations_list_only
      id: aws.ec2.transit_gateway_multicast_domain_associations_list_only
      x-cfn-schema-name: TransitGatewayMulticastDomainAssociation
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastDomainAssociation
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_members:
      name: transit_gateway_multicast_group_members
      id: aws.ec2.transit_gateway_multicast_group_members
      x-cfn-schema-name: TransitGatewayMulticastGroupMember
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastGroupMember
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastGroupMember&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastGroupMember"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastGroupMember"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_group_members/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_group_members/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.GroupMember') as group_member,
              JSON_EXTRACT(Properties, '$.GroupSource') as group_source,
              JSON_EXTRACT(Properties, '$.MemberType') as member_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GroupIpAddress') as group_ip_address,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.GroupMember') as group_member,
                JSON_EXTRACT(detail.Properties, '$.GroupSource') as group_source,
                JSON_EXTRACT(detail.Properties, '$.MemberType') as member_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ResourceType') as resource_type,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'GroupMember') as group_member,
                  json_extract_path_text(Properties, 'GroupSource') as group_source,
                  json_extract_path_text(Properties, 'MemberType') as member_type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                  AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GroupIpAddress') as group_ip_address,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'GroupMember') as group_member,
                    json_extract_path_text(detail.Properties, 'GroupSource') as group_source,
                    json_extract_path_text(detail.Properties, 'MemberType') as member_type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                    AND listing.region = 'us-east-1'
    transit_gateway_multicast_group_members_list_only:
      name: transit_gateway_multicast_group_members_list_only
      id: aws.ec2.transit_gateway_multicast_group_members_list_only
      x-cfn-schema-name: TransitGatewayMulticastGroupMember
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastGroupMember
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_sources:
      name: transit_gateway_multicast_group_sources
      id: aws.ec2.transit_gateway_multicast_group_sources
      x-cfn-schema-name: TransitGatewayMulticastGroupSource
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastGroupSource
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastGroupSource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastGroupSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayMulticastGroupSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_group_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_multicast_group_sources/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.GroupMember') as group_member,
              JSON_EXTRACT(Properties, '$.GroupSource') as group_source,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GroupIpAddress') as group_ip_address,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceType') as resource_type,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceId') as network_interface_id,
                JSON_EXTRACT(detail.Properties, '$.GroupMember') as group_member,
                JSON_EXTRACT(detail.Properties, '$.GroupSource') as group_source,
                JSON_EXTRACT(detail.Properties, '$.SourceType') as source_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ResourceType') as resource_type,
                  json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                  json_extract_path_text(Properties, 'GroupMember') as group_member,
                  json_extract_path_text(Properties, 'GroupSource') as group_source,
                  json_extract_path_text(Properties, 'SourceType') as source_type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                  AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GroupIpAddress') as group_ip_address,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ResourceType') as resource_type,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceId') as network_interface_id,
                    json_extract_path_text(detail.Properties, 'GroupMember') as group_member,
                    json_extract_path_text(detail.Properties, 'GroupSource') as group_source,
                    json_extract_path_text(detail.Properties, 'SourceType') as source_type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                    AND listing.region = 'us-east-1'
    transit_gateway_multicast_group_sources_list_only:
      name: transit_gateway_multicast_group_sources_list_only
      id: aws.ec2.transit_gateway_multicast_group_sources_list_only
      x-cfn-schema-name: TransitGatewayMulticastGroupSource
      x-cfn-type-name: AWS::EC2::TransitGatewayMulticastGroupSource
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                AND region = 'us-east-1'
    transit_gateway_peering_attachments:
      name: transit_gateway_peering_attachments
      id: aws.ec2.transit_gateway_peering_attachments
      x-cfn-schema-name: TransitGatewayPeeringAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayPeeringAttachment
      x-identifiers:
        - TransitGatewayAttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayPeeringAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayPeeringAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayPeeringAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayPeeringAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peering_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peering_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_peering_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.PeerTransitGatewayId') as peer_transit_gateway_id,
              JSON_EXTRACT(Properties, '$.PeerAccountId') as peer_account_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND data__Identifier = '<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.PeerTransitGatewayId') as peer_transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.PeerAccountId') as peer_account_id,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.PeerRegion') as peer_region,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'PeerTransitGatewayId') as peer_transit_gateway_id,
                  json_extract_path_text(Properties, 'PeerAccountId') as peer_account_id,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'PeerRegion') as peer_region,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                  AND data__Identifier = '<TransitGatewayAttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'PeerTransitGatewayId') as peer_transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'PeerAccountId') as peer_account_id,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'PeerRegion') as peer_region,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                    AND listing.region = 'us-east-1'
    transit_gateway_peering_attachments_list_only:
      name: transit_gateway_peering_attachments_list_only
      id: aws.ec2.transit_gateway_peering_attachments_list_only
      x-cfn-schema-name: TransitGatewayPeeringAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayPeeringAttachment
      x-identifiers:
        - TransitGatewayAttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND region = 'us-east-1'
    transit_gateway_peering_attachment_tags:
      name: transit_gateway_peering_attachment_tags
      id: aws.ec2.transit_gateway_peering_attachment_tags
      x-cfn-schema-name: TransitGatewayPeeringAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayPeeringAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.PeerTransitGatewayId') as peer_transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.PeerAccountId') as peer_account_id,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'PeerTransitGatewayId') as peer_transit_gateway_id,
                json_extract_path_text(detail.Properties, 'PeerAccountId') as peer_account_id,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'PeerRegion') as peer_region,
                json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND listing.region = 'us-east-1'
    transit_gateway_routes:
      name: transit_gateway_routes
      id: aws.ec2.transit_gateway_routes
      x-cfn-schema-name: TransitGatewayRoute
      x-cfn-type-name: AWS::EC2::TransitGatewayRoute
      x-identifiers:
        - TransitGatewayRouteTableId
        - DestinationCidrBlock
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRoute&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_routes/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.Blackhole') as blackhole,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRoute'
              AND data__Identifier = '<TransitGatewayRouteTableId>|<DestinationCidrBlock>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.DestinationCidrBlock') as destination_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Blackhole') as blackhole,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                  json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                  json_extract_path_text(Properties, 'Blackhole') as blackhole,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                  AND data__Identifier = '<TransitGatewayRouteTableId>|<DestinationCidrBlock>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'DestinationCidrBlock') as destination_cidr_block,
                    json_extract_path_text(detail.Properties, 'Blackhole') as blackhole,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                    AND listing.region = 'us-east-1'
    transit_gateway_routes_list_only:
      name: transit_gateway_routes_list_only
      id: aws.ec2.transit_gateway_routes_list_only
      x-cfn-schema-name: TransitGatewayRoute
      x-cfn-type-name: AWS::EC2::TransitGatewayRoute
      x-identifiers:
        - TransitGatewayRouteTableId
        - DestinationCidrBlock
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRoute'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRoute'
                AND region = 'us-east-1'
    transit_gateway_route_tables:
      name: transit_gateway_route_tables
      id: aws.ec2.transit_gateway_route_tables
      x-cfn-schema-name: TransitGatewayRouteTable
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTable
      x-identifiers:
        - TransitGatewayRouteTableId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTable&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTable"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_tables/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_tables/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_tables/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND data__Identifier = '<TransitGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                  AND data__Identifier = '<TransitGatewayRouteTableId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                    AND listing.region = 'us-east-1'
    transit_gateway_route_tables_list_only:
      name: transit_gateway_route_tables_list_only
      id: aws.ec2.transit_gateway_route_tables_list_only
      x-cfn-schema-name: TransitGatewayRouteTable
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTable
      x-identifiers:
        - TransitGatewayRouteTableId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND region = 'us-east-1'
    transit_gateway_route_table_tags:
      name: transit_gateway_route_table_tags
      id: aws.ec2.transit_gateway_route_table_tags
      x-cfn-schema-name: TransitGatewayRouteTable
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTable
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND listing.region = 'us-east-1'
    transit_gateway_route_table_associations:
      name: transit_gateway_route_table_associations
      id: aws.ec2.transit_gateway_route_table_associations
      x-cfn-schema-name: TransitGatewayRouteTableAssociation
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTableAssociation
      x-identifiers:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTableAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTableAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
              AND data__Identifier = '<TransitGatewayRouteTableId>|<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                  AND data__Identifier = '<TransitGatewayRouteTableId>|<TransitGatewayAttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                    AND listing.region = 'us-east-1'
    transit_gateway_route_table_associations_list_only:
      name: transit_gateway_route_table_associations_list_only
      id: aws.ec2.transit_gateway_route_table_associations_list_only
      x-cfn-schema-name: TransitGatewayRouteTableAssociation
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTableAssociation
      x-identifiers:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTableAssociation'
                AND region = 'us-east-1'
    transit_gateway_route_table_propagations:
      name: transit_gateway_route_table_propagations
      id: aws.ec2.transit_gateway_route_table_propagations
      x-cfn-schema-name: TransitGatewayRouteTablePropagation
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTablePropagation
      x-identifiers:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTablePropagation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTablePropagation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayRouteTablePropagation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_propagations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_route_table_propagations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
              AND data__Identifier = '<TransitGatewayRouteTableId>|<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                  json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                  AND data__Identifier = '<TransitGatewayRouteTableId>|<TransitGatewayAttachmentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                    AND listing.region = 'us-east-1'
    transit_gateway_route_table_propagations_list_only:
      name: transit_gateway_route_table_propagations_list_only
      id: aws.ec2.transit_gateway_route_table_propagations_list_only
      x-cfn-schema-name: TransitGatewayRouteTablePropagation
      x-cfn-type-name: AWS::EC2::TransitGatewayRouteTablePropagation
      x-identifiers:
        - TransitGatewayRouteTableId
        - TransitGatewayAttachmentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTablePropagation'
                AND region = 'us-east-1'
    transit_gateway_vpc_attachments:
      name: transit_gateway_vpc_attachments
      id: aws.ec2.transit_gateway_vpc_attachments
      x-cfn-schema-name: TransitGatewayVpcAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayVpcAttachment
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TransitGatewayVpcAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayVpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayVpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::TransitGatewayVpcAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_vpc_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_vpc_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/transit_gateway_vpc_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.AddSubnetIds') as add_subnet_ids,
              JSON_EXTRACT(Properties, '$.RemoveSubnetIds') as remove_subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.AddSubnetIds') as add_subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.RemoveSubnetIds') as remove_subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'AddSubnetIds') as add_subnet_ids,
                  json_extract_path_text(Properties, 'RemoveSubnetIds') as remove_subnet_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Options') as options
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'AddSubnetIds') as add_subnet_ids,
                    json_extract_path_text(detail.Properties, 'RemoveSubnetIds') as remove_subnet_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Options') as options
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                    AND listing.region = 'us-east-1'
    transit_gateway_vpc_attachments_list_only:
      name: transit_gateway_vpc_attachments_list_only
      id: aws.ec2.transit_gateway_vpc_attachments_list_only
      x-cfn-schema-name: TransitGatewayVpcAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayVpcAttachment
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND region = 'us-east-1'
    transit_gateway_vpc_attachment_tags:
      name: transit_gateway_vpc_attachment_tags
      id: aws.ec2.transit_gateway_vpc_attachment_tags
      x-cfn-schema-name: TransitGatewayVpcAttachment
      x-cfn-type-name: AWS::EC2::TransitGatewayVpcAttachment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.AddSubnetIds') as add_subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.RemoveSubnetIds') as remove_subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.Options') as options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND detail.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'AddSubnetIds') as add_subnet_ids,
                json_extract_path_text(detail.Properties, 'RemoveSubnetIds') as remove_subnet_ids,
                json_extract_path_text(detail.Properties, 'Options') as options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND detail.data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND listing.region = 'us-east-1'
    verified_access_endpoints:
      name: verified_access_endpoints
      id: aws.ec2.verified_access_endpoints
      x-cfn-schema-name: VerifiedAccessEndpoint
      x-cfn-type-name: AWS::EC2::VerifiedAccessEndpoint
      x-identifiers:
        - VerifiedAccessEndpointId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VerifiedAccessEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/verified_access_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/verified_access_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/verified_access_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceOptions') as network_interface_options,
              JSON_EXTRACT(Properties, '$.LoadBalancerOptions') as load_balancer_options,
              JSON_EXTRACT(Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(Properties, '$.EndpointDomain') as endpoint_domain,
              JSON_EXTRACT(Properties, '$.EndpointDomainPrefix') as endpoint_domain_prefix,
              JSON_EXTRACT(Properties, '$.DeviceValidationDomain') as device_validation_domain,
              JSON_EXTRACT(Properties, '$.DomainCertificateArn') as domain_certificate_arn,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.ApplicationDomain') as application_domain,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND data__Identifier = '<VerifiedAccessEndpointId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceOptions') as network_interface_options,
                JSON_EXTRACT(detail.Properties, '$.LoadBalancerOptions') as load_balancer_options,
                JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
                JSON_EXTRACT(detail.Properties, '$.EndpointDomain') as endpoint_domain,
                JSON_EXTRACT(detail.Properties, '$.EndpointDomainPrefix') as endpoint_domain_prefix,
                JSON_EXTRACT(detail.Properties, '$.DeviceValidationDomain') as device_validation_domain,
                JSON_EXTRACT(detail.Properties, '$.DomainCertificateArn') as domain_certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.ApplicationDomain') as application_domain,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.PolicyEnabled') as policy_enabled,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id,
                  json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                  json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'NetworkInterfaceOptions') as network_interface_options,
                  json_extract_path_text(Properties, 'LoadBalancerOptions') as load_balancer_options,
                  json_extract_path_text(Properties, 'EndpointType') as endpoint_type,
                  json_extract_path_text(Properties, 'EndpointDomain') as endpoint_domain,
                  json_extract_path_text(Properties, 'EndpointDomainPrefix') as endpoint_domain_prefix,
                  json_extract_path_text(Properties, 'DeviceValidationDomain') as device_validation_domain,
                  json_extract_path_text(Properties, 'DomainCertificateArn') as domain_certificate_arn,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'ApplicationDomain') as application_domain,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'PolicyEnabled') as policy_enabled,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                  AND data__Identifier = '<VerifiedAccessEndpointId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceOptions') as network_interface_options,
                    json_extract_path_text(detail.Properties, 'LoadBalancerOptions') as load_balancer_options,
                    json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                    json_extract_path_text(detail.Properties, 'EndpointDomain') as endpoint_domain,
                    json_extract_path_text(detail.Properties, 'EndpointDomainPrefix') as endpoint_domain_prefix,
                    json_extract_path_text(detail.Properties, 'DeviceValidationDomain') as device_validation_domain,
                    json_extract_path_text(detail.Properties, 'DomainCertificateArn') as domain_certificate_arn,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'ApplicationDomain') as application_domain,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'PolicyEnabled') as policy_enabled,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                    AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                    AND listing.region = 'us-east-1'
    verified_access_endpoints_list_only:
      name: verified_access_endpoints_list_only
      id: aws.ec2.verified_access_endpoints_list_only
      x-cfn-schema-name: VerifiedAccessEndpoint
      x-cfn-type-name: AWS::EC2::VerifiedAccessEndpoint
      x-identifiers:
        - VerifiedAccessEndpointId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND region = 'us-east-1'
    verified_access_endpoint_tags:
      name: verified_access_endpoint_tags
      id: aws.ec2.verified_access_endpoint_tags
      x-cfn-schema-name: VerifiedAccessEndpoint
      x-cfn-type-name: AWS::EC2::VerifiedAccessEndpoint
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceOptions') as network_interface_options,
              JSON_EXTRACT(detail.Properties, '$.LoadBalancerOptions') as load_balancer_options,
              JSON_EXTRACT(detail.Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(detail.Properties, '$.EndpointDomain') as endpoint_domain,
              JSON_EXTRACT(detail.Properties, '$.EndpointDomainPrefix') as endpoint_domain_prefix,
              JSON_EXTRACT(detail.Properties, '$.DeviceValidationDomain') as device_validation_domain,
              JSON_EXTRACT(detail.Properties, '$.DomainCertificateArn') as domain_certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(detail.Properties, '$.ApplicationDomain') as application_domain,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(detail.Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id,
                json_extract_path_text(detail.Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'NetworkInterfaceOptions') as network_interface_options,
                json_extract_path_text(detail.Properties, 'LoadBalancerOptions') as load_balancer_options,
                json_extract_path_text(detail.Properties, 'EndpointType') as endpoint_type,
                json_extract_path_text(detail.Properties, 'EndpointDomain') as endpoint_domain,
                json_extract_path_text(detail.Properties, 'EndpointDomainPrefix') as endpoint_domain_prefix,
                json_extract_path_text(detail.Properties, 'DeviceValidationDomain') as device_validation_domain,
                json_extract_path_text(detail.Properties, 'DomainCertificateArn') as domain_certificate_arn,
                json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(detail.Properties, 'ApplicationDomain') as application_domain,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(detail.Properties, 'PolicyEnabled') as policy_enabled,
                json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND listing.region = 'us-east-1'
    verified_access_groups:
      name: verified_access_groups
      id: aws.ec2.verified_access_groups
      x-cfn-schema-name: VerifiedAccessGroup
      x-cfn-type-name: AWS::EC2::VerifiedAccessGroup
      x-identifiers:
        - VerifiedAccessGroupId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VerifiedAccessGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/verified_access_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/verified_access_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/verified_access_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupArn') as verified_access_group_arn,
              JSON_EXTRACT(Properties, '$.Owner') as owner,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND data__Identifier = '<VerifiedAccessGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupArn') as verified_access_group_arn,
                JSON_EXTRACT(detail.Properties, '$.Owner') as owner,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.PolicyEnabled') as policy_enabled,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                  json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                  json_extract_path_text(Properties, 'VerifiedAccessGroupArn') as verified_access_group_arn,
                  json_extract_path_text(Properties, 'Owner') as owner,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'PolicyEnabled') as policy_enabled,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                  AND data__Identifier = '<VerifiedAccessGroupId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessGroupArn') as verified_access_group_arn,
                    json_extract_path_text(detail.Properties, 'Owner') as owner,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'PolicyEnabled') as policy_enabled,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                    AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                    AND listing.region = 'us-east-1'
    verified_access_groups_list_only:
      name: verified_access_groups_list_only
      id: aws.ec2.verified_access_groups_list_only
      x-cfn-schema-name: VerifiedAccessGroup
      x-cfn-type-name: AWS::EC2::VerifiedAccessGroup
      x-identifiers:
        - VerifiedAccessGroupId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND region = 'us-east-1'
    verified_access_group_tags:
      name: verified_access_group_tags
      id: aws.ec2.verified_access_group_tags
      x-cfn-schema-name: VerifiedAccessGroup
      x-cfn-type-name: AWS::EC2::VerifiedAccessGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessGroupArn') as verified_access_group_arn,
              JSON_EXTRACT(detail.Properties, '$.Owner') as owner,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(detail.Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(detail.Properties, 'VerifiedAccessGroupArn') as verified_access_group_arn,
                json_extract_path_text(detail.Properties, 'Owner') as owner,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(detail.Properties, 'PolicyEnabled') as policy_enabled,
                json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND listing.region = 'us-east-1'
    verified_access_trust_providers:
      name: verified_access_trust_providers
      id: aws.ec2.verified_access_trust_providers
      x-cfn-schema-name: VerifiedAccessTrustProvider
      x-cfn-type-name: AWS::EC2::VerifiedAccessTrustProvider
      x-identifiers:
        - VerifiedAccessTrustProviderId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VerifiedAccessTrustProvider&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessTrustProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessTrustProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessTrustProvider"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/verified_access_trust_providers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/verified_access_trust_providers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/verified_access_trust_providers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TrustProviderType') as trust_provider_type,
              JSON_EXTRACT(Properties, '$.DeviceTrustProviderType') as device_trust_provider_type,
              JSON_EXTRACT(Properties, '$.UserTrustProviderType') as user_trust_provider_type,
              JSON_EXTRACT(Properties, '$.OidcOptions') as oidc_options,
              JSON_EXTRACT(Properties, '$.DeviceOptions') as device_options,
              JSON_EXTRACT(Properties, '$.PolicyReferenceName') as policy_reference_name,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND data__Identifier = '<VerifiedAccessTrustProviderId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TrustProviderType') as trust_provider_type,
                JSON_EXTRACT(detail.Properties, '$.DeviceTrustProviderType') as device_trust_provider_type,
                JSON_EXTRACT(detail.Properties, '$.UserTrustProviderType') as user_trust_provider_type,
                JSON_EXTRACT(detail.Properties, '$.OidcOptions') as oidc_options,
                JSON_EXTRACT(detail.Properties, '$.DeviceOptions') as device_options,
                JSON_EXTRACT(detail.Properties, '$.PolicyReferenceName') as policy_reference_name,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TrustProviderType') as trust_provider_type,
                  json_extract_path_text(Properties, 'DeviceTrustProviderType') as device_trust_provider_type,
                  json_extract_path_text(Properties, 'UserTrustProviderType') as user_trust_provider_type,
                  json_extract_path_text(Properties, 'OidcOptions') as oidc_options,
                  json_extract_path_text(Properties, 'DeviceOptions') as device_options,
                  json_extract_path_text(Properties, 'PolicyReferenceName') as policy_reference_name,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                  json_extract_path_text(Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                  AND data__Identifier = '<VerifiedAccessTrustProviderId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TrustProviderType') as trust_provider_type,
                    json_extract_path_text(detail.Properties, 'DeviceTrustProviderType') as device_trust_provider_type,
                    json_extract_path_text(detail.Properties, 'UserTrustProviderType') as user_trust_provider_type,
                    json_extract_path_text(detail.Properties, 'OidcOptions') as oidc_options,
                    json_extract_path_text(detail.Properties, 'DeviceOptions') as device_options,
                    json_extract_path_text(detail.Properties, 'PolicyReferenceName') as policy_reference_name,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                    AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                    AND listing.region = 'us-east-1'
    verified_access_trust_providers_list_only:
      name: verified_access_trust_providers_list_only
      id: aws.ec2.verified_access_trust_providers_list_only
      x-cfn-schema-name: VerifiedAccessTrustProvider
      x-cfn-type-name: AWS::EC2::VerifiedAccessTrustProvider
      x-identifiers:
        - VerifiedAccessTrustProviderId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND region = 'us-east-1'
    verified_access_trust_provider_tags:
      name: verified_access_trust_provider_tags
      id: aws.ec2.verified_access_trust_provider_tags
      x-cfn-schema-name: VerifiedAccessTrustProvider
      x-cfn-type-name: AWS::EC2::VerifiedAccessTrustProvider
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.TrustProviderType') as trust_provider_type,
              JSON_EXTRACT(detail.Properties, '$.DeviceTrustProviderType') as device_trust_provider_type,
              JSON_EXTRACT(detail.Properties, '$.UserTrustProviderType') as user_trust_provider_type,
              JSON_EXTRACT(detail.Properties, '$.OidcOptions') as oidc_options,
              JSON_EXTRACT(detail.Properties, '$.DeviceOptions') as device_options,
              JSON_EXTRACT(detail.Properties, '$.PolicyReferenceName') as policy_reference_name,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.SseSpecification') as sse_specification
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'TrustProviderType') as trust_provider_type,
                json_extract_path_text(detail.Properties, 'DeviceTrustProviderType') as device_trust_provider_type,
                json_extract_path_text(detail.Properties, 'UserTrustProviderType') as user_trust_provider_type,
                json_extract_path_text(detail.Properties, 'OidcOptions') as oidc_options,
                json_extract_path_text(detail.Properties, 'DeviceOptions') as device_options,
                json_extract_path_text(detail.Properties, 'PolicyReferenceName') as policy_reference_name,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'SseSpecification') as sse_specification
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND listing.region = 'us-east-1'
    verified_access_instances:
      name: verified_access_instances
      id: aws.ec2.verified_access_instances
      x-cfn-schema-name: VerifiedAccessInstance
      x-cfn-type-name: AWS::EC2::VerifiedAccessInstance
      x-identifiers:
        - VerifiedAccessInstanceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VerifiedAccessInstance&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VerifiedAccessInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/verified_access_instances/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/verified_access_instances/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/verified_access_instances/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviders') as verified_access_trust_providers,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LoggingConfigurations') as logging_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FipsEnabled') as fips_enabled
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND data__Identifier = '<VerifiedAccessInstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviders') as verified_access_trust_providers,
                JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.LoggingConfigurations') as logging_configurations,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.FipsEnabled') as fips_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                  json_extract_path_text(Properties, 'VerifiedAccessTrustProviders') as verified_access_trust_providers,
                  json_extract_path_text(Properties, 'VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'LoggingConfigurations') as logging_configurations,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'FipsEnabled') as fips_enabled
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                  AND data__Identifier = '<VerifiedAccessInstanceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviders') as verified_access_trust_providers,
                    json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'LoggingConfigurations') as logging_configurations,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'FipsEnabled') as fips_enabled
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                    AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                    AND listing.region = 'us-east-1'
    verified_access_instances_list_only:
      name: verified_access_instances_list_only
      id: aws.ec2.verified_access_instances_list_only
      x-cfn-schema-name: VerifiedAccessInstance
      x-cfn-type-name: AWS::EC2::VerifiedAccessInstance
      x-identifiers:
        - VerifiedAccessInstanceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND region = 'us-east-1'
    verified_access_instance_tags:
      name: verified_access_instance_tags
      id: aws.ec2.verified_access_instance_tags
      x-cfn-schema-name: VerifiedAccessInstance
      x-cfn-type-name: AWS::EC2::VerifiedAccessInstance
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviders') as verified_access_trust_providers,
              JSON_EXTRACT(detail.Properties, '$.VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.LoggingConfigurations') as logging_configurations,
              JSON_EXTRACT(detail.Properties, '$.FipsEnabled') as fips_enabled
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviders') as verified_access_trust_providers,
                json_extract_path_text(detail.Properties, 'VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'LoggingConfigurations') as logging_configurations,
                json_extract_path_text(detail.Properties, 'FipsEnabled') as fips_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND detail.data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND listing.region = 'us-east-1'
    volume_attachments:
      name: volume_attachments
      id: aws.ec2.volume_attachments
      x-cfn-schema-name: VolumeAttachment
      x-cfn-type-name: AWS::EC2::VolumeAttachment
      x-identifiers:
        - VolumeId
        - InstanceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VolumeAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VolumeAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VolumeAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/volume_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/volume_attachments/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.Device') as device
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
              AND data__Identifier = '<VolumeId>|<InstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VolumeId') as volume_id,
                JSON_EXTRACT(detail.Properties, '$.InstanceId') as instance_id,
                JSON_EXTRACT(detail.Properties, '$.Device') as device
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VolumeAttachment'
                AND detail.data__TypeName = 'AWS::EC2::VolumeAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VolumeId') as volume_id,
                  json_extract_path_text(Properties, 'InstanceId') as instance_id,
                  json_extract_path_text(Properties, 'Device') as device
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
                  AND data__Identifier = '<VolumeId>|<InstanceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VolumeId') as volume_id,
                    json_extract_path_text(detail.Properties, 'InstanceId') as instance_id,
                    json_extract_path_text(detail.Properties, 'Device') as device
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VolumeAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::VolumeAttachment'
                    AND listing.region = 'us-east-1'
    volume_attachments_list_only:
      name: volume_attachments_list_only
      id: aws.ec2.volume_attachments_list_only
      x-cfn-schema-name: VolumeAttachment
      x-cfn-type-name: AWS::EC2::VolumeAttachment
      x-identifiers:
        - VolumeId
        - InstanceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'InstanceId') as instance_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
                AND region = 'us-east-1'
    vpcs:
      name: vpcs
      id: aws.ec2.vpcs
      x-cfn-schema-name: VPC
      x-cfn-type-name: AWS::EC2::VPC
      x-identifiers:
        - VpcId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPC&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPC"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPC"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPC"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpcs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.InstanceTenancy') as instance_tenancy,
              JSON_EXTRACT(Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(Properties, '$.CidrBlockAssociations') as cidr_block_associations,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.DefaultNetworkAcl') as default_network_acl,
              JSON_EXTRACT(Properties, '$.EnableDnsSupport') as enable_dns_support,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(Properties, '$.DefaultSecurityGroup') as default_security_group,
              JSON_EXTRACT(Properties, '$.EnableDnsHostnames') as enable_dns_hostnames,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPC'
              AND data__Identifier = '<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.InstanceTenancy') as instance_tenancy,
                JSON_EXTRACT(detail.Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.CidrBlockAssociations') as cidr_block_associations,
                JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.DefaultNetworkAcl') as default_network_acl,
                JSON_EXTRACT(detail.Properties, '$.EnableDnsSupport') as enable_dns_support,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
                JSON_EXTRACT(detail.Properties, '$.DefaultSecurityGroup') as default_security_group,
                JSON_EXTRACT(detail.Properties, '$.EnableDnsHostnames') as enable_dns_hostnames,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPC'
                AND detail.data__TypeName = 'AWS::EC2::VPC'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'InstanceTenancy') as instance_tenancy,
                  json_extract_path_text(Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                  json_extract_path_text(Properties, 'CidrBlockAssociations') as cidr_block_associations,
                  json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                  json_extract_path_text(Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                  json_extract_path_text(Properties, 'DefaultNetworkAcl') as default_network_acl,
                  json_extract_path_text(Properties, 'EnableDnsSupport') as enable_dns_support,
                  json_extract_path_text(Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                  json_extract_path_text(Properties, 'DefaultSecurityGroup') as default_security_group,
                  json_extract_path_text(Properties, 'EnableDnsHostnames') as enable_dns_hostnames,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPC'
                  AND data__Identifier = '<VpcId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'InstanceTenancy') as instance_tenancy,
                    json_extract_path_text(detail.Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                    json_extract_path_text(detail.Properties, 'CidrBlockAssociations') as cidr_block_associations,
                    json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                    json_extract_path_text(detail.Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'DefaultNetworkAcl') as default_network_acl,
                    json_extract_path_text(detail.Properties, 'EnableDnsSupport') as enable_dns_support,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                    json_extract_path_text(detail.Properties, 'DefaultSecurityGroup') as default_security_group,
                    json_extract_path_text(detail.Properties, 'EnableDnsHostnames') as enable_dns_hostnames,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPC'
                    AND detail.data__TypeName = 'AWS::EC2::VPC'
                    AND listing.region = 'us-east-1'
    vpcs_list_only:
      name: vpcs_list_only
      id: aws.ec2.vpcs_list_only
      x-cfn-schema-name: VPC
      x-cfn-type-name: AWS::EC2::VPC
      x-identifiers:
        - VpcId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPC'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPC'
                AND region = 'us-east-1'
    vpc_tags:
      name: vpc_tags
      id: aws.ec2.vpc_tags
      x-cfn-schema-name: VPC
      x-cfn-type-name: AWS::EC2::VPC
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.InstanceTenancy') as instance_tenancy,
              JSON_EXTRACT(detail.Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(detail.Properties, '$.CidrBlockAssociations') as cidr_block_associations,
              JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(detail.Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(detail.Properties, '$.DefaultNetworkAcl') as default_network_acl,
              JSON_EXTRACT(detail.Properties, '$.EnableDnsSupport') as enable_dns_support,
              JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(detail.Properties, '$.DefaultSecurityGroup') as default_security_group,
              JSON_EXTRACT(detail.Properties, '$.EnableDnsHostnames') as enable_dns_hostnames
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPC'
              AND detail.data__TypeName = 'AWS::EC2::VPC'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'InstanceTenancy') as instance_tenancy,
                json_extract_path_text(detail.Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                json_extract_path_text(detail.Properties, 'CidrBlockAssociations') as cidr_block_associations,
                json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                json_extract_path_text(detail.Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                json_extract_path_text(detail.Properties, 'DefaultNetworkAcl') as default_network_acl,
                json_extract_path_text(detail.Properties, 'EnableDnsSupport') as enable_dns_support,
                json_extract_path_text(detail.Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                json_extract_path_text(detail.Properties, 'DefaultSecurityGroup') as default_security_group,
                json_extract_path_text(detail.Properties, 'EnableDnsHostnames') as enable_dns_hostnames
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPC'
                AND detail.data__TypeName = 'AWS::EC2::VPC'
                AND listing.region = 'us-east-1'
    vpc_block_public_access_exclusions:
      name: vpc_block_public_access_exclusions
      id: aws.ec2.vpc_block_public_access_exclusions
      x-cfn-schema-name: VPCBlockPublicAccessExclusion
      x-cfn-type-name: AWS::EC2::VPCBlockPublicAccessExclusion
      x-identifiers:
        - ExclusionId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCBlockPublicAccessExclusion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessExclusion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessExclusion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessExclusion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_exclusions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_exclusions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_exclusions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ExclusionId') as exclusion_id,
              JSON_EXTRACT(Properties, '$.InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
              AND data__Identifier = '<ExclusionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ExclusionId') as exclusion_id,
                JSON_EXTRACT(detail.Properties, '$.InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                AND detail.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ExclusionId') as exclusion_id,
                  json_extract_path_text(Properties, 'InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                  AND data__Identifier = '<ExclusionId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ExclusionId') as exclusion_id,
                    json_extract_path_text(detail.Properties, 'InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                    AND detail.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                    AND listing.region = 'us-east-1'
    vpc_block_public_access_exclusions_list_only:
      name: vpc_block_public_access_exclusions_list_only
      id: aws.ec2.vpc_block_public_access_exclusions_list_only
      x-cfn-schema-name: VPCBlockPublicAccessExclusion
      x-cfn-type-name: AWS::EC2::VPCBlockPublicAccessExclusion
      x-identifiers:
        - ExclusionId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ExclusionId') as exclusion_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ExclusionId') as exclusion_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                AND region = 'us-east-1'
    vpc_block_public_access_exclusion_tags:
      name: vpc_block_public_access_exclusion_tags
      id: aws.ec2.vpc_block_public_access_exclusion_tags
      x-cfn-schema-name: VPCBlockPublicAccessExclusion
      x-cfn-type-name: AWS::EC2::VPCBlockPublicAccessExclusion
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ExclusionId') as exclusion_id,
              JSON_EXTRACT(detail.Properties, '$.InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
              AND detail.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ExclusionId') as exclusion_id,
                json_extract_path_text(detail.Properties, 'InternetGatewayExclusionMode') as internet_gateway_exclusion_mode,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'SubnetId') as subnet_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                AND detail.data__TypeName = 'AWS::EC2::VPCBlockPublicAccessExclusion'
                AND listing.region = 'us-east-1'
    vpc_block_public_access_options:
      name: vpc_block_public_access_options
      id: aws.ec2.vpc_block_public_access_options
      x-cfn-schema-name: VPCBlockPublicAccessOptions
      x-cfn-type-name: AWS::EC2::VPCBlockPublicAccessOptions
      x-identifiers:
        - AccountId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCBlockPublicAccessOptions&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCBlockPublicAccessOptions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_options/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_options/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_block_public_access_options/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.InternetGatewayBlockMode') as internet_gateway_block_mode,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessOptions'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'InternetGatewayBlockMode') as internet_gateway_block_mode,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCBlockPublicAccessOptions'
                AND data__Identifier = '<AccountId>'
                AND region = 'us-east-1'
    vpc_cidr_blocks:
      name: vpc_cidr_blocks
      id: aws.ec2.vpc_cidr_blocks
      x-cfn-schema-name: VPCCidrBlock
      x-cfn-type-name: AWS::EC2::VPCCidrBlock
      x-identifiers:
        - Id
        - VpcId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCCidrBlock&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCCidrBlock"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCCidrBlock"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_cidr_blocks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_cidr_blocks/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv6Pool') as ipv6_pool,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length,
              JSON_EXTRACT(Properties, '$.AmazonProvidedIpv6CidrBlock') as amazon_provided_ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv6AddressAttribute') as ipv6_address_attribute,
              JSON_EXTRACT(Properties, '$.IpSource') as ip_source,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlockNetworkBorderGroup') as ipv6_cidr_block_network_border_group
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCCidrBlock'
              AND data__Identifier = '<Id>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CidrBlock') as cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Ipv6Pool') as ipv6_pool,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                JSON_EXTRACT(detail.Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length,
                JSON_EXTRACT(detail.Properties, '$.AmazonProvidedIpv6CidrBlock') as amazon_provided_ipv6_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.Ipv6AddressAttribute') as ipv6_address_attribute,
                JSON_EXTRACT(detail.Properties, '$.IpSource') as ip_source,
                JSON_EXTRACT(detail.Properties, '$.Ipv6CidrBlockNetworkBorderGroup') as ipv6_cidr_block_network_border_group
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCCidrBlock'
                AND detail.data__TypeName = 'AWS::EC2::VPCCidrBlock'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                  json_extract_path_text(Properties, 'Ipv6Pool') as ipv6_pool,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                  json_extract_path_text(Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                  json_extract_path_text(Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                  json_extract_path_text(Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                  json_extract_path_text(Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length,
                  json_extract_path_text(Properties, 'AmazonProvidedIpv6CidrBlock') as amazon_provided_ipv6_cidr_block,
                  json_extract_path_text(Properties, 'Ipv6AddressAttribute') as ipv6_address_attribute,
                  json_extract_path_text(Properties, 'IpSource') as ip_source,
                  json_extract_path_text(Properties, 'Ipv6CidrBlockNetworkBorderGroup') as ipv6_cidr_block_network_border_group
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCCidrBlock'
                  AND data__Identifier = '<Id>|<VpcId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CidrBlock') as cidr_block,
                    json_extract_path_text(detail.Properties, 'Ipv6Pool') as ipv6_pool,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                    json_extract_path_text(detail.Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                    json_extract_path_text(detail.Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                    json_extract_path_text(detail.Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length,
                    json_extract_path_text(detail.Properties, 'AmazonProvidedIpv6CidrBlock') as amazon_provided_ipv6_cidr_block,
                    json_extract_path_text(detail.Properties, 'Ipv6AddressAttribute') as ipv6_address_attribute,
                    json_extract_path_text(detail.Properties, 'IpSource') as ip_source,
                    json_extract_path_text(detail.Properties, 'Ipv6CidrBlockNetworkBorderGroup') as ipv6_cidr_block_network_border_group
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCCidrBlock'
                    AND detail.data__TypeName = 'AWS::EC2::VPCCidrBlock'
                    AND listing.region = 'us-east-1'
    vpc_cidr_blocks_list_only:
      name: vpc_cidr_blocks_list_only
      id: aws.ec2.vpc_cidr_blocks_list_only
      x-cfn-schema-name: VPCCidrBlock
      x-cfn-type-name: AWS::EC2::VPCCidrBlock
      x-identifiers:
        - Id
        - VpcId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCCidrBlock'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCCidrBlock'
                AND region = 'us-east-1'
    vpcdhcp_options_associations:
      name: vpcdhcp_options_associations
      id: aws.ec2.vpcdhcp_options_associations
      x-cfn-schema-name: VPCDHCPOptionsAssociation
      x-cfn-type-name: AWS::EC2::VPCDHCPOptionsAssociation
      x-identifiers:
        - DhcpOptionsId
        - VpcId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCDHCPOptionsAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCDHCPOptionsAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCDHCPOptionsAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCDHCPOptionsAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpcdhcp_options_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpcdhcp_options_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpcdhcp_options_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
              AND data__Identifier = '<DhcpOptionsId>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DhcpOptionsId') as dhcp_options_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                AND detail.data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                  AND data__Identifier = '<DhcpOptionsId>|<VpcId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DhcpOptionsId') as dhcp_options_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                    AND detail.data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                    AND listing.region = 'us-east-1'
    vpcdhcp_options_associations_list_only:
      name: vpcdhcp_options_associations_list_only
      id: aws.ec2.vpcdhcp_options_associations_list_only
      x-cfn-schema-name: VPCDHCPOptionsAssociation
      x-cfn-type-name: AWS::EC2::VPCDHCPOptionsAssociation
      x-identifiers:
        - DhcpOptionsId
        - VpcId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                AND region = 'us-east-1'
    vpc_endpoints:
      name: vpc_endpoints
      id: aws.ec2.vpc_endpoints
      x-cfn-schema-name: VPCEndpoint
      x-cfn-type-name: AWS::EC2::VPCEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PrivateDnsEnabled') as private_dns_enabled,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.CreationTimestamp') as creation_timestamp,
              JSON_EXTRACT(Properties, '$.DnsOptions') as dns_options,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceIds') as network_interface_ids,
              JSON_EXTRACT(Properties, '$.DnsEntries') as dns_entries,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationArn') as resource_configuration_arn,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.RouteTableIds') as route_table_ids,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.VpcEndpointType') as vpc_endpoint_type,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PrivateDnsEnabled') as private_dns_enabled,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.CreationTimestamp') as creation_timestamp,
                JSON_EXTRACT(detail.Properties, '$.DnsOptions') as dns_options,
                JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceIds') as network_interface_ids,
                JSON_EXTRACT(detail.Properties, '$.DnsEntries') as dns_entries,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationArn') as resource_configuration_arn,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.RouteTableIds') as route_table_ids,
                JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.VpcEndpointType') as vpc_endpoint_type,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PrivateDnsEnabled') as private_dns_enabled,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'CreationTimestamp') as creation_timestamp,
                  json_extract_path_text(Properties, 'DnsOptions') as dns_options,
                  json_extract_path_text(Properties, 'NetworkInterfaceIds') as network_interface_ids,
                  json_extract_path_text(Properties, 'DnsEntries') as dns_entries,
                  json_extract_path_text(Properties, 'ResourceConfigurationArn') as resource_configuration_arn,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'ServiceNetworkArn') as service_network_arn,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'RouteTableIds') as route_table_ids,
                  json_extract_path_text(Properties, 'ServiceName') as service_name,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'VpcEndpointType') as vpc_endpoint_type,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PrivateDnsEnabled') as private_dns_enabled,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'CreationTimestamp') as creation_timestamp,
                    json_extract_path_text(detail.Properties, 'DnsOptions') as dns_options,
                    json_extract_path_text(detail.Properties, 'NetworkInterfaceIds') as network_interface_ids,
                    json_extract_path_text(detail.Properties, 'DnsEntries') as dns_entries,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationArn') as resource_configuration_arn,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'RouteTableIds') as route_table_ids,
                    json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'VpcEndpointType') as vpc_endpoint_type,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpoint'
                    AND detail.data__TypeName = 'AWS::EC2::VPCEndpoint'
                    AND listing.region = 'us-east-1'
    vpc_endpoints_list_only:
      name: vpc_endpoints_list_only
      id: aws.ec2.vpc_endpoints_list_only
      x-cfn-schema-name: VPCEndpoint
      x-cfn-type-name: AWS::EC2::VPCEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND region = 'us-east-1'
    vpc_endpoint_tags:
      name: vpc_endpoint_tags
      id: aws.ec2.vpc_endpoint_tags
      x-cfn-schema-name: VPCEndpoint
      x-cfn-type-name: AWS::EC2::VPCEndpoint
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PrivateDnsEnabled') as private_dns_enabled,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.CreationTimestamp') as creation_timestamp,
              JSON_EXTRACT(detail.Properties, '$.DnsOptions') as dns_options,
              JSON_EXTRACT(detail.Properties, '$.NetworkInterfaceIds') as network_interface_ids,
              JSON_EXTRACT(detail.Properties, '$.DnsEntries') as dns_entries,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationArn') as resource_configuration_arn,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.RouteTableIds') as route_table_ids,
              JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(detail.Properties, '$.VpcEndpointType') as vpc_endpoint_type,
              JSON_EXTRACT(detail.Properties, '$.Id') as id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND detail.data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PrivateDnsEnabled') as private_dns_enabled,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'CreationTimestamp') as creation_timestamp,
                json_extract_path_text(detail.Properties, 'DnsOptions') as dns_options,
                json_extract_path_text(detail.Properties, 'NetworkInterfaceIds') as network_interface_ids,
                json_extract_path_text(detail.Properties, 'DnsEntries') as dns_entries,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationArn') as resource_configuration_arn,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'RouteTableIds') as route_table_ids,
                json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(detail.Properties, 'VpcEndpointType') as vpc_endpoint_type,
                json_extract_path_text(detail.Properties, 'Id') as id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND listing.region = 'us-east-1'
    vpc_endpoint_connection_notifications:
      name: vpc_endpoint_connection_notifications
      id: aws.ec2.vpc_endpoint_connection_notifications
      x-cfn-schema-name: VPCEndpointConnectionNotification
      x-cfn-type-name: AWS::EC2::VPCEndpointConnectionNotification
      x-identifiers:
        - VPCEndpointConnectionNotificationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCEndpointConnectionNotification&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointConnectionNotification"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointConnectionNotification"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointConnectionNotification"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_connection_notifications/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_connection_notifications/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_connection_notifications/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConnectionEvents') as connection_events,
              JSON_EXTRACT(Properties, '$.VPCEndpointId') as vpc_endpoint_id,
              JSON_EXTRACT(Properties, '$.VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
              JSON_EXTRACT(Properties, '$.ConnectionNotificationArn') as connection_notification_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
              AND data__Identifier = '<VPCEndpointConnectionNotificationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ConnectionEvents') as connection_events,
                JSON_EXTRACT(detail.Properties, '$.VPCEndpointId') as vpc_endpoint_id,
                JSON_EXTRACT(detail.Properties, '$.VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
                JSON_EXTRACT(detail.Properties, '$.ConnectionNotificationArn') as connection_notification_arn,
                JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ConnectionEvents') as connection_events,
                  json_extract_path_text(Properties, 'VPCEndpointId') as vpc_endpoint_id,
                  json_extract_path_text(Properties, 'VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
                  json_extract_path_text(Properties, 'ConnectionNotificationArn') as connection_notification_arn,
                  json_extract_path_text(Properties, 'ServiceId') as service_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                  AND data__Identifier = '<VPCEndpointConnectionNotificationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ConnectionEvents') as connection_events,
                    json_extract_path_text(detail.Properties, 'VPCEndpointId') as vpc_endpoint_id,
                    json_extract_path_text(detail.Properties, 'VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
                    json_extract_path_text(detail.Properties, 'ConnectionNotificationArn') as connection_notification_arn,
                    json_extract_path_text(detail.Properties, 'ServiceId') as service_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                    AND detail.data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                    AND listing.region = 'us-east-1'
    vpc_endpoint_connection_notifications_list_only:
      name: vpc_endpoint_connection_notifications_list_only
      id: aws.ec2.vpc_endpoint_connection_notifications_list_only
      x-cfn-schema-name: VPCEndpointConnectionNotification
      x-cfn-type-name: AWS::EC2::VPCEndpointConnectionNotification
      x-identifiers:
        - VPCEndpointConnectionNotificationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                AND region = 'us-east-1'
    vpc_endpoint_services:
      name: vpc_endpoint_services
      id: aws.ec2.vpc_endpoint_services
      x-cfn-schema-name: VPCEndpointService
      x-cfn-type-name: AWS::EC2::VPCEndpointService
      x-identifiers:
        - ServiceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCEndpointService&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointService"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointService"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointService"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_services/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_services/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_services/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkLoadBalancerArns') as network_load_balancer_arns,
              JSON_EXTRACT(Properties, '$.ContributorInsightsEnabled') as contributor_insights_enabled,
              JSON_EXTRACT(Properties, '$.PayerResponsibility') as payer_responsibility,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.AcceptanceRequired') as acceptance_required,
              JSON_EXTRACT(Properties, '$.GatewayLoadBalancerArns') as gateway_load_balancer_arns,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND data__Identifier = '<ServiceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.NetworkLoadBalancerArns') as network_load_balancer_arns,
                JSON_EXTRACT(detail.Properties, '$.ContributorInsightsEnabled') as contributor_insights_enabled,
                JSON_EXTRACT(detail.Properties, '$.PayerResponsibility') as payer_responsibility,
                JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
                JSON_EXTRACT(detail.Properties, '$.AcceptanceRequired') as acceptance_required,
                JSON_EXTRACT(detail.Properties, '$.GatewayLoadBalancerArns') as gateway_load_balancer_arns,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'NetworkLoadBalancerArns') as network_load_balancer_arns,
                  json_extract_path_text(Properties, 'ContributorInsightsEnabled') as contributor_insights_enabled,
                  json_extract_path_text(Properties, 'PayerResponsibility') as payer_responsibility,
                  json_extract_path_text(Properties, 'ServiceId') as service_id,
                  json_extract_path_text(Properties, 'AcceptanceRequired') as acceptance_required,
                  json_extract_path_text(Properties, 'GatewayLoadBalancerArns') as gateway_load_balancer_arns,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
                  AND data__Identifier = '<ServiceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'NetworkLoadBalancerArns') as network_load_balancer_arns,
                    json_extract_path_text(detail.Properties, 'ContributorInsightsEnabled') as contributor_insights_enabled,
                    json_extract_path_text(detail.Properties, 'PayerResponsibility') as payer_responsibility,
                    json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                    json_extract_path_text(detail.Properties, 'AcceptanceRequired') as acceptance_required,
                    json_extract_path_text(detail.Properties, 'GatewayLoadBalancerArns') as gateway_load_balancer_arns,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointService'
                    AND detail.data__TypeName = 'AWS::EC2::VPCEndpointService'
                    AND listing.region = 'us-east-1'
    vpc_endpoint_services_list_only:
      name: vpc_endpoint_services_list_only
      id: aws.ec2.vpc_endpoint_services_list_only
      x-cfn-schema-name: VPCEndpointService
      x-cfn-type-name: AWS::EC2::VPCEndpointService
      x-identifiers:
        - ServiceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServiceId') as service_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND region = 'us-east-1'
    vpc_endpoint_service_tags:
      name: vpc_endpoint_service_tags
      id: aws.ec2.vpc_endpoint_service_tags
      x-cfn-schema-name: VPCEndpointService
      x-cfn-type-name: AWS::EC2::VPCEndpointService
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.NetworkLoadBalancerArns') as network_load_balancer_arns,
              JSON_EXTRACT(detail.Properties, '$.ContributorInsightsEnabled') as contributor_insights_enabled,
              JSON_EXTRACT(detail.Properties, '$.PayerResponsibility') as payer_responsibility,
              JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(detail.Properties, '$.AcceptanceRequired') as acceptance_required,
              JSON_EXTRACT(detail.Properties, '$.GatewayLoadBalancerArns') as gateway_load_balancer_arns
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND detail.data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'NetworkLoadBalancerArns') as network_load_balancer_arns,
                json_extract_path_text(detail.Properties, 'ContributorInsightsEnabled') as contributor_insights_enabled,
                json_extract_path_text(detail.Properties, 'PayerResponsibility') as payer_responsibility,
                json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                json_extract_path_text(detail.Properties, 'AcceptanceRequired') as acceptance_required,
                json_extract_path_text(detail.Properties, 'GatewayLoadBalancerArns') as gateway_load_balancer_arns
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND listing.region = 'us-east-1'
    vpc_endpoint_service_permissions:
      name: vpc_endpoint_service_permissions
      id: aws.ec2.vpc_endpoint_service_permissions
      x-cfn-schema-name: VPCEndpointServicePermissions
      x-cfn-type-name: AWS::EC2::VPCEndpointServicePermissions
      x-identifiers:
        - ServiceId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCEndpointServicePermissions&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointServicePermissions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointServicePermissions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCEndpointServicePermissions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_service_permissions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_service_permissions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoint_service_permissions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllowedPrincipals') as allowed_principals,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
              AND data__Identifier = '<ServiceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AllowedPrincipals') as allowed_principals,
                JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                AND detail.data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AllowedPrincipals') as allowed_principals,
                  json_extract_path_text(Properties, 'ServiceId') as service_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                  AND data__Identifier = '<ServiceId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AllowedPrincipals') as allowed_principals,
                    json_extract_path_text(detail.Properties, 'ServiceId') as service_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                    AND detail.data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                    AND listing.region = 'us-east-1'
    vpc_endpoint_service_permissions_list_only:
      name: vpc_endpoint_service_permissions_list_only
      id: aws.ec2.vpc_endpoint_service_permissions_list_only
      x-cfn-schema-name: VPCEndpointServicePermissions
      x-cfn-type-name: AWS::EC2::VPCEndpointServicePermissions
      x-identifiers:
        - ServiceId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServiceId') as service_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                AND region = 'us-east-1'
    vpc_gateway_attachments:
      name: vpc_gateway_attachments
      id: aws.ec2.vpc_gateway_attachments
      x-cfn-schema-name: VPCGatewayAttachment
      x-cfn-type-name: AWS::EC2::VPCGatewayAttachment
      x-identifiers:
        - AttachmentType
        - VpcId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCGatewayAttachment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCGatewayAttachment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_gateway_attachments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_gateway_attachments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_gateway_attachments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpnGatewayId') as vpn_gateway_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
              AND data__Identifier = '<AttachmentType>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AttachmentType') as attachment_type,
                JSON_EXTRACT(detail.Properties, '$.InternetGatewayId') as internet_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.VpnGatewayId') as vpn_gateway_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                AND detail.data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                  json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'VpnGatewayId') as vpn_gateway_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                  AND data__Identifier = '<AttachmentType>|<VpcId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AttachmentType') as attachment_type,
                    json_extract_path_text(detail.Properties, 'InternetGatewayId') as internet_gateway_id,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'VpnGatewayId') as vpn_gateway_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                    AND detail.data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                    AND listing.region = 'us-east-1'
    vpc_gateway_attachments_list_only:
      name: vpc_gateway_attachments_list_only
      id: aws.ec2.vpc_gateway_attachments_list_only
      x-cfn-schema-name: VPCGatewayAttachment
      x-cfn-type-name: AWS::EC2::VPCGatewayAttachment
      x-identifiers:
        - AttachmentType
        - VpcId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                AND region = 'us-east-1'
    vpc_peering_connections:
      name: vpc_peering_connections
      id: aws.ec2.vpc_peering_connections
      x-cfn-schema-name: VPCPeeringConnection
      x-cfn-type-name: AWS::EC2::VPCPeeringConnection
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPCPeeringConnection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCPeeringConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCPeeringConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPCPeeringConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_peering_connections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_peering_connections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_peering_connections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PeerRoleArn') as peer_role_arn,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.PeerVpcId') as peer_vpc_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(Properties, '$.PeerOwnerId') as peer_owner_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PeerRoleArn') as peer_role_arn,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.PeerVpcId') as peer_vpc_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.PeerRegion') as peer_region,
                JSON_EXTRACT(detail.Properties, '$.PeerOwnerId') as peer_owner_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND detail.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PeerRoleArn') as peer_role_arn,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'PeerVpcId') as peer_vpc_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'PeerRegion') as peer_region,
                  json_extract_path_text(Properties, 'PeerOwnerId') as peer_owner_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PeerRoleArn') as peer_role_arn,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'PeerVpcId') as peer_vpc_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'PeerRegion') as peer_region,
                    json_extract_path_text(detail.Properties, 'PeerOwnerId') as peer_owner_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                    AND detail.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                    AND listing.region = 'us-east-1'
    vpc_peering_connections_list_only:
      name: vpc_peering_connections_list_only
      id: aws.ec2.vpc_peering_connections_list_only
      x-cfn-schema-name: VPCPeeringConnection
      x-cfn-type-name: AWS::EC2::VPCPeeringConnection
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND region = 'us-east-1'
    vpc_peering_connection_tags:
      name: vpc_peering_connection_tags
      id: aws.ec2.vpc_peering_connection_tags
      x-cfn-schema-name: VPCPeeringConnection
      x-cfn-type-name: AWS::EC2::VPCPeeringConnection
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PeerRoleArn') as peer_role_arn,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.PeerVpcId') as peer_vpc_id,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(detail.Properties, '$.PeerOwnerId') as peer_owner_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND detail.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PeerRoleArn') as peer_role_arn,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'PeerVpcId') as peer_vpc_id,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'PeerRegion') as peer_region,
                json_extract_path_text(detail.Properties, 'PeerOwnerId') as peer_owner_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND detail.data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND listing.region = 'us-east-1'
    vpn_connections:
      name: vpn_connections
      id: aws.ec2.vpn_connections
      x-cfn-schema-name: VPNConnection
      x-cfn-type-name: AWS::EC2::VPNConnection
      x-identifiers:
        - VpnConnectionId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPNConnection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNConnection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpn_connections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpn_connections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpn_connections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
              JSON_EXTRACT(Properties, '$.RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
              JSON_EXTRACT(Properties, '$.VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(Properties, '$.OutsideIpAddressType') as outside_ip_address_type,
              JSON_EXTRACT(Properties, '$.StaticRoutesOnly') as static_routes_only,
              JSON_EXTRACT(Properties, '$.EnableAcceleration') as enable_acceleration,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
              JSON_EXTRACT(Properties, '$.VpnGatewayId') as vpn_gateway_id,
              JSON_EXTRACT(Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id,
              JSON_EXTRACT(Properties, '$.TunnelInsideIpVersion') as tunnel_inside_ip_version,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnection'
              AND data__Identifier = '<VpnConnectionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
                JSON_EXTRACT(detail.Properties, '$.RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
                JSON_EXTRACT(detail.Properties, '$.VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
                JSON_EXTRACT(detail.Properties, '$.CustomerGatewayId') as customer_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.OutsideIpAddressType') as outside_ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.StaticRoutesOnly') as static_routes_only,
                JSON_EXTRACT(detail.Properties, '$.EnableAcceleration') as enable_acceleration,
                JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
                JSON_EXTRACT(detail.Properties, '$.VpnGatewayId') as vpn_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                JSON_EXTRACT(detail.Properties, '$.LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
                JSON_EXTRACT(detail.Properties, '$.VpnConnectionId') as vpn_connection_id,
                JSON_EXTRACT(detail.Properties, '$.TunnelInsideIpVersion') as tunnel_inside_ip_version,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPNConnection'
                AND detail.data__TypeName = 'AWS::EC2::VPNConnection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
                  json_extract_path_text(Properties, 'RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
                  json_extract_path_text(Properties, 'VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
                  json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id,
                  json_extract_path_text(Properties, 'OutsideIpAddressType') as outside_ip_address_type,
                  json_extract_path_text(Properties, 'StaticRoutesOnly') as static_routes_only,
                  json_extract_path_text(Properties, 'EnableAcceleration') as enable_acceleration,
                  json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
                  json_extract_path_text(Properties, 'VpnGatewayId') as vpn_gateway_id,
                  json_extract_path_text(Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                  json_extract_path_text(Properties, 'LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
                  json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id,
                  json_extract_path_text(Properties, 'TunnelInsideIpVersion') as tunnel_inside_ip_version,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnection'
                  AND data__Identifier = '<VpnConnectionId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
                    json_extract_path_text(detail.Properties, 'RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
                    json_extract_path_text(detail.Properties, 'VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
                    json_extract_path_text(detail.Properties, 'CustomerGatewayId') as customer_gateway_id,
                    json_extract_path_text(detail.Properties, 'OutsideIpAddressType') as outside_ip_address_type,
                    json_extract_path_text(detail.Properties, 'StaticRoutesOnly') as static_routes_only,
                    json_extract_path_text(detail.Properties, 'EnableAcceleration') as enable_acceleration,
                    json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
                    json_extract_path_text(detail.Properties, 'VpnGatewayId') as vpn_gateway_id,
                    json_extract_path_text(detail.Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                    json_extract_path_text(detail.Properties, 'LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
                    json_extract_path_text(detail.Properties, 'VpnConnectionId') as vpn_connection_id,
                    json_extract_path_text(detail.Properties, 'TunnelInsideIpVersion') as tunnel_inside_ip_version,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPNConnection'
                    AND detail.data__TypeName = 'AWS::EC2::VPNConnection'
                    AND listing.region = 'us-east-1'
    vpn_connections_list_only:
      name: vpn_connections_list_only
      id: aws.ec2.vpn_connections_list_only
      x-cfn-schema-name: VPNConnection
      x-cfn-type-name: AWS::EC2::VPNConnection
      x-identifiers:
        - VpnConnectionId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnection'
                AND region = 'us-east-1'
    vpn_connection_tags:
      name: vpn_connection_tags
      id: aws.ec2.vpn_connection_tags
      x-cfn-schema-name: VPNConnection
      x-cfn-type-name: AWS::EC2::VPNConnection
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
              JSON_EXTRACT(detail.Properties, '$.RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
              JSON_EXTRACT(detail.Properties, '$.VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
              JSON_EXTRACT(detail.Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.OutsideIpAddressType') as outside_ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.StaticRoutesOnly') as static_routes_only,
              JSON_EXTRACT(detail.Properties, '$.EnableAcceleration') as enable_acceleration,
              JSON_EXTRACT(detail.Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
              JSON_EXTRACT(detail.Properties, '$.VpnGatewayId') as vpn_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
              JSON_EXTRACT(detail.Properties, '$.LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
              JSON_EXTRACT(detail.Properties, '$.VpnConnectionId') as vpn_connection_id,
              JSON_EXTRACT(detail.Properties, '$.TunnelInsideIpVersion') as tunnel_inside_ip_version
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPNConnection'
              AND detail.data__TypeName = 'AWS::EC2::VPNConnection'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RemoteIpv6NetworkCidr') as remote_ipv6_network_cidr,
                json_extract_path_text(detail.Properties, 'RemoteIpv4NetworkCidr') as remote_ipv4_network_cidr,
                json_extract_path_text(detail.Properties, 'VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications,
                json_extract_path_text(detail.Properties, 'CustomerGatewayId') as customer_gateway_id,
                json_extract_path_text(detail.Properties, 'OutsideIpAddressType') as outside_ip_address_type,
                json_extract_path_text(detail.Properties, 'StaticRoutesOnly') as static_routes_only,
                json_extract_path_text(detail.Properties, 'EnableAcceleration') as enable_acceleration,
                json_extract_path_text(detail.Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'LocalIpv4NetworkCidr') as local_ipv4_network_cidr,
                json_extract_path_text(detail.Properties, 'VpnGatewayId') as vpn_gateway_id,
                json_extract_path_text(detail.Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                json_extract_path_text(detail.Properties, 'LocalIpv6NetworkCidr') as local_ipv6_network_cidr,
                json_extract_path_text(detail.Properties, 'VpnConnectionId') as vpn_connection_id,
                json_extract_path_text(detail.Properties, 'TunnelInsideIpVersion') as tunnel_inside_ip_version
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPNConnection'
                AND detail.data__TypeName = 'AWS::EC2::VPNConnection'
                AND listing.region = 'us-east-1'
    vpn_connection_routes:
      name: vpn_connection_routes
      id: aws.ec2.vpn_connection_routes
      x-cfn-schema-name: VPNConnectionRoute
      x-cfn-type-name: AWS::EC2::VPNConnectionRoute
      x-identifiers:
        - DestinationCidrBlock
        - VpnConnectionId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPNConnectionRoute&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNConnectionRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNConnectionRoute"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpn_connection_routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpn_connection_routes/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
              AND data__Identifier = '<DestinationCidrBlock>|<VpnConnectionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DestinationCidrBlock') as destination_cidr_block,
                JSON_EXTRACT(detail.Properties, '$.VpnConnectionId') as vpn_connection_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                AND detail.data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                  json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                  AND data__Identifier = '<DestinationCidrBlock>|<VpnConnectionId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DestinationCidrBlock') as destination_cidr_block,
                    json_extract_path_text(detail.Properties, 'VpnConnectionId') as vpn_connection_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                    AND detail.data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                    AND listing.region = 'us-east-1'
    vpn_connection_routes_list_only:
      name: vpn_connection_routes_list_only
      id: aws.ec2.vpn_connection_routes_list_only
      x-cfn-schema-name: VPNConnectionRoute
      x-cfn-type-name: AWS::EC2::VPNConnectionRoute
      x-identifiers:
        - DestinationCidrBlock
        - VpnConnectionId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                AND region = 'us-east-1'
    vpn_gateways:
      name: vpn_gateways
      id: aws.ec2.vpn_gateways
      x-cfn-schema-name: VPNGateway
      x-cfn-type-name: AWS::EC2::VPNGateway
      x-identifiers:
        - VPNGatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VPNGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::EC2::VPNGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpn_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpn_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpn_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VPNGatewayId') as v_pn_gateway_id,
              JSON_EXTRACT(Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNGateway'
              AND data__Identifier = '<VPNGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VPNGatewayId') as v_pn_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.AmazonSideAsn') as amazon_side_asn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::EC2::VPNGateway'
                AND detail.data__TypeName = 'AWS::EC2::VPNGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VPNGatewayId') as v_pn_gateway_id,
                  json_extract_path_text(Properties, 'AmazonSideAsn') as amazon_side_asn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNGateway'
                  AND data__Identifier = '<VPNGatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VPNGatewayId') as v_pn_gateway_id,
                    json_extract_path_text(detail.Properties, 'AmazonSideAsn') as amazon_side_asn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::EC2::VPNGateway'
                    AND detail.data__TypeName = 'AWS::EC2::VPNGateway'
                    AND listing.region = 'us-east-1'
    vpn_gateways_list_only:
      name: vpn_gateways_list_only
      id: aws.ec2.vpn_gateways_list_only
      x-cfn-schema-name: VPNGateway
      x-cfn-type-name: AWS::EC2::VPNGateway
      x-identifiers:
        - VPNGatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VPNGatewayId') as v_pn_gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VPNGatewayId') as v_pn_gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNGateway'
                AND region = 'us-east-1'
    vpn_gateway_tags:
      name: vpn_gateway_tags
      id: aws.ec2.vpn_gateway_tags
      x-cfn-schema-name: VPNGateway
      x-cfn-type-name: AWS::EC2::VPNGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VPNGatewayId') as v_pn_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(detail.Properties, '$.Type') as type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::EC2::VPNGateway'
              AND detail.data__TypeName = 'AWS::EC2::VPNGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VPNGatewayId') as v_pn_gateway_id,
                json_extract_path_text(detail.Properties, 'AmazonSideAsn') as amazon_side_asn,
                json_extract_path_text(detail.Properties, 'Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::EC2::VPNGateway'
                AND detail.data__TypeName = 'AWS::EC2::VPNGateway'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CapacityReservation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCapacityReservation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCapacityReservationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CapacityReservationFleet&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCapacityReservationFleet
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCapacityReservationFleetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CarrierGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCarrierGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCarrierGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CustomerGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCustomerGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCustomerGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DHCPOptions&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDHCPOptions
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDHCPOptionsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EC2Fleet&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEC2Fleet
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEC2FleetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EgressOnlyInternetGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEgressOnlyInternetGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEgressOnlyInternetGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EIP&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEIP
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEIPRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EIPAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEIPAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEIPAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EnclaveCertificateIamRoleAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEnclaveCertificateIamRoleAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEnclaveCertificateIamRoleAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__FlowLog&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFlowLog
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFlowLogRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__GatewayRouteTableAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGatewayRouteTableAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGatewayRouteTableAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Host&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateHost
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateHostRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInterface&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInterface
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInterfaceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Volume&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVolume
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVolumeRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Instance&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInstance
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInstanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__InstanceConnectEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInstanceConnectEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInstanceConnectEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__InternetGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInternetGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInternetGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAM&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAM
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMAllocation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMAllocation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMAllocationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMPool&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMPool
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMPoolRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMPoolCidr&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMPoolCidr
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMPoolCidrRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMResourceDiscovery&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMResourceDiscovery
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMResourceDiscoveryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMResourceDiscoveryAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMResourceDiscoveryAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMResourceDiscoveryAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IPAMScope&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIPAMScope
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIPAMScopeRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__KeyPair&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateKeyPair
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateKeyPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LaunchTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLaunchTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLaunchTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LocalGatewayRoute&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLocalGatewayRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLocalGatewayRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTable&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLocalGatewayRouteTable
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLocalGatewayRouteTableRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTableVirtualInterfaceGroupAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LocalGatewayRouteTableVPCAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLocalGatewayRouteTableVPCAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLocalGatewayRouteTableVPCAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NatGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNatGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNatGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkAcl&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkAcl
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkAclRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAccessScope&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInsightsAccessScope
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInsightsAccessScopeRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAccessScopeAnalysis&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInsightsAccessScopeAnalysis
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInsightsAccessScopeAnalysisRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInsightsAnalysis&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInsightsAnalysis
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInsightsAnalysisRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInsightsPath&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInsightsPath
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInsightsPathRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkInterfaceAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkInterfaceAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkInterfaceAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__NetworkPerformanceMetricSubscription&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetworkPerformanceMetricSubscription
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkPerformanceMetricSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PlacementGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePlacementGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePlacementGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PrefixList&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePrefixList
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePrefixListRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RouteTable&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRouteTable
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteTableRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityGroupEgress&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityGroupEgress
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupEgressRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityGroupIngress&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityGroupIngress
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupIngressRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityGroupVpcAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityGroupVpcAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityGroupVpcAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SnapshotBlockPublicAccess&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSnapshotBlockPublicAccess
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSnapshotBlockPublicAccessRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SpotFleet&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSpotFleet
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSpotFleetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Subnet&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnet
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SubnetCidrBlock&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnetCidrBlock
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetCidrBlockRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SubnetNetworkAclAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnetNetworkAclAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetNetworkAclAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SubnetRouteTableAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSubnetRouteTableAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSubnetRouteTableAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayConnect&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayConnect
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayConnectRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastDomain&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayMulticastDomain
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayMulticastDomainRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastDomainAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayMulticastDomainAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayMulticastDomainAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastGroupMember&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayMulticastGroupMember
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayMulticastGroupMemberRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayMulticastGroupSource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayMulticastGroupSource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayMulticastGroupSourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayPeeringAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayPeeringAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayPeeringAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRoute&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTable&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRouteTable
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRouteTableRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTableAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRouteTableAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRouteTableAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayRouteTablePropagation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayRouteTablePropagation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayRouteTablePropagationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TransitGatewayVpcAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTransitGatewayVpcAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTransitGatewayVpcAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VerifiedAccessEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVerifiedAccessEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVerifiedAccessEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VerifiedAccessGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVerifiedAccessGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVerifiedAccessGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VerifiedAccessTrustProvider&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVerifiedAccessTrustProvider
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVerifiedAccessTrustProviderRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VerifiedAccessInstance&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVerifiedAccessInstance
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVerifiedAccessInstanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VolumeAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVolumeAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVolumeAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPC&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPC
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCBlockPublicAccessExclusion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCBlockPublicAccessExclusion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCBlockPublicAccessExclusionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCBlockPublicAccessOptions&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCBlockPublicAccessOptions
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCBlockPublicAccessOptionsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCCidrBlock&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCCidrBlock
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCCidrBlockRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCDHCPOptionsAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCDHCPOptionsAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCDHCPOptionsAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCEndpointConnectionNotification&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCEndpointConnectionNotification
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCEndpointConnectionNotificationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCEndpointService&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCEndpointService
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCEndpointServiceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCEndpointServicePermissions&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCEndpointServicePermissions
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCEndpointServicePermissionsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCGatewayAttachment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCGatewayAttachment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCGatewayAttachmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPCPeeringConnection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPCPeeringConnection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPCPeeringConnectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPNConnection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPNConnection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPNConnectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPNConnectionRoute&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPNConnectionRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPNConnectionRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VPNGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVPNGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVPNGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DescribeRouteTables&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: DescribeRouteTables
      operationId: GET_DescribeRouteTables
      description: >-
        <p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon Virtual Private Cloud User
        Guide</i>.</p>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/DescribeRouteTablesResult'
      parameters:
        - name: Filter
          in: query
          required: false
          description: >-
            <p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC
            (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the Amazon Web Services account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p>
            <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the Amazon Web Service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway
            specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the
            route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the
            specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value
            <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/Filter'
                - xml:
                    name: Filter
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
        - name: RouteTableId
          in: query
          required: false
          description: '<p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>'
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/RouteTableId'
                - xml:
                    name: item
        - name: NextToken
          in: query
          required: false
          description: The token for the next page of results.
          schema:
            type: string
        - name: MaxResults
          in: query
          required: false
          description: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
          schema:
            type: integer
            minimum: 5
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=BundleInstance&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: BundleInstance
      operationId: GET_BundleInstance
      description: <p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/BundleInstanceResult'
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: '<p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p>'
          schema:
            type: string
        - name: Storage
          in: query
          required: true
          description: The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
          schema:
            type: object
            properties:
              undefined:
                allOf:
                  - $ref: '#/components/schemas/S3Storage'
                  - description: An Amazon S3 storage location.
            description: Describes the storage location for an instance store-backed AMI.
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=ImportInstance&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: ImportInstance
      operationId: GET_ImportInstance
      description: >-
        <p>Creates an import instance task using metadata from the specified disk image.</p> <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a> instead.</p> <p>This API action is not supported by the Command Line Interface (CLI). For information about using the Amazon EC2 CLI, which is deprecated, see <a href="https://awsdocs.s3.amazonaws.com/EC2/ec2-clt.pdf#UsingVirtualMachinesinAmazonEC2">Importing a VM to Amazon EC2</a> in the <i>Amazon EC2
        CLI Reference</i> PDF file.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/ImportInstanceResult'
      parameters:
        - name: Description
          in: query
          required: false
          description: A description for the instance being imported.
          schema:
            type: string
        - name: DiskImage
          in: query
          required: false
          description: The disk image.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DiskImage'
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
        - name: LaunchSpecification
          in: query
          required: false
          description: The launch specification.
          schema:
            type: object
            properties:
              additionalInfo:
                allOf:
                  - $ref: '#/components/schemas/String'
                  - description: Reserved.
              architecture:
                allOf:
                  - $ref: '#/components/schemas/ArchitectureValues'
                  - description: The architecture of the instance.
              GroupId:
                allOf:
                  - $ref: '#/components/schemas/SecurityGroupIdStringList'
                  - description: The security group IDs.
              GroupName:
                allOf:
                  - $ref: '#/components/schemas/SecurityGroupStringList'
                  - description: The security group names.
              instanceInitiatedShutdownBehavior:
                allOf:
                  - $ref: '#/components/schemas/ShutdownBehavior'
                  - description: Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
              instanceType:
                allOf:
                  - $ref: '#/components/schemas/InstanceType'
                  - description: The instance type. For more information about the instance types that you can import, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types">Instance Types</a> in the VM Import/Export User Guide.
              monitoring:
                allOf:
                  - $ref: '#/components/schemas/Boolean'
                  - description: Indicates whether monitoring is enabled.
              placement:
                allOf:
                  - $ref: '#/components/schemas/Placement'
                  - description: The placement information for the instance.
              privateIpAddress:
                allOf:
                  - $ref: '#/components/schemas/String'
                  - description: '[EC2-VPC] An available IP address from the IP address range of the subnet.'
              subnetId:
                allOf:
                  - $ref: '#/components/schemas/SubnetId'
                  - description: '[EC2-VPC] The ID of the subnet in which to launch the instance.'
              userData:
                allOf:
                  - $ref: '#/components/schemas/UserData'
                  - description: The Base64-encoded user data to make available to the instance.
            description: Describes the launch specification for VM import.
        - name: Platform
          in: query
          required: true
          description: The instance operating system.
          schema:
            type: string
            enum:
              - Windows
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=MonitorInstances&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: MonitorInstances
      operationId: GET_MonitorInstances
      description: <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitor your instances using CloudWatch</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>To disable detailed monitoring, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_UnmonitorInstances.html">UnmonitorInstances</a>.</p>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/MonitorInstancesResult'
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: The IDs of the instances.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/InstanceId'
                - xml:
                    name: InstanceId
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=RebootInstances&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: RebootInstances
      operationId: GET_RebootInstances
      description: >-
        <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a
        href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Troubleshoot an unreachable instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
      responses:
        '200':
          description: Success
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: The instance IDs.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/InstanceId'
                - xml:
                    name: InstanceId
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=StartInstances&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: StartInstances
      operationId: GET_StartInstances
      description: >-
        <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your
        instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>If you attempt to start a T3 instance with <code>host</code> tenancy and the
        <code>unlimted</code> CPU credit option, the request fails. The <code>unlimited</code> CPU credit option is not supported on Dedicated Hosts. Before you start the instance, either change its CPU credit option to <code>standard</code>, or change its tenancy to <code>default</code> or <code>dedicated</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/StartInstancesResult'
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: The IDs of the instances.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstanceId'
        - name: AdditionalInfo
          in: query
          required: false
          description: Reserved.
          schema:
            type: string
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=StopInstances&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: StopInstances
      operationId: GET_StopInstances
      description: >-
        <p>Stops an Amazon EBS-backed instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for hibernation</a> and it meets the <a
        href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for
        Amazon EBS volume usage. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate Spot Instances when they are interrupted. For more information, see <a
        href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating interrupted Spot Instances</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does
        preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.</p> <p>Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences
        between rebooting, stopping, hibernating, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a
        href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshoot stopping your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/StopInstancesResult'
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: The IDs of the instances.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/InstanceId'
                - xml:
                    name: InstanceId
        - name: Hibernate
          in: query
          required: false
          description: '<p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p> Default: <code>false</code> </p>'
          schema:
            type: boolean
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
        - name: Force
          in: query
          required: false
          description: '<p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>'
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /?Action=UnmonitorInstances&Version=2016-11-15&__nativeEndpoint=true:
    get:
      x-aws-operation-name: UnmonitorInstances
      operationId: GET_UnmonitorInstances
      description: Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring your instances and volumes</a> in the <i>Amazon EC2 User Guide</i>.
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/UnmonitorInstancesResult'
      parameters:
        - name: InstanceId
          in: query
          required: true
          description: The IDs of the instances.
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/InstanceId'
                - xml:
                    name: InstanceId
        - name: DryRun
          in: query
          required: false
          description: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
  queryParamTranspose:
    algorithm: AWSCanonical
