openapi: 3.0.0
info:
  title: ElasticBeanstalk
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ApplicationResourceLifecycleConfig:
      type: object
      additionalProperties: false
      properties:
        ServiceRole:
          description: The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another value.
          type: string
        VersionLifecycleConfig:
          description: Defines lifecycle settings for application versions.
          $ref: '#/components/schemas/ApplicationVersionLifecycleConfig'
    ApplicationVersionLifecycleConfig:
      type: object
      additionalProperties: false
      properties:
        MaxAgeRule:
          description: Specify a max age rule to restrict the length of time that application versions are retained for an application.
          $ref: '#/components/schemas/MaxAgeRule'
        MaxCountRule:
          description: Specify a max count rule to restrict the number of application versions that are retained for an application.
          $ref: '#/components/schemas/MaxCountRule'
    MaxAgeRule:
      type: object
      additionalProperties: false
      properties:
        DeleteSourceFromS3:
          description: Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
          type: boolean
        Enabled:
          description: Specify true to apply the rule, or false to disable it.
          type: boolean
        MaxAgeInDays:
          description: Specify the number of days to retain an application versions.
          type: integer
    MaxCountRule:
      type: object
      additionalProperties: false
      properties:
        DeleteSourceFromS3:
          description: Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
          type: boolean
        Enabled:
          description: Specify true to apply the rule, or false to disable it.
          type: boolean
        MaxCount:
          description: Specify the maximum number of application versions to retain.
          type: integer
    Application:
      type: object
      properties:
        ApplicationName:
          description: A name for the Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
          type: string
        Description:
          description: Your description of the application.
          type: string
        ResourceLifecycleConfig:
          description: Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.
          $ref: '#/components/schemas/ApplicationResourceLifecycleConfig'
      x-stackql-resource-name: application
      description: The AWS::ElasticBeanstalk::Application resource specifies an Elastic Beanstalk application.
      x-type-name: AWS::ElasticBeanstalk::Application
      x-stackql-primary-identifier:
        - ApplicationName
      x-create-only-properties:
        - ApplicationName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - elasticbeanstalk:CreateApplication
        read:
          - elasticbeanstalk:DescribeApplications
        update:
          - elasticbeanstalk:UpdateApplication
          - elasticbeanstalk:UpdateApplicationResourceLifecycle
        delete:
          - elasticbeanstalk:DeleteApplication
        list:
          - elasticbeanstalk:DescribeApplications
    SourceBundle:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          description: The Amazon S3 bucket where the data is located.
          type: string
        S3Key:
          description: The Amazon S3 key where the data is located.
          type: string
      required:
        - S3Bucket
        - S3Key
    ApplicationVersion:
      type: object
      properties:
        Id:
          type: string
        ApplicationName:
          description: 'The name of the Elastic Beanstalk application that is associated with this application version. '
          type: string
        Description:
          description: A description of this application version.
          type: string
        SourceBundle:
          description: 'The Amazon S3 bucket and key that identify the location of the source bundle for this version. '
          $ref: '#/components/schemas/SourceBundle'
      required:
        - ApplicationName
        - SourceBundle
      x-stackql-resource-name: application_version
      description: Resource Type definition for AWS::ElasticBeanstalk::ApplicationVersion
      x-type-name: AWS::ElasticBeanstalk::ApplicationVersion
      x-stackql-primary-identifier:
        - ApplicationName
        - Id
      x-create-only-properties:
        - SourceBundle
        - ApplicationName
      x-read-only-properties:
        - Id
      x-required-properties:
        - ApplicationName
        - SourceBundle
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - elasticbeanstalk:CreateApplicationVersion
          - elasticbeanstalk:DescribeApplicationVersions
          - s3:GetObject
          - s3:PutObject
        read:
          - elasticbeanstalk:DescribeApplicationVersions
        update:
          - elasticbeanstalk:UpdateApplicationVersion
        delete:
          - elasticbeanstalk:DeleteApplicationVersion
        list:
          - elasticbeanstalk:DescribeApplicationVersions
    SourceConfiguration:
      type: object
      additionalProperties: false
      properties:
        ApplicationName:
          description: The name of the application associated with the configuration.
          type: string
        TemplateName:
          description: The name of the configuration template.
          type: string
      required:
        - TemplateName
        - ApplicationName
    ConfigurationOptionSetting:
      type: object
      additionalProperties: false
      properties:
        Namespace:
          description: A unique namespace that identifies the option's associated AWS resource.
          type: string
        OptionName:
          description: The name of the configuration option.
          type: string
        ResourceName:
          description: 'A unique resource name for the option setting. Use it for a time–based scaling configuration option. '
          type: string
        Value:
          description: The current value for the configuration option.
          type: string
      required:
        - Namespace
        - OptionName
    ConfigurationTemplate:
      type: object
      properties:
        ApplicationName:
          description: 'The name of the Elastic Beanstalk application to associate with this configuration template. '
          type: string
        Description:
          description: An optional description for this configuration.
          type: string
        EnvironmentId:
          description: 'The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don''t specify PlatformArn, SolutionStackName, or SourceConfiguration. '
          type: string
        OptionSettings:
          description: 'Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide. '
          type: array
          x-arrayType: AttributeList
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigurationOptionSetting'
        PlatformArn:
          description: 'The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. '
          type: string
        SolutionStackName:
          description: >-
            The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported
            Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide.

             You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration.

             Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks. 
          type: string
        SourceConfiguration:
          description: |-
            An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.

            Values specified in OptionSettings override any values obtained from the SourceConfiguration.

            You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName.

            Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name. 
          $ref: '#/components/schemas/SourceConfiguration'
        TemplateName:
          description: The name of the configuration template
          type: string
      required:
        - ApplicationName
      x-stackql-resource-name: configuration_template
      description: Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
      x-type-name: AWS::ElasticBeanstalk::ConfigurationTemplate
      x-stackql-primary-identifier:
        - ApplicationName
        - TemplateName
      x-create-only-properties:
        - ApplicationName
        - EnvironmentId
        - PlatformArn
        - SolutionStackName
        - SourceConfiguration
      x-write-only-properties:
        - EnvironmentId
        - SourceConfiguration/ApplicationName
        - SourceConfiguration/TemplateName
      x-read-only-properties:
        - TemplateName
      x-required-properties:
        - ApplicationName
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - elasticbeanstalk:CreateConfigurationTemplate
        read:
          - elasticbeanstalk:DescribeConfigurationSettings
        update:
          - elasticbeanstalk:UpdateConfigurationTemplate
        delete:
          - elasticbeanstalk:DeleteConfigurationTemplate
          - elasticbeanstalk:DescribeConfigurationSettings
        list:
          - elasticbeanstalk:DescribeApplications
    Tier:
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of this environment tier.
          type: string
        Version:
          description: The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.
          type: string
        Name:
          description: The name of this environment tier.
          type: string
    OptionSetting:
      additionalProperties: false
      type: object
      properties:
        ResourceName:
          description: A unique resource name for the option setting. Use it for a time–based scaling configuration option.
          type: string
        Value:
          description: The current value for the configuration option.
          type: string
        Namespace:
          description: A unique namespace that identifies the option's associated AWS resource.
          type: string
        OptionName:
          description: The name of the configuration option.
          type: string
      required:
        - Namespace
        - OptionName
    Tag:
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value for the tag.
          type: string
        Key:
          description: The key name of the tag.
          type: string
      required:
        - Value
        - Key
    Environment:
      type: object
      properties:
        PlatformArn:
          description: The Amazon Resource Name (ARN) of the custom platform to use with the environment.
          type: string
        ApplicationName:
          description: The name of the application that is associated with this environment.
          type: string
        Description:
          description: Your description for this environment.
          type: string
        EnvironmentName:
          description: A unique name for the environment.
          type: string
        OperationsRole:
          description: The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
          type: string
        Tier:
          description: Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
          $ref: '#/components/schemas/Tier'
        VersionLabel:
          description: The name of the application version to deploy.
          type: string
        EndpointURL:
          type: string
        OptionSettings:
          uniqueItems: false
          description: Key-value pairs defining configuration options for this environment, such as the instance type.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/OptionSetting'
        TemplateName:
          description: The name of the Elastic Beanstalk configuration template to use with the environment.
          type: string
        SolutionStackName:
          description: The name of an Elastic Beanstalk solution stack (platform version) to use with the environment.
          type: string
        CNAMEPrefix:
          description: If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
          type: string
        Tags:
          uniqueItems: false
          description: Specifies the tags applied to resources in the environment.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ApplicationName
      x-stackql-resource-name: environment
      description: Resource Type definition for AWS::ElasticBeanstalk::Environment
      x-type-name: AWS::ElasticBeanstalk::Environment
      x-stackql-primary-identifier:
        - EnvironmentName
      x-create-only-properties:
        - CNAMEPrefix
        - EnvironmentName
        - ApplicationName
        - SolutionStackName
        - Tier/Name
        - Tier/Type
      x-write-only-properties:
        - TemplateName
        - OptionSettings
        - OptionSettings/*/OptionName
        - OptionSettings/*/ResourceName
        - OptionSettings/*/Namespace
        - OptionSettings/*/Value
      x-read-only-properties:
        - EndpointURL
      x-required-properties:
        - ApplicationName
      x-tagging:
        permissions:
          - elasticbeanstalk:AddTags
          - elasticbeanstalk:RemoveTags
          - elasticbeanstalk:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - elasticbeanstalk:DescribeEnvironments
          - elasticbeanstalk:DescribeConfigurationSettings
          - elasticbeanstalk:ListTagsForResource
        create:
          - elasticbeanstalk:DescribeEnvironments
          - elasticbeanstalk:CreateEnvironment
          - elasticbeanstalk:AddTags
          - elasticbeanstalk:ListTagsForResource
          - iam:PassRole
        update:
          - elasticbeanstalk:DescribeEnvironments
          - elasticbeanstalk:UpdateEnvironment
          - elasticbeanstalk:AssociateEnvironmentOperationsRole
          - elasticbeanstalk:DisassociateEnvironmentOperationsRole
          - elasticbeanstalk:AddTags
          - elasticbeanstalk:ListTagsForResource
          - elasticbeanstalk:RemoveTags
          - s3:GetBucketLocation
          - s3:GetBucketPolicy
          - s3:ListBucket
          - s3:PutBucketPolicy
          - iam:PassRole
        list:
          - elasticbeanstalk:DescribeEnvironments
          - elasticbeanstalk:ListTagsForResource
        delete:
          - elasticbeanstalk:DescribeEnvironments
          - elasticbeanstalk:TerminateEnvironment
    CreateApplicationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApplicationName:
              description: A name for the Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
              type: string
            Description:
              description: Your description of the application.
              type: string
            ResourceLifecycleConfig:
              description: Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.
              $ref: '#/components/schemas/ApplicationResourceLifecycleConfig'
          x-stackQL-stringOnly: true
      x-title: CreateApplicationRequest
      type: object
      required: []
    CreateApplicationVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
            ApplicationName:
              description: 'The name of the Elastic Beanstalk application that is associated with this application version. '
              type: string
            Description:
              description: A description of this application version.
              type: string
            SourceBundle:
              description: 'The Amazon S3 bucket and key that identify the location of the source bundle for this version. '
              $ref: '#/components/schemas/SourceBundle'
          x-stackQL-stringOnly: true
      x-title: CreateApplicationVersionRequest
      type: object
      required: []
    CreateConfigurationTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApplicationName:
              description: 'The name of the Elastic Beanstalk application to associate with this configuration template. '
              type: string
            Description:
              description: An optional description for this configuration.
              type: string
            EnvironmentId:
              description: 'The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don''t specify PlatformArn, SolutionStackName, or SourceConfiguration. '
              type: string
            OptionSettings:
              description: 'Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide. '
              type: array
              x-arrayType: AttributeList
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConfigurationOptionSetting'
            PlatformArn:
              description: 'The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. '
              type: string
            SolutionStackName:
              description: >-
                The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported
                Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide.

                 You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration.

                 Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks. 
              type: string
            SourceConfiguration:
              description: |-
                An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.

                Values specified in OptionSettings override any values obtained from the SourceConfiguration.

                You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName.

                Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name. 
              $ref: '#/components/schemas/SourceConfiguration'
            TemplateName:
              description: The name of the configuration template
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateConfigurationTemplateRequest
      type: object
      required: []
    CreateEnvironmentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PlatformArn:
              description: The Amazon Resource Name (ARN) of the custom platform to use with the environment.
              type: string
            ApplicationName:
              description: The name of the application that is associated with this environment.
              type: string
            Description:
              description: Your description for this environment.
              type: string
            EnvironmentName:
              description: A unique name for the environment.
              type: string
            OperationsRole:
              description: The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
              type: string
            Tier:
              description: Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
              $ref: '#/components/schemas/Tier'
            VersionLabel:
              description: The name of the application version to deploy.
              type: string
            EndpointURL:
              type: string
            OptionSettings:
              uniqueItems: false
              description: Key-value pairs defining configuration options for this environment, such as the instance type.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/OptionSetting'
            TemplateName:
              description: The name of the Elastic Beanstalk configuration template to use with the environment.
              type: string
            SolutionStackName:
              description: The name of an Elastic Beanstalk solution stack (platform version) to use with the environment.
              type: string
            CNAMEPrefix:
              description: If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
              type: string
            Tags:
              uniqueItems: false
              description: Specifies the tags applied to resources in the environment.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateEnvironmentRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.elasticbeanstalk.applications
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::ElasticBeanstalk::Application
      x-identifiers:
        - ApplicationName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Application"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/applications/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/applications/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/applications/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ResourceLifecycleConfig') as resource_lifecycle_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
              AND data__Identifier = '<ApplicationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApplicationName') as application_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ResourceLifecycleConfig') as resource_lifecycle_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Application'
                AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Application'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApplicationName') as application_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ResourceLifecycleConfig') as resource_lifecycle_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
                  AND data__Identifier = '<ApplicationName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApplicationName') as application_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ResourceLifecycleConfig') as resource_lifecycle_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Application'
                    AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Application'
                    AND listing.region = 'us-east-1'
    applications_list_only:
      name: applications_list_only
      id: aws.elasticbeanstalk.applications_list_only
      x-cfn-schema-name: Application
      x-cfn-type-name: AWS::ElasticBeanstalk::Application
      x-identifiers:
        - ApplicationName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationName') as application_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
                AND region = 'us-east-1'
    application_versions:
      name: application_versions
      id: aws.elasticbeanstalk.application_versions
      x-cfn-schema-name: ApplicationVersion
      x-cfn-type-name: AWS::ElasticBeanstalk::ApplicationVersion
      x-identifiers:
        - ApplicationName
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ApplicationVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ApplicationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ApplicationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ApplicationVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/application_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/application_versions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/application_versions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SourceBundle') as source_bundle
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
              AND data__Identifier = '<ApplicationName>|<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ApplicationName') as application_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SourceBundle') as source_bundle
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                AND detail.data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ApplicationName') as application_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SourceBundle') as source_bundle
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                  AND data__Identifier = '<ApplicationName>|<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ApplicationName') as application_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SourceBundle') as source_bundle
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                    AND detail.data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                    AND listing.region = 'us-east-1'
    application_versions_list_only:
      name: application_versions_list_only
      id: aws.elasticbeanstalk.application_versions_list_only
      x-cfn-schema-name: ApplicationVersion
      x-cfn-type-name: AWS::ElasticBeanstalk::ApplicationVersion
      x-identifiers:
        - ApplicationName
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationName') as application_name,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
                AND region = 'us-east-1'
    configuration_templates:
      name: configuration_templates
      id: aws.elasticbeanstalk.configuration_templates
      x-cfn-schema-name: ConfigurationTemplate
      x-cfn-type-name: AWS::ElasticBeanstalk::ConfigurationTemplate
      x-identifiers:
        - ApplicationName
        - TemplateName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ConfigurationTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ConfigurationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ConfigurationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::ConfigurationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/configuration_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/configuration_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/configuration_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.OptionSettings') as option_settings,
              JSON_EXTRACT(Properties, '$.PlatformArn') as platform_arn,
              JSON_EXTRACT(Properties, '$.SolutionStackName') as solution_stack_name,
              JSON_EXTRACT(Properties, '$.SourceConfiguration') as source_configuration,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
              AND data__Identifier = '<ApplicationName>|<TemplateName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApplicationName') as application_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentId') as environment_id,
                JSON_EXTRACT(detail.Properties, '$.OptionSettings') as option_settings,
                JSON_EXTRACT(detail.Properties, '$.PlatformArn') as platform_arn,
                JSON_EXTRACT(detail.Properties, '$.SolutionStackName') as solution_stack_name,
                JSON_EXTRACT(detail.Properties, '$.SourceConfiguration') as source_configuration,
                JSON_EXTRACT(detail.Properties, '$.TemplateName') as template_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                AND detail.data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApplicationName') as application_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                  json_extract_path_text(Properties, 'OptionSettings') as option_settings,
                  json_extract_path_text(Properties, 'PlatformArn') as platform_arn,
                  json_extract_path_text(Properties, 'SolutionStackName') as solution_stack_name,
                  json_extract_path_text(Properties, 'SourceConfiguration') as source_configuration,
                  json_extract_path_text(Properties, 'TemplateName') as template_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                  AND data__Identifier = '<ApplicationName>|<TemplateName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApplicationName') as application_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EnvironmentId') as environment_id,
                    json_extract_path_text(detail.Properties, 'OptionSettings') as option_settings,
                    json_extract_path_text(detail.Properties, 'PlatformArn') as platform_arn,
                    json_extract_path_text(detail.Properties, 'SolutionStackName') as solution_stack_name,
                    json_extract_path_text(detail.Properties, 'SourceConfiguration') as source_configuration,
                    json_extract_path_text(detail.Properties, 'TemplateName') as template_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                    AND detail.data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                    AND listing.region = 'us-east-1'
    configuration_templates_list_only:
      name: configuration_templates_list_only
      id: aws.elasticbeanstalk.configuration_templates_list_only
      x-cfn-schema-name: ConfigurationTemplate
      x-cfn-type-name: AWS::ElasticBeanstalk::ConfigurationTemplate
      x-identifiers:
        - ApplicationName
        - TemplateName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationName') as application_name,
                json_extract_path_text(Properties, 'TemplateName') as template_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
                AND region = 'us-east-1'
    environments:
      name: environments
      id: aws.elasticbeanstalk.environments
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::ElasticBeanstalk::Environment
      x-identifiers:
        - EnvironmentName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ElasticBeanstalk::Environment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/environments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/environments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/environments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PlatformArn') as platform_arn,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EnvironmentName') as environment_name,
              JSON_EXTRACT(Properties, '$.OperationsRole') as operations_role,
              JSON_EXTRACT(Properties, '$.Tier') as tier,
              JSON_EXTRACT(Properties, '$.VersionLabel') as version_label,
              JSON_EXTRACT(Properties, '$.EndpointURL') as endpoint_url,
              JSON_EXTRACT(Properties, '$.OptionSettings') as option_settings,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name,
              JSON_EXTRACT(Properties, '$.SolutionStackName') as solution_stack_name,
              JSON_EXTRACT(Properties, '$.CNAMEPrefix') as cname_prefix,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
              AND data__Identifier = '<EnvironmentName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PlatformArn') as platform_arn,
                JSON_EXTRACT(detail.Properties, '$.ApplicationName') as application_name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EnvironmentName') as environment_name,
                JSON_EXTRACT(detail.Properties, '$.OperationsRole') as operations_role,
                JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
                JSON_EXTRACT(detail.Properties, '$.VersionLabel') as version_label,
                JSON_EXTRACT(detail.Properties, '$.EndpointURL') as endpoint_url,
                JSON_EXTRACT(detail.Properties, '$.OptionSettings') as option_settings,
                JSON_EXTRACT(detail.Properties, '$.TemplateName') as template_name,
                JSON_EXTRACT(detail.Properties, '$.SolutionStackName') as solution_stack_name,
                JSON_EXTRACT(detail.Properties, '$.CNAMEPrefix') as cname_prefix,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PlatformArn') as platform_arn,
                  json_extract_path_text(Properties, 'ApplicationName') as application_name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EnvironmentName') as environment_name,
                  json_extract_path_text(Properties, 'OperationsRole') as operations_role,
                  json_extract_path_text(Properties, 'Tier') as tier,
                  json_extract_path_text(Properties, 'VersionLabel') as version_label,
                  json_extract_path_text(Properties, 'EndpointURL') as endpoint_url,
                  json_extract_path_text(Properties, 'OptionSettings') as option_settings,
                  json_extract_path_text(Properties, 'TemplateName') as template_name,
                  json_extract_path_text(Properties, 'SolutionStackName') as solution_stack_name,
                  json_extract_path_text(Properties, 'CNAMEPrefix') as cname_prefix,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                  AND data__Identifier = '<EnvironmentName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PlatformArn') as platform_arn,
                    json_extract_path_text(detail.Properties, 'ApplicationName') as application_name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EnvironmentName') as environment_name,
                    json_extract_path_text(detail.Properties, 'OperationsRole') as operations_role,
                    json_extract_path_text(detail.Properties, 'Tier') as tier,
                    json_extract_path_text(detail.Properties, 'VersionLabel') as version_label,
                    json_extract_path_text(detail.Properties, 'EndpointURL') as endpoint_url,
                    json_extract_path_text(detail.Properties, 'OptionSettings') as option_settings,
                    json_extract_path_text(detail.Properties, 'TemplateName') as template_name,
                    json_extract_path_text(detail.Properties, 'SolutionStackName') as solution_stack_name,
                    json_extract_path_text(detail.Properties, 'CNAMEPrefix') as cname_prefix,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                    AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                    AND listing.region = 'us-east-1'
    environments_list_only:
      name: environments_list_only
      id: aws.elasticbeanstalk.environments_list_only
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::ElasticBeanstalk::Environment
      x-identifiers:
        - EnvironmentName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentName') as environment_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentName') as environment_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                AND region = 'us-east-1'
    environment_tags:
      name: environment_tags
      id: aws.elasticbeanstalk.environment_tags
      x-cfn-schema-name: Environment
      x-cfn-type-name: AWS::ElasticBeanstalk::Environment
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PlatformArn') as platform_arn,
              JSON_EXTRACT(detail.Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EnvironmentName') as environment_name,
              JSON_EXTRACT(detail.Properties, '$.OperationsRole') as operations_role,
              JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
              JSON_EXTRACT(detail.Properties, '$.VersionLabel') as version_label,
              JSON_EXTRACT(detail.Properties, '$.EndpointURL') as endpoint_url,
              JSON_EXTRACT(detail.Properties, '$.OptionSettings') as option_settings,
              JSON_EXTRACT(detail.Properties, '$.TemplateName') as template_name,
              JSON_EXTRACT(detail.Properties, '$.SolutionStackName') as solution_stack_name,
              JSON_EXTRACT(detail.Properties, '$.CNAMEPrefix') as cname_prefix
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
              AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PlatformArn') as platform_arn,
                json_extract_path_text(detail.Properties, 'ApplicationName') as application_name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EnvironmentName') as environment_name,
                json_extract_path_text(detail.Properties, 'OperationsRole') as operations_role,
                json_extract_path_text(detail.Properties, 'Tier') as tier,
                json_extract_path_text(detail.Properties, 'VersionLabel') as version_label,
                json_extract_path_text(detail.Properties, 'EndpointURL') as endpoint_url,
                json_extract_path_text(detail.Properties, 'OptionSettings') as option_settings,
                json_extract_path_text(detail.Properties, 'TemplateName') as template_name,
                json_extract_path_text(detail.Properties, 'SolutionStackName') as solution_stack_name,
                json_extract_path_text(detail.Properties, 'CNAMEPrefix') as cname_prefix
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                AND detail.data__TypeName = 'AWS::ElasticBeanstalk::Environment'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Application&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApplication
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ApplicationVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApplicationVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApplicationVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ConfigurationTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateConfigurationTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateConfigurationTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Environment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEnvironment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
