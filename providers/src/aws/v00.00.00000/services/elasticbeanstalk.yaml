openapi: 3.0.0
info:
  title: ElasticBeanstalk
  version: 1.0.0
paths: {}
components:
  schemas:
    ApplicationResourceLifecycleConfig:
      type: object
      additionalProperties: false
      properties:
        ServiceRole:
          description: The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another value.
          type: string
        VersionLifecycleConfig:
          description: Defines lifecycle settings for application versions.
          $ref: '#/components/schemas/ApplicationVersionLifecycleConfig'
    ApplicationVersionLifecycleConfig:
      type: object
      additionalProperties: false
      properties:
        MaxAgeRule:
          description: Specify a max age rule to restrict the length of time that application versions are retained for an application.
          $ref: '#/components/schemas/MaxAgeRule'
        MaxCountRule:
          description: Specify a max count rule to restrict the number of application versions that are retained for an application.
          $ref: '#/components/schemas/MaxCountRule'
    MaxAgeRule:
      type: object
      additionalProperties: false
      properties:
        DeleteSourceFromS3:
          description: Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
          type: boolean
        Enabled:
          description: Specify true to apply the rule, or false to disable it.
          type: boolean
        MaxAgeInDays:
          description: Specify the number of days to retain an application versions.
          type: integer
    MaxCountRule:
      type: object
      additionalProperties: false
      properties:
        DeleteSourceFromS3:
          description: Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
          type: boolean
        Enabled:
          description: Specify true to apply the rule, or false to disable it.
          type: boolean
        MaxCount:
          description: Specify the maximum number of application versions to retain.
          type: integer
    Application:
      type: object
      properties:
        ApplicationName:
          description: A name for the Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
          type: string
        Description:
          description: Your description of the application.
          type: string
        ResourceLifecycleConfig:
          description: Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.
          $ref: '#/components/schemas/ApplicationResourceLifecycleConfig'
      x-stackql-resource-name: application
      x-stackql-primaryIdentifier:
        - ApplicationName
    SourceBundle:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          description: The Amazon S3 bucket where the data is located.
          type: string
        S3Key:
          description: The Amazon S3 key where the data is located.
          type: string
      required:
        - S3Bucket
        - S3Key
    ApplicationVersion:
      type: object
      properties:
        Id:
          type: string
        ApplicationName:
          description: 'The name of the Elastic Beanstalk application that is associated with this application version. '
          type: string
        Description:
          description: A description of this application version.
          type: string
        SourceBundle:
          description: 'The Amazon S3 bucket and key that identify the location of the source bundle for this version. '
          $ref: '#/components/schemas/SourceBundle'
      required:
        - ApplicationName
        - SourceBundle
      x-stackql-resource-name: application_version
      x-stackql-primaryIdentifier:
        - ApplicationName
        - Id
    SourceConfiguration:
      type: object
      additionalProperties: false
      properties:
        ApplicationName:
          description: The name of the application associated with the configuration.
          type: string
        TemplateName:
          description: The name of the configuration template.
          type: string
      required:
        - TemplateName
        - ApplicationName
    ConfigurationOptionSetting:
      type: object
      additionalProperties: false
      properties:
        Namespace:
          description: A unique namespace that identifies the option's associated AWS resource.
          type: string
        OptionName:
          description: The name of the configuration option.
          type: string
        ResourceName:
          description: 'A unique resource name for the option setting. Use it for a time–based scaling configuration option. '
          type: string
        Value:
          description: The current value for the configuration option.
          type: string
      required:
        - Namespace
        - OptionName
    ConfigurationTemplate:
      type: object
      properties:
        ApplicationName:
          description: 'The name of the Elastic Beanstalk application to associate with this configuration template. '
          type: string
        Description:
          description: An optional description for this configuration.
          type: string
        EnvironmentId:
          description: 'The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don''t specify PlatformArn, SolutionStackName, or SourceConfiguration. '
          type: string
        OptionSettings:
          description: 'Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide. '
          type: array
          x-arrayType: AttributeList
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigurationOptionSetting'
        PlatformArn:
          description: 'The Amazon Resource Name (ARN) of the custom platform. For more information, see [Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. '
          type: string
        SolutionStackName:
          description: >-
            The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported
            Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide.

             You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration.

             Use the ListAvailableSolutionStacks API to obtain a list of available solution stacks. 
          type: string
        SourceConfiguration:
          description: |-
            An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.

            Values specified in OptionSettings override any values obtained from the SourceConfiguration.

            You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName.

            Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name. 
          $ref: '#/components/schemas/SourceConfiguration'
        TemplateName:
          description: The name of the configuration template
          type: string
      required:
        - ApplicationName
      x-stackql-resource-name: configuration_template
      x-stackql-primaryIdentifier:
        - ApplicationName
        - TemplateName
    Tier:
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of this environment tier.
          type: string
        Version:
          description: The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.
          type: string
        Name:
          description: The name of this environment tier.
          type: string
    OptionSetting:
      additionalProperties: false
      type: object
      properties:
        ResourceName:
          description: A unique resource name for the option setting. Use it for a time–based scaling configuration option.
          type: string
        Value:
          description: The current value for the configuration option.
          type: string
        Namespace:
          description: A unique namespace that identifies the option's associated AWS resource.
          type: string
        OptionName:
          description: The name of the configuration option.
          type: string
      required:
        - Namespace
        - OptionName
    Tag:
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value for the tag.
          type: string
        Key:
          description: The key name of the tag.
          type: string
      required:
        - Value
        - Key
    Environment:
      type: object
      properties:
        PlatformArn:
          description: The Amazon Resource Name (ARN) of the custom platform to use with the environment.
          type: string
        ApplicationName:
          description: The name of the application that is associated with this environment.
          type: string
        Description:
          description: Your description for this environment.
          type: string
        EnvironmentName:
          description: A unique name for the environment.
          type: string
        OperationsRole:
          description: The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.
          type: string
        Tier:
          description: Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.
          $ref: '#/components/schemas/Tier'
        VersionLabel:
          description: The name of the application version to deploy.
          type: string
        EndpointURL:
          type: string
        OptionSettings:
          uniqueItems: false
          description: Key-value pairs defining configuration options for this environment, such as the instance type.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/OptionSetting'
        TemplateName:
          description: The name of the Elastic Beanstalk configuration template to use with the environment.
          type: string
        SolutionStackName:
          description: The name of an Elastic Beanstalk solution stack (platform version) to use with the environment.
          type: string
        CNAMEPrefix:
          description: If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
          type: string
        Tags:
          uniqueItems: false
          description: Specifies the tags applied to resources in the environment.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ApplicationName
      x-stackql-resource-name: environment
      x-stackql-primaryIdentifier:
        - EnvironmentName
  x-stackQL-resources:
    applications:
      name: applications
      id: aws.elasticbeanstalk.applications
      x-cfn-schema-name: Application
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
    application:
      name: application
      id: aws.elasticbeanstalk.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - ApplicationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ResourceLifecycleConfig.ServiceRole') as resource_lifecycle_config_service_role,
              JSON_EXTRACT(Properties, '$.ResourceLifecycleConfig.VersionLifecycleConfig') as resource_lifecycle_config_version_lifecycle_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Application'
    application_versions:
      name: application_versions
      id: aws.elasticbeanstalk.application_versions
      x-cfn-schema-name: ApplicationVersion
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
    application_version:
      name: application_version
      id: aws.elasticbeanstalk.application_version
      x-cfn-schema-name: ApplicationVersion
      x-type: get
      x-identifiers:
        - ApplicationName
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SourceBundle.S3Bucket') as source_bundle_s3_bucket,
              JSON_EXTRACT(Properties, '$.SourceBundle.S3Key') as source_bundle_s3_key
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ApplicationVersion'
    configuration_templates:
      name: configuration_templates
      id: aws.elasticbeanstalk.configuration_templates
      x-cfn-schema-name: ConfigurationTemplate
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
    configuration_template:
      name: configuration_template
      id: aws.elasticbeanstalk.configuration_template
      x-cfn-schema-name: ConfigurationTemplate
      x-type: get
      x-identifiers:
        - ApplicationName
        - TemplateName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.OptionSettings') as option_settings,
              JSON_EXTRACT(Properties, '$.PlatformArn') as platform_arn,
              JSON_EXTRACT(Properties, '$.SolutionStackName') as solution_stack_name,
              JSON_EXTRACT(Properties, '$.SourceConfiguration.ApplicationName') as source_configuration_application_name,
              JSON_EXTRACT(Properties, '$.SourceConfiguration.TemplateName') as source_configuration_template_name,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::ConfigurationTemplate'
    environments:
      name: environments
      id: aws.elasticbeanstalk.environments
      x-cfn-schema-name: Environment
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentName') as environment_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
    environment:
      name: environment
      id: aws.elasticbeanstalk.environment
      x-cfn-schema-name: Environment
      x-type: get
      x-identifiers:
        - EnvironmentName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PlatformArn') as platform_arn,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EnvironmentName') as environment_name,
              JSON_EXTRACT(Properties, '$.OperationsRole') as operations_role,
              JSON_EXTRACT(Properties, '$.Tier.Type') as tier_type,
              JSON_EXTRACT(Properties, '$.Tier.Version') as tier_version,
              JSON_EXTRACT(Properties, '$.Tier.Name') as tier_name,
              JSON_EXTRACT(Properties, '$.VersionLabel') as version_label,
              JSON_EXTRACT(Properties, '$.EndpointURL') as endpoint_ur_l,
              JSON_EXTRACT(Properties, '$.OptionSettings') as option_settings,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name,
              JSON_EXTRACT(Properties, '$.SolutionStackName') as solution_stack_name,
              JSON_EXTRACT(Properties, '$.CNAMEPrefix') as c_na_me_prefix,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticBeanstalk::Environment'
