openapi: 3.0.0
info:
  title: Global Inventory
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  schemas:
    Function:
      type: object
      properties:
        FunctionName:
          minLength: 1
          description: |-
            The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
             If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        Description:
          description: A description of the function.
          type: string
          maxLength: 256
        TracingConfig:
          description: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
          type: string
        VpcConfig:
          description: For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
          type: string
        RuntimeManagementConfig:
          description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
          type: string
        ReservedConcurrentExecutions:
          description: The number of simultaneous executions to reserve for the function.
          type: integer
          minimum: 0
        SnapStart:
          description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
          type: string
        FileSystemConfigs:
          maxItems: 1
          description: |-
            Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function.
             For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
          type: string
        Runtime:
          description: |-
            The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image.
             The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).
             For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).
          type: string
        KmsKeyArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: >-
            The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, LAM also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, LAM also uses this key to encrypt your function
            when it's deployed. Note that this is not the same key that's used to protect your container image in the ECRlong (ECR). If you don't provide a customer managed key, LAM uses a default service key.
          type: string
        PackageType:
          description: The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
          type: string
          enum:
            - Image
            - Zip
        CodeSigningConfigArn:
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
          description: To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
          type: string
        Layers:
          uniqueItems: false
          description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
          type: string
        Tags:
          uniqueItems: true
          description: |-
            A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
              You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
          x-insertionOrder: false
          type: string
        ImageConfig:
          description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
          type: string
        MemorySize:
          description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
          type: integer
        DeadLetterConfig:
          description: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
          type: string
        Timeout:
          description: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
          type: integer
          minimum: 1
        Handler:
          pattern: ^[^\s]+$
          description: The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
          type: string
          maxLength: 128
        SnapStartResponse:
          description: ''
          type: string
        Code:
          description: |-
            The code for the function. You can define your function code in multiple ways:
              +  For .zip deployment packages, you can specify the S3 location of the .zip file in the ``S3Bucket``, ``S3Key``, and ``S3ObjectVersion`` properties.
              +  For .zip deployment packages, you can alternatively define the function code inline in the ``ZipFile`` property. This method works only for Node.js and Python functions.
              +  For container images, specify the URI of your container image in the ECR registry in the ``ImageUri`` property.
          type: string
        Role:
          pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          description: The Amazon Resource Name (ARN) of the function's execution role.
          type: string
        LoggingConfig:
          description: The function's Amazon CloudWatch Logs configuration settings.
          type: string
        RecursiveLoop:
          description: |-
            The status of your function's recursive loop detection configuration.
             When this value is set to ``Allow``and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.
             When this value is set to ``Terminate`` and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.
          type: string
        Environment:
          description: Environment variables that are accessible from function code during execution.
          type: string
        Arn:
          description: ''
          type: string
        EphemeralStorage:
          description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
          type: string
        Architectures:
          minItems: 1
          maxItems: 1
          uniqueItems: true
          description: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
          type: array
          items:
            type: string
            enum:
              - x86_64
              - arm64
      description: >-
        The ``AWS::Lambda::Function`` resource creates a Lambda function. To create a function, you need a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) and an [execution role](https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html). The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use AWS services, such as Amazon
        CloudWatch Logs for log streaming and AWS X-Ray for request tracing.
         You set the package type to ``Image`` if the deployment package is a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html). For these functions, include the URI of the container image in the ECR registry in the [ImageUri property of the Code property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-imageuri). You do not need to specify the handler and runtime properties. 
         You set the package type to ``Zip`` if the deployment package is a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip). For these functions, specify the S3 location of your .zip file in the ``Code`` property. Alternatively, for Node.js and Python functions, you can define your function inline in the [ZipFile property of the Code property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-zipfile). In both cases, you must also specify the handler and runtime properties.
         You can use [code signing](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html) if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with ``UpdateFunctionCode``, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
         When you update a ``AWS::Lambda::Function`` resource, CFNshort calls the [UpdateFunctionConfiguration](https://docs.aws.amazon.com/lambda/latest/api/API_UpdateFunctionConfiguration.html) and [UpdateFunctionCode](https://docs.aws.amazon.com/lambda/latest/api/API_UpdateFunctionCode.html) LAM APIs under the hood. Because these calls happen sequentially, and invocations can happen between these calls, your function may encounter errors in the time between the calls. For example, if you remove an environment variable, and the code that references that environment variable in the same CFNshort update, you may see invocation errors related to a missing environment variable. To work around this, you can invoke your function against a version or alias by default, rather than the ``$LATEST`` version.
         Note that you configure [provisioned concurrency](https://docs.aws.amazon.com/lambda/latest/dg/provisioned-concurrency.html) on a ``AWS::Lambda::Version`` or a ``AWS::Lambda::Alias``.
         For a complete introduction to Lambda functions, see [What is Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/lambda-welcome.html) in the *Lambda developer guide.*
    FunctionSummary:
      type: object
      properties:
      region:
        type: string
        description: The AWS region
      num_functions:
        type: integer
        description: The number of Lambda functions in the region
  x-stackQL-resources:
    lambda_functions_list_only:
      name: lambda_functions_list_only
      id: aws.global_inventory.lambda_functions_list_only
      x-cfn-schema-name: Function
      x-cfn-type-name: AWS::Lambda::Function
      x-identifiers:
        - FunctionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
              AND region in 
              (
              'ap-northeast-1',
              'ap-northeast-2',
              'ap-northeast-3',
              'ap-south-1',
              'ap-southeast-1',
              'ap-southeast-2',
              'ca-central-1',
              'eu-central-1',
              'eu-north-1',
              'eu-west-1',
              'eu-west-2',
              'eu-west-3',
              'sa-east-1',
              'us-east-1',
              'us-east-2',
              'us-west-1',
              'us-west-2'
              )
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
                AND region in 
                (
                'ap-northeast-1',
                'ap-northeast-2',
                'ap-northeast-3',
                'ap-south-1',
                'ap-southeast-1',
                'ap-southeast-2',
                'ca-central-1',
                'eu-central-1',
                'eu-north-1',
                'eu-west-1',
                'eu-west-2',
                'eu-west-3',
                'sa-east-1',
                'us-east-1',
                'us-east-2',
                'us-west-1',
                'us-west-2'
                )
    lambda_function_details:
      name: lambda_function_details
      id: aws.global_inventory.lambda_function_details
      x-cfn-schema-name: Function
      x-cfn-type-name: AWS::Lambda::Function
      x-identifiers:
        - FunctionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TracingConfig') as tracing_config,
              JSON_EXTRACT(detail.Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(detail.Properties, '$.RuntimeManagementConfig') as runtime_management_config,
              JSON_EXTRACT(detail.Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
              JSON_EXTRACT(detail.Properties, '$.SnapStart') as snap_start,
              JSON_EXTRACT(detail.Properties, '$.FileSystemConfigs') as file_system_configs,
              JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(detail.Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(detail.Properties, '$.PackageType') as package_type,
              JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(detail.Properties, '$.Layers') as layers,
              JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
              JSON_EXTRACT(detail.Properties, '$.ImageConfig') as image_config,
              JSON_EXTRACT(detail.Properties, '$.MemorySize') as memory_size,
              JSON_EXTRACT(detail.Properties, '$.DeadLetterConfig') as dead_letter_config,
              JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(detail.Properties, '$.Handler') as handler,
              JSON_EXTRACT(detail.Properties, '$.SnapStartResponse') as snap_start_response,
              JSON_EXTRACT(detail.Properties, '$.Code') as code,
              JSON_EXTRACT(detail.Properties, '$.Role') as role,
              JSON_EXTRACT(detail.Properties, '$.LoggingConfig') as logging_config,
              JSON_EXTRACT(detail.Properties, '$.RecursiveLoop') as recursive_loop,
              JSON_EXTRACT(detail.Properties, '$.Environment') as environment,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(detail.Properties, '$.Architectures') as architectures
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              WHERE listing.data__TypeName = 'AWS::Lambda::Function'
              AND detail.data__TypeName = 'AWS::Lambda::Function'
              AND listing.region in 
              (
              'ap-northeast-1',
              'ap-northeast-2',
              'ap-northeast-3',
              'ap-south-1',
              'ap-southeast-1',
              'ap-southeast-2',
              'ca-central-1',
              'eu-central-1',
              'eu-north-1',
              'eu-west-1',
              'eu-west-2',
              'eu-west-3',
              'sa-east-1',
              'us-east-1',
              'us-east-2',
              'us-west-1',
              'us-west-2'
              )
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TracingConfig') as tracing_config,
                json_extract_path_text(detail.Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(detail.Properties, 'RuntimeManagementConfig') as runtime_management_config,
                json_extract_path_text(detail.Properties, 'ReservedConcurrentExecutions') as reserved_concurrent_executions,
                json_extract_path_text(detail.Properties, 'SnapStart') as snap_start,
                json_extract_path_text(detail.Properties, 'FileSystemConfigs') as file_system_configs,
                json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                json_extract_path_text(detail.Properties, 'Runtime') as runtime,
                json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(detail.Properties, 'PackageType') as package_type,
                json_extract_path_text(detail.Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                json_extract_path_text(detail.Properties, 'Layers') as layers,
                json_extract_path_text(detail.Properties, 'Tags') as tags,
                json_extract_path_text(detail.Properties, 'ImageConfig') as image_config,
                json_extract_path_text(detail.Properties, 'MemorySize') as memory_size,
                json_extract_path_text(detail.Properties, 'DeadLetterConfig') as dead_letter_config,
                json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                json_extract_path_text(detail.Properties, 'Handler') as handler,
                json_extract_path_text(detail.Properties, 'SnapStartResponse') as snap_start_response,
                json_extract_path_text(detail.Properties, 'Code') as code,
                json_extract_path_text(detail.Properties, 'Role') as role,
                json_extract_path_text(detail.Properties, 'LoggingConfig') as logging_config,
                json_extract_path_text(detail.Properties, 'RecursiveLoop') as recursive_loop,
                json_extract_path_text(detail.Properties, 'Environment') as environment,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'EphemeralStorage') as ephemeral_storage,
                json_extract_path_text(detail.Properties, 'Architectures') as architectures
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Function'
                AND detail.data__TypeName = 'AWS::Lambda::Function'
                AND listing.region in 
                (
                'ap-northeast-1',
                'ap-northeast-2',
                'ap-northeast-3',
                'ap-south-1',
                'ap-southeast-1',
                'ap-southeast-2',
                'ca-central-1',
                'eu-central-1',
                'eu-north-1',
                'eu-west-1',
                'eu-west-2',
                'eu-west-3',
                'sa-east-1',
                'us-east-1',
                'us-east-2',
                'us-west-1',
                'us-west-2'
                )
