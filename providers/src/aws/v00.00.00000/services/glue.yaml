openapi: 3.0.0
info:
  title: Glue
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    S3Target:
      type: object
      description: Specifies a data store in Amazon Simple Storage Service (Amazon S3).
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).
        Path:
          type: string
          description: The path to the Amazon S3 target.
        SampleSize:
          type: integer
          description: Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
        Exclusions:
          type: array
          description: A list of glob patterns used to exclude from the crawl.
          uniqueItems: false
          items:
            type: string
        DlqEventQueueArn:
          type: string
          description: A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
        EventQueueArn:
          type: string
          description: A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
    LakeFormationConfiguration:
      type: object
      description: Specifies AWS Lake Formation configuration settings for the crawler
      additionalProperties: false
      properties:
        UseLakeFormationCredentials:
          type: boolean
          description: Specifies whether to use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
        AccountId:
          type: string
          description: Required for cross account crawls. For same account crawls as the target data, this can be left as null.
    SchemaChangePolicy:
      type: object
      description: >-
        The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The SchemaChangePolicy does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the SchemaChangePolicy on a crawler. The SchemaChangePolicy consists of two components, UpdateBehavior and
        DeleteBehavior.
      additionalProperties: false
      properties:
        UpdateBehavior:
          type: string
          description: The update behavior when the crawler finds a changed schema. A value of LOG specifies that if a table or a partition already exists, and a change is detected, do not update it, only log that a change was detected. Add new tables and new partitions (including on existing tables). A value of UPDATE_IN_DATABASE specifies that if a table or partition already exists, and a change is detected, update it. Add new tables and partitions.
        DeleteBehavior:
          type: string
          description: >-
            The deletion behavior when the crawler finds a deleted object. A value of LOG specifies that if a table or partition is found to no longer exist, do not delete it, only log that it was found to no longer exist. A value of DELETE_FROM_DATABASE specifies that if a table or partition is found to have been removed, delete it from the database. A value of DEPRECATE_IN_DATABASE specifies that if a table has been found to no longer exist, to add a property to the table that says
            'DEPRECATED' and includes a timestamp with the time of deprecation.
    IcebergTarget:
      type: object
      description: Specifies Apache Iceberg data store targets.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection to use to connect to the Iceberg target.
        Paths:
          type: array
          description: One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix .
          uniqueItems: false
          items:
            type: string
        Exclusions:
          type: array
          description: A list of global patterns used to exclude from the crawl.
          uniqueItems: false
          items:
            type: string
        MaximumTraversalDepth:
          type: integer
          description: The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time.
    Schedule:
      type: object
      description: A scheduling object using a cron statement to schedule an event.
      additionalProperties: false
      properties:
        ScheduleExpression:
          type: string
          description: A cron expression used to specify the schedule. For more information, see Time-Based Schedules for Jobs and Crawlers. For example, to run something every day at 12:15 UTC, specify cron(15 12 * * ? *).
    RecrawlPolicy:
      type: object
      description: When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see Incremental Crawls in AWS Glue in the developer guide.
      additionalProperties: false
      properties:
        RecrawlBehavior:
          type: string
          description: Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. A value of CRAWL_EVERYTHING specifies crawling the entire dataset again. A value of CRAWL_NEW_FOLDERS_ONLY specifies crawling only folders that were added since the last crawler run. A value of CRAWL_EVENT_MODE specifies crawling only the changes identified by Amazon S3 events.
    MongoDBTarget:
      type: object
      description: Specifies an Amazon DocumentDB or MongoDB data store to crawl.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
        Path:
          type: string
          description: The path of the Amazon DocumentDB or MongoDB target (database/collection).
    DeltaTarget:
      type: object
      description: Specifies a Delta data store to crawl one or more Delta tables.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection to use to connect to the Delta table target.
        CreateNativeDeltaTable:
          type: boolean
          description: Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
        WriteManifest:
          type: boolean
          description: Specifies whether to write the manifest files to the Delta table path.
        DeltaTables:
          type: array
          description: ''
          uniqueItems: false
          items:
            type: string
            description: A list of the Amazon S3 paths to the Delta tables.
    JdbcTarget:
      type: object
      description: Specifies a JDBC data store to crawl.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection to use to connect to the JDBC target.
        Path:
          type: string
          description: The path of the JDBC target.
        Exclusions:
          type: array
          description: A list of glob patterns used to exclude from the crawl. For more information, see Catalog Tables with a Crawler.
          uniqueItems: false
          items:
            type: string
        EnableAdditionalMetadata:
          type: array
          description: |-
            Specify a value of RAWTYPES or COMMENTS to enable additional metadata in table responses. RAWTYPES provides the native-level datatype. COMMENTS provides comments associated with a column or table in the database.

            If you do not need additional metadata, keep the field empty.
          uniqueItems: false
          items:
            type: string
    Targets:
      type: object
      description: Specifies data stores to crawl.
      additionalProperties: false
      properties:
        S3Targets:
          type: array
          description: Specifies Amazon Simple Storage Service (Amazon S3) targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/S3Target'
        CatalogTargets:
          type: array
          description: Specifies AWS Glue Data Catalog targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/CatalogTarget'
        DeltaTargets:
          type: array
          description: Specifies an array of Delta data store targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DeltaTarget'
        MongoDBTargets:
          type: array
          description: A list of Mongo DB targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/MongoDBTarget'
        JdbcTargets:
          type: array
          description: Specifies JDBC targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/JdbcTarget'
        DynamoDBTargets:
          type: array
          description: Specifies Amazon DynamoDB targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DynamoDBTarget'
        IcebergTargets:
          type: array
          description: Specifies Apache Iceberg data store targets.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/IcebergTarget'
    DynamoDBTarget:
      type: object
      description: Specifies an Amazon DynamoDB table to crawl.
      additionalProperties: false
      properties:
        Path:
          type: string
          description: The name of the DynamoDB table to crawl.
    CatalogTarget:
      type: object
      description: Specifies an AWS Glue Data Catalog target.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a NETWORK Connection type.
        DatabaseName:
          type: string
          description: The name of the database to be synchronized.
        DlqEventQueueArn:
          type: string
          description: A valid Amazon dead-letter SQS ARN. For example, arn:aws:sqs:region:account:deadLetterQueue.
        Tables:
          type: array
          description: A list of the tables to be synchronized.
          uniqueItems: false
          items:
            type: string
        EventQueueArn:
          type: string
          description: A valid Amazon SQS ARN. For example, arn:aws:sqs:region:account:sqs.
    Crawler:
      type: object
      properties:
        Classifiers:
          type: array
          description: A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
          uniqueItems: false
          items:
            type: string
        Description:
          type: string
          description: A description of the crawler.
        SchemaChangePolicy:
          $ref: '#/components/schemas/SchemaChangePolicy'
        Configuration:
          type: string
          description: Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior.
        RecrawlPolicy:
          $ref: '#/components/schemas/RecrawlPolicy'
        DatabaseName:
          type: string
          description: The name of the database in which the crawler's output is stored.
        Targets:
          $ref: '#/components/schemas/Targets'
        CrawlerSecurityConfiguration:
          type: string
          description: The name of the SecurityConfiguration structure to be used by this crawler.
        Name:
          type: string
          description: The name of the crawler.
        Role:
          type: string
          description: The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
        LakeFormationConfiguration:
          $ref: '#/components/schemas/LakeFormationConfiguration'
        Schedule:
          $ref: '#/components/schemas/Schedule'
        TablePrefix:
          type: string
          description: The prefix added to the names of tables that are created.
        Tags:
          type: object
          description: The tags to use with this crawler.
      required:
        - Role
        - Targets
      x-stackql-resource-name: crawler
      description: Resource Type definition for AWS::Glue::Crawler
      x-type-name: AWS::Glue::Crawler
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-required-properties:
        - Role
        - Targets
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - glue:CreateCrawler
          - glue:GetCrawler
          - glue:TagResource
          - iam:PassRole
        read:
          - glue:GetCrawler
          - glue:GetTags
          - iam:PassRole
        update:
          - glue:UpdateCrawler
          - glue:UntagResource
          - glue:TagResource
          - iam:PassRole
        delete:
          - glue:DeleteCrawler
          - glue:GetCrawler
          - glue:StopCrawler
          - iam:PassRole
        list:
          - glue:ListCrawlers
          - iam:PassRole
    DatabaseIdentifier:
      type: object
      description: A structure that describes a target database for resource linking.
      additionalProperties: false
      properties:
        DatabaseName:
          type: string
          description: The name of the catalog database.
        Region:
          type: string
          description: Region of the target database.
        CatalogId:
          type: string
          description: The ID of the Data Catalog in which the database resides.
    PrincipalPrivileges:
      type: object
      description: The permissions granted to a principal.
      additionalProperties: false
      properties:
        Permissions:
          type: array
          description: The permissions that are granted to the principal.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal who is granted permissions.
    DataLakePrincipal:
      type: object
      description: The AWS Lake Formation principal.
      additionalProperties: false
      properties:
        DataLakePrincipalIdentifier:
          type: string
          description: An identifier for the AWS Lake Formation principal.
    FederatedDatabase:
      type: object
      description: A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
      additionalProperties: false
      properties:
        ConnectionName:
          type: string
          description: The name of the connection to the external metastore.
        Identifier:
          type: string
          description: A unique identifier for the federated database.
    DatabaseInput:
      type: object
      description: The structure used to create or update a database.
      additionalProperties: false
      properties:
        LocationUri:
          type: string
          description: The location of the database (for example, an HDFS path).
        CreateTableDefaultPermissions:
          type: array
          description: Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/PrincipalPrivileges'
            description: The permissions granted to a principal.
        Description:
          type: string
          description: A description of the database.
        Parameters:
          type: object
          description: These key-value pairs define parameters and properties of the database.
        TargetDatabase:
          $ref: '#/components/schemas/DatabaseIdentifier'
          description: A DatabaseIdentifier structure that describes a target database for resource linking.
        FederatedDatabase:
          $ref: '#/components/schemas/FederatedDatabase'
          description: A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
        Name:
          type: string
          description: The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
    Database:
      type: object
      properties:
        CatalogId:
          type: string
          description: The AWS account ID for the account in which to create the catalog object.
        DatabaseInput:
          $ref: '#/components/schemas/DatabaseInput'
          description: The metadata for the database.
        DatabaseName:
          type: string
          description: The name of the database. For hive compatibility, this is folded to lowercase when it is store.
      required:
        - DatabaseInput
        - CatalogId
      x-stackql-resource-name: database
      description: Resource Type definition for AWS::Glue::Database
      x-type-name: AWS::Glue::Database
      x-stackql-primary-identifier:
        - DatabaseName
      x-create-only-properties:
        - DatabaseName
      x-required-properties:
        - DatabaseInput
        - CatalogId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - glue:CreateDatabase
          - glue:GetDatabase
          - glue:PassConnection
          - glue:CreateConnection
          - lakeformation:ListResources
          - lakeformation:DescribeResource
          - lakeformation:DescribeLakeFormationIdentityCenterConfiguration
        read:
          - glue:GetDatabase
          - glue:GetConnection
          - lakeformation:ListResources
          - lakeformation:DescribeResource
          - lakeformation:DescribeLakeFormationIdentityCenterConfiguration
        update:
          - glue:UpdateDatabase
          - glue:UpdateConnection
          - lakeformation:ListResources
          - lakeformation:DescribeResource
          - lakeformation:DescribeLakeFormationIdentityCenterConfiguration
        delete:
          - glue:DeleteDatabase
          - glue:GetDatabase
          - glue:DeleteConnection
          - glue:GetConnection
          - lakeformation:ListResources
          - lakeformation:DescribeResource
          - lakeformation:DescribeLakeFormationIdentityCenterConfiguration
        list:
          - glue:GetDatabases
          - lakeformation:ListResources
          - lakeformation:DescribeResource
          - lakeformation:DescribeLakeFormationIdentityCenterConfiguration
    DefaultArguments:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
    NonOverridableArguments:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
    JobCommand:
      type: object
      properties:
        Name:
          description: The name of the job command
          type: string
        PythonVersion:
          description: The Python version being used to execute a Python shell job.
          type: string
        Runtime:
          description: Runtime is used to specify the versions of Ray, Python and additional libraries available in your environment
          type: string
        ScriptLocation:
          description: Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that executes a job
          type: string
      additionalProperties: false
    ConnectionsList:
      type: object
      properties:
        Connections:
          description: A list of connections used by the job.
          type: array
          uniqueItems: false
          items:
            type: string
      additionalProperties: false
    ExecutionProperty:
      type: object
      properties:
        MaxConcurrentRuns:
          description: The maximum number of concurrent runs allowed for the job.
          type: number
      additionalProperties: false
    NotificationProperty:
      type: object
      description: Specifies configuration properties of a job run notification.
      additionalProperties: false
      properties:
        NotifyDelayAfter:
          type: integer
          description: After a job run starts, the number of minutes to wait before sending a job run delay notification
    Job:
      type: object
      properties:
        Connections:
          $ref: '#/components/schemas/ConnectionsList'
          description: Specifies the connections used by a job
        MaxRetries:
          type: number
          description: The maximum number of times to retry this job after a JobRun fails
        Description:
          type: string
          description: A description of the job.
        Timeout:
          type: integer
          description: The maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status.
        AllocatedCapacity:
          type: number
          description: The number of capacity units that are allocated to this job.
        Name:
          type: string
          description: The name you assign to the job definition
        Role:
          type: string
          description: The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
        DefaultArguments:
          type: object
          description: The default arguments for this job, specified as name-value pairs.
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
          description: Specifies configuration properties of a notification.
        WorkerType:
          type: string
          description: TThe type of predefined worker that is allocated when a job runs.
          enum:
            - Standard
            - G.1X
            - G.2X
            - G.025X
            - G.4X
            - G.8X
            - Z.2X
        ExecutionClass:
          type: string
          description: Indicates whether the job is run with a standard or flexible execution class.
        LogUri:
          type: string
          description: This field is reserved for future use.
        Command:
          $ref: '#/components/schemas/JobCommand'
          description: The code that executes a job.
        GlueVersion:
          type: string
          description: Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
        ExecutionProperty:
          $ref: '#/components/schemas/ExecutionProperty'
          description: The maximum number of concurrent runs that are allowed for this job.
        SecurityConfiguration:
          type: string
          description: The name of the SecurityConfiguration structure to be used with this job.
        NumberOfWorkers:
          type: integer
          description: The number of workers of a defined workerType that are allocated when a job runs.
        Tags:
          type: object
          description: The tags to use with this job.
        MaxCapacity:
          type: number
          description: The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs.
        NonOverridableArguments:
          type: object
          description: Non-overridable arguments for this job, specified as name-value pairs.
        MaintenanceWindow:
          type: string
          description: Property description not available.
        JobMode:
          type: string
          description: Property description not available.
        JobRunQueuingEnabled:
          type: boolean
          description: Property description not available.
      required:
        - Role
        - Command
      x-stackql-resource-name: job
      description: Resource Type definition for AWS::Glue::Job
      x-type-name: AWS::Glue::Job
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-required-properties:
        - Role
        - Command
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:PassRole
          - glue:CreateJob
          - glue:GetJob
          - glue:TagResource
        read:
          - glue:GetJob
          - glue:GetTags
        delete:
          - glue:DeleteJob
          - glue:GetJob
          - glue:UntagResource
        update:
          - iam:GetRole
          - iam:PassRole
          - glue:UpdateJob
          - glue:UntagResource
          - glue:TagResource
        list:
          - glue:ListJobs
    Tag:
      type: object
      properties:
        Key:
          description: A key to identify the tag.
          type: string
          minLength: 1
          maxLength: 128
        Value:
          description: Corresponding tag value for the key.
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Registry:
      type: object
      description: Identifier for the registry which the schema is part of.
      properties:
        Name:
          description: Name of the registry in which the schema will be created.
          type: string
          maxLength: 255
          minLength: 1
        Arn:
          description: Amazon Resource Name for the Registry.
          type: string
          pattern: arn:aws(-(cn|us-gov|iso(-[bef])?))?:glue:.*
      additionalProperties: false
    SchemaVersion:
      type: object
      properties:
        Schema:
          $ref: '#/components/schemas/Schema'
        SchemaDefinition:
          type: string
          description: Complete definition of the schema in plain-text.
          minLength: 1
          maxLength: 170000
        VersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
      required:
        - Schema
        - SchemaDefinition
      x-stackql-resource-name: schema_version
      description: This resource represents an individual schema version of a schema defined in Glue Schema Registry.
      x-type-name: AWS::Glue::SchemaVersion
      x-stackql-primary-identifier:
        - VersionId
      x-create-only-properties:
        - Schema
        - SchemaDefinition
      x-read-only-properties:
        - VersionId
      x-required-properties:
        - Schema
        - SchemaDefinition
      x-required-permissions:
        create:
          - glue:RegisterSchemaVersion
          - glue:GetSchemaVersion
          - glue:GetSchemaByDefinition
        read:
          - glue:GetSchemaVersion
        delete:
          - glue:DeleteSchemaVersions
          - glue:GetSchemaVersion
        list:
          - glue:ListSchemaVersions
    Schema:
      description: Identifier for the schema where the schema version will be created.
      type: object
      properties:
        SchemaArn:
          description: Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):glue:.*
        SchemaName:
          description: Name of the schema. This parameter requires RegistryName to be provided.
          type: string
          minLength: 1
          maxLength: 255
        RegistryName:
          description: Name of the registry to identify where the Schema is located.
          type: string
          maxLength: 255
          minLength: 1
      additionalProperties: false
    SchemaVersionMetadata:
      type: object
      properties:
        SchemaVersionId:
          type: string
          description: Represents the version ID associated with the schema version.
          pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
        Key:
          type: string
          description: Metadata key
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: Metadata value
          minLength: 1
          maxLength: 256
      required:
        - SchemaVersionId
        - Key
        - Value
      x-stackql-resource-name: schema_version_metadata
      description: This resource adds Key-Value metadata to a Schema version of Glue Schema Registry.
      x-type-name: AWS::Glue::SchemaVersionMetadata
      x-stackql-primary-identifier:
        - SchemaVersionId
        - Key
        - Value
      x-create-only-properties:
        - SchemaVersionId
        - Key
        - Value
      x-required-properties:
        - SchemaVersionId
        - Key
        - Value
      x-required-permissions:
        create:
          - glue:putSchemaVersionMetadata
        read:
          - glue:querySchemaVersionMetadata
        delete:
          - glue:removeSchemaVersionMetadata
        list:
          - glue:querySchemaVersionMetadata
    Condition:
      type: object
      description: Defines a condition under which a trigger fires.
      additionalProperties: false
      properties:
        JobName:
          type: string
          description: The name of the job whose JobRuns this condition applies to, and on which this trigger waits.
        CrawlerName:
          type: string
          description: The name of the crawler to which this condition applies.
        State:
          type: string
          description: The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT, and FAILED.
        CrawlState:
          type: string
          description: The state of the crawler to which this condition applies.
        LogicalOperator:
          type: string
          description: A logical operator.
    Action:
      type: object
      description: The actions initiated by this trigger.
      additionalProperties: false
      properties:
        NotificationProperty:
          $ref: '#/components/schemas/NotificationProperty'
          description: Specifies configuration properties of a job run notification.
        CrawlerName:
          type: string
          description: The name of the crawler to be used with this action.
        Timeout:
          type: integer
          description: The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.
        JobName:
          type: string
          description: The name of a job to be executed.
        Arguments:
          type: object
          description: The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.
        SecurityConfiguration:
          type: string
          description: The name of the SecurityConfiguration structure to be used with this action.
    EventBatchingCondition:
      type: object
      description: Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
      additionalProperties: false
      properties:
        BatchSize:
          type: integer
          description: Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.
        BatchWindow:
          type: integer
          description: Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.
      required:
        - BatchSize
    Predicate:
      type: object
      description: The predicate of this trigger, which defines when it will fire.
      additionalProperties: false
      properties:
        Logical:
          type: string
          description: An optional field if only one condition is listed. If multiple conditions are listed, then this field is required.
        Conditions:
          type: array
          description: A list of the conditions that determine when the trigger will fire.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Condition'
    Trigger:
      type: object
      properties:
        Type:
          type: string
          description: The type of trigger that this is.
        StartOnCreation:
          type: boolean
          description: Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
        Description:
          type: string
          description: A description of this trigger.
        Actions:
          type: array
          description: The actions initiated by this trigger.
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Action'
        EventBatchingCondition:
          $ref: '#/components/schemas/EventBatchingCondition'
          description: Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
        WorkflowName:
          type: string
          description: The name of the workflow associated with the trigger.
        Schedule:
          type: string
          description: A cron expression used to specify the schedule.
        Tags:
          type: object
          description: The tags to use with this trigger.
        Name:
          type: string
          description: The name of the trigger.
        Predicate:
          $ref: '#/components/schemas/Predicate'
          description: The predicate of this trigger, which defines when it will fire.
      required:
        - Type
        - Actions
      x-stackql-resource-name: trigger
      description: Resource Type definition for AWS::Glue::Trigger
      x-type-name: AWS::Glue::Trigger
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - WorkflowName
        - Type
      x-write-only-properties:
        - StartOnCreation
      x-required-properties:
        - Type
        - Actions
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - glue:CreateTrigger
          - glue:GetTrigger
          - glue:TagResource
        read:
          - glue:GetTrigger
          - glue:GetTags
        update:
          - glue:UpdateTrigger
          - glue:UntagResource
          - glue:TagResource
        delete:
          - glue:DeleteTrigger
          - glue:GetTrigger
        list:
          - glue:ListTriggers
    ProfileConfiguration:
      properties:
        JobConfiguration:
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/ConfigurationObject'
          additionalProperties: false
        SessionConfiguration:
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/ConfigurationObject'
          additionalProperties: false
      anyOf:
        - required:
            - JobConfiguration
        - required:
            - SessionConfiguration
      additionalProperties: false
    ConfigurationObject:
      properties:
        DefaultValue:
          type: string
        AllowedValues:
          type: array
          items:
            type: string
          x-insertionOrder: false
        MinValue:
          type: string
        MaxValue:
          type: string
      anyOf:
        - required:
            - DefaultValue
        - oneOf:
            - required:
                - AllowedValues
            - required:
                - MinValue
                - MaxValue
      additionalProperties: false
    UsageProfile:
      type: object
      properties:
        Name:
          description: The name of the UsageProfile.
          type: string
          maxLength: 128
          minLength: 5
        Description:
          description: The description of the UsageProfile.
          type: string
          maxLength: 512
          minLength: 1
          pattern: '[a-zA-Z0-9\-\:\_]{1,64}'
        Configuration:
          description: 'UsageProfile configuration for supported service ex: (Jobs, Sessions).'
          $ref: '#/components/schemas/ProfileConfiguration'
          minItems: 1
        Tags:
          description: The tags to be applied to this UsageProfiles.
          type: array
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
          uniqueItems: true
          x-insertionOrder: false
        CreatedOn:
          description: Creation time.
          type: string
          maxLength: 128
          minLength: 1
      required:
        - Name
      x-stackql-resource-name: usage_profile
      description: This creates a Resource of UsageProfile type.
      x-type-name: AWS::Glue::UsageProfile
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - CreatedOn
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - glue:TagResource
          - glue:UntagResource
          - glue:GetTags
      x-required-permissions:
        create:
          - glue:CreateUsageProfile
          - glue:GetUsageProfile
          - glue:GetTags
          - glue:TagResource
        read:
          - glue:GetUsageProfile
          - glue:GetTags
        update:
          - glue:UpdateUsageProfile
          - glue:GetUsageProfile
          - glue:TagResource
          - glue:UntagResource
          - glue:GetTags
        delete:
          - glue:DeleteUsageProfile
          - glue:GetUsageProfile
        list:
          - glue:ListUsageProfiles
    CreateCrawlerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Classifiers:
              type: array
              description: A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
              uniqueItems: false
              items:
                type: string
            Description:
              type: string
              description: A description of the crawler.
            SchemaChangePolicy:
              $ref: '#/components/schemas/SchemaChangePolicy'
            Configuration:
              type: string
              description: Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior.
            RecrawlPolicy:
              $ref: '#/components/schemas/RecrawlPolicy'
            DatabaseName:
              type: string
              description: The name of the database in which the crawler's output is stored.
            Targets:
              $ref: '#/components/schemas/Targets'
            CrawlerSecurityConfiguration:
              type: string
              description: The name of the SecurityConfiguration structure to be used by this crawler.
            Name:
              type: string
              description: The name of the crawler.
            Role:
              type: string
              description: The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
            LakeFormationConfiguration:
              $ref: '#/components/schemas/LakeFormationConfiguration'
            Schedule:
              $ref: '#/components/schemas/Schedule'
            TablePrefix:
              type: string
              description: The prefix added to the names of tables that are created.
            Tags:
              type: object
              description: The tags to use with this crawler.
          x-stackQL-stringOnly: true
      x-title: CreateCrawlerRequest
      type: object
      required: []
    CreateDatabaseRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CatalogId:
              type: string
              description: The AWS account ID for the account in which to create the catalog object.
            DatabaseInput:
              $ref: '#/components/schemas/DatabaseInput'
              description: The metadata for the database.
            DatabaseName:
              type: string
              description: The name of the database. For hive compatibility, this is folded to lowercase when it is store.
          x-stackQL-stringOnly: true
      x-title: CreateDatabaseRequest
      type: object
      required: []
    CreateJobRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Connections:
              $ref: '#/components/schemas/ConnectionsList'
              description: Specifies the connections used by a job
            MaxRetries:
              type: number
              description: The maximum number of times to retry this job after a JobRun fails
            Description:
              type: string
              description: A description of the job.
            Timeout:
              type: integer
              description: The maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status.
            AllocatedCapacity:
              type: number
              description: The number of capacity units that are allocated to this job.
            Name:
              type: string
              description: The name you assign to the job definition
            Role:
              type: string
              description: The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
            DefaultArguments:
              type: object
              description: The default arguments for this job, specified as name-value pairs.
            NotificationProperty:
              $ref: '#/components/schemas/NotificationProperty'
              description: Specifies configuration properties of a notification.
            WorkerType:
              type: string
              description: TThe type of predefined worker that is allocated when a job runs.
              enum:
                - Standard
                - G.1X
                - G.2X
                - G.025X
                - G.4X
                - G.8X
                - Z.2X
            ExecutionClass:
              type: string
              description: Indicates whether the job is run with a standard or flexible execution class.
            LogUri:
              type: string
              description: This field is reserved for future use.
            Command:
              $ref: '#/components/schemas/JobCommand'
              description: The code that executes a job.
            GlueVersion:
              type: string
              description: Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
            ExecutionProperty:
              $ref: '#/components/schemas/ExecutionProperty'
              description: The maximum number of concurrent runs that are allowed for this job.
            SecurityConfiguration:
              type: string
              description: The name of the SecurityConfiguration structure to be used with this job.
            NumberOfWorkers:
              type: integer
              description: The number of workers of a defined workerType that are allocated when a job runs.
            Tags:
              type: object
              description: The tags to use with this job.
            MaxCapacity:
              type: number
              description: The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs.
            NonOverridableArguments:
              type: object
              description: Non-overridable arguments for this job, specified as name-value pairs.
            MaintenanceWindow:
              type: string
              description: Property description not available.
            JobMode:
              type: string
              description: Property description not available.
            JobRunQueuingEnabled:
              type: boolean
              description: Property description not available.
          x-stackQL-stringOnly: true
      x-title: CreateJobRequest
      type: object
      required: []
    CreateSchemaVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Schema:
              $ref: '#/components/schemas/Schema'
            SchemaDefinition:
              type: string
              description: Complete definition of the schema in plain-text.
              minLength: 1
              maxLength: 170000
            VersionId:
              type: string
              description: Represents the version ID associated with the schema version.
              pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
          x-stackQL-stringOnly: true
      x-title: CreateSchemaVersionRequest
      type: object
      required: []
    CreateSchemaVersionMetadataRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SchemaVersionId:
              type: string
              description: Represents the version ID associated with the schema version.
              pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
            Key:
              type: string
              description: Metadata key
              minLength: 1
              maxLength: 128
            Value:
              type: string
              description: Metadata value
              minLength: 1
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreateSchemaVersionMetadataRequest
      type: object
      required: []
    CreateTriggerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Type:
              type: string
              description: The type of trigger that this is.
            StartOnCreation:
              type: boolean
              description: Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
            Description:
              type: string
              description: A description of this trigger.
            Actions:
              type: array
              description: The actions initiated by this trigger.
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Action'
            EventBatchingCondition:
              $ref: '#/components/schemas/EventBatchingCondition'
              description: Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
            WorkflowName:
              type: string
              description: The name of the workflow associated with the trigger.
            Schedule:
              type: string
              description: A cron expression used to specify the schedule.
            Tags:
              type: object
              description: The tags to use with this trigger.
            Name:
              type: string
              description: The name of the trigger.
            Predicate:
              $ref: '#/components/schemas/Predicate'
              description: The predicate of this trigger, which defines when it will fire.
          x-stackQL-stringOnly: true
      x-title: CreateTriggerRequest
      type: object
      required: []
    CreateUsageProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The name of the UsageProfile.
              type: string
              maxLength: 128
              minLength: 5
            Description:
              description: The description of the UsageProfile.
              type: string
              maxLength: 512
              minLength: 1
              pattern: '[a-zA-Z0-9\-\:\_]{1,64}'
            Configuration:
              description: 'UsageProfile configuration for supported service ex: (Jobs, Sessions).'
              $ref: '#/components/schemas/ProfileConfiguration'
              minItems: 1
            Tags:
              description: The tags to be applied to this UsageProfiles.
              type: array
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
              uniqueItems: true
              x-insertionOrder: false
            CreatedOn:
              description: Creation time.
              type: string
              maxLength: 128
              minLength: 1
          x-stackQL-stringOnly: true
      x-title: CreateUsageProfileRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    crawlers:
      name: crawlers
      id: aws.glue.crawlers
      x-cfn-schema-name: Crawler
      x-cfn-type-name: AWS::Glue::Crawler
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Crawler&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Crawler"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Crawler"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Crawler"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/crawlers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/crawlers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/crawlers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Classifiers') as classifiers,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SchemaChangePolicy') as schema_change_policy,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.RecrawlPolicy') as recrawl_policy,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.CrawlerSecurityConfiguration') as crawler_security_configuration,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.LakeFormationConfiguration') as lake_formation_configuration,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.TablePrefix') as table_prefix,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Crawler'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Classifiers') as classifiers,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.SchemaChangePolicy') as schema_change_policy,
                JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
                JSON_EXTRACT(detail.Properties, '$.RecrawlPolicy') as recrawl_policy,
                JSON_EXTRACT(detail.Properties, '$.DatabaseName') as database_name,
                JSON_EXTRACT(detail.Properties, '$.Targets') as targets,
                JSON_EXTRACT(detail.Properties, '$.CrawlerSecurityConfiguration') as crawler_security_configuration,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Role') as role,
                JSON_EXTRACT(detail.Properties, '$.LakeFormationConfiguration') as lake_formation_configuration,
                JSON_EXTRACT(detail.Properties, '$.Schedule') as schedule,
                JSON_EXTRACT(detail.Properties, '$.TablePrefix') as table_prefix,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::Crawler'
                AND detail.data__TypeName = 'AWS::Glue::Crawler'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Classifiers') as classifiers,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'SchemaChangePolicy') as schema_change_policy,
                  json_extract_path_text(Properties, 'Configuration') as configuration,
                  json_extract_path_text(Properties, 'RecrawlPolicy') as recrawl_policy,
                  json_extract_path_text(Properties, 'DatabaseName') as database_name,
                  json_extract_path_text(Properties, 'Targets') as targets,
                  json_extract_path_text(Properties, 'CrawlerSecurityConfiguration') as crawler_security_configuration,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Role') as role,
                  json_extract_path_text(Properties, 'LakeFormationConfiguration') as lake_formation_configuration,
                  json_extract_path_text(Properties, 'Schedule') as schedule,
                  json_extract_path_text(Properties, 'TablePrefix') as table_prefix,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Crawler'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Classifiers') as classifiers,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'SchemaChangePolicy') as schema_change_policy,
                    json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                    json_extract_path_text(detail.Properties, 'RecrawlPolicy') as recrawl_policy,
                    json_extract_path_text(detail.Properties, 'DatabaseName') as database_name,
                    json_extract_path_text(detail.Properties, 'Targets') as targets,
                    json_extract_path_text(detail.Properties, 'CrawlerSecurityConfiguration') as crawler_security_configuration,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Role') as role,
                    json_extract_path_text(detail.Properties, 'LakeFormationConfiguration') as lake_formation_configuration,
                    json_extract_path_text(detail.Properties, 'Schedule') as schedule,
                    json_extract_path_text(detail.Properties, 'TablePrefix') as table_prefix,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::Crawler'
                    AND detail.data__TypeName = 'AWS::Glue::Crawler'
                    AND listing.region = 'us-east-1'
    crawlers_list_only:
      name: crawlers_list_only
      id: aws.glue.crawlers_list_only
      x-cfn-schema-name: Crawler
      x-cfn-type-name: AWS::Glue::Crawler
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Crawler'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Crawler'
                AND region = 'us-east-1'
    crawler_tags:
      name: crawler_tags
      id: aws.glue.crawler_tags
      x-cfn-schema-name: Crawler
      x-cfn-type-name: AWS::Glue::Crawler
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Classifiers') as classifiers,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.SchemaChangePolicy') as schema_change_policy,
              JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(detail.Properties, '$.RecrawlPolicy') as recrawl_policy,
              JSON_EXTRACT(detail.Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(detail.Properties, '$.Targets') as targets,
              JSON_EXTRACT(detail.Properties, '$.CrawlerSecurityConfiguration') as crawler_security_configuration,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Role') as role,
              JSON_EXTRACT(detail.Properties, '$.LakeFormationConfiguration') as lake_formation_configuration,
              JSON_EXTRACT(detail.Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(detail.Properties, '$.TablePrefix') as table_prefix
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Glue::Crawler'
              AND detail.data__TypeName = 'AWS::Glue::Crawler'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Classifiers') as classifiers,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'SchemaChangePolicy') as schema_change_policy,
                json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                json_extract_path_text(detail.Properties, 'RecrawlPolicy') as recrawl_policy,
                json_extract_path_text(detail.Properties, 'DatabaseName') as database_name,
                json_extract_path_text(detail.Properties, 'Targets') as targets,
                json_extract_path_text(detail.Properties, 'CrawlerSecurityConfiguration') as crawler_security_configuration,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Role') as role,
                json_extract_path_text(detail.Properties, 'LakeFormationConfiguration') as lake_formation_configuration,
                json_extract_path_text(detail.Properties, 'Schedule') as schedule,
                json_extract_path_text(detail.Properties, 'TablePrefix') as table_prefix
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Glue::Crawler'
                AND detail.data__TypeName = 'AWS::Glue::Crawler'
                AND listing.region = 'us-east-1'
    databases:
      name: databases
      id: aws.glue.databases
      x-cfn-schema-name: Database
      x-cfn-type-name: AWS::Glue::Database
      x-identifiers:
        - DatabaseName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Database&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Database"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/databases/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/databases/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/databases/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseInput') as database_input,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Database'
              AND data__Identifier = '<DatabaseName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CatalogId') as catalog_id,
                JSON_EXTRACT(detail.Properties, '$.DatabaseInput') as database_input,
                JSON_EXTRACT(detail.Properties, '$.DatabaseName') as database_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::Database'
                AND detail.data__TypeName = 'AWS::Glue::Database'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                  json_extract_path_text(Properties, 'DatabaseInput') as database_input,
                  json_extract_path_text(Properties, 'DatabaseName') as database_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Database'
                  AND data__Identifier = '<DatabaseName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CatalogId') as catalog_id,
                    json_extract_path_text(detail.Properties, 'DatabaseInput') as database_input,
                    json_extract_path_text(detail.Properties, 'DatabaseName') as database_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::Database'
                    AND detail.data__TypeName = 'AWS::Glue::Database'
                    AND listing.region = 'us-east-1'
    databases_list_only:
      name: databases_list_only
      id: aws.glue.databases_list_only
      x-cfn-schema-name: Database
      x-cfn-type-name: AWS::Glue::Database
      x-identifiers:
        - DatabaseName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Database'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Database'
                AND region = 'us-east-1'
    jobs:
      name: jobs
      id: aws.glue.jobs
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::Glue::Job
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Job&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Connections') as connections,
              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.AllocatedCapacity') as allocated_capacity,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.DefaultArguments') as default_arguments,
              JSON_EXTRACT(Properties, '$.NotificationProperty') as notification_property,
              JSON_EXTRACT(Properties, '$.WorkerType') as worker_type,
              JSON_EXTRACT(Properties, '$.ExecutionClass') as execution_class,
              JSON_EXTRACT(Properties, '$.LogUri') as log_uri,
              JSON_EXTRACT(Properties, '$.Command') as command,
              JSON_EXTRACT(Properties, '$.GlueVersion') as glue_version,
              JSON_EXTRACT(Properties, '$.ExecutionProperty') as execution_property,
              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as security_configuration,
              JSON_EXTRACT(Properties, '$.NumberOfWorkers') as number_of_workers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(Properties, '$.NonOverridableArguments') as non_overridable_arguments,
              JSON_EXTRACT(Properties, '$.MaintenanceWindow') as maintenance_window,
              JSON_EXTRACT(Properties, '$.JobMode') as job_mode,
              JSON_EXTRACT(Properties, '$.JobRunQueuingEnabled') as job_run_queuing_enabled
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Job'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Connections') as connections,
                JSON_EXTRACT(detail.Properties, '$.MaxRetries') as max_retries,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
                JSON_EXTRACT(detail.Properties, '$.AllocatedCapacity') as allocated_capacity,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Role') as role,
                JSON_EXTRACT(detail.Properties, '$.DefaultArguments') as default_arguments,
                JSON_EXTRACT(detail.Properties, '$.NotificationProperty') as notification_property,
                JSON_EXTRACT(detail.Properties, '$.WorkerType') as worker_type,
                JSON_EXTRACT(detail.Properties, '$.ExecutionClass') as execution_class,
                JSON_EXTRACT(detail.Properties, '$.LogUri') as log_uri,
                JSON_EXTRACT(detail.Properties, '$.Command') as command,
                JSON_EXTRACT(detail.Properties, '$.GlueVersion') as glue_version,
                JSON_EXTRACT(detail.Properties, '$.ExecutionProperty') as execution_property,
                JSON_EXTRACT(detail.Properties, '$.SecurityConfiguration') as security_configuration,
                JSON_EXTRACT(detail.Properties, '$.NumberOfWorkers') as number_of_workers,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
                JSON_EXTRACT(detail.Properties, '$.NonOverridableArguments') as non_overridable_arguments,
                JSON_EXTRACT(detail.Properties, '$.MaintenanceWindow') as maintenance_window,
                JSON_EXTRACT(detail.Properties, '$.JobMode') as job_mode,
                JSON_EXTRACT(detail.Properties, '$.JobRunQueuingEnabled') as job_run_queuing_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::Job'
                AND detail.data__TypeName = 'AWS::Glue::Job'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Connections') as connections,
                  json_extract_path_text(Properties, 'MaxRetries') as max_retries,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Timeout') as timeout,
                  json_extract_path_text(Properties, 'AllocatedCapacity') as allocated_capacity,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Role') as role,
                  json_extract_path_text(Properties, 'DefaultArguments') as default_arguments,
                  json_extract_path_text(Properties, 'NotificationProperty') as notification_property,
                  json_extract_path_text(Properties, 'WorkerType') as worker_type,
                  json_extract_path_text(Properties, 'ExecutionClass') as execution_class,
                  json_extract_path_text(Properties, 'LogUri') as log_uri,
                  json_extract_path_text(Properties, 'Command') as command,
                  json_extract_path_text(Properties, 'GlueVersion') as glue_version,
                  json_extract_path_text(Properties, 'ExecutionProperty') as execution_property,
                  json_extract_path_text(Properties, 'SecurityConfiguration') as security_configuration,
                  json_extract_path_text(Properties, 'NumberOfWorkers') as number_of_workers,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'MaxCapacity') as max_capacity,
                  json_extract_path_text(Properties, 'NonOverridableArguments') as non_overridable_arguments,
                  json_extract_path_text(Properties, 'MaintenanceWindow') as maintenance_window,
                  json_extract_path_text(Properties, 'JobMode') as job_mode,
                  json_extract_path_text(Properties, 'JobRunQueuingEnabled') as job_run_queuing_enabled
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Job'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Connections') as connections,
                    json_extract_path_text(detail.Properties, 'MaxRetries') as max_retries,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                    json_extract_path_text(detail.Properties, 'AllocatedCapacity') as allocated_capacity,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Role') as role,
                    json_extract_path_text(detail.Properties, 'DefaultArguments') as default_arguments,
                    json_extract_path_text(detail.Properties, 'NotificationProperty') as notification_property,
                    json_extract_path_text(detail.Properties, 'WorkerType') as worker_type,
                    json_extract_path_text(detail.Properties, 'ExecutionClass') as execution_class,
                    json_extract_path_text(detail.Properties, 'LogUri') as log_uri,
                    json_extract_path_text(detail.Properties, 'Command') as command,
                    json_extract_path_text(detail.Properties, 'GlueVersion') as glue_version,
                    json_extract_path_text(detail.Properties, 'ExecutionProperty') as execution_property,
                    json_extract_path_text(detail.Properties, 'SecurityConfiguration') as security_configuration,
                    json_extract_path_text(detail.Properties, 'NumberOfWorkers') as number_of_workers,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                    json_extract_path_text(detail.Properties, 'NonOverridableArguments') as non_overridable_arguments,
                    json_extract_path_text(detail.Properties, 'MaintenanceWindow') as maintenance_window,
                    json_extract_path_text(detail.Properties, 'JobMode') as job_mode,
                    json_extract_path_text(detail.Properties, 'JobRunQueuingEnabled') as job_run_queuing_enabled
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::Job'
                    AND detail.data__TypeName = 'AWS::Glue::Job'
                    AND listing.region = 'us-east-1'
    jobs_list_only:
      name: jobs_list_only
      id: aws.glue.jobs_list_only
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::Glue::Job
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Job'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Job'
                AND region = 'us-east-1'
    job_tags:
      name: job_tags
      id: aws.glue.job_tags
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::Glue::Job
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Connections') as connections,
              JSON_EXTRACT(detail.Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(detail.Properties, '$.AllocatedCapacity') as allocated_capacity,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Role') as role,
              JSON_EXTRACT(detail.Properties, '$.DefaultArguments') as default_arguments,
              JSON_EXTRACT(detail.Properties, '$.NotificationProperty') as notification_property,
              JSON_EXTRACT(detail.Properties, '$.WorkerType') as worker_type,
              JSON_EXTRACT(detail.Properties, '$.ExecutionClass') as execution_class,
              JSON_EXTRACT(detail.Properties, '$.LogUri') as log_uri,
              JSON_EXTRACT(detail.Properties, '$.Command') as command,
              JSON_EXTRACT(detail.Properties, '$.GlueVersion') as glue_version,
              JSON_EXTRACT(detail.Properties, '$.ExecutionProperty') as execution_property,
              JSON_EXTRACT(detail.Properties, '$.SecurityConfiguration') as security_configuration,
              JSON_EXTRACT(detail.Properties, '$.NumberOfWorkers') as number_of_workers,
              JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(detail.Properties, '$.NonOverridableArguments') as non_overridable_arguments,
              JSON_EXTRACT(detail.Properties, '$.MaintenanceWindow') as maintenance_window,
              JSON_EXTRACT(detail.Properties, '$.JobMode') as job_mode,
              JSON_EXTRACT(detail.Properties, '$.JobRunQueuingEnabled') as job_run_queuing_enabled
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Glue::Job'
              AND detail.data__TypeName = 'AWS::Glue::Job'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Connections') as connections,
                json_extract_path_text(detail.Properties, 'MaxRetries') as max_retries,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                json_extract_path_text(detail.Properties, 'AllocatedCapacity') as allocated_capacity,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Role') as role,
                json_extract_path_text(detail.Properties, 'DefaultArguments') as default_arguments,
                json_extract_path_text(detail.Properties, 'NotificationProperty') as notification_property,
                json_extract_path_text(detail.Properties, 'WorkerType') as worker_type,
                json_extract_path_text(detail.Properties, 'ExecutionClass') as execution_class,
                json_extract_path_text(detail.Properties, 'LogUri') as log_uri,
                json_extract_path_text(detail.Properties, 'Command') as command,
                json_extract_path_text(detail.Properties, 'GlueVersion') as glue_version,
                json_extract_path_text(detail.Properties, 'ExecutionProperty') as execution_property,
                json_extract_path_text(detail.Properties, 'SecurityConfiguration') as security_configuration,
                json_extract_path_text(detail.Properties, 'NumberOfWorkers') as number_of_workers,
                json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                json_extract_path_text(detail.Properties, 'NonOverridableArguments') as non_overridable_arguments,
                json_extract_path_text(detail.Properties, 'MaintenanceWindow') as maintenance_window,
                json_extract_path_text(detail.Properties, 'JobMode') as job_mode,
                json_extract_path_text(detail.Properties, 'JobRunQueuingEnabled') as job_run_queuing_enabled
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Glue::Job'
                AND detail.data__TypeName = 'AWS::Glue::Job'
                AND listing.region = 'us-east-1'
    schema_versions:
      name: schema_versions
      id: aws.glue.schema_versions
      x-cfn-schema-name: SchemaVersion
      x-cfn-type-name: AWS::Glue::SchemaVersion
      x-identifiers:
        - VersionId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SchemaVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::SchemaVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::SchemaVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/schema_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/schema_versions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.SchemaDefinition') as schema_definition,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
              AND data__Identifier = '<VersionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Schema') as _schema,
                JSON_EXTRACT(detail.Properties, '$.SchemaDefinition') as schema_definition,
                JSON_EXTRACT(detail.Properties, '$.VersionId') as version_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::SchemaVersion'
                AND detail.data__TypeName = 'AWS::Glue::SchemaVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Schema') as _schema,
                  json_extract_path_text(Properties, 'SchemaDefinition') as schema_definition,
                  json_extract_path_text(Properties, 'VersionId') as version_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
                  AND data__Identifier = '<VersionId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Schema') as _schema,
                    json_extract_path_text(detail.Properties, 'SchemaDefinition') as schema_definition,
                    json_extract_path_text(detail.Properties, 'VersionId') as version_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::SchemaVersion'
                    AND detail.data__TypeName = 'AWS::Glue::SchemaVersion'
                    AND listing.region = 'us-east-1'
    schema_versions_list_only:
      name: schema_versions_list_only
      id: aws.glue.schema_versions_list_only
      x-cfn-schema-name: SchemaVersion
      x-cfn-type-name: AWS::Glue::SchemaVersion
      x-identifiers:
        - VersionId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VersionId') as version_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VersionId') as version_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersion'
                AND region = 'us-east-1'
    schema_version_metadata:
      name: schema_version_metadata
      id: aws.glue.schema_version_metadata
      x-cfn-schema-name: SchemaVersionMetadata
      x-cfn-type-name: AWS::Glue::SchemaVersionMetadata
      x-identifiers:
        - SchemaVersionId
        - Key
        - Value
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SchemaVersionMetadata&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::SchemaVersionMetadata"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::SchemaVersionMetadata"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/schema_version_metadata/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/schema_version_metadata/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SchemaVersionId') as schema_version_id,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
              AND data__Identifier = '<SchemaVersionId>|<Key>|<Value>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SchemaVersionId') as schema_version_id,
                JSON_EXTRACT(detail.Properties, '$.Key') as key,
                JSON_EXTRACT(detail.Properties, '$.Value') as value
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                AND detail.data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SchemaVersionId') as schema_version_id,
                  json_extract_path_text(Properties, 'Key') as key,
                  json_extract_path_text(Properties, 'Value') as value
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                  AND data__Identifier = '<SchemaVersionId>|<Key>|<Value>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SchemaVersionId') as schema_version_id,
                    json_extract_path_text(detail.Properties, 'Key') as key,
                    json_extract_path_text(detail.Properties, 'Value') as value
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                    AND detail.data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                    AND listing.region = 'us-east-1'
    schema_version_metadata_list_only:
      name: schema_version_metadata_list_only
      id: aws.glue.schema_version_metadata_list_only
      x-cfn-schema-name: SchemaVersionMetadata
      x-cfn-type-name: AWS::Glue::SchemaVersionMetadata
      x-identifiers:
        - SchemaVersionId
        - Key
        - Value
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SchemaVersionId') as schema_version_id,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SchemaVersionId') as schema_version_id,
                json_extract_path_text(Properties, 'Key') as key,
                json_extract_path_text(Properties, 'Value') as value
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::SchemaVersionMetadata'
                AND region = 'us-east-1'
    triggers:
      name: triggers
      id: aws.glue.triggers
      x-cfn-schema-name: Trigger
      x-cfn-type-name: AWS::Glue::Trigger
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Trigger&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Trigger"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Trigger"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::Trigger"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.StartOnCreation') as start_on_creation,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.EventBatchingCondition') as event_batching_condition,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Predicate') as predicate
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Trigger'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.StartOnCreation') as start_on_creation,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Actions') as actions,
                JSON_EXTRACT(detail.Properties, '$.EventBatchingCondition') as event_batching_condition,
                JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
                JSON_EXTRACT(detail.Properties, '$.Schedule') as schedule,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Predicate') as predicate
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::Trigger'
                AND detail.data__TypeName = 'AWS::Glue::Trigger'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'StartOnCreation') as start_on_creation,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Actions') as actions,
                  json_extract_path_text(Properties, 'EventBatchingCondition') as event_batching_condition,
                  json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                  json_extract_path_text(Properties, 'Schedule') as schedule,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Predicate') as predicate
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::Trigger'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'StartOnCreation') as start_on_creation,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Actions') as actions,
                    json_extract_path_text(detail.Properties, 'EventBatchingCondition') as event_batching_condition,
                    json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                    json_extract_path_text(detail.Properties, 'Schedule') as schedule,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Predicate') as predicate
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::Trigger'
                    AND detail.data__TypeName = 'AWS::Glue::Trigger'
                    AND listing.region = 'us-east-1'
    triggers_list_only:
      name: triggers_list_only
      id: aws.glue.triggers_list_only
      x-cfn-schema-name: Trigger
      x-cfn-type-name: AWS::Glue::Trigger
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Trigger'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::Trigger'
                AND region = 'us-east-1'
    trigger_tags:
      name: trigger_tags
      id: aws.glue.trigger_tags
      x-cfn-schema-name: Trigger
      x-cfn-type-name: AWS::Glue::Trigger
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.StartOnCreation') as start_on_creation,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Actions') as actions,
              JSON_EXTRACT(detail.Properties, '$.EventBatchingCondition') as event_batching_condition,
              JSON_EXTRACT(detail.Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(detail.Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Predicate') as predicate
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Glue::Trigger'
              AND detail.data__TypeName = 'AWS::Glue::Trigger'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'StartOnCreation') as start_on_creation,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Actions') as actions,
                json_extract_path_text(detail.Properties, 'EventBatchingCondition') as event_batching_condition,
                json_extract_path_text(detail.Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(detail.Properties, 'Schedule') as schedule,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Predicate') as predicate
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Glue::Trigger'
                AND detail.data__TypeName = 'AWS::Glue::Trigger'
                AND listing.region = 'us-east-1'
    usage_profiles:
      name: usage_profiles
      id: aws.glue.usage_profiles
      x-cfn-schema-name: UsageProfile
      x-cfn-type-name: AWS::Glue::UsageProfile
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__UsageProfile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::UsageProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::UsageProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Glue::UsageProfile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/usage_profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/usage_profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/usage_profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.CreatedOn') as created_on
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::UsageProfile'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.CreatedOn') as created_on
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Glue::UsageProfile'
                AND detail.data__TypeName = 'AWS::Glue::UsageProfile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Configuration') as configuration,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'CreatedOn') as created_on
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Glue::UsageProfile'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'CreatedOn') as created_on
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Glue::UsageProfile'
                    AND detail.data__TypeName = 'AWS::Glue::UsageProfile'
                    AND listing.region = 'us-east-1'
    usage_profiles_list_only:
      name: usage_profiles_list_only
      id: aws.glue.usage_profiles_list_only
      x-cfn-schema-name: UsageProfile
      x-cfn-type-name: AWS::Glue::UsageProfile
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::UsageProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Glue::UsageProfile'
                AND region = 'us-east-1'
    usage_profile_tags:
      name: usage_profile_tags
      id: aws.glue.usage_profile_tags
      x-cfn-schema-name: UsageProfile
      x-cfn-type-name: AWS::Glue::UsageProfile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(detail.Properties, '$.CreatedOn') as created_on
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Glue::UsageProfile'
              AND detail.data__TypeName = 'AWS::Glue::UsageProfile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                json_extract_path_text(detail.Properties, 'CreatedOn') as created_on
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Glue::UsageProfile'
                AND detail.data__TypeName = 'AWS::Glue::UsageProfile'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Crawler&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCrawler
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCrawlerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Database&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDatabase
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Job&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateJob
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SchemaVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSchemaVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSchemaVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SchemaVersionMetadata&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSchemaVersionMetadata
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSchemaVersionMetadataRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Trigger&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrigger
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTriggerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__UsageProfile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUsageProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUsageProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
