openapi: 3.0.0
info:
  title: MediaLive
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ChannelPlacementGroupState:
      type: string
      description: The current state of the ChannelPlacementGroupState
      enum:
        - UNASSIGNED
        - ASSIGNING
        - ASSIGNED
        - DELETING
        - DELETED
        - UNASSIGNING
    Tags:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    ChannelPlacementGroup:
      type: object
      properties:
        Arn:
          type: string
          description: The ARN of the channel placement group.
        Channels:
          type: array
          x-insertionOrder: false
          description: List of channel IDs added to the channel placement group.
          items:
            type: string
        ClusterId:
          type: string
          description: The ID of the cluster the node is on.
        Id:
          type: string
          description: Unique internal identifier.
        Name:
          type: string
          description: The name of the channel placement group.
        Nodes:
          type: array
          x-insertionOrder: false
          description: List of nodes added to the channel placement group
          items:
            type: string
        State:
          $ref: '#/components/schemas/ChannelPlacementGroupState'
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      x-stackql-resource-name: channel_placement_group
      description: Definition of AWS::MediaLive::ChannelPlacementGroup Resource Type
      x-type-name: AWS::MediaLive::ChannelPlacementGroup
      x-stackql-primary-identifier:
        - Id
        - ClusterId
      x-create-only-properties:
        - ClusterId
      x-read-only-properties:
        - Arn
        - Channels
        - Id
        - State
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateChannelPlacementGroup
          - medialive:DescribeChannelPlacementGroup
          - medialive:CreateTags
          - medialive:ListTagsForResource
        read:
          - medialive:DescribeChannelPlacementGroup
          - medialive:ListTagsForResource
        update:
          - medialive:UpdateChannelPlacementGroup
          - medialive:DescribeChannelPlacementGroup
          - medialive:CreateTags
          - medialive:DeleteTags
          - medialive:ListTagsForResource
        delete:
          - medialive:DeleteChannelPlacementGroup
          - medialive:DescribeChannelPlacementGroup
        list:
          - medialive:ListChannelPlacementGroups
    CloudWatchAlarmTemplateComparisonOperator:
      type: string
      description: The comparison operator used to compare the specified statistic and the threshold.
      enum:
        - GreaterThanOrEqualToThreshold
        - GreaterThanThreshold
        - LessThanThreshold
        - LessThanOrEqualToThreshold
    CloudWatchAlarmTemplateStatistic:
      type: string
      description: The statistic to apply to the alarm's metric data.
      enum:
        - SampleCount
        - Average
        - Sum
        - Minimum
        - Maximum
    CloudWatchAlarmTemplateTargetResourceType:
      type: string
      description: The resource type this template should dynamically generate cloudwatch metric alarms for.
      enum:
        - CLOUDFRONT_DISTRIBUTION
        - MEDIALIVE_MULTIPLEX
        - MEDIALIVE_CHANNEL
        - MEDIALIVE_INPUT_DEVICE
        - MEDIAPACKAGE_CHANNEL
        - MEDIAPACKAGE_ORIGIN_ENDPOINT
        - MEDIACONNECT_FLOW
        - S3_BUCKET
    CloudWatchAlarmTemplateTreatMissingData:
      type: string
      description: Specifies how missing data points are treated when evaluating the alarm's condition.
      enum:
        - notBreaching
        - breaching
        - ignore
        - missing
    TagMap:
      type: object
      description: Represents the tags associated with a resource.
      x-patternProperties:
        .+:
          type: string
      additionalProperties: false
    CloudWatchAlarmTemplate:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:cloudwatch-alarm-template:.+$
          description: A cloudwatch alarm template's ARN (Amazon Resource Name)
        ComparisonOperator:
          $ref: '#/components/schemas/CloudWatchAlarmTemplateComparisonOperator'
        CreatedAt:
          type: string
          format: date-time
        DatapointsToAlarm:
          type: number
          default: 0
          minimum: 1
          description: The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: A resource's optional description.
        EvaluationPeriods:
          type: number
          default: 0
          minimum: 1
          description: The number of periods over which data is compared to the specified threshold.
        GroupId:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
        GroupIdentifier:
          type: string
          pattern: ^[^\s]+$
          description: A cloudwatch alarm template group's identifier. Can be either be its id or current name.
        Id:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
        Identifier:
          type: string
        MetricName:
          type: string
          maxLength: 64
          minLength: 0
          description: The name of the metric associated with the alarm. Must be compatible with targetResourceType.
        ModifiedAt:
          type: string
          format: date-time
        Name:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[^\s]+$
          description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
        Period:
          type: number
          default: 0
          maximum: 86400
          minimum: 10
          description: The period, in seconds, over which the specified statistic is applied.
        Statistic:
          $ref: '#/components/schemas/CloudWatchAlarmTemplateStatistic'
        Tags:
          $ref: '#/components/schemas/TagMap'
        TargetResourceType:
          $ref: '#/components/schemas/CloudWatchAlarmTemplateTargetResourceType'
        Threshold:
          type: number
          default: 0
          description: The threshold value to compare with the specified statistic.
        TreatMissingData:
          $ref: '#/components/schemas/CloudWatchAlarmTemplateTreatMissingData'
      required:
        - ComparisonOperator
        - EvaluationPeriods
        - GroupIdentifier
        - MetricName
        - Name
        - Period
        - Statistic
        - TargetResourceType
        - Threshold
        - TreatMissingData
      x-stackql-resource-name: cloud_watch_alarm_template
      description: Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
      x-type-name: AWS::MediaLive::CloudWatchAlarmTemplate
      x-stackql-primary-identifier:
        - Identifier
      x-create-only-properties:
        - Tags
      x-write-only-properties:
        - GroupIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - GroupId
        - Identifier
        - ModifiedAt
      x-required-properties:
        - ComparisonOperator
        - EvaluationPeriods
        - GroupIdentifier
        - MetricName
        - Name
        - Period
        - Statistic
        - TargetResourceType
        - Threshold
        - TreatMissingData
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateCloudWatchAlarmTemplate
          - medialive:GetCloudWatchAlarmTemplate
          - medialive:CreateTags
        read:
          - medialive:GetCloudWatchAlarmTemplate
        update:
          - medialive:UpdateCloudWatchAlarmTemplate
          - medialive:GetCloudWatchAlarmTemplate
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteCloudWatchAlarmTemplate
        list:
          - medialive:ListCloudWatchAlarmTemplates
    CloudWatchAlarmTemplateGroup:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:cloudwatch-alarm-template-group:.+$
          description: A cloudwatch alarm template group's ARN (Amazon Resource Name)
        CreatedAt:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: A resource's optional description.
        Id:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
        Identifier:
          type: string
        ModifiedAt:
          type: string
          format: date-time
        Name:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[^\s]+$
          description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: cloud_watch_alarm_template_group
      description: Definition of AWS::MediaLive::CloudWatchAlarmTemplateGroup Resource Type
      x-type-name: AWS::MediaLive::CloudWatchAlarmTemplateGroup
      x-stackql-primary-identifier:
        - Identifier
      x-create-only-properties:
        - Name
        - Tags
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - Identifier
        - ModifiedAt
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateCloudWatchAlarmTemplateGroup
          - medialive:GetCloudWatchAlarmTemplateGroup
          - medialive:CreateTags
        read:
          - medialive:GetCloudWatchAlarmTemplateGroup
        update:
          - medialive:UpdateCloudWatchAlarmTemplateGroup
          - medialive:GetCloudWatchAlarmTemplateGroup
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteCloudWatchAlarmTemplateGroup
        list:
          - medialive:ListCloudWatchAlarmTemplateGroups
    ClusterNetworkSettings:
      type: object
      description: On premises settings which will have the interface network mappings and default Output logical interface
      properties:
        DefaultRoute:
          type: string
          description: Default value if the customer does not define it in channel Output API
        InterfaceMappings:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/InterfaceMapping'
          description: Network mappings for the cluster
      additionalProperties: false
    ClusterState:
      type: string
      description: The current state of the Cluster.
      enum:
        - CREATING
        - CREATE_FAILED
        - ACTIVE
        - DELETING
        - DELETED
    ClusterType:
      type: string
      description: The hardware type for the cluster.
      enum:
        - ON_PREMISES
        - OUTPOSTS_RACK
        - OUTPOSTS_SERVER
        - EC2
    InterfaceMapping:
      type: object
      description: Network mappings for the cluster
      properties:
        LogicalInterfaceName:
          type: string
          description: logical interface name, unique in the list
        NetworkId:
          type: string
          description: Network Id to be associated with the logical interface name, can be duplicated in list
      additionalProperties: false
    InterfaceNetworkMapping:
      type: object
      description: Network mappings for the cluster
      properties:
        LogicalInterfaceName:
          type: string
          description: logical interface name, unique in the list
        NetworkId:
          type: string
          description: Network Id to be associated with the logical interface name, can be duplicated in list
      additionalProperties: false
    Cluster:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:cluster:.+$
          description: The ARN of the Cluster.
        ChannelIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: MediaLive Channel Ids
          description: The MediaLive Channels that are currently running on Nodes in this Cluster.
        ClusterType:
          $ref: '#/components/schemas/ClusterType'
        Id:
          type: string
          description: The unique ID of the Cluster.
        InstanceRoleArn:
          type: string
          pattern: ^arn:.+:iam:.+:role/.+$
          description: The IAM role your nodes will use.
        Name:
          type: string
          description: The user-specified name of the Cluster to be created.
        NetworkSettings:
          $ref: '#/components/schemas/ClusterNetworkSettings'
        State:
          $ref: '#/components/schemas/ClusterState'
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      x-stackql-resource-name: cluster
      description: Definition of AWS::MediaLive::Cluster Resource Type
      x-type-name: AWS::MediaLive::Cluster
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ClusterType
        - InstanceRoleArn
      x-read-only-properties:
        - Arn
        - ChannelIds
        - Id
        - State
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateCluster
          - medialive:DescribeCluster
          - medialive:CreateTags
          - ecs:CreateCluster
          - ecs:RegisterTaskDefinition
          - ecs:TagResource
          - ecs:CreateService
          - iam:PassRole
          - medialive:ListTagsForResource
        read:
          - medialive:DescribeCluster
          - medialive:ListTagsForResource
        update:
          - medialive:UpdateCluster
          - medialive:DescribeCluster
          - medialive:CreateTags
          - medialive:DeleteTags
          - medialive:ListTagsForResource
        delete:
          - medialive:DeleteCluster
          - medialive:DescribeCluster
          - ecs:DeleteService
        list:
          - medialive:ListClusters
    EventBridgeRuleTemplateEventType:
      type: string
      description: The type of event to match with the rule.
      enum:
        - MEDIALIVE_MULTIPLEX_ALERT
        - MEDIALIVE_MULTIPLEX_STATE_CHANGE
        - MEDIALIVE_CHANNEL_ALERT
        - MEDIALIVE_CHANNEL_INPUT_CHANGE
        - MEDIALIVE_CHANNEL_STATE_CHANGE
        - MEDIAPACKAGE_INPUT_NOTIFICATION
        - MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION
        - MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION
        - SIGNAL_MAP_ACTIVE_ALARM
        - MEDIACONNECT_ALERT
        - MEDIACONNECT_SOURCE_HEALTH
        - MEDIACONNECT_OUTPUT_HEALTH
        - MEDIACONNECT_FLOW_STATUS_CHANGE
    EventBridgeRuleTemplateTarget:
      type: object
      description: The target to which to send matching events.
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn.+$
          description: Target ARNs must be either an SNS topic or CloudWatch log group.
      required:
        - Arn
      additionalProperties: false
    EventBridgeRuleTemplate:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:eventbridge-rule-template:.+$
          description: An eventbridge rule template's ARN (Amazon Resource Name)
        CreatedAt:
          type: string
          description: Placeholder documentation for __timestampIso8601
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: A resource's optional description.
        EventTargets:
          type: array
          items:
            $ref: '#/components/schemas/EventBridgeRuleTemplateTarget'
          description: Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
        EventType:
          $ref: '#/components/schemas/EventBridgeRuleTemplateEventType'
        GroupId:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
        GroupIdentifier:
          type: string
          pattern: ^[^\s]+$
          description: An eventbridge rule template group's identifier. Can be either be its id or current name.
        Id:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: An eventbridge rule template's id. AWS provided templates have ids that start with `aws-`
        Identifier:
          type: string
          description: Placeholder documentation for __string
        ModifiedAt:
          type: string
          description: Placeholder documentation for __timestampIso8601
          format: date-time
        Name:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[^\s]+$
          description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - EventType
        - GroupIdentifier
        - Name
      x-stackql-resource-name: event_bridge_rule_template
      description: Definition of AWS::MediaLive::EventBridgeRuleTemplate Resource Type
      x-type-name: AWS::MediaLive::EventBridgeRuleTemplate
      x-stackql-primary-identifier:
        - Identifier
      x-create-only-properties:
        - Tags
      x-write-only-properties:
        - GroupIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - GroupId
        - Id
        - Identifier
        - ModifiedAt
      x-required-properties:
        - EventType
        - GroupIdentifier
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateEventBridgeRuleTemplate
          - medialive:GetEventBridgeRuleTemplate
          - medialive:CreateTags
        read:
          - medialive:GetEventBridgeRuleTemplate
        update:
          - medialive:UpdateEventBridgeRuleTemplate
          - medialive:GetEventBridgeRuleTemplate
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteEventBridgeRuleTemplate
        list:
          - medialive:ListEventBridgeRuleTemplates
    EventBridgeRuleTemplateGroup:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:eventbridge-rule-template-group:.+$
          description: An eventbridge rule template group's ARN (Amazon Resource Name)
        CreatedAt:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: A resource's optional description.
        Id:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
        Identifier:
          type: string
        ModifiedAt:
          type: string
          format: date-time
        Name:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[^\s]+$
          description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: event_bridge_rule_template_group
      description: Definition of AWS::MediaLive::EventBridgeRuleTemplateGroup Resource Type
      x-type-name: AWS::MediaLive::EventBridgeRuleTemplateGroup
      x-stackql-primary-identifier:
        - Identifier
      x-create-only-properties:
        - Name
        - Tags
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - Identifier
        - ModifiedAt
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateEventBridgeRuleTemplateGroup
          - medialive:GetEventBridgeRuleTemplateGroup
          - medialive:CreateTags
        read:
          - medialive:GetEventBridgeRuleTemplateGroup
        update:
          - medialive:UpdateEventBridgeRuleTemplateGroup
          - medialive:GetEventBridgeRuleTemplateGroup
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteEventBridgeRuleTemplateGroup
        list:
          - medialive:ListEventBridgeRuleTemplateGroups
    MultiplexOutputDestination:
      description: Multiplex MediaConnect output destination settings.
      type: object
      properties:
        MultiplexMediaConnectOutputDestinationSettings:
          description: Multiplex MediaConnect output destination settings.
          properties:
            EntitlementArn:
              type: string
              description: The MediaConnect entitlement ARN available as a Flow source.
              minLength: 1
          additionalProperties: false
      additionalProperties: false
    MultiplexSettings:
      type: object
      description: A key-value pair to associate with a resource.
      properties:
        MaximumVideoBufferDelayMilliseconds:
          type: integer
          description: Maximum video buffer delay in milliseconds.
          minimum: 800
          maximum: 3000
        TransportStreamBitrate:
          type: integer
          description: Transport stream bit rate.
          minimum: 1000000
          maximum: 100000000
        TransportStreamId:
          type: integer
          description: Transport stream ID.
          minimum: 0
          maximum: 65535
        TransportStreamReservedBitrate:
          type: integer
          description: Transport stream reserved bit rate.
          minimum: 0
          maximum: 100000000
      required:
        - TransportStreamBitrate
        - TransportStreamId
      additionalProperties: false
    Multiplex:
      type: object
      properties:
        Arn:
          type: string
          description: The unique arn of the multiplex.
        AvailabilityZones:
          description: A list of availability zones for the multiplex.
          type: array
          x-insertionOrder: false
          items:
            type: string
        Destinations:
          description: A list of the multiplex output destinations.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MultiplexOutputDestination'
        Id:
          type: string
          description: The unique id of the multiplex.
        MultiplexSettings:
          $ref: '#/components/schemas/MultiplexSettings'
          description: Configuration for a multiplex event.
        Name:
          type: string
          description: Name of multiplex.
        PipelinesRunningCount:
          type: integer
          description: The number of currently healthy pipelines.
        ProgramCount:
          type: integer
          description: The number of programs in the multiplex.
        State:
          type: string
          enum:
            - CREATING
            - CREATE_FAILED
            - IDLE
            - STARTING
            - RUNNING
            - RECOVERING
            - STOPPING
            - DELETING
            - DELETED
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      required:
        - AvailabilityZones
        - MultiplexSettings
        - Name
      x-stackql-resource-name: multiplex
      description: Resource schema for AWS::MediaLive::Multiplex
      x-type-name: AWS::MediaLive::Multiplex
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - AvailabilityZones
      x-read-only-properties:
        - Arn
        - Id
        - PipelinesRunningCount
        - ProgramCount
        - State
      x-required-properties:
        - AvailabilityZones
        - MultiplexSettings
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateMultiplex
          - medialive:DescribeMultiplex
          - medialive:CreateTags
        read:
          - medialive:DescribeMultiplex
        update:
          - medialive:UpdateMultiplex
          - medialive:DescribeMultiplex
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteMultiplex
          - medialive:DescribeMultiplex
        list:
          - medialive:ListMultiplexes
    MultiplexProgramSettings:
      description: Multiplex Program settings configuration.
      type: object
      properties:
        PreferredChannelPipeline:
          type: string
          $ref: '#/components/schemas/PreferredChannelPipeline'
        ProgramNumber:
          type: integer
          description: Unique program number.
          minimum: 0
          maximum: 65535
        ServiceDescriptor:
          $ref: '#/components/schemas/MultiplexProgramServiceDescriptor'
          description: Transport stream service descriptor configuration for the Multiplex program.
        VideoSettings:
          $ref: '#/components/schemas/MultiplexVideoSettings'
          description: Program video settings configuration.
      required:
        - ProgramNumber
      additionalProperties: false
    PreferredChannelPipeline:
      type: string
      description: |
        Indicates which pipeline is preferred by the multiplex for program ingest.
        If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
        it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
        it will not switch back to the other pipeline based on it recovering to a healthy state,
        it will only switch if the active pipeline becomes unhealthy.
      enum:
        - CURRENTLY_ACTIVE
        - PIPELINE_0
        - PIPELINE_1
    MultiplexProgramServiceDescriptor:
      description: Transport stream service descriptor configuration for the Multiplex program.
      type: object
      properties:
        ProviderName:
          type: string
          description: Name of the provider.
          minLength: 1
          maxLength: 256
        ServiceName:
          type: string
          description: Name of the service.
          minLength: 1
          maxLength: 256
      required:
        - ProviderName
        - ServiceName
      additionalProperties: false
    MultiplexVideoSettings:
      description: The video configuration for each program in a multiplex.
      type: object
      oneOf:
        - type: object
          properties:
            ConstantBitrate:
              type: integer
              description: |-
                The constant bitrate configuration for the video encode.
                When this field is defined, StatmuxSettings must be undefined.
              minimum: 100000
              maximum: 100000000
          required:
            - ConstantBitrate
          additionalProperties: false
        - type: object
          properties:
            StatmuxSettings:
              description: |-
                Statmux rate control settings.
                When this field is defined, ConstantBitrate must be undefined.
              $ref: '#/components/schemas/MultiplexStatmuxVideoSettings'
          required:
            - StatmuxSettings
          additionalProperties: false
    MultiplexStatmuxVideoSettings:
      description: Statmux rate control settings
      type: object
      properties:
        MaximumBitrate:
          type: integer
          description: Maximum statmux bitrate.
          minimum: 100000
          maximum: 100000000
        MinimumBitrate:
          type: integer
          description: Minimum statmux bitrate.
          minimum: 100000
          maximum: 100000000
        Priority:
          type: integer
          description: The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others.  Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
          minimum: -5
          maximum: 5
      additionalProperties: false
    MultiplexProgramPacketIdentifiersMap:
      description: Packet identifiers map for a given Multiplex program.
      type: object
      properties:
        AudioPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        DvbSubPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        DvbTeletextPid:
          type: integer
        EtvPlatformPid:
          type: integer
        EtvSignalPid:
          type: integer
        KlvDataPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        PcrPid:
          type: integer
        PmtPid:
          type: integer
        PrivateMetadataPid:
          type: integer
        Scte27Pids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        Scte35Pid:
          type: integer
        TimedMetadataPid:
          type: integer
        VideoPid:
          type: integer
      additionalProperties: false
    MultiplexProgramPipelineDetail:
      description: The current source for one of the pipelines in the multiplex.
      type: object
      properties:
        ActiveChannelPipeline:
          type: string
          description: Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
        PipelineId:
          type: string
          description: Identifies a specific pipeline in the multiplex.
      additionalProperties: false
    Multiplexprogram:
      type: object
      properties:
        ChannelId:
          type: string
          description: The MediaLive channel associated with the program.
        MultiplexId:
          type: string
          description: The ID of the multiplex that the program belongs to.
        MultiplexProgramSettings:
          description: The settings for this multiplex program.
          $ref: '#/components/schemas/MultiplexProgramSettings'
        PreferredChannelPipeline:
          description: The settings for this multiplex program.
          $ref: '#/components/schemas/PreferredChannelPipeline'
        PacketIdentifiersMap:
          $ref: '#/components/schemas/MultiplexProgramPacketIdentifiersMap'
          description: The packet identifier map for this multiplex program.
        PipelineDetails:
          description: Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
          type: array
          items:
            $ref: '#/components/schemas/MultiplexProgramPipelineDetail'
          x-insertionOrder: true
        ProgramName:
          type: string
          description: The name of the multiplex program.
      x-stackql-resource-name: multiplexprogram
      description: Resource schema for AWS::MediaLive::Multiplexprogram
      x-type-name: AWS::MediaLive::Multiplexprogram
      x-stackql-primary-identifier:
        - ProgramName
        - MultiplexId
      x-create-only-properties:
        - ProgramName
        - MultiplexId
      x-write-only-properties:
        - PreferredChannelPipeline
      x-read-only-properties:
        - ChannelId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - medialive:CreateMultiplexProgram
          - medialive:DescribeMultiplexProgram
        read:
          - medialive:DescribeMultiplexProgram
        update:
          - medialive:UpdateMultiplexProgram
          - medialive:DescribeMultiplexProgram
        delete:
          - medialive:DeleteMultiplexProgram
          - medialive:DescribeMultiplexProgram
        list:
          - medialive:ListMultiplexPrograms
    IpPool:
      type: object
      description: IP address cidr pool
      properties:
        Cidr:
          type: string
          description: IP address cidr pool
      additionalProperties: false
    NetworkState:
      type: string
      enum:
        - CREATING
        - CREATE_FAILED
        - ACTIVE
        - DELETING
        - IDLE
        - IN_USE
        - UPDATING
        - DELETED
        - DELETE_FAILED
    Route:
      type: object
      properties:
        Cidr:
          type: string
          description: Ip address cidr
        Gateway:
          type: string
          description: IP address for the route packet paths
      additionalProperties: false
    Network:
      type: object
      properties:
        Arn:
          type: string
          description: The ARN of the Network.
        AssociatedClusterIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            description: Cluster Ids which have this network ID in their Interface Network Mappings
        Id:
          type: string
          description: The unique ID of the Network.
        IpPools:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/IpPool'
          description: The list of IP address cidr pools for the network
        Name:
          type: string
          description: The user-specified name of the Network to be created.
        Routes:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Route'
          description: The routes for the network
        State:
          $ref: '#/components/schemas/NetworkState'
          description: The current state of the Network.
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      required:
        - Name
        - IpPools
      x-stackql-resource-name: network
      description: Resource schema for AWS::MediaLive::Network.
      x-type-name: AWS::MediaLive::Network
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Arn
        - Id
        - State
        - AssociatedClusterIds
      x-required-properties:
        - Name
        - IpPools
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateNetwork
          - medialive:CreateTags
          - medialive:DescribeNetwork
          - medialive:ListTagsForResource
        read:
          - medialive:DescribeNetwork
          - medialive:ListTagsForResource
        update:
          - medialive:UpdateNetwork
          - medialive:CreateTags
          - medialive:DeleteTags
          - medialive:DescribeNetwork
          - medialive:ListTagsForResource
        delete:
          - medialive:DeleteNetwork
          - medialive:DescribeNetwork
        list:
          - medialive:ListNetworks
    SdiSourceMode:
      type: string
      description: The current state of the SdiSource.
      enum:
        - QUADRANT
        - INTERLEAVE
    SdiSourceState:
      type: string
      description: The current state of the SdiSource.
      enum:
        - IDLE
        - IN_USE
        - DELETED
    SdiSourceType:
      type: string
      description: The interface mode of the SdiSource.
      enum:
        - SINGLE
        - QUAD
    SdiSource:
      type: object
      properties:
        Arn:
          type: string
          description: The unique arn of the SdiSource.
        Id:
          type: string
          description: The unique identifier of the SdiSource.
        Mode:
          $ref: '#/components/schemas/SdiSourceMode'
        Name:
          type: string
          description: The name of the SdiSource.
        State:
          $ref: '#/components/schemas/SdiSourceState'
        Type:
          $ref: '#/components/schemas/SdiSourceType'
        Inputs:
          description: The list of inputs currently using this SDI source.
          type: array
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      required:
        - Name
        - Type
      x-stackql-resource-name: sdi_source
      description: Definition of AWS::MediaLive::SdiSource Resource Type
      x-type-name: AWS::MediaLive::SdiSource
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
        - State
        - Arn
        - Inputs
      x-required-properties:
        - Name
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateSdiSource
          - medialive:CreateTags
          - medialive:DescribeSdiSource
          - medialive:ListTagsForResource
        read:
          - medialive:DescribeSdiSource
          - medialive:ListTagsForResource
        update:
          - medialive:UpdateSdiSource
          - medialive:DescribeSdiSource
          - medialive:CreateTags
          - medialive:DeleteTags
          - medialive:ListTagsForResource
        delete:
          - medialive:DeleteSdiSource
          - medialive:DescribeSdiSource
        list:
          - medialive:ListSdiSources
    FailedMediaResourceMap:
      type: object
      description: A map representing an incomplete AWS media workflow as a graph.
      x-patternProperties:
        .+:
          $ref: '#/components/schemas/MediaResource'
      additionalProperties: false
    MediaResource:
      type: object
      description: An AWS resource used in media workflows.
      properties:
        Destinations:
          type: array
          items:
            $ref: '#/components/schemas/MediaResourceNeighbor'
        Name:
          type: string
          maxLength: 256
          minLength: 1
          description: The logical name of an AWS media resource.
        Sources:
          type: array
          items:
            $ref: '#/components/schemas/MediaResourceNeighbor'
      additionalProperties: false
    MediaResourceMap:
      type: object
      description: A map representing an AWS media workflow as a graph.
      x-patternProperties:
        .+:
          $ref: '#/components/schemas/MediaResource'
      additionalProperties: false
    MediaResourceNeighbor:
      type: object
      description: A direct source or destination neighbor to an AWS media resource.
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^arn.+$
          description: The ARN of a resource used in AWS media workflows.
        Name:
          type: string
          maxLength: 256
          minLength: 1
          description: The logical name of an AWS media resource.
      required:
        - Arn
      additionalProperties: false
    MonitorDeployment:
      type: object
      description: Represents the latest monitor deployment of a signal map.
      properties:
        DetailsUri:
          type: string
          maxLength: 2048
          minLength: 1
          description: URI associated with a signal map's monitor deployment.
        ErrorMessage:
          type: string
          maxLength: 2048
          minLength: 1
          description: Error message associated with a failed monitor deployment of a signal map.
        Status:
          $ref: '#/components/schemas/SignalMapMonitorDeploymentStatus'
      required:
        - Status
      additionalProperties: false
    SignalMapMonitorDeploymentStatus:
      type: string
      description: A signal map's monitor deployment status.
      enum:
        - NOT_DEPLOYED
        - DRY_RUN_DEPLOYMENT_COMPLETE
        - DRY_RUN_DEPLOYMENT_FAILED
        - DRY_RUN_DEPLOYMENT_IN_PROGRESS
        - DEPLOYMENT_COMPLETE
        - DEPLOYMENT_FAILED
        - DEPLOYMENT_IN_PROGRESS
        - DELETE_COMPLETE
        - DELETE_FAILED
        - DELETE_IN_PROGRESS
    SignalMapStatus:
      type: string
      description: A signal map's current status which is dependent on its lifecycle actions or associated jobs.
      enum:
        - CREATE_IN_PROGRESS
        - CREATE_COMPLETE
        - CREATE_FAILED
        - UPDATE_IN_PROGRESS
        - UPDATE_COMPLETE
        - UPDATE_REVERTED
        - UPDATE_FAILED
        - READY
        - NOT_READY
    SuccessfulMonitorDeployment:
      type: object
      description: Represents the latest successful monitor deployment of a signal map.
      properties:
        DetailsUri:
          type: string
          maxLength: 2048
          minLength: 1
          description: URI associated with a signal map's monitor deployment.
        Status:
          $ref: '#/components/schemas/SignalMapMonitorDeploymentStatus'
      required:
        - DetailsUri
        - Status
      additionalProperties: false
    Unit:
      type: object
      additionalProperties: false
    SignalMap:
      type: object
      properties:
        Arn:
          type: string
          pattern: ^arn:.+:medialive:.+:signal-map:.+$
          description: A signal map's ARN (Amazon Resource Name)
        CloudWatchAlarmTemplateGroupIdentifiers:
          type: array
          items:
            type: string
            pattern: ^[^\s]+$
        CloudWatchAlarmTemplateGroupIds:
          type: array
          items:
            type: string
            maxLength: 11
            minLength: 7
            pattern: ^(aws-)?[0-9]{7}$
        CreatedAt:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: A resource's optional description.
        DiscoveryEntryPointArn:
          type: string
          maxLength: 2048
          minLength: 1
          description: A top-level supported AWS resource ARN to discovery a signal map from.
        ErrorMessage:
          type: string
          maxLength: 2048
          minLength: 1
          description: Error message associated with a failed creation or failed update attempt of a signal map.
        EventBridgeRuleTemplateGroupIdentifiers:
          type: array
          items:
            type: string
            pattern: ^[^\s]+$
        EventBridgeRuleTemplateGroupIds:
          type: array
          items:
            type: string
            maxLength: 11
            minLength: 7
            pattern: ^(aws-)?[0-9]{7}$
        FailedMediaResourceMap:
          $ref: '#/components/schemas/FailedMediaResourceMap'
        ForceRediscovery:
          type: boolean
          default: false
          description: If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
        Id:
          type: string
          maxLength: 11
          minLength: 7
          pattern: ^(aws-)?[0-9]{7}$
          description: A signal map's id.
        Identifier:
          type: string
        LastDiscoveredAt:
          type: string
          format: date-time
        LastSuccessfulMonitorDeployment:
          $ref: '#/components/schemas/SuccessfulMonitorDeployment'
        MediaResourceMap:
          $ref: '#/components/schemas/MediaResourceMap'
        ModifiedAt:
          type: string
          format: date-time
        MonitorChangesPendingDeployment:
          type: boolean
          default: false
          description: If true, there are pending monitor changes for this signal map that can be deployed.
        MonitorDeployment:
          $ref: '#/components/schemas/MonitorDeployment'
        Name:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[^\s]+$
          description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
        Status:
          $ref: '#/components/schemas/SignalMapStatus'
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - DiscoveryEntryPointArn
        - Name
      x-stackql-resource-name: signal_map
      description: Definition of AWS::MediaLive::SignalMap Resource Type
      x-type-name: AWS::MediaLive::SignalMap
      x-stackql-primary-identifier:
        - Identifier
      x-create-only-properties:
        - Tags
      x-write-only-properties:
        - CloudWatchAlarmTemplateGroupIdentifiers
        - EventBridgeRuleTemplateGroupIdentifiers
        - ForceRediscovery
      x-read-only-properties:
        - Arn
        - CloudWatchAlarmTemplateGroupIds
        - CreatedAt
        - ErrorMessage
        - EventBridgeRuleTemplateGroupIds
        - FailedMediaResourceMap
        - Id
        - Identifier
        - LastDiscoveredAt
        - LastSuccessfulMonitorDeployment
        - MediaResourceMap
        - ModifiedAt
        - MonitorChangesPendingDeployment
        - MonitorDeployment
        - Status
      x-required-properties:
        - DiscoveryEntryPointArn
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - medialive:CreateTags
          - medialive:DeleteTags
      x-required-permissions:
        create:
          - medialive:CreateSignalMap
          - medialive:GetSignalMap
          - medialive:CreateTags
          - medialive:DescribeChannel
          - medialive:DescribeInput
          - medialive:DescribeInputDevice
          - medialive:DescribeInputSecurityGroup
          - medialive:DescribeMultiplex
          - medialive:DescribeMultiplexProgram
          - medialive:ListChannels
          - medialive:ListInputDevices
          - medialive:ListInputSecurityGroups
          - medialive:ListInputs
          - medialive:ListMultiplexPrograms
          - medialive:ListMultiplexes
          - medialive:ListOfferings
          - medialive:ListReservations
          - medialive:ListTagsForResource
          - cloudfront:ListDistributions
          - cloudfront:GetDistribution
          - ec2:DescribeNetworkInterfaces
          - mediaconnect:ListEntitlements
          - mediaconnect:ListFlows
          - mediaconnect:ListOfferings
          - mediaconnect:ListReservations
          - mediaconnect:DescribeFlow
          - mediapackage:ListChannels
          - mediapackage:ListOriginEndpoints
          - mediapackage:DescribeChannel
          - mediapackage:DescribeOriginEndpoint
          - mediapackagev2:ListChannelGroups
          - mediapackagev2:ListChannels
          - mediapackagev2:ListOriginEndpoints
          - mediapackagev2:GetChannelGroup
          - mediapackagev2:GetChannel
          - mediapackagev2:GetOriginEndpoint
          - tag:GetResources
        read:
          - medialive:GetSignalMap
          - tag:GetResources
        update:
          - medialive:StartUpdateSignalMap
          - medialive:GetSignalMap
          - medialive:CreateTags
          - medialive:DeleteTags
          - medialive:DescribeChannel
          - medialive:DescribeInput
          - medialive:DescribeInputDevice
          - medialive:DescribeInputSecurityGroup
          - medialive:DescribeMultiplex
          - medialive:DescribeMultiplexProgram
          - medialive:ListChannels
          - medialive:ListInputDevices
          - medialive:ListInputSecurityGroups
          - medialive:ListInputs
          - medialive:ListMultiplexPrograms
          - medialive:ListMultiplexes
          - medialive:ListOfferings
          - medialive:ListReservations
          - medialive:ListTagsForResource
          - cloudfront:ListDistributions
          - cloudfront:GetDistribution
          - ec2:DescribeNetworkInterfaces
          - mediaconnect:ListEntitlements
          - mediaconnect:ListFlows
          - mediaconnect:ListOfferings
          - mediaconnect:ListReservations
          - mediaconnect:DescribeFlow
          - mediapackage:ListChannels
          - mediapackage:ListOriginEndpoints
          - mediapackage:DescribeChannel
          - mediapackage:DescribeOriginEndpoint
          - mediapackagev2:ListChannelGroups
          - mediapackagev2:ListChannels
          - mediapackagev2:ListOriginEndpoints
          - mediapackagev2:GetChannelGroup
          - mediapackagev2:GetChannel
          - mediapackagev2:GetOriginEndpoint
          - tag:GetResources
        delete:
          - medialive:GetSignalMap
          - medialive:DeleteSignalMap
        list:
          - medialive:ListSignalMaps
    CreateChannelPlacementGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The ARN of the channel placement group.
            Channels:
              type: array
              x-insertionOrder: false
              description: List of channel IDs added to the channel placement group.
              items:
                type: string
            ClusterId:
              type: string
              description: The ID of the cluster the node is on.
            Id:
              type: string
              description: Unique internal identifier.
            Name:
              type: string
              description: The name of the channel placement group.
            Nodes:
              type: array
              x-insertionOrder: false
              description: List of nodes added to the channel placement group
              items:
                type: string
            State:
              $ref: '#/components/schemas/ChannelPlacementGroupState'
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateChannelPlacementGroupRequest
      type: object
      required: []
    CreateCloudWatchAlarmTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:cloudwatch-alarm-template:.+$
              description: A cloudwatch alarm template's ARN (Amazon Resource Name)
            ComparisonOperator:
              $ref: '#/components/schemas/CloudWatchAlarmTemplateComparisonOperator'
            CreatedAt:
              type: string
              format: date-time
            DatapointsToAlarm:
              type: number
              default: 0
              minimum: 1
              description: The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: A resource's optional description.
            EvaluationPeriods:
              type: number
              default: 0
              minimum: 1
              description: The number of periods over which data is compared to the specified threshold.
            GroupId:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
            GroupIdentifier:
              type: string
              pattern: ^[^\s]+$
              description: A cloudwatch alarm template group's identifier. Can be either be its id or current name.
            Id:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
            Identifier:
              type: string
            MetricName:
              type: string
              maxLength: 64
              minLength: 0
              description: The name of the metric associated with the alarm. Must be compatible with targetResourceType.
            ModifiedAt:
              type: string
              format: date-time
            Name:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[^\s]+$
              description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
            Period:
              type: number
              default: 0
              maximum: 86400
              minimum: 10
              description: The period, in seconds, over which the specified statistic is applied.
            Statistic:
              $ref: '#/components/schemas/CloudWatchAlarmTemplateStatistic'
            Tags:
              $ref: '#/components/schemas/TagMap'
            TargetResourceType:
              $ref: '#/components/schemas/CloudWatchAlarmTemplateTargetResourceType'
            Threshold:
              type: number
              default: 0
              description: The threshold value to compare with the specified statistic.
            TreatMissingData:
              $ref: '#/components/schemas/CloudWatchAlarmTemplateTreatMissingData'
          x-stackQL-stringOnly: true
      x-title: CreateCloudWatchAlarmTemplateRequest
      type: object
      required: []
    CreateCloudWatchAlarmTemplateGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:cloudwatch-alarm-template-group:.+$
              description: A cloudwatch alarm template group's ARN (Amazon Resource Name)
            CreatedAt:
              type: string
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: A resource's optional description.
            Id:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
            Identifier:
              type: string
            ModifiedAt:
              type: string
              format: date-time
            Name:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[^\s]+$
              description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateCloudWatchAlarmTemplateGroupRequest
      type: object
      required: []
    CreateClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:cluster:.+$
              description: The ARN of the Cluster.
            ChannelIds:
              type: array
              x-insertionOrder: false
              items:
                type: string
                description: MediaLive Channel Ids
              description: The MediaLive Channels that are currently running on Nodes in this Cluster.
            ClusterType:
              $ref: '#/components/schemas/ClusterType'
            Id:
              type: string
              description: The unique ID of the Cluster.
            InstanceRoleArn:
              type: string
              pattern: ^arn:.+:iam:.+:role/.+$
              description: The IAM role your nodes will use.
            Name:
              type: string
              description: The user-specified name of the Cluster to be created.
            NetworkSettings:
              $ref: '#/components/schemas/ClusterNetworkSettings'
            State:
              $ref: '#/components/schemas/ClusterState'
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateClusterRequest
      type: object
      required: []
    CreateEventBridgeRuleTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:eventbridge-rule-template:.+$
              description: An eventbridge rule template's ARN (Amazon Resource Name)
            CreatedAt:
              type: string
              description: Placeholder documentation for __timestampIso8601
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: A resource's optional description.
            EventTargets:
              type: array
              items:
                $ref: '#/components/schemas/EventBridgeRuleTemplateTarget'
              description: Placeholder documentation for __listOfEventBridgeRuleTemplateTarget
            EventType:
              $ref: '#/components/schemas/EventBridgeRuleTemplateEventType'
            GroupId:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
            GroupIdentifier:
              type: string
              pattern: ^[^\s]+$
              description: An eventbridge rule template group's identifier. Can be either be its id or current name.
            Id:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: An eventbridge rule template's id. AWS provided templates have ids that start with `aws-`
            Identifier:
              type: string
              description: Placeholder documentation for __string
            ModifiedAt:
              type: string
              description: Placeholder documentation for __timestampIso8601
              format: date-time
            Name:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[^\s]+$
              description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateEventBridgeRuleTemplateRequest
      type: object
      required: []
    CreateEventBridgeRuleTemplateGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:eventbridge-rule-template-group:.+$
              description: An eventbridge rule template group's ARN (Amazon Resource Name)
            CreatedAt:
              type: string
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: A resource's optional description.
            Id:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: An eventbridge rule template group's id. AWS provided template groups have ids that start with `aws-`
            Identifier:
              type: string
            ModifiedAt:
              type: string
              format: date-time
            Name:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[^\s]+$
              description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateEventBridgeRuleTemplateGroupRequest
      type: object
      required: []
    CreateMultiplexRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The unique arn of the multiplex.
            AvailabilityZones:
              description: A list of availability zones for the multiplex.
              type: array
              x-insertionOrder: false
              items:
                type: string
            Destinations:
              description: A list of the multiplex output destinations.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/MultiplexOutputDestination'
            Id:
              type: string
              description: The unique id of the multiplex.
            MultiplexSettings:
              $ref: '#/components/schemas/MultiplexSettings'
              description: Configuration for a multiplex event.
            Name:
              type: string
              description: Name of multiplex.
            PipelinesRunningCount:
              type: integer
              description: The number of currently healthy pipelines.
            ProgramCount:
              type: integer
              description: The number of programs in the multiplex.
            State:
              type: string
              enum:
                - CREATING
                - CREATE_FAILED
                - IDLE
                - STARTING
                - RUNNING
                - RECOVERING
                - STOPPING
                - DELETING
                - DELETED
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateMultiplexRequest
      type: object
      required: []
    CreateMultiplexprogramRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ChannelId:
              type: string
              description: The MediaLive channel associated with the program.
            MultiplexId:
              type: string
              description: The ID of the multiplex that the program belongs to.
            MultiplexProgramSettings:
              description: The settings for this multiplex program.
              $ref: '#/components/schemas/MultiplexProgramSettings'
            PreferredChannelPipeline:
              description: The settings for this multiplex program.
              $ref: '#/components/schemas/PreferredChannelPipeline'
            PacketIdentifiersMap:
              $ref: '#/components/schemas/MultiplexProgramPacketIdentifiersMap'
              description: The packet identifier map for this multiplex program.
            PipelineDetails:
              description: Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
              type: array
              items:
                $ref: '#/components/schemas/MultiplexProgramPipelineDetail'
              x-insertionOrder: true
            ProgramName:
              type: string
              description: The name of the multiplex program.
          x-stackQL-stringOnly: true
      x-title: CreateMultiplexprogramRequest
      type: object
      required: []
    CreateNetworkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The ARN of the Network.
            AssociatedClusterIds:
              type: array
              x-insertionOrder: false
              items:
                type: string
                description: Cluster Ids which have this network ID in their Interface Network Mappings
            Id:
              type: string
              description: The unique ID of the Network.
            IpPools:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/IpPool'
              description: The list of IP address cidr pools for the network
            Name:
              type: string
              description: The user-specified name of the Network to be created.
            Routes:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Route'
              description: The routes for the network
            State:
              $ref: '#/components/schemas/NetworkState'
              description: The current state of the Network.
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateNetworkRequest
      type: object
      required: []
    CreateSdiSourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The unique arn of the SdiSource.
            Id:
              type: string
              description: The unique identifier of the SdiSource.
            Mode:
              $ref: '#/components/schemas/SdiSourceMode'
            Name:
              type: string
              description: The name of the SdiSource.
            State:
              $ref: '#/components/schemas/SdiSourceState'
            Type:
              $ref: '#/components/schemas/SdiSourceType'
            Inputs:
              description: The list of inputs currently using this SDI source.
              type: array
              x-insertionOrder: false
              items:
                type: string
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateSdiSourceRequest
      type: object
      required: []
    CreateSignalMapRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              pattern: ^arn:.+:medialive:.+:signal-map:.+$
              description: A signal map's ARN (Amazon Resource Name)
            CloudWatchAlarmTemplateGroupIdentifiers:
              type: array
              items:
                type: string
                pattern: ^[^\s]+$
            CloudWatchAlarmTemplateGroupIds:
              type: array
              items:
                type: string
                maxLength: 11
                minLength: 7
                pattern: ^(aws-)?[0-9]{7}$
            CreatedAt:
              type: string
              format: date-time
            Description:
              type: string
              maxLength: 1024
              minLength: 0
              description: A resource's optional description.
            DiscoveryEntryPointArn:
              type: string
              maxLength: 2048
              minLength: 1
              description: A top-level supported AWS resource ARN to discovery a signal map from.
            ErrorMessage:
              type: string
              maxLength: 2048
              minLength: 1
              description: Error message associated with a failed creation or failed update attempt of a signal map.
            EventBridgeRuleTemplateGroupIdentifiers:
              type: array
              items:
                type: string
                pattern: ^[^\s]+$
            EventBridgeRuleTemplateGroupIds:
              type: array
              items:
                type: string
                maxLength: 11
                minLength: 7
                pattern: ^(aws-)?[0-9]{7}$
            FailedMediaResourceMap:
              $ref: '#/components/schemas/FailedMediaResourceMap'
            ForceRediscovery:
              type: boolean
              default: false
              description: If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
            Id:
              type: string
              maxLength: 11
              minLength: 7
              pattern: ^(aws-)?[0-9]{7}$
              description: A signal map's id.
            Identifier:
              type: string
            LastDiscoveredAt:
              type: string
              format: date-time
            LastSuccessfulMonitorDeployment:
              $ref: '#/components/schemas/SuccessfulMonitorDeployment'
            MediaResourceMap:
              $ref: '#/components/schemas/MediaResourceMap'
            ModifiedAt:
              type: string
              format: date-time
            MonitorChangesPendingDeployment:
              type: boolean
              default: false
              description: If true, there are pending monitor changes for this signal map that can be deployed.
            MonitorDeployment:
              $ref: '#/components/schemas/MonitorDeployment'
            Name:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[^\s]+$
              description: A resource's name. Names must be unique within the scope of a resource type in a specific region.
            Status:
              $ref: '#/components/schemas/SignalMapStatus'
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateSignalMapRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    channel_placement_groups:
      name: channel_placement_groups
      id: aws.medialive.channel_placement_groups
      x-cfn-schema-name: ChannelPlacementGroup
      x-cfn-type-name: AWS::MediaLive::ChannelPlacementGroup
      x-identifiers:
        - Id
        - ClusterId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ChannelPlacementGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::ChannelPlacementGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::ChannelPlacementGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::ChannelPlacementGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channel_placement_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channel_placement_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channel_placement_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Channels') as channels,
              JSON_EXTRACT(Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Nodes') as nodes,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
              AND data__Identifier = '<Id>|<ClusterId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Channels') as channels,
                JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Nodes') as nodes,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Channels') as channels,
                  json_extract_path_text(Properties, 'ClusterId') as cluster_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Nodes') as nodes,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                  AND data__Identifier = '<Id>|<ClusterId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Channels') as channels,
                    json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Nodes') as nodes,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                    AND detail.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                    AND listing.region = 'us-east-1'
    channel_placement_groups_list_only:
      name: channel_placement_groups_list_only
      id: aws.medialive.channel_placement_groups_list_only
      x-cfn-schema-name: ChannelPlacementGroup
      x-cfn-type-name: AWS::MediaLive::ChannelPlacementGroup
      x-identifiers:
        - Id
        - ClusterId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ClusterId') as cluster_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ClusterId') as cluster_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                AND region = 'us-east-1'
    channel_placement_group_tags:
      name: channel_placement_group_tags
      id: aws.medialive.channel_placement_group_tags
      x-cfn-schema-name: ChannelPlacementGroup
      x-cfn-type-name: AWS::MediaLive::ChannelPlacementGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Channels') as channels,
              JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Nodes') as nodes,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
              AND detail.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Channels') as channels,
                json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Nodes') as nodes,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::ChannelPlacementGroup'
                AND listing.region = 'us-east-1'
    cloud_watch_alarm_templates:
      name: cloud_watch_alarm_templates
      id: aws.medialive.cloud_watch_alarm_templates
      x-cfn-schema-name: CloudWatchAlarmTemplate
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplate
      x-identifiers:
        - Identifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CloudWatchAlarmTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ComparisonOperator') as comparison_operator,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DatapointsToAlarm') as datapoints_to_alarm,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EvaluationPeriods') as evaluation_periods,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.GroupIdentifier') as group_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Period') as period,
              JSON_EXTRACT(Properties, '$.Statistic') as statistic,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetResourceType') as target_resource_type,
              JSON_EXTRACT(Properties, '$.Threshold') as threshold,
              JSON_EXTRACT(Properties, '$.TreatMissingData') as treat_missing_data
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
              AND data__Identifier = '<Identifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ComparisonOperator') as comparison_operator,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.DatapointsToAlarm') as datapoints_to_alarm,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EvaluationPeriods') as evaluation_periods,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
                JSON_EXTRACT(detail.Properties, '$.GroupIdentifier') as group_identifier,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
                JSON_EXTRACT(detail.Properties, '$.MetricName') as metric_name,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Period') as period,
                JSON_EXTRACT(detail.Properties, '$.Statistic') as statistic,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TargetResourceType') as target_resource_type,
                JSON_EXTRACT(detail.Properties, '$.Threshold') as threshold,
                JSON_EXTRACT(detail.Properties, '$.TreatMissingData') as treat_missing_data
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ComparisonOperator') as comparison_operator,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'DatapointsToAlarm') as datapoints_to_alarm,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EvaluationPeriods') as evaluation_periods,
                  json_extract_path_text(Properties, 'GroupId') as group_id,
                  json_extract_path_text(Properties, 'GroupIdentifier') as group_identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Identifier') as identifier,
                  json_extract_path_text(Properties, 'MetricName') as metric_name,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Period') as period,
                  json_extract_path_text(Properties, 'Statistic') as statistic,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TargetResourceType') as target_resource_type,
                  json_extract_path_text(Properties, 'Threshold') as threshold,
                  json_extract_path_text(Properties, 'TreatMissingData') as treat_missing_data
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                  AND data__Identifier = '<Identifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ComparisonOperator') as comparison_operator,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'DatapointsToAlarm') as datapoints_to_alarm,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EvaluationPeriods') as evaluation_periods,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                    json_extract_path_text(detail.Properties, 'GroupIdentifier') as group_identifier,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                    json_extract_path_text(detail.Properties, 'MetricName') as metric_name,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Period') as period,
                    json_extract_path_text(detail.Properties, 'Statistic') as statistic,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TargetResourceType') as target_resource_type,
                    json_extract_path_text(detail.Properties, 'Threshold') as threshold,
                    json_extract_path_text(detail.Properties, 'TreatMissingData') as treat_missing_data
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                    AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                    AND listing.region = 'us-east-1'
    cloud_watch_alarm_templates_list_only:
      name: cloud_watch_alarm_templates_list_only
      id: aws.medialive.cloud_watch_alarm_templates_list_only
      x-cfn-schema-name: CloudWatchAlarmTemplate
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplate
      x-identifiers:
        - Identifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Identifier') as identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                AND region = 'us-east-1'
    cloud_watch_alarm_template_tags:
      name: cloud_watch_alarm_template_tags
      id: aws.medialive.cloud_watch_alarm_template_tags
      x-cfn-schema-name: CloudWatchAlarmTemplate
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ComparisonOperator') as comparison_operator,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.DatapointsToAlarm') as datapoints_to_alarm,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EvaluationPeriods') as evaluation_periods,
              JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(detail.Properties, '$.GroupIdentifier') as group_identifier,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(detail.Properties, '$.MetricName') as metric_name,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Period') as period,
              JSON_EXTRACT(detail.Properties, '$.Statistic') as statistic,
              JSON_EXTRACT(detail.Properties, '$.TargetResourceType') as target_resource_type,
              JSON_EXTRACT(detail.Properties, '$.Threshold') as threshold,
              JSON_EXTRACT(detail.Properties, '$.TreatMissingData') as treat_missing_data
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
              AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ComparisonOperator') as comparison_operator,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'DatapointsToAlarm') as datapoints_to_alarm,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EvaluationPeriods') as evaluation_periods,
                json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                json_extract_path_text(detail.Properties, 'GroupIdentifier') as group_identifier,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                json_extract_path_text(detail.Properties, 'MetricName') as metric_name,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Period') as period,
                json_extract_path_text(detail.Properties, 'Statistic') as statistic,
                json_extract_path_text(detail.Properties, 'TargetResourceType') as target_resource_type,
                json_extract_path_text(detail.Properties, 'Threshold') as threshold,
                json_extract_path_text(detail.Properties, 'TreatMissingData') as treat_missing_data
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplate'
                AND listing.region = 'us-east-1'
    cloud_watch_alarm_template_groups:
      name: cloud_watch_alarm_template_groups
      id: aws.medialive.cloud_watch_alarm_template_groups
      x-cfn-schema-name: CloudWatchAlarmTemplateGroup
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplateGroup
      x-identifiers:
        - Identifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CloudWatchAlarmTemplateGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::CloudWatchAlarmTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_template_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_template_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/cloud_watch_alarm_template_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
              AND data__Identifier = '<Identifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Identifier') as identifier,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                  AND data__Identifier = '<Identifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                    AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                    AND listing.region = 'us-east-1'
    cloud_watch_alarm_template_groups_list_only:
      name: cloud_watch_alarm_template_groups_list_only
      id: aws.medialive.cloud_watch_alarm_template_groups_list_only
      x-cfn-schema-name: CloudWatchAlarmTemplateGroup
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplateGroup
      x-identifiers:
        - Identifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Identifier') as identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                AND region = 'us-east-1'
    cloud_watch_alarm_template_group_tags:
      name: cloud_watch_alarm_template_group_tags
      id: aws.medialive.cloud_watch_alarm_template_group_tags
      x-cfn-schema-name: CloudWatchAlarmTemplateGroup
      x-cfn-type-name: AWS::MediaLive::CloudWatchAlarmTemplateGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
              AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::CloudWatchAlarmTemplateGroup'
                AND listing.region = 'us-east-1'
    clusters:
      name: clusters
      id: aws.medialive.clusters
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MediaLive::Cluster
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelIds') as channel_ids,
              JSON_EXTRACT(Properties, '$.ClusterType') as cluster_type,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InstanceRoleArn') as instance_role_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NetworkSettings') as network_settings,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Cluster'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ChannelIds') as channel_ids,
                JSON_EXTRACT(detail.Properties, '$.ClusterType') as cluster_type,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.InstanceRoleArn') as instance_role_arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.NetworkSettings') as network_settings,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Cluster'
                AND detail.data__TypeName = 'AWS::MediaLive::Cluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ChannelIds') as channel_ids,
                  json_extract_path_text(Properties, 'ClusterType') as cluster_type,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'InstanceRoleArn') as instance_role_arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'NetworkSettings') as network_settings,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Cluster'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ChannelIds') as channel_ids,
                    json_extract_path_text(detail.Properties, 'ClusterType') as cluster_type,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'InstanceRoleArn') as instance_role_arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'NetworkSettings') as network_settings,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Cluster'
                    AND detail.data__TypeName = 'AWS::MediaLive::Cluster'
                    AND listing.region = 'us-east-1'
    clusters_list_only:
      name: clusters_list_only
      id: aws.medialive.clusters_list_only
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MediaLive::Cluster
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Cluster'
                AND region = 'us-east-1'
    cluster_tags:
      name: cluster_tags
      id: aws.medialive.cluster_tags
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::MediaLive::Cluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ChannelIds') as channel_ids,
              JSON_EXTRACT(detail.Properties, '$.ClusterType') as cluster_type,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.InstanceRoleArn') as instance_role_arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.NetworkSettings') as network_settings,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::Cluster'
              AND detail.data__TypeName = 'AWS::MediaLive::Cluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ChannelIds') as channel_ids,
                json_extract_path_text(detail.Properties, 'ClusterType') as cluster_type,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'InstanceRoleArn') as instance_role_arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'NetworkSettings') as network_settings,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::Cluster'
                AND detail.data__TypeName = 'AWS::MediaLive::Cluster'
                AND listing.region = 'us-east-1'
    event_bridge_rule_templates:
      name: event_bridge_rule_templates
      id: aws.medialive.event_bridge_rule_templates
      x-cfn-schema-name: EventBridgeRuleTemplate
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplate
      x-identifiers:
        - Identifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventBridgeRuleTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EventTargets') as event_targets,
              JSON_EXTRACT(Properties, '$.EventType') as event_type,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.GroupIdentifier') as group_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
              AND data__Identifier = '<Identifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.EventTargets') as event_targets,
                JSON_EXTRACT(detail.Properties, '$.EventType') as event_type,
                JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
                JSON_EXTRACT(detail.Properties, '$.GroupIdentifier') as group_identifier,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'EventTargets') as event_targets,
                  json_extract_path_text(Properties, 'EventType') as event_type,
                  json_extract_path_text(Properties, 'GroupId') as group_id,
                  json_extract_path_text(Properties, 'GroupIdentifier') as group_identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Identifier') as identifier,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                  AND data__Identifier = '<Identifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'EventTargets') as event_targets,
                    json_extract_path_text(detail.Properties, 'EventType') as event_type,
                    json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                    json_extract_path_text(detail.Properties, 'GroupIdentifier') as group_identifier,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                    AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                    AND listing.region = 'us-east-1'
    event_bridge_rule_templates_list_only:
      name: event_bridge_rule_templates_list_only
      id: aws.medialive.event_bridge_rule_templates_list_only
      x-cfn-schema-name: EventBridgeRuleTemplate
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplate
      x-identifiers:
        - Identifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Identifier') as identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                AND region = 'us-east-1'
    event_bridge_rule_template_tags:
      name: event_bridge_rule_template_tags
      id: aws.medialive.event_bridge_rule_template_tags
      x-cfn-schema-name: EventBridgeRuleTemplate
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplate
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.EventTargets') as event_targets,
              JSON_EXTRACT(detail.Properties, '$.EventType') as event_type,
              JSON_EXTRACT(detail.Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(detail.Properties, '$.GroupIdentifier') as group_identifier,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
              AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'EventTargets') as event_targets,
                json_extract_path_text(detail.Properties, 'EventType') as event_type,
                json_extract_path_text(detail.Properties, 'GroupId') as group_id,
                json_extract_path_text(detail.Properties, 'GroupIdentifier') as group_identifier,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplate'
                AND listing.region = 'us-east-1'
    event_bridge_rule_template_groups:
      name: event_bridge_rule_template_groups
      id: aws.medialive.event_bridge_rule_template_groups
      x-cfn-schema-name: EventBridgeRuleTemplateGroup
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplateGroup
      x-identifiers:
        - Identifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventBridgeRuleTemplateGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::EventBridgeRuleTemplateGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_template_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_template_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_bridge_rule_template_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
              AND data__Identifier = '<Identifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Identifier') as identifier,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                  AND data__Identifier = '<Identifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                    AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                    AND listing.region = 'us-east-1'
    event_bridge_rule_template_groups_list_only:
      name: event_bridge_rule_template_groups_list_only
      id: aws.medialive.event_bridge_rule_template_groups_list_only
      x-cfn-schema-name: EventBridgeRuleTemplateGroup
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplateGroup
      x-identifiers:
        - Identifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Identifier') as identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                AND region = 'us-east-1'
    event_bridge_rule_template_group_tags:
      name: event_bridge_rule_template_group_tags
      id: aws.medialive.event_bridge_rule_template_group_tags
      x-cfn-schema-name: EventBridgeRuleTemplateGroup
      x-cfn-type-name: AWS::MediaLive::EventBridgeRuleTemplateGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
              AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                AND detail.data__TypeName = 'AWS::MediaLive::EventBridgeRuleTemplateGroup'
                AND listing.region = 'us-east-1'
    multiplexes:
      name: multiplexes
      id: aws.medialive.multiplexes
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Multiplex&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.MultiplexSettings') as multiplex_settings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PipelinesRunningCount') as pipelines_running_count,
              JSON_EXTRACT(Properties, '$.ProgramCount') as program_count,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZones') as availability_zones,
                JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexSettings') as multiplex_settings,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.PipelinesRunningCount') as pipelines_running_count,
                JSON_EXTRACT(detail.Properties, '$.ProgramCount') as program_count,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AvailabilityZones') as availability_zones,
                  json_extract_path_text(Properties, 'Destinations') as destinations,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'MultiplexSettings') as multiplex_settings,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'PipelinesRunningCount') as pipelines_running_count,
                  json_extract_path_text(Properties, 'ProgramCount') as program_count,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AvailabilityZones') as availability_zones,
                    json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'MultiplexSettings') as multiplex_settings,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'PipelinesRunningCount') as pipelines_running_count,
                    json_extract_path_text(detail.Properties, 'ProgramCount') as program_count,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                    AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                    AND listing.region = 'us-east-1'
    multiplexes_list_only:
      name: multiplexes_list_only
      id: aws.medialive.multiplexes_list_only
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
                AND region = 'us-east-1'
    multiplex_tags:
      name: multiplex_tags
      id: aws.medialive.multiplex_tags
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.MultiplexSettings') as multiplex_settings,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.PipelinesRunningCount') as pipelines_running_count,
              JSON_EXTRACT(detail.Properties, '$.ProgramCount') as program_count,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
              AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AvailabilityZones') as availability_zones,
                json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'MultiplexSettings') as multiplex_settings,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'PipelinesRunningCount') as pipelines_running_count,
                json_extract_path_text(detail.Properties, 'ProgramCount') as program_count,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND listing.region = 'us-east-1'
    multiplexprograms:
      name: multiplexprograms
      id: aws.medialive.multiplexprograms
      x-cfn-schema-name: Multiplexprogram
      x-cfn-type-name: AWS::MediaLive::Multiplexprogram
      x-identifiers:
        - ProgramName
        - MultiplexId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Multiplexprogram&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ChannelId') as channel_id,
              JSON_EXTRACT(Properties, '$.MultiplexId') as multiplex_id,
              JSON_EXTRACT(Properties, '$.MultiplexProgramSettings') as multiplex_program_settings,
              JSON_EXTRACT(Properties, '$.PreferredChannelPipeline') as preferred_channel_pipeline,
              JSON_EXTRACT(Properties, '$.PacketIdentifiersMap') as packet_identifiers_map,
              JSON_EXTRACT(Properties, '$.PipelineDetails') as pipeline_details,
              JSON_EXTRACT(Properties, '$.ProgramName') as program_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
              AND data__Identifier = '<ProgramName>|<MultiplexId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ChannelId') as channel_id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexId') as multiplex_id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexProgramSettings') as multiplex_program_settings,
                JSON_EXTRACT(detail.Properties, '$.PreferredChannelPipeline') as preferred_channel_pipeline,
                JSON_EXTRACT(detail.Properties, '$.PacketIdentifiersMap') as packet_identifiers_map,
                JSON_EXTRACT(detail.Properties, '$.PipelineDetails') as pipeline_details,
                JSON_EXTRACT(detail.Properties, '$.ProgramName') as program_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ChannelId') as channel_id,
                  json_extract_path_text(Properties, 'MultiplexId') as multiplex_id,
                  json_extract_path_text(Properties, 'MultiplexProgramSettings') as multiplex_program_settings,
                  json_extract_path_text(Properties, 'PreferredChannelPipeline') as preferred_channel_pipeline,
                  json_extract_path_text(Properties, 'PacketIdentifiersMap') as packet_identifiers_map,
                  json_extract_path_text(Properties, 'PipelineDetails') as pipeline_details,
                  json_extract_path_text(Properties, 'ProgramName') as program_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                  AND data__Identifier = '<ProgramName>|<MultiplexId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ChannelId') as channel_id,
                    json_extract_path_text(detail.Properties, 'MultiplexId') as multiplex_id,
                    json_extract_path_text(detail.Properties, 'MultiplexProgramSettings') as multiplex_program_settings,
                    json_extract_path_text(detail.Properties, 'PreferredChannelPipeline') as preferred_channel_pipeline,
                    json_extract_path_text(detail.Properties, 'PacketIdentifiersMap') as packet_identifiers_map,
                    json_extract_path_text(detail.Properties, 'PipelineDetails') as pipeline_details,
                    json_extract_path_text(detail.Properties, 'ProgramName') as program_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                    AND detail.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                    AND listing.region = 'us-east-1'
    multiplexprograms_list_only:
      name: multiplexprograms_list_only
      id: aws.medialive.multiplexprograms_list_only
      x-cfn-schema-name: Multiplexprogram
      x-cfn-type-name: AWS::MediaLive::Multiplexprogram
      x-identifiers:
        - ProgramName
        - MultiplexId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProgramName') as program_name,
              JSON_EXTRACT(Properties, '$.MultiplexId') as multiplex_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProgramName') as program_name,
                json_extract_path_text(Properties, 'MultiplexId') as multiplex_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND region = 'us-east-1'
    networks:
      name: networks
      id: aws.medialive.networks
      x-cfn-schema-name: Network
      x-cfn-type-name: AWS::MediaLive::Network
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Network&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Network"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Network"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Network"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/networks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/networks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/networks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AssociatedClusterIds') as associated_cluster_ids,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.IpPools') as ip_pools,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Routes') as routes,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Network'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AssociatedClusterIds') as associated_cluster_ids,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.IpPools') as ip_pools,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Routes') as routes,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Network'
                AND detail.data__TypeName = 'AWS::MediaLive::Network'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AssociatedClusterIds') as associated_cluster_ids,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'IpPools') as ip_pools,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Routes') as routes,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Network'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AssociatedClusterIds') as associated_cluster_ids,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'IpPools') as ip_pools,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Routes') as routes,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Network'
                    AND detail.data__TypeName = 'AWS::MediaLive::Network'
                    AND listing.region = 'us-east-1'
    networks_list_only:
      name: networks_list_only
      id: aws.medialive.networks_list_only
      x-cfn-schema-name: Network
      x-cfn-type-name: AWS::MediaLive::Network
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Network'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Network'
                AND region = 'us-east-1'
    network_tags:
      name: network_tags
      id: aws.medialive.network_tags
      x-cfn-schema-name: Network
      x-cfn-type-name: AWS::MediaLive::Network
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AssociatedClusterIds') as associated_cluster_ids,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.IpPools') as ip_pools,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Routes') as routes,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::Network'
              AND detail.data__TypeName = 'AWS::MediaLive::Network'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AssociatedClusterIds') as associated_cluster_ids,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'IpPools') as ip_pools,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Routes') as routes,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::Network'
                AND detail.data__TypeName = 'AWS::MediaLive::Network'
                AND listing.region = 'us-east-1'
    sdi_sources:
      name: sdi_sources
      id: aws.medialive.sdi_sources
      x-cfn-schema-name: SdiSource
      x-cfn-type-name: AWS::MediaLive::SdiSource
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SdiSource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SdiSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SdiSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SdiSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/sdi_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/sdi_sources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/sdi_sources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Inputs') as inputs,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::SdiSource'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Mode') as mode,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Inputs') as inputs,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::SdiSource'
                AND detail.data__TypeName = 'AWS::MediaLive::SdiSource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Mode') as mode,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Inputs') as inputs,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::SdiSource'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Mode') as mode,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Inputs') as inputs,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::SdiSource'
                    AND detail.data__TypeName = 'AWS::MediaLive::SdiSource'
                    AND listing.region = 'us-east-1'
    sdi_sources_list_only:
      name: sdi_sources_list_only
      id: aws.medialive.sdi_sources_list_only
      x-cfn-schema-name: SdiSource
      x-cfn-type-name: AWS::MediaLive::SdiSource
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::SdiSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::SdiSource'
                AND region = 'us-east-1'
    sdi_source_tags:
      name: sdi_source_tags
      id: aws.medialive.sdi_source_tags
      x-cfn-schema-name: SdiSource
      x-cfn-type-name: AWS::MediaLive::SdiSource
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Mode') as mode,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.State') as state,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Inputs') as inputs
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::SdiSource'
              AND detail.data__TypeName = 'AWS::MediaLive::SdiSource'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Mode') as mode,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'State') as state,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Inputs') as inputs
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::SdiSource'
                AND detail.data__TypeName = 'AWS::MediaLive::SdiSource'
                AND listing.region = 'us-east-1'
    signal_maps:
      name: signal_maps
      id: aws.medialive.signal_maps
      x-cfn-schema-name: SignalMap
      x-cfn-type-name: AWS::MediaLive::SignalMap
      x-identifiers:
        - Identifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SignalMap&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SignalMap"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SignalMap"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::SignalMap"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/signal_maps/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/signal_maps/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/signal_maps/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
              JSON_EXTRACT(Properties, '$.CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DiscoveryEntryPointArn') as discovery_entry_point_arn,
              JSON_EXTRACT(Properties, '$.ErrorMessage') as error_message,
              JSON_EXTRACT(Properties, '$.EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
              JSON_EXTRACT(Properties, '$.EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
              JSON_EXTRACT(Properties, '$.FailedMediaResourceMap') as failed_media_resource_map,
              JSON_EXTRACT(Properties, '$.ForceRediscovery') as force_rediscovery,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(Properties, '$.LastDiscoveredAt') as last_discovered_at,
              JSON_EXTRACT(Properties, '$.LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
              JSON_EXTRACT(Properties, '$.MediaResourceMap') as media_resource_map,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
              JSON_EXTRACT(Properties, '$.MonitorDeployment') as monitor_deployment,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::SignalMap'
              AND data__Identifier = '<Identifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
                JSON_EXTRACT(detail.Properties, '$.CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.DiscoveryEntryPointArn') as discovery_entry_point_arn,
                JSON_EXTRACT(detail.Properties, '$.ErrorMessage') as error_message,
                JSON_EXTRACT(detail.Properties, '$.EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
                JSON_EXTRACT(detail.Properties, '$.EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
                JSON_EXTRACT(detail.Properties, '$.FailedMediaResourceMap') as failed_media_resource_map,
                JSON_EXTRACT(detail.Properties, '$.ForceRediscovery') as force_rediscovery,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
                JSON_EXTRACT(detail.Properties, '$.LastDiscoveredAt') as last_discovered_at,
                JSON_EXTRACT(detail.Properties, '$.LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
                JSON_EXTRACT(detail.Properties, '$.MediaResourceMap') as media_resource_map,
                JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
                JSON_EXTRACT(detail.Properties, '$.MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
                JSON_EXTRACT(detail.Properties, '$.MonitorDeployment') as monitor_deployment,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::SignalMap'
                AND detail.data__TypeName = 'AWS::MediaLive::SignalMap'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
                  json_extract_path_text(Properties, 'CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'DiscoveryEntryPointArn') as discovery_entry_point_arn,
                  json_extract_path_text(Properties, 'ErrorMessage') as error_message,
                  json_extract_path_text(Properties, 'EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
                  json_extract_path_text(Properties, 'EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
                  json_extract_path_text(Properties, 'FailedMediaResourceMap') as failed_media_resource_map,
                  json_extract_path_text(Properties, 'ForceRediscovery') as force_rediscovery,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Identifier') as identifier,
                  json_extract_path_text(Properties, 'LastDiscoveredAt') as last_discovered_at,
                  json_extract_path_text(Properties, 'LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
                  json_extract_path_text(Properties, 'MediaResourceMap') as media_resource_map,
                  json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                  json_extract_path_text(Properties, 'MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
                  json_extract_path_text(Properties, 'MonitorDeployment') as monitor_deployment,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::SignalMap'
                  AND data__Identifier = '<Identifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
                    json_extract_path_text(detail.Properties, 'CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'DiscoveryEntryPointArn') as discovery_entry_point_arn,
                    json_extract_path_text(detail.Properties, 'ErrorMessage') as error_message,
                    json_extract_path_text(detail.Properties, 'EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
                    json_extract_path_text(detail.Properties, 'EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
                    json_extract_path_text(detail.Properties, 'FailedMediaResourceMap') as failed_media_resource_map,
                    json_extract_path_text(detail.Properties, 'ForceRediscovery') as force_rediscovery,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                    json_extract_path_text(detail.Properties, 'LastDiscoveredAt') as last_discovered_at,
                    json_extract_path_text(detail.Properties, 'LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
                    json_extract_path_text(detail.Properties, 'MediaResourceMap') as media_resource_map,
                    json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                    json_extract_path_text(detail.Properties, 'MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
                    json_extract_path_text(detail.Properties, 'MonitorDeployment') as monitor_deployment,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::SignalMap'
                    AND detail.data__TypeName = 'AWS::MediaLive::SignalMap'
                    AND listing.region = 'us-east-1'
    signal_maps_list_only:
      name: signal_maps_list_only
      id: aws.medialive.signal_maps_list_only
      x-cfn-schema-name: SignalMap
      x-cfn-type-name: AWS::MediaLive::SignalMap
      x-identifiers:
        - Identifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Identifier') as identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::SignalMap'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Identifier') as identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::SignalMap'
                AND region = 'us-east-1'
    signal_map_tags:
      name: signal_map_tags
      id: aws.medialive.signal_map_tags
      x-cfn-schema-name: SignalMap
      x-cfn-type-name: AWS::MediaLive::SignalMap
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
              JSON_EXTRACT(detail.Properties, '$.CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.DiscoveryEntryPointArn') as discovery_entry_point_arn,
              JSON_EXTRACT(detail.Properties, '$.ErrorMessage') as error_message,
              JSON_EXTRACT(detail.Properties, '$.EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
              JSON_EXTRACT(detail.Properties, '$.EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
              JSON_EXTRACT(detail.Properties, '$.FailedMediaResourceMap') as failed_media_resource_map,
              JSON_EXTRACT(detail.Properties, '$.ForceRediscovery') as force_rediscovery,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Identifier') as identifier,
              JSON_EXTRACT(detail.Properties, '$.LastDiscoveredAt') as last_discovered_at,
              JSON_EXTRACT(detail.Properties, '$.LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
              JSON_EXTRACT(detail.Properties, '$.MediaResourceMap') as media_resource_map,
              JSON_EXTRACT(detail.Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(detail.Properties, '$.MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
              JSON_EXTRACT(detail.Properties, '$.MonitorDeployment') as monitor_deployment,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::SignalMap'
              AND detail.data__TypeName = 'AWS::MediaLive::SignalMap'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CloudWatchAlarmTemplateGroupIdentifiers') as cloud_watch_alarm_template_group_identifiers,
                json_extract_path_text(detail.Properties, 'CloudWatchAlarmTemplateGroupIds') as cloud_watch_alarm_template_group_ids,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'DiscoveryEntryPointArn') as discovery_entry_point_arn,
                json_extract_path_text(detail.Properties, 'ErrorMessage') as error_message,
                json_extract_path_text(detail.Properties, 'EventBridgeRuleTemplateGroupIdentifiers') as event_bridge_rule_template_group_identifiers,
                json_extract_path_text(detail.Properties, 'EventBridgeRuleTemplateGroupIds') as event_bridge_rule_template_group_ids,
                json_extract_path_text(detail.Properties, 'FailedMediaResourceMap') as failed_media_resource_map,
                json_extract_path_text(detail.Properties, 'ForceRediscovery') as force_rediscovery,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Identifier') as identifier,
                json_extract_path_text(detail.Properties, 'LastDiscoveredAt') as last_discovered_at,
                json_extract_path_text(detail.Properties, 'LastSuccessfulMonitorDeployment') as last_successful_monitor_deployment,
                json_extract_path_text(detail.Properties, 'MediaResourceMap') as media_resource_map,
                json_extract_path_text(detail.Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(detail.Properties, 'MonitorChangesPendingDeployment') as monitor_changes_pending_deployment,
                json_extract_path_text(detail.Properties, 'MonitorDeployment') as monitor_deployment,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::SignalMap'
                AND detail.data__TypeName = 'AWS::MediaLive::SignalMap'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ChannelPlacementGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannelPlacementGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelPlacementGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CloudWatchAlarmTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCloudWatchAlarmTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCloudWatchAlarmTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CloudWatchAlarmTemplateGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCloudWatchAlarmTemplateGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCloudWatchAlarmTemplateGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventBridgeRuleTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventBridgeRuleTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventBridgeRuleTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventBridgeRuleTemplateGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventBridgeRuleTemplateGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventBridgeRuleTemplateGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Multiplex&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiplex
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiplexRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Multiplexprogram&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiplexprogram
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiplexprogramRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Network&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNetwork
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNetworkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SdiSource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSdiSource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSdiSourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SignalMap&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSignalMap
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSignalMapRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
