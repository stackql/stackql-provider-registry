openapi: 3.0.0
info:
  title: MediaLive
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    MultiplexOutputDestination:
      description: Multiplex MediaConnect output destination settings.
      type: object
      properties:
        MultiplexMediaConnectOutputDestinationSettings:
          description: Multiplex MediaConnect output destination settings.
          properties:
            EntitlementArn:
              type: string
              description: The MediaConnect entitlement ARN available as a Flow source.
              minLength: 1
          additionalProperties: false
      additionalProperties: false
    MultiplexSettings:
      type: object
      description: A key-value pair to associate with a resource.
      properties:
        MaximumVideoBufferDelayMilliseconds:
          type: integer
          description: Maximum video buffer delay in milliseconds.
          minimum: 800
          maximum: 3000
        TransportStreamBitrate:
          type: integer
          description: Transport stream bit rate.
          minimum: 1000000
          maximum: 100000000
        TransportStreamId:
          type: integer
          description: Transport stream ID.
          minimum: 0
          maximum: 65535
        TransportStreamReservedBitrate:
          type: integer
          description: Transport stream reserved bit rate.
          minimum: 0
          maximum: 100000000
      required:
        - TransportStreamBitrate
        - TransportStreamId
      additionalProperties: false
    Tags:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    Multiplex:
      type: object
      properties:
        Arn:
          type: string
          description: The unique arn of the multiplex.
        AvailabilityZones:
          description: A list of availability zones for the multiplex.
          type: array
          x-insertionOrder: false
          items:
            type: string
        Destinations:
          description: A list of the multiplex output destinations.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MultiplexOutputDestination'
        Id:
          type: string
          description: The unique id of the multiplex.
        MultiplexSettings:
          $ref: '#/components/schemas/MultiplexSettings'
          description: Configuration for a multiplex event.
        Name:
          type: string
          description: Name of multiplex.
        PipelinesRunningCount:
          type: integer
          description: The number of currently healthy pipelines.
        ProgramCount:
          type: integer
          description: The number of programs in the multiplex.
        State:
          type: string
          enum:
            - CREATING
            - CREATE_FAILED
            - IDLE
            - STARTING
            - RUNNING
            - RECOVERING
            - STOPPING
            - DELETING
            - DELETED
        Tags:
          description: A collection of key-value pairs.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tags'
      required:
        - AvailabilityZones
        - MultiplexSettings
        - Name
      x-stackql-resource-name: multiplex
      description: Resource schema for AWS::MediaLive::Multiplex
      x-type-name: AWS::MediaLive::Multiplex
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - AvailabilityZones
      x-read-only-properties:
        - Arn
        - Id
        - PipelinesRunningCount
        - ProgramCount
        - State
      x-required-properties:
        - AvailabilityZones
        - MultiplexSettings
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - medialive:CreateMultiplex
          - medialive:DescribeMultiplex
          - medialive:CreateTags
        read:
          - medialive:DescribeMultiplex
        update:
          - medialive:UpdateMultiplex
          - medialive:DescribeMultiplex
          - medialive:CreateTags
          - medialive:DeleteTags
        delete:
          - medialive:DeleteMultiplex
          - medialive:DescribeMultiplex
        list:
          - medialive:ListMultiplexes
    MultiplexProgramSettings:
      description: Multiplex Program settings configuration.
      type: object
      properties:
        PreferredChannelPipeline:
          type: string
          $ref: '#/components/schemas/PreferredChannelPipeline'
        ProgramNumber:
          type: integer
          description: Unique program number.
          minimum: 0
          maximum: 65535
        ServiceDescriptor:
          $ref: '#/components/schemas/MultiplexProgramServiceDescriptor'
          description: Transport stream service descriptor configuration for the Multiplex program.
        VideoSettings:
          $ref: '#/components/schemas/MultiplexVideoSettings'
          description: Program video settings configuration.
      required:
        - ProgramNumber
      additionalProperties: false
    PreferredChannelPipeline:
      type: string
      description: |
        Indicates which pipeline is preferred by the multiplex for program ingest.
        If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
        it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
        it will not switch back to the other pipeline based on it recovering to a healthy state,
        it will only switch if the active pipeline becomes unhealthy.
      enum:
        - CURRENTLY_ACTIVE
        - PIPELINE_0
        - PIPELINE_1
    MultiplexProgramServiceDescriptor:
      description: Transport stream service descriptor configuration for the Multiplex program.
      type: object
      properties:
        ProviderName:
          type: string
          description: Name of the provider.
          minLength: 1
          maxLength: 256
        ServiceName:
          type: string
          description: Name of the service.
          minLength: 1
          maxLength: 256
      required:
        - ProviderName
        - ServiceName
      additionalProperties: false
    MultiplexVideoSettings:
      description: The video configuration for each program in a multiplex.
      type: object
      oneOf:
        - type: object
          properties:
            ConstantBitrate:
              type: integer
              description: |-
                The constant bitrate configuration for the video encode.
                When this field is defined, StatmuxSettings must be undefined.
              minimum: 100000
              maximum: 100000000
          required:
            - ConstantBitrate
          additionalProperties: false
        - type: object
          properties:
            StatmuxSettings:
              description: |-
                Statmux rate control settings.
                When this field is defined, ConstantBitrate must be undefined.
              $ref: '#/components/schemas/MultiplexStatmuxVideoSettings'
          required:
            - StatmuxSettings
          additionalProperties: false
    MultiplexStatmuxVideoSettings:
      description: Statmux rate control settings
      type: object
      properties:
        MaximumBitrate:
          type: integer
          description: Maximum statmux bitrate.
          minimum: 100000
          maximum: 100000000
        MinimumBitrate:
          type: integer
          description: Minimum statmux bitrate.
          minimum: 100000
          maximum: 100000000
        Priority:
          type: integer
          description: The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others.  Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
          minimum: -5
          maximum: 5
      additionalProperties: false
    MultiplexProgramPacketIdentifiersMap:
      description: Packet identifiers map for a given Multiplex program.
      type: object
      properties:
        AudioPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        DvbSubPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        DvbTeletextPid:
          type: integer
        EtvPlatformPid:
          type: integer
        EtvSignalPid:
          type: integer
        KlvDataPids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        PcrPid:
          type: integer
        PmtPid:
          type: integer
        PrivateMetadataPid:
          type: integer
        Scte27Pids:
          type: array
          items:
            type: integer
          x-insertionOrder: true
        Scte35Pid:
          type: integer
        TimedMetadataPid:
          type: integer
        VideoPid:
          type: integer
      additionalProperties: false
    MultiplexProgramPipelineDetail:
      description: The current source for one of the pipelines in the multiplex.
      type: object
      properties:
        ActiveChannelPipeline:
          type: string
          description: Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
        PipelineId:
          type: string
          description: Identifies a specific pipeline in the multiplex.
      additionalProperties: false
    Multiplexprogram:
      type: object
      properties:
        ChannelId:
          type: string
          description: The MediaLive channel associated with the program.
        MultiplexId:
          type: string
          description: The ID of the multiplex that the program belongs to.
        MultiplexProgramSettings:
          description: The settings for this multiplex program.
          $ref: '#/components/schemas/MultiplexProgramSettings'
        PreferredChannelPipeline:
          description: The settings for this multiplex program.
          $ref: '#/components/schemas/PreferredChannelPipeline'
        PacketIdentifiersMap:
          $ref: '#/components/schemas/MultiplexProgramPacketIdentifiersMap'
          description: The packet identifier map for this multiplex program.
        PipelineDetails:
          description: Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
          type: array
          items:
            $ref: '#/components/schemas/MultiplexProgramPipelineDetail'
          x-insertionOrder: true
        ProgramName:
          type: string
          description: The name of the multiplex program.
      x-stackql-resource-name: multiplexprogram
      description: Resource schema for AWS::MediaLive::Multiplexprogram
      x-type-name: AWS::MediaLive::Multiplexprogram
      x-stackql-primary-identifier:
        - ProgramName
        - MultiplexId
      x-create-only-properties:
        - ProgramName
        - MultiplexId
      x-write-only-properties:
        - PreferredChannelPipeline
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - medialive:CreateMultiplexProgram
          - medialive:DescribeMultiplexProgram
        read:
          - medialive:DescribeMultiplexProgram
        update:
          - medialive:UpdateMultiplexProgram
          - medialive:DescribeMultiplexProgram
        delete:
          - medialive:DeleteMultiplexProgram
          - medialive:DescribeMultiplexProgram
        list:
          - medialive:ListMultiplexPrograms
    CreateMultiplexRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The unique arn of the multiplex.
            AvailabilityZones:
              description: A list of availability zones for the multiplex.
              type: array
              x-insertionOrder: false
              items:
                type: string
            Destinations:
              description: A list of the multiplex output destinations.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/MultiplexOutputDestination'
            Id:
              type: string
              description: The unique id of the multiplex.
            MultiplexSettings:
              $ref: '#/components/schemas/MultiplexSettings'
              description: Configuration for a multiplex event.
            Name:
              type: string
              description: Name of multiplex.
            PipelinesRunningCount:
              type: integer
              description: The number of currently healthy pipelines.
            ProgramCount:
              type: integer
              description: The number of programs in the multiplex.
            State:
              type: string
              enum:
                - CREATING
                - CREATE_FAILED
                - IDLE
                - STARTING
                - RUNNING
                - RECOVERING
                - STOPPING
                - DELETING
                - DELETED
            Tags:
              description: A collection of key-value pairs.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateMultiplexRequest
      type: object
      required: []
    CreateMultiplexprogramRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ChannelId:
              type: string
              description: The MediaLive channel associated with the program.
            MultiplexId:
              type: string
              description: The ID of the multiplex that the program belongs to.
            MultiplexProgramSettings:
              description: The settings for this multiplex program.
              $ref: '#/components/schemas/MultiplexProgramSettings'
            PreferredChannelPipeline:
              description: The settings for this multiplex program.
              $ref: '#/components/schemas/PreferredChannelPipeline'
            PacketIdentifiersMap:
              $ref: '#/components/schemas/MultiplexProgramPacketIdentifiersMap'
              description: The packet identifier map for this multiplex program.
            PipelineDetails:
              description: Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
              type: array
              items:
                $ref: '#/components/schemas/MultiplexProgramPipelineDetail'
              x-insertionOrder: true
            ProgramName:
              type: string
              description: The name of the multiplex program.
          x-stackQL-stringOnly: true
      x-title: CreateMultiplexprogramRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    multiplexes:
      name: multiplexes
      id: aws.medialive.multiplexes
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Multiplex&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplex"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multiplexes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.MultiplexSettings') as multiplex_settings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PipelinesRunningCount') as pipelines_running_count,
              JSON_EXTRACT(Properties, '$.ProgramCount') as program_count,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AvailabilityZones') as availability_zones,
                JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexSettings') as multiplex_settings,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.PipelinesRunningCount') as pipelines_running_count,
                JSON_EXTRACT(detail.Properties, '$.ProgramCount') as program_count,
                JSON_EXTRACT(detail.Properties, '$.State') as state,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AvailabilityZones') as availability_zones,
                  json_extract_path_text(Properties, 'Destinations') as destinations,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'MultiplexSettings') as multiplex_settings,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'PipelinesRunningCount') as pipelines_running_count,
                  json_extract_path_text(Properties, 'ProgramCount') as program_count,
                  json_extract_path_text(Properties, 'State') as state,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AvailabilityZones') as availability_zones,
                    json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'MultiplexSettings') as multiplex_settings,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'PipelinesRunningCount') as pipelines_running_count,
                    json_extract_path_text(detail.Properties, 'ProgramCount') as program_count,
                    json_extract_path_text(detail.Properties, 'State') as state,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                    AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                    AND listing.region = 'us-east-1'
    multiplexes_list_only:
      name: multiplexes_list_only
      id: aws.medialive.multiplexes_list_only
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplex'
                AND region = 'us-east-1'
    multiplex_tags:
      name: multiplex_tags
      id: aws.medialive.multiplex_tags
      x-cfn-schema-name: Multiplex
      x-cfn-type-name: AWS::MediaLive::Multiplex
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AvailabilityZones') as availability_zones,
              JSON_EXTRACT(detail.Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.MultiplexSettings') as multiplex_settings,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.PipelinesRunningCount') as pipelines_running_count,
              JSON_EXTRACT(detail.Properties, '$.ProgramCount') as program_count,
              JSON_EXTRACT(detail.Properties, '$.State') as state
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
              AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AvailabilityZones') as availability_zones,
                json_extract_path_text(detail.Properties, 'Destinations') as destinations,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'MultiplexSettings') as multiplex_settings,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'PipelinesRunningCount') as pipelines_running_count,
                json_extract_path_text(detail.Properties, 'ProgramCount') as program_count,
                json_extract_path_text(detail.Properties, 'State') as state
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplex'
                AND listing.region = 'us-east-1'
    multiplexprograms:
      name: multiplexprograms
      id: aws.medialive.multiplexprograms
      x-cfn-schema-name: Multiplexprogram
      x-cfn-type-name: AWS::MediaLive::Multiplexprogram
      x-identifiers:
        - ProgramName
        - MultiplexId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Multiplexprogram&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaLive::Multiplexprogram"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multiplexprograms/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ChannelId') as channel_id,
              JSON_EXTRACT(Properties, '$.MultiplexId') as multiplex_id,
              JSON_EXTRACT(Properties, '$.MultiplexProgramSettings') as multiplex_program_settings,
              JSON_EXTRACT(Properties, '$.PreferredChannelPipeline') as preferred_channel_pipeline,
              JSON_EXTRACT(Properties, '$.PacketIdentifiersMap') as packet_identifiers_map,
              JSON_EXTRACT(Properties, '$.PipelineDetails') as pipeline_details,
              JSON_EXTRACT(Properties, '$.ProgramName') as program_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
              AND data__Identifier = '<ProgramName>|<MultiplexId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ChannelId') as channel_id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexId') as multiplex_id,
                JSON_EXTRACT(detail.Properties, '$.MultiplexProgramSettings') as multiplex_program_settings,
                JSON_EXTRACT(detail.Properties, '$.PreferredChannelPipeline') as preferred_channel_pipeline,
                JSON_EXTRACT(detail.Properties, '$.PacketIdentifiersMap') as packet_identifiers_map,
                JSON_EXTRACT(detail.Properties, '$.PipelineDetails') as pipeline_details,
                JSON_EXTRACT(detail.Properties, '$.ProgramName') as program_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND detail.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ChannelId') as channel_id,
                  json_extract_path_text(Properties, 'MultiplexId') as multiplex_id,
                  json_extract_path_text(Properties, 'MultiplexProgramSettings') as multiplex_program_settings,
                  json_extract_path_text(Properties, 'PreferredChannelPipeline') as preferred_channel_pipeline,
                  json_extract_path_text(Properties, 'PacketIdentifiersMap') as packet_identifiers_map,
                  json_extract_path_text(Properties, 'PipelineDetails') as pipeline_details,
                  json_extract_path_text(Properties, 'ProgramName') as program_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                  AND data__Identifier = '<ProgramName>|<MultiplexId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ChannelId') as channel_id,
                    json_extract_path_text(detail.Properties, 'MultiplexId') as multiplex_id,
                    json_extract_path_text(detail.Properties, 'MultiplexProgramSettings') as multiplex_program_settings,
                    json_extract_path_text(detail.Properties, 'PreferredChannelPipeline') as preferred_channel_pipeline,
                    json_extract_path_text(detail.Properties, 'PacketIdentifiersMap') as packet_identifiers_map,
                    json_extract_path_text(detail.Properties, 'PipelineDetails') as pipeline_details,
                    json_extract_path_text(detail.Properties, 'ProgramName') as program_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                    AND detail.data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                    AND listing.region = 'us-east-1'
    multiplexprograms_list_only:
      name: multiplexprograms_list_only
      id: aws.medialive.multiplexprograms_list_only
      x-cfn-schema-name: Multiplexprogram
      x-cfn-type-name: AWS::MediaLive::Multiplexprogram
      x-identifiers:
        - ProgramName
        - MultiplexId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProgramName') as program_name,
              JSON_EXTRACT(Properties, '$.MultiplexId') as multiplex_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProgramName') as program_name,
                json_extract_path_text(Properties, 'MultiplexId') as multiplex_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaLive::Multiplexprogram'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Multiplex&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiplex
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiplexRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Multiplexprogram&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiplexprogram
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiplexprogramRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
