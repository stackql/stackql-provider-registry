openapi: 3.0.0
info:
  title: Lambda
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    ProvisionedConcurrencyConfiguration:
      type: object
      description: A provisioned concurrency configuration for a function's version.
      additionalProperties: false
      properties:
        ProvisionedConcurrentExecutions:
          type: integer
          description: The amount of provisioned concurrency to allocate for the version.
      required:
        - ProvisionedConcurrentExecutions
    VersionWeight:
      type: object
      description: The traffic-shifting configuration of a Lambda function alias.
      additionalProperties: false
      properties:
        FunctionWeight:
          type: number
          description: The percentage of traffic that the alias routes to the second version.
        FunctionVersion:
          type: string
          description: The qualifier of the second version.
      required:
        - FunctionVersion
        - FunctionWeight
    AliasRoutingConfiguration:
      type: object
      description: The traffic-shifting configuration of a Lambda function alias.
      additionalProperties: false
      properties:
        AdditionalVersionWeights:
          type: array
          description: The second version, and the percentage of traffic that's routed to it.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VersionWeight'
    Alias:
      type: object
      properties:
        FunctionName:
          description: The name of the Lambda function.
          type: string
        AliasArn:
          description: Lambda Alias ARN generated by the service.
          type: string
        ProvisionedConcurrencyConfig:
          description: Specifies a provisioned concurrency configuration for a function's alias.
          $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
        Description:
          description: A description of the alias.
          type: string
        FunctionVersion:
          description: The function version that the alias invokes.
          type: string
        RoutingConfig:
          description: The routing configuration of the alias.
          $ref: '#/components/schemas/AliasRoutingConfiguration'
        Name:
          description: The name of the alias.
          type: string
      required:
        - FunctionName
        - FunctionVersion
        - Name
      x-stackql-resource-name: alias
      description: Resource Type definition for AWS::Lambda::Alias
      x-type-name: AWS::Lambda::Alias
      x-stackql-primary-identifier:
        - AliasArn
      x-create-only-properties:
        - Name
        - FunctionName
      x-read-only-properties:
        - AliasArn
      x-required-properties:
        - FunctionName
        - FunctionVersion
        - Name
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lambda:CreateAlias
          - lambda:PutProvisionedConcurrencyConfig
          - lambda:GetProvisionedConcurrencyConfig
        read:
          - lambda:GetAlias
          - lambda:GetProvisionedConcurrencyConfig
        delete:
          - lambda:DeleteAlias
          - lambda:GetAlias
        list:
          - lambda:ListAliases
        update:
          - lambda:UpdateAlias
          - lambda:GetAlias
          - lambda:PutProvisionedConcurrencyConfig
          - lambda:DeleteProvisionedConcurrencyConfig
          - lambda:GetProvisionedConcurrencyConfig
          - codedeploy:CreateDeployment
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentGroup
          - codedeploy:GetDeploymentConfig
          - codedeploy:StopDeployment
    AllowedPublishers:
      type: object
      description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
      additionalProperties: false
      properties:
        SigningProfileVersionArns:
          type: array
          description: List of Signing profile version Arns
          minItems: 1
          maxItems: 20
          items:
            type: string
            pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
            minLength: 12
            maxLength: 1024
      required:
        - SigningProfileVersionArns
    CodeSigningPolicies:
      type: object
      description: Policies to control how to act if a signature is invalid
      additionalProperties: false
      properties:
        UntrustedArtifactOnDeployment:
          type: string
          description: Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
          default: Warn
          enum:
            - Warn
            - Enforce
      required:
        - UntrustedArtifactOnDeployment
    Tag:
      description: A [tag](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: The value for this tag.
          type: string
          maxLength: 256
        Key:
          minLength: 1
          description: The key for this tag.
          type: string
          maxLength: 128
      required:
        - Key
    CodeSigningConfig:
      type: object
      properties:
        Description:
          description: A description of the CodeSigningConfig
          type: string
          minLength: 0
          maxLength: 256
        AllowedPublishers:
          description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
          $ref: '#/components/schemas/AllowedPublishers'
        CodeSigningPolicies:
          description: Policies to control how to act if a signature is invalid
          $ref: '#/components/schemas/CodeSigningPolicies'
        CodeSigningConfigId:
          description: A unique identifier for CodeSigningConfig resource
          type: string
          pattern: csc-[a-zA-Z0-9-_\.]{17}
        CodeSigningConfigArn:
          description: A unique Arn for CodeSigningConfig resource
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
        Tags:
          description: A list of tags to apply to CodeSigningConfig resource
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AllowedPublishers
      x-stackql-resource-name: code_signing_config
      description: Resource Type definition for AWS::Lambda::CodeSigningConfig.
      x-type-name: AWS::Lambda::CodeSigningConfig
      x-stackql-primary-identifier:
        - CodeSigningConfigArn
      x-read-only-properties:
        - CodeSigningConfigId
        - CodeSigningConfigArn
      x-required-properties:
        - AllowedPublishers
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - lambda:CreateCodeSigningConfig
          - lambda:TagResource
        read:
          - lambda:GetCodeSigningConfig
          - lambda:ListTags
        update:
          - lambda:UpdateCodeSigningConfig
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
        delete:
          - lambda:DeleteCodeSigningConfig
        list:
          - lambda:ListCodeSigningConfigs
    DestinationConfig:
      type: object
      additionalProperties: false
      description: A configuration object that specifies the destination of an event after Lambda processes it.
      properties:
        OnFailure:
          description: The destination configuration for failed invocations.
          $ref: '#/components/schemas/OnFailure'
    OnFailure:
      type: object
      description: A destination for events that failed processing.
      additionalProperties: false
      properties:
        Destination:
          description: |-
            The Amazon Resource Name (ARN) of the destination resource.
             To retain records of unsuccessful [asynchronous invocations](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations), you can configure an Amazon SNS topic, Amazon SQS queue, Amazon S3 bucket, Lambda function, or Amazon EventBridge event bus as the destination.
             To retain records of failed invocations from [Kinesis](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html), [DynamoDB](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html), [self-managed Kafka](https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-smaa-onfailure-destination) or [Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-onfailure-destination), you can configure an Amazon SNS topic, Amazon SQS queue, or Amazon S3 bucket as the destination.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
    OnSuccess:
      description: The destination configuration for successful invocations.
      type: object
      properties:
        Destination:
          description: The Amazon Resource Name (ARN) of the destination resource.
          type: string
          pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 0
          maxLength: 350
      required:
        - Destination
      additionalProperties: false
    EventInvokeConfig:
      type: object
      properties:
        DestinationConfig:
          $ref: '#/components/schemas/DestinationConfig'
        FunctionName:
          description: The name of the Lambda function.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
        MaximumEventAgeInSeconds:
          description: The maximum age of a request that Lambda sends to a function for processing.
          type: integer
          minimum: 60
          maximum: 21600
        MaximumRetryAttempts:
          description: The maximum number of times to retry when the function returns an error.
          type: integer
          minimum: 0
          maximum: 2
        Qualifier:
          description: The identifier of a version or alias.
          type: string
          pattern: ^(|[a-zA-Z0-9$_-]{1,129})$
      required:
        - FunctionName
        - Qualifier
      x-stackql-resource-name: event_invoke_config
      description: The AWS::Lambda::EventInvokeConfig resource configures options for asynchronous invocation on a version or an alias.
      x-type-name: AWS::Lambda::EventInvokeConfig
      x-stackql-primary-identifier:
        - FunctionName
        - Qualifier
      x-create-only-properties:
        - FunctionName
        - Qualifier
      x-required-properties:
        - FunctionName
        - Qualifier
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - lambda:PutFunctionEventInvokeConfig
        read:
          - lambda:GetFunctionEventInvokeConfig
        update:
          - lambda:UpdateFunctionEventInvokeConfig
        delete:
          - lambda:DeleteFunctionEventInvokeConfig
        list:
          - lambda:ListFunctionEventInvokeConfigs
    FilterCriteria:
      type: object
      description: An object that contains the filters for an event source.
      additionalProperties: false
      properties:
        Filters:
          description: A list of filters.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Filter'
          minItems: 1
          maxItems: 20
    Filter:
      type: object
      description: A structure within a ``FilterCriteria`` object that defines an event filtering pattern.
      additionalProperties: false
      properties:
        Pattern:
          type: string
          description: A filter pattern. For more information on the syntax of a filter pattern, see [Filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
          pattern: .*
          minLength: 0
          maxLength: 4096
    SourceAccessConfiguration:
      type: object
      additionalProperties: false
      description: An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.
      properties:
        Type:
          description: |-
            The type of authentication protocol, VPC components, or virtual host for your event source. For example: ``"Type":"SASL_SCRAM_512_AUTH"``.
              +   ``BASIC_AUTH`` – (Amazon MQ) The ASMlong secret that stores your broker credentials.
              +   ``BASIC_AUTH`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL/PLAIN authentication of your Apache Kafka brokers.
              +   ``VPC_SUBNET`` – (Self-managed Apache Kafka) The subnets associated with your VPC. Lambda connects to these subnets to fetch data from your self-managed Apache Kafka cluster.
              +   ``VPC_SECURITY_GROUP`` – (Self-managed Apache Kafka) The VPC security group used to manage access to your self-managed Apache Kafka brokers.
              +   ``SASL_SCRAM_256_AUTH`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-256 authentication of your self-managed Apache Kafka brokers.
              +   ``SASL_SCRAM_512_AUTH`` – (Amazon MSK, Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-512 authentication of your self-managed Apache Kafka brokers.
              +   ``VIRTUAL_HOST`` –- (RabbitMQ) The name of the virtual host in your RabbitMQ broker. Lambda uses this RabbitMQ host as the event source. This property cannot be specified in an UpdateEventSourceMapping API call.
              +   ``CLIENT_CERTIFICATE_TLS_AUTH`` – (Amazon MSK, self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the certificate chain (X.509 PEM), private key (PKCS#8 PEM), and private key password (optional) used for mutual TLS authentication of your MSK/Apache Kafka brokers.
              +   ``SERVER_ROOT_CA_CERTIFICATE`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the root CA certificate (X.509 PEM) used for TLS encryption of your Apache Kafka brokers.
          enum:
            - BASIC_AUTH
            - VPC_SUBNET
            - VPC_SECURITY_GROUP
            - SASL_SCRAM_512_AUTH
            - SASL_SCRAM_256_AUTH
            - VIRTUAL_HOST
            - CLIENT_CERTIFICATE_TLS_AUTH
            - SERVER_ROOT_CA_CERTIFICATE
          type: string
        URI:
          description: 'The value for your chosen configuration in ``Type``. For example: ``"URI": "arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName"``.'
          type: string
          pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
          minLength: 1
          maxLength: 200
    SelfManagedEventSource:
      type: object
      additionalProperties: false
      description: The self-managed Apache Kafka cluster for your event source.
      properties:
        Endpoints:
          description: 'The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.'
          $ref: '#/components/schemas/Endpoints'
    Endpoints:
      type: object
      additionalProperties: false
      description: 'The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.'
      properties:
        KafkaBootstrapServers:
          type: array
          description: 'The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.'
          uniqueItems: true
          items:
            type: string
            description: The URL of a Kafka server.
            pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}
            minLength: 1
            maxLength: 300
          minItems: 1
          maxItems: 10
    ConsumerGroupId:
      description: The identifier for the Kafka Consumer Group to join.
      type: string
      pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
      minLength: 1
      maxLength: 200
    AmazonManagedKafkaEventSourceConfig:
      description: Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see [Customizable consumer group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
          $ref: '#/components/schemas/ConsumerGroupId'
    SelfManagedKafkaEventSourceConfig:
      description: Specific configuration settings for a self-managed Apache Kafka event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see [Customizable consumer group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
          $ref: '#/components/schemas/ConsumerGroupId'
    MaximumConcurrency:
      description: The maximum number of concurrent functions that an event source can invoke.
      type: integer
      minimum: 2
      maximum: 1000
    ScalingConfig:
      description: (Amazon SQS only) The scaling configuration for the event source. To remove the configuration, pass an empty value.
      type: object
      additionalProperties: false
      properties:
        MaximumConcurrency:
          description: Limits the number of concurrent instances that the SQS event source can invoke.
          $ref: '#/components/schemas/MaximumConcurrency'
    DocumentDBEventSourceConfig:
      description: Specific configuration settings for a DocumentDB event source.
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          description: The name of the database to consume within the DocumentDB cluster.
          type: string
          minLength: 1
          maxLength: 63
        CollectionName:
          description: The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
          type: string
          minLength: 1
          maxLength: 57
        FullDocument:
          description: Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes.
          type: string
          enum:
            - UpdateLookup
            - Default
    ProvisionedPollerConfig:
      description: The [provisioned mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode) configuration for the event source. Use provisioned mode to customize the minimum and maximum number of event pollers for your event source.
      type: object
      additionalProperties: false
      properties:
        MinimumPollers:
          description: The minimum number of event pollers this event source can scale down to.
          type: integer
          minimum: 1
          maximum: 200
        MaximumPollers:
          description: The maximum number of event pollers this event source can scale up to.
          type: integer
          minimum: 1
          maximum: 2000
    MetricsConfig:
      description: The metrics configuration for your event source. Use this configuration object to define which metrics you want your event source mapping to produce.
      type: object
      additionalProperties: false
      properties:
        Metrics:
          description: The metrics you want your event source mapping to produce. Include ``EventCount`` to receive event source mapping metrics related to the number of events processed by your event source mapping. For more information about these metrics, see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - EventCount
          minItems: 0
          maxItems: 1
    EventSourceMapping:
      type: object
      properties:
        Id:
          description: ''
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
          minLength: 36
          maxLength: 36
        BatchSize:
          description: |-
            The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).
              +   *Amazon Kinesis* – Default 100. Max 10,000.
              +   *Amazon DynamoDB Streams* – Default 100. Max 10,000.
              +   *Amazon Simple Queue Service* – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.
              +   *Amazon Managed Streaming for Apache Kafka* – Default 100. Max 10,000.
              +   *Self-managed Apache Kafka* – Default 100. Max 10,000.
              +   *Amazon MQ (ActiveMQ and RabbitMQ)* – Default 100. Max 10,000.
              +   *DocumentDB* – Default 100. Max 10,000.
          type: integer
          minimum: 1
          maximum: 10000
        BisectBatchOnFunctionError:
          description: (Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry. The default value is false.
          type: boolean
        DestinationConfig:
          description: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Apache Kafka event sources only) A configuration object that specifies the destination of an event after Lambda processes it.
          $ref: '#/components/schemas/DestinationConfig'
        Enabled:
          description: |-
            When true, the event source mapping is active. When false, Lambda pauses polling and invocation.
             Default: True
          type: boolean
        EventSourceArn:
          description: |-
            The Amazon Resource Name (ARN) of the event source.
              +   *Amazon Kinesis* – The ARN of the data stream or a stream consumer.
              +   *Amazon DynamoDB Streams* – The ARN of the stream.
              +   *Amazon Simple Queue Service* – The ARN of the queue.
              +   *Amazon Managed Streaming for Apache Kafka* – The ARN of the cluster or the ARN of the VPC connection (for [cross-account event source mappings](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#msk-multi-vpc)).
              +   *Amazon MQ* – The ARN of the broker.
              +   *Amazon DocumentDB* – The ARN of the DocumentDB change stream.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
        EventSourceMappingArn:
          description: ''
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:event-source-mapping:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
          minLength: 85
          maxLength: 120
        FilterCriteria:
          description: An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see [Lambda event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
          $ref: '#/components/schemas/FilterCriteria'
        KmsKeyArn:
          description: The ARN of the KMSlong (KMS) customer managed key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
          type: string
          pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
          minLength: 12
          maxLength: 2048
        FunctionName:
          description: |-
            The name or ARN of the Lambda function.
              **Name formats**
             +   *Function name* – ``MyFunction``.
              +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction``.
              +   *Version or Alias ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD``.
              +   *Partial ARN* – ``123456789012:function:MyFunction``.
              
             The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
          type: string
          pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
          minLength: 1
          maxLength: 140
        MaximumBatchingWindowInSeconds:
          description: |-
            The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.
              *Default (, , event sources)*: 0
              *Default (, Kafka, , event sources)*: 500 ms
              *Related setting:* For SQS event sources, when you set ``BatchSize`` to a value greater than 10, you must set ``MaximumBatchingWindowInSeconds`` to at least 1.
          type: integer
          minimum: 0
          maximum: 300
        MaximumRecordAgeInSeconds:
          description: |-
            (Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, Lambda never discards old records.
              The minimum valid value for maximum record age is 60s. Although values less than 60 and greater than -1 fall within the parameter's absolute range, they are not allowed
          type: integer
          minimum: -1
          maximum: 604800
        MaximumRetryAttempts:
          description: (Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, Lambda retries failed records until the record expires in the event source.
          type: integer
          minimum: -1
          maximum: 10000
        ParallelizationFactor:
          description: (Kinesis and DynamoDB Streams only) The number of batches to process concurrently from each shard. The default value is 1.
          type: integer
          minimum: 1
          maximum: 10
        StartingPosition:
          description: |-
            The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB.
              +   *LATEST* - Read only new records.
              +   *TRIM_HORIZON* - Process all available records.
              +   *AT_TIMESTAMP* - Specify a time from which to start reading records.
          type: string
          pattern: (LATEST|TRIM_HORIZON|AT_TIMESTAMP)+
          minLength: 6
          maxLength: 12
        StartingPositionTimestamp:
          description: With ``StartingPosition`` set to ``AT_TIMESTAMP``, the time from which to start reading, in Unix time seconds. ``StartingPositionTimestamp`` cannot be in the future.
          type: number
        Tags:
          description: |-
            A list of tags to add to the event source mapping.
              You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Topics:
          description: The name of the Kafka topic.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: ^[^.]([a-zA-Z0-9\-_.]+)
            minLength: 1
            maxLength: 249
          minItems: 1
          maxItems: 1
        Queues:
          description: (Amazon MQ) The name of the Amazon MQ broker destination queue to consume.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: '[\s\S]*'
            minLength: 1
            maxLength: 1000
          minItems: 1
          maxItems: 1
        SourceAccessConfigurations:
          description: An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SourceAccessConfiguration'
          minItems: 1
          maxItems: 22
        TumblingWindowInSeconds:
          description: (Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.
          type: integer
          minimum: 0
          maximum: 900
        FunctionResponseTypes:
          description: |-
            (Kinesis, DynamoDB Streams, and SQS) A list of current response type enums applied to the event source mapping.
             Valid Values: ``ReportBatchItemFailures``
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - ReportBatchItemFailures
          minLength: 0
          maxLength: 1
        SelfManagedEventSource:
          description: The self-managed Apache Kafka cluster for your event source.
          $ref: '#/components/schemas/SelfManagedEventSource'
        AmazonManagedKafkaEventSourceConfig:
          description: Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
          $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
        SelfManagedKafkaEventSourceConfig:
          description: Specific configuration settings for a self-managed Apache Kafka event source.
          $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
        ScalingConfig:
          description: (Amazon SQS only) The scaling configuration for the event source. For more information, see [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
          $ref: '#/components/schemas/ScalingConfig'
        DocumentDBEventSourceConfig:
          description: Specific configuration settings for a DocumentDB event source.
          $ref: '#/components/schemas/DocumentDBEventSourceConfig'
        ProvisionedPollerConfig:
          description: (Amazon MSK and self-managed Apache Kafka only) The provisioned mode configuration for the event source. For more information, see [provisioned mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode).
          $ref: '#/components/schemas/ProvisionedPollerConfig'
        MetricsConfig:
          description: The metrics configuration for your event source. For more information, see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
          $ref: '#/components/schemas/MetricsConfig'
      required:
        - FunctionName
      x-stackql-resource-name: event_source_mapping
      description: |-
        The ``AWS::Lambda::EventSourceMapping`` resource creates a mapping between an event source and an LAMlong function. LAM reads items from the event source and triggers the function.
         For details about each event source type, see the following topics. In particular, each of the topics describes the required and optional parameters for the specific event source. 
          +   [Configuring a Dynamo DB stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping) 
          +   [Configuring a Kinesis stream as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping) 
          +   [Configuring an SQS queue as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource) 
          +   [Configuring an MQ broker as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping) 
          +   [Configuring MSK as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html) 
          +   [Configuring Self-Managed Apache Kafka as an event source](https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html) 
          +   [Configuring Amazon DocumentDB as an event source](https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html)
      x-type-name: AWS::Lambda::EventSourceMapping
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - EventSourceArn
        - StartingPosition
        - StartingPositionTimestamp
        - SelfManagedEventSource
        - AmazonManagedKafkaEventSourceConfig
        - SelfManagedKafkaEventSourceConfig
      x-read-only-properties:
        - Id
        - EventSourceMappingArn
      x-required-properties:
        - FunctionName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - lambda:CreateEventSourceMapping
          - lambda:GetEventSourceMapping
          - lambda:TagResource
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - lambda:DeleteEventSourceMapping
          - lambda:GetEventSourceMapping
          - kms:Decrypt
        list:
          - lambda:ListEventSourceMappings
        read:
          - lambda:GetEventSourceMapping
          - lambda:ListTags
          - kms:Decrypt
        update:
          - lambda:UpdateEventSourceMapping
          - lambda:GetEventSourceMapping
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
    ImageConfig:
      description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
      additionalProperties: false
      type: object
      properties:
        WorkingDirectory:
          description: Specifies the working directory. The length of the directory string cannot exceed 1,000 characters.
          type: string
        Command:
          maxItems: 1500
          uniqueItems: true
          description: Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a maximum of 1,500 parameters in the list.
          type: array
          items:
            type: string
        EntryPoint:
          maxItems: 1500
          uniqueItems: true
          description: Specifies the entry point to their application, which is typically the location of the runtime executable. You can specify a maximum of 1,500 string entries in the list.
          type: array
          items:
            type: string
    TracingConfig:
      description: The function's [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record incoming requests, set ``Mode`` to ``Active``.
      additionalProperties: false
      type: object
      properties:
        Mode:
          description: The tracing mode.
          type: string
          enum:
            - Active
            - PassThrough
    VpcConfig:
      description: |-
        The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC. For more information, see [VPC Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
          When you delete a function, CFN monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's resources.
         To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for network interfaces to be deleted.
      additionalProperties: false
      type: object
      properties:
        Ipv6AllowedForDualStack:
          description: Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets.
          type: boolean
        SecurityGroupIds:
          maxItems: 5
          uniqueItems: false
          description: A list of VPC security group IDs.
          type: array
          items:
            type: string
        SubnetIds:
          maxItems: 16
          uniqueItems: false
          description: A list of VPC subnet IDs.
          type: array
          items:
            type: string
    DeadLetterConfig:
      description: The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous invocations.
      additionalProperties: false
      type: object
      properties:
        TargetArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
          type: string
    RuntimeManagementConfig:
      description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
      additionalProperties: false
      type: object
      properties:
        UpdateRuntimeOn:
          description: |-
            Specify the runtime update mode.
              +   *Auto (default)* - Automatically update to the most recent and secure runtime version using a [Two-phase runtime version rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is the best choice for most customers to ensure they always benefit from runtime updates.
              +   *FunctionUpdate* - LAM updates the runtime of you function to the most recent and secure runtime version when you update your function. This approach synchronizes runtime updates with function deployments, giving you control over when runtime updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When using this setting, you need to regularly update your functions to keep their runtime up-to-date.
              +   *Manual* - You specify a runtime version in your function configuration. The function will use this runtime version indefinitely. In the rare case where a new runtime version is incompatible with an existing function, this allows you to roll back your function to an earlier runtime version. For more information, see [Roll back a runtime version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback).
              
              *Valid Values*: ``Auto`` | ``FunctionUpdate`` | ``Manual``
          type: string
          enum:
            - Auto
            - FunctionUpdate
            - Manual
        RuntimeVersionArn:
          description: |-
            The ARN of the runtime version you want the function to use.
              This is only required if you're using the *Manual* runtime update mode.
          type: string
      required:
        - UpdateRuntimeOn
    SnapStart:
      description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
      additionalProperties: false
      type: object
      properties:
        ApplyOn:
          description: Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized execution environment when you publish a function version.
          type: string
          enum:
            - PublishedVersions
            - None
      required:
        - ApplyOn
    SnapStartResponse:
      description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
      additionalProperties: false
      type: object
      properties:
        OptimizationStatus:
          description: When you provide a [qualified Amazon Resource Name (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this response element indicates whether SnapStart is activated for the specified function version.
          type: string
          enum:
            - 'On'
            - 'Off'
        ApplyOn:
          description: When set to ``PublishedVersions``, Lambda creates a snapshot of the execution environment when you publish a function version.
          type: string
          enum:
            - PublishedVersions
            - None
    Code:
      description: |-
        The [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js and Python functions, you can specify the function code inline in the template.
         Changes to a deployment package in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the function code, change the object key or version in the template.
      additionalProperties: false
      type: object
      properties:
        SourceKMSKeyArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: ''
          type: string
        S3ObjectVersion:
          minLength: 1
          description: For versioned objects, the version of the deployment package object to use.
          type: string
          maxLength: 1024
        S3Bucket:
          minLength: 3
          pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
          description: An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a different AWS-account.
          type: string
          maxLength: 63
        ZipFile:
          description: |-
            (Node.js and Python) The source code of your Lambda function. If you include your function source inline with this parameter, CFN places it in a file named ``index`` and zips it to create a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file cannot exceed 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For example, ``index.handler``.
              For JSON, you must escape quotes and special characters such as newline (``\n``) with a backslash.
             If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have to write your own functions to send responses to the custom resource that invoked the function. AWS CloudFormation provides a response module ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html)) that simplifies sending responses. See [Using Lambda with CloudFormation](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html) for details.
          type: string
        S3Key:
          minLength: 1
          description: The Amazon S3 key of the deployment package.
          type: string
          maxLength: 1024
        ImageUri:
          description: URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.
          type: string
    LoggingConfig:
      description: The function's Amazon CloudWatch Logs configuration settings.
      additionalProperties: false
      type: object
      properties:
        LogFormat:
          description: The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain text and structured JSON.
          type: string
          enum:
            - Text
            - JSON
        ApplicationLogLevel:
          description: Set this property to filter the application logs for your function that Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where ``TRACE`` is the highest level and ``FATAL`` is the lowest.
          type: string
          enum:
            - TRACE
            - DEBUG
            - INFO
            - WARN
            - ERROR
            - FATAL
        LogGroup:
          minLength: 1
          pattern: '[\.\-_/#A-Za-z0-9]+'
          description: The name of the Amazon CloudWatch log group the function sends logs to. By default, Lambda functions send logs to a default log group named ``/aws/lambda/<function name>``. To use a different log group, enter an existing log group or enter a new log group name.
          type: string
          maxLength: 512
        SystemLogLevel:
          description: Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the highest level and ``WARN`` is the lowest.
          type: string
          enum:
            - DEBUG
            - INFO
            - WARN
    RecursiveLoop:
      description: The function recursion configuration.
      type: string
      enum:
        - Allow
        - Terminate
    Environment:
      description: A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
      additionalProperties: false
      type: object
      properties:
        Variables:
          x-patternProperties:
            '[a-zA-Z][a-zA-Z0-9_]+':
              type: string
          description: |-
            Environment variable key-value pairs. For more information, see [Using Lambda environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
             If the value of the environment variable is a time or a duration, enclose the value in quotes.
          additionalProperties: false
          type: object
    FileSystemConfig:
      description: Details about the connection between a Lambda function and an [Amazon EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
      additionalProperties: false
      type: object
      properties:
        Arn:
          pattern: ^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$
          description: The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
          type: string
          maxLength: 200
        LocalMountPath:
          pattern: ^/mnt/[a-zA-Z0-9-_.]+$
          description: The path where the function can access the file system, starting with ``/mnt/``.
          type: string
          maxLength: 160
      required:
        - Arn
        - LocalMountPath
    EphemeralStorage:
      description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
      additionalProperties: false
      type: object
      properties:
        Size:
          description: The size of the function's ``/tmp`` directory.
          maximum: 10240
          type: integer
          minimum: 512
      required:
        - Size
    Function:
      type: object
      properties:
        Description:
          description: A description of the function.
          type: string
          maxLength: 256
        TracingConfig:
          description: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
          $ref: '#/components/schemas/TracingConfig'
        VpcConfig:
          description: For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
          $ref: '#/components/schemas/VpcConfig'
        RuntimeManagementConfig:
          description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
          $ref: '#/components/schemas/RuntimeManagementConfig'
        ReservedConcurrentExecutions:
          description: The number of simultaneous executions to reserve for the function.
          type: integer
          minimum: 0
        SnapStart:
          description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
          $ref: '#/components/schemas/SnapStart'
        FileSystemConfigs:
          maxItems: 1
          description: |-
            Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function.
             For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
          type: array
          items:
            $ref: '#/components/schemas/FileSystemConfig'
        FunctionName:
          minLength: 1
          description: |-
            The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
             If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        Runtime:
          description: |-
            The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image.
             The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).
             For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).
          type: string
        KmsKeyArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: >-
            The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, LAM also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, LAM also uses this key to encrypt your function
            when it's deployed. Note that this is not the same key that's used to protect your container image in the ECRlong (ECR). If you don't provide a customer managed key, LAM uses a default service key.
          type: string
        PackageType:
          description: The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
          type: string
          enum:
            - Image
            - Zip
        CodeSigningConfigArn:
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
          description: To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
          type: string
        Layers:
          uniqueItems: false
          description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
          type: array
          items:
            type: string
        Tags:
          uniqueItems: true
          description: |-
            A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
              You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        ImageConfig:
          description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
          $ref: '#/components/schemas/ImageConfig'
        MemorySize:
          description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
          type: integer
        DeadLetterConfig:
          description: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
          $ref: '#/components/schemas/DeadLetterConfig'
        Timeout:
          description: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
          type: integer
          minimum: 1
        Handler:
          pattern: ^[^\s]+$
          description: The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
          type: string
          maxLength: 128
        SnapStartResponse:
          description: ''
          $ref: '#/components/schemas/SnapStartResponse'
        Code:
          description: |-
            The code for the function. You can define your function code in multiple ways:
              +  For .zip deployment packages, you can specify the S3 location of the .zip file in the ``S3Bucket``, ``S3Key``, and ``S3ObjectVersion`` properties.
              +  For .zip deployment packages, you can alternatively define the function code inline in the ``ZipFile`` property. This method works only for Node.js and Python functions.
              +  For container images, specify the URI of your container image in the ECR registry in the ``ImageUri`` property.
          $ref: '#/components/schemas/Code'
        Role:
          pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          description: The Amazon Resource Name (ARN) of the function's execution role.
          type: string
        LoggingConfig:
          description: The function's Amazon CloudWatch Logs configuration settings.
          $ref: '#/components/schemas/LoggingConfig'
        RecursiveLoop:
          description: |-
            The status of your function's recursive loop detection configuration.
             When this value is set to ``Allow``and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.
             When this value is set to ``Terminate`` and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.
          $ref: '#/components/schemas/RecursiveLoop'
        Environment:
          description: Environment variables that are accessible from function code during execution.
          $ref: '#/components/schemas/Environment'
        Arn:
          description: ''
          type: string
        EphemeralStorage:
          description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
          $ref: '#/components/schemas/EphemeralStorage'
        Architectures:
          minItems: 1
          maxItems: 1
          uniqueItems: true
          description: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
          type: array
          items:
            type: string
            enum:
              - x86_64
              - arm64
      required:
        - Code
        - Role
      x-stackql-resource-name: function
      description: >-
        The ``AWS::Lambda::Function`` resource creates a Lambda function. To create a function, you need a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) and an [execution role](https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html). The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use AWS services, such as Amazon
        CloudWatch Logs for log streaming and AWS X-Ray for request tracing.
         You set the package type to ``Image`` if the deployment package is a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html). For these functions, include the URI of the container image in the ECR registry in the [ImageUri property of the Code property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-imageuri). You do not need to specify the handler and runtime properties. 
         You set the package type to ``Zip`` if the deployment package is a [.zip file archive](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip). For these functions, specify the S3 location of your .zip file in the ``Code`` property. Alternatively, for Node.js and Python functions, you can define your function inline in the [ZipFile property of the Code property](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-zipfile). In both cases, you must also specify the handler and runtime properties.
         You can use [code signing](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html) if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with ``UpdateFunctionCode``, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
         When you update a ``AWS::Lambda::Function`` resource, CFNshort calls the [UpdateFunctionConfiguration](https://docs.aws.amazon.com/lambda/latest/api/API_UpdateFunctionConfiguration.html) and [UpdateFunctionCode](https://docs.aws.amazon.com/lambda/latest/api/API_UpdateFunctionCode.html) LAM APIs under the hood. Because these calls happen sequentially, and invocations can happen between these calls, your function may encounter errors in the time between the calls. For example, if you remove an environment variable, and the code that references that environment variable in the same CFNshort update, you may see invocation errors related to a missing environment variable. To work around this, you can invoke your function against a version or alias by default, rather than the ``$LATEST`` version.
         Note that you configure [provisioned concurrency](https://docs.aws.amazon.com/lambda/latest/dg/provisioned-concurrency.html) on a ``AWS::Lambda::Version`` or a ``AWS::Lambda::Alias``.
         For a complete introduction to Lambda functions, see [What is Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/lambda-welcome.html) in the *Lambda developer guide.*
      x-type-name: AWS::Lambda::Function
      x-stackql-primary-identifier:
        - FunctionName
      x-create-only-properties:
        - FunctionName
      x-write-only-properties:
        - SnapStart
        - SnapStart/ApplyOn
        - Code
        - Code/ImageUri
        - Code/S3Bucket
        - Code/S3Key
        - Code/S3ObjectVersion
        - Code/ZipFile
      x-read-only-properties:
        - SnapStartResponse
        - SnapStartResponse/ApplyOn
        - SnapStartResponse/OptimizationStatus
        - Arn
      x-required-properties:
        - Code
        - Role
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - lambda:GetFunction
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetFunctionRecursionConfig
        create:
          - lambda:CreateFunction
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:Encrypt
          - kms:GenerateDataKey
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetLayerVersion
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:TagResource
          - lambda:PutFunctionRecursionConfig
          - lambda:GetFunctionRecursionConfig
        update:
          - lambda:DeleteFunctionConcurrency
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
          - lambda:UpdateFunctionConfiguration
          - lambda:UpdateFunctionCode
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:GenerateDataKey
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:PutFunctionCodeSigningConfig
          - lambda:DeleteFunctionCodeSigningConfig
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:PutFunctionRecursionConfig
          - lambda:GetFunctionRecursionConfig
        list:
          - lambda:ListFunctions
        delete:
          - lambda:DeleteFunction
          - lambda:GetFunction
          - ec2:DescribeNetworkInterfaces
    Content:
      type: object
      additionalProperties: false
      properties:
        S3ObjectVersion:
          description: For versioned objects, the version of the layer archive object to use.
          type: string
        S3Bucket:
          description: The Amazon S3 bucket of the layer archive.
          type: string
        S3Key:
          description: The Amazon S3 key of the layer archive.
          type: string
      required:
        - S3Bucket
        - S3Key
    LayerVersion:
      type: object
      properties:
        CompatibleRuntimes:
          description: A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        LicenseInfo:
          description: The layer's software license.
          type: string
        Description:
          description: The description of the version.
          type: string
        LayerName:
          description: The name or Amazon Resource Name (ARN) of the layer.
          type: string
        Content:
          description: The function layer archive.
          $ref: '#/components/schemas/Content'
        LayerVersionArn:
          type: string
        CompatibleArchitectures:
          description: A list of compatible instruction set architectures.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
      required:
        - Content
      x-stackql-resource-name: layer_version
      description: Resource Type definition for AWS::Lambda::LayerVersion
      x-type-name: AWS::Lambda::LayerVersion
      x-stackql-primary-identifier:
        - LayerVersionArn
      x-create-only-properties:
        - CompatibleRuntimes
        - LicenseInfo
        - CompatibleArchitectures
        - LayerName
        - Description
        - Content
      x-write-only-properties:
        - Content
      x-read-only-properties:
        - LayerVersionArn
      x-required-properties:
        - Content
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - lambda:PublishLayerVersion
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - lambda:GetLayerVersion
        delete:
          - lambda:GetLayerVersion
          - lambda:DeleteLayerVersion
        list:
          - lambda:ListLayerVersions
    LayerVersionPermission:
      type: object
      properties:
        Id:
          description: ID generated by service
          type: string
        Action:
          description: The API action that grants access to the layer.
          type: string
        LayerVersionArn:
          description: The name or Amazon Resource Name (ARN) of the layer.
          type: string
        OrganizationId:
          description: With the principal set to *, grant permission to all accounts in the specified organization.
          type: string
        Principal:
          description: An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if organizationId is not specified).
          type: string
      required:
        - LayerVersionArn
        - Action
        - Principal
      x-stackql-resource-name: layer_version_permission
      description: Schema for Lambda LayerVersionPermission
      x-type-name: AWS::Lambda::LayerVersionPermission
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - OrganizationId
        - Principal
        - Action
        - LayerVersionArn
      x-read-only-properties:
        - Id
      x-required-properties:
        - LayerVersionArn
        - Action
        - Principal
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - lambda:AddLayerVersionPermission
        read:
          - lambda:GetLayerVersionPolicy
        delete:
          - lambda:GetLayerVersionPolicy
          - lambda:RemoveLayerVersionPermission
        list:
          - lambda:GetLayerVersionPolicy
    Permission:
      type: object
      properties:
        FunctionName:
          minLength: 1
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
          description: |-
            The name or ARN of the Lambda function, version, or alias.
              **Name formats**
             +   *Function name* – ``my-function`` (name-only), ``my-function:v1`` (with alias).
              +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:my-function``.
              +   *Partial ARN* – ``123456789012:function:my-function``.
              
             You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
          type: string
          maxLength: 140
        Action:
          minLength: 1
          pattern: ^(lambda:[*]|lambda:[a-zA-Z]+|[*])$
          description: The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
          type: string
          maxLength: 256
        EventSourceToken:
          minLength: 1
          pattern: ^[a-zA-Z0-9._\-]+$
          description: For Alexa Smart Home functions, a token that the invoker must supply.
          type: string
          maxLength: 256
        FunctionUrlAuthType:
          description: The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
          type: string
          enum:
            - AWS_IAM
            - NONE
        SourceArn:
          minLength: 12
          pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1})?:(\d{12})?:(.*)$
          description: |-
            For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
             Note that Lambda configures the comparison using the ``StringLike`` operator.
          type: string
          maxLength: 1024
        SourceAccount:
          minLength: 12
          pattern: ^\d{12}$
          description: For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
          type: string
          maxLength: 12
        PrincipalOrgID:
          minLength: 12
          pattern: ^o-[a-z0-9]{10,32}$
          description: The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this organization.
          type: string
          maxLength: 34
        Id:
          minLength: 1
          pattern: ^.*$
          description: ''
          type: string
          maxLength: 256
        Principal:
          minLength: 1
          pattern: ^.*$
          description: The AWS-service, AWS-account, IAM user, or IAM role that invokes the function. If you specify a service, use ``SourceArn`` or ``SourceAccount`` to limit who can invoke the function through that service.
          type: string
          maxLength: 256
      required:
        - FunctionName
        - Action
        - Principal
      x-stackql-resource-name: permission
      description: |-
        The ``AWS::Lambda::Permission`` resource grants an AWS service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.
         To grant permission to another account, specify the account ID as the ``Principal``. To grant permission to an organization defined in AOlong, specify the organization ID as the ``PrincipalOrgID``. For AWS services, the principal is a domain-style identifier defined by the service, like ``s3.amazonaws.com`` or ``sns.amazonaws.com``. For AWS services, you can also specify the ARN of the associated resource as the ``SourceArn``. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.
         If your function has a function URL, you can specify the ``FunctionUrlAuthType`` parameter. This adds a condition to your permission that only applies when your function URL's ``AuthType`` matches the specified ``FunctionUrlAuthType``. For more information about the ``AuthType`` parameter, see [Security and auth model for function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
         This resource adds a statement to a resource-based permission policy for the function. For more information about function policies, see [Lambda Function Policies](https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html).
      x-type-name: AWS::Lambda::Permission
      x-stackql-primary-identifier:
        - FunctionName
        - Id
      x-create-only-properties:
        - FunctionName
        - FunctionUrlAuthType
        - SourceAccount
        - SourceArn
        - Principal
        - PrincipalOrgID
        - Action
        - EventSourceToken
      x-read-only-properties:
        - Id
      x-required-properties:
        - FunctionName
        - Action
        - Principal
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - lambda:GetPolicy
        create:
          - lambda:AddPermission
        list:
          - lambda:GetPolicy
        delete:
          - lambda:RemovePermission
    AllowHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    AllowMethods:
      items:
        type: string
        enum:
          - GET
          - PUT
          - HEAD
          - POST
          - PATCH
          - DELETE
          - '*'
      type: array
      minItems: 1
      maxItems: 6
      x-insertionOrder: true
    AllowOrigins:
      items:
        type: string
        minLength: 1
        maxLength: 253
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    ExposeHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    Cors:
      additionalProperties: false
      properties:
        AllowCredentials:
          description: Specifies whether credentials are included in the CORS request.
          type: boolean
        AllowHeaders:
          description: Represents a collection of allowed headers.
          $ref: '#/components/schemas/AllowHeaders'
        AllowMethods:
          description: Represents a collection of allowed HTTP methods.
          $ref: '#/components/schemas/AllowMethods'
        AllowOrigins:
          description: Represents a collection of allowed origins.
          $ref: '#/components/schemas/AllowOrigins'
        ExposeHeaders:
          description: Represents a collection of exposed headers.
          $ref: '#/components/schemas/ExposeHeaders'
        MaxAge:
          type: integer
          minimum: 0
          maximum: 86400
      type: object
    Url:
      type: object
      properties:
        TargetFunctionArn:
          description: The Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        Qualifier:
          description: The alias qualifier for the target function. If TargetFunctionArn is unqualified then Qualifier must be passed.
          type: string
          minLength: 1
          maxLength: 128
          pattern: ((?!^[0-9]+$)([a-zA-Z0-9-_]+))
        AuthType:
          description: Can be either AWS_IAM if the requests are authorized via IAM, or NONE if no authorization is configured on the Function URL.
          type: string
          enum:
            - AWS_IAM
            - NONE
        InvokeMode:
          description: The invocation mode for the function's URL. Set to BUFFERED if you want to buffer responses before returning them to the client. Set to RESPONSE_STREAM if you want to stream responses, allowing faster time to first byte and larger response payload sizes. If not set, defaults to BUFFERED.
          type: string
          enum:
            - BUFFERED
            - RESPONSE_STREAM
        FunctionArn:
          description: The full Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        FunctionUrl:
          description: The generated url for this resource.
          type: string
        Cors:
          $ref: '#/components/schemas/Cors'
      required:
        - TargetFunctionArn
        - AuthType
      x-stackql-resource-name: url
      description: Resource Type definition for AWS::Lambda::Url
      x-type-name: AWS::Lambda::Url
      x-stackql-primary-identifier:
        - FunctionArn
      x-create-only-properties:
        - TargetFunctionArn
        - Qualifier
      x-read-only-properties:
        - FunctionUrl
        - FunctionArn
      x-required-properties:
        - TargetFunctionArn
        - AuthType
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lambda:CreateFunctionUrlConfig
        read:
          - lambda:GetFunctionUrlConfig
        update:
          - lambda:UpdateFunctionUrlConfig
        list:
          - lambda:ListFunctionUrlConfigs
        delete:
          - lambda:DeleteFunctionUrlConfig
    RuntimePolicy:
      type: object
      description: Runtime Management Config of a function.
      additionalProperties: false
      properties:
        RuntimeVersionArn:
          type: string
          description: The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
          minLength: 26
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*):lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}::runtime:.+$
        UpdateRuntimeOn:
          type: string
          description: The runtime update mode.
      required:
        - UpdateRuntimeOn
    Version:
      type: object
      properties:
        FunctionArn:
          type: string
          description: The ARN of the version.
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
        Version:
          type: string
          description: The version number.
        CodeSha256:
          type: string
          description: Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. Updates are not supported for this property.
        Description:
          type: string
          description: A description for the version to override the description in the function configuration. Updates are not supported for this property.
          minLength: 0
          maxLength: 256
        FunctionName:
          type: string
          description: The name of the Lambda function.
          minLength: 1
          maxLength: 140
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
        ProvisionedConcurrencyConfig:
          description: Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
          $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
        RuntimePolicy:
          description: Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
          $ref: '#/components/schemas/RuntimePolicy'
      required:
        - FunctionName
      x-stackql-resource-name: version
      description: Resource Type definition for AWS::Lambda::Version
      x-type-name: AWS::Lambda::Version
      x-stackql-primary-identifier:
        - FunctionArn
      x-create-only-properties:
        - FunctionName
        - Description
        - CodeSha256
        - ProvisionedConcurrencyConfig
        - RuntimePolicy
      x-read-only-properties:
        - Version
        - FunctionArn
      x-required-properties:
        - FunctionName
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - lambda:PublishVersion
          - lambda:GetFunctionConfiguration
          - lambda:PutProvisionedConcurrencyConfig
          - lambda:GetProvisionedConcurrencyConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:GetRuntimeManagementConfig
        read:
          - lambda:GetFunctionConfiguration
          - lambda:GetProvisionedConcurrencyConfig
          - lambda:GetRuntimeManagementConfig
        delete:
          - lambda:GetFunctionConfiguration
          - lambda:DeleteFunction
        list:
          - lambda:ListVersionsByFunction
    CreateAliasRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FunctionName:
              description: The name of the Lambda function.
              type: string
            AliasArn:
              description: Lambda Alias ARN generated by the service.
              type: string
            ProvisionedConcurrencyConfig:
              description: Specifies a provisioned concurrency configuration for a function's alias.
              $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
            Description:
              description: A description of the alias.
              type: string
            FunctionVersion:
              description: The function version that the alias invokes.
              type: string
            RoutingConfig:
              description: The routing configuration of the alias.
              $ref: '#/components/schemas/AliasRoutingConfiguration'
            Name:
              description: The name of the alias.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateAliasRequest
      type: object
      required: []
    CreateCodeSigningConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: A description of the CodeSigningConfig
              type: string
              minLength: 0
              maxLength: 256
            AllowedPublishers:
              description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
              $ref: '#/components/schemas/AllowedPublishers'
            CodeSigningPolicies:
              description: Policies to control how to act if a signature is invalid
              $ref: '#/components/schemas/CodeSigningPolicies'
            CodeSigningConfigId:
              description: A unique identifier for CodeSigningConfig resource
              type: string
              pattern: csc-[a-zA-Z0-9-_\.]{17}
            CodeSigningConfigArn:
              description: A unique Arn for CodeSigningConfig resource
              type: string
              pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
            Tags:
              description: A list of tags to apply to CodeSigningConfig resource
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateCodeSigningConfigRequest
      type: object
      required: []
    CreateEventInvokeConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DestinationConfig:
              $ref: '#/components/schemas/DestinationConfig'
            FunctionName:
              description: The name of the Lambda function.
              type: string
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
            MaximumEventAgeInSeconds:
              description: The maximum age of a request that Lambda sends to a function for processing.
              type: integer
              minimum: 60
              maximum: 21600
            MaximumRetryAttempts:
              description: The maximum number of times to retry when the function returns an error.
              type: integer
              minimum: 0
              maximum: 2
            Qualifier:
              description: The identifier of a version or alias.
              type: string
              pattern: ^(|[a-zA-Z0-9$_-]{1,129})$
          x-stackQL-stringOnly: true
      x-title: CreateEventInvokeConfigRequest
      type: object
      required: []
    CreateEventSourceMappingRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ''
              type: string
              pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
              minLength: 36
              maxLength: 36
            BatchSize:
              description: |-
                The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).
                  +   *Amazon Kinesis* – Default 100. Max 10,000.
                  +   *Amazon DynamoDB Streams* – Default 100. Max 10,000.
                  +   *Amazon Simple Queue Service* – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.
                  +   *Amazon Managed Streaming for Apache Kafka* – Default 100. Max 10,000.
                  +   *Self-managed Apache Kafka* – Default 100. Max 10,000.
                  +   *Amazon MQ (ActiveMQ and RabbitMQ)* – Default 100. Max 10,000.
                  +   *DocumentDB* – Default 100. Max 10,000.
              type: integer
              minimum: 1
              maximum: 10000
            BisectBatchOnFunctionError:
              description: (Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry. The default value is false.
              type: boolean
            DestinationConfig:
              description: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Apache Kafka event sources only) A configuration object that specifies the destination of an event after Lambda processes it.
              $ref: '#/components/schemas/DestinationConfig'
            Enabled:
              description: |-
                When true, the event source mapping is active. When false, Lambda pauses polling and invocation.
                 Default: True
              type: boolean
            EventSourceArn:
              description: |-
                The Amazon Resource Name (ARN) of the event source.
                  +   *Amazon Kinesis* – The ARN of the data stream or a stream consumer.
                  +   *Amazon DynamoDB Streams* – The ARN of the stream.
                  +   *Amazon Simple Queue Service* – The ARN of the queue.
                  +   *Amazon Managed Streaming for Apache Kafka* – The ARN of the cluster or the ARN of the VPC connection (for [cross-account event source mappings](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#msk-multi-vpc)).
                  +   *Amazon MQ* – The ARN of the broker.
                  +   *Amazon DocumentDB* – The ARN of the DocumentDB change stream.
              type: string
              pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
              minLength: 12
              maxLength: 1024
            EventSourceMappingArn:
              description: ''
              type: string
              pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:event-source-mapping:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
              minLength: 85
              maxLength: 120
            FilterCriteria:
              description: An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see [Lambda event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
              $ref: '#/components/schemas/FilterCriteria'
            KmsKeyArn:
              description: The ARN of the KMSlong (KMS) customer managed key that Lambda uses to encrypt your function's [filter criteria](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-basics).
              type: string
              pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
              minLength: 12
              maxLength: 2048
            FunctionName:
              description: |-
                The name or ARN of the Lambda function.
                  **Name formats**
                 +   *Function name* – ``MyFunction``.
                  +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction``.
                  +   *Version or Alias ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD``.
                  +   *Partial ARN* – ``123456789012:function:MyFunction``.
                  
                 The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
              type: string
              pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
              minLength: 1
              maxLength: 140
            MaximumBatchingWindowInSeconds:
              description: |-
                The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function.
                  *Default (, , event sources)*: 0
                  *Default (, Kafka, , event sources)*: 500 ms
                  *Related setting:* For SQS event sources, when you set ``BatchSize`` to a value greater than 10, you must set ``MaximumBatchingWindowInSeconds`` to at least 1.
              type: integer
              minimum: 0
              maximum: 300
            MaximumRecordAgeInSeconds:
              description: |-
                (Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, Lambda never discards old records.
                  The minimum valid value for maximum record age is 60s. Although values less than 60 and greater than -1 fall within the parameter's absolute range, they are not allowed
              type: integer
              minimum: -1
              maximum: 604800
            MaximumRetryAttempts:
              description: (Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, Lambda retries failed records until the record expires in the event source.
              type: integer
              minimum: -1
              maximum: 10000
            ParallelizationFactor:
              description: (Kinesis and DynamoDB Streams only) The number of batches to process concurrently from each shard. The default value is 1.
              type: integer
              minimum: 1
              maximum: 10
            StartingPosition:
              description: |-
                The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB.
                  +   *LATEST* - Read only new records.
                  +   *TRIM_HORIZON* - Process all available records.
                  +   *AT_TIMESTAMP* - Specify a time from which to start reading records.
              type: string
              pattern: (LATEST|TRIM_HORIZON|AT_TIMESTAMP)+
              minLength: 6
              maxLength: 12
            StartingPositionTimestamp:
              description: With ``StartingPosition`` set to ``AT_TIMESTAMP``, the time from which to start reading, in Unix time seconds. ``StartingPositionTimestamp`` cannot be in the future.
              type: number
            Tags:
              description: |-
                A list of tags to add to the event source mapping.
                  You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Topics:
              description: The name of the Kafka topic.
              type: array
              uniqueItems: true
              items:
                type: string
                pattern: ^[^.]([a-zA-Z0-9\-_.]+)
                minLength: 1
                maxLength: 249
              minItems: 1
              maxItems: 1
            Queues:
              description: (Amazon MQ) The name of the Amazon MQ broker destination queue to consume.
              type: array
              uniqueItems: true
              items:
                type: string
                pattern: '[\s\S]*'
                minLength: 1
                maxLength: 1000
              minItems: 1
              maxItems: 1
            SourceAccessConfigurations:
              description: An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/SourceAccessConfiguration'
              minItems: 1
              maxItems: 22
            TumblingWindowInSeconds:
              description: (Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.
              type: integer
              minimum: 0
              maximum: 900
            FunctionResponseTypes:
              description: |-
                (Kinesis, DynamoDB Streams, and SQS) A list of current response type enums applied to the event source mapping.
                 Valid Values: ``ReportBatchItemFailures``
              type: array
              uniqueItems: true
              items:
                type: string
                enum:
                  - ReportBatchItemFailures
              minLength: 0
              maxLength: 1
            SelfManagedEventSource:
              description: The self-managed Apache Kafka cluster for your event source.
              $ref: '#/components/schemas/SelfManagedEventSource'
            AmazonManagedKafkaEventSourceConfig:
              description: Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
              $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
            SelfManagedKafkaEventSourceConfig:
              description: Specific configuration settings for a self-managed Apache Kafka event source.
              $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
            ScalingConfig:
              description: (Amazon SQS only) The scaling configuration for the event source. For more information, see [Configuring maximum concurrency for Amazon SQS event sources](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-max-concurrency).
              $ref: '#/components/schemas/ScalingConfig'
            DocumentDBEventSourceConfig:
              description: Specific configuration settings for a DocumentDB event source.
              $ref: '#/components/schemas/DocumentDBEventSourceConfig'
            ProvisionedPollerConfig:
              description: (Amazon MSK and self-managed Apache Kafka only) The provisioned mode configuration for the event source. For more information, see [provisioned mode](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#invocation-eventsourcemapping-provisioned-mode).
              $ref: '#/components/schemas/ProvisionedPollerConfig'
            MetricsConfig:
              description: The metrics configuration for your event source. For more information, see [Event source mapping metrics](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-metrics-types.html#event-source-mapping-metrics).
              $ref: '#/components/schemas/MetricsConfig'
          x-stackQL-stringOnly: true
      x-title: CreateEventSourceMappingRequest
      type: object
      required: []
    CreateFunctionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: A description of the function.
              type: string
              maxLength: 256
            TracingConfig:
              description: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
              $ref: '#/components/schemas/TracingConfig'
            VpcConfig:
              description: For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
              $ref: '#/components/schemas/VpcConfig'
            RuntimeManagementConfig:
              description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
              $ref: '#/components/schemas/RuntimeManagementConfig'
            ReservedConcurrentExecutions:
              description: The number of simultaneous executions to reserve for the function.
              type: integer
              minimum: 0
            SnapStart:
              description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
              $ref: '#/components/schemas/SnapStart'
            FileSystemConfigs:
              maxItems: 1
              description: |-
                Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function.
                 For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
              type: array
              items:
                $ref: '#/components/schemas/FileSystemConfig'
            FunctionName:
              minLength: 1
              description: |-
                The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
                 If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
              type: string
            Runtime:
              description: |-
                The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image.
                 The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see [Runtime use after deprecation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-deprecation-levels).
                 For a list of all currently supported runtimes, see [Supported runtimes](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtimes-supported).
              type: string
            KmsKeyArn:
              pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
              description: >-
                The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, LAM also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, LAM also uses this key to encrypt your function
                when it's deployed. Note that this is not the same key that's used to protect your container image in the ECRlong (ECR). If you don't provide a customer managed key, LAM uses a default service key.
              type: string
            PackageType:
              description: The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
              type: string
              enum:
                - Image
                - Zip
            CodeSigningConfigArn:
              pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
              description: To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
              type: string
            Layers:
              uniqueItems: false
              description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
              type: array
              items:
                type: string
            Tags:
              uniqueItems: true
              description: |-
                A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
                  You must have the ``lambda:TagResource``, ``lambda:UntagResource``, and ``lambda:ListTags`` permissions for your [principal](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html) to manage the CFN stack. If you don't have these permissions, there might be unexpected behavior with stack-level tags propagating to the resource during resource creation and update.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            ImageConfig:
              description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
              $ref: '#/components/schemas/ImageConfig'
            MemorySize:
              description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
              type: integer
            DeadLetterConfig:
              description: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
              $ref: '#/components/schemas/DeadLetterConfig'
            Timeout:
              description: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
              type: integer
              minimum: 1
            Handler:
              pattern: ^[^\s]+$
              description: The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
              type: string
              maxLength: 128
            SnapStartResponse:
              description: ''
              $ref: '#/components/schemas/SnapStartResponse'
            Code:
              description: |-
                The code for the function. You can define your function code in multiple ways:
                  +  For .zip deployment packages, you can specify the S3 location of the .zip file in the ``S3Bucket``, ``S3Key``, and ``S3ObjectVersion`` properties.
                  +  For .zip deployment packages, you can alternatively define the function code inline in the ``ZipFile`` property. This method works only for Node.js and Python functions.
                  +  For container images, specify the URI of your container image in the ECR registry in the ``ImageUri`` property.
              $ref: '#/components/schemas/Code'
            Role:
              pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
              description: The Amazon Resource Name (ARN) of the function's execution role.
              type: string
            LoggingConfig:
              description: The function's Amazon CloudWatch Logs configuration settings.
              $ref: '#/components/schemas/LoggingConfig'
            RecursiveLoop:
              description: |-
                The status of your function's recursive loop detection configuration.
                 When this value is set to ``Allow``and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.
                 When this value is set to ``Terminate`` and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.
              $ref: '#/components/schemas/RecursiveLoop'
            Environment:
              description: Environment variables that are accessible from function code during execution.
              $ref: '#/components/schemas/Environment'
            Arn:
              description: ''
              type: string
            EphemeralStorage:
              description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
              $ref: '#/components/schemas/EphemeralStorage'
            Architectures:
              minItems: 1
              maxItems: 1
              uniqueItems: true
              description: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
              type: array
              items:
                type: string
                enum:
                  - x86_64
                  - arm64
          x-stackQL-stringOnly: true
      x-title: CreateFunctionRequest
      type: object
      required: []
    CreateLayerVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CompatibleRuntimes:
              description: A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                type: string
            LicenseInfo:
              description: The layer's software license.
              type: string
            Description:
              description: The description of the version.
              type: string
            LayerName:
              description: The name or Amazon Resource Name (ARN) of the layer.
              type: string
            Content:
              description: The function layer archive.
              $ref: '#/components/schemas/Content'
            LayerVersionArn:
              type: string
            CompatibleArchitectures:
              description: A list of compatible instruction set architectures.
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                type: string
          x-stackQL-stringOnly: true
      x-title: CreateLayerVersionRequest
      type: object
      required: []
    CreateLayerVersionPermissionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: ID generated by service
              type: string
            Action:
              description: The API action that grants access to the layer.
              type: string
            LayerVersionArn:
              description: The name or Amazon Resource Name (ARN) of the layer.
              type: string
            OrganizationId:
              description: With the principal set to *, grant permission to all accounts in the specified organization.
              type: string
            Principal:
              description: An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if organizationId is not specified).
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateLayerVersionPermissionRequest
      type: object
      required: []
    CreatePermissionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FunctionName:
              minLength: 1
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
              description: |-
                The name or ARN of the Lambda function, version, or alias.
                  **Name formats**
                 +   *Function name* – ``my-function`` (name-only), ``my-function:v1`` (with alias).
                  +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:my-function``.
                  +   *Partial ARN* – ``123456789012:function:my-function``.
                  
                 You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
              type: string
              maxLength: 140
            Action:
              minLength: 1
              pattern: ^(lambda:[*]|lambda:[a-zA-Z]+|[*])$
              description: The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
              type: string
              maxLength: 256
            EventSourceToken:
              minLength: 1
              pattern: ^[a-zA-Z0-9._\-]+$
              description: For Alexa Smart Home functions, a token that the invoker must supply.
              type: string
              maxLength: 256
            FunctionUrlAuthType:
              description: The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
              type: string
              enum:
                - AWS_IAM
                - NONE
            SourceArn:
              minLength: 12
              pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1})?:(\d{12})?:(.*)$
              description: |-
                For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
                 Note that Lambda configures the comparison using the ``StringLike`` operator.
              type: string
              maxLength: 1024
            SourceAccount:
              minLength: 12
              pattern: ^\d{12}$
              description: For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
              type: string
              maxLength: 12
            PrincipalOrgID:
              minLength: 12
              pattern: ^o-[a-z0-9]{10,32}$
              description: The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this organization.
              type: string
              maxLength: 34
            Id:
              minLength: 1
              pattern: ^.*$
              description: ''
              type: string
              maxLength: 256
            Principal:
              minLength: 1
              pattern: ^.*$
              description: The AWS-service, AWS-account, IAM user, or IAM role that invokes the function. If you specify a service, use ``SourceArn`` or ``SourceAccount`` to limit who can invoke the function through that service.
              type: string
              maxLength: 256
          x-stackQL-stringOnly: true
      x-title: CreatePermissionRequest
      type: object
      required: []
    CreateUrlRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TargetFunctionArn:
              description: The Amazon Resource Name (ARN) of the function associated with the Function URL.
              type: string
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
            Qualifier:
              description: The alias qualifier for the target function. If TargetFunctionArn is unqualified then Qualifier must be passed.
              type: string
              minLength: 1
              maxLength: 128
              pattern: ((?!^[0-9]+$)([a-zA-Z0-9-_]+))
            AuthType:
              description: Can be either AWS_IAM if the requests are authorized via IAM, or NONE if no authorization is configured on the Function URL.
              type: string
              enum:
                - AWS_IAM
                - NONE
            InvokeMode:
              description: The invocation mode for the function's URL. Set to BUFFERED if you want to buffer responses before returning them to the client. Set to RESPONSE_STREAM if you want to stream responses, allowing faster time to first byte and larger response payload sizes. If not set, defaults to BUFFERED.
              type: string
              enum:
                - BUFFERED
                - RESPONSE_STREAM
            FunctionArn:
              description: The full Amazon Resource Name (ARN) of the function associated with the Function URL.
              type: string
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
            FunctionUrl:
              description: The generated url for this resource.
              type: string
            Cors:
              $ref: '#/components/schemas/Cors'
          x-stackQL-stringOnly: true
      x-title: CreateUrlRequest
      type: object
      required: []
    CreateVersionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FunctionArn:
              type: string
              description: The ARN of the version.
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
            Version:
              type: string
              description: The version number.
            CodeSha256:
              type: string
              description: Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. Updates are not supported for this property.
            Description:
              type: string
              description: A description for the version to override the description in the function configuration. Updates are not supported for this property.
              minLength: 0
              maxLength: 256
            FunctionName:
              type: string
              description: The name of the Lambda function.
              minLength: 1
              maxLength: 140
              pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
            ProvisionedConcurrencyConfig:
              description: Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
              $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
            RuntimePolicy:
              description: Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
              $ref: '#/components/schemas/RuntimePolicy'
          x-stackQL-stringOnly: true
      x-title: CreateVersionRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    aliases:
      name: aliases
      id: aws.lambda.aliases
      x-cfn-schema-name: Alias
      x-cfn-type-name: AWS::Lambda::Alias
      x-identifiers:
        - AliasArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Alias&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Alias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Alias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Alias"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.AliasArn') as alias_arn,
              JSON_EXTRACT(Properties, '$.ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.RoutingConfig') as routing_config,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Alias'
              AND data__Identifier = '<AliasArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.AliasArn') as alias_arn,
                JSON_EXTRACT(detail.Properties, '$.ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FunctionVersion') as function_version,
                JSON_EXTRACT(detail.Properties, '$.RoutingConfig') as routing_config,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Alias'
                AND detail.data__TypeName = 'AWS::Lambda::Alias'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'AliasArn') as alias_arn,
                  json_extract_path_text(Properties, 'ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FunctionVersion') as function_version,
                  json_extract_path_text(Properties, 'RoutingConfig') as routing_config,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Alias'
                  AND data__Identifier = '<AliasArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'AliasArn') as alias_arn,
                    json_extract_path_text(detail.Properties, 'ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FunctionVersion') as function_version,
                    json_extract_path_text(detail.Properties, 'RoutingConfig') as routing_config,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::Alias'
                    AND detail.data__TypeName = 'AWS::Lambda::Alias'
                    AND listing.region = 'us-east-1'
    aliases_list_only:
      name: aliases_list_only
      id: aws.lambda.aliases_list_only
      x-cfn-schema-name: Alias
      x-cfn-type-name: AWS::Lambda::Alias
      x-identifiers:
        - AliasArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AliasArn') as alias_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Alias'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AliasArn') as alias_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Alias'
                AND region = 'us-east-1'
    code_signing_configs:
      name: code_signing_configs
      id: aws.lambda.code_signing_configs
      x-cfn-schema-name: CodeSigningConfig
      x-cfn-type-name: AWS::Lambda::CodeSigningConfig
      x-identifiers:
        - CodeSigningConfigArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CodeSigningConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::CodeSigningConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::CodeSigningConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::CodeSigningConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/code_signing_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/code_signing_configs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/code_signing_configs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AllowedPublishers') as allowed_publishers,
              JSON_EXTRACT(Properties, '$.CodeSigningPolicies') as code_signing_policies,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigId') as code_signing_config_id,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND data__Identifier = '<CodeSigningConfigArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.AllowedPublishers') as allowed_publishers,
                JSON_EXTRACT(detail.Properties, '$.CodeSigningPolicies') as code_signing_policies,
                JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigId') as code_signing_config_id,
                JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND detail.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'AllowedPublishers') as allowed_publishers,
                  json_extract_path_text(Properties, 'CodeSigningPolicies') as code_signing_policies,
                  json_extract_path_text(Properties, 'CodeSigningConfigId') as code_signing_config_id,
                  json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                  AND data__Identifier = '<CodeSigningConfigArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'AllowedPublishers') as allowed_publishers,
                    json_extract_path_text(detail.Properties, 'CodeSigningPolicies') as code_signing_policies,
                    json_extract_path_text(detail.Properties, 'CodeSigningConfigId') as code_signing_config_id,
                    json_extract_path_text(detail.Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                    AND detail.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                    AND listing.region = 'us-east-1'
    code_signing_configs_list_only:
      name: code_signing_configs_list_only
      id: aws.lambda.code_signing_configs_list_only
      x-cfn-schema-name: CodeSigningConfig
      x-cfn-type-name: AWS::Lambda::CodeSigningConfig
      x-identifiers:
        - CodeSigningConfigArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND region = 'us-east-1'
    code_signing_config_tags:
      name: code_signing_config_tags
      id: aws.lambda.code_signing_config_tags
      x-cfn-schema-name: CodeSigningConfig
      x-cfn-type-name: AWS::Lambda::CodeSigningConfig
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.AllowedPublishers') as allowed_publishers,
              JSON_EXTRACT(detail.Properties, '$.CodeSigningPolicies') as code_signing_policies,
              JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigId') as code_signing_config_id,
              JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND detail.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'AllowedPublishers') as allowed_publishers,
                json_extract_path_text(detail.Properties, 'CodeSigningPolicies') as code_signing_policies,
                json_extract_path_text(detail.Properties, 'CodeSigningConfigId') as code_signing_config_id,
                json_extract_path_text(detail.Properties, 'CodeSigningConfigArn') as code_signing_config_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND detail.data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND listing.region = 'us-east-1'
    event_invoke_configs:
      name: event_invoke_configs
      id: aws.lambda.event_invoke_configs
      x-cfn-schema-name: EventInvokeConfig
      x-cfn-type-name: AWS::Lambda::EventInvokeConfig
      x-identifiers:
        - FunctionName
        - Qualifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventInvokeConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventInvokeConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventInvokeConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventInvokeConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_invoke_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_invoke_configs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_invoke_configs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationConfig') as destination_config,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
              AND data__Identifier = '<FunctionName>|<Qualifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DestinationConfig') as destination_config,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
                JSON_EXTRACT(detail.Properties, '$.Qualifier') as qualifier
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                AND detail.data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DestinationConfig') as destination_config,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
                  json_extract_path_text(Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                  json_extract_path_text(Properties, 'Qualifier') as qualifier
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                  AND data__Identifier = '<FunctionName>|<Qualifier>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DestinationConfig') as destination_config,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
                    json_extract_path_text(detail.Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                    json_extract_path_text(detail.Properties, 'Qualifier') as qualifier
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                    AND detail.data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                    AND listing.region = 'us-east-1'
    event_invoke_configs_list_only:
      name: event_invoke_configs_list_only
      id: aws.lambda.event_invoke_configs_list_only
      x-cfn-schema-name: EventInvokeConfig
      x-cfn-type-name: AWS::Lambda::EventInvokeConfig
      x-identifiers:
        - FunctionName
        - Qualifier
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'Qualifier') as qualifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                AND region = 'us-east-1'
    event_source_mappings:
      name: event_source_mappings
      id: aws.lambda.event_source_mappings
      x-cfn-schema-name: EventSourceMapping
      x-cfn-type-name: AWS::Lambda::EventSourceMapping
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__EventSourceMapping&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventSourceMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventSourceMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::EventSourceMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/event_source_mappings/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/event_source_mappings/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/event_source_mappings/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.BatchSize') as batch_size,
              JSON_EXTRACT(Properties, '$.BisectBatchOnFunctionError') as bisect_batch_on_function_error,
              JSON_EXTRACT(Properties, '$.DestinationConfig') as destination_config,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.EventSourceArn') as event_source_arn,
              JSON_EXTRACT(Properties, '$.EventSourceMappingArn') as event_source_mapping_arn,
              JSON_EXTRACT(Properties, '$.FilterCriteria') as filter_criteria,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.ParallelizationFactor') as parallelization_factor,
              JSON_EXTRACT(Properties, '$.StartingPosition') as starting_position,
              JSON_EXTRACT(Properties, '$.StartingPositionTimestamp') as starting_position_timestamp,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Topics') as topics,
              JSON_EXTRACT(Properties, '$.Queues') as queues,
              JSON_EXTRACT(Properties, '$.SourceAccessConfigurations') as source_access_configurations,
              JSON_EXTRACT(Properties, '$.TumblingWindowInSeconds') as tumbling_window_in_seconds,
              JSON_EXTRACT(Properties, '$.FunctionResponseTypes') as function_response_types,
              JSON_EXTRACT(Properties, '$.SelfManagedEventSource') as self_managed_event_source,
              JSON_EXTRACT(Properties, '$.AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
              JSON_EXTRACT(Properties, '$.SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
              JSON_EXTRACT(Properties, '$.ScalingConfig') as scaling_config,
              JSON_EXTRACT(Properties, '$.DocumentDBEventSourceConfig') as document_db_event_source_config,
              JSON_EXTRACT(Properties, '$.ProvisionedPollerConfig') as provisioned_poller_config,
              JSON_EXTRACT(Properties, '$.MetricsConfig') as metrics_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.BatchSize') as batch_size,
                JSON_EXTRACT(detail.Properties, '$.BisectBatchOnFunctionError') as bisect_batch_on_function_error,
                JSON_EXTRACT(detail.Properties, '$.DestinationConfig') as destination_config,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.EventSourceArn') as event_source_arn,
                JSON_EXTRACT(detail.Properties, '$.EventSourceMappingArn') as event_source_mapping_arn,
                JSON_EXTRACT(detail.Properties, '$.FilterCriteria') as filter_criteria,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
                JSON_EXTRACT(detail.Properties, '$.ParallelizationFactor') as parallelization_factor,
                JSON_EXTRACT(detail.Properties, '$.StartingPosition') as starting_position,
                JSON_EXTRACT(detail.Properties, '$.StartingPositionTimestamp') as starting_position_timestamp,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Topics') as topics,
                JSON_EXTRACT(detail.Properties, '$.Queues') as queues,
                JSON_EXTRACT(detail.Properties, '$.SourceAccessConfigurations') as source_access_configurations,
                JSON_EXTRACT(detail.Properties, '$.TumblingWindowInSeconds') as tumbling_window_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.FunctionResponseTypes') as function_response_types,
                JSON_EXTRACT(detail.Properties, '$.SelfManagedEventSource') as self_managed_event_source,
                JSON_EXTRACT(detail.Properties, '$.AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
                JSON_EXTRACT(detail.Properties, '$.SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
                JSON_EXTRACT(detail.Properties, '$.ScalingConfig') as scaling_config,
                JSON_EXTRACT(detail.Properties, '$.DocumentDBEventSourceConfig') as document_db_event_source_config,
                JSON_EXTRACT(detail.Properties, '$.ProvisionedPollerConfig') as provisioned_poller_config,
                JSON_EXTRACT(detail.Properties, '$.MetricsConfig') as metrics_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND detail.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'BatchSize') as batch_size,
                  json_extract_path_text(Properties, 'BisectBatchOnFunctionError') as bisect_batch_on_function_error,
                  json_extract_path_text(Properties, 'DestinationConfig') as destination_config,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'EventSourceArn') as event_source_arn,
                  json_extract_path_text(Properties, 'EventSourceMappingArn') as event_source_mapping_arn,
                  json_extract_path_text(Properties, 'FilterCriteria') as filter_criteria,
                  json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
                  json_extract_path_text(Properties, 'MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
                  json_extract_path_text(Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                  json_extract_path_text(Properties, 'ParallelizationFactor') as parallelization_factor,
                  json_extract_path_text(Properties, 'StartingPosition') as starting_position,
                  json_extract_path_text(Properties, 'StartingPositionTimestamp') as starting_position_timestamp,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Topics') as topics,
                  json_extract_path_text(Properties, 'Queues') as queues,
                  json_extract_path_text(Properties, 'SourceAccessConfigurations') as source_access_configurations,
                  json_extract_path_text(Properties, 'TumblingWindowInSeconds') as tumbling_window_in_seconds,
                  json_extract_path_text(Properties, 'FunctionResponseTypes') as function_response_types,
                  json_extract_path_text(Properties, 'SelfManagedEventSource') as self_managed_event_source,
                  json_extract_path_text(Properties, 'AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
                  json_extract_path_text(Properties, 'SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
                  json_extract_path_text(Properties, 'ScalingConfig') as scaling_config,
                  json_extract_path_text(Properties, 'DocumentDBEventSourceConfig') as document_db_event_source_config,
                  json_extract_path_text(Properties, 'ProvisionedPollerConfig') as provisioned_poller_config,
                  json_extract_path_text(Properties, 'MetricsConfig') as metrics_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'BatchSize') as batch_size,
                    json_extract_path_text(detail.Properties, 'BisectBatchOnFunctionError') as bisect_batch_on_function_error,
                    json_extract_path_text(detail.Properties, 'DestinationConfig') as destination_config,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'EventSourceArn') as event_source_arn,
                    json_extract_path_text(detail.Properties, 'EventSourceMappingArn') as event_source_mapping_arn,
                    json_extract_path_text(detail.Properties, 'FilterCriteria') as filter_criteria,
                    json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
                    json_extract_path_text(detail.Properties, 'MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
                    json_extract_path_text(detail.Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                    json_extract_path_text(detail.Properties, 'ParallelizationFactor') as parallelization_factor,
                    json_extract_path_text(detail.Properties, 'StartingPosition') as starting_position,
                    json_extract_path_text(detail.Properties, 'StartingPositionTimestamp') as starting_position_timestamp,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Topics') as topics,
                    json_extract_path_text(detail.Properties, 'Queues') as queues,
                    json_extract_path_text(detail.Properties, 'SourceAccessConfigurations') as source_access_configurations,
                    json_extract_path_text(detail.Properties, 'TumblingWindowInSeconds') as tumbling_window_in_seconds,
                    json_extract_path_text(detail.Properties, 'FunctionResponseTypes') as function_response_types,
                    json_extract_path_text(detail.Properties, 'SelfManagedEventSource') as self_managed_event_source,
                    json_extract_path_text(detail.Properties, 'AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
                    json_extract_path_text(detail.Properties, 'SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
                    json_extract_path_text(detail.Properties, 'ScalingConfig') as scaling_config,
                    json_extract_path_text(detail.Properties, 'DocumentDBEventSourceConfig') as document_db_event_source_config,
                    json_extract_path_text(detail.Properties, 'ProvisionedPollerConfig') as provisioned_poller_config,
                    json_extract_path_text(detail.Properties, 'MetricsConfig') as metrics_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                    AND detail.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                    AND listing.region = 'us-east-1'
    event_source_mappings_list_only:
      name: event_source_mappings_list_only
      id: aws.lambda.event_source_mappings_list_only
      x-cfn-schema-name: EventSourceMapping
      x-cfn-type-name: AWS::Lambda::EventSourceMapping
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND region = 'us-east-1'
    event_source_mapping_tags:
      name: event_source_mapping_tags
      id: aws.lambda.event_source_mapping_tags
      x-cfn-schema-name: EventSourceMapping
      x-cfn-type-name: AWS::Lambda::EventSourceMapping
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.BatchSize') as batch_size,
              JSON_EXTRACT(detail.Properties, '$.BisectBatchOnFunctionError') as bisect_batch_on_function_error,
              JSON_EXTRACT(detail.Properties, '$.DestinationConfig') as destination_config,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.EventSourceArn') as event_source_arn,
              JSON_EXTRACT(detail.Properties, '$.EventSourceMappingArn') as event_source_mapping_arn,
              JSON_EXTRACT(detail.Properties, '$.FilterCriteria') as filter_criteria,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(detail.Properties, '$.MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
              JSON_EXTRACT(detail.Properties, '$.MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
              JSON_EXTRACT(detail.Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(detail.Properties, '$.ParallelizationFactor') as parallelization_factor,
              JSON_EXTRACT(detail.Properties, '$.StartingPosition') as starting_position,
              JSON_EXTRACT(detail.Properties, '$.StartingPositionTimestamp') as starting_position_timestamp,
              JSON_EXTRACT(detail.Properties, '$.Topics') as topics,
              JSON_EXTRACT(detail.Properties, '$.Queues') as queues,
              JSON_EXTRACT(detail.Properties, '$.SourceAccessConfigurations') as source_access_configurations,
              JSON_EXTRACT(detail.Properties, '$.TumblingWindowInSeconds') as tumbling_window_in_seconds,
              JSON_EXTRACT(detail.Properties, '$.FunctionResponseTypes') as function_response_types,
              JSON_EXTRACT(detail.Properties, '$.SelfManagedEventSource') as self_managed_event_source,
              JSON_EXTRACT(detail.Properties, '$.AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
              JSON_EXTRACT(detail.Properties, '$.SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
              JSON_EXTRACT(detail.Properties, '$.ScalingConfig') as scaling_config,
              JSON_EXTRACT(detail.Properties, '$.DocumentDBEventSourceConfig') as document_db_event_source_config,
              JSON_EXTRACT(detail.Properties, '$.ProvisionedPollerConfig') as provisioned_poller_config,
              JSON_EXTRACT(detail.Properties, '$.MetricsConfig') as metrics_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND detail.data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'BatchSize') as batch_size,
                json_extract_path_text(detail.Properties, 'BisectBatchOnFunctionError') as bisect_batch_on_function_error,
                json_extract_path_text(detail.Properties, 'DestinationConfig') as destination_config,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'EventSourceArn') as event_source_arn,
                json_extract_path_text(detail.Properties, 'EventSourceMappingArn') as event_source_mapping_arn,
                json_extract_path_text(detail.Properties, 'FilterCriteria') as filter_criteria,
                json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                json_extract_path_text(detail.Properties, 'MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
                json_extract_path_text(detail.Properties, 'MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
                json_extract_path_text(detail.Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                json_extract_path_text(detail.Properties, 'ParallelizationFactor') as parallelization_factor,
                json_extract_path_text(detail.Properties, 'StartingPosition') as starting_position,
                json_extract_path_text(detail.Properties, 'StartingPositionTimestamp') as starting_position_timestamp,
                json_extract_path_text(detail.Properties, 'Topics') as topics,
                json_extract_path_text(detail.Properties, 'Queues') as queues,
                json_extract_path_text(detail.Properties, 'SourceAccessConfigurations') as source_access_configurations,
                json_extract_path_text(detail.Properties, 'TumblingWindowInSeconds') as tumbling_window_in_seconds,
                json_extract_path_text(detail.Properties, 'FunctionResponseTypes') as function_response_types,
                json_extract_path_text(detail.Properties, 'SelfManagedEventSource') as self_managed_event_source,
                json_extract_path_text(detail.Properties, 'AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
                json_extract_path_text(detail.Properties, 'SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
                json_extract_path_text(detail.Properties, 'ScalingConfig') as scaling_config,
                json_extract_path_text(detail.Properties, 'DocumentDBEventSourceConfig') as document_db_event_source_config,
                json_extract_path_text(detail.Properties, 'ProvisionedPollerConfig') as provisioned_poller_config,
                json_extract_path_text(detail.Properties, 'MetricsConfig') as metrics_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND detail.data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND listing.region = 'us-east-1'
    functions:
      name: functions
      id: aws.lambda.functions
      x-cfn-schema-name: Function
      x-cfn-type-name: AWS::Lambda::Function
      x-identifiers:
        - FunctionName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Function&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Function"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Function"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Function"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/functions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/functions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/functions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TracingConfig') as tracing_config,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.RuntimeManagementConfig') as runtime_management_config,
              JSON_EXTRACT(Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
              JSON_EXTRACT(Properties, '$.SnapStart') as snap_start,
              JSON_EXTRACT(Properties, '$.FileSystemConfigs') as file_system_configs,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.PackageType') as package_type,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(Properties, '$.Layers') as layers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ImageConfig') as image_config,
              JSON_EXTRACT(Properties, '$.MemorySize') as memory_size,
              JSON_EXTRACT(Properties, '$.DeadLetterConfig') as dead_letter_config,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.Handler') as handler,
              JSON_EXTRACT(Properties, '$.SnapStartResponse') as snap_start_response,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.LoggingConfig') as logging_config,
              JSON_EXTRACT(Properties, '$.RecursiveLoop') as recursive_loop,
              JSON_EXTRACT(Properties, '$.Environment') as environment,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(Properties, '$.Architectures') as architectures
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Function'
              AND data__Identifier = '<FunctionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.TracingConfig') as tracing_config,
                JSON_EXTRACT(detail.Properties, '$.VpcConfig') as vpc_config,
                JSON_EXTRACT(detail.Properties, '$.RuntimeManagementConfig') as runtime_management_config,
                JSON_EXTRACT(detail.Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
                JSON_EXTRACT(detail.Properties, '$.SnapStart') as snap_start,
                JSON_EXTRACT(detail.Properties, '$.FileSystemConfigs') as file_system_configs,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.Runtime') as runtime,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
                JSON_EXTRACT(detail.Properties, '$.PackageType') as package_type,
                JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
                JSON_EXTRACT(detail.Properties, '$.Layers') as layers,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.ImageConfig') as image_config,
                JSON_EXTRACT(detail.Properties, '$.MemorySize') as memory_size,
                JSON_EXTRACT(detail.Properties, '$.DeadLetterConfig') as dead_letter_config,
                JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
                JSON_EXTRACT(detail.Properties, '$.Handler') as handler,
                JSON_EXTRACT(detail.Properties, '$.SnapStartResponse') as snap_start_response,
                JSON_EXTRACT(detail.Properties, '$.Code') as code,
                JSON_EXTRACT(detail.Properties, '$.Role') as role,
                JSON_EXTRACT(detail.Properties, '$.LoggingConfig') as logging_config,
                JSON_EXTRACT(detail.Properties, '$.RecursiveLoop') as recursive_loop,
                JSON_EXTRACT(detail.Properties, '$.Environment') as environment,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.EphemeralStorage') as ephemeral_storage,
                JSON_EXTRACT(detail.Properties, '$.Architectures') as architectures
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Function'
                AND detail.data__TypeName = 'AWS::Lambda::Function'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'TracingConfig') as tracing_config,
                  json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                  json_extract_path_text(Properties, 'RuntimeManagementConfig') as runtime_management_config,
                  json_extract_path_text(Properties, 'ReservedConcurrentExecutions') as reserved_concurrent_executions,
                  json_extract_path_text(Properties, 'SnapStart') as snap_start,
                  json_extract_path_text(Properties, 'FileSystemConfigs') as file_system_configs,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'Runtime') as runtime,
                  json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                  json_extract_path_text(Properties, 'PackageType') as package_type,
                  json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                  json_extract_path_text(Properties, 'Layers') as layers,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'ImageConfig') as image_config,
                  json_extract_path_text(Properties, 'MemorySize') as memory_size,
                  json_extract_path_text(Properties, 'DeadLetterConfig') as dead_letter_config,
                  json_extract_path_text(Properties, 'Timeout') as timeout,
                  json_extract_path_text(Properties, 'Handler') as handler,
                  json_extract_path_text(Properties, 'SnapStartResponse') as snap_start_response,
                  json_extract_path_text(Properties, 'Code') as code,
                  json_extract_path_text(Properties, 'Role') as role,
                  json_extract_path_text(Properties, 'LoggingConfig') as logging_config,
                  json_extract_path_text(Properties, 'RecursiveLoop') as recursive_loop,
                  json_extract_path_text(Properties, 'Environment') as environment,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'EphemeralStorage') as ephemeral_storage,
                  json_extract_path_text(Properties, 'Architectures') as architectures
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Function'
                  AND data__Identifier = '<FunctionName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'TracingConfig') as tracing_config,
                    json_extract_path_text(detail.Properties, 'VpcConfig') as vpc_config,
                    json_extract_path_text(detail.Properties, 'RuntimeManagementConfig') as runtime_management_config,
                    json_extract_path_text(detail.Properties, 'ReservedConcurrentExecutions') as reserved_concurrent_executions,
                    json_extract_path_text(detail.Properties, 'SnapStart') as snap_start,
                    json_extract_path_text(detail.Properties, 'FileSystemConfigs') as file_system_configs,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'Runtime') as runtime,
                    json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                    json_extract_path_text(detail.Properties, 'PackageType') as package_type,
                    json_extract_path_text(detail.Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                    json_extract_path_text(detail.Properties, 'Layers') as layers,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'ImageConfig') as image_config,
                    json_extract_path_text(detail.Properties, 'MemorySize') as memory_size,
                    json_extract_path_text(detail.Properties, 'DeadLetterConfig') as dead_letter_config,
                    json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                    json_extract_path_text(detail.Properties, 'Handler') as handler,
                    json_extract_path_text(detail.Properties, 'SnapStartResponse') as snap_start_response,
                    json_extract_path_text(detail.Properties, 'Code') as code,
                    json_extract_path_text(detail.Properties, 'Role') as role,
                    json_extract_path_text(detail.Properties, 'LoggingConfig') as logging_config,
                    json_extract_path_text(detail.Properties, 'RecursiveLoop') as recursive_loop,
                    json_extract_path_text(detail.Properties, 'Environment') as environment,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'EphemeralStorage') as ephemeral_storage,
                    json_extract_path_text(detail.Properties, 'Architectures') as architectures
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::Function'
                    AND detail.data__TypeName = 'AWS::Lambda::Function'
                    AND listing.region = 'us-east-1'
    functions_list_only:
      name: functions_list_only
      id: aws.lambda.functions_list_only
      x-cfn-schema-name: Function
      x-cfn-type-name: AWS::Lambda::Function
      x-identifiers:
        - FunctionName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
                AND region = 'us-east-1'
    function_tags:
      name: function_tags
      id: aws.lambda.function_tags
      x-cfn-schema-name: Function
      x-cfn-type-name: AWS::Lambda::Function
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TracingConfig') as tracing_config,
              JSON_EXTRACT(detail.Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(detail.Properties, '$.RuntimeManagementConfig') as runtime_management_config,
              JSON_EXTRACT(detail.Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
              JSON_EXTRACT(detail.Properties, '$.SnapStart') as snap_start,
              JSON_EXTRACT(detail.Properties, '$.FileSystemConfigs') as file_system_configs,
              JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(detail.Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(detail.Properties, '$.PackageType') as package_type,
              JSON_EXTRACT(detail.Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(detail.Properties, '$.Layers') as layers,
              JSON_EXTRACT(detail.Properties, '$.ImageConfig') as image_config,
              JSON_EXTRACT(detail.Properties, '$.MemorySize') as memory_size,
              JSON_EXTRACT(detail.Properties, '$.DeadLetterConfig') as dead_letter_config,
              JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(detail.Properties, '$.Handler') as handler,
              JSON_EXTRACT(detail.Properties, '$.SnapStartResponse') as snap_start_response,
              JSON_EXTRACT(detail.Properties, '$.Code') as code,
              JSON_EXTRACT(detail.Properties, '$.Role') as role,
              JSON_EXTRACT(detail.Properties, '$.LoggingConfig') as logging_config,
              JSON_EXTRACT(detail.Properties, '$.RecursiveLoop') as recursive_loop,
              JSON_EXTRACT(detail.Properties, '$.Environment') as environment,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(detail.Properties, '$.Architectures') as architectures
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Lambda::Function'
              AND detail.data__TypeName = 'AWS::Lambda::Function'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TracingConfig') as tracing_config,
                json_extract_path_text(detail.Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(detail.Properties, 'RuntimeManagementConfig') as runtime_management_config,
                json_extract_path_text(detail.Properties, 'ReservedConcurrentExecutions') as reserved_concurrent_executions,
                json_extract_path_text(detail.Properties, 'SnapStart') as snap_start,
                json_extract_path_text(detail.Properties, 'FileSystemConfigs') as file_system_configs,
                json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                json_extract_path_text(detail.Properties, 'Runtime') as runtime,
                json_extract_path_text(detail.Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(detail.Properties, 'PackageType') as package_type,
                json_extract_path_text(detail.Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                json_extract_path_text(detail.Properties, 'Layers') as layers,
                json_extract_path_text(detail.Properties, 'ImageConfig') as image_config,
                json_extract_path_text(detail.Properties, 'MemorySize') as memory_size,
                json_extract_path_text(detail.Properties, 'DeadLetterConfig') as dead_letter_config,
                json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                json_extract_path_text(detail.Properties, 'Handler') as handler,
                json_extract_path_text(detail.Properties, 'SnapStartResponse') as snap_start_response,
                json_extract_path_text(detail.Properties, 'Code') as code,
                json_extract_path_text(detail.Properties, 'Role') as role,
                json_extract_path_text(detail.Properties, 'LoggingConfig') as logging_config,
                json_extract_path_text(detail.Properties, 'RecursiveLoop') as recursive_loop,
                json_extract_path_text(detail.Properties, 'Environment') as environment,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'EphemeralStorage') as ephemeral_storage,
                json_extract_path_text(detail.Properties, 'Architectures') as architectures
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Lambda::Function'
                AND detail.data__TypeName = 'AWS::Lambda::Function'
                AND listing.region = 'us-east-1'
    layer_versions:
      name: layer_versions
      id: aws.lambda.layer_versions
      x-cfn-schema-name: LayerVersion
      x-cfn-type-name: AWS::Lambda::LayerVersion
      x-identifiers:
        - LayerVersionArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LayerVersion&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::LayerVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::LayerVersion"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/layer_versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/layer_versions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CompatibleRuntimes') as compatible_runtimes,
              JSON_EXTRACT(Properties, '$.LicenseInfo') as license_info,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LayerName') as layer_name,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn,
              JSON_EXTRACT(Properties, '$.CompatibleArchitectures') as compatible_architectures
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
              AND data__Identifier = '<LayerVersionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CompatibleRuntimes') as compatible_runtimes,
                JSON_EXTRACT(detail.Properties, '$.LicenseInfo') as license_info,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.LayerName') as layer_name,
                JSON_EXTRACT(detail.Properties, '$.Content') as content,
                JSON_EXTRACT(detail.Properties, '$.LayerVersionArn') as layer_version_arn,
                JSON_EXTRACT(detail.Properties, '$.CompatibleArchitectures') as compatible_architectures
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::LayerVersion'
                AND detail.data__TypeName = 'AWS::Lambda::LayerVersion'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CompatibleRuntimes') as compatible_runtimes,
                  json_extract_path_text(Properties, 'LicenseInfo') as license_info,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'LayerName') as layer_name,
                  json_extract_path_text(Properties, 'Content') as content,
                  json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn,
                  json_extract_path_text(Properties, 'CompatibleArchitectures') as compatible_architectures
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
                  AND data__Identifier = '<LayerVersionArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CompatibleRuntimes') as compatible_runtimes,
                    json_extract_path_text(detail.Properties, 'LicenseInfo') as license_info,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'LayerName') as layer_name,
                    json_extract_path_text(detail.Properties, 'Content') as content,
                    json_extract_path_text(detail.Properties, 'LayerVersionArn') as layer_version_arn,
                    json_extract_path_text(detail.Properties, 'CompatibleArchitectures') as compatible_architectures
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::LayerVersion'
                    AND detail.data__TypeName = 'AWS::Lambda::LayerVersion'
                    AND listing.region = 'us-east-1'
    layer_versions_list_only:
      name: layer_versions_list_only
      id: aws.lambda.layer_versions_list_only
      x-cfn-schema-name: LayerVersion
      x-cfn-type-name: AWS::Lambda::LayerVersion
      x-identifiers:
        - LayerVersionArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
                AND region = 'us-east-1'
    layer_version_permissions:
      name: layer_version_permissions
      id: aws.lambda.layer_version_permissions
      x-cfn-schema-name: LayerVersionPermission
      x-cfn-type-name: AWS::Lambda::LayerVersionPermission
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LayerVersionPermission&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::LayerVersionPermission"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::LayerVersionPermission"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/layer_version_permissions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/layer_version_permissions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn,
              JSON_EXTRACT(Properties, '$.OrganizationId') as organization_id,
              JSON_EXTRACT(Properties, '$.Principal') as principal
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Action') as action,
                JSON_EXTRACT(detail.Properties, '$.LayerVersionArn') as layer_version_arn,
                JSON_EXTRACT(detail.Properties, '$.OrganizationId') as organization_id,
                JSON_EXTRACT(detail.Properties, '$.Principal') as principal
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                AND detail.data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Action') as action,
                  json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn,
                  json_extract_path_text(Properties, 'OrganizationId') as organization_id,
                  json_extract_path_text(Properties, 'Principal') as principal
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Action') as action,
                    json_extract_path_text(detail.Properties, 'LayerVersionArn') as layer_version_arn,
                    json_extract_path_text(detail.Properties, 'OrganizationId') as organization_id,
                    json_extract_path_text(detail.Properties, 'Principal') as principal
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                    AND detail.data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                    AND listing.region = 'us-east-1'
    layer_version_permissions_list_only:
      name: layer_version_permissions_list_only
      id: aws.lambda.layer_version_permissions_list_only
      x-cfn-schema-name: LayerVersionPermission
      x-cfn-type-name: AWS::Lambda::LayerVersionPermission
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                AND region = 'us-east-1'
    permissions:
      name: permissions
      id: aws.lambda.permissions
      x-cfn-schema-name: Permission
      x-cfn-type-name: AWS::Lambda::Permission
      x-identifiers:
        - FunctionName
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Permission&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Permission"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Permission"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/permissions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/permissions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.EventSourceToken') as event_source_token,
              JSON_EXTRACT(Properties, '$.FunctionUrlAuthType') as function_url_auth_type,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.SourceAccount') as source_account,
              JSON_EXTRACT(Properties, '$.PrincipalOrgID') as principal_org_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Principal') as principal
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Permission'
              AND data__Identifier = '<FunctionName>|<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.Action') as action,
                JSON_EXTRACT(detail.Properties, '$.EventSourceToken') as event_source_token,
                JSON_EXTRACT(detail.Properties, '$.FunctionUrlAuthType') as function_url_auth_type,
                JSON_EXTRACT(detail.Properties, '$.SourceArn') as source_arn,
                JSON_EXTRACT(detail.Properties, '$.SourceAccount') as source_account,
                JSON_EXTRACT(detail.Properties, '$.PrincipalOrgID') as principal_org_id,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Principal') as principal
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Permission'
                AND detail.data__TypeName = 'AWS::Lambda::Permission'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'Action') as action,
                  json_extract_path_text(Properties, 'EventSourceToken') as event_source_token,
                  json_extract_path_text(Properties, 'FunctionUrlAuthType') as function_url_auth_type,
                  json_extract_path_text(Properties, 'SourceArn') as source_arn,
                  json_extract_path_text(Properties, 'SourceAccount') as source_account,
                  json_extract_path_text(Properties, 'PrincipalOrgID') as principal_org_id,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Principal') as principal
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Permission'
                  AND data__Identifier = '<FunctionName>|<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'Action') as action,
                    json_extract_path_text(detail.Properties, 'EventSourceToken') as event_source_token,
                    json_extract_path_text(detail.Properties, 'FunctionUrlAuthType') as function_url_auth_type,
                    json_extract_path_text(detail.Properties, 'SourceArn') as source_arn,
                    json_extract_path_text(detail.Properties, 'SourceAccount') as source_account,
                    json_extract_path_text(detail.Properties, 'PrincipalOrgID') as principal_org_id,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Principal') as principal
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::Permission'
                    AND detail.data__TypeName = 'AWS::Lambda::Permission'
                    AND listing.region = 'us-east-1'
    permissions_list_only:
      name: permissions_list_only
      id: aws.lambda.permissions_list_only
      x-cfn-schema-name: Permission
      x-cfn-type-name: AWS::Lambda::Permission
      x-identifiers:
        - FunctionName
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Permission'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Permission'
                AND region = 'us-east-1'
    urls:
      name: urls
      id: aws.lambda.urls
      x-cfn-schema-name: Url
      x-cfn-type-name: AWS::Lambda::Url
      x-identifiers:
        - FunctionArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Url&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Url"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Url"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Url"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/urls/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/urls/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/urls/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TargetFunctionArn') as target_function_arn,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.InvokeMode') as invoke_mode,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.FunctionUrl') as function_url,
              JSON_EXTRACT(Properties, '$.Cors') as cors
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Url'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TargetFunctionArn') as target_function_arn,
                JSON_EXTRACT(detail.Properties, '$.Qualifier') as qualifier,
                JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
                JSON_EXTRACT(detail.Properties, '$.InvokeMode') as invoke_mode,
                JSON_EXTRACT(detail.Properties, '$.FunctionArn') as function_arn,
                JSON_EXTRACT(detail.Properties, '$.FunctionUrl') as function_url,
                JSON_EXTRACT(detail.Properties, '$.Cors') as cors
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Url'
                AND detail.data__TypeName = 'AWS::Lambda::Url'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TargetFunctionArn') as target_function_arn,
                  json_extract_path_text(Properties, 'Qualifier') as qualifier,
                  json_extract_path_text(Properties, 'AuthType') as auth_type,
                  json_extract_path_text(Properties, 'InvokeMode') as invoke_mode,
                  json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                  json_extract_path_text(Properties, 'FunctionUrl') as function_url,
                  json_extract_path_text(Properties, 'Cors') as cors
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Url'
                  AND data__Identifier = '<FunctionArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TargetFunctionArn') as target_function_arn,
                    json_extract_path_text(detail.Properties, 'Qualifier') as qualifier,
                    json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                    json_extract_path_text(detail.Properties, 'InvokeMode') as invoke_mode,
                    json_extract_path_text(detail.Properties, 'FunctionArn') as function_arn,
                    json_extract_path_text(detail.Properties, 'FunctionUrl') as function_url,
                    json_extract_path_text(detail.Properties, 'Cors') as cors
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::Url'
                    AND detail.data__TypeName = 'AWS::Lambda::Url'
                    AND listing.region = 'us-east-1'
    urls_list_only:
      name: urls_list_only
      id: aws.lambda.urls_list_only
      x-cfn-schema-name: Url
      x-cfn-type-name: AWS::Lambda::Url
      x-identifiers:
        - FunctionArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Url'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Url'
                AND region = 'us-east-1'
    versions:
      name: versions
      id: aws.lambda.versions
      x-cfn-schema-name: Version
      x-cfn-type-name: AWS::Lambda::Version
      x-identifiers:
        - FunctionArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Version&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Version"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Lambda::Version"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/versions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.CodeSha256') as code_sha256,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
              JSON_EXTRACT(Properties, '$.RuntimePolicy') as runtime_policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Version'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FunctionArn') as function_arn,
                JSON_EXTRACT(detail.Properties, '$.Version') as version,
                JSON_EXTRACT(detail.Properties, '$.CodeSha256') as code_sha256,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.FunctionName') as function_name,
                JSON_EXTRACT(detail.Properties, '$.ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                JSON_EXTRACT(detail.Properties, '$.RuntimePolicy') as runtime_policy
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Lambda::Version'
                AND detail.data__TypeName = 'AWS::Lambda::Version'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                  json_extract_path_text(Properties, 'Version') as version,
                  json_extract_path_text(Properties, 'CodeSha256') as code_sha256,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'FunctionName') as function_name,
                  json_extract_path_text(Properties, 'ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                  json_extract_path_text(Properties, 'RuntimePolicy') as runtime_policy
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Version'
                  AND data__Identifier = '<FunctionArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FunctionArn') as function_arn,
                    json_extract_path_text(detail.Properties, 'Version') as version,
                    json_extract_path_text(detail.Properties, 'CodeSha256') as code_sha256,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'FunctionName') as function_name,
                    json_extract_path_text(detail.Properties, 'ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                    json_extract_path_text(detail.Properties, 'RuntimePolicy') as runtime_policy
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Lambda::Version'
                    AND detail.data__TypeName = 'AWS::Lambda::Version'
                    AND listing.region = 'us-east-1'
    versions_list_only:
      name: versions_list_only
      id: aws.lambda.versions_list_only
      x-cfn-schema-name: Version
      x-cfn-type-name: AWS::Lambda::Version
      x-identifiers:
        - FunctionArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Version'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Version'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Alias&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAlias
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAliasRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CodeSigningConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCodeSigningConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCodeSigningConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventInvokeConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventInvokeConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventInvokeConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__EventSourceMapping&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateEventSourceMapping
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateEventSourceMappingRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Function&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateFunction
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateFunctionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LayerVersion&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLayerVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLayerVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LayerVersionPermission&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLayerVersionPermission
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLayerVersionPermissionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Permission&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePermission
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePermissionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Url&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateUrl
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateUrlRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Version&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVersion
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVersionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
