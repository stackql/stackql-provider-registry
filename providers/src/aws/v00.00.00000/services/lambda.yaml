openapi: 3.0.0
info:
  title: Lambda
  version: 1.0.0
paths: {}
components:
  schemas:
    ProvisionedConcurrencyConfiguration:
      type: object
      additionalProperties: false
      properties:
        ProvisionedConcurrentExecutions:
          type: integer
      required:
        - ProvisionedConcurrentExecutions
    VersionWeight:
      type: object
      additionalProperties: false
      properties:
        FunctionWeight:
          type: number
        FunctionVersion:
          type: string
      required:
        - FunctionVersion
        - FunctionWeight
    AliasRoutingConfiguration:
      type: object
      additionalProperties: false
      properties:
        AdditionalVersionWeights:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/VersionWeight'
      required:
        - AdditionalVersionWeights
    Alias:
      type: object
      properties:
        FunctionName:
          type: string
        ProvisionedConcurrencyConfig:
          $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
        Description:
          type: string
        FunctionVersion:
          type: string
        Id:
          type: string
        RoutingConfig:
          $ref: '#/components/schemas/AliasRoutingConfiguration'
        Name:
          type: string
      required:
        - FunctionName
        - FunctionVersion
        - Name
      x-stackql-resource-name: alias
      x-stackql-primaryIdentifier:
        - Id
    AllowedPublishers:
      type: object
      description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
      additionalProperties: false
      properties:
        SigningProfileVersionArns:
          type: array
          description: List of Signing profile version Arns
          minItems: 1
          maxItems: 20
          items:
            type: string
            pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
            minLength: 12
            maxLength: 1024
      required:
        - SigningProfileVersionArns
    CodeSigningPolicies:
      type: object
      description: Policies to control how to act if a signature is invalid
      additionalProperties: false
      properties:
        UntrustedArtifactOnDeployment:
          type: string
          description: Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
          default: Warn
          enum:
            - Warn
            - Enforce
      required:
        - UntrustedArtifactOnDeployment
    CodeSigningConfig:
      type: object
      properties:
        Description:
          description: A description of the CodeSigningConfig
          type: string
          minLength: 0
          maxLength: 256
        AllowedPublishers:
          description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
          $ref: '#/components/schemas/AllowedPublishers'
        CodeSigningPolicies:
          description: Policies to control how to act if a signature is invalid
          $ref: '#/components/schemas/CodeSigningPolicies'
        CodeSigningConfigId:
          description: A unique identifier for CodeSigningConfig resource
          type: string
          pattern: csc-[a-zA-Z0-9-_\.]{17}
        CodeSigningConfigArn:
          description: A unique Arn for CodeSigningConfig resource
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
      required:
        - AllowedPublishers
      x-stackql-resource-name: code_signing_config
      x-stackql-primaryIdentifier:
        - CodeSigningConfigArn
    DestinationConfig:
      type: object
      additionalProperties: false
      description: (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
      properties:
        OnFailure:
          description: The destination configuration for failed invocations.
          $ref: '#/components/schemas/OnFailure'
    OnSuccess:
      type: object
      additionalProperties: false
      properties:
        Destination:
          type: string
      required:
        - Destination
    OnFailure:
      type: object
      description: A destination for events that failed processing.
      additionalProperties: false
      properties:
        Destination:
          description: The Amazon Resource Name (ARN) of the destination resource.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
    EventInvokeConfig:
      type: object
      properties:
        FunctionName:
          type: string
        MaximumRetryAttempts:
          type: integer
        Qualifier:
          type: string
        DestinationConfig:
          $ref: '#/components/schemas/DestinationConfig'
        Id:
          type: string
        MaximumEventAgeInSeconds:
          type: integer
      required:
        - FunctionName
        - Qualifier
      x-stackql-resource-name: event_invoke_config
      x-stackql-primaryIdentifier:
        - Id
    FilterCriteria:
      type: object
      description: The filter criteria to control event filtering.
      additionalProperties: false
      properties:
        Filters:
          description: List of filters of this FilterCriteria
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Filter'
          minItems: 1
          maxItems: 20
    Filter:
      type: object
      description: The filter object that defines parameters for ESM filtering.
      additionalProperties: false
      properties:
        Pattern:
          type: string
          description: The filter pattern that defines which events should be passed for invocations.
          pattern: .*
          minLength: 0
          maxLength: 4096
    SourceAccessConfiguration:
      type: object
      additionalProperties: false
      description: The configuration used by AWS Lambda to access event source
      properties:
        Type:
          description: The type of source access configuration.
          enum:
            - BASIC_AUTH
            - VPC_SUBNET
            - VPC_SECURITY_GROUP
            - SASL_SCRAM_512_AUTH
            - SASL_SCRAM_256_AUTH
            - VIRTUAL_HOST
            - CLIENT_CERTIFICATE_TLS_AUTH
            - SERVER_ROOT_CA_CERTIFICATE
          type: string
        URI:
          description: The URI for the source access configuration resource.
          type: string
          pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
          minLength: 1
          maxLength: 200
    SelfManagedEventSource:
      type: object
      additionalProperties: false
      description: The configuration used by AWS Lambda to access a self-managed event source.
      properties:
        Endpoints:
          description: The endpoints for a self-managed event source.
          $ref: '#/components/schemas/Endpoints'
    Endpoints:
      type: object
      additionalProperties: false
      description: The endpoints used by AWS Lambda to access a self-managed event source.
      properties:
        KafkaBootstrapServers:
          type: array
          description: A list of Kafka server endpoints.
          uniqueItems: true
          items:
            type: string
            description: The URL of a Kafka server.
            pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}
            minLength: 1
            maxLength: 300
          minItems: 1
          maxItems: 10
    ConsumerGroupId:
      description: The identifier for the Kafka Consumer Group to join.
      type: string
      pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
      minLength: 1
      maxLength: 200
    AmazonManagedKafkaEventSourceConfig:
      description: Specific configuration settings for an MSK event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka Consumer Group to join.
          $ref: '#/components/schemas/ConsumerGroupId'
    SelfManagedKafkaEventSourceConfig:
      description: Specific configuration settings for a Self-Managed Apache Kafka event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka Consumer Group to join.
          $ref: '#/components/schemas/ConsumerGroupId'
    MaximumConcurrency:
      description: The maximum number of concurrent functions that an event source can invoke.
      type: integer
      minimum: 2
      maximum: 1000
    ScalingConfig:
      description: The scaling configuration for the event source.
      type: object
      additionalProperties: false
      properties:
        MaximumConcurrency:
          description: The maximum number of concurrent functions that the event source can invoke.
          $ref: '#/components/schemas/MaximumConcurrency'
    DocumentDBEventSourceConfig:
      description: Document db event source config.
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          description: The database name to connect to.
          type: string
          minLength: 1
          maxLength: 63
        CollectionName:
          description: The collection name to connect to.
          type: string
          minLength: 1
          maxLength: 57
        FullDocument:
          description: Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
          type: string
          enum:
            - UpdateLookup
            - Default
    EventSourceMapping:
      type: object
      properties:
        Id:
          description: Event Source Mapping Identifier UUID.
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
          minLength: 36
          maxLength: 36
        BatchSize:
          description: The maximum number of items to retrieve in a single batch.
          type: integer
          minimum: 1
          maximum: 10000
        BisectBatchOnFunctionError:
          description: (Streams) If the function returns an error, split the batch in two and retry.
          type: boolean
        DestinationConfig:
          description: (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
          $ref: '#/components/schemas/DestinationConfig'
        Enabled:
          description: Disables the event source mapping to pause polling and invocation.
          type: boolean
        EventSourceArn:
          description: The Amazon Resource Name (ARN) of the event source.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
        FilterCriteria:
          description: The filter criteria to control event filtering.
          $ref: '#/components/schemas/FilterCriteria'
        FunctionName:
          description: The name of the Lambda function.
          type: string
          pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
          minLength: 1
          maxLength: 140
        MaximumBatchingWindowInSeconds:
          description: (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
          type: integer
          minimum: 0
          maximum: 300
        MaximumRecordAgeInSeconds:
          description: (Streams) The maximum age of a record that Lambda sends to a function for processing.
          type: integer
          minimum: -1
          maximum: 604800
        MaximumRetryAttempts:
          description: (Streams) The maximum number of times to retry when the function returns an error.
          type: integer
          minimum: -1
          maximum: 10000
        ParallelizationFactor:
          description: (Streams) The number of batches to process from each shard concurrently.
          type: integer
          minimum: 1
          maximum: 10
        StartingPosition:
          description: The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
          type: string
          pattern: (LATEST|TRIM_HORIZON|AT_TIMESTAMP)+
          minLength: 6
          maxLength: 12
        StartingPositionTimestamp:
          description: With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
          type: number
        Topics:
          description: (Kafka) A list of Kafka topics.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: ^[^.]([a-zA-Z0-9\-_.]+)
            minLength: 1
            maxLength: 249
          minItems: 1
          maxItems: 1
        Queues:
          description: (ActiveMQ) A list of ActiveMQ queues.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: '[\s\S]*'
            minLength: 1
            maxLength: 1000
          minItems: 1
          maxItems: 1
        SourceAccessConfigurations:
          description: A list of SourceAccessConfiguration.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SourceAccessConfiguration'
          minItems: 1
          maxItems: 22
        TumblingWindowInSeconds:
          description: (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
          type: integer
          minimum: 0
          maximum: 900
        FunctionResponseTypes:
          description: (Streams) A list of response types supported by the function.
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - ReportBatchItemFailures
          minLength: 0
          maxLength: 1
        SelfManagedEventSource:
          description: Self-managed event source endpoints.
          $ref: '#/components/schemas/SelfManagedEventSource'
        AmazonManagedKafkaEventSourceConfig:
          description: Specific configuration settings for an MSK event source.
          $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
        SelfManagedKafkaEventSourceConfig:
          description: Specific configuration settings for a Self-Managed Apache Kafka event source.
          $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
        ScalingConfig:
          description: The scaling configuration for the event source.
          $ref: '#/components/schemas/ScalingConfig'
        DocumentDBEventSourceConfig:
          description: Document db event source config.
          $ref: '#/components/schemas/DocumentDBEventSourceConfig'
      required:
        - FunctionName
      x-stackql-resource-name: event_source_mapping
      x-stackql-primaryIdentifier:
        - Id
    ImageConfig:
      additionalProperties: false
      type: object
      properties:
        WorkingDirectory:
          description: WorkingDirectory.
          type: string
        Command:
          maxItems: 1500
          uniqueItems: true
          description: Command.
          type: array
          items:
            type: string
        EntryPoint:
          maxItems: 1500
          uniqueItems: true
          description: EntryPoint.
          type: array
          items:
            type: string
    TracingConfig:
      description: The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set Mode to Active.
      additionalProperties: false
      type: object
      properties:
        Mode:
          description: The tracing mode.
          type: string
          enum:
            - Active
            - PassThrough
    VpcConfig:
      description: The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC.
      additionalProperties: false
      type: object
      properties:
        SecurityGroupIds:
          maxItems: 5
          uniqueItems: false
          description: A list of VPC security groups IDs.
          type: array
          items:
            type: string
        SubnetIds:
          maxItems: 16
          uniqueItems: false
          description: A list of VPC subnet IDs.
          type: array
          items:
            type: string
    DeadLetterConfig:
      description: The dead-letter queue for failed asynchronous invocations.
      additionalProperties: false
      type: object
      properties:
        TargetArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
          type: string
    RuntimeManagementConfig:
      additionalProperties: false
      type: object
      properties:
        UpdateRuntimeOn:
          description: Trigger for runtime update
          type: string
          enum:
            - Auto
            - FunctionUpdate
            - Manual
        RuntimeVersionArn:
          description: Unique identifier for a runtime version arn
          type: string
      required:
        - UpdateRuntimeOn
    SnapStart:
      description: The function's SnapStart setting. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
      additionalProperties: false
      type: object
      properties:
        ApplyOn:
          description: Applying SnapStart setting on function resource type.
          type: string
          enum:
            - PublishedVersions
            - None
      required:
        - ApplyOn
    SnapStartResponse:
      description: The function's SnapStart Response. When set to PublishedVersions, Lambda creates a snapshot of the execution environment when you publish a function version.
      additionalProperties: false
      type: object
      properties:
        OptimizationStatus:
          description: Indicates whether SnapStart is activated for the specified function version.
          type: string
          enum:
            - 'On'
            - 'Off'
        ApplyOn:
          description: Applying SnapStart setting on function resource type.
          type: string
          enum:
            - PublishedVersions
            - None
    Code:
      additionalProperties: false
      type: object
      properties:
        S3ObjectVersion:
          minLength: 1
          description: For versioned objects, the version of the deployment package object to use.
          type: string
          maxLength: 1024
        S3Bucket:
          minLength: 3
          pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
          description: An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
          type: string
          maxLength: 63
        ZipFile:
          description: The source code of your Lambda function. If you include your function source inline with this parameter, AWS CloudFormation places it in a file named index and zips it to create a deployment package..
          type: string
        S3Key:
          minLength: 1
          description: The Amazon S3 key of the deployment package.
          type: string
          maxLength: 1024
        ImageUri:
          description: ImageUri.
          type: string
    Environment:
      description: A function's environment variable settings.
      additionalProperties: false
      type: object
      properties:
        Variables:
          x-patternProperties:
            '[a-zA-Z][a-zA-Z0-9_]+':
              type: string
          description: Environment variable key-value pairs.
          additionalProperties: false
          type: object
    FileSystemConfig:
      additionalProperties: false
      type: object
      properties:
        Arn:
          pattern: ^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$
          description: The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
          type: string
          maxLength: 200
        LocalMountPath:
          pattern: ^/mnt/[a-zA-Z0-9-_.]+$
          description: The path where the function can access the file system, starting with /mnt/.
          type: string
          maxLength: 160
      required:
        - Arn
        - LocalMountPath
    Tag:
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 256
        Key:
          minLength: 1
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          maxLength: 128
      required:
        - Key
    EphemeralStorage:
      description: A function's ephemeral storage settings.
      additionalProperties: false
      type: object
      properties:
        Size:
          description: The amount of ephemeral storage that your function has access to.
          maximum: 10240
          type: integer
          minimum: 512
      required:
        - Size
    Function:
      type: object
      properties:
        Description:
          description: A description of the function.
          type: string
          maxLength: 256
        TracingConfig:
          description: Set Mode to Active to sample and trace a subset of incoming requests with AWS X-Ray.
          $ref: '#/components/schemas/TracingConfig'
        VpcConfig:
          description: For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC.
          $ref: '#/components/schemas/VpcConfig'
        RuntimeManagementConfig:
          description: RuntimeManagementConfig
          $ref: '#/components/schemas/RuntimeManagementConfig'
        ReservedConcurrentExecutions:
          description: The number of simultaneous executions to reserve for the function.
          type: integer
          minimum: 0
        SnapStart:
          description: The SnapStart setting of your function
          $ref: '#/components/schemas/SnapStart'
        FileSystemConfigs:
          maxItems: 1
          description: Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an AWS::EFS::MountTarget resource, you must also specify a DependsOn attribute to ensure that the mount target is created or updated before the function.
          type: array
          items:
            $ref: '#/components/schemas/FileSystemConfig'
        FunctionName:
          minLength: 1
          description: The name of the Lambda function, up to 64 characters in length. If you don't specify a name, AWS CloudFormation generates one.
          type: string
        Runtime:
          description: The identifier of the function's runtime.
          type: string
        KmsKeyArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
          type: string
        PackageType:
          description: PackageType.
          type: string
          enum:
            - Image
            - Zip
        CodeSigningConfigArn:
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
          description: A unique Arn for CodeSigningConfig resource
          type: string
        Layers:
          uniqueItems: false
          description: A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
          type: array
          items:
            type: string
        Tags:
          uniqueItems: true
          description: A list of tags to apply to the function.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        ImageConfig:
          description: ImageConfig
          $ref: '#/components/schemas/ImageConfig'
        MemorySize:
          description: The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
          type: integer
        DeadLetterConfig:
          description: A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing.
          $ref: '#/components/schemas/DeadLetterConfig'
        Timeout:
          description: The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
          type: integer
          minimum: 1
        Handler:
          pattern: ^[^\s]+$
          description: The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime
          type: string
          maxLength: 128
        SnapStartResponse:
          description: The SnapStart response of your function
          $ref: '#/components/schemas/SnapStartResponse'
        Code:
          description: The code for the function.
          $ref: '#/components/schemas/Code'
        Role:
          pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          description: The Amazon Resource Name (ARN) of the function's execution role.
          type: string
        Environment:
          description: Environment variables that are accessible from function code during execution.
          $ref: '#/components/schemas/Environment'
        Arn:
          description: Unique identifier for function resources
          type: string
        EphemeralStorage:
          description: A function's ephemeral storage settings.
          $ref: '#/components/schemas/EphemeralStorage'
        Architectures:
          minItems: 1
          maxItems: 1
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - x86_64
              - arm64
      required:
        - Code
        - Role
      x-stackql-resource-name: function
      x-stackql-primaryIdentifier:
        - FunctionName
    Content:
      type: object
      additionalProperties: false
      properties:
        S3ObjectVersion:
          type: string
        S3Bucket:
          type: string
        S3Key:
          type: string
      required:
        - S3Bucket
        - S3Key
    LayerVersion:
      type: object
      properties:
        CompatibleRuntimes:
          type: array
          uniqueItems: false
          items:
            type: string
        LicenseInfo:
          type: string
        Description:
          type: string
        LayerName:
          type: string
        Content:
          $ref: '#/components/schemas/Content'
        Id:
          type: string
        CompatibleArchitectures:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - Content
      x-stackql-resource-name: layer_version
      x-stackql-primaryIdentifier:
        - Id
    LayerVersionPermission:
      type: object
      properties:
        Id:
          type: string
        Action:
          type: string
        LayerVersionArn:
          type: string
        OrganizationId:
          type: string
        Principal:
          type: string
      required:
        - LayerVersionArn
        - Action
        - Principal
      x-stackql-resource-name: layer_version_permission
      x-stackql-primaryIdentifier:
        - Id
    Permission:
      type: object
      properties:
        FunctionName:
          type: string
        Action:
          type: string
        EventSourceToken:
          type: string
        FunctionUrlAuthType:
          type: string
        SourceArn:
          type: string
        SourceAccount:
          type: string
        PrincipalOrgID:
          type: string
        Id:
          type: string
        Principal:
          type: string
      required:
        - FunctionName
        - Action
        - Principal
      x-stackql-resource-name: permission
      x-stackql-primaryIdentifier:
        - Id
    AllowHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    AllowMethods:
      items:
        type: string
        enum:
          - GET
          - PUT
          - HEAD
          - POST
          - PATCH
          - DELETE
          - '*'
      type: array
      minItems: 1
      maxItems: 6
      x-insertionOrder: true
    AllowOrigins:
      items:
        type: string
        minLength: 1
        maxLength: 253
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    ExposeHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    Cors:
      additionalProperties: false
      properties:
        AllowCredentials:
          description: Specifies whether credentials are included in the CORS request.
          type: boolean
        AllowHeaders:
          description: Represents a collection of allowed headers.
          $ref: '#/components/schemas/AllowHeaders'
        AllowMethods:
          description: Represents a collection of allowed HTTP methods.
          $ref: '#/components/schemas/AllowMethods'
        AllowOrigins:
          description: Represents a collection of allowed origins.
          $ref: '#/components/schemas/AllowOrigins'
        ExposeHeaders:
          description: Represents a collection of exposed headers.
          $ref: '#/components/schemas/ExposeHeaders'
        MaxAge:
          type: integer
          minimum: 0
          maximum: 86400
      type: object
    Url:
      type: object
      properties:
        TargetFunctionArn:
          description: The Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        Qualifier:
          description: The alias qualifier for the target function. If TargetFunctionArn is unqualified then Qualifier must be passed.
          type: string
          minLength: 1
          maxLength: 128
          pattern: ((?!^[0-9]+$)([a-zA-Z0-9-_]+))
        AuthType:
          description: Can be either AWS_IAM if the requests are authorized via IAM, or NONE if no authorization is configured on the Function URL.
          type: string
          enum:
            - AWS_IAM
            - NONE
        InvokeMode:
          description: The invocation mode for the function’s URL. Set to BUFFERED if you want to buffer responses before returning them to the client. Set to RESPONSE_STREAM if you want to stream responses, allowing faster time to first byte and larger response payload sizes. If not set, defaults to BUFFERED.
          type: string
          enum:
            - BUFFERED
            - RESPONSE_STREAM
        FunctionArn:
          description: The full Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        FunctionUrl:
          description: The generated url for this resource.
          type: string
        Cors:
          $ref: '#/components/schemas/Cors'
      required:
        - TargetFunctionArn
        - AuthType
      x-stackql-resource-name: url
      x-stackql-primaryIdentifier:
        - FunctionArn
    Version:
      type: object
      properties:
        FunctionName:
          type: string
        ProvisionedConcurrencyConfig:
          $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
        Description:
          type: string
        Id:
          type: string
        CodeSha256:
          type: string
        Version:
          type: string
      required:
        - FunctionName
      x-stackql-resource-name: version
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    aliases:
      name: aliases
      id: aws.lambda.aliases
      x-cfn-schema-name: Alias
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Alias'
    alias:
      name: alias
      id: aws.lambda.alias
      x-cfn-schema-name: Alias
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.ProvisionedConcurrencyConfig.ProvisionedConcurrentExecutions') as provisioned_concurrency_config_provisioned_concurrent_executions,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RoutingConfig.AdditionalVersionWeights') as routing_config_additional_version_weights,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Alias'
    code_signing_configs:
      name: code_signing_configs
      id: aws.lambda.code_signing_configs
      x-cfn-schema-name: CodeSigningConfig
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
    code_signing_config:
      name: code_signing_config
      id: aws.lambda.code_signing_config
      x-cfn-schema-name: CodeSigningConfig
      x-type: get
      x-identifiers:
        - CodeSigningConfigArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AllowedPublishers.SigningProfileVersionArns') as allowed_publishers_signing_profile_version_arns,
              JSON_EXTRACT(Properties, '$.CodeSigningPolicies.UntrustedArtifactOnDeployment') as code_signing_policies_untrusted_artifact_on_deployment,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigId') as code_signing_config_id,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
    event_invoke_configs:
      name: event_invoke_configs
      id: aws.lambda.event_invoke_configs
      x-cfn-schema-name: EventInvokeConfig
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
    event_invoke_config:
      name: event_invoke_config
      id: aws.lambda.event_invoke_config
      x-cfn-schema-name: EventInvokeConfig
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier,
              JSON_EXTRACT(Properties, '$.DestinationConfig.OnFailure') as destination_config_on_failure,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.MaximumEventAgeInSeconds') as maximum_event_age_in_seconds
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
    event_source_mappings:
      name: event_source_mappings
      id: aws.lambda.event_source_mappings
      x-cfn-schema-name: EventSourceMapping
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
    event_source_mapping:
      name: event_source_mapping
      id: aws.lambda.event_source_mapping
      x-cfn-schema-name: EventSourceMapping
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.BatchSize') as batch_size,
              JSON_EXTRACT(Properties, '$.BisectBatchOnFunctionError') as bisect_batch_on_function_error,
              JSON_EXTRACT(Properties, '$.DestinationConfig.OnFailure') as destination_config_on_failure,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.EventSourceArn') as event_source_arn,
              JSON_EXTRACT(Properties, '$.FilterCriteria.Filters') as filter_criteria_filters,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.ParallelizationFactor') as parallelization_factor,
              JSON_EXTRACT(Properties, '$.StartingPosition') as starting_position,
              JSON_EXTRACT(Properties, '$.StartingPositionTimestamp') as starting_position_timestamp,
              JSON_EXTRACT(Properties, '$.Topics') as topics,
              JSON_EXTRACT(Properties, '$.Queues') as queues,
              JSON_EXTRACT(Properties, '$.SourceAccessConfigurations') as source_access_configurations,
              JSON_EXTRACT(Properties, '$.TumblingWindowInSeconds') as tumbling_window_in_seconds,
              JSON_EXTRACT(Properties, '$.FunctionResponseTypes') as function_response_types,
              JSON_EXTRACT(Properties, '$.SelfManagedEventSource.Endpoints') as self_managed_event_source_endpoints,
              JSON_EXTRACT(Properties, '$.AmazonManagedKafkaEventSourceConfig.ConsumerGroupId') as amazon_managed_kafka_event_source_config_consumer_group_id,
              JSON_EXTRACT(Properties, '$.SelfManagedKafkaEventSourceConfig.ConsumerGroupId') as self_managed_kafka_event_source_config_consumer_group_id,
              JSON_EXTRACT(Properties, '$.ScalingConfig.MaximumConcurrency') as scaling_config_maximum_concurrency,
              JSON_EXTRACT(Properties, '$.DocumentDBEventSourceConfig.DatabaseName') as document_db_event_source_config_database_name,
              JSON_EXTRACT(Properties, '$.DocumentDBEventSourceConfig.CollectionName') as document_db_event_source_config_collection_name,
              JSON_EXTRACT(Properties, '$.DocumentDBEventSourceConfig.FullDocument') as document_db_event_source_config_full_document
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
    functions:
      name: functions
      id: aws.lambda.functions
      x-cfn-schema-name: Function
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
    function:
      name: function
      id: aws.lambda.function
      x-cfn-schema-name: Function
      x-type: get
      x-identifiers:
        - FunctionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TracingConfig.Mode') as tracing_config_mode,
              JSON_EXTRACT(Properties, '$.VpcConfig.SecurityGroupIds') as vpc_config_security_group_ids,
              JSON_EXTRACT(Properties, '$.VpcConfig.SubnetIds') as vpc_config_subnet_ids,
              JSON_EXTRACT(Properties, '$.RuntimeManagementConfig.UpdateRuntimeOn') as runtime_management_config_update_runtime_on,
              JSON_EXTRACT(Properties, '$.RuntimeManagementConfig.RuntimeVersionArn') as runtime_management_config_runtime_version_arn,
              JSON_EXTRACT(Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
              JSON_EXTRACT(Properties, '$.SnapStart.ApplyOn') as snap_start_apply_on,
              JSON_EXTRACT(Properties, '$.FileSystemConfigs') as file_system_configs,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.PackageType') as package_type,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(Properties, '$.Layers') as layers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ImageConfig.WorkingDirectory') as image_config_working_directory,
              JSON_EXTRACT(Properties, '$.ImageConfig.Command') as image_config_command,
              JSON_EXTRACT(Properties, '$.ImageConfig.EntryPoint') as image_config_entry_point,
              JSON_EXTRACT(Properties, '$.MemorySize') as memory_size,
              JSON_EXTRACT(Properties, '$.DeadLetterConfig.TargetArn') as dead_letter_config_target_arn,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.Handler') as handler,
              JSON_EXTRACT(Properties, '$.SnapStartResponse.OptimizationStatus') as snap_start_response_optimization_status,
              JSON_EXTRACT(Properties, '$.SnapStartResponse.ApplyOn') as snap_start_response_apply_on,
              JSON_EXTRACT(Properties, '$.Code.S3ObjectVersion') as code_s3_object_version,
              JSON_EXTRACT(Properties, '$.Code.S3Bucket') as code_s3_bucket,
              JSON_EXTRACT(Properties, '$.Code.ZipFile') as code_zip_file,
              JSON_EXTRACT(Properties, '$.Code.S3Key') as code_s3_key,
              JSON_EXTRACT(Properties, '$.Code.ImageUri') as code_image_uri,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.Environment.Variables') as environment_variables,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.EphemeralStorage.Size') as ephemeral_storage_size,
              JSON_EXTRACT(Properties, '$.Architectures') as architectures
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Function'
    layer_versions:
      name: layer_versions
      id: aws.lambda.layer_versions
      x-cfn-schema-name: LayerVersion
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
    layer_version:
      name: layer_version
      id: aws.lambda.layer_version
      x-cfn-schema-name: LayerVersion
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CompatibleRuntimes') as compatible_runtimes,
              JSON_EXTRACT(Properties, '$.LicenseInfo') as license_info,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LayerName') as layer_name,
              JSON_EXTRACT(Properties, '$.Content.S3ObjectVersion') as content_s3_object_version,
              JSON_EXTRACT(Properties, '$.Content.S3Bucket') as content_s3_bucket,
              JSON_EXTRACT(Properties, '$.Content.S3Key') as content_s3_key,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CompatibleArchitectures') as compatible_architectures
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
    layer_version_permissions:
      name: layer_version_permissions
      id: aws.lambda.layer_version_permissions
      x-cfn-schema-name: LayerVersionPermission
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
    layer_version_permission:
      name: layer_version_permission
      id: aws.lambda.layer_version_permission
      x-cfn-schema-name: LayerVersionPermission
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn,
              JSON_EXTRACT(Properties, '$.OrganizationId') as organization_id,
              JSON_EXTRACT(Properties, '$.Principal') as principal
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
    permissions:
      name: permissions
      id: aws.lambda.permissions
      x-cfn-schema-name: Permission
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Permission'
    permission:
      name: permission
      id: aws.lambda.permission
      x-cfn-schema-name: Permission
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.EventSourceToken') as event_source_token,
              JSON_EXTRACT(Properties, '$.FunctionUrlAuthType') as function_url_auth_type,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.SourceAccount') as source_account,
              JSON_EXTRACT(Properties, '$.PrincipalOrgID') as principal_org_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Principal') as principal
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Permission'
    urls:
      name: urls
      id: aws.lambda.urls
      x-cfn-schema-name: Url
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Url'
    url:
      name: url
      id: aws.lambda.url
      x-cfn-schema-name: Url
      x-type: get
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetFunctionArn') as target_function_arn,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.InvokeMode') as invoke_mode,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.FunctionUrl') as function_url,
              JSON_EXTRACT(Properties, '$.Cors.AllowCredentials') as cors_allow_credentials,
              JSON_EXTRACT(Properties, '$.Cors.AllowHeaders') as cors_allow_headers,
              JSON_EXTRACT(Properties, '$.Cors.AllowMethods') as cors_allow_methods,
              JSON_EXTRACT(Properties, '$.Cors.AllowOrigins') as cors_allow_origins,
              JSON_EXTRACT(Properties, '$.Cors.ExposeHeaders') as cors_expose_headers,
              JSON_EXTRACT(Properties, '$.Cors.MaxAge') as cors_max_age
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Url'
    versions:
      name: versions
      id: aws.lambda.versions
      x-cfn-schema-name: Version
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Version'
    version:
      name: version
      id: aws.lambda.version
      x-cfn-schema-name: Version
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.ProvisionedConcurrencyConfig.ProvisionedConcurrentExecutions') as provisioned_concurrency_config_provisioned_concurrent_executions,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CodeSha256') as code_sha256,
              JSON_EXTRACT(Properties, '$.Version') as version
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Version'
