openapi: 3.0.0
info:
  title: RolesAnywhere
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    CRL:
      type: object
      properties:
        CrlData:
          type: string
        CrlId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        Enabled:
          type: boolean
        Name:
          type: string
        TrustAnchorArn:
          type: string
          pattern: ^arn:aws(-[^:]+)?:rolesanywhere(:.*){2}(:trust-anchor.*)$
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
      required:
        - Name
        - CrlData
      x-stackql-resource-name: crl
      description: Definition of AWS::RolesAnywhere::CRL Resource Type
      x-type-name: AWS::RolesAnywhere::CRL
      x-stackql-primary-identifier:
        - CrlId
      x-read-only-properties:
        - CrlId
      x-required-properties:
        - Name
        - CrlData
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - rolesanywhere:UntagResource
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
      x-required-permissions:
        create:
          - rolesanywhere:ImportCrl
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
        read:
          - rolesanywhere:GetCrl
          - rolesanywhere:ListTagsForResource
        update:
          - rolesanywhere:EnableCrl
          - rolesanywhere:DisableCrl
          - rolesanywhere:UpdateCrl
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:ListTagsForResource
        delete:
          - rolesanywhere:DeleteCrl
        list:
          - rolesanywhere:ListCrls
          - rolesanywhere:ListTagsForResource
    AttributeMapping:
      type: object
      properties:
        MappingRules:
          type: array
          items:
            $ref: '#/components/schemas/MappingRule'
        CertificateField:
          $ref: '#/components/schemas/CertificateField'
      required:
        - CertificateField
        - MappingRules
      additionalProperties: false
    MappingRule:
      type: object
      properties:
        Specifier:
          type: string
      required:
        - Specifier
      additionalProperties: false
    CertificateField:
      type: string
      enum:
        - x509Subject
        - x509Issuer
        - x509SAN
    Profile:
      type: object
      properties:
        DurationSeconds:
          type: number
          maximum: 43200
          minimum: 900
        Enabled:
          type: boolean
        ManagedPolicyArns:
          type: array
          items:
            type: string
        Name:
          type: string
        ProfileArn:
          type: string
        ProfileId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        RequireInstanceProperties:
          type: boolean
        RoleArns:
          type: array
          items:
            type: string
            maxLength: 1011
            minLength: 1
        SessionPolicy:
          type: string
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        AttributeMappings:
          type: array
          items:
            $ref: '#/components/schemas/AttributeMapping'
        AcceptRoleSessionName:
          type: boolean
      required:
        - Name
        - RoleArns
      x-stackql-resource-name: profile
      description: Definition of AWS::RolesAnywhere::Profile Resource Type
      x-type-name: AWS::RolesAnywhere::Profile
      x-stackql-primary-identifier:
        - ProfileId
      x-create-only-properties:
        - RequireInstanceProperties
      x-write-only-properties:
        - RequireInstanceProperties
      x-read-only-properties:
        - ProfileId
        - ProfileArn
      x-required-properties:
        - Name
        - RoleArns
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - rolesanywhere:UntagResource
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:GetPolicy
          - iam:PassRole
          - rolesanywhere:CreateProfile
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
          - rolesanywhere:PutAttributeMapping
          - rolesanywhere:DeleteAttributeMapping
        read:
          - rolesanywhere:GetProfile
          - rolesanywhere:ListTagsForResource
        update:
          - iam:GetRole
          - iam:GetPolicy
          - iam:PassRole
          - rolesanywhere:GetProfile
          - rolesanywhere:UpdateProfile
          - rolesanywhere:EnableProfile
          - rolesanywhere:DisableProfile
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:ListTagsForResource
          - rolesanywhere:PutAttributeMapping
          - rolesanywhere:DeleteAttributeMapping
        delete:
          - rolesanywhere:DeleteProfile
        list:
          - rolesanywhere:ListProfiles
          - rolesanywhere:ListTagsForResource
    NotificationChannel:
      type: string
      enum:
        - ALL
    NotificationEvent:
      type: string
      enum:
        - CA_CERTIFICATE_EXPIRY
        - END_ENTITY_CERTIFICATE_EXPIRY
    NotificationSetting:
      type: object
      properties:
        Enabled:
          type: boolean
        Event:
          $ref: '#/components/schemas/NotificationEvent'
        Threshold:
          type: number
          maximum: 360
          minimum: 1
        Channel:
          $ref: '#/components/schemas/NotificationChannel'
      required:
        - Enabled
        - Event
      additionalProperties: false
    Source:
      type: object
      properties:
        SourceType:
          $ref: '#/components/schemas/TrustAnchorType'
        SourceData:
          $ref: '#/components/schemas/SourceData'
      additionalProperties: false
    SourceData:
      oneOf:
        - type: object
          title: X509CertificateData
          properties:
            X509CertificateData:
              type: string
          required:
            - X509CertificateData
          additionalProperties: false
        - type: object
          title: AcmPcaArn
          properties:
            AcmPcaArn:
              type: string
          required:
            - AcmPcaArn
          additionalProperties: false
    TrustAnchorType:
      type: string
      enum:
        - AWS_ACM_PCA
        - CERTIFICATE_BUNDLE
        - SELF_SIGNED_REPOSITORY
    TrustAnchor:
      type: object
      properties:
        Enabled:
          type: boolean
        Name:
          type: string
        NotificationSettings:
          type: array
          items:
            $ref: '#/components/schemas/NotificationSetting'
          maxItems: 50
          minItems: 0
        Source:
          $ref: '#/components/schemas/Source'
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        TrustAnchorId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        TrustAnchorArn:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
      required:
        - Name
        - Source
      x-stackql-resource-name: trust_anchor
      description: Definition of AWS::RolesAnywhere::TrustAnchor Resource Type.
      x-type-name: AWS::RolesAnywhere::TrustAnchor
      x-stackql-primary-identifier:
        - TrustAnchorId
      x-read-only-properties:
        - TrustAnchorId
        - TrustAnchorArn
      x-required-properties:
        - Name
        - Source
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - rolesanywhere:UntagResource
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rolesanywhere:CreateTrustAnchor
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
        read:
          - rolesanywhere:GetTrustAnchor
          - rolesanywhere:ListTagsForResource
        update:
          - acm-pca:GetCertificateAuthorityCertificate
          - rolesanywhere:ListTagsForResource
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:EnableTrustAnchor
          - rolesanywhere:DisableTrustAnchor
          - rolesanywhere:UpdateTrustAnchor
          - rolesanywhere:GetTrustAnchor
          - rolesanywhere:PutNotificationSettings
          - rolesanywhere:ResetNotificationSettings
        delete:
          - rolesanywhere:DeleteTrustAnchor
        list:
          - rolesanywhere:ListTrustAnchors
          - rolesanywhere:ListTagsForResource
    CreateCRLRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CrlData:
              type: string
            CrlId:
              type: string
              pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
            Enabled:
              type: boolean
            Name:
              type: string
            TrustAnchorArn:
              type: string
              pattern: ^arn:aws(-[^:]+)?:rolesanywhere(:.*){2}(:trust-anchor.*)$
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 200
              minItems: 0
          x-stackQL-stringOnly: true
      x-title: CreateCRLRequest
      type: object
      required: []
    CreateProfileRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DurationSeconds:
              type: number
              maximum: 43200
              minimum: 900
            Enabled:
              type: boolean
            ManagedPolicyArns:
              type: array
              items:
                type: string
            Name:
              type: string
            ProfileArn:
              type: string
            ProfileId:
              type: string
              pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
            RequireInstanceProperties:
              type: boolean
            RoleArns:
              type: array
              items:
                type: string
                maxLength: 1011
                minLength: 1
            SessionPolicy:
              type: string
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 200
              minItems: 0
            AttributeMappings:
              type: array
              items:
                $ref: '#/components/schemas/AttributeMapping'
            AcceptRoleSessionName:
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateProfileRequest
      type: object
      required: []
    CreateTrustAnchorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Enabled:
              type: boolean
            Name:
              type: string
            NotificationSettings:
              type: array
              items:
                $ref: '#/components/schemas/NotificationSetting'
              maxItems: 50
              minItems: 0
            Source:
              $ref: '#/components/schemas/Source'
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 200
              minItems: 0
            TrustAnchorId:
              type: string
              pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
            TrustAnchorArn:
              type: string
              pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
          x-stackQL-stringOnly: true
      x-title: CreateTrustAnchorRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    crls:
      name: crls
      id: aws.rolesanywhere.crls
      x-cfn-schema-name: CRL
      x-cfn-type-name: AWS::RolesAnywhere::CRL
      x-identifiers:
        - CrlId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__CRL&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::CRL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::CRL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::CRL"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/crls/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/crls/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/crls/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CrlData') as crl_data,
              JSON_EXTRACT(Properties, '$.CrlId') as crl_id,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.TrustAnchorArn') as trust_anchor_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND data__Identifier = '<CrlId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CrlData') as crl_data,
                JSON_EXTRACT(detail.Properties, '$.CrlId') as crl_id,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.TrustAnchorArn') as trust_anchor_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CrlData') as crl_data,
                  json_extract_path_text(Properties, 'CrlId') as crl_id,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'TrustAnchorArn') as trust_anchor_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
                  AND data__Identifier = '<CrlId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CrlData') as crl_data,
                    json_extract_path_text(detail.Properties, 'CrlId') as crl_id,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'TrustAnchorArn') as trust_anchor_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RolesAnywhere::CRL'
                    AND detail.data__TypeName = 'AWS::RolesAnywhere::CRL'
                    AND listing.region = 'us-east-1'
    crls_list_only:
      name: crls_list_only
      id: aws.rolesanywhere.crls_list_only
      x-cfn-schema-name: CRL
      x-cfn-type-name: AWS::RolesAnywhere::CRL
      x-identifiers:
        - CrlId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CrlId') as crl_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CrlId') as crl_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND region = 'us-east-1'
    crl_tags:
      name: crl_tags
      id: aws.rolesanywhere.crl_tags
      x-cfn-schema-name: CRL
      x-cfn-type-name: AWS::RolesAnywhere::CRL
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CrlData') as crl_data,
              JSON_EXTRACT(detail.Properties, '$.CrlId') as crl_id,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.TrustAnchorArn') as trust_anchor_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND detail.data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CrlData') as crl_data,
                json_extract_path_text(detail.Properties, 'CrlId') as crl_id,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'TrustAnchorArn') as trust_anchor_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND listing.region = 'us-east-1'
    profiles:
      name: profiles
      id: aws.rolesanywhere.profiles
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::RolesAnywhere::Profile
      x-identifiers:
        - ProfileId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::Profile"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/profiles/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DurationSeconds') as duration_seconds,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProfileArn') as profile_arn,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id,
              JSON_EXTRACT(Properties, '$.RequireInstanceProperties') as require_instance_properties,
              JSON_EXTRACT(Properties, '$.RoleArns') as role_arns,
              JSON_EXTRACT(Properties, '$.SessionPolicy') as session_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AttributeMappings') as attribute_mappings,
              JSON_EXTRACT(Properties, '$.AcceptRoleSessionName') as accept_role_session_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND data__Identifier = '<ProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DurationSeconds') as duration_seconds,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ProfileArn') as profile_arn,
                JSON_EXTRACT(detail.Properties, '$.ProfileId') as profile_id,
                JSON_EXTRACT(detail.Properties, '$.RequireInstanceProperties') as require_instance_properties,
                JSON_EXTRACT(detail.Properties, '$.RoleArns') as role_arns,
                JSON_EXTRACT(detail.Properties, '$.SessionPolicy') as session_policy,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.AttributeMappings') as attribute_mappings,
                JSON_EXTRACT(detail.Properties, '$.AcceptRoleSessionName') as accept_role_session_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DurationSeconds') as duration_seconds,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ProfileArn') as profile_arn,
                  json_extract_path_text(Properties, 'ProfileId') as profile_id,
                  json_extract_path_text(Properties, 'RequireInstanceProperties') as require_instance_properties,
                  json_extract_path_text(Properties, 'RoleArns') as role_arns,
                  json_extract_path_text(Properties, 'SessionPolicy') as session_policy,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'AttributeMappings') as attribute_mappings,
                  json_extract_path_text(Properties, 'AcceptRoleSessionName') as accept_role_session_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
                  AND data__Identifier = '<ProfileId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DurationSeconds') as duration_seconds,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ProfileArn') as profile_arn,
                    json_extract_path_text(detail.Properties, 'ProfileId') as profile_id,
                    json_extract_path_text(detail.Properties, 'RequireInstanceProperties') as require_instance_properties,
                    json_extract_path_text(detail.Properties, 'RoleArns') as role_arns,
                    json_extract_path_text(detail.Properties, 'SessionPolicy') as session_policy,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'AttributeMappings') as attribute_mappings,
                    json_extract_path_text(detail.Properties, 'AcceptRoleSessionName') as accept_role_session_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RolesAnywhere::Profile'
                    AND detail.data__TypeName = 'AWS::RolesAnywhere::Profile'
                    AND listing.region = 'us-east-1'
    profiles_list_only:
      name: profiles_list_only
      id: aws.rolesanywhere.profiles_list_only
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::RolesAnywhere::Profile
      x-identifiers:
        - ProfileId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND region = 'us-east-1'
    profile_tags:
      name: profile_tags
      id: aws.rolesanywhere.profile_tags
      x-cfn-schema-name: Profile
      x-cfn-type-name: AWS::RolesAnywhere::Profile
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DurationSeconds') as duration_seconds,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ProfileArn') as profile_arn,
              JSON_EXTRACT(detail.Properties, '$.ProfileId') as profile_id,
              JSON_EXTRACT(detail.Properties, '$.RequireInstanceProperties') as require_instance_properties,
              JSON_EXTRACT(detail.Properties, '$.RoleArns') as role_arns,
              JSON_EXTRACT(detail.Properties, '$.SessionPolicy') as session_policy,
              JSON_EXTRACT(detail.Properties, '$.AttributeMappings') as attribute_mappings,
              JSON_EXTRACT(detail.Properties, '$.AcceptRoleSessionName') as accept_role_session_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND detail.data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DurationSeconds') as duration_seconds,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ProfileArn') as profile_arn,
                json_extract_path_text(detail.Properties, 'ProfileId') as profile_id,
                json_extract_path_text(detail.Properties, 'RequireInstanceProperties') as require_instance_properties,
                json_extract_path_text(detail.Properties, 'RoleArns') as role_arns,
                json_extract_path_text(detail.Properties, 'SessionPolicy') as session_policy,
                json_extract_path_text(detail.Properties, 'AttributeMappings') as attribute_mappings,
                json_extract_path_text(detail.Properties, 'AcceptRoleSessionName') as accept_role_session_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND listing.region = 'us-east-1'
    trust_anchors:
      name: trust_anchors
      id: aws.rolesanywhere.trust_anchors
      x-cfn-schema-name: TrustAnchor
      x-cfn-type-name: AWS::RolesAnywhere::TrustAnchor
      x-identifiers:
        - TrustAnchorId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TrustAnchor&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::TrustAnchor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::TrustAnchor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RolesAnywhere::TrustAnchor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/trust_anchors/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/trust_anchors/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/trust_anchors/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NotificationSettings') as notification_settings,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrustAnchorId') as trust_anchor_id,
              JSON_EXTRACT(Properties, '$.TrustAnchorArn') as trust_anchor_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND data__Identifier = '<TrustAnchorId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.NotificationSettings') as notification_settings,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TrustAnchorId') as trust_anchor_id,
                JSON_EXTRACT(detail.Properties, '$.TrustAnchorArn') as trust_anchor_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Enabled') as enabled,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'NotificationSettings') as notification_settings,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TrustAnchorId') as trust_anchor_id,
                  json_extract_path_text(Properties, 'TrustAnchorArn') as trust_anchor_arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                  AND data__Identifier = '<TrustAnchorId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'NotificationSettings') as notification_settings,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TrustAnchorId') as trust_anchor_id,
                    json_extract_path_text(detail.Properties, 'TrustAnchorArn') as trust_anchor_arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                    AND detail.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                    AND listing.region = 'us-east-1'
    trust_anchors_list_only:
      name: trust_anchors_list_only
      id: aws.rolesanywhere.trust_anchors_list_only
      x-cfn-schema-name: TrustAnchor
      x-cfn-type-name: AWS::RolesAnywhere::TrustAnchor
      x-identifiers:
        - TrustAnchorId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrustAnchorId') as trust_anchor_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrustAnchorId') as trust_anchor_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND region = 'us-east-1'
    trust_anchor_tags:
      name: trust_anchor_tags
      id: aws.rolesanywhere.trust_anchor_tags
      x-cfn-schema-name: TrustAnchor
      x-cfn-type-name: AWS::RolesAnywhere::TrustAnchor
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.NotificationSettings') as notification_settings,
              JSON_EXTRACT(detail.Properties, '$.Source') as source,
              JSON_EXTRACT(detail.Properties, '$.TrustAnchorId') as trust_anchor_id,
              JSON_EXTRACT(detail.Properties, '$.TrustAnchorArn') as trust_anchor_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND detail.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Enabled') as enabled,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'NotificationSettings') as notification_settings,
                json_extract_path_text(detail.Properties, 'Source') as source,
                json_extract_path_text(detail.Properties, 'TrustAnchorId') as trust_anchor_id,
                json_extract_path_text(detail.Properties, 'TrustAnchorArn') as trust_anchor_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND detail.data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__CRL&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCRL
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCRLRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Profile&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProfile
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TrustAnchor&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTrustAnchor
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTrustAnchorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
