openapi: 3.0.0
info:
  title: SQS
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
      required:
        - Value
        - Key
    Queue:
      type: object
      properties:
        QueueUrl:
          type: string
          description: URL of the source queue.
        Arn:
          type: string
          description: Amazon Resource Name (ARN) of the queue.
        ContentBasedDeduplication:
          type: boolean
          description: For first-in-first-out (FIFO) queues, specifies whether to enable content-based deduplication. During the deduplication interval, Amazon SQS treats messages that are sent with identical content as duplicates and delivers only one copy of the message.
        DeduplicationScope:
          description: Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.
          type: string
        DelaySeconds:
          type: integer
          description: The time in seconds for which the delivery of all messages in the queue is delayed. You can specify an integer value of 0 to 900 (15 minutes). The default value is 0.
        FifoQueue:
          type: boolean
          description: If set to true, creates a FIFO queue. If you don't specify this property, Amazon SQS creates a standard queue.
        FifoThroughputLimit:
          description: Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.
          type: string
        KmsDataKeyReusePeriodSeconds:
          type: integer
          description: The length of time in seconds for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. The value must be an integer between 60 (1 minute) and 86,400 (24 hours). The default is 300 (5 minutes).
        KmsMasterKeyId:
          type: string
          description: The ID of an AWS managed customer master key (CMK) for Amazon SQS or a custom CMK. To use the AWS managed CMK for Amazon SQS, specify the (default) alias alias/aws/sqs.
        SqsManagedSseEnabled:
          type: boolean
          description: Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. SSE-KMS or SSE-SQS ).
        MaximumMessageSize:
          type: integer
          description: The limit of how many bytes that a message can contain before Amazon SQS rejects it. You can specify an integer value from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). The default value is 262,144 (256 KiB).
        MessageRetentionPeriod:
          type: integer
          description: The number of seconds that Amazon SQS retains a message. You can specify an integer value from 60 seconds (1 minute) to 1,209,600 seconds (14 days). The default value is 345,600 seconds (4 days).
        QueueName:
          type: string
          description: A name for the queue. To create a FIFO queue, the name of your FIFO queue must end with the .fifo suffix.
        ReceiveMessageWaitTimeSeconds:
          type: integer
          description: Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue in order to include it in the response, rather than returning an empty response if a message isn't yet available. You can specify an integer from 1 to 20. Short polling is used as the default or when you specify 0 for this property.
        RedriveAllowPolicy:
          type: string
        RedrivePolicy:
          type: string
        Tags:
          type: array
          description: The tags that you attach to this queue.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        VisibilityTimeout:
          type: integer
          description: The length of time during which a message will be unavailable after a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component time to process and delete the message from the queue. Values must be from 0 to 43,200 seconds (12 hours). If you don't specify a value, AWS CloudFormation uses the default value of 30 seconds.
      x-stackql-resource-name: queue
      x-stackql-primaryIdentifier:
        - QueueUrl
    QueuePolicy:
      type: object
      properties:
        Id:
          type: string
        PolicyDocument:
          type: object
        Queues:
          type: array
          uniqueItems: false
          items:
            type: string
      required:
        - PolicyDocument
        - Queues
      x-stackql-resource-name: queue_policy
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    queues:
      name: queues
      id: aws.sqs.queues
      x-cfn-schema-name: Queue
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueueUrl') as queue_url
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SQS::Queue'
    queue:
      name: queue
      id: aws.sqs.queue
      x-cfn-schema-name: Queue
      x-type: get
      x-identifiers:
        - QueueUrl
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueueUrl') as queue_url,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ContentBasedDeduplication') as content_based_deduplication,
              JSON_EXTRACT(Properties, '$.DeduplicationScope') as deduplication_scope,
              JSON_EXTRACT(Properties, '$.DelaySeconds') as delay_seconds,
              JSON_EXTRACT(Properties, '$.FifoQueue') as fifo_queue,
              JSON_EXTRACT(Properties, '$.FifoThroughputLimit') as fifo_throughput_limit,
              JSON_EXTRACT(Properties, '$.KmsDataKeyReusePeriodSeconds') as kms_data_key_reuse_period_seconds,
              JSON_EXTRACT(Properties, '$.KmsMasterKeyId') as kms_master_key_id,
              JSON_EXTRACT(Properties, '$.SqsManagedSseEnabled') as sqs_managed_sse_enabled,
              JSON_EXTRACT(Properties, '$.MaximumMessageSize') as maximum_message_size,
              JSON_EXTRACT(Properties, '$.MessageRetentionPeriod') as message_retention_period,
              JSON_EXTRACT(Properties, '$.QueueName') as queue_name,
              JSON_EXTRACT(Properties, '$.ReceiveMessageWaitTimeSeconds') as receive_message_wait_time_seconds,
              JSON_EXTRACT(Properties, '$.RedriveAllowPolicy') as redrive_allow_policy,
              JSON_EXTRACT(Properties, '$.RedrivePolicy') as redrive_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VisibilityTimeout') as visibility_timeout
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SQS::Queue'
    queue_policies:
      name: queue_policies
      id: aws.sqs.queue_policies
      x-cfn-schema-name: QueuePolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::SQS::QueuePolicy'
    queue_policy:
      name: queue_policy
      id: aws.sqs.queue_policy
      x-cfn-schema-name: QueuePolicy
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.Queues') as queues
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::SQS::QueuePolicy'
