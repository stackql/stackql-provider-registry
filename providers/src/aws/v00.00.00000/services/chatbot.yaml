openapi: 3.0.0
info:
  title: Chatbot
  version: 1.0.0
paths: {}
components:
  schemas:
    MicrosoftTeamsChannelConfiguration:
      type: object
      properties:
        TeamId:
          description: The id of the Microsoft Teams team
          type: string
          pattern: ^[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}$
          minLength: 36
          maxLength: 36
        TeamsChannelId:
          description: The id of the Microsoft Teams channel
          type: string
          pattern: ^([a-zA-Z0-9-_=+/.,])*%3a([a-zA-Z0-9-_=+/.,])*%40([a-zA-Z0-9-_=+/.,])*$
          minLength: 1
          maxLength: 256
        TeamsTenantId:
          description: The id of the Microsoft Teams tenant
          type: string
          pattern: ^[0-9A-Fa-f]{8}(?:-[0-9A-Fa-f]{4}){3}-[0-9A-Fa-f]{12}$
          minLength: 36
          maxLength: 36
        ConfigurationName:
          description: The name of the configuration
          type: string
          pattern: ^[A-Za-z0-9-_]+$
          minLength: 1
          maxLength: 128
        IamRoleArn:
          description: The ARN of the IAM role that defines the permissions for AWS Chatbot
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        SnsTopicArns:
          description: ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        LoggingLevel:
          description: Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
          type: string
          pattern: ^(ERROR|INFO|NONE)$
          default: NONE
        Arn:
          description: Amazon Resource Name (ARN) of the configuration
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*)?:chatbot:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        GuardrailPolicies:
          description: The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^(^$|arn:aws:iam:[A-Za-z0-9_\/.-]{0,63}:[A-Za-z0-9_\/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_\/+=,@.-]{0,1023})$
        UserRoleRequired:
          description: Enables use of a user role requirement in your chat configuration
          type: boolean
          default: false
      required:
        - TeamId
        - TeamsChannelId
        - TeamsTenantId
        - ConfigurationName
        - IamRoleArn
      x-stackql-resource-name: microsoft_teams_channel_configuration
      x-stackql-primaryIdentifier:
        - Arn
    SlackChannelConfiguration:
      type: object
      properties:
        SlackWorkspaceId:
          description: The id of the Slack workspace
          type: string
          pattern: ^[0-9A-Z]{1,255}$
          minLength: 1
          maxLength: 256
        SlackChannelId:
          description: The id of the Slack channel
          type: string
          pattern: ^[A-Za-z0-9]+$
          minLength: 1
          maxLength: 256
        ConfigurationName:
          description: The name of the configuration
          type: string
          pattern: ^[A-Za-z0-9-_]+$
          minLength: 1
          maxLength: 128
        IamRoleArn:
          description: The ARN of the IAM role that defines the permissions for AWS Chatbot
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        SnsTopicArns:
          description: ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        LoggingLevel:
          description: Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
          type: string
          pattern: ^(ERROR|INFO|NONE)$
          default: NONE
        Arn:
          description: Amazon Resource Name (ARN) of the configuration
          type: string
          pattern: ^arn:(aws[a-zA-Z-]*)?:chatbot:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
        GuardrailPolicies:
          description: The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^(^$|arn:aws:iam:[A-Za-z0-9_\/.-]{0,63}:[A-Za-z0-9_\/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_\/+=,@.-]{0,1023})$
        UserRoleRequired:
          description: Enables use of a user role requirement in your chat configuration
          type: boolean
          default: false
      required:
        - SlackWorkspaceId
        - SlackChannelId
        - ConfigurationName
        - IamRoleArn
      x-stackql-resource-name: slack_channel_configuration
      x-stackql-primaryIdentifier:
        - Arn
  x-stackQL-resources:
    microsoft_teams_channel_configurations:
      name: microsoft_teams_channel_configurations
      id: aws.chatbot.microsoft_teams_channel_configurations
      x-cfn-schema-name: MicrosoftTeamsChannelConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Chatbot::MicrosoftTeamsChannelConfiguration'
    microsoft_teams_channel_configuration:
      name: microsoft_teams_channel_configuration
      id: aws.chatbot.microsoft_teams_channel_configuration
      x-cfn-schema-name: MicrosoftTeamsChannelConfiguration
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TeamId') as team_id,
              JSON_EXTRACT(Properties, '$.TeamsChannelId') as teams_channel_id,
              JSON_EXTRACT(Properties, '$.TeamsTenantId') as teams_tenant_id,
              JSON_EXTRACT(Properties, '$.ConfigurationName') as configuration_name,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.SnsTopicArns') as sns_topic_arns,
              JSON_EXTRACT(Properties, '$.LoggingLevel') as logging_level,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.GuardrailPolicies') as guardrail_policies,
              JSON_EXTRACT(Properties, '$.UserRoleRequired') as user_role_required
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Chatbot::MicrosoftTeamsChannelConfiguration'
    slack_channel_configurations:
      name: slack_channel_configurations
      id: aws.chatbot.slack_channel_configurations
      x-cfn-schema-name: SlackChannelConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Chatbot::SlackChannelConfiguration'
    slack_channel_configuration:
      name: slack_channel_configuration
      id: aws.chatbot.slack_channel_configuration
      x-cfn-schema-name: SlackChannelConfiguration
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SlackWorkspaceId') as slack_workspace_id,
              JSON_EXTRACT(Properties, '$.SlackChannelId') as slack_channel_id,
              JSON_EXTRACT(Properties, '$.ConfigurationName') as configuration_name,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.SnsTopicArns') as sns_topic_arns,
              JSON_EXTRACT(Properties, '$.LoggingLevel') as logging_level,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.GuardrailPolicies') as guardrail_policies,
              JSON_EXTRACT(Properties, '$.UserRoleRequired') as user_role_required
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Chatbot::SlackChannelConfiguration'
