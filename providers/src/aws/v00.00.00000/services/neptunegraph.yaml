openapi: 3.0.0
info:
  title: NeptuneGraph
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      required:
        - Key
    VectorSearchConfiguration:
      description: The vector search configuration.
      type: object
      additionalProperties: false
      properties:
        VectorSearchDimension:
          type: integer
          description: The vector search dimension
      required:
        - VectorSearchDimension
    Graph:
      type: object
      properties:
        DeletionProtection:
          description: |-
            Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.

            _Default_: If not specified, the default value is true.
          type: boolean
        GraphName:
          description: |-
            Contains a user-supplied name for the Graph. 

            If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.

            _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
          pattern: ^[a-zA-z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$
          minLength: 1
          maxLength: 63
        ProvisionedMemory:
          description: Memory for the Graph.
          type: integer
        PublicConnectivity:
          description: |-
            Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.

            When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.

            When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.

            _Default_: If not specified, the default value is false.
          type: boolean
        ReplicaCount:
          description: |-
            Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.

            Replica Count should always be less than or equal to 2.

            _Default_: If not specified, the default value is 1.
          type: integer
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: The tags associated with this graph.
          items:
            $ref: '#/components/schemas/Tag'
        VectorSearchConfiguration:
          description: Vector Search Configuration
          $ref: '#/components/schemas/VectorSearchConfiguration'
        Endpoint:
          description: 'The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`'
          type: string
        GraphArn:
          description: Graph resource ARN
          type: string
        GraphId:
          description: The auto-generated id assigned by the service.
          type: string
      required:
        - ProvisionedMemory
      x-stackql-resource-name: graph
      description: The AWS::NeptuneGraph::Graph resource creates an Amazon NeptuneGraph Graph.
      x-type-name: AWS::NeptuneGraph::Graph
      x-stackql-primary-identifier:
        - GraphId
      x-stackql-additional-identifiers:
        - - GraphName
      x-create-only-properties:
        - GraphName
        - ReplicaCount
        - VectorSearchConfiguration
      x-conditional-create-only-properties:
        - ProvisionedMemory
      x-read-only-properties:
        - GraphArn
        - GraphId
        - Endpoint
      x-required-properties:
        - ProvisionedMemory
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - iam:PassRole
          - neptune-graph:CreateGraph
          - neptune-graph:GetGraph
          - neptune-graph:ListTagsForResource
          - neptune-graph:TagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:Decrypt
          - iam:CreateServiceLinkedRole
        read:
          - neptune-graph:GetGraph
          - neptune-graph:ListTagsForResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:Decrypt
        update:
          - iam:PassRole
          - neptune-graph:GetGraph
          - neptune-graph:ListTagsForResource
          - neptune-graph:TagResource
          - neptune-graph:UntagResource
          - neptune-graph:UpdateGraph
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:Decrypt
        delete:
          - neptune-graph:DeleteGraph
          - neptune-graph:GetGraph
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:Decrypt
        list:
          - neptune-graph:GetGraph
          - neptune-graph:ListGraphs
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:Decrypt
    PrivateGraphEndpoint:
      type: object
      properties:
        GraphIdentifier:
          description: The auto-generated Graph Id assigned by the service.
          type: string
        SecurityGroupIds:
          description: The security group Ids associated with the VPC where you want the private graph endpoint to be created, ie, the graph will be reachable from within the VPC.
          type: array
          x-insertionOrder: false
          items:
            type: string
        SubnetIds:
          description: The subnet Ids associated with the VPC where you want the private graph endpoint to be created, ie, the graph will be reachable from within the VPC.
          type: array
          x-insertionOrder: false
          items:
            type: string
        VpcId:
          description: The VPC where you want the private graph endpoint to be created, ie, the graph will be reachable from within the VPC.
          type: string
        PrivateGraphEndpointIdentifier:
          description: |-
            PrivateGraphEndpoint resource identifier generated by concatenating the associated GraphIdentifier and VpcId with an underscore separator.

             For example, if GraphIdentifier is `g-12a3bcdef4` and VpcId is `vpc-0a12bc34567de8f90`, the generated PrivateGraphEndpointIdentifier will be `g-12a3bcdef4_vpc-0a12bc34567de8f90`
          type: string
        VpcEndpointId:
          description: VPC endpoint that provides a private connection between the Graph and specified VPC.
          type: string
      required:
        - GraphIdentifier
        - VpcId
      x-stackql-resource-name: private_graph_endpoint
      description: The AWS::NeptuneGraph::PrivateGraphEndpoint resource creates an Amazon NeptuneGraph PrivateGraphEndpoint.
      x-type-name: AWS::NeptuneGraph::PrivateGraphEndpoint
      x-stackql-primary-identifier:
        - PrivateGraphEndpointIdentifier
      x-stackql-additional-identifiers:
        - - GraphIdentifier
          - VpcId
      x-create-only-properties:
        - GraphIdentifier
        - SecurityGroupIds
        - SubnetIds
        - VpcId
      x-write-only-properties:
        - GraphIdentifier
        - SecurityGroupIds
      x-read-only-properties:
        - PrivateGraphEndpointIdentifier
        - VpcEndpointId
      x-required-properties:
        - GraphIdentifier
        - VpcId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - ec2:DescribeVpcAttribute
          - ec2:DescribeAvailabilityZones
          - ec2:ModifyVpcEndpoint
          - route53:AssociateVPCWithHostedZone
          - iam:PassRole
          - neptune-graph:CreatePrivateGraphEndpoint
          - neptune-graph:GetPrivateGraphEndpoint
          - iam:CreateServiceLinkedRole
        read:
          - neptune-graph:GetPrivateGraphEndpoint
        update:
          - iam:PassRole
          - neptune-graph:GetPrivateGraphEndpoint
        delete:
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - ec2:DescribeVpcAttribute
          - ec2:DescribeAvailabilityZones
          - ec2:ModifyVpcEndpoint
          - route53:DisassociateVPCFromHostedZone
          - neptune-graph:DeletePrivateGraphEndpoint
          - neptune-graph:GetPrivateGraphEndpoint
        list:
          - neptune-graph:GetPrivateGraphEndpoint
          - neptune-graph:ListPrivateGraphEndpoints
  x-stackQL-resources:
    graphs:
      name: graphs
      id: aws.neptunegraph.graphs
      x-cfn-schema-name: Graph
      x-type: list
      x-identifiers:
        - GraphId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GraphId') as graph_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NeptuneGraph::Graph'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GraphId') as graph_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NeptuneGraph::Graph'
                AND region = 'us-east-1'
    graph:
      name: graph
      id: aws.neptunegraph.graph
      x-cfn-schema-name: Graph
      x-type: get
      x-identifiers:
        - GraphId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.GraphName') as graph_name,
              JSON_EXTRACT(Properties, '$.ProvisionedMemory') as provisioned_memory,
              JSON_EXTRACT(Properties, '$.PublicConnectivity') as public_connectivity,
              JSON_EXTRACT(Properties, '$.ReplicaCount') as replica_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VectorSearchConfiguration') as vector_search_configuration,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.GraphArn') as graph_arn,
              JSON_EXTRACT(Properties, '$.GraphId') as graph_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NeptuneGraph::Graph'
              AND data__Identifier = '<GraphId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DeletionProtection') as deletion_protection,
                json_extract_path_text(Properties, 'GraphName') as graph_name,
                json_extract_path_text(Properties, 'ProvisionedMemory') as provisioned_memory,
                json_extract_path_text(Properties, 'PublicConnectivity') as public_connectivity,
                json_extract_path_text(Properties, 'ReplicaCount') as replica_count,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VectorSearchConfiguration') as vector_search_configuration,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'GraphArn') as graph_arn,
                json_extract_path_text(Properties, 'GraphId') as graph_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NeptuneGraph::Graph'
                AND data__Identifier = '<GraphId>'
                AND region = 'us-east-1'
    private_graph_endpoints:
      name: private_graph_endpoints
      id: aws.neptunegraph.private_graph_endpoints
      x-cfn-schema-name: PrivateGraphEndpoint
      x-type: list
      x-identifiers:
        - PrivateGraphEndpointIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PrivateGraphEndpointIdentifier') as private_graph_endpoint_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NeptuneGraph::PrivateGraphEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PrivateGraphEndpointIdentifier') as private_graph_endpoint_identifier
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::NeptuneGraph::PrivateGraphEndpoint'
                AND region = 'us-east-1'
    private_graph_endpoint:
      name: private_graph_endpoint
      id: aws.neptunegraph.private_graph_endpoint
      x-cfn-schema-name: PrivateGraphEndpoint
      x-type: get
      x-identifiers:
        - PrivateGraphEndpointIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GraphIdentifier') as graph_identifier,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.PrivateGraphEndpointIdentifier') as private_graph_endpoint_identifier,
              JSON_EXTRACT(Properties, '$.VpcEndpointId') as vpc_endpoint_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NeptuneGraph::PrivateGraphEndpoint'
              AND data__Identifier = '<PrivateGraphEndpointIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'GraphIdentifier') as graph_identifier,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'PrivateGraphEndpointIdentifier') as private_graph_endpoint_identifier,
                json_extract_path_text(Properties, 'VpcEndpointId') as vpc_endpoint_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::NeptuneGraph::PrivateGraphEndpoint'
                AND data__Identifier = '<PrivateGraphEndpointIdentifier>'
                AND region = 'us-east-1'
