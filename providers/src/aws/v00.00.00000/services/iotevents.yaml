openapi: 3.0.0
info:
  title: IoTEvents
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    AlarmRule:
      type: object
      description: Defines when your alarm is invoked.
      additionalProperties: false
      properties:
        SimpleRule:
          $ref: '#/components/schemas/SimpleRule'
          description: A rule that compares an input property value to a threshold value with a comparison operator.
    SimpleRule:
      type: object
      additionalProperties: false
      description: A rule that compares an input property value to a threshold value with a comparison operator.
      properties:
        InputProperty:
          type: string
          minLength: 1
          maxLength: 512
          description: The value on the left side of the comparison operator. You can specify an ITE input attribute as an input property.
        ComparisonOperator:
          type: string
          enum:
            - GREATER
            - GREATER_OR_EQUAL
            - LESS
            - LESS_OR_EQUAL
            - EQUAL
            - NOT_EQUAL
          description: The comparison operator.
        Threshold:
          type: string
          minLength: 1
          maxLength: 512
          description: The value on the right side of the comparison operator. You can enter a number or specify an ITE input attribute.
      required:
        - InputProperty
        - ComparisonOperator
        - Threshold
    AlarmEventActions:
      type: object
      additionalProperties: false
      description: Contains information about one or more alarm actions.
      properties:
        AlarmActions:
          $ref: '#/components/schemas/AlarmActions'
          description: Specifies one or more supported actions to receive notifications when the alarm state changes.
    AlarmCapabilities:
      type: object
      description: Contains the configuration information of alarm state changes.
      additionalProperties: false
      properties:
        InitializationConfiguration:
          $ref: '#/components/schemas/InitializationConfiguration'
          description: Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
        AcknowledgeFlow:
          $ref: '#/components/schemas/AcknowledgeFlow'
          description: Specifies whether to get notified for alarm state changes.
    AlarmActions:
      type: array
      description: Specifies one or more supported actions to receive notifications when the alarm state changes.
      uniqueItems: false
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/AlarmAction'
    AlarmAction:
      type: object
      additionalProperties: false
      description: Specifies one of the following actions to receive notifications when the alarm state changes.
      properties:
        DynamoDB:
          $ref: '#/components/schemas/DynamoDB'
          description: |-
            Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.
             You must use expressions for all parameters in ``DynamoDBAction``. The expressions accept literals, operators, functions, references, and substitution templates.
              **Examples**
             +  For literal values, the expressions must contain single quotes. For example, the value for the ``hashKeyType`` parameter can be ``'STRING'``.
              +  For references, you must specify either variables or input values. For example, the value for the ``hashKeyField`` parameter can be ``$input.GreenhouseInput.name``.
              +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
             In the following example, the value for the ``hashKeyValue`` parameter uses a substitution template. 
              ``'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'`` 
              +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
             In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
              ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
              
             For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
             If the defined payload type is a string, ``DynamoDBAction`` writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the ``payloadField`` parameter is ``<payload-field>_raw``.
        DynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2'
          description: |-
            Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
             You must use expressions for all parameters in ``DynamoDBv2Action``. The expressions accept literals, operators, functions, references, and substitution templates.
              **Examples**
             +  For literal values, the expressions must contain single quotes. For example, the value for the ``tableName`` parameter can be ``'GreenhouseTemperatureTable'``.
              +  For references, you must specify either variables or input values. For example, the value for the ``tableName`` parameter can be ``$variable.ddbtableName``.
              +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
             In the following example, the value for the ``contentExpression`` parameter in ``Payload`` uses a substitution template. 
              ``'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'`` 
              +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
             In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
              ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
              
             For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
             The value for the ``type`` parameter in ``Payload`` must be ``JSON``.
        Firehose:
          $ref: '#/components/schemas/Firehose'
          description: Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        IotEvents:
          $ref: '#/components/schemas/IotEvents'
          description: Sends an ITE input, passing in information about the detector model instance and the event that triggered the action.
        IotSiteWise:
          $ref: '#/components/schemas/IotSiteWise'
          description: |-
            Sends information about the detector model instance and the event that triggered the action to a specified asset property in ITSW.
             You must use expressions for all parameters in ``IotSiteWiseAction``. The expressions accept literals, operators, functions, references, and substitutions templates.
              **Examples**
             +  For literal values, the expressions must contain single quotes. For example, the value for the ``propertyAlias`` parameter can be ``'/company/windfarm/3/turbine/7/temperature'``.
              +  For references, you must specify either variables or input values. For example, the value for the ``assetId`` parameter can be ``$input.TurbineInput.assetId1``.
              +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
             In the following example, the value for the ``propertyAlias`` parameter uses a substitution template. 
              ``'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'`` 
              
             You must specify either ``propertyAlias`` or both ``assetId`` and ``propertyId`` to identify the target asset property in ITSW.
             For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
        IotTopicPublish:
          $ref: '#/components/schemas/IotTopicPublish'
          description: Information required to publish the MQTT message through the IoT message broker.
        Lambda:
          $ref: '#/components/schemas/Lambda'
          description: Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        Sns:
          $ref: '#/components/schemas/Sns'
          description: Information required to publish the Amazon SNS message.
        Sqs:
          $ref: '#/components/schemas/Sqs'
          description: Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
    DynamoDB:
      type: object
      additionalProperties: false
      description: |-
        Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.
         You must use expressions for all parameters in ``DynamoDBAction``. The expressions accept literals, operators, functions, references, and substitution templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``hashKeyType`` parameter can be ``'STRING'``.
          +  For references, you must specify either variables or input values. For example, the value for the ``hashKeyField`` parameter can be ``$input.GreenhouseInput.name``.
          +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``hashKeyValue`` parameter uses a substitution template. 
          ``'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'`` 
          +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
          ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
          
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
         If the defined payload type is a string, ``DynamoDBAction`` writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the ``payloadField`` parameter is ``<payload-field>_raw``.
      properties:
        HashKeyField:
          type: string
          description: The name of the hash key (also called the partition key). The ``hashKeyField`` value must match the partition key of the target DynamoDB table.
        HashKeyType:
          type: string
          description: |-
            The data type for the hash key (also called the partition key). You can specify the following values:
              +   ``'STRING'`` - The hash key is a string.
              +   ``'NUMBER'`` - The hash key is a number.
              
             If you don't specify ``hashKeyType``, the default value is ``'STRING'``.
        HashKeyValue:
          type: string
          description: The value of the hash key (also called the partition key).
        Operation:
          type: string
          description: |-
            The type of operation to perform. You can specify the following values: 
              +   ``'INSERT'`` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
              +   ``'UPDATE'`` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
              +   ``'DELETE'`` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
              
             If you don't specify this parameter, ITE triggers the ``'INSERT'`` operation.
        Payload:
          $ref: '#/components/schemas/Payload'
          description: |-
            Information needed to configure the payload.
             By default, ITE generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression``.
        PayloadField:
          type: string
          description: |-
            The name of the DynamoDB column that receives the action payload.
             If you don't specify this parameter, the name of the DynamoDB column is ``payload``.
        RangeKeyField:
          type: string
          description: The name of the range key (also called the sort key). The ``rangeKeyField`` value must match the sort key of the target DynamoDB table.
        RangeKeyType:
          type: string
          description: |-
            The data type for the range key (also called the sort key), You can specify the following values:
              +   ``'STRING'`` - The range key is a string.
              +   ``'NUMBER'`` - The range key is number.
              
             If you don't specify ``rangeKeyField``, the default value is ``'STRING'``.
        RangeKeyValue:
          type: string
          description: The value of the range key (also called the sort key).
        TableName:
          type: string
          description: The name of the DynamoDB table. The ``tableName`` value must match the table name of the target DynamoDB table.
      required:
        - HashKeyField
        - HashKeyValue
        - TableName
    DynamoDBv2:
      type: object
      additionalProperties: false
      description: |-
        Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
         You must use expressions for all parameters in ``DynamoDBv2Action``. The expressions accept literals, operators, functions, references, and substitution templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``tableName`` parameter can be ``'GreenhouseTemperatureTable'``.
          +  For references, you must specify either variables or input values. For example, the value for the ``tableName`` parameter can be ``$variable.ddbtableName``.
          +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``contentExpression`` parameter in ``Payload`` uses a substitution template. 
          ``'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'`` 
          +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
          ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
          
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
         The value for the ``type`` parameter in ``Payload`` must be ``JSON``.
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
          description: |-
            Information needed to configure the payload.
             By default, ITE generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression``.
        TableName:
          type: string
          description: The name of the DynamoDB table.
      required:
        - TableName
    Firehose:
      type: object
      additionalProperties: false
      description: Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
      properties:
        DeliveryStreamName:
          type: string
          description: The name of the Kinesis Data Firehose delivery stream where the data is written.
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message to an Amazon Data Firehose delivery stream.
        Separator:
          type: string
          description: 'A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: ''\n'' (newline), ''\t'' (tab), ''\r\n'' (Windows newline), '','' (comma).'
          pattern: ([\n\t])|(\r\n)|(,)
      required:
        - DeliveryStreamName
    IotEvents:
      type: object
      additionalProperties: false
      description: Sends an ITE input, passing in information about the detector model instance and the event that triggered the action.
      properties:
        InputName:
          type: string
          description: The name of the ITE input where the data is sent.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message to an ITE input.
      required:
        - InputName
    IotSiteWise:
      type: object
      additionalProperties: false
      description: |-
        Sends information about the detector model instance and the event that triggered the action to a specified asset property in ITSW.
         You must use expressions for all parameters in ``IotSiteWiseAction``. The expressions accept literals, operators, functions, references, and substitutions templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``propertyAlias`` parameter can be ``'/company/windfarm/3/turbine/7/temperature'``.
          +  For references, you must specify either variables or input values. For example, the value for the ``assetId`` parameter can be ``$input.TurbineInput.assetId1``.
          +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``propertyAlias`` parameter uses a substitution template. 
          ``'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'`` 
          
         You must specify either ``propertyAlias`` or both ``assetId`` and ``propertyId`` to identify the target asset property in ITSW.
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
      properties:
        AssetId:
          type: string
          description: The ID of the asset that has the specified property.
        EntryId:
          type: string
          description: A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.
        PropertyAlias:
          type: string
          description: The alias of the asset property.
        PropertyId:
          type: string
          description: The ID of the asset property.
        PropertyValue:
          $ref: '#/components/schemas/AssetPropertyValue'
          description: The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information.
      required:
        - PropertyValue
    IotTopicPublish:
      type: object
      additionalProperties: false
      description: Information required to publish the MQTT message through the IoT message broker.
      properties:
        MqttTopic:
          type: string
          description: The MQTT topic of the message. You can use a string expression that includes variables (``$variable.<variable-name>``) and input values (``$input.<input-name>.<path-to-datum>``) as the topic string.
          minLength: 1
          maxLength: 128
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you publish a message to an IoTCore topic.
      required:
        - MqttTopic
    Lambda:
      type: object
      additionalProperties: false
      properties:
        FunctionArn:
          type: string
          description: The ARN of the Lambda function that is executed.
          minLength: 1
          maxLength: 2048
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message to a Lambda function.
      required:
        - FunctionArn
      description: Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
    Sns:
      type: object
      additionalProperties: false
      description: Information required to publish the Amazon SNS message.
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message as an Amazon SNS push notification.
        TargetArn:
          type: string
          description: The ARN of the Amazon SNS target where the message is sent.
          minLength: 1
          maxLength: 2048
      required:
        - TargetArn
    Sqs:
      type: object
      additionalProperties: false
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message to an Amazon SQS queue.
        QueueUrl:
          type: string
          description: The URL of the SQS queue where the data is written.
        UseBase64:
          type: boolean
          description: Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.
      required:
        - QueueUrl
      description: Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
    Payload:
      type: object
      additionalProperties: false
      description: |-
        Information needed to configure the payload.
         By default, ITE generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression``.
      properties:
        ContentExpression:
          type: string
          description: The content of the payload. You can use a string expression that includes quoted strings (``'<string>'``), variables (``$variable.<variable-name>``), input values (``$input.<input-name>.<path-to-datum>``), string concatenations, and quoted strings that contain ``${}`` as the content. The recommended maximum size of a content expression is 1 KB.
          minLength: 1
        Type:
          type: string
          description: The value of the payload type can be either ``STRING`` or ``JSON``.
      required:
        - ContentExpression
        - Type
    InitializationConfiguration:
      type: object
      description: Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
      additionalProperties: false
      properties:
        DisabledOnInitialization:
          type: boolean
          description: The value must be ``TRUE`` or ``FALSE``. If ``FALSE``, all alarm instances created based on the alarm model are activated. The default value is ``TRUE``.
          default: 'true'
      required:
        - DisabledOnInitialization
    AcknowledgeFlow:
      type: object
      description: Specifies whether to get notified for alarm state changes.
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
          description: The value must be ``TRUE`` or ``FALSE``. If ``TRUE``, you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to ``NORMAL``. If ``FALSE``, you won't receive notifications. The alarm automatically changes to the ``NORMAL`` state when the input property value returns to the specified range.
          default: 'true'
    AssetPropertyValue:
      type: object
      additionalProperties: false
      description: |-
        A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *API Reference*.
         You must use expressions for all parameters in ``AssetPropertyValue``. The expressions accept literals, operators, functions, references, and substitution templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``quality`` parameter can be ``'GOOD'``.
          +  For references, you must specify either variables or input values. For example, the value for the ``quality`` parameter can be ``$input.TemperatureInput.sensorData.quality``.
          
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
      properties:
        Quality:
          type: string
          description: The quality of the asset property value. The value must be ``'GOOD'``, ``'BAD'``, or ``'UNCERTAIN'``.
        Timestamp:
          $ref: '#/components/schemas/AssetPropertyTimestamp'
          description: The timestamp associated with the asset property value. The default is the current event time.
        Value:
          $ref: '#/components/schemas/AssetPropertyVariant'
          description: The value to send to an asset property.
      required:
        - Value
    AssetPropertyTimestamp:
      type: object
      additionalProperties: false
      description: |-
        A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *API Reference*.
         You must use expressions for all parameters in ``AssetPropertyTimestamp``. The expressions accept literals, operators, functions, references, and substitution templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``timeInSeconds`` parameter can be ``'1586400675'``.
          +  For references, you must specify either variables or input values. For example, the value for the ``offsetInNanos`` parameter can be ``$variable.time``.
          +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
         In the following example, the value for the ``timeInSeconds`` parameter uses a substitution template.
          ``'${$input.TemperatureInput.sensorData.timestamp / 1000}'`` 
          
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
      properties:
        OffsetInNanos:
          type: string
          description: The nanosecond offset converted from ``timeInSeconds``. The valid range is between 0-999999999.
        TimeInSeconds:
          type: string
          description: The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.
      required:
        - TimeInSeconds
    AssetPropertyVariant:
      type: object
      additionalProperties: false
      description: |-
        A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *API Reference*.
         You must use expressions for all parameters in ``AssetPropertyVariant``. The expressions accept literals, operators, functions, references, and substitution templates.
          **Examples**
         +  For literal values, the expressions must contain single quotes. For example, the value for the ``integerValue`` parameter can be ``'100'``.
          +  For references, you must specify either variables or parameters. For example, the value for the ``booleanValue`` parameter can be ``$variable.offline``.
          +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. 
         In the following example, the value for the ``doubleValue`` parameter uses a substitution template. 
          ``'${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}'`` 
          
         For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
         You must specify one of the following value types, depending on the ``dataType`` of the specified asset property. For more information, see [AssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html) in the *API Reference*.
      properties:
        BooleanValue:
          type: string
          description: The asset property value is a Boolean value that must be ``'TRUE'`` or ``'FALSE'``. You must use an expression, and the evaluated result should be a Boolean value.
        DoubleValue:
          type: string
          description: The asset property value is a double. You must use an expression, and the evaluated result should be a double.
        IntegerValue:
          type: string
          description: The asset property value is an integer. You must use an expression, and the evaluated result should be an integer.
        StringValue:
          type: string
          description: The asset property value is a string. You must use an expression, and the evaluated result should be a string.
    Tag:
      type: object
      additionalProperties: false
      description: Metadata that can be used to manage the resource.
      properties:
        Key:
          description: The tag's key.
          type: string
        Value:
          description: The tag's value.
          type: string
      required:
        - Value
        - Key
    AlarmModel:
      type: object
      properties:
        AlarmModelName:
          type: string
          description: The name of the alarm model.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z0-9_-]+$
        AlarmModelDescription:
          type: string
          description: The description of the alarm model.
          maxLength: 1024
        RoleArn:
          type: string
          description: The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          minLength: 1
          maxLength: 2048
        Key:
          type: string
          description: An input attribute used as a key to create an alarm. ITE routes [inputs](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html) associated with this key to the alarm.
          minLength: 1
          maxLength: 128
          pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
        Severity:
          type: integer
          description: A non-negative integer that reflects the severity level of the alarm.
          minimum: 0
          maximum: 2147483647
        AlarmRule:
          $ref: '#/components/schemas/AlarmRule'
          description: Defines when your alarm is invoked.
        AlarmEventActions:
          $ref: '#/components/schemas/AlarmEventActions'
          description: Contains information about one or more alarm actions.
        AlarmCapabilities:
          $ref: '#/components/schemas/AlarmCapabilities'
          description: Contains the configuration information of alarm state changes.
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see [Tagging your resources](https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html) in the *Developer Guide*.
             You can create up to 50 tags for one alarm model.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RoleArn
        - AlarmRule
      x-stackql-resource-name: alarm_model
      description: Represents an alarm model to monitor an ITE input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see [Create an alarm model](https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html) in the *Developer Guide*.
      x-type-name: AWS::IoTEvents::AlarmModel
      x-stackql-primary-identifier:
        - AlarmModelName
      x-create-only-properties:
        - AlarmModelName
        - Key
      x-required-properties:
        - RoleArn
        - AlarmRule
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - iotevents:UntagResource
          - iotevents:TagResource
          - iotevents:ListTagsForResource
      x-required-permissions:
        create:
          - iotevents:CreateAlarmModel
          - iotevents:UpdateInputRouting
          - iotevents:DescribeAlarmModel
          - iotevents:ListTagsForResource
          - iotevents:TagResource
          - iam:PassRole
        read:
          - iotevents:DescribeAlarmModel
          - iotevents:ListTagsForResource
        update:
          - iotevents:UpdateAlarmModel
          - iotevents:UpdateInputRouting
          - iotevents:DescribeAlarmModel
          - iotevents:ListTagsForResource
          - iotevents:UntagResource
          - iotevents:TagResource
          - iam:PassRole
        delete:
          - iotevents:DeleteAlarmModel
          - iotevents:DescribeAlarmModel
        list:
          - iotevents:ListAlarmModels
    DetectorModelDefinition:
      type: object
      additionalProperties: false
      description: Information that defines how a detector operates.
      properties:
        InitialStateName:
          type: string
          description: The state that is entered at the creation of each detector (instance).
          minLength: 1
          maxLength: 128
        States:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Information about the states of the detector.
          minItems: 1
          items:
            $ref: '#/components/schemas/State'
      required:
        - States
        - InitialStateName
    State:
      type: object
      additionalProperties: false
      description: Information that defines a state of a detector.
      properties:
        OnEnter:
          $ref: '#/components/schemas/OnEnter'
          description: When entering this state, perform these ``actions`` if the ``condition`` is TRUE.
        OnExit:
          $ref: '#/components/schemas/OnExit'
          description: When exiting this state, perform these ``actions`` if the specified ``condition`` is ``TRUE``.
        OnInput:
          $ref: '#/components/schemas/OnInput'
          description: When an input is received and the ``condition`` is TRUE, perform the specified ``actions``.
        StateName:
          type: string
          minLength: 1
          maxLength: 128
          description: The name of the state.
      required:
        - StateName
    OnEnter:
      type: object
      additionalProperties: false
      description: When entering this state, perform these ``actions`` if the ``condition`` is TRUE.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the actions that are performed when the state is entered and the ``condition`` is ``TRUE``.
          items:
            $ref: '#/components/schemas/Event'
    OnExit:
      type: object
      additionalProperties: false
      description: When exiting this state, perform these ``actions`` if the specified ``condition`` is ``TRUE``.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the ``actions`` that are performed when the state is exited and the ``condition`` is ``TRUE``.
          items:
            $ref: '#/components/schemas/Event'
    OnInput:
      type: object
      additionalProperties: false
      description: Specifies the actions performed when the ``condition`` evaluates to TRUE.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the actions performed when the ``condition`` evaluates to TRUE.
          items:
            $ref: '#/components/schemas/Event'
        TransitionEvents:
          type: array
          uniqueItems: false
          x-insertionOrder: true
          description: Specifies the actions performed, and the next state entered, when a ``condition`` evaluates to TRUE.
          items:
            $ref: '#/components/schemas/TransitionEvent'
    Event:
      type: object
      additionalProperties: false
      description: Specifies the ``actions`` to be performed when the ``condition`` evaluates to TRUE.
      properties:
        Actions:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: The actions to be performed.
          items:
            $ref: '#/components/schemas/Action'
        Condition:
          type: string
          description: Optional. The Boolean expression that, when TRUE, causes the ``actions`` to be performed. If not present, the actions are performed (=TRUE). If the expression result is not a Boolean value, the actions are not performed (=FALSE).
          maxLength: 512
        EventName:
          type: string
          description: The name of the event.
          maxLength: 128
      required:
        - EventName
    TransitionEvent:
      type: object
      additionalProperties: false
      description: Specifies the actions performed and the next state entered when a ``condition`` evaluates to TRUE.
      properties:
        Actions:
          type: array
          description: The actions to be performed.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Action'
        Condition:
          type: string
          description: Required. A Boolean expression that when TRUE causes the actions to be performed and the ``nextState`` to be entered.
          maxLength: 512
        EventName:
          type: string
          description: The name of the transition event.
          minLength: 1
          maxLength: 128
        NextState:
          type: string
          description: The next state to enter.
          minLength: 1
          maxLength: 128
      required:
        - Condition
        - EventName
        - NextState
    Action:
      type: object
      additionalProperties: false
      description: An action to be performed when the ``condition`` is TRUE.
      properties:
        ClearTimer:
          $ref: '#/components/schemas/ClearTimer'
          description: Information needed to clear the timer.
        DynamoDB:
          $ref: '#/components/schemas/DynamoDB'
          description: >-
            Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see
            [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *Developer Guide*.
        DynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2'
          description: >-
            Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see
            [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *Developer Guide*.
        Firehose:
          $ref: '#/components/schemas/Firehose'
          description: Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        IotEvents:
          $ref: '#/components/schemas/IotEvents'
          description: Sends ITE input, which passes information about the detector model instance and the event that triggered the action.
        IotSiteWise:
          $ref: '#/components/schemas/IotSiteWise'
          description: Sends information about the detector model instance and the event that triggered the action to an asset property in ITSW .
        IotTopicPublish:
          $ref: '#/components/schemas/IotTopicPublish'
          description: Publishes an MQTT message with the given topic to the IoT message broker.
        Lambda:
          $ref: '#/components/schemas/Lambda'
          description: Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        ResetTimer:
          $ref: '#/components/schemas/ResetTimer'
          description: Information needed to reset the timer.
        SetTimer:
          $ref: '#/components/schemas/SetTimer'
          description: Information needed to set the timer.
        SetVariable:
          $ref: '#/components/schemas/SetVariable'
          description: Sets a variable to a specified value.
        Sns:
          $ref: '#/components/schemas/Sns'
          description: Sends an Amazon SNS message.
        Sqs:
          $ref: '#/components/schemas/Sqs'
          description: Sends an Amazon SNS message.
    ClearTimer:
      type: object
      additionalProperties: false
      description: Information needed to clear the timer.
      properties:
        TimerName:
          type: string
          minLength: 1
          maxLength: 128
          description: The name of the timer to clear.
      required:
        - TimerName
    ResetTimer:
      type: object
      additionalProperties: false
      description: Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.
      properties:
        TimerName:
          type: string
          description: The name of the timer to reset.
          minLength: 1
          maxLength: 128
      required:
        - TimerName
    SetTimer:
      type: object
      additionalProperties: false
      description: Information needed to set the timer.
      properties:
        DurationExpression:
          type: string
          description: The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (``$variable.<variable-name>``), and input values (``$input.<input-name>.<path-to-datum>``) as the duration. The range of the duration is 1-31622400 seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated result of the duration is rounded down to the nearest whole number.
          minLength: 1
          maxLength: 1024
        Seconds:
          type: integer
          description: The number of seconds until the timer expires. The minimum value is 60 seconds to ensure accuracy. The maximum value is 31622400 seconds.
          minimum: 60
          maximum: 31622400
        TimerName:
          type: string
          description: The name of the timer.
          minLength: 1
          maxLength: 128
      required:
        - TimerName
    SetVariable:
      type: object
      additionalProperties: false
      description: Information about the variable and its new value.
      properties:
        Value:
          type: string
          description: The new value of the variable.
          minLength: 1
          maxLength: 1024
        VariableName:
          type: string
          description: The name of the variable.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      required:
        - Value
        - VariableName
    DetectorModel:
      type: object
      properties:
        DetectorModelDefinition:
          $ref: '#/components/schemas/DetectorModelDefinition'
          description: Information that defines how a detector operates.
        DetectorModelDescription:
          type: string
          description: A brief description of the detector model.
          maxLength: 1024
        DetectorModelName:
          type: string
          description: The name of the detector model.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z0-9_-]+$
        EvaluationMethod:
          type: string
          description: Information about the order in which events are evaluated and how actions are executed.
          enum:
            - BATCH
            - SERIAL
        Key:
          type: string
          description: |-
            The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. ITE can continue to route input to its corresponding detector instance based on this identifying information. 
             This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.
          minLength: 1
          maxLength: 128
          pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
        RoleArn:
          type: string
          description: The ARN of the role that grants permission to ITE to perform its operations.
          minLength: 1
          maxLength: 2048
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            An array of key-value pairs to apply to this resource.
             For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DetectorModelDefinition
        - RoleArn
      x-stackql-resource-name: detector_model
      description: >-
        The AWS::IoTEvents::DetectorModel resource creates a detector model. You create a *detector model* (a model of your equipment or process) using *states*. For each state, you define conditional (Boolean) logic that evaluates the incoming inputs to detect significant events. When an event is detected, it can change the state or trigger custom-built or predefined actions using other AWS services. You can define additional events that trigger actions when entering or exiting a state and,
        optionally, when a condition is met. For more information, see [How to Use](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *Developer Guide*.
          When you successfully update a detector model (using the ITE console, ITE API or CLI commands, or CFN) all detector instances created by the model are reset to their initial states. (The detector's ``state``, and the values of any variables and timers are reset.)
         When you successfully update a detector model (using the ITE console, ITE API or CLI commands, or CFN) the version number of the detector model is incremented. (A detector model with version number 1 before the update has version number 2 after the update succeeds.)
         If you attempt to update a detector model using CFN and the update does not succeed, the system may, in some cases, restore the original detector model. When this occurs, the detector model's version is incremented twice (for example, from version 1 to version 3) and the detector instances are reset.
         Also, be aware that if you attempt to update several detector models at once using CFN, some updates may succeed and others fail. In this case, the effects on each detector model's detector instances and version number depend on whether the update succeeded or failed, with the results as stated.
      x-type-name: AWS::IoTEvents::DetectorModel
      x-stackql-primary-identifier:
        - DetectorModelName
      x-create-only-properties:
        - DetectorModelName
        - Key
      x-required-properties:
        - DetectorModelDefinition
        - RoleArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - iotevents:UntagResource
          - iotevents:TagResource
          - iotevents:ListTagsForResource
      x-required-permissions:
        create:
          - iotevents:CreateDetectorModel
          - iotevents:UpdateInputRouting
          - iotevents:DescribeDetectorModel
          - iotevents:ListTagsForResource
          - iotevents:TagResource
          - iam:PassRole
        read:
          - iotevents:DescribeDetectorModel
          - iotevents:ListTagsForResource
        update:
          - iotevents:UpdateDetectorModel
          - iotevents:UpdateInputRouting
          - iotevents:DescribeDetectorModel
          - iotevents:ListTagsForResource
          - iotevents:UntagResource
          - iotevents:TagResource
          - iam:PassRole
        delete:
          - iotevents:DeleteDetectorModel
          - iotevents:DescribeDetectorModel
        list:
          - iotevents:ListDetectorModels
    InputDefinition:
      type: object
      additionalProperties: false
      description: The definition of the input.
      properties:
        Attributes:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the ITE system using ``BatchPutMessage``. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the ``condition`` expressions used by detectors that monitor this input.
          minItems: 1
          maxItems: 200
          items:
            $ref: '#/components/schemas/Attribute'
      required:
        - Attributes
    Attribute:
      type: object
      additionalProperties: false
      description: The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the ITE system using ``BatchPutMessage``. Each such message contains a JSON payload. Those attributes (and their paired values) specified here are available for use in the ``condition`` expressions used by detectors.
      properties:
        JsonPath:
          description: |-
            An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to ITE (``BatchPutMessage``). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the ``condition`` expressions used by detectors. 
             Syntax: ``<field-name>.<field-name>...``
          minLength: 1
          maxLength: 128
          pattern: ^((`[a-zA-Z0-9_\- ]+`)|([a-zA-Z0-9_\-]+))(\.((`[a-zA-Z0-9_\- ]+`)|([a-zA-Z0-9_\-]+)))*$
          type: string
      required:
        - JsonPath
    Input:
      type: object
      properties:
        InputDefinition:
          $ref: '#/components/schemas/InputDefinition'
          description: The definition of the input.
        InputDescription:
          description: A brief description of the input.
          minLength: 1
          maxLength: 1024
          type: string
        InputName:
          description: The name of the input.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            An array of key-value pairs to apply to this resource.
             For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - InputDefinition
      x-stackql-resource-name: input
      description: The AWS::IoTEvents::Input resource creates an input. To monitor your devices and processes, they must have a way to get telemetry data into ITE. This is done by sending messages as *inputs* to ITE. For more information, see [How to Use](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *Developer Guide*.
      x-type-name: AWS::IoTEvents::Input
      x-stackql-primary-identifier:
        - InputName
      x-create-only-properties:
        - InputName
      x-required-properties:
        - InputDefinition
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - iotevents:UntagResource
          - iotevents:TagResource
          - iotevents:ListTagsForResource
      x-required-permissions:
        create:
          - iotevents:CreateInput
          - iotevents:TagResource
          - iotevents:DescribeInput
          - iotevents:ListTagsForResource
        read:
          - iotevents:DescribeInput
          - iotevents:ListTagsForResource
        update:
          - iotevents:UpdateInput
          - iotevents:DescribeInput
          - iotevents:ListTagsForResource
          - iotevents:UntagResource
          - iotevents:TagResource
        delete:
          - iotevents:DeleteInput
          - iotevents:DescribeInput
        list:
          - iotevents:ListInputs
    CreateAlarmModelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AlarmModelName:
              type: string
              description: The name of the alarm model.
              minLength: 1
              maxLength: 128
              pattern: ^[a-zA-Z0-9_-]+$
            AlarmModelDescription:
              type: string
              description: The description of the alarm model.
              maxLength: 1024
            RoleArn:
              type: string
              description: The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
              minLength: 1
              maxLength: 2048
            Key:
              type: string
              description: An input attribute used as a key to create an alarm. ITE routes [inputs](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html) associated with this key to the alarm.
              minLength: 1
              maxLength: 128
              pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
            Severity:
              type: integer
              description: A non-negative integer that reflects the severity level of the alarm.
              minimum: 0
              maximum: 2147483647
            AlarmRule:
              $ref: '#/components/schemas/AlarmRule'
              description: Defines when your alarm is invoked.
            AlarmEventActions:
              $ref: '#/components/schemas/AlarmEventActions'
              description: Contains information about one or more alarm actions.
            AlarmCapabilities:
              $ref: '#/components/schemas/AlarmCapabilities'
              description: Contains the configuration information of alarm state changes.
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              description: |-
                A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see [Tagging your resources](https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html) in the *Developer Guide*.
                 You can create up to 50 tags for one alarm model.
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAlarmModelRequest
      type: object
      required: []
    CreateDetectorModelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DetectorModelDefinition:
              $ref: '#/components/schemas/DetectorModelDefinition'
              description: Information that defines how a detector operates.
            DetectorModelDescription:
              type: string
              description: A brief description of the detector model.
              maxLength: 1024
            DetectorModelName:
              type: string
              description: The name of the detector model.
              minLength: 1
              maxLength: 128
              pattern: ^[a-zA-Z0-9_-]+$
            EvaluationMethod:
              type: string
              description: Information about the order in which events are evaluated and how actions are executed.
              enum:
                - BATCH
                - SERIAL
            Key:
              type: string
              description: |-
                The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. ITE can continue to route input to its corresponding detector instance based on this identifying information. 
                 This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.
              minLength: 1
              maxLength: 128
              pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
            RoleArn:
              type: string
              description: The ARN of the role that grants permission to ITE to perform its operations.
              minLength: 1
              maxLength: 2048
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              description: |-
                An array of key-value pairs to apply to this resource.
                 For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDetectorModelRequest
      type: object
      required: []
    CreateInputRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            InputDefinition:
              $ref: '#/components/schemas/InputDefinition'
              description: The definition of the input.
            InputDescription:
              description: A brief description of the input.
              minLength: 1
              maxLength: 1024
              type: string
            InputName:
              description: The name of the input.
              minLength: 1
              maxLength: 128
              pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
              type: string
            Tags:
              type: array
              uniqueItems: false
              x-insertionOrder: false
              description: |-
                An array of key-value pairs to apply to this resource.
                 For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateInputRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    alarm_models:
      name: alarm_models
      id: aws.iotevents.alarm_models
      x-cfn-schema-name: AlarmModel
      x-cfn-type-name: AWS::IoTEvents::AlarmModel
      x-identifiers:
        - AlarmModelName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AlarmModel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::AlarmModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::AlarmModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::AlarmModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/alarm_models/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/alarm_models/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/alarm_models/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AlarmModelName') as alarm_model_name,
              JSON_EXTRACT(Properties, '$.AlarmModelDescription') as alarm_model_description,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.Severity') as severity,
              JSON_EXTRACT(Properties, '$.AlarmRule') as alarm_rule,
              JSON_EXTRACT(Properties, '$.AlarmEventActions') as alarm_event_actions,
              JSON_EXTRACT(Properties, '$.AlarmCapabilities') as alarm_capabilities,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
              AND data__Identifier = '<AlarmModelName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AlarmModelName') as alarm_model_name,
                JSON_EXTRACT(detail.Properties, '$.AlarmModelDescription') as alarm_model_description,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Key') as key,
                JSON_EXTRACT(detail.Properties, '$.Severity') as severity,
                JSON_EXTRACT(detail.Properties, '$.AlarmRule') as alarm_rule,
                JSON_EXTRACT(detail.Properties, '$.AlarmEventActions') as alarm_event_actions,
                JSON_EXTRACT(detail.Properties, '$.AlarmCapabilities') as alarm_capabilities,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                AND detail.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AlarmModelName') as alarm_model_name,
                  json_extract_path_text(Properties, 'AlarmModelDescription') as alarm_model_description,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Key') as key,
                  json_extract_path_text(Properties, 'Severity') as severity,
                  json_extract_path_text(Properties, 'AlarmRule') as alarm_rule,
                  json_extract_path_text(Properties, 'AlarmEventActions') as alarm_event_actions,
                  json_extract_path_text(Properties, 'AlarmCapabilities') as alarm_capabilities,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
                  AND data__Identifier = '<AlarmModelName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AlarmModelName') as alarm_model_name,
                    json_extract_path_text(detail.Properties, 'AlarmModelDescription') as alarm_model_description,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Key') as key,
                    json_extract_path_text(detail.Properties, 'Severity') as severity,
                    json_extract_path_text(detail.Properties, 'AlarmRule') as alarm_rule,
                    json_extract_path_text(detail.Properties, 'AlarmEventActions') as alarm_event_actions,
                    json_extract_path_text(detail.Properties, 'AlarmCapabilities') as alarm_capabilities,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                    AND detail.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                    AND listing.region = 'us-east-1'
    alarm_models_list_only:
      name: alarm_models_list_only
      id: aws.iotevents.alarm_models_list_only
      x-cfn-schema-name: AlarmModel
      x-cfn-type-name: AWS::IoTEvents::AlarmModel
      x-identifiers:
        - AlarmModelName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AlarmModelName') as alarm_model_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AlarmModelName') as alarm_model_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
                AND region = 'us-east-1'
    alarm_model_tags:
      name: alarm_model_tags
      id: aws.iotevents.alarm_model_tags
      x-cfn-schema-name: AlarmModel
      x-cfn-type-name: AWS::IoTEvents::AlarmModel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AlarmModelName') as alarm_model_name,
              JSON_EXTRACT(detail.Properties, '$.AlarmModelDescription') as alarm_model_description,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.Key') as key,
              JSON_EXTRACT(detail.Properties, '$.Severity') as severity,
              JSON_EXTRACT(detail.Properties, '$.AlarmRule') as alarm_rule,
              JSON_EXTRACT(detail.Properties, '$.AlarmEventActions') as alarm_event_actions,
              JSON_EXTRACT(detail.Properties, '$.AlarmCapabilities') as alarm_capabilities
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTEvents::AlarmModel'
              AND detail.data__TypeName = 'AWS::IoTEvents::AlarmModel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AlarmModelName') as alarm_model_name,
                json_extract_path_text(detail.Properties, 'AlarmModelDescription') as alarm_model_description,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'Key') as key,
                json_extract_path_text(detail.Properties, 'Severity') as severity,
                json_extract_path_text(detail.Properties, 'AlarmRule') as alarm_rule,
                json_extract_path_text(detail.Properties, 'AlarmEventActions') as alarm_event_actions,
                json_extract_path_text(detail.Properties, 'AlarmCapabilities') as alarm_capabilities
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                AND detail.data__TypeName = 'AWS::IoTEvents::AlarmModel'
                AND listing.region = 'us-east-1'
    detector_models:
      name: detector_models
      id: aws.iotevents.detector_models
      x-cfn-schema-name: DetectorModel
      x-cfn-type-name: AWS::IoTEvents::DetectorModel
      x-identifiers:
        - DetectorModelName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DetectorModel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::DetectorModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::DetectorModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::DetectorModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/detector_models/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/detector_models/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/detector_models/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DetectorModelDefinition') as detector_model_definition,
              JSON_EXTRACT(Properties, '$.DetectorModelDescription') as detector_model_description,
              JSON_EXTRACT(Properties, '$.DetectorModelName') as detector_model_name,
              JSON_EXTRACT(Properties, '$.EvaluationMethod') as evaluation_method,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
              AND data__Identifier = '<DetectorModelName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DetectorModelDefinition') as detector_model_definition,
                JSON_EXTRACT(detail.Properties, '$.DetectorModelDescription') as detector_model_description,
                JSON_EXTRACT(detail.Properties, '$.DetectorModelName') as detector_model_name,
                JSON_EXTRACT(detail.Properties, '$.EvaluationMethod') as evaluation_method,
                JSON_EXTRACT(detail.Properties, '$.Key') as key,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                AND detail.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DetectorModelDefinition') as detector_model_definition,
                  json_extract_path_text(Properties, 'DetectorModelDescription') as detector_model_description,
                  json_extract_path_text(Properties, 'DetectorModelName') as detector_model_name,
                  json_extract_path_text(Properties, 'EvaluationMethod') as evaluation_method,
                  json_extract_path_text(Properties, 'Key') as key,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
                  AND data__Identifier = '<DetectorModelName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DetectorModelDefinition') as detector_model_definition,
                    json_extract_path_text(detail.Properties, 'DetectorModelDescription') as detector_model_description,
                    json_extract_path_text(detail.Properties, 'DetectorModelName') as detector_model_name,
                    json_extract_path_text(detail.Properties, 'EvaluationMethod') as evaluation_method,
                    json_extract_path_text(detail.Properties, 'Key') as key,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                    AND detail.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                    AND listing.region = 'us-east-1'
    detector_models_list_only:
      name: detector_models_list_only
      id: aws.iotevents.detector_models_list_only
      x-cfn-schema-name: DetectorModel
      x-cfn-type-name: AWS::IoTEvents::DetectorModel
      x-identifiers:
        - DetectorModelName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DetectorModelName') as detector_model_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DetectorModelName') as detector_model_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
                AND region = 'us-east-1'
    detector_model_tags:
      name: detector_model_tags
      id: aws.iotevents.detector_model_tags
      x-cfn-schema-name: DetectorModel
      x-cfn-type-name: AWS::IoTEvents::DetectorModel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DetectorModelDefinition') as detector_model_definition,
              JSON_EXTRACT(detail.Properties, '$.DetectorModelDescription') as detector_model_description,
              JSON_EXTRACT(detail.Properties, '$.DetectorModelName') as detector_model_name,
              JSON_EXTRACT(detail.Properties, '$.EvaluationMethod') as evaluation_method,
              JSON_EXTRACT(detail.Properties, '$.Key') as key,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTEvents::DetectorModel'
              AND detail.data__TypeName = 'AWS::IoTEvents::DetectorModel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DetectorModelDefinition') as detector_model_definition,
                json_extract_path_text(detail.Properties, 'DetectorModelDescription') as detector_model_description,
                json_extract_path_text(detail.Properties, 'DetectorModelName') as detector_model_name,
                json_extract_path_text(detail.Properties, 'EvaluationMethod') as evaluation_method,
                json_extract_path_text(detail.Properties, 'Key') as key,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                AND detail.data__TypeName = 'AWS::IoTEvents::DetectorModel'
                AND listing.region = 'us-east-1'
    inputs:
      name: inputs
      id: aws.iotevents.inputs
      x-cfn-schema-name: Input
      x-cfn-type-name: AWS::IoTEvents::Input
      x-identifiers:
        - InputName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Input&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::Input"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::Input"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTEvents::Input"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/inputs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/inputs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/inputs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.InputDefinition') as input_definition,
              JSON_EXTRACT(Properties, '$.InputDescription') as input_description,
              JSON_EXTRACT(Properties, '$.InputName') as input_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::Input'
              AND data__Identifier = '<InputName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.InputDefinition') as input_definition,
                JSON_EXTRACT(detail.Properties, '$.InputDescription') as input_description,
                JSON_EXTRACT(detail.Properties, '$.InputName') as input_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTEvents::Input'
                AND detail.data__TypeName = 'AWS::IoTEvents::Input'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'InputDefinition') as input_definition,
                  json_extract_path_text(Properties, 'InputDescription') as input_description,
                  json_extract_path_text(Properties, 'InputName') as input_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::Input'
                  AND data__Identifier = '<InputName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'InputDefinition') as input_definition,
                    json_extract_path_text(detail.Properties, 'InputDescription') as input_description,
                    json_extract_path_text(detail.Properties, 'InputName') as input_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTEvents::Input'
                    AND detail.data__TypeName = 'AWS::IoTEvents::Input'
                    AND listing.region = 'us-east-1'
    inputs_list_only:
      name: inputs_list_only
      id: aws.iotevents.inputs_list_only
      x-cfn-schema-name: Input
      x-cfn-type-name: AWS::IoTEvents::Input
      x-identifiers:
        - InputName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InputName') as input_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::Input'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InputName') as input_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::Input'
                AND region = 'us-east-1'
    input_tags:
      name: input_tags
      id: aws.iotevents.input_tags
      x-cfn-schema-name: Input
      x-cfn-type-name: AWS::IoTEvents::Input
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.InputDefinition') as input_definition,
              JSON_EXTRACT(detail.Properties, '$.InputDescription') as input_description,
              JSON_EXTRACT(detail.Properties, '$.InputName') as input_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTEvents::Input'
              AND detail.data__TypeName = 'AWS::IoTEvents::Input'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'InputDefinition') as input_definition,
                json_extract_path_text(detail.Properties, 'InputDescription') as input_description,
                json_extract_path_text(detail.Properties, 'InputName') as input_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTEvents::Input'
                AND detail.data__TypeName = 'AWS::IoTEvents::Input'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AlarmModel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAlarmModel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAlarmModelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DetectorModel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDetectorModel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDetectorModelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Input&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateInput
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateInputRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
