openapi: 3.0.0
info:
  title: IoTEvents
  version: 1.0.0
paths: {}
components:
  schemas:
    AlarmRule:
      type: object
      description: Defines when your alarm is invoked.
      additionalProperties: false
      properties:
        SimpleRule:
          $ref: '#/components/schemas/SimpleRule'
    SimpleRule:
      type: object
      additionalProperties: false
      description: A rule that compares an input property value to a threshold value with a comparison operator.
      properties:
        InputProperty:
          type: string
          minLength: 1
          maxLength: 512
          description: The value on the left side of the comparison operator. You can specify an AWS IoT Events input attribute as an input property.
        ComparisonOperator:
          type: string
          enum:
            - GREATER
            - GREATER_OR_EQUAL
            - LESS
            - LESS_OR_EQUAL
            - EQUAL
            - NOT_EQUAL
          description: The comparison operator.
        Threshold:
          type: string
          minLength: 1
          maxLength: 512
          description: The value on the right side of the comparison operator. You can enter a number or specify an AWS IoT Events input attribute.
      required:
        - InputProperty
        - ComparisonOperator
        - Threshold
    AlarmEventActions:
      type: object
      additionalProperties: false
      description: Contains information about one or more alarm actions.
      properties:
        AlarmActions:
          $ref: '#/components/schemas/AlarmActions'
    AlarmCapabilities:
      type: object
      description: Contains the configuration information of alarm state changes
      additionalProperties: false
      properties:
        InitializationConfiguration:
          $ref: '#/components/schemas/InitializationConfiguration'
        AcknowledgeFlow:
          $ref: '#/components/schemas/AcknowledgeFlow'
    AlarmActions:
      type: array
      description: Specifies one or more supported actions to receive notifications when the alarm state changes.
      uniqueItems: false
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/AlarmAction'
    AlarmAction:
      type: object
      additionalProperties: false
      description: The actions to be performed.
      properties:
        DynamoDB:
          $ref: '#/components/schemas/DynamoDB'
        DynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2'
        Firehose:
          $ref: '#/components/schemas/Firehose'
        IotEvents:
          $ref: '#/components/schemas/IotEvents'
        IotSiteWise:
          $ref: '#/components/schemas/IotSiteWise'
        IotTopicPublish:
          $ref: '#/components/schemas/IotTopicPublish'
        Lambda:
          $ref: '#/components/schemas/Lambda'
        Sns:
          $ref: '#/components/schemas/Sns'
        Sqs:
          $ref: '#/components/schemas/Sqs'
    DynamoDB:
      type: object
      additionalProperties: false
      description: >-
        Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see
        [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
      properties:
        HashKeyField:
          type: string
          description: The name of the hash key (also called the partition key).
        HashKeyType:
          type: string
          description: |-
            The data type for the hash key (also called the partition key). You can specify the following values:

            * `STRING` - The hash key is a string.

            * `NUMBER` - The hash key is a number.

            If you don't specify `hashKeyType`, the default value is `STRING`.
        HashKeyValue:
          type: string
          description: The value of the hash key (also called the partition key).
        Operation:
          type: string
          description: |-
            The type of operation to perform. You can specify the following values:

            * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.

            * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.

            * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.

            If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
        Payload:
          $ref: '#/components/schemas/Payload'
        PayloadField:
          type: string
          description: |-
            The name of the DynamoDB column that receives the action payload.

            If you don't specify this parameter, the name of the DynamoDB column is `payload`.
        RangeKeyField:
          type: string
          description: The name of the range key (also called the sort key).
        RangeKeyType:
          type: string
          description: |-
            The data type for the range key (also called the sort key), You can specify the following values:

            * `STRING` - The range key is a string.

            * `NUMBER` - The range key is number.

            If you don't specify `rangeKeyField`, the default value is `STRING`.
        RangeKeyValue:
          type: string
          description: The value of the range key (also called the sort key).
        TableName:
          type: string
          description: The name of the DynamoDB table.
      required:
        - HashKeyField
        - HashKeyValue
        - TableName
    DynamoDBv2:
      type: object
      additionalProperties: false
      description: |-
        Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.

        You can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
        TableName:
          type: string
          description: The name of the DynamoDB table.
      required:
        - TableName
    Firehose:
      type: object
      additionalProperties: false
      description: Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
      properties:
        DeliveryStreamName:
          type: string
          description: The name of the Kinesis Data Firehose delivery stream where the data is written.
        Payload:
          $ref: '#/components/schemas/Payload'
        Separator:
          type: string
          description: 'A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: ''\n'' (newline), ''\t'' (tab), ''\r\n'' (Windows newline), '','' (comma).'
          pattern: ([\n\t])|(\r\n)|(,)
      required:
        - DeliveryStreamName
    IotEvents:
      type: object
      additionalProperties: false
      description: Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
      properties:
        InputName:
          type: string
          description: The name of the AWS IoT Events input where the data is sent.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
        Payload:
          $ref: '#/components/schemas/Payload'
      required:
        - InputName
    IotSiteWise:
      type: object
      additionalProperties: false
      description: Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.
      properties:
        AssetId:
          type: string
          description: The ID of the asset that has the specified property. You can specify an expression.
        EntryId:
          type: string
          description: A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
        PropertyAlias:
          type: string
          description: The alias of the asset property. You can also specify an expression.
        PropertyId:
          type: string
          description: The ID of the asset property. You can specify an expression.
        PropertyValue:
          $ref: '#/components/schemas/AssetPropertyValue'
      required:
        - PropertyValue
    IotTopicPublish:
      type: object
      additionalProperties: false
      description: Information required to publish the MQTT message through the AWS IoT message broker.
      properties:
        MqttTopic:
          type: string
          description: The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.
          minLength: 1
          maxLength: 128
        Payload:
          $ref: '#/components/schemas/Payload'
      required:
        - MqttTopic
    Lambda:
      type: object
      additionalProperties: false
      properties:
        FunctionArn:
          type: string
          description: The ARN of the Lambda function that is executed.
          minLength: 1
          maxLength: 2048
        Payload:
          $ref: '#/components/schemas/Payload'
      required:
        - FunctionArn
    Sns:
      type: object
      additionalProperties: false
      description: Information required to publish the Amazon SNS message.
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
        TargetArn:
          type: string
          description: The ARN of the Amazon SNS target where the message is sent.
          minLength: 1
          maxLength: 2048
      required:
        - TargetArn
    Sqs:
      type: object
      additionalProperties: false
      properties:
        Payload:
          $ref: '#/components/schemas/Payload'
        QueueUrl:
          type: string
          description: The URL of the SQS queue where the data is written.
        UseBase64:
          type: boolean
          description: Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
      required:
        - QueueUrl
    Payload:
      type: object
      additionalProperties: false
      description: |-
        Information needed to configure the payload.

        By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.
      properties:
        ContentExpression:
          type: string
          description: The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.
          minLength: 1
        Type:
          type: string
          description: The value of the payload type can be either `STRING` or `JSON`.
      required:
        - ContentExpression
        - Type
    InitializationConfiguration:
      type: object
      description: Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
      additionalProperties: false
      properties:
        DisabledOnInitialization:
          type: boolean
          description: The value must be TRUE or FALSE. If FALSE, all alarm instances created based on the alarm model are activated. The default value is TRUE.
          default: 'true'
      required:
        - DisabledOnInitialization
    AcknowledgeFlow:
      type: object
      description: Specifies whether to get notified for alarm state changes.
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
          description: The value must be TRUE or FALSE. If TRUE, you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to NORMAL. If FALSE, you won't receive notifications. The alarm automatically changes to the NORMAL state when the input property value returns to the specified range.
          default: 'true'
    AssetPropertyValue:
      type: object
      additionalProperties: false
      description: A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.
      properties:
        Quality:
          type: string
          description: The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.
        Timestamp:
          $ref: '#/components/schemas/AssetPropertyTimestamp'
        Value:
          $ref: '#/components/schemas/AssetPropertyVariant'
      required:
        - Value
    AssetPropertyTimestamp:
      type: object
      additionalProperties: false
      description: A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.
      properties:
        OffsetInNanos:
          type: string
          description: The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.
        TimeInSeconds:
          type: string
          description: The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.
      required:
        - TimeInSeconds
    AssetPropertyVariant:
      type: object
      additionalProperties: false
      description: A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.
      properties:
        BooleanValue:
          type: string
          description: The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
        DoubleValue:
          type: string
          description: The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
        IntegerValue:
          type: string
          description: The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
        StringValue:
          type: string
          description: The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
    Tag:
      type: object
      additionalProperties: false
      description: Tags to be applied to Input.
      properties:
        Key:
          description: Key of the Tag.
          type: string
        Value:
          description: Value of the Tag.
          type: string
      required:
        - Value
        - Key
    AlarmModel:
      type: object
      properties:
        AlarmModelName:
          type: string
          description: The name of the alarm model.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z0-9_-]+$
        AlarmModelDescription:
          type: string
          description: A brief description of the alarm model.
          maxLength: 128
        RoleArn:
          type: string
          description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
          minLength: 1
          maxLength: 2048
        Key:
          type: string
          description: |-
            The value used to identify a alarm instance. When a device or system sends input, a new alarm instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding alarm instance based on this identifying information.

            This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct alarm instance, the device must send a message payload that contains the same attribute-value.
          minLength: 1
          maxLength: 128
          pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
        Severity:
          type: integer
          description: |+
            A non-negative integer that reflects the severity level of the alarm.

          minimum: 0
          maximum: 2147483647
        AlarmRule:
          $ref: '#/components/schemas/AlarmRule'
        AlarmEventActions:
          $ref: '#/components/schemas/AlarmEventActions'
        AlarmCapabilities:
          $ref: '#/components/schemas/AlarmCapabilities'
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            An array of key-value pairs to apply to this resource.

            For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RoleArn
        - AlarmRule
      x-stackql-resource-name: alarm_model
      x-stackql-primaryIdentifier:
        - AlarmModelName
    DetectorModelDefinition:
      type: object
      additionalProperties: false
      description: Information that defines how a detector operates.
      properties:
        InitialStateName:
          type: string
          description: The state that is entered at the creation of each detector (instance).
          minLength: 1
          maxLength: 128
        States:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Information about the states of the detector.
          minItems: 1
          items:
            $ref: '#/components/schemas/State'
      required:
        - States
        - InitialStateName
    State:
      type: object
      additionalProperties: false
      description: Information that defines a state of a detector.
      properties:
        OnEnter:
          $ref: '#/components/schemas/OnEnter'
        OnExit:
          $ref: '#/components/schemas/OnExit'
        OnInput:
          $ref: '#/components/schemas/OnInput'
        StateName:
          type: string
          minLength: 1
          maxLength: 128
          description: The name of the state.
      required:
        - StateName
    OnEnter:
      type: object
      additionalProperties: false
      description: When entering this state, perform these `actions` if the `condition` is `TRUE`.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.
          items:
            $ref: '#/components/schemas/Event'
    OnExit:
      type: object
      additionalProperties: false
      description: When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.
          items:
            $ref: '#/components/schemas/Event'
    OnInput:
      type: object
      additionalProperties: false
      description: When an input is received and the `condition` is `TRUE`, perform the specified `actions`.
      properties:
        Events:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: Specifies the `actions` performed when the `condition` evaluates to `TRUE`.
          items:
            $ref: '#/components/schemas/Event'
        TransitionEvents:
          type: array
          uniqueItems: false
          x-insertionOrder: true
          description: Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.
          items:
            $ref: '#/components/schemas/TransitionEvent'
    Event:
      type: object
      additionalProperties: false
      description: Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.
      properties:
        Actions:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: The actions to be performed.
          items:
            $ref: '#/components/schemas/Action'
        Condition:
          type: string
          description: The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
          maxLength: 512
        EventName:
          type: string
          description: The name of the event.
          maxLength: 128
      required:
        - EventName
    TransitionEvent:
      type: object
      additionalProperties: false
      description: Specifies the `actions `performed and the next `state` entered when a `condition` evaluates to `TRUE`.
      properties:
        Actions:
          type: array
          description: The actions to be performed.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Action'
        Condition:
          type: string
          description: A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
          maxLength: 512
        EventName:
          type: string
          description: The name of the event.
          minLength: 1
          maxLength: 128
        NextState:
          type: string
          description: The next state to enter.
          minLength: 1
          maxLength: 128
      required:
        - Condition
        - EventName
        - NextState
    Action:
      type: object
      additionalProperties: false
      description: The actions to be performed.
      properties:
        ClearTimer:
          $ref: '#/components/schemas/ClearTimer'
        DynamoDB:
          $ref: '#/components/schemas/DynamoDB'
        DynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2'
        Firehose:
          $ref: '#/components/schemas/Firehose'
        IotEvents:
          $ref: '#/components/schemas/IotEvents'
        IotSiteWise:
          $ref: '#/components/schemas/IotSiteWise'
        IotTopicPublish:
          $ref: '#/components/schemas/IotTopicPublish'
        Lambda:
          $ref: '#/components/schemas/Lambda'
        ResetTimer:
          $ref: '#/components/schemas/ResetTimer'
        SetTimer:
          $ref: '#/components/schemas/SetTimer'
        SetVariable:
          $ref: '#/components/schemas/SetVariable'
        Sns:
          $ref: '#/components/schemas/Sns'
        Sqs:
          $ref: '#/components/schemas/Sqs'
    ClearTimer:
      type: object
      additionalProperties: false
      description: Information needed to clear the timer.
      properties:
        TimerName:
          type: string
          minLength: 1
          maxLength: 128
      required:
        - TimerName
    ResetTimer:
      type: object
      additionalProperties: false
      description: Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.
      properties:
        TimerName:
          type: string
          description: The name of the timer to reset.
          minLength: 1
          maxLength: 128
      required:
        - TimerName
    SetTimer:
      type: object
      additionalProperties: false
      description: Information needed to set the timer.
      properties:
        DurationExpression:
          type: string
          description: The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
          minLength: 1
          maxLength: 1024
        Seconds:
          type: integer
          description: The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
          minimum: 60
          maximum: 31622400
        TimerName:
          type: string
          description: The name of the timer.
          minLength: 1
          maxLength: 128
      required:
        - TimerName
    SetVariable:
      type: object
      additionalProperties: false
      description: Information about the variable and its new value.
      properties:
        Value:
          type: string
          description: The new value of the variable.
          minLength: 1
          maxLength: 1024
        VariableName:
          type: string
          description: The name of the variable.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      required:
        - Value
        - VariableName
    DetectorModel:
      type: object
      properties:
        DetectorModelDefinition:
          $ref: '#/components/schemas/DetectorModelDefinition'
        DetectorModelDescription:
          type: string
          description: A brief description of the detector model.
          maxLength: 128
        DetectorModelName:
          type: string
          description: The name of the detector model.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z0-9_-]+$
        EvaluationMethod:
          type: string
          description: Information about the order in which events are evaluated and how actions are executed.
          enum:
            - BATCH
            - SERIAL
        Key:
          type: string
          description: |-
            The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information.

            This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.
          minLength: 1
          maxLength: 128
          pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w\- ]+`)|([\w\-]+)))*$
        RoleArn:
          type: string
          description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
          minLength: 1
          maxLength: 2048
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            An array of key-value pairs to apply to this resource.

            For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DetectorModelDefinition
        - RoleArn
      x-stackql-resource-name: detector_model
      x-stackql-primaryIdentifier:
        - DetectorModelName
    InputDefinition:
      type: object
      additionalProperties: false
      description: The definition of the input.
      properties:
        Attributes:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
          minItems: 1
          maxItems: 200
          items:
            $ref: '#/components/schemas/Attribute'
      required:
        - Attributes
    Attribute:
      type: object
      additionalProperties: false
      description: The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
      properties:
        JsonPath:
          description: |-
            An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (`BatchPutMessage`). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the `condition` expressions used by detectors.

            _Syntax_: `<field-name>.<field-name>...`
          minLength: 1
          maxLength: 128
          pattern: ^((`[a-zA-Z0-9_\- ]+`)|([a-zA-Z0-9_\-]+))(\.((`[a-zA-Z0-9_\- ]+`)|([a-zA-Z0-9_\-]+)))*$
          type: string
      required:
        - JsonPath
    Input:
      type: object
      properties:
        InputDefinition:
          $ref: '#/components/schemas/InputDefinition'
        InputDescription:
          description: A brief description of the input.
          minLength: 1
          maxLength: 128
          type: string
        InputName:
          description: The name of the input.
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          description: |-
            An array of key-value pairs to apply to this resource.

            For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - InputDefinition
      x-stackql-resource-name: input
      x-stackql-primaryIdentifier:
        - InputName
  x-stackQL-resources:
    alarm_models:
      name: alarm_models
      id: aws.iotevents.alarm_models
      x-cfn-schema-name: AlarmModel
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AlarmModelName') as alarm_model_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
    alarm_model:
      name: alarm_model
      id: aws.iotevents.alarm_model
      x-cfn-schema-name: AlarmModel
      x-type: get
      x-identifiers:
        - AlarmModelName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AlarmModelName') as alarm_model_name,
              JSON_EXTRACT(Properties, '$.AlarmModelDescription') as alarm_model_description,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.Severity') as severity,
              JSON_EXTRACT(Properties, '$.AlarmRule.SimpleRule') as alarm_rule_simple_rule,
              JSON_EXTRACT(Properties, '$.AlarmEventActions.AlarmActions') as alarm_event_actions_alarm_actions,
              JSON_EXTRACT(Properties, '$.AlarmCapabilities.InitializationConfiguration') as alarm_capabilities_initialization_configuration,
              JSON_EXTRACT(Properties, '$.AlarmCapabilities.AcknowledgeFlow') as alarm_capabilities_acknowledge_flow,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::AlarmModel'
    detector_models:
      name: detector_models
      id: aws.iotevents.detector_models
      x-cfn-schema-name: DetectorModel
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DetectorModelName') as detector_model_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
    detector_model:
      name: detector_model
      id: aws.iotevents.detector_model
      x-cfn-schema-name: DetectorModel
      x-type: get
      x-identifiers:
        - DetectorModelName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DetectorModelDefinition.InitialStateName') as detector_model_definition_initial_state_name,
              JSON_EXTRACT(Properties, '$.DetectorModelDefinition.States') as detector_model_definition_states,
              JSON_EXTRACT(Properties, '$.DetectorModelDescription') as detector_model_description,
              JSON_EXTRACT(Properties, '$.DetectorModelName') as detector_model_name,
              JSON_EXTRACT(Properties, '$.EvaluationMethod') as evaluation_method,
              JSON_EXTRACT(Properties, '$.Key') as key,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::DetectorModel'
    inputs:
      name: inputs
      id: aws.iotevents.inputs
      x-cfn-schema-name: Input
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InputName') as input_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTEvents::Input'
    input:
      name: input
      id: aws.iotevents.input
      x-cfn-schema-name: Input
      x-type: get
      x-identifiers:
        - InputName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InputDefinition.Attributes') as input_definition_attributes,
              JSON_EXTRACT(Properties, '$.InputDescription') as input_description,
              JSON_EXTRACT(Properties, '$.InputName') as input_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTEvents::Input'
