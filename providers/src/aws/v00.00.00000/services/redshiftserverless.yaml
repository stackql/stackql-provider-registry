openapi: 3.0.0
info:
  title: RedshiftServerless
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    LogExport:
      type: string
      enum:
        - useractivitylog
        - userlog
        - connectionlog
    Namespace:
      type: object
      properties:
        AdminPasswordSecretKmsKeyId:
          description: The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret. You can only use this parameter if manageAdminPassword is true.
          type: string
        AdminUserPassword:
          description: The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
          type: string
          maxLength: 64
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+
        AdminUsername:
          description: The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
        DbName:
          description: The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
          maxLength: 127
        DefaultIamRoleArn:
          description: The default IAM role ARN for the namespace that is being created.
          type: string
        IamRoles:
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 512
            minLength: 0
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
          type: string
        LogExports:
          description: 'The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog'
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LogExport'
          maxItems: 16
          minItems: 0
        ManageAdminPassword:
          description: If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses adminUserPassword for the admin user account's password.
          type: boolean
        Namespace:
          $ref: '#/components/schemas/Namespace'
          description: Definition of Namespace resource.
        NamespaceName:
          description: A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
          type: string
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9-]+$
        Tags:
          description: The list of tags for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        FinalSnapshotName:
          description: The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
          type: string
          pattern: '[a-z][a-z0-9]*(-[a-z0-9]+)*'
          maxLength: 255
        FinalSnapshotRetentionPeriod:
          description: The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
          type: integer
        NamespaceResourcePolicy:
          description: The resource policy document that will be attached to the namespace.
          type: object
        RedshiftIdcApplicationArn:
          description: The ARN for the Redshift application that integrates with IAM Identity Center.
          type: string
        SnapshotCopyConfigurations:
          description: The snapshot copy configurations for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SnapshotCopyConfiguration'
          maxItems: 1
          minItems: 0
      required:
        - NamespaceName
      x-stackql-resource-name: namespace
      description: Definition of AWS::RedshiftServerless::Namespace Resource Type
      x-type-name: AWS::RedshiftServerless::Namespace
      x-stackql-primary-identifier:
        - NamespaceName
      x-create-only-properties:
        - NamespaceName
        - Tags
      x-write-only-properties:
        - AdminUserPassword
        - FinalSnapshotName
        - FinalSnapshotRetentionPeriod
        - ManageAdminPassword
        - RedshiftIdcApplicationArn
      x-read-only-properties:
        - Namespace
        - Namespace/NamespaceArn
        - Namespace/NamespaceId
        - Namespace/NamespaceName
        - Namespace/AdminUsername
        - Namespace/DbName
        - Namespace/KmsKeyId
        - Namespace/DefaultIamRoleArn
        - Namespace/IamRoles
        - Namespace/LogExports
        - Namespace/Status
        - Namespace/CreationDate
      x-required-properties:
        - NamespaceName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - iam:PassRole
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:Encrypt
          - kms:Decrypt
          - kms:DescribeKey
          - kms:GenerateDataKeyPair
          - kms:GenerateDataKey
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          - kms:RetireGrant
          - redshift-serverless:CreateNamespace
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListSnapshotCopyConfigurations
          - redshift-serverless:CreateSnapshotCopyConfiguration
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift:GetResourcePolicy
          - redshift:PutResourcePolicy
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - secretsmanager:RotateSecret
          - secretsmanager:DescribeSecret
        read:
          - iam:PassRole
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListTagsForResource
          - redshift:GetResourcePolicy
          - redshift-serverless:ListSnapshotCopyConfigurations
        update:
          - iam:PassRole
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:Encrypt
          - kms:Decrypt
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          - kms:RetireGrant
          - kms:GenerateDataKeyPair
          - kms:GenerateDataKey
          - redshift-serverless:UpdateNamespace
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListSnapshotCopyConfigurations
          - redshift-serverless:CreateSnapshotCopyConfiguration
          - redshift-serverless:UpdateSnapshotCopyConfiguration
          - redshift-serverless:DeleteSnapshotCopyConfiguration
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
          - redshift:GetResourcePolicy
          - redshift:PutResourcePolicy
          - redshift:DeleteResourcePolicy
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - secretsmanager:RotateSecret
          - secretsmanager:DescribeSecret
          - secretsmanager:UpdateSecret
          - secretsmanager:DeleteSecret
        delete:
          - iam:PassRole
          - redshift-serverless:DeleteNamespace
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:UntagResource
          - kms:RetireGrant
          - secretsmanager:DescribeSecret
          - secretsmanager:DeleteSecret
          - redshift:DeleteResourcePolicy
        list:
          - iam:PassRole
          - redshift-serverless:ListNamespaces
          - redshift-serverless:ListTagsForResource
    NamespaceStatus:
      type: string
      enum:
        - AVAILABLE
        - MODIFYING
        - DELETING
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    SnapshotCopyConfiguration:
      type: object
      properties:
        DestinationRegion:
          type: string
        DestinationKmsKeyId:
          type: string
        SnapshotRetentionPeriod:
          type: integer
      required:
        - DestinationRegion
      additionalProperties: false
    ConfigParameter:
      type: object
      properties:
        ParameterKey:
          type: string
          maxLength: 255
          minLength: 0
        ParameterValue:
          type: string
          maxLength: 15000
          minLength: 0
      additionalProperties: false
    Endpoint:
      type: object
      properties:
        Address:
          type: string
        Port:
          type: integer
        VpcEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/VpcEndpoint'
          x-insertionOrder: false
      additionalProperties: false
    NetworkInterface:
      type: object
      properties:
        NetworkInterfaceId:
          type: string
        SubnetId:
          type: string
        PrivateIpAddress:
          type: string
        AvailabilityZone:
          type: string
      additionalProperties: false
    PerformanceTarget:
      type: object
      properties:
        Status:
          $ref: '#/components/schemas/PerformanceTargetStatus'
        Level:
          type: integer
          minimum: 1
          maximum: 100
      additionalProperties: false
    VpcEndpoint:
      type: object
      properties:
        VpcEndpointId:
          type: string
        VpcId:
          type: string
        NetworkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          x-insertionOrder: false
      additionalProperties: false
    Workgroup:
      type: object
      properties:
        WorkgroupName:
          description: The name of the workgroup.
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        NamespaceName:
          description: The namespace the workgroup is associated with.
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        BaseCapacity:
          description: The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
          type: integer
        MaxCapacity:
          description: The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
          type: integer
        EnhancedVpcRouting:
          description: The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
          type: boolean
          default: false
        ConfigParameters:
          description: A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigParameter'
          minItems: 1
        SecurityGroupIds:
          description: A list of security group IDs to associate with the workgroup.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^sg-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        SubnetIds:
          description: A list of subnet IDs the workgroup is associated with.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^subnet-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        PubliclyAccessible:
          description: A value that specifies whether the workgroup can be accessible from a public network.
          type: boolean
          default: false
        Port:
          description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
          type: integer
        PricePerformanceTarget:
          description: A property that represents the price performance target settings for the workgroup.
          type: object
          $ref: '#/components/schemas/PerformanceTarget'
        Tags:
          description: The map of the key-value pairs used to tag the workgroup.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        Workgroup:
          description: Definition for workgroup resource
          $ref: '#/components/schemas/Workgroup'
      required:
        - WorkgroupName
      x-stackql-resource-name: workgroup
      description: Definition of AWS::RedshiftServerless::Workgroup Resource Type
      x-type-name: AWS::RedshiftServerless::Workgroup
      x-stackql-primary-identifier:
        - WorkgroupName
      x-create-only-properties:
        - WorkgroupName
        - NamespaceName
      x-write-only-properties:
        - BaseCapacity
        - MaxCapacity
        - ConfigParameters
        - SecurityGroupIds
        - SubnetIds
      x-read-only-properties:
        - Workgroup
        - Workgroup/WorkgroupId
        - Workgroup/WorkgroupArn
        - Workgroup/WorkgroupName
        - Workgroup/NamespaceName
        - Workgroup/BaseCapacity
        - Workgroup/MaxCapacity
        - Workgroup/EnhancedVpcRouting
        - Workgroup/ConfigParameters/*/ParameterKey
        - Workgroup/ConfigParameters/*/ParameterValue
        - Workgroup/SecurityGroupIds
        - Workgroup/SubnetIds
        - Workgroup/Status
        - Workgroup/Endpoint/Address
        - Workgroup/Endpoint/Port
        - Workgroup/Endpoint/VpcEndpoints/*/VpcEndpointId
        - Workgroup/Endpoint/VpcEndpoints/*/VpcId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/NetworkInterfaceId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/SubnetId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/PrivateIpAddress
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/AvailabilityZone
        - Workgroup/PubliclyAccessible
        - Workgroup/CreationDate
      x-required-properties:
        - WorkgroupName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
      x-required-permissions:
        create:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:CreateNamespace
          - redshift-serverless:CreateWorkgroup
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
        read:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:ListTagsForResource
        update:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:UpdateWorkgroup
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
        delete:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:GetNamespace
          - redshift-serverless:DeleteWorkgroup
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:UntagResource
        list:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:ListWorkgroups
          - redshift-serverless:ListTagsForResource
    WorkgroupStatus:
      type: string
      enum:
        - CREATING
        - AVAILABLE
        - MODIFYING
        - DELETING
    PerformanceTargetStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    CreateNamespaceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AdminPasswordSecretKmsKeyId:
              description: The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret. You can only use this parameter if manageAdminPassword is true.
              type: string
            AdminUserPassword:
              description: The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
              type: string
              maxLength: 64
              minLength: 8
              pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+
            AdminUsername:
              description: The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
              type: string
              pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
            DbName:
              description: The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
              type: string
              pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
              maxLength: 127
            DefaultIamRoleArn:
              description: The default IAM role ARN for the namespace that is being created.
              type: string
            IamRoles:
              description: A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
              type: array
              x-insertionOrder: false
              items:
                type: string
                maxLength: 512
                minLength: 0
            KmsKeyId:
              description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
              type: string
            LogExports:
              description: 'The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog'
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/LogExport'
              maxItems: 16
              minItems: 0
            ManageAdminPassword:
              description: If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses adminUserPassword for the admin user account's password.
              type: boolean
            Namespace:
              $ref: '#/components/schemas/Namespace'
              description: Definition of Namespace resource.
            NamespaceName:
              description: A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
              type: string
              maxLength: 64
              minLength: 3
              pattern: ^[a-z0-9-]+$
            Tags:
              description: The list of tags for the namespace.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 200
              minItems: 0
            FinalSnapshotName:
              description: The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
              type: string
              pattern: '[a-z][a-z0-9]*(-[a-z0-9]+)*'
              maxLength: 255
            FinalSnapshotRetentionPeriod:
              description: The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
              type: integer
            NamespaceResourcePolicy:
              description: The resource policy document that will be attached to the namespace.
              type: object
            RedshiftIdcApplicationArn:
              description: The ARN for the Redshift application that integrates with IAM Identity Center.
              type: string
            SnapshotCopyConfigurations:
              description: The snapshot copy configurations for the namespace.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SnapshotCopyConfiguration'
              maxItems: 1
              minItems: 0
          x-stackQL-stringOnly: true
      x-title: CreateNamespaceRequest
      type: object
      required: []
    CreateWorkgroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            WorkgroupName:
              description: The name of the workgroup.
              type: string
              pattern: ^(?=^[a-z0-9-]+$).{3,64}$
              maxLength: 64
              minLength: 3
            NamespaceName:
              description: The namespace the workgroup is associated with.
              type: string
              pattern: ^(?=^[a-z0-9-]+$).{3,64}$
              maxLength: 64
              minLength: 3
            BaseCapacity:
              description: The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
              type: integer
            MaxCapacity:
              description: The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
              type: integer
            EnhancedVpcRouting:
              description: The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
              type: boolean
              default: false
            ConfigParameters:
              description: A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ConfigParameter'
              minItems: 1
            SecurityGroupIds:
              description: A list of security group IDs to associate with the workgroup.
              type: array
              x-insertionOrder: false
              items:
                type: string
                pattern: ^sg-[0-9a-fA-F]{8,}$
                maxLength: 255
                minLength: 0
              maxItems: 32
              minItems: 1
            SubnetIds:
              description: A list of subnet IDs the workgroup is associated with.
              type: array
              x-insertionOrder: false
              items:
                type: string
                pattern: ^subnet-[0-9a-fA-F]{8,}$
                maxLength: 255
                minLength: 0
              maxItems: 32
              minItems: 1
            PubliclyAccessible:
              description: A value that specifies whether the workgroup can be accessible from a public network.
              type: boolean
              default: false
            Port:
              description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
              type: integer
            PricePerformanceTarget:
              description: A property that represents the price performance target settings for the workgroup.
              type: object
              $ref: '#/components/schemas/PerformanceTarget'
            Tags:
              description: The map of the key-value pairs used to tag the workgroup.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 200
              minItems: 0
            Workgroup:
              description: Definition for workgroup resource
              $ref: '#/components/schemas/Workgroup'
          x-stackQL-stringOnly: true
      x-title: CreateWorkgroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    namespaces:
      name: namespaces
      id: aws.redshiftserverless.namespaces
      x-cfn-schema-name: Namespace
      x-cfn-type-name: AWS::RedshiftServerless::Namespace
      x-identifiers:
        - NamespaceName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Namespace&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Namespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Namespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Namespace"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/namespaces/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/namespaces/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/namespaces/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
              JSON_EXTRACT(Properties, '$.AdminUserPassword') as admin_user_password,
              JSON_EXTRACT(Properties, '$.AdminUsername') as admin_username,
              JSON_EXTRACT(Properties, '$.DbName') as db_name,
              JSON_EXTRACT(Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LogExports') as log_exports,
              JSON_EXTRACT(Properties, '$.ManageAdminPassword') as manage_admin_password,
              JSON_EXTRACT(Properties, '$.Namespace') as namespace,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
              JSON_EXTRACT(Properties, '$.RedshiftIdcApplicationArn') as redshift_idc_application_arn,
              JSON_EXTRACT(Properties, '$.SnapshotCopyConfigurations') as snapshot_copy_configurations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND data__Identifier = '<NamespaceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.AdminUserPassword') as admin_user_password,
                JSON_EXTRACT(detail.Properties, '$.AdminUsername') as admin_username,
                JSON_EXTRACT(detail.Properties, '$.DbName') as db_name,
                JSON_EXTRACT(detail.Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
                JSON_EXTRACT(detail.Properties, '$.IamRoles') as iam_roles,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.LogExports') as log_exports,
                JSON_EXTRACT(detail.Properties, '$.ManageAdminPassword') as manage_admin_password,
                JSON_EXTRACT(detail.Properties, '$.Namespace') as namespace,
                JSON_EXTRACT(detail.Properties, '$.NamespaceName') as namespace_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name,
                JSON_EXTRACT(detail.Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
                JSON_EXTRACT(detail.Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
                JSON_EXTRACT(detail.Properties, '$.RedshiftIdcApplicationArn') as redshift_idc_application_arn,
                JSON_EXTRACT(detail.Properties, '$.SnapshotCopyConfigurations') as snapshot_copy_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND detail.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
                  json_extract_path_text(Properties, 'AdminUserPassword') as admin_user_password,
                  json_extract_path_text(Properties, 'AdminUsername') as admin_username,
                  json_extract_path_text(Properties, 'DbName') as db_name,
                  json_extract_path_text(Properties, 'DefaultIamRoleArn') as default_iam_role_arn,
                  json_extract_path_text(Properties, 'IamRoles') as iam_roles,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'LogExports') as log_exports,
                  json_extract_path_text(Properties, 'ManageAdminPassword') as manage_admin_password,
                  json_extract_path_text(Properties, 'Namespace') as namespace,
                  json_extract_path_text(Properties, 'NamespaceName') as namespace_name,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name,
                  json_extract_path_text(Properties, 'FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
                  json_extract_path_text(Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                  json_extract_path_text(Properties, 'RedshiftIdcApplicationArn') as redshift_idc_application_arn,
                  json_extract_path_text(Properties, 'SnapshotCopyConfigurations') as snapshot_copy_configurations
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
                  AND data__Identifier = '<NamespaceName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
                    json_extract_path_text(detail.Properties, 'AdminUserPassword') as admin_user_password,
                    json_extract_path_text(detail.Properties, 'AdminUsername') as admin_username,
                    json_extract_path_text(detail.Properties, 'DbName') as db_name,
                    json_extract_path_text(detail.Properties, 'DefaultIamRoleArn') as default_iam_role_arn,
                    json_extract_path_text(detail.Properties, 'IamRoles') as iam_roles,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'LogExports') as log_exports,
                    json_extract_path_text(detail.Properties, 'ManageAdminPassword') as manage_admin_password,
                    json_extract_path_text(detail.Properties, 'Namespace') as namespace,
                    json_extract_path_text(detail.Properties, 'NamespaceName') as namespace_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name,
                    json_extract_path_text(detail.Properties, 'FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
                    json_extract_path_text(detail.Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                    json_extract_path_text(detail.Properties, 'RedshiftIdcApplicationArn') as redshift_idc_application_arn,
                    json_extract_path_text(detail.Properties, 'SnapshotCopyConfigurations') as snapshot_copy_configurations
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                    AND detail.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                    AND listing.region = 'us-east-1'
    namespaces_list_only:
      name: namespaces_list_only
      id: aws.redshiftserverless.namespaces_list_only
      x-cfn-schema-name: Namespace
      x-cfn-type-name: AWS::RedshiftServerless::Namespace
      x-identifiers:
        - NamespaceName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NamespaceName') as namespace_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND region = 'us-east-1'
    namespace_tags:
      name: namespace_tags
      id: aws.redshiftserverless.namespace_tags
      x-cfn-schema-name: Namespace
      x-cfn-type-name: AWS::RedshiftServerless::Namespace
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.AdminUserPassword') as admin_user_password,
              JSON_EXTRACT(detail.Properties, '$.AdminUsername') as admin_username,
              JSON_EXTRACT(detail.Properties, '$.DbName') as db_name,
              JSON_EXTRACT(detail.Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
              JSON_EXTRACT(detail.Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.LogExports') as log_exports,
              JSON_EXTRACT(detail.Properties, '$.ManageAdminPassword') as manage_admin_password,
              JSON_EXTRACT(detail.Properties, '$.Namespace') as namespace,
              JSON_EXTRACT(detail.Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(detail.Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(detail.Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
              JSON_EXTRACT(detail.Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
              JSON_EXTRACT(detail.Properties, '$.RedshiftIdcApplicationArn') as redshift_idc_application_arn,
              JSON_EXTRACT(detail.Properties, '$.SnapshotCopyConfigurations') as snapshot_copy_configurations
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND detail.data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
                json_extract_path_text(detail.Properties, 'AdminUserPassword') as admin_user_password,
                json_extract_path_text(detail.Properties, 'AdminUsername') as admin_username,
                json_extract_path_text(detail.Properties, 'DbName') as db_name,
                json_extract_path_text(detail.Properties, 'DefaultIamRoleArn') as default_iam_role_arn,
                json_extract_path_text(detail.Properties, 'IamRoles') as iam_roles,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'LogExports') as log_exports,
                json_extract_path_text(detail.Properties, 'ManageAdminPassword') as manage_admin_password,
                json_extract_path_text(detail.Properties, 'Namespace') as namespace,
                json_extract_path_text(detail.Properties, 'NamespaceName') as namespace_name,
                json_extract_path_text(detail.Properties, 'FinalSnapshotName') as final_snapshot_name,
                json_extract_path_text(detail.Properties, 'FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
                json_extract_path_text(detail.Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                json_extract_path_text(detail.Properties, 'RedshiftIdcApplicationArn') as redshift_idc_application_arn,
                json_extract_path_text(detail.Properties, 'SnapshotCopyConfigurations') as snapshot_copy_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND detail.data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND listing.region = 'us-east-1'
    workgroups:
      name: workgroups
      id: aws.redshiftserverless.workgroups
      x-cfn-schema-name: Workgroup
      x-cfn-type-name: AWS::RedshiftServerless::Workgroup
      x-identifiers:
        - WorkgroupName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Workgroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Workgroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Workgroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::RedshiftServerless::Workgroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/workgroups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/workgroups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/workgroups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.ConfigParameters') as config_parameters,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.PricePerformanceTarget') as price_performance_target,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Workgroup') as workgroup
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND data__Identifier = '<WorkgroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.WorkgroupName') as workgroup_name,
                JSON_EXTRACT(detail.Properties, '$.NamespaceName') as namespace_name,
                JSON_EXTRACT(detail.Properties, '$.BaseCapacity') as base_capacity,
                JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
                JSON_EXTRACT(detail.Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
                JSON_EXTRACT(detail.Properties, '$.ConfigParameters') as config_parameters,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.PricePerformanceTarget') as price_performance_target,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Workgroup') as workgroup
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND detail.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'WorkgroupName') as workgroup_name,
                  json_extract_path_text(Properties, 'NamespaceName') as namespace_name,
                  json_extract_path_text(Properties, 'BaseCapacity') as base_capacity,
                  json_extract_path_text(Properties, 'MaxCapacity') as max_capacity,
                  json_extract_path_text(Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                  json_extract_path_text(Properties, 'ConfigParameters') as config_parameters,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'PricePerformanceTarget') as price_performance_target,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Workgroup') as workgroup
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                  AND data__Identifier = '<WorkgroupName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'WorkgroupName') as workgroup_name,
                    json_extract_path_text(detail.Properties, 'NamespaceName') as namespace_name,
                    json_extract_path_text(detail.Properties, 'BaseCapacity') as base_capacity,
                    json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                    json_extract_path_text(detail.Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                    json_extract_path_text(detail.Properties, 'ConfigParameters') as config_parameters,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'PricePerformanceTarget') as price_performance_target,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Workgroup') as workgroup
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                    AND detail.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                    AND listing.region = 'us-east-1'
    workgroups_list_only:
      name: workgroups_list_only
      id: aws.redshiftserverless.workgroups_list_only
      x-cfn-schema-name: Workgroup
      x-cfn-type-name: AWS::RedshiftServerless::Workgroup
      x-identifiers:
        - WorkgroupName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkgroupName') as workgroup_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND region = 'us-east-1'
    workgroup_tags:
      name: workgroup_tags
      id: aws.redshiftserverless.workgroup_tags
      x-cfn-schema-name: Workgroup
      x-cfn-type-name: AWS::RedshiftServerless::Workgroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.WorkgroupName') as workgroup_name,
              JSON_EXTRACT(detail.Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(detail.Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(detail.Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(detail.Properties, '$.ConfigParameters') as config_parameters,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(detail.Properties, '$.Port') as port,
              JSON_EXTRACT(detail.Properties, '$.PricePerformanceTarget') as price_performance_target,
              JSON_EXTRACT(detail.Properties, '$.Workgroup') as workgroup
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND detail.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'WorkgroupName') as workgroup_name,
                json_extract_path_text(detail.Properties, 'NamespaceName') as namespace_name,
                json_extract_path_text(detail.Properties, 'BaseCapacity') as base_capacity,
                json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                json_extract_path_text(detail.Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                json_extract_path_text(detail.Properties, 'ConfigParameters') as config_parameters,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(detail.Properties, 'Port') as port,
                json_extract_path_text(detail.Properties, 'PricePerformanceTarget') as price_performance_target,
                json_extract_path_text(detail.Properties, 'Workgroup') as workgroup
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND detail.data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Namespace&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateNamespace
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Workgroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWorkgroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWorkgroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
