openapi: 3.0.0
info:
  title: RedshiftServerless
  version: 1.0.0
paths: {}
components:
  schemas:
    LogExport:
      type: string
      enum:
        - useractivitylog
        - userlog
        - connectionlog
    Namespace:
      type: object
      properties:
        AdminUserPassword:
          description: The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit.
          type: string
          maxLength: 64
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+
        AdminUsername:
          description: The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
        DbName:
          description: The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
          maxLength: 127
        DefaultIamRoleArn:
          description: The default IAM role ARN for the namespace that is being created.
          type: string
        IamRoles:
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 512
            minLength: 0
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
          type: string
        LogExports:
          description: 'The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog'
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LogExport'
          maxItems: 16
          minItems: 0
        Namespace:
          $ref: '#/components/schemas/Namespace'
        NamespaceName:
          description: A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
          type: string
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9-]+$
        Tags:
          description: The list of tags for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        FinalSnapshotName:
          description: The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
          type: string
          pattern: '[a-z][a-z0-9]*(-[a-z0-9]+)*'
          maxLength: 255
        FinalSnapshotRetentionPeriod:
          description: The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
          type: integer
      required:
        - NamespaceName
      x-stackql-resource-name: namespace
      x-stackql-primaryIdentifier:
        - NamespaceName
    NamespaceStatus:
      type: string
      enum:
        - AVAILABLE
        - MODIFYING
        - DELETING
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    ConfigParameter:
      type: object
      properties:
        ParameterKey:
          type: string
          maxLength: 255
          minLength: 0
        ParameterValue:
          type: string
          maxLength: 15000
          minLength: 0
      additionalProperties: false
    Endpoint:
      type: object
      properties:
        Address:
          type: string
        Port:
          type: integer
        VpcEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/VpcEndpoint'
          x-insertionOrder: false
      additionalProperties: false
    NetworkInterface:
      type: object
      properties:
        NetworkInterfaceId:
          type: string
        SubnetId:
          type: string
        PrivateIpAddress:
          type: string
        AvailabilityZone:
          type: string
      additionalProperties: false
    VpcEndpoint:
      type: object
      properties:
        VpcEndpointId:
          type: string
        VpcId:
          type: string
        NetworkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          x-insertionOrder: false
      additionalProperties: false
    Workgroup:
      type: object
      properties:
        WorkgroupName:
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        NamespaceName:
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        BaseCapacity:
          type: integer
        EnhancedVpcRouting:
          type: boolean
          default: false
        ConfigParameters:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigParameter'
          minItems: 1
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^sg-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        SubnetIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^subnet-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        PubliclyAccessible:
          type: boolean
          default: false
        Port:
          type: integer
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        Workgroup:
          $ref: '#/components/schemas/Workgroup'
      required:
        - WorkgroupName
      x-stackql-resource-name: workgroup
      x-stackql-primaryIdentifier:
        - WorkgroupName
    WorkgroupStatus:
      type: string
      enum:
        - CREATING
        - AVAILABLE
        - MODIFYING
        - DELETING
  x-stackQL-resources:
    namespaces:
      name: namespaces
      id: aws.redshiftserverless.namespaces
      x-cfn-schema-name: Namespace
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
    namespace:
      name: namespace
      id: aws.redshiftserverless.namespace
      x-cfn-schema-name: Namespace
      x-type: get
      x-identifiers:
        - NamespaceName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AdminUserPassword') as admin_user_password,
              JSON_EXTRACT(Properties, '$.AdminUsername') as admin_username,
              JSON_EXTRACT(Properties, '$.DbName') as db_name,
              JSON_EXTRACT(Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LogExports') as log_exports,
              JSON_EXTRACT(Properties, '$.Namespace.AdminUserPassword') as namespace_admin_user_password,
              JSON_EXTRACT(Properties, '$.Namespace.AdminUsername') as namespace_admin_username,
              JSON_EXTRACT(Properties, '$.Namespace.DbName') as namespace_db_name,
              JSON_EXTRACT(Properties, '$.Namespace.DefaultIamRoleArn') as namespace_default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.Namespace.IamRoles') as namespace_iam_roles,
              JSON_EXTRACT(Properties, '$.Namespace.KmsKeyId') as namespace_kms_key_id,
              JSON_EXTRACT(Properties, '$.Namespace.LogExports') as namespace_log_exports,
              JSON_EXTRACT(Properties, '$.Namespace.Namespace') as namespace_namespace,
              JSON_EXTRACT(Properties, '$.Namespace.NamespaceName') as namespace_namespace_name,
              JSON_EXTRACT(Properties, '$.Namespace.Tags') as namespace_tags,
              JSON_EXTRACT(Properties, '$.Namespace.FinalSnapshotName') as namespace_final_snapshot_name,
              JSON_EXTRACT(Properties, '$.Namespace.FinalSnapshotRetentionPeriod') as namespace_final_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
    workgroups:
      name: workgroups
      id: aws.redshiftserverless.workgroups
      x-cfn-schema-name: Workgroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
    workgroup:
      name: workgroup
      id: aws.redshiftserverless.workgroup
      x-cfn-schema-name: Workgroup
      x-type: get
      x-identifiers:
        - WorkgroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.ConfigParameters') as config_parameters,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Workgroup.WorkgroupName') as workgroup_workgroup_name,
              JSON_EXTRACT(Properties, '$.Workgroup.NamespaceName') as workgroup_namespace_name,
              JSON_EXTRACT(Properties, '$.Workgroup.BaseCapacity') as workgroup_base_capacity,
              JSON_EXTRACT(Properties, '$.Workgroup.EnhancedVpcRouting') as workgroup_enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.Workgroup.ConfigParameters') as workgroup_config_parameters,
              JSON_EXTRACT(Properties, '$.Workgroup.SecurityGroupIds') as workgroup_security_group_ids,
              JSON_EXTRACT(Properties, '$.Workgroup.SubnetIds') as workgroup_subnet_ids,
              JSON_EXTRACT(Properties, '$.Workgroup.PubliclyAccessible') as workgroup_publicly_accessible,
              JSON_EXTRACT(Properties, '$.Workgroup.Port') as workgroup_port,
              JSON_EXTRACT(Properties, '$.Workgroup.Tags') as workgroup_tags,
              JSON_EXTRACT(Properties, '$.Workgroup.Workgroup') as workgroup_workgroup
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
