openapi: 3.0.0
info:
  title: RedshiftServerless
  version: 1.0.0
paths: {}
components:
  schemas:
    LogExport:
      type: string
      enum:
        - useractivitylog
        - userlog
        - connectionlog
    Namespace:
      type: object
      properties:
        AdminPasswordSecretKmsKeyId:
          description: The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret. You can only use this parameter if manageAdminPassword is true.
          type: string
        AdminUserPassword:
          description: The password associated with the admin user for the namespace that is being created. Password must be at least 8 characters in length, should be any printable ASCII character. Must contain at least one lowercase letter, one uppercase letter and one decimal digit. You can't use adminUserPassword if manageAdminPassword is true.
          type: string
          maxLength: 64
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^\x00-\x20\x22\x27\x2f\x40\x5c\x7f-\uffff]+
        AdminUsername:
          description: The user name associated with the admin user for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
        DbName:
          description: The database name associated for the namespace that is being created. Only alphanumeric characters and underscores are allowed. It should start with an alphabet.
          type: string
          pattern: '[a-zA-Z][a-zA-Z_0-9+.@-]*'
          maxLength: 127
        DefaultIamRoleArn:
          description: The default IAM role ARN for the namespace that is being created.
          type: string
        IamRoles:
          description: A list of AWS Identity and Access Management (IAM) roles that can be used by the namespace to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. The Default role limit for each request is 10.
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 512
            minLength: 0
        KmsKeyId:
          description: The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the namespace.
          type: string
        LogExports:
          description: 'The collection of log types to be exported provided by the customer. Should only be one of the three supported log types: userlog, useractivitylog and connectionlog'
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LogExport'
          maxItems: 16
          minItems: 0
        ManageAdminPassword:
          description: If true, Amazon Redshift uses AWS Secrets Manager to manage the namespace's admin credentials. You can't use adminUserPassword if manageAdminPassword is true. If manageAdminPassword is false or not set, Amazon Redshift uses adminUserPassword for the admin user account's password.
          type: boolean
        Namespace:
          $ref: '#/components/schemas/Namespace'
          description: Definition of Namespace resource.
        NamespaceName:
          description: A unique identifier for the namespace. You use this identifier to refer to the namespace for any subsequent namespace operations such as deleting or modifying. All alphabetical characters must be lower case. Namespace name should be unique for all namespaces within an AWS account.
          type: string
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9-]+$
        Tags:
          description: The list of tags for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        FinalSnapshotName:
          description: The name of the namespace the source snapshot was created from. Please specify the name if needed before deleting namespace
          type: string
          pattern: '[a-z][a-z0-9]*(-[a-z0-9]+)*'
          maxLength: 255
        FinalSnapshotRetentionPeriod:
          description: The number of days to retain automated snapshot in the destination region after they are copied from the source region. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
          type: integer
        NamespaceResourcePolicy:
          description: The resource policy document that will be attached to the namespace.
          type: object
        RedshiftIdcApplicationArn:
          description: The ARN for the Redshift application that integrates with IAM Identity Center.
          type: string
        SnapshotCopyConfigurations:
          description: The snapshot copy configurations for the namespace.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SnapshotCopyConfiguration'
          maxItems: 1
          minItems: 0
      required:
        - NamespaceName
      x-stackql-resource-name: namespace
      description: Definition of AWS::RedshiftServerless::Namespace Resource Type
      x-type-name: AWS::RedshiftServerless::Namespace
      x-stackql-primary-identifier:
        - NamespaceName
      x-create-only-properties:
        - NamespaceName
        - Tags
      x-write-only-properties:
        - AdminUserPassword
        - FinalSnapshotName
        - FinalSnapshotRetentionPeriod
        - Tags
        - Tags/*/Key
        - Tags/*/Value
        - ManageAdminPassword
        - RedshiftIdcApplicationArn
      x-read-only-properties:
        - Namespace
        - Namespace/NamespaceArn
        - Namespace/NamespaceId
        - Namespace/NamespaceName
        - Namespace/AdminUsername
        - Namespace/DbName
        - Namespace/KmsKeyId
        - Namespace/DefaultIamRoleArn
        - Namespace/IamRoles
        - Namespace/LogExports
        - Namespace/Status
        - Namespace/CreationDate
      x-required-properties:
        - NamespaceName
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - iam:PassRole
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:Encrypt
          - kms:Decrypt
          - kms:DescribeKey
          - kms:GenerateDataKeyPair
          - kms:GenerateDataKey
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          - kms:RetireGrant
          - redshift-serverless:CreateNamespace
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListSnapshotCopyConfigurations
          - redshift-serverless:CreateSnapshotCopyConfiguration
          - redshift:GetResourcePolicy
          - redshift:PutResourcePolicy
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - secretsmanager:RotateSecret
          - secretsmanager:DescribeSecret
        read:
          - iam:PassRole
          - redshift-serverless:GetNamespace
          - redshift:GetResourcePolicy
          - redshift-serverless:ListSnapshotCopyConfigurations
        update:
          - iam:PassRole
          - kms:TagResource
          - kms:UntagResource
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:Encrypt
          - kms:Decrypt
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          - kms:RetireGrant
          - kms:GenerateDataKeyPair
          - kms:GenerateDataKey
          - redshift-serverless:UpdateNamespace
          - redshift-serverless:GetNamespace
          - redshift-serverless:ListSnapshotCopyConfigurations
          - redshift-serverless:CreateSnapshotCopyConfiguration
          - redshift-serverless:UpdateSnapshotCopyConfiguration
          - redshift-serverless:DeleteSnapshotCopyConfiguration
          - redshift:GetResourcePolicy
          - redshift:PutResourcePolicy
          - redshift:DeleteResourcePolicy
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - secretsmanager:RotateSecret
          - secretsmanager:DescribeSecret
          - secretsmanager:UpdateSecret
          - secretsmanager:DeleteSecret
        delete:
          - iam:PassRole
          - redshift-serverless:DeleteNamespace
          - redshift-serverless:GetNamespace
          - kms:RetireGrant
          - secretsmanager:DescribeSecret
          - secretsmanager:DeleteSecret
          - redshift:DeleteResourcePolicy
        list:
          - iam:PassRole
          - redshift-serverless:ListNamespaces
    NamespaceStatus:
      type: string
      enum:
        - AVAILABLE
        - MODIFYING
        - DELETING
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    SnapshotCopyConfiguration:
      type: object
      properties:
        DestinationRegion:
          type: string
        DestinationKmsKeyId:
          type: string
        SnapshotRetentionPeriod:
          type: integer
      required:
        - DestinationRegion
      additionalProperties: false
    ConfigParameter:
      type: object
      properties:
        ParameterKey:
          type: string
          maxLength: 255
          minLength: 0
        ParameterValue:
          type: string
          maxLength: 15000
          minLength: 0
      additionalProperties: false
    Endpoint:
      type: object
      properties:
        Address:
          type: string
        Port:
          type: integer
        VpcEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/VpcEndpoint'
          x-insertionOrder: false
      additionalProperties: false
    NetworkInterface:
      type: object
      properties:
        NetworkInterfaceId:
          type: string
        SubnetId:
          type: string
        PrivateIpAddress:
          type: string
        AvailabilityZone:
          type: string
      additionalProperties: false
    VpcEndpoint:
      type: object
      properties:
        VpcEndpointId:
          type: string
        VpcId:
          type: string
        NetworkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          x-insertionOrder: false
      additionalProperties: false
    Workgroup:
      type: object
      properties:
        WorkgroupName:
          description: The name of the workgroup.
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        NamespaceName:
          description: The namespace the workgroup is associated with.
          type: string
          pattern: ^(?=^[a-z0-9-]+$).{3,64}$
          maxLength: 64
          minLength: 3
        BaseCapacity:
          description: The base compute capacity of the workgroup in Redshift Processing Units (RPUs).
          type: integer
        MaxCapacity:
          description: The max compute capacity of the workgroup in Redshift Processing Units (RPUs).
          type: integer
        EnhancedVpcRouting:
          description: The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
          type: boolean
          default: false
        ConfigParameters:
          description: A list of parameters to set for finer control over a database. Available options are datestyle, enable_user_activity_logging, query_group, search_path, max_query_execution_time, and require_ssl.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ConfigParameter'
          minItems: 1
        SecurityGroupIds:
          description: A list of security group IDs to associate with the workgroup.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^sg-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        SubnetIds:
          description: A list of subnet IDs the workgroup is associated with.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^subnet-[0-9a-fA-F]{8,}$
            maxLength: 255
            minLength: 0
          maxItems: 32
          minItems: 1
        PubliclyAccessible:
          description: A value that specifies whether the workgroup can be accessible from a public network.
          type: boolean
          default: false
        Port:
          description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
          type: integer
        Tags:
          description: The map of the key-value pairs used to tag the workgroup.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        Workgroup:
          description: Definition for workgroup resource
          $ref: '#/components/schemas/Workgroup'
      required:
        - WorkgroupName
      x-stackql-resource-name: workgroup
      description: Definition of AWS::RedshiftServerless::Workgroup Resource Type
      x-type-name: AWS::RedshiftServerless::Workgroup
      x-stackql-primary-identifier:
        - WorkgroupName
      x-create-only-properties:
        - WorkgroupName
        - NamespaceName
      x-write-only-properties:
        - BaseCapacity
        - MaxCapacity
        - ConfigParameters
        - SecurityGroupIds
        - SubnetIds
        - Tags
        - Tags/*/Key
        - Tags/*/Value
      x-read-only-properties:
        - Workgroup
        - Workgroup/WorkgroupId
        - Workgroup/WorkgroupArn
        - Workgroup/WorkgroupName
        - Workgroup/NamespaceName
        - Workgroup/BaseCapacity
        - Workgroup/MaxCapacity
        - Workgroup/EnhancedVpcRouting
        - Workgroup/ConfigParameters/*/ParameterKey
        - Workgroup/ConfigParameters/*/ParameterValue
        - Workgroup/SecurityGroupIds
        - Workgroup/SubnetIds
        - Workgroup/Status
        - Workgroup/Endpoint/Address
        - Workgroup/Endpoint/Port
        - Workgroup/Endpoint/VpcEndpoints/*/VpcEndpointId
        - Workgroup/Endpoint/VpcEndpoints/*/VpcId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/NetworkInterfaceId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/SubnetId
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/PrivateIpAddress
        - Workgroup/Endpoint/VpcEndpoints/*/NetworkInterfaces/*/AvailabilityZone
        - Workgroup/PubliclyAccessible
        - Workgroup/CreationDate
      x-required-properties:
        - WorkgroupName
      x-tagging:
        taggable: true
      x-required-permissions:
        create:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:CreateNamespace
          - redshift-serverless:CreateWorkgroup
          - redshift-serverless:GetWorkgroup
        read:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:GetWorkgroup
        update:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:ListTagsForResource
          - redshift-serverless:TagResource
          - redshift-serverless:UntagResource
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:UpdateWorkgroup
        delete:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:GetWorkgroup
          - redshift-serverless:DeleteWorkgroup
        list:
          - ec2:DescribeVpcAttribute
          - ec2:DescribeSecurityGroups
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          - ec2:DescribeSubnets
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAvailabilityZones
          - redshift-serverless:ListWorkgroups
    WorkgroupStatus:
      type: string
      enum:
        - CREATING
        - AVAILABLE
        - MODIFYING
        - DELETING
  x-stackQL-resources:
    namespaces:
      name: namespaces
      id: aws.redshiftserverless.namespaces
      x-cfn-schema-name: Namespace
      x-type: list
      x-identifiers:
        - NamespaceName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NamespaceName') as namespace_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND region = 'us-east-1'
    namespace:
      name: namespace
      id: aws.redshiftserverless.namespace
      x-cfn-schema-name: Namespace
      x-type: get
      x-identifiers:
        - NamespaceName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
              JSON_EXTRACT(Properties, '$.AdminUserPassword') as admin_user_password,
              JSON_EXTRACT(Properties, '$.AdminUsername') as admin_username,
              JSON_EXTRACT(Properties, '$.DbName') as db_name,
              JSON_EXTRACT(Properties, '$.DefaultIamRoleArn') as default_iam_role_arn,
              JSON_EXTRACT(Properties, '$.IamRoles') as iam_roles,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LogExports') as log_exports,
              JSON_EXTRACT(Properties, '$.ManageAdminPassword') as manage_admin_password,
              JSON_EXTRACT(Properties, '$.Namespace') as namespace,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
              JSON_EXTRACT(Properties, '$.NamespaceResourcePolicy') as namespace_resource_policy,
              JSON_EXTRACT(Properties, '$.RedshiftIdcApplicationArn') as redshift_idc_application_arn,
              JSON_EXTRACT(Properties, '$.SnapshotCopyConfigurations') as snapshot_copy_configurations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
              AND data__Identifier = '<NamespaceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AdminPasswordSecretKmsKeyId') as admin_password_secret_kms_key_id,
                json_extract_path_text(Properties, 'AdminUserPassword') as admin_user_password,
                json_extract_path_text(Properties, 'AdminUsername') as admin_username,
                json_extract_path_text(Properties, 'DbName') as db_name,
                json_extract_path_text(Properties, 'DefaultIamRoleArn') as default_iam_role_arn,
                json_extract_path_text(Properties, 'IamRoles') as iam_roles,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'LogExports') as log_exports,
                json_extract_path_text(Properties, 'ManageAdminPassword') as manage_admin_password,
                json_extract_path_text(Properties, 'Namespace') as namespace,
                json_extract_path_text(Properties, 'NamespaceName') as namespace_name,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name,
                json_extract_path_text(Properties, 'FinalSnapshotRetentionPeriod') as final_snapshot_retention_period,
                json_extract_path_text(Properties, 'NamespaceResourcePolicy') as namespace_resource_policy,
                json_extract_path_text(Properties, 'RedshiftIdcApplicationArn') as redshift_idc_application_arn,
                json_extract_path_text(Properties, 'SnapshotCopyConfigurations') as snapshot_copy_configurations
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Namespace'
                AND data__Identifier = '<NamespaceName>'
                AND region = 'us-east-1'
    workgroups:
      name: workgroups
      id: aws.redshiftserverless.workgroups
      x-cfn-schema-name: Workgroup
      x-type: list
      x-identifiers:
        - WorkgroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkgroupName') as workgroup_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND region = 'us-east-1'
    workgroup:
      name: workgroup
      id: aws.redshiftserverless.workgroup
      x-cfn-schema-name: Workgroup
      x-type: get
      x-identifiers:
        - WorkgroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WorkgroupName') as workgroup_name,
              JSON_EXTRACT(Properties, '$.NamespaceName') as namespace_name,
              JSON_EXTRACT(Properties, '$.BaseCapacity') as base_capacity,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(Properties, '$.EnhancedVpcRouting') as enhanced_vpc_routing,
              JSON_EXTRACT(Properties, '$.ConfigParameters') as config_parameters,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Workgroup') as workgroup
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
              AND data__Identifier = '<WorkgroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'WorkgroupName') as workgroup_name,
                json_extract_path_text(Properties, 'NamespaceName') as namespace_name,
                json_extract_path_text(Properties, 'BaseCapacity') as base_capacity,
                json_extract_path_text(Properties, 'MaxCapacity') as max_capacity,
                json_extract_path_text(Properties, 'EnhancedVpcRouting') as enhanced_vpc_routing,
                json_extract_path_text(Properties, 'ConfigParameters') as config_parameters,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Workgroup') as workgroup
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::RedshiftServerless::Workgroup'
                AND data__Identifier = '<WorkgroupName>'
                AND region = 'us-east-1'
