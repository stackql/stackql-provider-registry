openapi: 3.0.0
info:
  title: Route53
  version: 1.0.0
paths: {}
components:
  schemas:
    Location:
      type: object
      additionalProperties: false
      properties:
        LocationName:
          description: The name of the location that is associated with the CIDR collection.
          type: string
          minLength: 1
          maxLength: 16
        CidrList:
          description: A list of CIDR blocks.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      required:
        - LocationName
        - CidrList
    CidrCollection:
      type: object
      properties:
        Id:
          description: UUID of the CIDR collection.
          type: string
        Name:
          description: A unique name for the CIDR collection.
          type: string
          pattern: ^[0-9A-Za-z_\-]+$
          minLength: 1
          maxLength: 64
        Arn:
          description: The Amazon resource name (ARN) to uniquely identify the AWS resource.
          type: string
        Locations:
          description: A complex type that contains information about the list of CIDR locations.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Location'
      required:
        - Name
      x-stackql-resource-name: cidr_collection
      x-stackql-primaryIdentifier:
        - Id
    DNSSEC:
      type: object
      properties:
        HostedZoneId:
          description: The unique string (ID) used to identify a hosted zone.
          type: string
          pattern: ^[A-Z0-9]{1,32}$
      required:
        - HostedZoneId
      x-stackql-resource-name: dnssec
      x-stackql-primaryIdentifier:
        - HostedZoneId
    AlarmIdentifier:
      description: A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
      type: object
      additionalProperties: false
      properties:
        Name:
          description: The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
          type: string
          minLength: 1
          maxLength: 256
        Region:
          description: For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy, the region that the alarm was created in.
          type: string
      required:
        - Name
        - Region
    HealthCheckTag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key name of the tag.
          maxLength: 128
        Value:
          type: string
          description: The value for the tag.
          maxLength: 256
      required:
        - Value
        - Key
    HealthCheck:
      type: object
      properties:
        HealthCheckId:
          type: string
        HealthCheckConfig:
          description: A complex type that contains information about the health check.
          type: object
          properties:
            AlarmIdentifier:
              $ref: '#/components/schemas/AlarmIdentifier'
            ChildHealthChecks:
              type: array
              items:
                type: string
              maxItems: 256
              x-insertionOrder: false
            EnableSNI:
              type: boolean
            FailureThreshold:
              type: integer
              minimum: 1
              maximum: 10
            FullyQualifiedDomainName:
              type: string
              maxLength: 255
            HealthThreshold:
              type: integer
              minimum: 0
              maximum: 256
            InsufficientDataHealthStatus:
              type: string
              enum:
                - Healthy
                - LastKnownStatus
                - Unhealthy
            Inverted:
              type: boolean
            IPAddress:
              type: string
              maxLength: 45
              pattern: >-
                ^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$
            MeasureLatency:
              type: boolean
            Port:
              type: integer
              minimum: 1
              maximum: 65535
            Regions:
              type: array
              items:
                type: string
              maxItems: 64
              x-insertionOrder: false
            RequestInterval:
              type: integer
              minimum: 10
              maximum: 30
            ResourcePath:
              type: string
              maxLength: 255
            SearchString:
              type: string
              maxLength: 255
            RoutingControlArn:
              type: string
              minLength: 1
              maxLength: 255
            Type:
              type: string
              enum:
                - CALCULATED
                - CLOUDWATCH_METRIC
                - HTTP
                - HTTP_STR_MATCH
                - HTTPS
                - HTTPS_STR_MATCH
                - TCP
                - RECOVERY_CONTROL
          required:
            - Type
          additionalProperties: false
        HealthCheckTags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/HealthCheckTag'
      required:
        - HealthCheckConfig
      x-stackql-resource-name: health_check
      x-stackql-primaryIdentifier:
        - HealthCheckId
    HostedZoneConfig:
      description: |-
        A complex type that contains an optional comment.

        If you don't want to specify a comment, omit the HostedZoneConfig and Comment elements.
      type: object
      additionalProperties: false
      properties:
        Comment:
          description: Any comments that you want to include about the hosted zone.
          type: string
          maxLength: 256
    HostedZoneTag:
      description: A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key name of the tag.
          maxLength: 128
        Value:
          type: string
          description: The value for the tag.
          maxLength: 256
      required:
        - Value
        - Key
    QueryLoggingConfig:
      description: A complex type that contains information about a configuration for DNS query logging.
      type: object
      additionalProperties: false
      properties:
        CloudWatchLogsLogGroupArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
          type: string
      required:
        - CloudWatchLogsLogGroupArn
    VPC:
      description: A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC.
      type: object
      additionalProperties: false
      properties:
        VPCId:
          description: The ID of an Amazon VPC.
          type: string
        VPCRegion:
          description: The region that an Amazon VPC was created in. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a list of up to date regions.
          type: string
      required:
        - VPCId
        - VPCRegion
    HostedZone:
      type: object
      properties:
        Id:
          type: string
        HostedZoneConfig:
          $ref: '#/components/schemas/HostedZoneConfig'
        HostedZoneTags:
          description: |-
            Adds, edits, or deletes tags for a health check or a hosted zone.

            For information about using tags for cost allocation, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/HostedZoneTag'
        Name:
          description: |-
            The name of the domain. Specify a fully qualified domain name, for example, www.example.com. The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats www.example.com (without a trailing dot) and www.example.com. (with a trailing dot) as identical.

            If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name is registered with a registrar other than Route 53, change the name servers for your domain to the set of NameServers that are returned by the Fn::GetAtt intrinsic function.
          type: string
          maxLength: 1024
        QueryLoggingConfig:
          $ref: '#/components/schemas/QueryLoggingConfig'
        VPCs:
          description: A complex type that contains information about the VPCs that are associated with the specified hosted zone.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VPC'
        NameServers:
          type: array
          uniqueItems: false
          items:
            type: string
      x-stackql-resource-name: hosted_zone
      x-stackql-primaryIdentifier:
        - Id
    KeySigningKey:
      type: object
      properties:
        HostedZoneId:
          description: The unique string (ID) used to identify a hosted zone.
          type: string
          pattern: ^[A-Z0-9]{1,32}$
        Status:
          description: A string specifying the initial status of the key signing key (KSK). You can set the value to ACTIVE or INACTIVE.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        Name:
          description: An alphanumeric string used to identify a key signing key (KSK). Name must be unique for each key signing key in the same hosted zone.
          type: string
          pattern: ^[a-zA-Z0-9_]{3,128}$
        KeyManagementServiceArn:
          description: The Amazon resource name (ARN) for a customer managed key (CMK) in AWS Key Management Service (KMS). The KeyManagementServiceArn must be unique for each key signing key (KSK) in a single hosted zone.
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Status
        - HostedZoneId
        - Name
        - KeyManagementServiceArn
      x-stackql-resource-name: key_signing_key
      x-stackql-primaryIdentifier:
        - HostedZoneId
        - Name
    AliasTarget:
      type: object
      additionalProperties: false
      properties:
        DNSName:
          type: string
        HostedZoneId:
          type: string
        EvaluateTargetHealth:
          type: boolean
      required:
        - HostedZoneId
        - DNSName
    CidrRoutingConfig:
      type: object
      additionalProperties: false
      properties:
        CollectionId:
          type: string
        LocationName:
          type: string
      required:
        - CollectionId
        - LocationName
    GeoLocation:
      type: object
      additionalProperties: false
      properties:
        ContinentCode:
          type: string
        CountryCode:
          type: string
        SubdivisionCode:
          type: string
    RecordSet:
      type: object
      additionalProperties: false
      properties:
        HealthCheckId:
          type: string
        AliasTarget:
          $ref: '#/components/schemas/AliasTarget'
        HostedZoneName:
          type: string
        ResourceRecords:
          type: array
          uniqueItems: true
          items:
            type: string
        HostedZoneId:
          type: string
        SetIdentifier:
          type: string
        TTL:
          type: string
        Weight:
          type: integer
        Name:
          type: string
        Type:
          type: string
        CidrRoutingConfig:
          $ref: '#/components/schemas/CidrRoutingConfig'
        Failover:
          type: string
        Region:
          type: string
        GeoLocation:
          $ref: '#/components/schemas/GeoLocation'
        MultiValueAnswer:
          type: boolean
      required:
        - Type
        - Name
    RecordSetGroup:
      type: object
      properties:
        Comment:
          type: string
        Id:
          type: string
        HostedZoneName:
          type: string
        RecordSets:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RecordSet'
        HostedZoneId:
          type: string
      x-stackql-resource-name: record_set_group
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    cidr_collections:
      name: cidr_collections
      id: aws.route53.cidr_collections
      x-cfn-schema-name: CidrCollection
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::CidrCollection'
    cidr_collection:
      name: cidr_collection
      id: aws.route53.cidr_collection
      x-cfn-schema-name: CidrCollection
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Locations') as locations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::CidrCollection'
    dnssecs:
      name: dnssecs
      id: aws.route53.dnssecs
      x-cfn-schema-name: DNSSEC
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::DNSSEC'
    dnssec:
      name: dnssec
      id: aws.route53.dnssec
      x-cfn-schema-name: DNSSEC
      x-type: get
      x-identifiers:
        - HostedZoneId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::DNSSEC'
    health_checks:
      name: health_checks
      id: aws.route53.health_checks
      x-cfn-schema-name: HealthCheck
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HealthCheckId') as health_check_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::HealthCheck'
    health_check:
      name: health_check
      id: aws.route53.health_check
      x-cfn-schema-name: HealthCheck
      x-type: get
      x-identifiers:
        - HealthCheckId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HealthCheckId') as health_check_id,
              JSON_EXTRACT(Properties, '$.HealthCheckConfig') as health_check_config,
              JSON_EXTRACT(Properties, '$.HealthCheckTags') as health_check_tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::HealthCheck'
    hosted_zones:
      name: hosted_zones
      id: aws.route53.hosted_zones
      x-cfn-schema-name: HostedZone
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::HostedZone'
    hosted_zone:
      name: hosted_zone
      id: aws.route53.hosted_zone
      x-cfn-schema-name: HostedZone
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.HostedZoneConfig.Comment') as hosted_zone_config_comment,
              JSON_EXTRACT(Properties, '$.HostedZoneTags') as hosted_zone_tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.QueryLoggingConfig.CloudWatchLogsLogGroupArn') as query_logging_config_cloud_watch_logs_log_group_arn,
              JSON_EXTRACT(Properties, '$.VPCs') as v_pcs,
              JSON_EXTRACT(Properties, '$.NameServers') as name_servers
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::HostedZone'
    key_signing_keys:
      name: key_signing_keys
      id: aws.route53.key_signing_keys
      x-cfn-schema-name: KeySigningKey
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::KeySigningKey'
    key_signing_key:
      name: key_signing_key
      id: aws.route53.key_signing_key
      x-cfn-schema-name: KeySigningKey
      x-type: get
      x-identifiers:
        - HostedZoneId
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.KeyManagementServiceArn') as key_management_service_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::KeySigningKey'
    record_set_groups:
      name: record_set_groups
      id: aws.route53.record_set_groups
      x-cfn-schema-name: RecordSetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Route53::RecordSetGroup'
    record_set_group:
      name: record_set_group
      id: aws.route53.record_set_group
      x-cfn-schema-name: RecordSetGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Comment') as comment,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.HostedZoneName') as hosted_zone_name,
              JSON_EXTRACT(Properties, '$.RecordSets') as record_sets,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Route53::RecordSetGroup'
