openapi: 3.0.0
info:
  title: LakeFormation
  version: 1.0.0
paths: {}
components:
  schemas:
    CatalogIdString:
      type: string
      minLength: 12
      maxLength: 12
    NameString:
      type: string
      minLength: 1
      maxLength: 255
    RowFilter:
      description: An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
      type: object
      properties:
        FilterExpression:
          description: A PartiQL predicate.
          type: string
        AllRowsWildcard:
          description: An empty object representing a row wildcard.
          type: object
          additionalProperties: false
      additionalProperties: false
    ColumnNames:
      type: array
      items:
        $ref: '#/components/schemas/NameString'
      x-insertionOrder: false
    ColumnWildcard:
      type: object
      properties:
        ExcludedColumnNames:
          $ref: '#/components/schemas/ColumnNames'
          description: Excludes column names. Any column with this name will be excluded.
      additionalProperties: false
      description: A wildcard object, consisting of an optional list of excluded column names or indexes.
    DataCellsFilter:
      type: object
      properties:
        TableCatalogId:
          description: The Catalog Id of the Table on which to create a Data Cells Filter.
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          description: The name of the Database that the Table resides in.
          $ref: '#/components/schemas/NameString'
        TableName:
          description: The name of the Table to create a Data Cells Filter for.
          $ref: '#/components/schemas/NameString'
        Name:
          description: The desired name of the Data Cells Filter.
          $ref: '#/components/schemas/NameString'
        RowFilter:
          description: An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
          $ref: '#/components/schemas/RowFilter'
        ColumnNames:
          description: A list of columns to be included in this Data Cells Filter.
          $ref: '#/components/schemas/ColumnNames'
        ColumnWildcard:
          description: An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
          $ref: '#/components/schemas/ColumnWildcard'
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-stackql-resource-name: data_cells_filter
      description: A resource schema representing a Lake Formation Data Cells Filter.
      x-type-name: AWS::LakeFormation::DataCellsFilter
      x-stackql-primary-identifier:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-create-only-properties:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
        - RowFilter
        - ColumnNames
        - ColumnWildcard
      x-required-properties:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:CreateDataCellsFilter
          - glue:GetTable
        delete:
          - lakeformation:DeleteDataCellsFilter
        read:
          - lakeformation:ListDataCellsFilter
        list:
          - lakeformation:ListDataCellsFilter
    PathString:
      type: string
    ResourceArnString:
      type: string
    IAMRoleArn:
      type: string
      pattern: arn:*:iam::[0-9]*:role/.*
    LFTag:
      type: object
      properties:
        TagKey:
          $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          $ref: '#/components/schemas/TagValueList'
          description: A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.
      additionalProperties: false
      description: The LF-tag key and values attached to a resource.
    LFTagPair:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        TagKey:
          $ref: '#/components/schemas/LFTagKey'
        TagValues:
          $ref: '#/components/schemas/TagValueList'
      required:
        - CatalogId
        - TagKey
        - TagValues
      additionalProperties: false
    LFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagPair'
      x-insertionOrder: false
    Expression:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/LFTag'
      minItems: 1
      maxItems: 5
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          $ref: '#/components/schemas/DataLakePrincipalString'
      additionalProperties: false
    ResourceType:
      type: string
      enum:
        - DATABASE
        - TABLE
    CatalogResource:
      type: object
      additionalProperties: false
    DatabaseResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        Name:
          $ref: '#/components/schemas/NameString'
      required:
        - CatalogId
        - Name
      additionalProperties: false
    TableWildcard:
      type: object
      additionalProperties: false
    TableResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          $ref: '#/components/schemas/NameString'
        Name:
          $ref: '#/components/schemas/NameString'
        TableWildcard:
          $ref: '#/components/schemas/TableWildcard'
      required:
        - CatalogId
        - DatabaseName
      additionalProperties: false
    TableWithColumnsResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          $ref: '#/components/schemas/NameString'
        Name:
          $ref: '#/components/schemas/NameString'
        ColumnNames:
          $ref: '#/components/schemas/ColumnNames'
      required:
        - CatalogId
        - DatabaseName
        - Name
        - ColumnNames
      additionalProperties: false
    DataLocationResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC where the location is registered with LFlong.
        ResourceArn:
          $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
      additionalProperties: false
      required:
        - CatalogId
        - ResourceArn
      description: A structure for a data location object where permissions are granted or revoked.
    DataCellsFilterResource:
      type: object
      properties:
        TableCatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          $ref: '#/components/schemas/NameString'
          description: A database in the GLUDC.
        TableName:
          $ref: '#/components/schemas/NameString'
          description: The name of the table.
        Name:
          $ref: '#/components/schemas/NameString'
          description: The name given by the user to the data filter cell.
      additionalProperties: false
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      description: A structure that describes certain columns on certain rows.
    LFTagKeyResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC where the location is registered with GLUDC.
        TagKey:
          $ref: '#/components/schemas/NameString'
          description: The key-name for the LF-tag.
        TagValues:
          $ref: '#/components/schemas/TagValueList'
          description: A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.
      additionalProperties: false
      required:
        - CatalogId
        - TagKey
        - TagValues
      description: A structure containing an LF-tag key and values for a resource.
    LFTagPolicyResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        ResourceType:
          $ref: '#/components/schemas/ResourceType'
          description: The resource type for which the LF-tag policy applies.
        Expression:
          $ref: '#/components/schemas/Expression'
          description: A list of LF-tag conditions that apply to the resource's LF-tag policy.
      additionalProperties: false
      required:
        - CatalogId
        - ResourceType
        - Expression
      description: |-
        A list of LF-tag conditions that define a resource's LF-tag policy.
         A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
    Resource:
      type: object
      properties:
        Catalog:
          $ref: '#/components/schemas/CatalogResource'
        Database:
          $ref: '#/components/schemas/DatabaseResource'
        Table:
          $ref: '#/components/schemas/TableResource'
        TableWithColumns:
          $ref: '#/components/schemas/TableWithColumnsResource'
      additionalProperties: false
    NullableBoolean:
      type: boolean
    Permission:
      type: string
      enum:
        - ALL
        - SELECT
        - ALTER
        - DROP
        - DELETE
        - INSERT
        - DESCRIBE
        - CREATE_DATABASE
        - CREATE_TABLE
        - DATA_LOCATION_ACCESS
        - CREATE_TAG
        - ASSOCIATE
    LFTagKey:
      type: string
      minLength: 1
      maxLength: 128
    LFTagValue:
      type: string
      minLength: 0
      maxLength: 256
    DataLakePrincipalList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/DataLakePrincipal'
    PermissionList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Permission'
    TagValueList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagValue'
      x-insertionOrder: false
      minItems: 1
      maxItems: 50
    PrincipalResourcePair:
      type: object
      properties:
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Resource:
          $ref: '#/components/schemas/Resource'
      additionalProperties: false
      required:
        - Principal
        - Resource
      description: ''
    PrincipalPermissions:
      type: object
      properties:
        Catalog:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC. By default, the account ID. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal to be granted a permission.
        Resource:
          $ref: '#/components/schemas/Resource'
          description: The resource to be granted or revoked permissions.
        Permissions:
          $ref: '#/components/schemas/PermissionList'
          description: The permissions granted or revoked.
        PermissionsWithGrantOption:
          $ref: '#/components/schemas/PermissionList'
          description: Indicates the ability to grant permissions (as a subset of permissions granted).
        PrincipalIdentifier:
          type: string
          description: ''
        ResourceIdentifier:
          type: string
          description: ''
      required:
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-stackql-resource-name: principal_permissions
      description: The ``AWS::LakeFormation::PrincipalPermissions`` resource represents the permissions that a principal has on a GLUDC resource (such as GLUlong databases or GLUlong tables). When you create a ``PrincipalPermissions`` resource, the permissions are granted via the LFlong ``GrantPermissions`` API operation. When you delete a ``PrincipalPermissions`` resource, the permissions on principal-resource pair are revoked via the LFlong ``RevokePermissions`` API operation.
      x-type-name: AWS::LakeFormation::PrincipalPermissions
      x-stackql-primary-identifier:
        - PrincipalIdentifier
        - ResourceIdentifier
      x-create-only-properties:
        - Catalog
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-read-only-properties:
        - PrincipalIdentifier
        - ResourceIdentifier
      x-required-properties:
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:GrantPermissions
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
        read:
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
        delete:
          - lakeformation:RevokePermissions
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
    PrincipalPermissionsList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/PrincipalPermissions'
    Tag:
      type: object
      properties:
        CatalogId:
          description: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
          $ref: '#/components/schemas/CatalogIdString'
        TagKey:
          description: The key-name for the LF-tag.
          $ref: '#/components/schemas/LFTagKey'
        TagValues:
          description: A list of possible values an attribute can take.
          $ref: '#/components/schemas/TagValueList'
      required:
        - TagKey
        - TagValues
      x-stackql-resource-name: tag
      description: A resource schema representing a Lake Formation Tag.
      x-type-name: AWS::LakeFormation::Tag
      x-stackql-primary-identifier:
        - TagKey
      x-create-only-properties:
        - CatalogId
        - TagKey
      x-required-properties:
        - TagKey
        - TagValues
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:CreateLFTag
        read:
          - lakeformation:GetLFTag
        update:
          - lakeformation:UpdateLFTag
        delete:
          - lakeformation:DeleteLFTag
        list:
          - lakeformation:ListLFTags
    TagAssociation:
      type: object
      properties:
        Resource:
          description: Resource to tag with the Lake Formation Tags
          $ref: '#/components/schemas/Resource'
        LFTags:
          description: List of Lake Formation Tags to associate with the Lake Formation Resource
          $ref: '#/components/schemas/LFTagsList'
        ResourceIdentifier:
          description: Unique string identifying the resource. Used as primary identifier, which ideally should be a string
          type: string
        TagsIdentifier:
          description: Unique string identifying the resource's tags. Used as primary identifier, which ideally should be a string
          type: string
      required:
        - Resource
        - LFTags
      x-stackql-resource-name: tag_association
      description: A resource schema representing a Lake Formation Tag Association. While tag associations are not explicit Lake Formation resources, this CloudFormation resource can be used to associate tags with Lake Formation entities.
      x-type-name: AWS::LakeFormation::TagAssociation
      x-stackql-primary-identifier:
        - ResourceIdentifier
        - TagsIdentifier
      x-create-only-properties:
        - Resource
        - LFTags
      x-read-only-properties:
        - ResourceIdentifier
        - TagsIdentifier
      x-required-properties:
        - Resource
        - LFTags
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:AddLFTagsToResource
          - glue:GetDatabase
          - glue:GetTable
        read:
          - lakeformation:GetResourceLFTags
          - glue:GetDatabase
          - glue:GetTable
        delete:
          - lakeformation:RemoveLFTagsFromResource
          - glue:GetDatabase
          - glue:GetTable
  x-stackQL-resources:
    data_cells_filters:
      name: data_cells_filters
      id: aws.lakeformation.data_cells_filters
      x-cfn-schema-name: DataCellsFilter
      x-type: list
      x-identifiers:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TableCatalogId') as table_catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TableCatalogId') as table_catalog_id,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                AND region = 'us-east-1'
    data_cells_filter:
      name: data_cells_filter
      id: aws.lakeformation.data_cells_filter
      x-cfn-schema-name: DataCellsFilter
      x-type: get
      x-identifiers:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TableCatalogId') as table_catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RowFilter') as row_filter,
              JSON_EXTRACT(Properties, '$.ColumnNames') as column_names,
              JSON_EXTRACT(Properties, '$.ColumnWildcard') as column_wildcard
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
              AND data__Identifier = '<TableCatalogId>|<DatabaseName>|<TableName>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TableCatalogId') as table_catalog_id,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RowFilter') as row_filter,
                json_extract_path_text(Properties, 'ColumnNames') as column_names,
                json_extract_path_text(Properties, 'ColumnWildcard') as column_wildcard
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                AND data__Identifier = '<TableCatalogId>|<DatabaseName>|<TableName>|<Name>'
                AND region = 'us-east-1'
    principal_permissions:
      name: principal_permissions
      id: aws.lakeformation.principal_permissions
      x-cfn-schema-name: PrincipalPermissions
      x-type: get
      x-identifiers:
        - PrincipalIdentifier
        - ResourceIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Catalog') as catalog,
              JSON_EXTRACT(Properties, '$.Principal') as principal,
              JSON_EXTRACT(Properties, '$.Resource') as resource,
              JSON_EXTRACT(Properties, '$.Permissions') as permissions,
              JSON_EXTRACT(Properties, '$.PermissionsWithGrantOption') as permissions_with_grant_option,
              JSON_EXTRACT(Properties, '$.PrincipalIdentifier') as principal_identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::PrincipalPermissions'
              AND data__Identifier = '<PrincipalIdentifier>|<ResourceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Catalog') as catalog,
                json_extract_path_text(Properties, 'Principal') as principal,
                json_extract_path_text(Properties, 'Resource') as resource,
                json_extract_path_text(Properties, 'Permissions') as permissions,
                json_extract_path_text(Properties, 'PermissionsWithGrantOption') as permissions_with_grant_option,
                json_extract_path_text(Properties, 'PrincipalIdentifier') as principal_identifier,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::PrincipalPermissions'
                AND data__Identifier = '<PrincipalIdentifier>|<ResourceIdentifier>'
                AND region = 'us-east-1'
    tags:
      name: tags
      id: aws.lakeformation.tags
      x-cfn-schema-name: Tag
      x-type: list
      x-identifiers:
        - TagKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TagKey') as tag_key
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::Tag'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TagKey') as tag_key
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::Tag'
                AND region = 'us-east-1'
    tag:
      name: tag
      id: aws.lakeformation.tag
      x-cfn-schema-name: Tag
      x-type: get
      x-identifiers:
        - TagKey
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.TagKey') as tag_key,
              JSON_EXTRACT(Properties, '$.TagValues') as tag_values
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::Tag'
              AND data__Identifier = '<TagKey>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                json_extract_path_text(Properties, 'TagKey') as tag_key,
                json_extract_path_text(Properties, 'TagValues') as tag_values
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::Tag'
                AND data__Identifier = '<TagKey>'
                AND region = 'us-east-1'
    tag_association:
      name: tag_association
      id: aws.lakeformation.tag_association
      x-cfn-schema-name: TagAssociation
      x-type: get
      x-identifiers:
        - ResourceIdentifier
        - TagsIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Resource') as resource,
              JSON_EXTRACT(Properties, '$.LFTags') as lf_tags,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.TagsIdentifier') as tags_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::TagAssociation'
              AND data__Identifier = '<ResourceIdentifier>|<TagsIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Resource') as resource,
                json_extract_path_text(Properties, 'LFTags') as lf_tags,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'TagsIdentifier') as tags_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::TagAssociation'
                AND data__Identifier = '<ResourceIdentifier>|<TagsIdentifier>'
                AND region = 'us-east-1'
