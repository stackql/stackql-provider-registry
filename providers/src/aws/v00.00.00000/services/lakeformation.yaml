openapi: 3.0.0
info:
  title: LakeFormation
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    CatalogIdString:
      type: string
      minLength: 12
      maxLength: 12
    NameString:
      type: string
      minLength: 1
      maxLength: 255
    RowFilter:
      description: An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
      type: object
      properties:
        FilterExpression:
          description: A PartiQL predicate.
          type: string
        AllRowsWildcard:
          description: An empty object representing a row wildcard.
          type: object
          additionalProperties: false
      additionalProperties: false
    ColumnNames:
      type: array
      items:
        $ref: '#/components/schemas/NameString'
      x-insertionOrder: false
    ColumnWildcard:
      type: object
      properties:
        ExcludedColumnNames:
          $ref: '#/components/schemas/ColumnNames'
          description: Excludes column names. Any column with this name will be excluded.
      additionalProperties: false
      description: A wildcard object, consisting of an optional list of excluded column names or indexes.
    DataCellsFilter:
      type: object
      properties:
        TableCatalogId:
          description: The Catalog Id of the Table on which to create a Data Cells Filter.
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          description: The name of the Database that the Table resides in.
          $ref: '#/components/schemas/NameString'
        TableName:
          description: The name of the Table to create a Data Cells Filter for.
          $ref: '#/components/schemas/NameString'
        Name:
          description: The desired name of the Data Cells Filter.
          $ref: '#/components/schemas/NameString'
        RowFilter:
          description: An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
          $ref: '#/components/schemas/RowFilter'
        ColumnNames:
          description: A list of columns to be included in this Data Cells Filter.
          $ref: '#/components/schemas/ColumnNames'
        ColumnWildcard:
          description: An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
          $ref: '#/components/schemas/ColumnWildcard'
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-stackql-resource-name: data_cells_filter
      description: A resource schema representing a Lake Formation Data Cells Filter.
      x-type-name: AWS::LakeFormation::DataCellsFilter
      x-stackql-primary-identifier:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-create-only-properties:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
        - RowFilter
        - ColumnNames
        - ColumnWildcard
      x-required-properties:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:CreateDataCellsFilter
          - glue:GetTable
        delete:
          - lakeformation:DeleteDataCellsFilter
        read:
          - lakeformation:ListDataCellsFilter
        list:
          - lakeformation:ListDataCellsFilter
    PathString:
      type: string
    ResourceArnString:
      type: string
    IAMRoleArn:
      type: string
      pattern: arn:*:iam::[0-9]*:role/.*
    LFTag:
      type: object
      properties:
        TagKey:
          $ref: '#/components/schemas/LFTagKey'
          description: The key-name for the LF-tag.
        TagValues:
          $ref: '#/components/schemas/TagValueList'
          description: A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.
      additionalProperties: false
      description: The LF-tag key and values attached to a resource.
    LFTagPair:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        TagKey:
          $ref: '#/components/schemas/LFTagKey'
        TagValues:
          $ref: '#/components/schemas/TagValueList'
      required:
        - CatalogId
        - TagKey
        - TagValues
      additionalProperties: false
    LFTagsList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagPair'
      x-insertionOrder: false
    Expression:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/LFTag'
      minItems: 1
      maxItems: 5
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          $ref: '#/components/schemas/DataLakePrincipalString'
      additionalProperties: false
    ResourceType:
      type: string
      enum:
        - DATABASE
        - TABLE
    CatalogResource:
      type: object
      additionalProperties: false
    DatabaseResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        Name:
          $ref: '#/components/schemas/NameString'
      required:
        - CatalogId
        - Name
      additionalProperties: false
    TableWildcard:
      type: object
      additionalProperties: false
    TableResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          $ref: '#/components/schemas/NameString'
        Name:
          $ref: '#/components/schemas/NameString'
        TableWildcard:
          $ref: '#/components/schemas/TableWildcard'
      required:
        - CatalogId
        - DatabaseName
      additionalProperties: false
    TableWithColumnsResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
        DatabaseName:
          $ref: '#/components/schemas/NameString'
        Name:
          $ref: '#/components/schemas/NameString'
        ColumnNames:
          $ref: '#/components/schemas/ColumnNames'
      required:
        - CatalogId
        - DatabaseName
        - Name
        - ColumnNames
      additionalProperties: false
    DataLocationResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC where the location is registered with LFlong.
        ResourceArn:
          $ref: '#/components/schemas/ResourceArnString'
          description: The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
      additionalProperties: false
      required:
        - CatalogId
        - ResourceArn
      description: A structure for a data location object where permissions are granted or revoked.
    DataCellsFilterResource:
      type: object
      properties:
        TableCatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The ID of the catalog to which the table belongs.
        DatabaseName:
          $ref: '#/components/schemas/NameString'
          description: A database in the GLUDC.
        TableName:
          $ref: '#/components/schemas/NameString'
          description: The name of the table.
        Name:
          $ref: '#/components/schemas/NameString'
          description: The name given by the user to the data filter cell.
      additionalProperties: false
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      description: A structure that describes certain columns on certain rows.
    LFTagKeyResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC where the location is registered with GLUDC.
        TagKey:
          $ref: '#/components/schemas/NameString'
          description: The key-name for the LF-tag.
        TagValues:
          $ref: '#/components/schemas/TagValueList'
          description: A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.
      additionalProperties: false
      required:
        - CatalogId
        - TagKey
        - TagValues
      description: A structure containing an LF-tag key and values for a resource.
    LFTagPolicyResource:
      type: object
      properties:
        CatalogId:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        ResourceType:
          $ref: '#/components/schemas/ResourceType'
          description: The resource type for which the LF-tag policy applies.
        Expression:
          $ref: '#/components/schemas/Expression'
          description: A list of LF-tag conditions that apply to the resource's LF-tag policy.
      additionalProperties: false
      required:
        - CatalogId
        - ResourceType
        - Expression
      description: |-
        A list of LF-tag conditions that define a resource's LF-tag policy.
         A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
    Resource:
      type: object
      properties:
        Catalog:
          $ref: '#/components/schemas/CatalogResource'
        Database:
          $ref: '#/components/schemas/DatabaseResource'
        Table:
          $ref: '#/components/schemas/TableResource'
        TableWithColumns:
          $ref: '#/components/schemas/TableWithColumnsResource'
      additionalProperties: false
    NullableBoolean:
      type: boolean
    Permission:
      type: string
      enum:
        - ALL
        - SELECT
        - ALTER
        - DROP
        - DELETE
        - INSERT
        - DESCRIBE
        - CREATE_DATABASE
        - CREATE_TABLE
        - DATA_LOCATION_ACCESS
        - CREATE_LF_TAG
        - ASSOCIATE
        - GRANT_WITH_LF_TAG_EXPRESSION
    LFTagKey:
      type: string
      minLength: 1
      maxLength: 128
    LFTagValue:
      type: string
      minLength: 0
      maxLength: 256
    DataLakePrincipalList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/DataLakePrincipal'
    PermissionList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Permission'
    TagValueList:
      type: array
      items:
        $ref: '#/components/schemas/LFTagValue'
      x-insertionOrder: false
      minItems: 1
      maxItems: 50
    PrincipalResourcePair:
      type: object
      properties:
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
        Resource:
          $ref: '#/components/schemas/Resource'
      additionalProperties: false
      required:
        - Principal
        - Resource
      description: ''
    PrincipalPermissions:
      type: object
      properties:
        Catalog:
          $ref: '#/components/schemas/CatalogIdString'
          description: The identifier for the GLUDC. By default, the account ID. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        Principal:
          $ref: '#/components/schemas/DataLakePrincipal'
          description: The principal to be granted a permission.
        Resource:
          $ref: '#/components/schemas/Resource'
          description: The resource to be granted or revoked permissions.
        Permissions:
          $ref: '#/components/schemas/PermissionList'
          description: The permissions granted or revoked.
        PermissionsWithGrantOption:
          $ref: '#/components/schemas/PermissionList'
          description: Indicates the ability to grant permissions (as a subset of permissions granted).
        PrincipalIdentifier:
          type: string
          description: ''
        ResourceIdentifier:
          type: string
          description: ''
      required:
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-stackql-resource-name: principal_permissions
      description: The ``AWS::LakeFormation::PrincipalPermissions`` resource represents the permissions that a principal has on a GLUDC resource (such as GLUlong databases or GLUlong tables). When you create a ``PrincipalPermissions`` resource, the permissions are granted via the LFlong ``GrantPermissions`` API operation. When you delete a ``PrincipalPermissions`` resource, the permissions on principal-resource pair are revoked via the LFlong ``RevokePermissions`` API operation.
      x-type-name: AWS::LakeFormation::PrincipalPermissions
      x-stackql-primary-identifier:
        - PrincipalIdentifier
        - ResourceIdentifier
      x-create-only-properties:
        - Catalog
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-read-only-properties:
        - PrincipalIdentifier
        - ResourceIdentifier
      x-required-properties:
        - Principal
        - Resource
        - Permissions
        - PermissionsWithGrantOption
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:GrantPermissions
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
        read:
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
        delete:
          - lakeformation:RevokePermissions
          - lakeformation:ListPermissions
          - glue:GetTable
          - glue:GetDatabase
    PrincipalPermissionsList:
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/PrincipalPermissions'
    Tag:
      type: object
      properties:
        CatalogId:
          description: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
          $ref: '#/components/schemas/CatalogIdString'
        TagKey:
          description: The key-name for the LF-tag.
          $ref: '#/components/schemas/LFTagKey'
        TagValues:
          description: A list of possible values an attribute can take.
          $ref: '#/components/schemas/TagValueList'
      required:
        - TagKey
        - TagValues
      x-stackql-resource-name: tag
      description: A resource schema representing a Lake Formation Tag.
      x-type-name: AWS::LakeFormation::Tag
      x-stackql-primary-identifier:
        - TagKey
      x-create-only-properties:
        - CatalogId
        - TagKey
      x-required-properties:
        - TagKey
        - TagValues
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:CreateLFTag
        read:
          - lakeformation:GetLFTag
        update:
          - lakeformation:UpdateLFTag
        delete:
          - lakeformation:DeleteLFTag
        list:
          - lakeformation:ListLFTags
    TagAssociation:
      type: object
      properties:
        Resource:
          description: Resource to tag with the Lake Formation Tags
          $ref: '#/components/schemas/Resource'
        LFTags:
          description: List of Lake Formation Tags to associate with the Lake Formation Resource
          $ref: '#/components/schemas/LFTagsList'
        ResourceIdentifier:
          description: Unique string identifying the resource. Used as primary identifier, which ideally should be a string
          type: string
        TagsIdentifier:
          description: Unique string identifying the resource's tags. Used as primary identifier, which ideally should be a string
          type: string
      required:
        - Resource
        - LFTags
      x-stackql-resource-name: tag_association
      description: A resource schema representing a Lake Formation Tag Association. While tag associations are not explicit Lake Formation resources, this CloudFormation resource can be used to associate tags with Lake Formation entities.
      x-type-name: AWS::LakeFormation::TagAssociation
      x-stackql-primary-identifier:
        - ResourceIdentifier
        - TagsIdentifier
      x-create-only-properties:
        - Resource
        - LFTags
      x-read-only-properties:
        - ResourceIdentifier
        - TagsIdentifier
      x-required-properties:
        - Resource
        - LFTags
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - lakeformation:AddLFTagsToResource
          - glue:GetDatabase
          - glue:GetTable
        read:
          - lakeformation:GetResourceLFTags
          - glue:GetDatabase
          - glue:GetTable
        delete:
          - lakeformation:RemoveLFTagsFromResource
          - glue:GetDatabase
          - glue:GetTable
    CreateDataCellsFilterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            TableCatalogId:
              description: The Catalog Id of the Table on which to create a Data Cells Filter.
              $ref: '#/components/schemas/CatalogIdString'
            DatabaseName:
              description: The name of the Database that the Table resides in.
              $ref: '#/components/schemas/NameString'
            TableName:
              description: The name of the Table to create a Data Cells Filter for.
              $ref: '#/components/schemas/NameString'
            Name:
              description: The desired name of the Data Cells Filter.
              $ref: '#/components/schemas/NameString'
            RowFilter:
              description: An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
              $ref: '#/components/schemas/RowFilter'
            ColumnNames:
              description: A list of columns to be included in this Data Cells Filter.
              $ref: '#/components/schemas/ColumnNames'
            ColumnWildcard:
              description: An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
              $ref: '#/components/schemas/ColumnWildcard'
          x-stackQL-stringOnly: true
      x-title: CreateDataCellsFilterRequest
      type: object
      required: []
    CreatePrincipalPermissionsRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Catalog:
              $ref: '#/components/schemas/CatalogIdString'
              description: The identifier for the GLUDC. By default, the account ID. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
            Principal:
              $ref: '#/components/schemas/DataLakePrincipal'
              description: The principal to be granted a permission.
            Resource:
              $ref: '#/components/schemas/Resource'
              description: The resource to be granted or revoked permissions.
            Permissions:
              $ref: '#/components/schemas/PermissionList'
              description: The permissions granted or revoked.
            PermissionsWithGrantOption:
              $ref: '#/components/schemas/PermissionList'
              description: Indicates the ability to grant permissions (as a subset of permissions granted).
            PrincipalIdentifier:
              type: string
              description: ''
            ResourceIdentifier:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreatePrincipalPermissionsRequest
      type: object
      required: []
    CreateTagRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CatalogId:
              description: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
              $ref: '#/components/schemas/CatalogIdString'
            TagKey:
              description: The key-name for the LF-tag.
              $ref: '#/components/schemas/LFTagKey'
            TagValues:
              description: A list of possible values an attribute can take.
              $ref: '#/components/schemas/TagValueList'
          x-stackQL-stringOnly: true
      x-title: CreateTagRequest
      type: object
      required: []
    CreateTagAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Resource:
              description: Resource to tag with the Lake Formation Tags
              $ref: '#/components/schemas/Resource'
            LFTags:
              description: List of Lake Formation Tags to associate with the Lake Formation Resource
              $ref: '#/components/schemas/LFTagsList'
            ResourceIdentifier:
              description: Unique string identifying the resource. Used as primary identifier, which ideally should be a string
              type: string
            TagsIdentifier:
              description: Unique string identifying the resource's tags. Used as primary identifier, which ideally should be a string
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateTagAssociationRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    data_cells_filters:
      name: data_cells_filters
      id: aws.lakeformation.data_cells_filters
      x-cfn-schema-name: DataCellsFilter
      x-cfn-type-name: AWS::LakeFormation::DataCellsFilter
      x-identifiers:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DataCellsFilter&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::DataCellsFilter"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::DataCellsFilter"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/data_cells_filters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/data_cells_filters/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TableCatalogId') as table_catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RowFilter') as row_filter,
              JSON_EXTRACT(Properties, '$.ColumnNames') as column_names,
              JSON_EXTRACT(Properties, '$.ColumnWildcard') as column_wildcard
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
              AND data__Identifier = '<TableCatalogId>|<DatabaseName>|<TableName>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.TableCatalogId') as table_catalog_id,
                JSON_EXTRACT(detail.Properties, '$.DatabaseName') as database_name,
                JSON_EXTRACT(detail.Properties, '$.TableName') as table_name,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RowFilter') as row_filter,
                JSON_EXTRACT(detail.Properties, '$.ColumnNames') as column_names,
                JSON_EXTRACT(detail.Properties, '$.ColumnWildcard') as column_wildcard
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                AND detail.data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'TableCatalogId') as table_catalog_id,
                  json_extract_path_text(Properties, 'DatabaseName') as database_name,
                  json_extract_path_text(Properties, 'TableName') as table_name,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RowFilter') as row_filter,
                  json_extract_path_text(Properties, 'ColumnNames') as column_names,
                  json_extract_path_text(Properties, 'ColumnWildcard') as column_wildcard
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                  AND data__Identifier = '<TableCatalogId>|<DatabaseName>|<TableName>|<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'TableCatalogId') as table_catalog_id,
                    json_extract_path_text(detail.Properties, 'DatabaseName') as database_name,
                    json_extract_path_text(detail.Properties, 'TableName') as table_name,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RowFilter') as row_filter,
                    json_extract_path_text(detail.Properties, 'ColumnNames') as column_names,
                    json_extract_path_text(detail.Properties, 'ColumnWildcard') as column_wildcard
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                    AND detail.data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                    AND listing.region = 'us-east-1'
    data_cells_filters_list_only:
      name: data_cells_filters_list_only
      id: aws.lakeformation.data_cells_filters_list_only
      x-cfn-schema-name: DataCellsFilter
      x-cfn-type-name: AWS::LakeFormation::DataCellsFilter
      x-identifiers:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TableCatalogId') as table_catalog_id,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TableCatalogId') as table_catalog_id,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::DataCellsFilter'
                AND region = 'us-east-1'
    principal_permissions:
      name: principal_permissions
      id: aws.lakeformation.principal_permissions
      x-cfn-schema-name: PrincipalPermissions
      x-cfn-type-name: AWS::LakeFormation::PrincipalPermissions
      x-identifiers:
        - PrincipalIdentifier
        - ResourceIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PrincipalPermissions&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::PrincipalPermissions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::PrincipalPermissions"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/principal_permissions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/principal_permissions/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Catalog') as catalog,
              JSON_EXTRACT(Properties, '$.Principal') as principal,
              JSON_EXTRACT(Properties, '$.Resource') as resource,
              JSON_EXTRACT(Properties, '$.Permissions') as permissions,
              JSON_EXTRACT(Properties, '$.PermissionsWithGrantOption') as permissions_with_grant_option,
              JSON_EXTRACT(Properties, '$.PrincipalIdentifier') as principal_identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::PrincipalPermissions'
              AND data__Identifier = '<PrincipalIdentifier>|<ResourceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Catalog') as catalog,
                json_extract_path_text(Properties, 'Principal') as principal,
                json_extract_path_text(Properties, 'Resource') as resource,
                json_extract_path_text(Properties, 'Permissions') as permissions,
                json_extract_path_text(Properties, 'PermissionsWithGrantOption') as permissions_with_grant_option,
                json_extract_path_text(Properties, 'PrincipalIdentifier') as principal_identifier,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::PrincipalPermissions'
                AND data__Identifier = '<PrincipalIdentifier>|<ResourceIdentifier>'
                AND region = 'us-east-1'
    tags:
      name: tags
      id: aws.lakeformation.tags
      x-cfn-schema-name: Tag
      x-cfn-type-name: AWS::LakeFormation::Tag
      x-identifiers:
        - TagKey
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Tag&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::Tag"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::Tag"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::Tag"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/tags/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CatalogId') as catalog_id,
              JSON_EXTRACT(Properties, '$.TagKey') as tag_key,
              JSON_EXTRACT(Properties, '$.TagValues') as tag_values
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::Tag'
              AND data__Identifier = '<TagKey>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CatalogId') as catalog_id,
                JSON_EXTRACT(detail.Properties, '$.TagKey') as tag_key,
                JSON_EXTRACT(detail.Properties, '$.TagValues') as tag_values
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::LakeFormation::Tag'
                AND detail.data__TypeName = 'AWS::LakeFormation::Tag'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CatalogId') as catalog_id,
                  json_extract_path_text(Properties, 'TagKey') as tag_key,
                  json_extract_path_text(Properties, 'TagValues') as tag_values
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::Tag'
                  AND data__Identifier = '<TagKey>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CatalogId') as catalog_id,
                    json_extract_path_text(detail.Properties, 'TagKey') as tag_key,
                    json_extract_path_text(detail.Properties, 'TagValues') as tag_values
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::LakeFormation::Tag'
                    AND detail.data__TypeName = 'AWS::LakeFormation::Tag'
                    AND listing.region = 'us-east-1'
    tags_list_only:
      name: tags_list_only
      id: aws.lakeformation.tags_list_only
      x-cfn-schema-name: Tag
      x-cfn-type-name: AWS::LakeFormation::Tag
      x-identifiers:
        - TagKey
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TagKey') as tag_key
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::Tag'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TagKey') as tag_key
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::LakeFormation::Tag'
                AND region = 'us-east-1'
    tag_associations:
      name: tag_associations
      id: aws.lakeformation.tag_associations
      x-cfn-schema-name: TagAssociation
      x-cfn-type-name: AWS::LakeFormation::TagAssociation
      x-identifiers:
        - ResourceIdentifier
        - TagsIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TagAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::TagAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::LakeFormation::TagAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/tag_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/tag_associations/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Resource') as resource,
              JSON_EXTRACT(Properties, '$.LFTags') as lf_tags,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.TagsIdentifier') as tags_identifier
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::TagAssociation'
              AND data__Identifier = '<ResourceIdentifier>|<TagsIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Resource') as resource,
                json_extract_path_text(Properties, 'LFTags') as lf_tags,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'TagsIdentifier') as tags_identifier
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::LakeFormation::TagAssociation'
                AND data__Identifier = '<ResourceIdentifier>|<TagsIdentifier>'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DataCellsFilter&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDataCellsFilter
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDataCellsFilterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PrincipalPermissions&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePrincipalPermissions
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePrincipalPermissionsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Tag&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTag
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TagAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTagAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTagAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
