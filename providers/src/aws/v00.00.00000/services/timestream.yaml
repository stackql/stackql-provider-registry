openapi: 3.0.0
info:
  title: Timestream
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: You can use the Resource Tags property to apply tags to resources, which can help you identify and categorize those resources.
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      additionalProperties: false
    Database:
      type: object
      properties:
        Arn:
          type: string
        DatabaseName:
          description: The name for the database. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the database name.
          type: string
          pattern: ^[a-zA-Z0-9_.-]{3,256}$
        KmsKeyId:
          description: The KMS key for the database. If the KMS key is not specified, the database will be encrypted with a Timestream managed KMS key located in your account.
          type: string
          minLength: 1
          maxLength: 2048
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: database
      description: The AWS::Timestream::Database resource creates a Timestream database.
      x-type-name: AWS::Timestream::Database
      x-stackql-primary-identifier:
        - DatabaseName
      x-create-only-properties:
        - DatabaseName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - timestream:CreateDatabase
          - timestream:DescribeEndpoints
          - timestream:TagResource
          - kms:CreateGrant
          - kms:DescribeKey
          - kms:Decrypt
        read:
          - timestream:DescribeDatabase
          - timestream:DescribeEndpoints
          - timestream:ListTagsForResource
        update:
          - timestream:UpdateDatabase
          - timestream:DescribeDatabase
          - timestream:DescribeEndpoints
          - timestream:TagResource
          - timestream:UntagResource
        delete:
          - timestream:DeleteDatabase
          - timestream:DescribeEndpoints
        list:
          - timestream:ListDatabases
          - timestream:DescribeEndpoints
    InfluxDBInstance:
      type: object
      properties:
        Username:
          type: string
          minLength: 1
          maxLength: 64
          description: The username for the InfluxDB instance.
        Password:
          type: string
          minLength: 8
          maxLength: 64
          pattern: ^[a-zA-Z0-9]+$
          description: The password for the InfluxDB instance.
        Organization:
          type: string
          minLength: 1
          maxLength: 64
          description: The organization for the InfluxDB instance.
        Bucket:
          type: string
          minLength: 2
          maxLength: 64
          pattern: ^[^_][^"]*$
          description: The bucket for the InfluxDB instance.
        DbInstanceType:
          type: string
          enum:
            - db.influx.medium
            - db.influx.large
            - db.influx.xlarge
            - db.influx.2xlarge
            - db.influx.4xlarge
            - db.influx.8xlarge
            - db.influx.12xlarge
            - db.influx.16xlarge
          description: The compute instance of the InfluxDB instance.
        VpcSubnetIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
          minItems: 1
          maxItems: 3
          description: A list of EC2 subnet IDs for this InfluxDB instance.
        VpcSecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
          minItems: 1
          maxItems: 5
          description: A list of Amazon EC2 VPC security groups to associate with this InfluxDB instance.
        PubliclyAccessible:
          type: boolean
          description: Attach a public IP to the customer ENI.
          default: false
        DbStorageType:
          type: string
          enum:
            - InfluxIOIncludedT1
            - InfluxIOIncludedT2
            - InfluxIOIncludedT3
          description: The storage type of the InfluxDB instance.
        AllocatedStorage:
          type: integer
          minimum: 20
          maximum: 16384
          description: The allocated storage for the InfluxDB instance.
        DbParameterGroupIdentifier:
          type: string
          minLength: 3
          maxLength: 64
          pattern: ^[a-zA-Z0-9]+$
          description: The name of an existing InfluxDB parameter group.
        LogDeliveryConfiguration:
          type: object
          description: Configuration for sending logs to customer account from the InfluxDB instance.
          properties:
            S3Configuration:
              description: S3 configuration for sending logs to customer account from the InfluxDB instance.
              type: object
              properties:
                BucketName:
                  description: The bucket name for logs to be sent from the InfluxDB instance
                  type: string
                  minLength: 3
                  maxLength: 63
                  pattern: ^[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+$
                Enabled:
                  description: Specifies whether logging to customer specified bucket is enabled.
                  type: boolean
              required:
                - Enabled
                - BucketName
              additionalProperties: false
          required:
            - S3Configuration
          additionalProperties: false
        Status:
          type: string
          description: Status of the InfluxDB Instance.
          enum:
            - CREATING
            - AVAILABLE
            - DELETING
            - MODIFYING
            - UPDATING
            - DELETED
            - FAILED
        Arn:
          type: string
          minLength: 1
          maxLength: 1011
          pattern: ^arn:aws[a-z\-]*:timestream\-influxdb:[a-z0-9\-]+:[0-9]{12}:(db\-instance)/[a-zA-Z0-9]{3,64}$
          description: The Amazon Resource Name (ARN) that is associated with the InfluxDB instance.
        Name:
          type: string
          minLength: 3
          maxLength: 40
          pattern: ^[a-zA-z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$
          description: The unique name that is associated with the InfluxDB instance.
        AvailabilityZone:
          type: string
          description: The Availability Zone (AZ) where the InfluxDB instance is created.
        SecondaryAvailabilityZone:
          type: string
          description: The Secondary Availability Zone (AZ) where the InfluxDB instance is created, if DeploymentType is set as WITH_MULTIAZ_STANDBY.
        Endpoint:
          type: string
          description: The connection endpoint for the InfluxDB instance.
        InfluxAuthParametersSecretArn:
          type: string
          pattern: ^arn:[a-z]*:secretsmanager:[a-z\-0-9]*:[0-9]*:secret:[a-zA-Z0-9\-]*
          description: The Auth parameters secret Amazon Resource name (ARN) that is associated with the InfluxDB instance.
        Id:
          type: string
          pattern: ^[a-zA-Z0-9]+$
          minLength: 3
          maxLength: 64
          description: The service generated unique identifier for InfluxDB instance.
        DeploymentType:
          type: string
          description: Deployment type of the InfluxDB Instance.
          enum:
            - SINGLE_AZ
            - WITH_MULTIAZ_STANDBY
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
          minItems: 1
          maxItems: 200
          description: An arbitrary set of tags (key-value pairs) for this DB instance.
      x-stackql-resource-name: influxdb_instance
      description: The AWS::Timestream::InfluxDBInstance resource creates an InfluxDB instance.
      x-type-name: AWS::Timestream::InfluxDBInstance
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Name
        - Username
        - Password
        - Organization
        - Bucket
        - DbInstanceType
        - VpcSubnetIds
        - VpcSecurityGroupIds
        - PubliclyAccessible
        - DbStorageType
        - AllocatedStorage
        - DeploymentType
      x-write-only-properties:
        - Username
        - Password
        - Organization
        - Bucket
      x-read-only-properties:
        - Status
        - Arn
        - Id
        - AvailabilityZone
        - Endpoint
        - SecondaryAvailabilityZone
        - InfluxAuthParametersSecretArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - s3:ListBucket
          - s3:GetBucketPolicy
          - timestream-influxdb:GetDbInstance
          - timestream-influxdb:ListDbInstances
          - timestream-influxdb:CreateDbInstance
          - timestream-influxdb:TagResource
          - timestream-influxdb:ListTagsForResource
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:CreateNetworkInterface
          - iam:CreateServiceLinkedRole
        read:
          - timestream-influxdb:GetDbInstance
          - timestream-influxdb:ListTagsForResource
        update:
          - s3:ListBucket
          - s3:GetBucketPolicy
          - timestream-influxdb:GetDbInstance
          - timestream-influxdb:ListDbInstances
          - timestream-influxdb:UpdateDbInstance
          - timestream-influxdb:TagResource
          - timestream-influxdb:UntagResource
          - timestream-influxdb:ListTagsForResource
        delete:
          - timestream-influxdb:GetDbInstance
          - timestream-influxdb:ListDbInstances
          - timestream-influxdb:DeleteDbInstance
        list:
          - timestream-influxdb:ListDbInstances
    Arn:
      description: Amazon Resource Name of the scheduled query that is generated upon creation.
      type: string
      minLength: 1
      maxLength: 2048
    ScheduledQueryName:
      description: The name of the scheduled query. Scheduled query names must be unique within each Region.
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 1
      maxLength: 64
    QueryString:
      description: >-
        The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For
        this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
      type: string
      minLength: 1
      maxLength: 262144
    ScheduleConfiguration:
      description: Configuration for when the scheduled query is executed.
      type: object
      properties:
        ScheduleExpression:
          $ref: '#/components/schemas/ScheduleExpression'
      required:
        - ScheduleExpression
      additionalProperties: false
    NotificationConfiguration:
      description: Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
      type: object
      properties:
        SnsConfiguration:
          $ref: '#/components/schemas/SnsConfiguration'
      required:
        - SnsConfiguration
      additionalProperties: false
    ClientToken:
      description: Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request. If CreateScheduledQuery is called without a ClientToken, the Query SDK generates a ClientToken on your behalf. After 8 hours, any request with the same ClientToken is treated as a new request.
      type: string
      minLength: 32
      maxLength: 128
    ScheduledQueryExecutionRoleArn:
      description: The ARN for the IAM role that Timestream will assume when running the scheduled query.
      type: string
      minLength: 1
      maxLength: 2048
    TargetConfiguration:
      description: Configuration of target store where scheduled query results are written to.
      type: object
      properties:
        TimestreamConfiguration:
          $ref: '#/components/schemas/TimestreamConfiguration'
      required:
        - TimestreamConfiguration
      additionalProperties: false
    ErrorReportConfiguration:
      description: Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
      type: object
      properties:
        S3Configuration:
          $ref: '#/components/schemas/S3Configuration'
      required:
        - S3Configuration
      additionalProperties: false
    KmsKeyId:
      description: The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
      type: string
      minLength: 1
      maxLength: 2048
    Tags:
      description: A list of key-value pairs to label the scheduled query.
      type: array
      x-insertionOrder: false
      maxItems: 200
      items:
        $ref: '#/components/schemas/Tag'
    ScheduleExpression:
      description: An expression that denotes when to trigger the scheduled query run. This can be a cron expression or a rate expression.
      type: string
      minLength: 1
      maxLength: 256
    SnsConfiguration:
      description: SNS configuration for notification upon scheduled query execution.
      type: object
      properties:
        TopicArn:
          $ref: '#/components/schemas/TopicArn'
      required:
        - TopicArn
      additionalProperties: false
    TopicArn:
      description: SNS topic ARN that the scheduled query status notifications will be sent to.
      type: string
      minLength: 1
      maxLength: 2048
    TimestreamConfiguration:
      description: Configuration needed to write data into the Timestream database and table.
      type: object
      properties:
        DatabaseName:
          $ref: '#/components/schemas/DatabaseName'
        TableName:
          $ref: '#/components/schemas/TableName'
        TimeColumn:
          $ref: '#/components/schemas/TimeColumn'
        DimensionMappings:
          $ref: '#/components/schemas/DimensionMappings'
        MultiMeasureMappings:
          $ref: '#/components/schemas/MultiMeasureMappings'
        MixedMeasureMappings:
          $ref: '#/components/schemas/MixedMeasureMappings'
        MeasureNameColumn:
          $ref: '#/components/schemas/MeasureNameColumn'
      required:
        - DatabaseName
        - TableName
        - TimeColumn
        - DimensionMappings
      additionalProperties: false
    DatabaseName:
      description: Name of Timestream database to which the query result will be written.
      type: string
    TableName:
      description: Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
      type: string
    TimeColumn:
      description: Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
      type: string
    DimensionMappings:
      description: This is to allow mapping column(s) from the query result to the dimension in the destination table.
      type: array
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/DimensionMapping'
    DimensionMapping:
      description: This type is used to map column(s) from the query result to a dimension in the destination table.
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/DimensionMappingName'
        DimensionValueType:
          $ref: '#/components/schemas/DimensionValueType'
      required:
        - Name
        - DimensionValueType
      additionalProperties: false
    DimensionMappingName:
      description: Column name from query result.
      type: string
    DimensionValueType:
      description: Type for the dimension.
      type: string
      enum:
        - VARCHAR
    MultiMeasureMappings:
      description: Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
      type: object
      properties:
        TargetMultiMeasureName:
          $ref: '#/components/schemas/TargetMultiMeasureName'
        MultiMeasureAttributeMappings:
          $ref: '#/components/schemas/MultiMeasureAttributeMappingList'
      required:
        - MultiMeasureAttributeMappings
      additionalProperties: false
    TargetMultiMeasureName:
      description: Name of the target multi-measure in the derived table. Required if MeasureNameColumn is not provided. If MeasureNameColumn is provided then the value from that column will be used as the multi-measure name.
      type: string
    MultiMeasureAttributeMappingList:
      description: Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.
      type: array
      x-insertionOrder: false
      minItems: 1
      items:
        $ref: '#/components/schemas/MultiMeasureAttributeMapping'
    MultiMeasureAttributeMapping:
      description: An attribute mapping to be used for mapping query results to ingest data for multi-measure attributes.
      type: object
      properties:
        SourceColumn:
          $ref: '#/components/schemas/MultiMeasureAttributeMappingSourceColumn'
        MeasureValueType:
          $ref: '#/components/schemas/MultiMeasureAttributeMappingMeasureValueType'
        TargetMultiMeasureAttributeName:
          $ref: '#/components/schemas/TargetMultiMeasureAttributeName'
      required:
        - SourceColumn
        - MeasureValueType
      additionalProperties: false
    MultiMeasureAttributeMappingSourceColumn:
      description: Source measure value column in the query result where the attribute value is to be read.
      type: string
    MultiMeasureAttributeMappingMeasureValueType:
      description: Value type of the measure value column to be read from the query result.
      type: string
      enum:
        - BIGINT
        - BOOLEAN
        - DOUBLE
        - VARCHAR
        - TIMESTAMP
    TargetMultiMeasureAttributeName:
      description: Custom name to be used for attribute name in derived table. If not provided, source column name would be used.
      type: string
    MixedMeasureMappings:
      description: Specifies how to map measures to multi-measure records.
      type: array
      x-insertionOrder: false
      minItems: 1
      items:
        $ref: '#/components/schemas/MixedMeasureMapping'
    MixedMeasureMapping:
      description: MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
      type: object
      properties:
        MeasureName:
          $ref: '#/components/schemas/MixedMeasureMappingMeasureName'
        SourceColumn:
          $ref: '#/components/schemas/MixedMeasureMappingSourceColumn'
        TargetMeasureName:
          $ref: '#/components/schemas/MixedMeasureMappingTargetMeasureName'
        MeasureValueType:
          $ref: '#/components/schemas/MixedMeasureMappingMeasureValueType'
        MultiMeasureAttributeMappings:
          $ref: '#/components/schemas/MultiMeasureAttributeMappingList'
      required:
        - MeasureValueType
      additionalProperties: false
    MixedMeasureMappingMeasureName:
      description: Refers to the value of the measure name in a result row. This field is required if MeasureNameColumn is provided.
      type: string
    MixedMeasureMappingSourceColumn:
      description: This field refers to the source column from which the measure value is to be read for result materialization.
      type: string
    MixedMeasureMappingTargetMeasureName:
      description: Target measure name to be used. If not provided, the target measure name by default would be MeasureName if provided, or SourceColumn otherwise.
      type: string
    MixedMeasureMappingMeasureValueType:
      description: Type of the value that is to be read from SourceColumn. If the mapping is for MULTI, use MeasureValueType.MULTI.
      type: string
      enum:
        - BIGINT
        - BOOLEAN
        - DOUBLE
        - VARCHAR
        - MULTI
    MeasureNameColumn:
      description: Name of the measure name column from the query result.
      type: string
    S3Configuration:
      description: Details on S3 location for error reports that result from running a query.
      type: object
      properties:
        BucketName:
          $ref: '#/components/schemas/BucketName'
        ObjectKeyPrefix:
          $ref: '#/components/schemas/ObjectKeyPrefix'
        EncryptionOption:
          $ref: '#/components/schemas/EncryptionOption'
      required:
        - BucketName
      additionalProperties: false
    BucketName:
      description: Name of the S3 bucket under which error reports will be created.
      type: string
      minLength: 3
      maxLength: 63
      pattern: '[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]'
    ObjectKeyPrefix:
      description: Prefix for error report keys.
      type: string
      minLength: 1
      maxLength: 896
      pattern: '[a-zA-Z0-9|!\-_*''\(\)]([a-zA-Z0-9]|[!\-_*''\(\)\/.])+'
    EncryptionOption:
      description: Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default.
      type: string
      enum:
        - SSE_S3
        - SSE_KMS
    Key:
      type: string
      description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
      minLength: 1
      maxLength: 128
    Value:
      type: string
      description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
      minLength: 0
      maxLength: 256
    ScheduledQuery:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ScheduledQueryName:
          $ref: '#/components/schemas/ScheduledQueryName'
        QueryString:
          $ref: '#/components/schemas/QueryString'
        ScheduleConfiguration:
          $ref: '#/components/schemas/ScheduleConfiguration'
        NotificationConfiguration:
          $ref: '#/components/schemas/NotificationConfiguration'
        ClientToken:
          $ref: '#/components/schemas/ClientToken'
        ScheduledQueryExecutionRoleArn:
          $ref: '#/components/schemas/ScheduledQueryExecutionRoleArn'
        TargetConfiguration:
          $ref: '#/components/schemas/TargetConfiguration'
        ErrorReportConfiguration:
          $ref: '#/components/schemas/ErrorReportConfiguration'
        KmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        SQName:
          description: The name of the scheduled query. Scheduled query names must be unique within each Region.
          type: string
        SQQueryString:
          description: >-
            The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00.
            For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
          type: string
        SQScheduleConfiguration:
          description: Configuration for when the scheduled query is executed.
          type: string
        SQNotificationConfiguration:
          description: Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
          type: string
        SQScheduledQueryExecutionRoleArn:
          description: The ARN for the IAM role that Timestream will assume when running the scheduled query.
          type: string
        SQTargetConfiguration:
          description: Configuration of target store where scheduled query results are written to.
          type: string
        SQErrorReportConfiguration:
          description: Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
          type: string
        SQKmsKeyId:
          description: The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
          type: string
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - QueryString
        - ScheduleConfiguration
        - NotificationConfiguration
        - ScheduledQueryExecutionRoleArn
        - ErrorReportConfiguration
      x-stackql-resource-name: scheduled_query
      description: The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
      x-type-name: AWS::Timestream::ScheduledQuery
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - ScheduledQueryName
        - QueryString
        - ScheduleConfiguration
        - NotificationConfiguration
        - ClientToken
        - ScheduledQueryExecutionRoleArn
        - TargetConfiguration
        - ErrorReportConfiguration
        - KmsKeyId
      x-read-only-properties:
        - Arn
        - SQName
        - SQQueryString
        - SQScheduleConfiguration
        - SQNotificationConfiguration
        - SQScheduledQueryExecutionRoleArn
        - SQTargetConfiguration
        - SQErrorReportConfiguration
        - SQKmsKeyId
      x-required-properties:
        - QueryString
        - ScheduleConfiguration
        - NotificationConfiguration
        - ScheduledQueryExecutionRoleArn
        - ErrorReportConfiguration
      x-required-permissions:
        create:
          - timestream:CreateScheduledQuery
          - timestream:DescribeEndpoints
        read:
          - timestream:DescribeScheduledQuery
          - timestream:ListTagsForResource
          - timestream:DescribeEndpoints
        update:
          - timestream:UpdateScheduledQuery
          - timestream:TagResource
          - timestream:UntagResource
          - timestream:DescribeEndpoints
        delete:
          - timestream:DeleteScheduledQuery
          - timestream:DescribeEndpoints
        list:
          - timestream:ListScheduledQueries
          - timestream:DescribeEndpoints
    PartitionKeyList:
      description: A list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed.
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/PartitionKey'
      x-insertionOrder: true
    PartitionKey:
      description: 'An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.'
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/PartitionKeyType'
        Name:
          $ref: '#/components/schemas/SchemaName'
        EnforcementInRecord:
          $ref: '#/components/schemas/PartitionKeyEnforcementLevel'
      required:
        - Type
      additionalProperties: false
    PartitionKeyType:
      description: The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key).
      type: string
      enum:
        - DIMENSION
        - MEASURE
    SchemaName:
      description: The name of the attribute used for a dimension key.
      type: string
      minLength: 1
      maxLength: 2048
    PartitionKeyEnforcementLevel:
      description: The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified).
      type: string
      enum:
        - REQUIRED
        - OPTIONAL
    Table:
      type: object
      properties:
        Arn:
          type: string
        Name:
          description: The table name exposed as a read-only attribute.
          type: string
        DatabaseName:
          description: The name for the database which the table to be created belongs to.
          type: string
          pattern: ^[a-zA-Z0-9_.-]{3,256}$
        TableName:
          description: The name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name.
          type: string
          pattern: ^[a-zA-Z0-9_.-]{3,256}$
        RetentionProperties:
          description: The retention duration of the memory store and the magnetic store.
          type: object
          properties:
            MemoryStoreRetentionPeriodInHours:
              description: The duration for which data must be stored in the memory store.
              type: string
            MagneticStoreRetentionPeriodInDays:
              description: The duration for which data must be stored in the magnetic store.
              type: string
          additionalProperties: false
        Schema:
          description: A Schema specifies the expected data model of the table.
          type: object
          properties:
            CompositePartitionKey:
              $ref: '#/components/schemas/PartitionKeyList'
          additionalProperties: false
        MagneticStoreWriteProperties:
          description: The properties that determine whether magnetic store writes are enabled.
          type: object
          properties:
            EnableMagneticStoreWrites:
              description: Boolean flag indicating whether magnetic store writes are enabled.
              type: boolean
            MagneticStoreRejectedDataLocation:
              description: Location to store information about records that were asynchronously rejected during magnetic store writes.
              type: object
              properties:
                S3Configuration:
                  description: S3 configuration for location to store rejections from magnetic store writes
                  type: object
                  properties:
                    BucketName:
                      description: The bucket name used to store the data.
                      type: string
                    ObjectKeyPrefix:
                      description: String used to prefix all data in the bucket.
                      type: string
                    EncryptionOption:
                      description: Either SSE_KMS or SSE_S3.
                      type: string
                    KmsKeyId:
                      description: Must be provided if SSE_KMS is specified as the encryption option
                      type: string
                  required:
                    - EncryptionOption
                    - BucketName
                  additionalProperties: false
              additionalProperties: false
          required:
            - EnableMagneticStoreWrites
          additionalProperties: false
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 200
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DatabaseName
      x-stackql-resource-name: table
      description: The AWS::Timestream::Table resource creates a Timestream Table.
      x-type-name: AWS::Timestream::Table
      x-stackql-primary-identifier:
        - DatabaseName
        - TableName
      x-create-only-properties:
        - DatabaseName
        - TableName
      x-read-only-properties:
        - Arn
        - Name
      x-required-properties:
        - DatabaseName
      x-required-permissions:
        create:
          - timestream:CreateTable
          - timestream:DescribeEndpoints
          - timestream:TagResource
          - s3:PutObject
          - s3:GetObject
          - s3:GetBucketAcl
          - kms:GenerateDataKey*
          - kms:DescribeKey
          - kms:Encrypt
        read:
          - timestream:DescribeTable
          - timestream:DescribeEndpoints
          - timestream:ListTagsForResource
        update:
          - timestream:UpdateTable
          - timestream:DescribeEndpoints
          - timestream:TagResource
          - timestream:UntagResource
          - s3:PutObject
          - s3:GetObject
          - s3:GetBucketAcl
          - kms:GenerateDataKey*
          - kms:DescribeKey
          - kms:Encrypt
        delete:
          - timestream:DeleteTable
          - timestream:DescribeEndpoints
          - timestream:DescribeTable
        list:
          - timestream:ListTables
          - timestream:DescribeEndpoints
  x-stackQL-resources:
    databases:
      name: databases
      id: aws.timestream.databases
      x-cfn-schema-name: Database
      x-type: list
      x-identifiers:
        - DatabaseName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::Database'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::Database'
                AND region = 'us-east-1'
    database:
      name: database
      id: aws.timestream.database
      x-cfn-schema-name: Database
      x-type: get
      x-identifiers:
        - DatabaseName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::Database'
              AND data__Identifier = '<DatabaseName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::Database'
                AND data__Identifier = '<DatabaseName>'
                AND region = 'us-east-1'
    influxdb_instances:
      name: influxdb_instances
      id: aws.timestream.influxdb_instances
      x-cfn-schema-name: InfluxDBInstance
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::InfluxDBInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::InfluxDBInstance'
                AND region = 'us-east-1'
    influxdb_instance:
      name: influxdb_instance
      id: aws.timestream.influxdb_instance
      x-cfn-schema-name: InfluxDBInstance
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Username') as username,
              JSON_EXTRACT(Properties, '$.Password') as password,
              JSON_EXTRACT(Properties, '$.Organization') as organization,
              JSON_EXTRACT(Properties, '$.Bucket') as bucket,
              JSON_EXTRACT(Properties, '$.DbInstanceType') as db_instance_type,
              JSON_EXTRACT(Properties, '$.VpcSubnetIds') as vpc_subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcSecurityGroupIds') as vpc_security_group_ids,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.DbStorageType') as db_storage_type,
              JSON_EXTRACT(Properties, '$.AllocatedStorage') as allocated_storage,
              JSON_EXTRACT(Properties, '$.DbParameterGroupIdentifier') as db_parameter_group_identifier,
              JSON_EXTRACT(Properties, '$.LogDeliveryConfiguration') as log_delivery_configuration,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.SecondaryAvailabilityZone') as secondary_availability_zone,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.InfluxAuthParametersSecretArn') as influx_auth_parameters_secret_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DeploymentType') as deployment_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::InfluxDBInstance'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Username') as username,
                json_extract_path_text(Properties, 'Password') as password,
                json_extract_path_text(Properties, 'Organization') as organization,
                json_extract_path_text(Properties, 'Bucket') as bucket,
                json_extract_path_text(Properties, 'DbInstanceType') as db_instance_type,
                json_extract_path_text(Properties, 'VpcSubnetIds') as vpc_subnet_ids,
                json_extract_path_text(Properties, 'VpcSecurityGroupIds') as vpc_security_group_ids,
                json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(Properties, 'DbStorageType') as db_storage_type,
                json_extract_path_text(Properties, 'AllocatedStorage') as allocated_storage,
                json_extract_path_text(Properties, 'DbParameterGroupIdentifier') as db_parameter_group_identifier,
                json_extract_path_text(Properties, 'LogDeliveryConfiguration') as log_delivery_configuration,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'SecondaryAvailabilityZone') as secondary_availability_zone,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'InfluxAuthParametersSecretArn') as influx_auth_parameters_secret_arn,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'DeploymentType') as deployment_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::InfluxDBInstance'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    scheduled_queries:
      name: scheduled_queries
      id: aws.timestream.scheduled_queries
      x-cfn-schema-name: ScheduledQuery
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::ScheduledQuery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::ScheduledQuery'
                AND region = 'us-east-1'
    scheduled_query:
      name: scheduled_query
      id: aws.timestream.scheduled_query
      x-cfn-schema-name: ScheduledQuery
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ScheduledQueryName') as scheduled_query_name,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.ScheduleConfiguration') as schedule_configuration,
              JSON_EXTRACT(Properties, '$.NotificationConfiguration') as notification_configuration,
              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(Properties, '$.ScheduledQueryExecutionRoleArn') as scheduled_query_execution_role_arn,
              JSON_EXTRACT(Properties, '$.TargetConfiguration') as target_configuration,
              JSON_EXTRACT(Properties, '$.ErrorReportConfiguration') as error_report_configuration,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SQName') as sq_name,
              JSON_EXTRACT(Properties, '$.SQQueryString') as sq_query_string,
              JSON_EXTRACT(Properties, '$.SQScheduleConfiguration') as sq_schedule_configuration,
              JSON_EXTRACT(Properties, '$.SQNotificationConfiguration') as sq_notification_configuration,
              JSON_EXTRACT(Properties, '$.SQScheduledQueryExecutionRoleArn') as sq_scheduled_query_execution_role_arn,
              JSON_EXTRACT(Properties, '$.SQTargetConfiguration') as sq_target_configuration,
              JSON_EXTRACT(Properties, '$.SQErrorReportConfiguration') as sq_error_report_configuration,
              JSON_EXTRACT(Properties, '$.SQKmsKeyId') as sq_kms_key_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::ScheduledQuery'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ScheduledQueryName') as scheduled_query_name,
                json_extract_path_text(Properties, 'QueryString') as query_string,
                json_extract_path_text(Properties, 'ScheduleConfiguration') as schedule_configuration,
                json_extract_path_text(Properties, 'NotificationConfiguration') as notification_configuration,
                json_extract_path_text(Properties, 'ClientToken') as client_token,
                json_extract_path_text(Properties, 'ScheduledQueryExecutionRoleArn') as scheduled_query_execution_role_arn,
                json_extract_path_text(Properties, 'TargetConfiguration') as target_configuration,
                json_extract_path_text(Properties, 'ErrorReportConfiguration') as error_report_configuration,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'SQName') as sq_name,
                json_extract_path_text(Properties, 'SQQueryString') as sq_query_string,
                json_extract_path_text(Properties, 'SQScheduleConfiguration') as sq_schedule_configuration,
                json_extract_path_text(Properties, 'SQNotificationConfiguration') as sq_notification_configuration,
                json_extract_path_text(Properties, 'SQScheduledQueryExecutionRoleArn') as sq_scheduled_query_execution_role_arn,
                json_extract_path_text(Properties, 'SQTargetConfiguration') as sq_target_configuration,
                json_extract_path_text(Properties, 'SQErrorReportConfiguration') as sq_error_report_configuration,
                json_extract_path_text(Properties, 'SQKmsKeyId') as sq_kms_key_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::ScheduledQuery'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    tables:
      name: tables
      id: aws.timestream.tables
      x-cfn-schema-name: Table
      x-type: list
      x-identifiers:
        - DatabaseName
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::Table'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Timestream::Table'
                AND region = 'us-east-1'
    table:
      name: table
      id: aws.timestream.table
      x-cfn-schema-name: Table
      x-type: get
      x-identifiers:
        - DatabaseName
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DatabaseName') as database_name,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.RetentionProperties') as retention_properties,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.MagneticStoreWriteProperties') as magnetic_store_write_properties,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::Table'
              AND data__Identifier = '<DatabaseName>|<TableName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'DatabaseName') as database_name,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'RetentionProperties') as retention_properties,
                json_extract_path_text(Properties, 'Schema') as _schema,
                json_extract_path_text(Properties, 'MagneticStoreWriteProperties') as magnetic_store_write_properties,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Timestream::Table'
                AND data__Identifier = '<DatabaseName>|<TableName>'
                AND region = 'us-east-1'
