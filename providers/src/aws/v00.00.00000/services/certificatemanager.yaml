openapi: 3.0.0
info:
  title: CertificateManager
  version: 1.0.0
paths: {}
components:
  schemas:
    ExpiryEventsConfiguration:
      type: object
      additionalProperties: false
      properties:
        DaysBeforeExpiry:
          type: integer
          minimum: 1
          maximum: 45
    AccountId:
      type: string
    Account:
      type: object
      properties:
        ExpiryEventsConfiguration:
          $ref: '#/components/schemas/ExpiryEventsConfiguration'
        AccountId:
          $ref: '#/components/schemas/AccountId'
      required:
        - ExpiryEventsConfiguration
      x-stackql-resource-name: account
      x-stackql-primaryIdentifier:
        - AccountId
    DomainValidationOption:
      type: object
      additionalProperties: false
      properties:
        DomainName:
          type: string
        ValidationDomain:
          type: string
        HostedZoneId:
          type: string
      required:
        - DomainName
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    Certificate:
      type: object
      properties:
        CertificateAuthorityArn:
          type: string
        DomainValidationOptions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DomainValidationOption'
        CertificateTransparencyLoggingPreference:
          type: string
        DomainName:
          type: string
        ValidationMethod:
          type: string
        SubjectAlternativeNames:
          type: array
          uniqueItems: true
          items:
            type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DomainName
      x-stackql-resource-name: certificate
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    accounts:
      name: accounts
      id: aws.certificatemanager.accounts
      x-cfn-schema-name: Account
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CertificateManager::Account'
    account:
      name: account
      id: aws.certificatemanager.account
      x-cfn-schema-name: Account
      x-type: get
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ExpiryEventsConfiguration.DaysBeforeExpiry') as expiry_events_configuration_days_before_expiry
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CertificateManager::Account'
    certificates:
      name: certificates
      id: aws.certificatemanager.certificates
      x-cfn-schema-name: Certificate
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::CertificateManager::Certificate'
    certificate:
      name: certificate
      id: aws.certificatemanager.certificate
      x-cfn-schema-name: Certificate
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateAuthorityArn') as certificate_authority_arn,
              JSON_EXTRACT(Properties, '$.DomainValidationOptions') as domain_validation_options,
              JSON_EXTRACT(Properties, '$.CertificateTransparencyLoggingPreference') as certificate_transparency_logging_preference,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ValidationMethod') as validation_method,
              JSON_EXTRACT(Properties, '$.SubjectAlternativeNames') as subject_alternative_names,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::CertificateManager::Certificate'
