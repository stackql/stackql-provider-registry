openapi: 3.0.0
info:
  title: Organizations
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      description: A custom key-value pair associated with a resource within your organization.
      type: object
      properties:
        Key:
          type: string
          description: The key identifier, or name, of the tag.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: The string value that's associated with the key of the tag. You can set the value of a tag to an empty string, but you can't set the value of a tag to null.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Account:
      type: object
      properties:
        AccountName:
          description: The friendly name of the member account.
          type: string
          pattern: '[\u0020-\u007E]+'
          minLength: 1
          maxLength: 50
        Email:
          description: The email address of the owner to assign to the new member account.
          type: string
          pattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
          minLength: 6
          maxLength: 64
        RoleName:
          description: The name of an IAM role that AWS Organizations automatically preconfigures in the new member account. Default name is OrganizationAccountAccessRole if not specified.
          type: string
          default: OrganizationAccountAccessRole
          pattern: '[\w+=,.@-]{1,64}'
          minLength: 1
          maxLength: 64
        ParentIds:
          description: List of parent nodes for the member account. Currently only one parent at a time is supported. Default is root.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
        Tags:
          description: A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify both a tag key and a value.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        AccountId:
          description: If the account was created successfully, the unique identifier (ID) of the new account.
          type: string
          pattern: ^\d{12}$
          maxLength: 12
        Arn:
          description: The Amazon Resource Name (ARN) of the account.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}
        JoinedMethod:
          description: The method by which the account joined the organization.
          type: string
          enum:
            - INVITED
            - CREATED
        JoinedTimestamp:
          description: The date the account became a part of the organization.
          type: string
        Status:
          description: The status of the account in the organization.
          type: string
          enum:
            - ACTIVE
            - SUSPENDED
            - PENDING_CLOSURE
      required:
        - AccountName
        - Email
      x-stackql-resource-name: account
      description: You can use AWS::Organizations::Account to manage accounts in organization.
      x-type-name: AWS::Organizations::Account
      x-stackql-primary-identifier:
        - AccountId
      x-write-only-properties:
        - RoleName
      x-read-only-properties:
        - AccountId
        - Status
        - JoinedTimestamp
        - JoinedMethod
        - Arn
      x-required-properties:
        - AccountName
        - Email
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:ListTagsForResource
      x-required-permissions:
        create:
          - organizations:CreateAccount
          - organizations:DescribeCreateAccountStatus
          - organizations:MoveAccount
          - organizations:ListParents
          - organizations:TagResource
          - organizations:DescribeAccount
          - organizations:ListTagsForResource
        read:
          - organizations:DescribeAccount
          - organizations:ListParents
          - organizations:ListTagsForResource
        update:
          - organizations:MoveAccount
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:ListRoots
          - organizations:DescribeAccount
          - organizations:ListParents
          - organizations:ListTagsForResource
        delete:
          - organizations:CloseAccount
        list:
          - organizations:ListAccounts
    Organization:
      type: object
      properties:
        Id:
          description: The unique identifier (ID) of an organization.
          type: string
          pattern: ^o-[a-z0-9]{10,32}$
        Arn:
          description: The Amazon Resource Name (ARN) of an organization.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:organization\/o-[a-z0-9]{10,32}
        FeatureSet:
          description: Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
          type: string
          enum:
            - ALL
            - CONSOLIDATED_BILLING
          default: ALL
        ManagementAccountArn:
          description: The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}
        ManagementAccountId:
          description: The unique identifier (ID) of the management account of an organization.
          type: string
          pattern: ^\d{12}$
        ManagementAccountEmail:
          description: The email address that is associated with the AWS account that is designated as the management account for the organization.
          type: string
          pattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
          minLength: 6
          maxLength: 64
        RootId:
          description: The unique identifier (ID) for the root.
          type: string
          pattern: ^r-[0-9a-z]{4,32}$
          maxLength: 64
      x-stackql-resource-name: organization
      description: Resource schema for AWS::Organizations::Organization
      x-type-name: AWS::Organizations::Organization
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
        - Arn
        - ManagementAccountArn
        - ManagementAccountId
        - ManagementAccountEmail
        - RootId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - organizations:CreateOrganization
          - organizations:DescribeOrganization
          - iam:CreateServiceLinkedRole
          - organizations:ListRoots
        read:
          - organizations:DescribeOrganization
          - organizations:ListRoots
        delete:
          - organizations:DeleteOrganization
          - organizations:DescribeOrganization
        list:
          - organizations:DescribeOrganization
        update:
          - organizations:DescribeOrganization
    OrganizationalUnit:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of this OU.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}
        Id:
          description: The unique identifier (ID) associated with this OU.
          type: string
          pattern: ^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$
          maxLength: 68
        Name:
          description: The friendly name of this OU.
          type: string
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 128
        ParentId:
          description: The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
          type: string
          pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
          maxLength: 100
        Tags:
          description: A list of tags that you want to attach to the newly created OU.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - ParentId
      x-stackql-resource-name: organizational_unit
      description: >-
        You can use organizational units (OUs) to group accounts together to administer as a single unit. This greatly simplifies the management of your accounts. For example, you can attach a policy-based control to an OU, and all accounts within the OU automatically inherit the policy. You can create multiple OUs within a single organization, and you can create OUs within other OUs. Each OU can contain multiple accounts, and you can move accounts from one OU to another. However, OU names must
        be unique within a parent OU or root.
      x-type-name: AWS::Organizations::OrganizationalUnit
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - ParentId
      x-read-only-properties:
        - Arn
        - Id
      x-required-properties:
        - Name
        - ParentId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:ListTagsForResource
      x-required-permissions:
        create:
          - organizations:CreateOrganizationalUnit
          - organizations:DescribeOrganizationalUnit
          - organizations:ListParents
          - organizations:ListTagsForResource
          - organizations:TagResource
        read:
          - organizations:DescribeOrganizationalUnit
          - organizations:ListParents
          - organizations:ListTagsForResource
        update:
          - organizations:DescribeOrganizationalUnit
          - organizations:ListParents
          - organizations:ListTagsForResource
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:UpdateOrganizationalUnit
        delete:
          - organizations:DeleteOrganizationalUnit
        list:
          - organizations:ListOrganizationalUnitsForParent
    Policy:
      type: object
      properties:
        Name:
          description: Name of the Policy
          type: string
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 128
        Type:
          description: 'The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY, SERVICE_CONTROL_POLICY, TAG_POLICY, CHATBOT_POLICY, RESOURCE_CONTROL_POLICY,DECLARATIVE_POLICY_EC2'
          type: string
          enum:
            - SERVICE_CONTROL_POLICY
            - AISERVICES_OPT_OUT_POLICY
            - BACKUP_POLICY
            - TAG_POLICY
            - CHATBOT_POLICY
            - RESOURCE_CONTROL_POLICY
            - DECLARATIVE_POLICY_EC2
        Content:
          description: The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
          type: object
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 1000000
        Description:
          description: Human readable description of the policy
          pattern: '[\s\S]*'
          type: string
          maxLength: 512
        TargetIds:
          description: List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            pattern: ^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
        Tags:
          description: A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Id:
          description: Id of the Policy
          type: string
          pattern: ^p-[0-9a-zA-Z_]{8,128}$
          maxLength: 130
        Arn:
          description: ARN of the Policy
          type: string
          pattern: ^arn:aws.*:organizations::[0-9]{12}:policy/o-[a-z0-9]{10}/(service_control|tag|backup|aiservices_opt_out)_policy/p-[a-z0-9]{8}
        AwsManaged:
          description: A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
          type: boolean
      required:
        - Name
        - Type
        - Content
      x-stackql-resource-name: policy
      description: Policies in AWS Organizations enable you to manage different features of the AWS accounts in your organization.  You can use policies when all features are enabled in your organization.
      x-type-name: AWS::Organizations::Policy
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - Type
      x-read-only-properties:
        - Id
        - Arn
        - AwsManaged
      x-required-properties:
        - Name
        - Type
        - Content
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:ListTagsForResource
      x-required-permissions:
        create:
          - organizations:CreatePolicy
          - organizations:DescribePolicy
          - organizations:AttachPolicy
          - organizations:ListTagsForResource
          - organizations:ListTargetsForPolicy
          - organizations:TagResource
        read:
          - organizations:DescribePolicy
          - organizations:ListTargetsForPolicy
          - organizations:ListTagsForResource
        update:
          - organizations:AttachPolicy
          - organizations:DetachPolicy
          - organizations:UpdatePolicy
          - organizations:ListTagsForResource
          - organizations:ListTargetsForPolicy
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:DescribePolicy
        delete:
          - organizations:DetachPolicy
          - organizations:DeletePolicy
        list:
          - organizations:ListPolicies
    ResourcePolicy:
      type: object
      properties:
        Id:
          description: The unique identifier (ID) associated with this resource policy.
          type: string
          pattern: ^rp-[0-9a-zA-Z_]{4,128}$
          maxLength: 131
        Arn:
          description: The Amazon Resource Name (ARN) of the resource policy.
          type: string
          pattern: ^arn:aws.*:organizations::\d{12}:resourcepolicy\/o-[a-z0-9]{10,32}\/rp-[0-9a-zA-Z_]{4,128}
        Content:
          description: The policy document. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
          type: object
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 40000
        Tags:
          description: A list of tags that you want to attach to the resource policy
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Content
      x-stackql-resource-name: resource_policy
      description: You can use AWS::Organizations::ResourcePolicy to delegate policy management for AWS Organizations to specified member accounts to perform policy actions that are by default available only to the management account.
      x-type-name: AWS::Organizations::ResourcePolicy
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties:
        - Content
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - organizations:TagResource
          - organizations:UntagResource
          - organizations:ListTagsForResource
      x-required-permissions:
        create:
          - organizations:PutResourcePolicy
          - organizations:DescribeResourcePolicy
          - organizations:ListTagsForResource
          - organizations:TagResource
        read:
          - organizations:DescribeResourcePolicy
          - organizations:ListTagsForResource
        update:
          - organizations:DescribeResourcePolicy
          - organizations:PutResourcePolicy
          - organizations:ListTagsForResource
          - organizations:TagResource
          - organizations:UntagResource
        delete:
          - organizations:DeleteResourcePolicy
        list:
          - organizations:DescribeResourcePolicy
    CreateAccountRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccountName:
              description: The friendly name of the member account.
              type: string
              pattern: '[\u0020-\u007E]+'
              minLength: 1
              maxLength: 50
            Email:
              description: The email address of the owner to assign to the new member account.
              type: string
              pattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
              minLength: 6
              maxLength: 64
            RoleName:
              description: The name of an IAM role that AWS Organizations automatically preconfigures in the new member account. Default name is OrganizationAccountAccessRole if not specified.
              type: string
              default: OrganizationAccountAccessRole
              pattern: '[\w+=,.@-]{1,64}'
              minLength: 1
              maxLength: 64
            ParentIds:
              description: List of parent nodes for the member account. Currently only one parent at a time is supported. Default is root.
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
                pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
            Tags:
              description: A list of tags that you want to attach to the newly created account. For each tag in the list, you must specify both a tag key and a value.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            AccountId:
              description: If the account was created successfully, the unique identifier (ID) of the new account.
              type: string
              pattern: ^\d{12}$
              maxLength: 12
            Arn:
              description: The Amazon Resource Name (ARN) of the account.
              type: string
              pattern: ^arn:aws.*:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}
            JoinedMethod:
              description: The method by which the account joined the organization.
              type: string
              enum:
                - INVITED
                - CREATED
            JoinedTimestamp:
              description: The date the account became a part of the organization.
              type: string
            Status:
              description: The status of the account in the organization.
              type: string
              enum:
                - ACTIVE
                - SUSPENDED
                - PENDING_CLOSURE
          x-stackQL-stringOnly: true
      x-title: CreateAccountRequest
      type: object
      required: []
    CreateOrganizationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The unique identifier (ID) of an organization.
              type: string
              pattern: ^o-[a-z0-9]{10,32}$
            Arn:
              description: The Amazon Resource Name (ARN) of an organization.
              type: string
              pattern: ^arn:aws.*:organizations::\d{12}:organization\/o-[a-z0-9]{10,32}
            FeatureSet:
              description: Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
              type: string
              enum:
                - ALL
                - CONSOLIDATED_BILLING
              default: ALL
            ManagementAccountArn:
              description: The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.
              type: string
              pattern: ^arn:aws.*:organizations::\d{12}:account\/o-[a-z0-9]{10,32}\/\d{12}
            ManagementAccountId:
              description: The unique identifier (ID) of the management account of an organization.
              type: string
              pattern: ^\d{12}$
            ManagementAccountEmail:
              description: The email address that is associated with the AWS account that is designated as the management account for the organization.
              type: string
              pattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
              minLength: 6
              maxLength: 64
            RootId:
              description: The unique identifier (ID) for the root.
              type: string
              pattern: ^r-[0-9a-z]{4,32}$
              maxLength: 64
          x-stackQL-stringOnly: true
      x-title: CreateOrganizationRequest
      type: object
      required: []
    CreateOrganizationalUnitRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              description: The Amazon Resource Name (ARN) of this OU.
              type: string
              pattern: ^arn:aws.*:organizations::\d{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}
            Id:
              description: The unique identifier (ID) associated with this OU.
              type: string
              pattern: ^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$
              maxLength: 68
            Name:
              description: The friendly name of this OU.
              type: string
              pattern: '[\s\S]*'
              minLength: 1
              maxLength: 128
            ParentId:
              description: The unique identifier (ID) of the parent root or OU that you want to create the new OU in.
              type: string
              pattern: ^(r-[0-9a-z]{4,32})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
              maxLength: 100
            Tags:
              description: A list of tags that you want to attach to the newly created OU.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateOrganizationalUnitRequest
      type: object
      required: []
    CreatePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of the Policy
              type: string
              pattern: '[\s\S]*'
              minLength: 1
              maxLength: 128
            Type:
              description: 'The type of policy to create. You can specify one of the following values: AISERVICES_OPT_OUT_POLICY, BACKUP_POLICY, SERVICE_CONTROL_POLICY, TAG_POLICY, CHATBOT_POLICY, RESOURCE_CONTROL_POLICY,DECLARATIVE_POLICY_EC2'
              type: string
              enum:
                - SERVICE_CONTROL_POLICY
                - AISERVICES_OPT_OUT_POLICY
                - BACKUP_POLICY
                - TAG_POLICY
                - CHATBOT_POLICY
                - RESOURCE_CONTROL_POLICY
                - DECLARATIVE_POLICY_EC2
            Content:
              description: The Policy text content. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
              type: object
              pattern: '[\s\S]*'
              minLength: 1
              maxLength: 1000000
            Description:
              description: Human readable description of the policy
              pattern: '[\s\S]*'
              type: string
              maxLength: 512
            TargetIds:
              description: List of unique identifiers (IDs) of the root, OU, or account that you want to attach the policy to
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
                pattern: ^(r-[0-9a-z]{4,32})|(\d{12})|(ou-[0-9a-z]{4,32}-[a-z0-9]{8,32})$
            Tags:
              description: A list of tags that you want to attach to the newly created policy. For each tag in the list, you must specify both a tag key and a value. You can set the value to an empty string, but you can't set it to null.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Id:
              description: Id of the Policy
              type: string
              pattern: ^p-[0-9a-zA-Z_]{8,128}$
              maxLength: 130
            Arn:
              description: ARN of the Policy
              type: string
              pattern: ^arn:aws.*:organizations::[0-9]{12}:policy/o-[a-z0-9]{10}/(service_control|tag|backup|aiservices_opt_out)_policy/p-[a-z0-9]{8}
            AwsManaged:
              description: A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreatePolicyRequest
      type: object
      required: []
    CreateResourcePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              description: The unique identifier (ID) associated with this resource policy.
              type: string
              pattern: ^rp-[0-9a-zA-Z_]{4,128}$
              maxLength: 131
            Arn:
              description: The Amazon Resource Name (ARN) of the resource policy.
              type: string
              pattern: ^arn:aws.*:organizations::\d{12}:resourcepolicy\/o-[a-z0-9]{10,32}\/rp-[0-9a-zA-Z_]{4,128}
            Content:
              description: The policy document. For AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it.
              type: object
              pattern: '[\s\S]*'
              minLength: 1
              maxLength: 40000
            Tags:
              description: A list of tags that you want to attach to the resource policy
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateResourcePolicyRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    accounts:
      name: accounts
      id: aws.organizations.accounts
      x-cfn-schema-name: Account
      x-cfn-type-name: AWS::Organizations::Account
      x-identifiers:
        - AccountId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Account&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Account"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/accounts/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountName') as account_name,
              JSON_EXTRACT(Properties, '$.Email') as email,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.ParentIds') as parent_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.JoinedMethod') as joined_method,
              JSON_EXTRACT(Properties, '$.JoinedTimestamp') as joined_timestamp,
              JSON_EXTRACT(Properties, '$.Status') as status
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Account'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccountName') as account_name,
                JSON_EXTRACT(detail.Properties, '$.Email') as email,
                JSON_EXTRACT(detail.Properties, '$.RoleName') as role_name,
                JSON_EXTRACT(detail.Properties, '$.ParentIds') as parent_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.AccountId') as account_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.JoinedMethod') as joined_method,
                JSON_EXTRACT(detail.Properties, '$.JoinedTimestamp') as joined_timestamp,
                JSON_EXTRACT(detail.Properties, '$.Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Organizations::Account'
                AND detail.data__TypeName = 'AWS::Organizations::Account'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccountName') as account_name,
                  json_extract_path_text(Properties, 'Email') as email,
                  json_extract_path_text(Properties, 'RoleName') as role_name,
                  json_extract_path_text(Properties, 'ParentIds') as parent_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'AccountId') as account_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'JoinedMethod') as joined_method,
                  json_extract_path_text(Properties, 'JoinedTimestamp') as joined_timestamp,
                  json_extract_path_text(Properties, 'Status') as status
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Account'
                  AND data__Identifier = '<AccountId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccountName') as account_name,
                    json_extract_path_text(detail.Properties, 'Email') as email,
                    json_extract_path_text(detail.Properties, 'RoleName') as role_name,
                    json_extract_path_text(detail.Properties, 'ParentIds') as parent_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'AccountId') as account_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'JoinedMethod') as joined_method,
                    json_extract_path_text(detail.Properties, 'JoinedTimestamp') as joined_timestamp,
                    json_extract_path_text(detail.Properties, 'Status') as status
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Organizations::Account'
                    AND detail.data__TypeName = 'AWS::Organizations::Account'
                    AND listing.region = 'us-east-1'
    accounts_list_only:
      name: accounts_list_only
      id: aws.organizations.accounts_list_only
      x-cfn-schema-name: Account
      x-cfn-type-name: AWS::Organizations::Account
      x-identifiers:
        - AccountId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Account'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Account'
                AND region = 'us-east-1'
    account_tags:
      name: account_tags
      id: aws.organizations.account_tags
      x-cfn-schema-name: Account
      x-cfn-type-name: AWS::Organizations::Account
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccountName') as account_name,
              JSON_EXTRACT(detail.Properties, '$.Email') as email,
              JSON_EXTRACT(detail.Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(detail.Properties, '$.ParentIds') as parent_ids,
              JSON_EXTRACT(detail.Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.JoinedMethod') as joined_method,
              JSON_EXTRACT(detail.Properties, '$.JoinedTimestamp') as joined_timestamp,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Organizations::Account'
              AND detail.data__TypeName = 'AWS::Organizations::Account'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccountName') as account_name,
                json_extract_path_text(detail.Properties, 'Email') as email,
                json_extract_path_text(detail.Properties, 'RoleName') as role_name,
                json_extract_path_text(detail.Properties, 'ParentIds') as parent_ids,
                json_extract_path_text(detail.Properties, 'AccountId') as account_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'JoinedMethod') as joined_method,
                json_extract_path_text(detail.Properties, 'JoinedTimestamp') as joined_timestamp,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Organizations::Account'
                AND detail.data__TypeName = 'AWS::Organizations::Account'
                AND listing.region = 'us-east-1'
    organizations:
      name: organizations
      id: aws.organizations.organizations
      x-cfn-schema-name: Organization
      x-cfn-type-name: AWS::Organizations::Organization
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Organization&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Organization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Organization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Organization"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/organizations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/organizations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/organizations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.FeatureSet') as feature_set,
              JSON_EXTRACT(Properties, '$.ManagementAccountArn') as management_account_arn,
              JSON_EXTRACT(Properties, '$.ManagementAccountId') as management_account_id,
              JSON_EXTRACT(Properties, '$.ManagementAccountEmail') as management_account_email,
              JSON_EXTRACT(Properties, '$.RootId') as root_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Organization'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.FeatureSet') as feature_set,
                JSON_EXTRACT(detail.Properties, '$.ManagementAccountArn') as management_account_arn,
                JSON_EXTRACT(detail.Properties, '$.ManagementAccountId') as management_account_id,
                JSON_EXTRACT(detail.Properties, '$.ManagementAccountEmail') as management_account_email,
                JSON_EXTRACT(detail.Properties, '$.RootId') as root_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Organizations::Organization'
                AND detail.data__TypeName = 'AWS::Organizations::Organization'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'FeatureSet') as feature_set,
                  json_extract_path_text(Properties, 'ManagementAccountArn') as management_account_arn,
                  json_extract_path_text(Properties, 'ManagementAccountId') as management_account_id,
                  json_extract_path_text(Properties, 'ManagementAccountEmail') as management_account_email,
                  json_extract_path_text(Properties, 'RootId') as root_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Organization'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'FeatureSet') as feature_set,
                    json_extract_path_text(detail.Properties, 'ManagementAccountArn') as management_account_arn,
                    json_extract_path_text(detail.Properties, 'ManagementAccountId') as management_account_id,
                    json_extract_path_text(detail.Properties, 'ManagementAccountEmail') as management_account_email,
                    json_extract_path_text(detail.Properties, 'RootId') as root_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Organizations::Organization'
                    AND detail.data__TypeName = 'AWS::Organizations::Organization'
                    AND listing.region = 'us-east-1'
    organizations_list_only:
      name: organizations_list_only
      id: aws.organizations.organizations_list_only
      x-cfn-schema-name: Organization
      x-cfn-type-name: AWS::Organizations::Organization
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Organization'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Organization'
                AND region = 'us-east-1'
    organizational_units:
      name: organizational_units
      id: aws.organizations.organizational_units
      x-cfn-schema-name: OrganizationalUnit
      x-cfn-type-name: AWS::Organizations::OrganizationalUnit
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__OrganizationalUnit&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::OrganizationalUnit"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::OrganizationalUnit"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::OrganizationalUnit"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/organizational_units/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/organizational_units/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/organizational_units/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::OrganizationalUnit'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ParentId') as parent_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                AND detail.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ParentId') as parent_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ParentId') as parent_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                    AND detail.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                    AND listing.region = 'us-east-1'
    organizational_units_list_only:
      name: organizational_units_list_only
      id: aws.organizations.organizational_units_list_only
      x-cfn-schema-name: OrganizationalUnit
      x-cfn-type-name: AWS::Organizations::OrganizationalUnit
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::OrganizationalUnit'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                AND region = 'us-east-1'
    organizational_unit_tags:
      name: organizational_unit_tags
      id: aws.organizations.organizational_unit_tags
      x-cfn-schema-name: OrganizationalUnit
      x-cfn-type-name: AWS::Organizations::OrganizationalUnit
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ParentId') as parent_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
              AND detail.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ParentId') as parent_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                AND detail.data__TypeName = 'AWS::Organizations::OrganizationalUnit'
                AND listing.region = 'us-east-1'
    policies:
      name: policies
      id: aws.organizations.policies
      x-cfn-schema-name: Policy
      x-cfn-type-name: AWS::Organizations::Policy
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Policy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TargetIds') as target_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AwsManaged') as aws_managed
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Policy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Content') as content,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.TargetIds') as target_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AwsManaged') as aws_managed
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Organizations::Policy'
                AND detail.data__TypeName = 'AWS::Organizations::Policy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Content') as content,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'TargetIds') as target_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AwsManaged') as aws_managed
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::Policy'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Content') as content,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'TargetIds') as target_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AwsManaged') as aws_managed
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Organizations::Policy'
                    AND detail.data__TypeName = 'AWS::Organizations::Policy'
                    AND listing.region = 'us-east-1'
    policies_list_only:
      name: policies_list_only
      id: aws.organizations.policies_list_only
      x-cfn-schema-name: Policy
      x-cfn-type-name: AWS::Organizations::Policy
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Policy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::Policy'
                AND region = 'us-east-1'
    policy_tags:
      name: policy_tags
      id: aws.organizations.policy_tags
      x-cfn-schema-name: Policy
      x-cfn-type-name: AWS::Organizations::Policy
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Content') as content,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TargetIds') as target_ids,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AwsManaged') as aws_managed
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Organizations::Policy'
              AND detail.data__TypeName = 'AWS::Organizations::Policy'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Content') as content,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TargetIds') as target_ids,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AwsManaged') as aws_managed
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Organizations::Policy'
                AND detail.data__TypeName = 'AWS::Organizations::Policy'
                AND listing.region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.organizations.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::Organizations::ResourcePolicy
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Organizations::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::ResourcePolicy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Content') as content,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                AND detail.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Content') as content,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Organizations::ResourcePolicy'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Content') as content,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                    AND detail.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                    AND listing.region = 'us-east-1'
    resource_policies_list_only:
      name: resource_policies_list_only
      id: aws.organizations.resource_policies_list_only
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::Organizations::ResourcePolicy
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::ResourcePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Organizations::ResourcePolicy'
                AND region = 'us-east-1'
    resource_policy_tags:
      name: resource_policy_tags
      id: aws.organizations.resource_policy_tags
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::Organizations::ResourcePolicy
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Content') as content
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Organizations::ResourcePolicy'
              AND detail.data__TypeName = 'AWS::Organizations::ResourcePolicy'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Content') as content
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                AND detail.data__TypeName = 'AWS::Organizations::ResourcePolicy'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Account&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccount
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Organization&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOrganization
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__OrganizationalUnit&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateOrganizationalUnit
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateOrganizationalUnitRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Policy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourcePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
