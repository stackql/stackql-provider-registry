openapi: 3.0.0
info:
  title: S3
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Grantee:
      type: object
      additionalProperties: false
      properties:
        GranteeType:
          description: Configures the transfer acceleration state for an Amazon S3 bucket.
          type: string
          enum:
            - IAM
            - DIRECTORY_USER
            - DIRECTORY_GROUP
        GranteeIdentifier:
          description: The unique identifier of the Grantee
          type: string
      required:
        - GranteeType
        - GranteeIdentifier
    AccessGrantsLocationConfiguration:
      type: object
      additionalProperties: false
      properties:
        S3SubPrefix:
          description: The S3 sub prefix of a registered location in your S3 Access Grants instance
          type: string
      required:
        - S3SubPrefix
    AccessGrantArn:
      description: the Amazon Resource Name (ARN) of the specified access grant.
      type: string
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    AccessGrant:
      type: object
      properties:
        AccessGrantId:
          description: The ID assigned to this access grant.
          type: string
          x-examples:
            - 7c89cbd1-0f4e-40e3-861d-afb906952b77
        AccessGrantsLocationId:
          description: The custom S3 location to be accessed by the grantee
          type: string
          x-examples:
            - 125f332b-a499-4eb6-806f-8a6a1aa4cb96
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
        Permission:
          description: The level of access to be afforded to the grantee
          type: string
          enum:
            - READ
            - WRITE
            - READWRITE
        ApplicationArn:
          description: The ARN of the application grantees will use to access the location
          type: string
        S3PrefixType:
          description: The type of S3SubPrefix.
          type: string
          enum:
            - Object
        GrantScope:
          description: The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
          type: string
        AccessGrantArn:
          $ref: '#/components/schemas/AccessGrantArn'
          description: The Amazon Resource Name (ARN) of the specified access grant.
          x-examples:
            - arn:aws:s3:us-east-2:111122223333:access-grants/default/grant/7c89cbd1-0f4e-40e3-861d-afb906952b77
        Grantee:
          $ref: '#/components/schemas/Grantee'
          description: The principal who will be granted permission to access S3.
        AccessGrantsLocationConfiguration:
          $ref: '#/components/schemas/AccessGrantsLocationConfiguration'
          description: The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
      required:
        - Grantee
        - Permission
        - AccessGrantsLocationId
      x-stackql-resource-name: access_grant
      description: The AWS::S3::AccessGrant resource is an Amazon S3 resource type representing permissions to a specific S3 bucket or prefix hosted in an S3 Access Grants instance.
      x-type-name: AWS::S3::AccessGrant
      x-stackql-primary-identifier:
        - AccessGrantId
      x-create-only-properties:
        - S3PrefixType
        - Tags
      x-write-only-properties:
        - S3PrefixType
      x-read-only-properties:
        - AccessGrantId
        - AccessGrantArn
        - GrantScope
      x-required-properties:
        - Grantee
        - Permission
        - AccessGrantsLocationId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - s3:UntagResource
          - s3:TagResource
          - s3:ListTagsForResource
      x-required-permissions:
        create:
          - s3:CreateAccessGrant
          - s3:TagResource
        read:
          - s3:GetAccessGrant
          - s3:ListTagsForResource
        delete:
          - s3:DeleteAccessGrant
        list:
          - s3:ListAccessGrants
        update:
          - s3:TagResource
          - s3:UntagResource
    AccessGrantsInstanceArn:
      description: The Amazon Resource Name (ARN) of the specified Access Grants instance.
      type: string
    IdentityCenterArn:
      description: The Amazon Resource Name (ARN) of the specified AWS Identity Center.
      type: string
    AccessGrantsInstance:
      type: object
      properties:
        AccessGrantsInstanceArn:
          $ref: '#/components/schemas/AccessGrantsInstanceArn'
          description: The Amazon Resource Name (ARN) of the specified Access Grants instance.
          x-examples:
            - arn:aws:s3:us-east-2:479290226168:access-grants/default
        IdentityCenterArn:
          $ref: '#/components/schemas/IdentityCenterArn'
          description: The Amazon Resource Name (ARN) of the specified AWS Identity Center.
          x-examples:
            - arn:aws:sso:::instance/ssoins-6987e6a2fc43873b
        AccessGrantsInstanceId:
          type: string
          description: A unique identifier for the specified access grants instance.
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: access_grants_instance
      description: The AWS::S3::AccessGrantsInstance resource is an Amazon S3 resource type that hosts Access Grants and their associated locations
      x-type-name: AWS::S3::AccessGrantsInstance
      x-stackql-primary-identifier:
        - AccessGrantsInstanceArn
      x-create-only-properties:
        - Tags
      x-write-only-properties:
        - Tags
      x-read-only-properties:
        - AccessGrantsInstanceArn
        - AccessGrantsInstanceId
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - s3:UntagResource
          - s3:TagResource
          - s3:ListTagsForResource
      x-required-permissions:
        create:
          - s3:CreateAccessGrantsInstance
          - s3:TagResource
        read:
          - s3:GetAccessGrantsInstance
          - s3:ListTagsForResource
        delete:
          - s3:DeleteAccessGrantsInstance
        update:
          - s3:TagResource
          - s3:UntagResource
        list:
          - s3:ListAccessGrantsInstances
    AccessGrantsLocation:
      type: object
      properties:
        AccessGrantsLocationArn:
          description: The Amazon Resource Name (ARN) of the specified Access Grants location.
          type: string
          x-examples:
            - arn:aws:s3:us-east-2:479290226168:access-grants/default/location/125f332b-a499-4eb6-806f-8a6a1aa4cb96
        AccessGrantsLocationId:
          type: string
          description: The unique identifier for the specified Access Grants location.
        IamRoleArn:
          description: The Amazon Resource Name (ARN) of the access grant location's associated IAM role.
          type: string
          x-examples:
            - arn:aws:iamw::123456789012:role/rolename
        LocationScope:
          type: string
          description: Descriptor for where the location actually points
          x-examples:
            - s3://test-bucket-access-grants-cmh/prefixA
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: access_grants_location
      description: The AWS::S3::AccessGrantsLocation resource is an Amazon S3 resource type hosted in an access grants instance which can be the target of S3 access grants.
      x-type-name: AWS::S3::AccessGrantsLocation
      x-stackql-primary-identifier:
        - AccessGrantsLocationId
      x-create-only-properties:
        - Tags
      x-read-only-properties:
        - AccessGrantsLocationArn
        - AccessGrantsLocationId
      x-required-properties: []
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - s3:UntagResource
          - s3:TagResource
          - s3:ListTagsForResource
      x-required-permissions:
        create:
          - s3:CreateAccessGrantsLocation
          - iam:PassRole
          - s3:TagResource
        read:
          - s3:GetAccessGrantsLocation
          - s3:ListTagsForResource
        delete:
          - s3:DeleteAccessGrantsLocation
        list:
          - s3:ListAccessGrantsLocations
        update:
          - s3:UpdateAccessGrantsLocation
          - s3:TagResource
          - s3:UntagResource
          - iam:PassRole
    VpcConfiguration:
      description: The Virtual Private Cloud (VPC) configuration for a bucket access point.
      type: object
      properties:
        VpcId:
          description: If this field is specified, this access point will only allow connections from the specified VPC ID.
          type: string
          minLength: 1
          maxLength: 1024
    PublicAccessBlockConfiguration:
      type: object
      properties:
        BlockPublicAcls:
          type: boolean
          description: |-
            Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
            - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
             - PUT Object calls fail if the request includes a public ACL.
            . - PUT Bucket calls fail if the request includes a public ACL.
            Enabling this setting doesn't affect existing policies or ACLs.
        IgnorePublicAcls:
          type: boolean
          description: Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
        BlockPublicPolicy:
          type: boolean
          description: Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
        RestrictPublicBuckets:
          type: boolean
          description: |-
            Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
            Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
      additionalProperties: false
    Arn:
      description: The Amazon Resource Name (ARN) of the specified resource.
      type: string
    AccessPoint:
      type: object
      properties:
        Name:
          description: The name you want to assign to this Access Point. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the access point name.
          type: string
          pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
          minLength: 3
          maxLength: 50
        Alias:
          description: The alias of this Access Point. This alias can be used for compatibility purposes with other AWS services and third-party applications.
          type: string
          pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
          minLength: 3
          maxLength: 63
        Bucket:
          description: The name of the bucket that you want to associate this Access Point with.
          type: string
          minLength: 3
          maxLength: 255
        BucketAccountId:
          description: The AWS account ID associated with the S3 bucket associated with this access point.
          type: string
          pattern: ^\d{12}$
          maxLength: 64
        VpcConfiguration:
          description: If you include this field, Amazon S3 restricts access to this Access Point to requests from the specified Virtual Private Cloud (VPC).
          $ref: '#/components/schemas/VpcConfiguration'
        PublicAccessBlockConfiguration:
          description: The PublicAccessBlock configuration that you want to apply to this Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
          $ref: '#/components/schemas/PublicAccessBlockConfiguration'
        Policy:
          description: The Access Point Policy you want to apply to this access point.
          type: object
        NetworkOrigin:
          description: Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
          type: string
          enum:
            - Internet
            - VPC
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the specified accesspoint.
          x-examples:
            - arn:aws:s3:us-west-2:123456789012:accesspoint/test
      required:
        - Bucket
      x-stackql-resource-name: access_point
      description: The AWS::S3::AccessPoint resource is an Amazon S3 resource type that you can use to access buckets.
      x-type-name: AWS::S3::AccessPoint
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Bucket
        - BucketAccountId
        - VpcConfiguration
      x-read-only-properties:
        - Alias
        - NetworkOrigin
        - Arn
      x-required-properties:
        - Bucket
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - s3:CreateAccessPoint
          - s3:PutAccessPointPolicy
          - s3:PutAccessPointPublicAccessBlock
        read:
          - s3:GetAccessPoint
          - s3:GetAccessPointPolicy
        update:
          - s3:PutAccessPointPolicy
          - s3:PutAccessPointPublicAccessBlock
          - s3:DeleteAccessPointPolicy
          - s3:GetAccessPoint
          - s3:GetAccessPointPolicy
        delete:
          - s3:DeleteAccessPointPolicy
          - s3:DeleteAccessPoint
        list:
          - s3:ListAccessPoints
    TagFilter:
      description: Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The tag value.
        Key:
          type: string
          description: The tag key.
      required:
        - Value
        - Key
    Destination:
      description: Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket.
      type: object
      additionalProperties: false
      properties:
        BucketArn:
          description: The Amazon Resource Name (ARN) of the bucket to which data is exported.
          type: string
        BucketAccountId:
          description: |-
            The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.
               Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
          type: string
        Format:
          description: |-
            Specifies the file format used when exporting data to Amazon S3.
              *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``
          type: string
          enum:
            - CSV
            - ORC
            - Parquet
        Prefix:
          description: The prefix to use when exporting data. The prefix is prepended to all results.
          type: string
      required:
        - BucketArn
        - Format
    AccelerateConfiguration:
      type: object
      additionalProperties: false
      properties:
        AccelerationStatus:
          description: Specifies the transfer acceleration status of the bucket.
          type: string
          enum:
            - Enabled
            - Suspended
      required:
        - AccelerationStatus
      description: Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.
    AnalyticsConfiguration:
      description: Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
      type: object
      additionalProperties: false
      properties:
        TagFilters:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TagFilter'
          description: |-
            The tags to use when evaluating an analytics filter.
             The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.
        StorageClassAnalysis:
          $ref: '#/components/schemas/StorageClassAnalysis'
          description: Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
        Id:
          description: The ID that identifies the analytics configuration.
          type: string
        Prefix:
          description: The prefix that an object must have to be included in the analytics results.
          type: string
      required:
        - StorageClassAnalysis
        - Id
    StorageClassAnalysis:
      description: Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
      type: object
      additionalProperties: false
      properties:
        DataExport:
          $ref: '#/components/schemas/DataExport'
          description: Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
    DataExport:
      description: Specifies how Amazon S3 Storage Lens metrics should be exported.
      type: object
      additionalProperties: false
      properties:
        S3BucketDestination:
          $ref: '#/components/schemas/S3BucketDestination'
        CloudWatchMetrics:
          $ref: '#/components/schemas/CloudWatchMetrics'
    BucketEncryption:
      description: Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
      type: object
      additionalProperties: false
      properties:
        ServerSideEncryptionConfiguration:
          description: Specifies the default server-side-encryption configuration.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ServerSideEncryptionRule'
      required:
        - ServerSideEncryptionConfiguration
    ServerSideEncryptionRule:
      description: |-
        Specifies the default server-side encryption configuration.
           +   *General purpose buckets* - If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner.
          +   *Directory buckets* - When you specify an [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) for encryption in your directory bucket, only use the key ID or key ARN. The key alias format of the KMS key isn't supported.
      type: object
      additionalProperties: false
      properties:
        BucketKeyEnabled:
          description: |-
            Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.
             For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
          type: boolean
        ServerSideEncryptionByDefault:
          $ref: '#/components/schemas/ServerSideEncryptionByDefault'
          description: Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
    ServerSideEncryptionByDefault:
      description: |-
        Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see [PutBucketEncryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html).
           +   *General purpose buckets* - If you don't specify a customer managed key at configuration, Amazon S3 automatically creates an AWS KMS key (``aws/s3``) in your AWS account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS. 
          +   *Directory buckets* - Your SSE-KMS configuration can only support 1 [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) per directory bucket for the lifetime of the bucket. The [managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk) (``aws/s3``) isn't supported. 
          +   *Directory buckets* - For directory buckets, there are only two supported options for server-side encryption: SSE-S3 and SSE-KMS.
      type: object
      properties:
        KMSMasterKeyID:
          description: |-
            AWS Key Management Service (KMS) customer managed key ID to use for the default encryption. 
               +   *General purpose buckets* - This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
              +   *Directory buckets* - This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms``.
              
              You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
              +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` 
              +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` 
              +  Key Alias: ``alias/alias-name`` 
              
             If you are using encryption with cross-account or AWS service operations, you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
               +   *General purpose buckets* - If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner. Also, if you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. 
              +   *Directory buckets* - When you specify an [customer managed key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk) for encryption in your directory bucket, only use the key ID or key ARN. The key alias format of the KMS key isn't supported.
              
               Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
          type: string
        SSEAlgorithm:
          type: string
          enum:
            - aws:kms
            - AES256
            - aws:kms:dsse
          description: |-
            Server-side encryption algorithm to use for the default encryption.
              For directory buckets, there are only two supported values for server-side encryption: ``AES256`` and ``aws:kms``.
      additionalProperties: false
      required:
        - SSEAlgorithm
    CorsConfiguration:
      type: object
      additionalProperties: false
      properties:
        CorsRules:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/CorsRule'
            maxLength: 100
          description: A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
      required:
        - CorsRules
      description: Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
    CorsRule:
      type: object
      description: Specifies a cross-origin access rule for an Amazon S3 bucket.
      additionalProperties: false
      properties:
        AllowedHeaders:
          description: Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
        AllowedMethods:
          description: |-
            An HTTP method that you allow the origin to run.
              *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
            enum:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
        AllowedOrigins:
          description: One or more origins you want customers to be able to access the bucket from.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
        ExposedHeaders:
          description: One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
        Id:
          description: A unique identifier for this rule. The value must be no more than 255 characters.
          type: string
          maxLength: 255
        MaxAge:
          description: The time in seconds that your browser is to cache the preflight response for the specified resource.
          type: integer
          minimum: 0
      required:
        - AllowedMethods
        - AllowedOrigins
    IntelligentTieringConfiguration:
      type: object
      additionalProperties: false
      properties:
        Id:
          description: The ID used to identify the S3 Intelligent-Tiering configuration.
          type: string
        Prefix:
          description: An object key name prefix that identifies the subset of objects to which the rule applies.
          type: string
        Status:
          description: Specifies the status of the configuration.
          type: string
          enum:
            - Disabled
            - Enabled
        TagFilters:
          description: A container for a key-value pair.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TagFilter'
        Tierings:
          description: |-
            Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.
              You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tiering'
      required:
        - Id
        - Status
        - Tierings
      description: |-
        Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
         For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).
    Tiering:
      type: object
      additionalProperties: false
      properties:
        AccessTier:
          description: S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
          type: string
          enum:
            - ARCHIVE_ACCESS
            - DEEP_ARCHIVE_ACCESS
        Days:
          description: The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
          type: integer
      required:
        - AccessTier
        - Days
      description: The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
    InventoryConfiguration:
      type: object
      additionalProperties: false
      properties:
        Destination:
          $ref: '#/components/schemas/Destination'
          description: Contains information about where to publish the inventory results.
        Enabled:
          description: Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.
          type: boolean
        Id:
          description: The ID used to identify the inventory configuration.
          type: string
        IncludedObjectVersions:
          description: Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
          type: string
          enum:
            - All
            - Current
        OptionalFields:
          description: Contains the optional fields that are included in the inventory results.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
            enum:
              - Size
              - LastModifiedDate
              - StorageClass
              - ETag
              - IsMultipartUploaded
              - ReplicationStatus
              - EncryptionStatus
              - ObjectLockRetainUntilDate
              - ObjectLockMode
              - ObjectLockLegalHoldStatus
              - IntelligentTieringAccessTier
              - BucketKeyStatus
              - ChecksumAlgorithm
              - ObjectAccessControlList
              - ObjectOwner
        Prefix:
          description: Specifies the inventory filter prefix.
          type: string
        ScheduleFrequency:
          description: Specifies the schedule for generating inventory results.
          type: string
          enum:
            - Daily
            - Weekly
      required:
        - Destination
        - Enabled
        - Id
        - IncludedObjectVersions
        - ScheduleFrequency
      description: Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.
    LifecycleConfiguration:
      type: object
      additionalProperties: false
      properties:
        Rules:
          description: A lifecycle rule for individual objects in an Amazon S3 bucket.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Rule'
        TransitionDefaultMinimumObjectSize:
          description: ''
          type: string
          enum:
            - varies_by_storage_class
            - all_storage_classes_128K
      required:
        - Rules
      description: Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.
    Rule:
      type: object
      description: |-
        Specifies lifecycle rules for an Amazon S3 bucket. For more information, see [Put Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html) in the *Amazon S3 API Reference*.
         You must specify at least one of the following properties: ``AbortIncompleteMultipartUpload``, ``ExpirationDate``, ``ExpirationInDays``, ``NoncurrentVersionExpirationInDays``, ``NoncurrentVersionTransition``, ``NoncurrentVersionTransitions``, ``Transition``, or ``Transitions``.
      additionalProperties: false
      properties:
        AbortIncompleteMultipartUpload:
          $ref: '#/components/schemas/AbortIncompleteMultipartUpload'
          description: Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.
        ExpirationDate:
          $ref: '#/components/schemas/iso8601UTC'
          description: Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        ExpirationInDays:
          type: integer
          description: Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
        ExpiredObjectDeleteMarker:
          type: boolean
          description: Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
        Id:
          type: string
          maxLength: 255
          description: Unique identifier for the rule. The value can't be longer than 255 characters.
        NoncurrentVersionExpirationInDays:
          type: integer
          description: (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.
        NoncurrentVersionExpiration:
          $ref: '#/components/schemas/NoncurrentVersionExpiration'
          description: Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.
        NoncurrentVersionTransition:
          $ref: '#/components/schemas/NoncurrentVersionTransition'
          description: (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
        NoncurrentVersionTransitions:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/NoncurrentVersionTransition'
          description: For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
        Prefix:
          type: string
          description: |-
            Object key prefix that identifies one or more objects to which this rule applies.
              Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        Status:
          type: string
          enum:
            - Enabled
            - Disabled
          description: If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
        TagFilters:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TagFilter'
          description: Tags to use to identify a subset of objects to which the lifecycle rule applies.
        ObjectSizeGreaterThan:
          type: string
          maxLength: 20
          pattern: '[0-9]+'
          description: Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        ObjectSizeLessThan:
          type: string
          maxLength: 20
          pattern: '[0-9]+'
          description: Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
        Transition:
          $ref: '#/components/schemas/Transition'
          description: (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.
        Transitions:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Transition'
          description: One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
      required:
        - Status
    AbortIncompleteMultipartUpload:
      description: Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the *Amazon S3 User Guide*.
      type: object
      additionalProperties: false
      properties:
        DaysAfterInitiation:
          description: Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
          type: integer
          minimum: 0
      required:
        - DaysAfterInitiation
    iso8601UTC:
      description: The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    NoncurrentVersionExpiration:
      type: object
      description: >-
        Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket
        Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
      additionalProperties: false
      properties:
        NoncurrentDays:
          description: Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
          type: integer
        NewerNoncurrentVersions:
          description: Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
          type: integer
      required:
        - NoncurrentDays
    NoncurrentVersionTransition:
      type: object
      description: >-
        Container for the transition rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage
        class at a specific period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
      additionalProperties: false
      properties:
        StorageClass:
          description: The class of storage used to store the object.
          type: string
          enum:
            - DEEP_ARCHIVE
            - GLACIER
            - Glacier
            - GLACIER_IR
            - INTELLIGENT_TIERING
            - ONEZONE_IA
            - STANDARD_IA
        TransitionInDays:
          description: Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
          type: integer
        NewerNoncurrentVersions:
          description: Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
          type: integer
      required:
        - StorageClass
        - TransitionInDays
    Transition:
      type: object
      properties:
        StorageClass:
          type: string
          enum:
            - DEEP_ARCHIVE
            - GLACIER
            - Glacier
            - GLACIER_IR
            - INTELLIGENT_TIERING
            - ONEZONE_IA
            - STANDARD_IA
          description: The storage class to which you want the object to transition.
        TransitionDate:
          $ref: '#/components/schemas/iso8601UTC'
          description: Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
        TransitionInDays:
          type: integer
          description: Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
      additionalProperties: false
      description: Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the *Amazon S3 User Guide*.
      required:
        - StorageClass
    LoggingConfiguration:
      type: object
      properties:
        DestinationBucketName:
          type: string
          description: The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.
        LogFilePrefix:
          type: string
          description: A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        TargetObjectKeyFormat:
          $ref: '#/components/schemas/TargetObjectKeyFormat'
          description: Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
      additionalProperties: false
      description: |-
        Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the *Amazon S3 API Reference*.
          To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request, you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
    TargetObjectKeyFormat:
      type: object
      description: Describes the key format for server access log file in the target bucket. You can choose between SimplePrefix and PartitionedPrefix.
      oneOf:
        - additionalProperties: false
          properties:
            SimplePrefix:
              description: This format defaults the prefix to the given log file prefix for delivering server access log file.
              type: object
              additionalProperties: false
          required:
            - SimplePrefix
        - additionalProperties: false
          properties:
            PartitionedPrefix:
              $ref: '#/components/schemas/PartitionedPrefix'
          required:
            - PartitionedPrefix
    PartitionedPrefix:
      type: object
      description: |-
        Amazon S3 keys for log objects are partitioned in the following format:
          ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]`` 
         PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.
      properties:
        PartitionDateSource:
          type: string
          description: |-
            Specifies the partition date source for the partitioned prefix. ``PartitionDateSource`` can be ``EventTime`` or ``DeliveryTime``.
             For ``DeliveryTime``, the time in the log file names corresponds to the delivery time for the log files. 
              For ``EventTime``, The logs delivered are for a specific day only. The year, month, and day correspond to the day on which the event occurred, and the hour, minutes and seconds are set to 00 in the key.
          enum:
            - EventTime
            - DeliveryTime
      additionalProperties: false
    MetricsConfiguration:
      type: object
      additionalProperties: false
      properties:
        AccessPointArn:
          type: string
          description: The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.
        Id:
          type: string
          description: The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.
        Prefix:
          type: string
          description: The prefix that an object must have to be included in the metrics results.
        TagFilters:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TagFilter'
          description: Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.
      required:
        - Id
      description: >-
        Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For examples, see
        [AWS::S3::Bucket](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#aws-properties-s3-bucket--examples). For more information, see [PUT Bucket metrics](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html) in the *Amazon S3 API Reference*.
    NotificationConfiguration:
      description: |-
        Describes the notification configuration for an Amazon S3 bucket.
          If you create the target resource and related permissions in the same template, you might have a circular dependency.
         For example, you might use the ``AWS::Lambda::Permission`` resource to grant the bucket permission to invoke an AWS Lambda function. However, AWS CloudFormation can't create the bucket until the bucket has permission to invoke the function (AWS CloudFormation checks whether the bucket can invoke the function). If you're using Refs to pass the bucket name, this leads to a circular dependency.
         To avoid this dependency, you can create all resources without specifying the notification configuration. Then, update the stack with a notification configuration.
         For more information on permissions, see [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html) and [Granting Permissions to Publish Event Notification Messages to a Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-permissions-to-s3).
      type: object
      additionalProperties: false
      properties:
        EventBridgeConfiguration:
          $ref: '#/components/schemas/EventBridgeConfiguration'
          description: Enables delivery of events to Amazon EventBridge.
        LambdaConfigurations:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/LambdaConfiguration'
          description: Describes the LAMlong functions to invoke and the events for which to invoke them.
        QueueConfigurations:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/QueueConfiguration'
          description: The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
        TopicConfigurations:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TopicConfiguration'
          description: The topic to which notifications are sent and the events for which notifications are generated.
    EventBridgeConfiguration:
      type: object
      description: |-
        Amazon S3 can send events to Amazon EventBridge whenever certain events happen in your bucket, see [Using EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User Guide*.
         Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to additional targets. For more information, see [What Is Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge User Guide*
      additionalProperties: false
      properties:
        EventBridgeEnabled:
          description: Enables delivery of events to Amazon EventBridge.
          type: boolean
          default: 'true'
      required:
        - EventBridgeEnabled
    LambdaConfiguration:
      type: object
      description: Describes the LAMlong functions to invoke and the events for which to invoke them.
      additionalProperties: false
      properties:
        Event:
          description: The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
          type: string
        Filter:
          description: The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.
          $ref: '#/components/schemas/NotificationFilter'
        Function:
          description: The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.
          type: string
      required:
        - Function
        - Event
    QueueConfiguration:
      type: object
      description: Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
      additionalProperties: false
      properties:
        Event:
          description: The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
          type: string
        Filter:
          description: The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
          $ref: '#/components/schemas/NotificationFilter'
        Queue:
          description: The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.
          type: string
      required:
        - Event
        - Queue
    TopicConfiguration:
      type: object
      description: A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
      additionalProperties: false
      properties:
        Event:
          description: The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
          type: string
        Filter:
          description: The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.
          $ref: '#/components/schemas/NotificationFilter'
        Topic:
          description: The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
          type: string
      required:
        - Event
        - Topic
    NotificationFilter:
      type: object
      description: Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
      additionalProperties: false
      properties:
        S3Key:
          $ref: '#/components/schemas/S3KeyFilter'
          description: A container for object key name prefix and suffix filtering rules.
      required:
        - S3Key
    S3KeyFilter:
      type: object
      description: |-
        A container for object key name prefix and suffix filtering rules. For more information about object key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
          The same type of filter rule cannot be used more than once. For example, you cannot specify two prefix rules.
      additionalProperties: false
      properties:
        Rules:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/FilterRule'
          description: A list of containers for the key-value pair that defines the criteria for the filter rule.
      required:
        - Rules
    FilterRule:
      type: object
      description: >-
        Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find
        objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.
      additionalProperties: false
      properties:
        Name:
          type: string
          maxLength: 1024
          description: The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
        Value:
          type: string
          description: The value that the filter searches for in object key names.
      required:
        - Value
        - Name
    ObjectLockConfiguration:
      type: object
      additionalProperties: false
      properties:
        ObjectLockEnabled:
          type: string
          x-const: Enabled
          description: Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
        Rule:
          $ref: '#/components/schemas/ObjectLockRule'
          description: >-
            Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and
            [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
      description: Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
    ObjectLockRule:
      type: object
      description: Specifies the Object Lock rule for the specified object. Enable the this rule when you apply ``ObjectLockConfiguration`` to a bucket.
      additionalProperties: false
      properties:
        DefaultRetention:
          $ref: '#/components/schemas/DefaultRetention'
          description: >-
            The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see
            [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
    DefaultRetention:
      type: object
      description: |-
        The container element for optionally specifying the default Object Lock retention settings for new objects placed in the specified bucket.
           +  The ``DefaultRetention`` settings require both a mode and a period.
          +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.
      additionalProperties: false
      properties:
        Years:
          type: integer
          description: The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        Days:
          type: integer
          description: The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
        Mode:
          type: string
          enum:
            - COMPLIANCE
            - GOVERNANCE
          description: The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
    OwnershipControls:
      type: object
      additionalProperties: false
      properties:
        Rules:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/OwnershipControlsRule'
          description: Specifies the container element for Object Ownership rules.
      required:
        - Rules
      description: |-
        Specifies the container element for Object Ownership rules.
         S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
    OwnershipControlsRule:
      type: object
      additionalProperties: false
      properties:
        ObjectOwnership:
          description: Specifies an object ownership rule.
          type: string
          enum:
            - ObjectWriter
            - BucketOwnerPreferred
            - BucketOwnerEnforced
      description: |-
        Specifies an Object Ownership rule.
         S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
    ReplicationConfiguration:
      type: object
      description: A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB. The latest version of the replication configuration XML is V2. For more information about XML V2 replication configurations, see [Replication configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon S3 User Guide*.
      additionalProperties: false
      properties:
        Role:
          description: The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.
          type: string
        Rules:
          description: A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ReplicationRule'
            maxLength: 1000
            minLength: 1
      required:
        - Role
        - Rules
    ReplicationRule:
      type: object
      description: Specifies which Amazon S3 objects to replicate and where to store the replicas.
      additionalProperties: false
      properties:
        DeleteMarkerReplication:
          $ref: '#/components/schemas/DeleteMarkerReplication'
          description: >-
            Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
            Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
             For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
              If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
        Destination:
          $ref: '#/components/schemas/ReplicationDestination'
          description: A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
        Filter:
          $ref: '#/components/schemas/ReplicationRuleFilter'
          description: |-
            A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.
              V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
        Id:
          description: A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as "ID".
          type: string
          maxLength: 255
        Prefix:
          description: |-
            An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
              Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
          type: string
          maxLength: 1024
        Priority:
          type: integer
          description: |-
            The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. 
             For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
        SourceSelectionCriteria:
          $ref: '#/components/schemas/SourceSelectionCriteria'
          description: A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
        Status:
          description: Specifies whether the rule is enabled.
          type: string
          enum:
            - Disabled
            - Enabled
      required:
        - Destination
        - Status
    DeleteMarkerReplication:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
          enum:
            - Disabled
            - Enabled
          description: Indicates whether to replicate delete markers. Disabled by default.
      description: >-
        Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule
        Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
         For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
          If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
    ReplicationDestination:
      type: object
      description: A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
      additionalProperties: false
      properties:
        AccessControlTranslation:
          $ref: '#/components/schemas/AccessControlTranslation'
          description: Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
        Account:
          type: string
          description: |-
            Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.
             If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.
        Bucket:
          type: string
          description: The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          description: Specifies encryption-related information.
        Metrics:
          $ref: '#/components/schemas/Metrics'
          description: A container specifying replication metrics-related settings enabling replication metrics and events.
        ReplicationTime:
          $ref: '#/components/schemas/ReplicationTime'
          description: A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
        StorageClass:
          description: |-
            The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 
             For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.
          type: string
          enum:
            - DEEP_ARCHIVE
            - GLACIER
            - GLACIER_IR
            - INTELLIGENT_TIERING
            - ONEZONE_IA
            - REDUCED_REDUNDANCY
            - STANDARD
            - STANDARD_IA
      required:
        - Bucket
    AccessControlTranslation:
      type: object
      description: Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
      additionalProperties: false
      properties:
        Owner:
          type: string
          x-const: Destination
          description: Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.
      required:
        - Owner
    EncryptionConfiguration:
      type: object
      description: |-
        Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
          If you're specifying a customer managed KMS key, we recommend using a fully qualified KMS key ARN. If you use a KMS key alias instead, then KMS resolves the key within the requester’s account. This behavior can result in data that's encrypted with a KMS key that belongs to the requester, and not the bucket owner.
      additionalProperties: false
      properties:
        ReplicaKmsKeyID:
          description: Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
          type: string
      required:
        - ReplicaKmsKeyID
    Metrics:
      type: object
      additionalProperties: false
      properties:
        EventThreshold:
          $ref: '#/components/schemas/ReplicationTimeValue'
          description: A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.
        Status:
          type: string
          enum:
            - Disabled
            - Enabled
          description: Specifies whether the replication metrics are enabled.
      required:
        - Status
      description: A container specifying replication metrics-related settings enabling replication metrics and events.
    ReplicationTimeValue:
      type: object
      additionalProperties: false
      properties:
        Minutes:
          type: integer
          description: |-
            Contains an integer specifying time in minutes. 
              Valid value: 15
      required:
        - Minutes
      description: A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics ``EventThreshold``.
    ReplicationTime:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
          enum:
            - Disabled
            - Enabled
          description: Specifies whether the replication time is enabled.
        Time:
          $ref: '#/components/schemas/ReplicationTimeValue'
          description: A container specifying the time by which replication should be complete for all objects and operations on objects.
      required:
        - Status
        - Time
      description: A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
    ReplicationRuleFilter:
      type: object
      additionalProperties: false
      properties:
        And:
          $ref: '#/components/schemas/ReplicationRuleAndOperator'
          description: |-
            A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
              +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.
              +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.
        Prefix:
          type: string
          description: |-
            An object key name prefix that identifies the subset of objects to which the rule applies.
              Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        TagFilter:
          $ref: '#/components/schemas/TagFilter'
          description: |-
            A container for specifying a tag key and value. 
             The rule applies only to objects that have the tag in their tag set.
      description: A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element.
    ReplicationRuleAndOperator:
      type: object
      additionalProperties: false
      properties:
        Prefix:
          type: string
          description: An object key name prefix that identifies the subset of objects to which the rule applies.
        TagFilters:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/TagFilter'
          description: An array of tags containing key and value pairs.
      description: |-
        A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. 
         For example:
          +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. 
          +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag
    SourceSelectionCriteria:
      description: A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
      type: object
      additionalProperties: false
      properties:
        ReplicaModifications:
          description: A filter that you can specify for selection for modifications on replicas.
          $ref: '#/components/schemas/ReplicaModifications'
        SseKmsEncryptedObjects:
          description: A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.
          $ref: '#/components/schemas/SseKmsEncryptedObjects'
    ReplicaModifications:
      type: object
      additionalProperties: false
      properties:
        Status:
          description: |-
            Specifies whether Amazon S3 replicates modifications on replicas.
              *Allowed values*: ``Enabled`` | ``Disabled``
          type: string
          enum:
            - Enabled
            - Disabled
      required:
        - Status
      description: A filter that you can specify for selection for modifications on replicas.
    SseKmsEncryptedObjects:
      type: object
      description: A container for filter information for the selection of S3 objects encrypted with AWS KMS.
      additionalProperties: false
      properties:
        Status:
          description: Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.
          type: string
          enum:
            - Disabled
            - Enabled
      required:
        - Status
    VersioningConfiguration:
      description: |-
        Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3 API Reference*.
          When you enable versioning on a bucket for the first time, it might take a short amount of time for the change to be fully propagated. We recommend that you wait for 15 minutes after enabling versioning before issuing write operations (``PUT`` or ``DELETE``) on objects in the bucket.
      type: object
      additionalProperties: false
      properties:
        Status:
          description: The versioning state of the bucket.
          type: string
          default: Suspended
          enum:
            - Enabled
            - Suspended
      required:
        - Status
    WebsiteConfiguration:
      type: object
      description: Specifies website configuration parameters for an Amazon S3 bucket.
      additionalProperties: false
      properties:
        ErrorDocument:
          description: The name of the error document for the website.
          type: string
        IndexDocument:
          description: The name of the index document for the website.
          type: string
        RoutingRules:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/RoutingRule'
          description: Rules that define when a redirect is applied and the redirect behavior.
        RedirectAllRequestsTo:
          $ref: '#/components/schemas/RedirectAllRequestsTo'
          description: |-
            The redirect behavior for every request to this bucket's website endpoint.
              If you specify this property, you can't specify any other property.
    RoutingRule:
      description: Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the *Amazon S3 User Guide*.
      type: object
      additionalProperties: false
      properties:
        RedirectRule:
          description: Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
          $ref: '#/components/schemas/RedirectRule'
        RoutingRuleCondition:
          $ref: '#/components/schemas/RoutingRuleCondition'
          description: A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
      required:
        - RedirectRule
    RedirectRule:
      type: object
      description: Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
      additionalProperties: false
      properties:
        HostName:
          description: The host name to use in the redirect request.
          type: string
        HttpRedirectCode:
          description: The HTTP redirect code to use on the response. Not required if one of the siblings is present.
          type: string
        Protocol:
          description: Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
          enum:
            - http
            - https
          type: string
        ReplaceKeyPrefixWith:
          description: |-
            The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.
              Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
          type: string
        ReplaceKeyWith:
          description: |-
            The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.
              Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
          type: string
    RoutingRuleCondition:
      description: A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
      type: object
      additionalProperties: false
      properties:
        KeyPrefixEquals:
          description: |-
            The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.
             Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.
          type: string
        HttpErrorCodeReturnedEquals:
          description: |-
            The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
             Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.
          type: string
    RedirectAllRequestsTo:
      description: Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
      type: object
      additionalProperties: false
      properties:
        HostName:
          description: Name of the host where requests are redirected.
          type: string
        Protocol:
          description: Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
          type: string
          enum:
            - http
            - https
      required:
        - HostName
    Bucket:
      type: object
      properties:
        AccelerateConfiguration:
          $ref: '#/components/schemas/AccelerateConfiguration'
          description: Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.
        AccessControl:
          description: |-
            This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see [Controlling object ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
              A canned access control list (ACL) that grants predefined permissions to the bucket. For more information about canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
              S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring ACLs are uncommon.
              The majority of access control configurations can be successfully and more easily achieved with bucket policies. For more information, see [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the *Amazon S3 User Guide*.
          enum:
            - AuthenticatedRead
            - AwsExecRead
            - BucketOwnerFullControl
            - BucketOwnerRead
            - LogDeliveryWrite
            - Private
            - PublicRead
            - PublicReadWrite
          type: string
        AnalyticsConfigurations:
          description: Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
          items:
            $ref: '#/components/schemas/AnalyticsConfiguration'
          type: array
          uniqueItems: true
          x-insertionOrder: true
        BucketEncryption:
          $ref: '#/components/schemas/BucketEncryption'
          description: Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
        BucketName:
          description: >-
            A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see [Rules for naming Amazon S3
            buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the *Amazon S3 User Guide*. 
              If you specify a name, you can't perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you need to replace the resource, specify a new name.
          type: string
        CorsConfiguration:
          $ref: '#/components/schemas/CorsConfiguration'
          description: Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
        IntelligentTieringConfigurations:
          description: Defines how Amazon S3 handles Intelligent-Tiering storage.
          items:
            $ref: '#/components/schemas/IntelligentTieringConfiguration'
          type: array
          uniqueItems: true
          x-insertionOrder: true
        InventoryConfigurations:
          description: Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.
          items:
            $ref: '#/components/schemas/InventoryConfiguration'
          type: array
          uniqueItems: true
          x-insertionOrder: true
        LifecycleConfiguration:
          $ref: '#/components/schemas/LifecycleConfiguration'
          description: Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.
        LoggingConfiguration:
          $ref: '#/components/schemas/LoggingConfiguration'
          description: Settings that define where logs are stored.
        MetricsConfigurations:
          description: Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
          items:
            $ref: '#/components/schemas/MetricsConfiguration'
          type: array
          uniqueItems: true
          x-insertionOrder: true
        NotificationConfiguration:
          $ref: '#/components/schemas/NotificationConfiguration'
          description: Configuration that defines how Amazon S3 handles bucket notifications.
        ObjectLockConfiguration:
          $ref: '#/components/schemas/ObjectLockConfiguration'
          description: |-
            This operation is not supported by directory buckets.
              Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). 
               +  The ``DefaultRetention`` settings require both a mode and a period.
              +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.
              +  You can enable Object Lock for new or existing buckets. For more information, see [Configuring Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html).
        ObjectLockEnabled:
          description: Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
          type: boolean
        OwnershipControls:
          description: Configuration that defines how Amazon S3 handles Object Ownership rules.
          $ref: '#/components/schemas/OwnershipControls'
        PublicAccessBlockConfiguration:
          $ref: '#/components/schemas/PublicAccessBlockConfiguration'
          description: Configuration that defines how Amazon S3 handles public access.
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
          description: |-
            Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the ``VersioningConfiguration`` property.
             Amazon S3 can store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket or buckets must already exist.
        Tags:
          description: An arbitrary set of tags (key-value pairs) for this S3 bucket.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        VersioningConfiguration:
          $ref: '#/components/schemas/VersioningConfiguration'
          description: |-
            Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.
              When you enable versioning on a bucket for the first time, it might take a short amount of time for the change to be fully propagated. We recommend that you wait for 15 minutes after enabling versioning before issuing write operations (``PUT`` or ``DELETE``) on objects in the bucket.
        WebsiteConfiguration:
          $ref: '#/components/schemas/WebsiteConfiguration'
          description: Information used to configure the bucket as a static website. For more information, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).
        Arn:
          $ref: '#/components/schemas/Arn'
          description: ''
          x-examples:
            - arn:aws:s3:::mybucket
        DomainName:
          description: ''
          x-examples:
            - mystack-mybucket-kdwwxmddtr2g.s3.amazonaws.com
          type: string
        DualStackDomainName:
          description: ''
          x-examples:
            - mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com
          type: string
        RegionalDomainName:
          description: ''
          x-examples:
            - mystack-mybucket-kdwwxmddtr2g.s3.us-east-2.amazonaws.com
          type: string
        WebsiteURL:
          description: ''
          x-examples:
            - 'Example (IPv4): http://mystack-mybucket-kdwwxmddtr2g.s3-website-us-east-2.amazonaws.com/'
            - 'Example (IPv6): http://mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com/'
          format: uri
          type: string
      x-stackql-resource-name: bucket
      description: |-
        The ``AWS::S3::Bucket`` resource creates an Amazon S3 bucket in the same AWS Region where you create the AWS CloudFormation stack.
         To control how AWS CloudFormation handles the bucket when the stack is deleted, you can set a deletion policy for your bucket. You can choose to *retain* the bucket or to *delete* the bucket. For more information, see [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html).
          You can only delete empty buckets. Deletion fails for buckets that have contents.
      x-type-name: AWS::S3::Bucket
      x-stackql-primary-identifier:
        - BucketName
      x-create-only-properties:
        - BucketName
      x-write-only-properties:
        - AccessControl
        - LifecycleConfiguration/Rules/*/NoncurrentVersionExpirationInDays
        - LifecycleConfiguration/Rules/*/NoncurrentVersionTransition
        - LifecycleConfiguration/Rules/*/Transition
        - ReplicationConfiguration/Rules/*/Prefix
        - LifecycleConfiguration/Rules/*/ExpiredObjectDeleteMarker
      x-read-only-properties:
        - Arn
        - DomainName
        - DualStackDomainName
        - RegionalDomainName
        - WebsiteURL
      x-required-properties:
        - BucketName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - s3:CreateBucket
          - s3:PutBucketTagging
          - s3:PutAnalyticsConfiguration
          - s3:PutEncryptionConfiguration
          - s3:PutBucketCORS
          - s3:PutInventoryConfiguration
          - s3:PutLifecycleConfiguration
          - s3:PutMetricsConfiguration
          - s3:PutBucketNotification
          - s3:PutBucketReplication
          - s3:PutBucketWebsite
          - s3:PutAccelerateConfiguration
          - s3:PutBucketPublicAccessBlock
          - s3:PutReplicationConfiguration
          - s3:PutObjectAcl
          - s3:PutBucketObjectLockConfiguration
          - s3:GetBucketAcl
          - s3:ListBucket
          - iam:PassRole
          - s3:DeleteObject
          - s3:PutBucketLogging
          - s3:PutBucketVersioning
          - s3:PutObjectLockConfiguration
          - s3:PutBucketOwnershipControls
          - s3:PutIntelligentTieringConfiguration
        read:
          - s3:GetAccelerateConfiguration
          - s3:GetLifecycleConfiguration
          - s3:GetBucketPublicAccessBlock
          - s3:GetAnalyticsConfiguration
          - s3:GetBucketCORS
          - s3:GetEncryptionConfiguration
          - s3:GetInventoryConfiguration
          - s3:GetBucketLogging
          - s3:GetMetricsConfiguration
          - s3:GetBucketNotification
          - s3:GetBucketVersioning
          - s3:GetReplicationConfiguration
          - S3:GetBucketWebsite
          - s3:GetBucketPublicAccessBlock
          - s3:GetBucketObjectLockConfiguration
          - s3:GetBucketTagging
          - s3:GetBucketOwnershipControls
          - s3:GetIntelligentTieringConfiguration
          - s3:ListBucket
        update:
          - s3:PutBucketAcl
          - s3:PutBucketTagging
          - s3:PutAnalyticsConfiguration
          - s3:PutEncryptionConfiguration
          - s3:PutBucketCORS
          - s3:PutInventoryConfiguration
          - s3:PutLifecycleConfiguration
          - s3:PutMetricsConfiguration
          - s3:PutBucketNotification
          - s3:PutBucketReplication
          - s3:PutBucketWebsite
          - s3:PutAccelerateConfiguration
          - s3:PutBucketPublicAccessBlock
          - s3:PutReplicationConfiguration
          - s3:PutBucketOwnershipControls
          - s3:PutIntelligentTieringConfiguration
          - s3:DeleteBucketWebsite
          - s3:PutBucketLogging
          - s3:PutBucketVersioning
          - s3:PutObjectLockConfiguration
          - s3:PutBucketObjectLockConfiguration
          - s3:DeleteBucketAnalyticsConfiguration
          - s3:DeleteBucketCors
          - s3:DeleteBucketMetricsConfiguration
          - s3:DeleteBucketEncryption
          - s3:DeleteBucketLifecycle
          - s3:DeleteBucketReplication
          - iam:PassRole
          - s3:ListBucket
        delete:
          - s3:DeleteBucket
          - s3:ListBucket
        list:
          - s3:ListAllMyBuckets
    BucketPolicy:
      type: object
      properties:
        Bucket:
          description: The name of the Amazon S3 bucket to which the policy applies.
          type: string
        PolicyDocument:
          description: >-
            A policy document containing permissions to add to the specified bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM. For more information, see the AWS::IAM::Policy [PolicyDocument](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policydocument) resource
            description in this guide and [Access Policy Language Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-policy-language-overview.html) in the *Amazon S3 User Guide*.
          type: object
      required:
        - Bucket
        - PolicyDocument
      x-stackql-resource-name: bucket_policy
      description: |-
        Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity other than the root user of the AWS-account that owns the bucket, the calling identity must have the ``PutBucketPolicy`` permissions on the specified bucket and belong to the bucket owner's account in order to use this operation.
         If you don't have ``PutBucketPolicy`` permissions, Amazon S3 returns a ``403 Access Denied`` error. If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns a ``405 Method Not Allowed`` error.
           As a security precaution, the root user of the AWS-account that owns a bucket can always use this operation, even if the policy explicitly denies the root user the ability to perform this action. 
          For more information, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html).
         The following operations are related to ``PutBucketPolicy``:
          +   [CreateBucket](https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html) 
          +   [DeleteBucket](https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html)
      x-type-name: AWS::S3::BucketPolicy
      x-stackql-primary-identifier:
        - Bucket
      x-create-only-properties:
        - Bucket
      x-required-properties:
        - Bucket
        - PolicyDocument
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
        read:
          - s3:GetBucketPolicy
        update:
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
        delete:
          - s3:GetBucketPolicy
          - s3:DeleteBucketPolicy
        list:
          - s3:GetBucketPolicy
          - s3:ListAllMyBuckets
    Region:
      type: object
      properties:
        Bucket:
          type: string
          minLength: 3
          maxLength: 63
          pattern: ^[a-z0-9][a-z0-9//.//-]*[a-z0-9]$
          x-relationshipRef:
            typeName: AWS::S3::Bucket
            propertyPath: /properties/BucketName
        BucketAccountId:
          type: string
          minLength: 12
          maxLength: 12
          pattern: ^[0-9]{12}$
      required:
        - Bucket
      additionalProperties: false
    MultiRegionAccessPoint:
      type: object
      properties:
        Name:
          description: The name you want to assign to this Multi Region Access Point.
          type: string
          pattern: ^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$
          minLength: 3
          maxLength: 50
        Alias:
          description: The alias is a unique identifier to, and is part of the public DNS name for this Multi Region Access Point
          type: string
        CreatedAt:
          description: The timestamp of the when the Multi Region Access Point is created
          type: string
        PublicAccessBlockConfiguration:
          description: The PublicAccessBlock configuration that you want to apply to this Multi Region Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
          $ref: '#/components/schemas/PublicAccessBlockConfiguration'
        Regions:
          description: The list of buckets that you want to associate this Multi Region Access Point with.
          type: array
          uniqueItems: true
          minItems: 1
          items:
            description: The name of the bucket that represents of the region belonging to this Multi Region Access Point.
            $ref: '#/components/schemas/Region'
      required:
        - Regions
      x-stackql-resource-name: multi_region_access_point
      description: AWS::S3::MultiRegionAccessPoint is an Amazon S3 resource type that dynamically routes S3 requests to easily satisfy geographic compliance requirements based on customer-defined routing policies.
      x-type-name: AWS::S3::MultiRegionAccessPoint
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - PublicAccessBlockConfiguration
        - Regions
      x-read-only-properties:
        - Alias
        - CreatedAt
      x-required-properties:
        - Regions
      x-required-permissions:
        create:
          - s3:CreateMultiRegionAccessPoint
          - s3:DescribeMultiRegionAccessPointOperation
          - s3:GetMultiRegionAccessPoint
        read:
          - s3:GetMultiRegionAccessPoint
        delete:
          - s3:DeleteMultiRegionAccessPoint
          - s3:DescribeMultiRegionAccessPointOperation
          - s3:GetMultiRegionAccessPoint
        list:
          - s3:ListMultiRegionAccessPoints
    MultiRegionAccessPointPolicy:
      type: object
      properties:
        MrapName:
          description: The name of the Multi Region Access Point to apply policy
          type: string
          pattern: ^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$
          minLength: 3
          maxLength: 50
        Policy:
          description: Policy document to apply to a Multi Region Access Point
          type: object
        PolicyStatus:
          description: The Policy Status associated with this Multi Region Access Point
          type: object
          properties:
            IsPublic:
              type: string
              description: Specifies whether the policy is public or not.
              enum:
                - 'true'
                - 'false'
          additionalProperties: false
          required:
            - IsPublic
      required:
        - Policy
        - MrapName
      x-stackql-resource-name: multi_region_access_point_policy
      description: The policy to be attached to a Multi Region Access Point
      x-type-name: AWS::S3::MultiRegionAccessPointPolicy
      x-stackql-primary-identifier:
        - MrapName
      x-create-only-properties:
        - MrapName
      x-read-only-properties:
        - PolicyStatus
        - PolicyStatus/IsPublic
      x-required-properties:
        - Policy
        - MrapName
      x-required-permissions:
        update:
          - s3:PutMultiRegionAccessPointPolicy
          - s3:DescribeMultiRegionAccessPointOperation
        read:
          - s3:GetMultiRegionAccessPointPolicy
          - s3:GetMultiRegionAccessPointPolicyStatus
        list: []
        delete:
          - s3:GetMultiRegionAccessPointPolicy
          - s3:GetMultiRegionAccessPoint
        create:
          - s3:PutMultiRegionAccessPointPolicy
          - s3:DescribeMultiRegionAccessPointOperation
    Id:
      description: The ID that identifies the Amazon S3 Storage Lens configuration.
      type: string
      minLength: 1
      maxLength: 64
      pattern: ^[a-zA-Z0-9\-_.]+$
    BucketsAndRegions:
      description: S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
      type: object
      additionalProperties: false
      properties:
        Buckets:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Arn'
        Regions:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            description: An AWS Region.
    AwsOrg:
      description: The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
      type: object
      additionalProperties: false
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
      required:
        - Arn
    ActivityMetrics:
      description: Enables activity metrics.
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether activity metrics are enabled or disabled.
          type: boolean
    AdvancedCostOptimizationMetrics:
      description: Enables advanced cost optimization metrics.
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether advanced cost optimization metrics are enabled or disabled.
          type: boolean
    AdvancedDataProtectionMetrics:
      description: Enables advanced data protection metrics.
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether advanced data protection metrics are enabled or disabled.
          type: boolean
    DetailedStatusCodesMetrics:
      description: Enables detailed status codes metrics.
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether detailed status codes metrics are enabled or disabled.
          type: boolean
    SelectionCriteria:
      description: Selection criteria for prefix-level metrics.
      type: object
      additionalProperties: false
      properties:
        MaxDepth:
          description: Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
          type: integer
        Delimiter:
          description: Delimiter to divide S3 key into hierarchy of prefixes.
          type: string
        MinStorageBytesPercentage:
          description: The minimum storage bytes threshold for the prefixes to be included in the analysis.
          type: number
    PrefixLevelStorageMetrics:
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether prefix-level storage metrics are enabled or disabled.
          type: boolean
        SelectionCriteria:
          $ref: '#/components/schemas/SelectionCriteria'
    PrefixLevel:
      description: Prefix-level metrics configurations.
      type: object
      additionalProperties: false
      properties:
        StorageMetrics:
          $ref: '#/components/schemas/PrefixLevelStorageMetrics'
      required:
        - StorageMetrics
    BucketLevel:
      description: Bucket-level metrics configurations.
      type: object
      additionalProperties: false
      properties:
        ActivityMetrics:
          $ref: '#/components/schemas/ActivityMetrics'
        AdvancedCostOptimizationMetrics:
          $ref: '#/components/schemas/AdvancedCostOptimizationMetrics'
        AdvancedDataProtectionMetrics:
          $ref: '#/components/schemas/AdvancedDataProtectionMetrics'
        DetailedStatusCodesMetrics:
          $ref: '#/components/schemas/DetailedStatusCodesMetrics'
        PrefixLevel:
          $ref: '#/components/schemas/PrefixLevel'
    StorageLensGroupArn:
      description: The ARN for the Amazon S3 Storage Lens Group configuration.
      type: string
    StorageLensGroupSelectionCriteria:
      description: Selection criteria for Storage Lens Group level metrics
      type: object
      additionalProperties: false
      properties:
        Include:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StorageLensGroupArn'
        Exclude:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StorageLensGroupArn'
    StorageLensGroupLevel:
      description: Specifies the details of Amazon S3 Storage Lens Group configuration.
      type: object
      additionalProperties: false
      properties:
        StorageLensGroupSelectionCriteria:
          $ref: '#/components/schemas/StorageLensGroupSelectionCriteria'
    AccountLevel:
      description: Account-level metrics configurations.
      type: object
      additionalProperties: false
      properties:
        ActivityMetrics:
          $ref: '#/components/schemas/ActivityMetrics'
        AdvancedCostOptimizationMetrics:
          $ref: '#/components/schemas/AdvancedCostOptimizationMetrics'
        AdvancedDataProtectionMetrics:
          $ref: '#/components/schemas/AdvancedDataProtectionMetrics'
        DetailedStatusCodesMetrics:
          $ref: '#/components/schemas/DetailedStatusCodesMetrics'
        BucketLevel:
          $ref: '#/components/schemas/BucketLevel'
        StorageLensGroupLevel:
          $ref: '#/components/schemas/StorageLensGroupLevel'
      required:
        - BucketLevel
    SSEKMS:
      description: AWS KMS server-side encryption.
      type: object
      additionalProperties: false
      properties:
        KeyId:
          description: The ARN of the KMS key to use for encryption.
          type: string
      required:
        - KeyId
    Encryption:
      description: Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
      type: object
      oneOf:
        - additionalProperties: false
          properties:
            SSES3:
              description: S3 default server-side encryption.
              type: object
              additionalProperties: false
          required:
            - SSES3
        - additionalProperties: false
          properties:
            SSEKMS:
              $ref: '#/components/schemas/SSEKMS'
          required:
            - SSEKMS
    S3BucketDestination:
      description: S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
      type: object
      additionalProperties: false
      properties:
        OutputSchemaVersion:
          description: The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
          type: string
          enum:
            - V_1
        Format:
          description: Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
          type: string
          enum:
            - CSV
            - Parquet
        AccountId:
          description: The AWS account ID that owns the destination S3 bucket.
          type: string
        Arn:
          description: The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
          type: string
          x-relationshipRef:
            typeName: AWS::S3::Bucket
            propertyPath: /properties/Arn
        Prefix:
          description: The prefix to use for Amazon S3 Storage Lens export.
          type: string
        Encryption:
          $ref: '#/components/schemas/Encryption'
      required:
        - OutputSchemaVersion
        - Format
        - AccountId
        - Arn
    CloudWatchMetrics:
      description: CloudWatch metrics settings for the Amazon S3 Storage Lens metrics export.
      type: object
      additionalProperties: false
      properties:
        IsEnabled:
          description: Specifies whether CloudWatch metrics are enabled or disabled.
          type: boolean
      required:
        - IsEnabled
    StorageLensConfiguration:
      description: Specifies the details of Amazon S3 Storage Lens configuration.
      type: object
      additionalProperties: false
      properties:
        Id:
          $ref: '#/components/schemas/Id'
        Include:
          $ref: '#/components/schemas/BucketsAndRegions'
        Exclude:
          $ref: '#/components/schemas/BucketsAndRegions'
        AwsOrg:
          $ref: '#/components/schemas/AwsOrg'
        AccountLevel:
          $ref: '#/components/schemas/AccountLevel'
        DataExport:
          $ref: '#/components/schemas/DataExport'
        IsEnabled:
          description: Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
          type: boolean
        StorageLensArn:
          description: The ARN for the Amazon S3 Storage Lens configuration.
          type: string
      required:
        - Id
        - AccountLevel
        - IsEnabled
    StorageLens:
      type: object
      properties:
        StorageLensConfiguration:
          $ref: '#/components/schemas/StorageLensConfiguration'
        Tags:
          description: A set of tags (key-value pairs) for this Amazon S3 Storage Lens configuration.
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 50
      required:
        - StorageLensConfiguration
      x-stackql-resource-name: storage_lens
      description: The AWS::S3::StorageLens resource is an Amazon S3 resource type that you can use to create Storage Lens configurations.
      x-type-name: AWS::S3::StorageLens
      x-stackql-primary-identifier:
        - StorageLensConfiguration/Id
      x-create-only-properties:
        - StorageLensConfiguration/Id
      x-read-only-properties:
        - StorageLensConfiguration/StorageLensArn
      x-required-properties:
        - StorageLensConfiguration
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - s3:PutStorageLensConfiguration
          - s3:PutStorageLensConfigurationTagging
          - s3:GetStorageLensConfiguration
          - s3:GetStorageLensConfigurationTagging
          - organizations:DescribeOrganization
          - organizations:ListAccounts
          - organizations:ListAWSServiceAccessForOrganization
          - organizations:ListDelegatedAdministrators
          - iam:CreateServiceLinkedRole
        read:
          - s3:GetStorageLensConfiguration
          - s3:GetStorageLensConfigurationTagging
        update:
          - s3:PutStorageLensConfiguration
          - s3:PutStorageLensConfigurationTagging
          - s3:GetStorageLensConfiguration
          - s3:GetStorageLensConfigurationTagging
          - organizations:DescribeOrganization
          - organizations:ListAccounts
          - organizations:ListAWSServiceAccessForOrganization
          - organizations:ListDelegatedAdministrators
          - iam:CreateServiceLinkedRole
        delete:
          - s3:DeleteStorageLensConfiguration
          - s3:DeleteStorageLensConfigurationTagging
        list:
          - s3:ListStorageLensConfigurations
    Name:
      description: The name that identifies the Amazon S3 Storage Lens Group.
      type: string
      minLength: 1
      maxLength: 64
      pattern: ^[a-zA-Z0-9\-_]+$
    MatchAnyPrefix:
      description: Filter to match any of the specified prefixes.
      type: array
      x-insertionOrder: false
      uniqueItems: true
      items:
        type: string
        maxLength: 1024
    MatchAnySuffix:
      description: Filter to match any of the specified suffixes.
      type: array
      x-insertionOrder: false
      uniqueItems: true
      items:
        type: string
        maxLength: 1024
    MatchAnyTag:
      description: Filter to match any of the specified object tags.
      type: array
      x-insertionOrder: false
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Tag'
    MatchObjectAge:
      description: Filter to match all of the specified values for the minimum and maximum object age.
      type: object
      additionalProperties: false
      properties:
        DaysGreaterThan:
          description: Minimum object age to which the rule applies.
          type: integer
          minimum: 1
        DaysLessThan:
          description: Maximum object age to which the rule applies.
          type: integer
          minimum: 1
    MatchObjectSize:
      description: Filter to match all of the specified values for the minimum and maximum object size.
      type: object
      additionalProperties: false
      properties:
        BytesGreaterThan:
          description: Minimum object size to which the rule applies.
          type: integer
          format: int64
          minimum: 1
        BytesLessThan:
          description: Maximum object size to which the rule applies.
          type: integer
          format: int64
          minimum: 1
    And:
      description: The Storage Lens group will include objects that match all of the specified filter values.
      type: object
      uniqueItems: true
      additionalProperties: false
      minProperties: 2
      properties:
        MatchAnyPrefix:
          $ref: '#/components/schemas/MatchAnyPrefix'
        MatchAnySuffix:
          $ref: '#/components/schemas/MatchAnySuffix'
        MatchAnyTag:
          $ref: '#/components/schemas/MatchAnyTag'
        MatchObjectSize:
          $ref: '#/components/schemas/MatchObjectSize'
        MatchObjectAge:
          $ref: '#/components/schemas/MatchObjectAge'
    Or:
      description: The Storage Lens group will include objects that match any of the specified filter values.
      type: object
      uniqueItems: true
      additionalProperties: false
      minProperties: 2
      properties:
        MatchAnyPrefix:
          $ref: '#/components/schemas/MatchAnyPrefix'
        MatchAnySuffix:
          $ref: '#/components/schemas/MatchAnySuffix'
        MatchAnyTag:
          $ref: '#/components/schemas/MatchAnyTag'
        MatchObjectSize:
          $ref: '#/components/schemas/MatchObjectSize'
        MatchObjectAge:
          $ref: '#/components/schemas/MatchObjectAge'
    Filter:
      description: Sets the Storage Lens Group filter.
      type: object
      properties:
        MatchAnyPrefix:
          $ref: '#/components/schemas/MatchAnyPrefix'
        MatchAnySuffix:
          $ref: '#/components/schemas/MatchAnySuffix'
        MatchAnyTag:
          $ref: '#/components/schemas/MatchAnyTag'
        MatchObjectSize:
          $ref: '#/components/schemas/MatchObjectSize'
        MatchObjectAge:
          $ref: '#/components/schemas/MatchObjectAge'
        And:
          $ref: '#/components/schemas/And'
        Or:
          $ref: '#/components/schemas/Or'
      additionalProperties: false
    StorageLensGroup:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Filter:
          $ref: '#/components/schemas/Filter'
        StorageLensGroupArn:
          description: The ARN for the Amazon S3 Storage Lens Group.
          type: string
        Tags:
          description: A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - Filter
      x-stackql-resource-name: storage_lens_group
      description: The AWS::S3::StorageLensGroup resource is an Amazon S3 resource type that you can use to create Storage Lens Group.
      x-type-name: AWS::S3::StorageLensGroup
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - StorageLensGroupArn
      x-required-properties:
        - Name
        - Filter
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - s3:CreateStorageLensGroup
          - s3:GetStorageLensGroup
          - s3:TagResource
          - s3:ListTagsForResource
        read:
          - s3:GetStorageLensGroup
          - s3:ListTagsForResource
        update:
          - s3:GetStorageLensGroup
          - s3:UpdateStorageLensGroup
          - s3:TagResource
          - s3:UntagResource
          - s3:ListTagsForResource
        delete:
          - s3:DeleteStorageLensGroup
        list:
          - s3:ListStorageLensGroups
    CreateAccessGrantRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessGrantId:
              description: The ID assigned to this access grant.
              type: string
              x-examples:
                - 7c89cbd1-0f4e-40e3-861d-afb906952b77
            AccessGrantsLocationId:
              description: The custom S3 location to be accessed by the grantee
              type: string
              x-examples:
                - 125f332b-a499-4eb6-806f-8a6a1aa4cb96
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
            Permission:
              description: The level of access to be afforded to the grantee
              type: string
              enum:
                - READ
                - WRITE
                - READWRITE
            ApplicationArn:
              description: The ARN of the application grantees will use to access the location
              type: string
            S3PrefixType:
              description: The type of S3SubPrefix.
              type: string
              enum:
                - Object
            GrantScope:
              description: The S3 path of the data to which you are granting access. It is a combination of the S3 path of the registered location and the subprefix.
              type: string
            AccessGrantArn:
              $ref: '#/components/schemas/AccessGrantArn'
              description: The Amazon Resource Name (ARN) of the specified access grant.
              x-examples:
                - arn:aws:s3:us-east-2:111122223333:access-grants/default/grant/7c89cbd1-0f4e-40e3-861d-afb906952b77
            Grantee:
              $ref: '#/components/schemas/Grantee'
              description: The principal who will be granted permission to access S3.
            AccessGrantsLocationConfiguration:
              $ref: '#/components/schemas/AccessGrantsLocationConfiguration'
              description: The configuration options of the grant location, which is the S3 path to the data to which you are granting access.
          x-stackQL-stringOnly: true
      x-title: CreateAccessGrantRequest
      type: object
      required: []
    CreateAccessGrantsInstanceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessGrantsInstanceArn:
              $ref: '#/components/schemas/AccessGrantsInstanceArn'
              description: The Amazon Resource Name (ARN) of the specified Access Grants instance.
              x-examples:
                - arn:aws:s3:us-east-2:479290226168:access-grants/default
            IdentityCenterArn:
              $ref: '#/components/schemas/IdentityCenterArn'
              description: The Amazon Resource Name (ARN) of the specified AWS Identity Center.
              x-examples:
                - arn:aws:sso:::instance/ssoins-6987e6a2fc43873b
            AccessGrantsInstanceId:
              type: string
              description: A unique identifier for the specified access grants instance.
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAccessGrantsInstanceRequest
      type: object
      required: []
    CreateAccessGrantsLocationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessGrantsLocationArn:
              description: The Amazon Resource Name (ARN) of the specified Access Grants location.
              type: string
              x-examples:
                - arn:aws:s3:us-east-2:479290226168:access-grants/default/location/125f332b-a499-4eb6-806f-8a6a1aa4cb96
            AccessGrantsLocationId:
              type: string
              description: The unique identifier for the specified Access Grants location.
            IamRoleArn:
              description: The Amazon Resource Name (ARN) of the access grant location's associated IAM role.
              type: string
              x-examples:
                - arn:aws:iamw::123456789012:role/rolename
            LocationScope:
              type: string
              description: Descriptor for where the location actually points
              x-examples:
                - s3://test-bucket-access-grants-cmh/prefixA
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAccessGrantsLocationRequest
      type: object
      required: []
    CreateAccessPointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The name you want to assign to this Access Point. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the access point name.
              type: string
              pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
              minLength: 3
              maxLength: 50
            Alias:
              description: The alias of this Access Point. This alias can be used for compatibility purposes with other AWS services and third-party applications.
              type: string
              pattern: ^[a-z0-9]([a-z0-9\-]*[a-z0-9])?$
              minLength: 3
              maxLength: 63
            Bucket:
              description: The name of the bucket that you want to associate this Access Point with.
              type: string
              minLength: 3
              maxLength: 255
            BucketAccountId:
              description: The AWS account ID associated with the S3 bucket associated with this access point.
              type: string
              pattern: ^\d{12}$
              maxLength: 64
            VpcConfiguration:
              description: If you include this field, Amazon S3 restricts access to this Access Point to requests from the specified Virtual Private Cloud (VPC).
              $ref: '#/components/schemas/VpcConfiguration'
            PublicAccessBlockConfiguration:
              description: The PublicAccessBlock configuration that you want to apply to this Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
              $ref: '#/components/schemas/PublicAccessBlockConfiguration'
            Policy:
              description: The Access Point Policy you want to apply to this access point.
              type: object
            NetworkOrigin:
              description: Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
              type: string
              enum:
                - Internet
                - VPC
            Arn:
              $ref: '#/components/schemas/Arn'
              description: The Amazon Resource Name (ARN) of the specified accesspoint.
              x-examples:
                - arn:aws:s3:us-west-2:123456789012:accesspoint/test
          x-stackQL-stringOnly: true
      x-title: CreateAccessPointRequest
      type: object
      required: []
    CreateBucketRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccelerateConfiguration:
              $ref: '#/components/schemas/AccelerateConfiguration'
              description: Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.
            AccessControl:
              description: |-
                This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see [Controlling object ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
                  A canned access control list (ACL) that grants predefined permissions to the bucket. For more information about canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.
                  S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring ACLs are uncommon.
                  The majority of access control configurations can be successfully and more easily achieved with bucket policies. For more information, see [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the *Amazon S3 User Guide*.
              enum:
                - AuthenticatedRead
                - AwsExecRead
                - BucketOwnerFullControl
                - BucketOwnerRead
                - LogDeliveryWrite
                - Private
                - PublicRead
                - PublicReadWrite
              type: string
            AnalyticsConfigurations:
              description: Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
              items:
                $ref: '#/components/schemas/AnalyticsConfiguration'
              type: array
              uniqueItems: true
              x-insertionOrder: true
            BucketEncryption:
              $ref: '#/components/schemas/BucketEncryption'
              description: Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
            BucketName:
              description: >-
                A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see [Rules for naming Amazon S3
                buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the *Amazon S3 User Guide*. 
                  If you specify a name, you can't perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you need to replace the resource, specify a new name.
              type: string
            CorsConfiguration:
              $ref: '#/components/schemas/CorsConfiguration'
              description: Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
            IntelligentTieringConfigurations:
              description: Defines how Amazon S3 handles Intelligent-Tiering storage.
              items:
                $ref: '#/components/schemas/IntelligentTieringConfiguration'
              type: array
              uniqueItems: true
              x-insertionOrder: true
            InventoryConfigurations:
              description: Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.
              items:
                $ref: '#/components/schemas/InventoryConfiguration'
              type: array
              uniqueItems: true
              x-insertionOrder: true
            LifecycleConfiguration:
              $ref: '#/components/schemas/LifecycleConfiguration'
              description: Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.
            LoggingConfiguration:
              $ref: '#/components/schemas/LoggingConfiguration'
              description: Settings that define where logs are stored.
            MetricsConfigurations:
              description: Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
              items:
                $ref: '#/components/schemas/MetricsConfiguration'
              type: array
              uniqueItems: true
              x-insertionOrder: true
            NotificationConfiguration:
              $ref: '#/components/schemas/NotificationConfiguration'
              description: Configuration that defines how Amazon S3 handles bucket notifications.
            ObjectLockConfiguration:
              $ref: '#/components/schemas/ObjectLockConfiguration'
              description: |-
                This operation is not supported by directory buckets.
                  Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). 
                   +  The ``DefaultRetention`` settings require both a mode and a period.
                  +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.
                  +  You can enable Object Lock for new or existing buckets. For more information, see [Configuring Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html).
            ObjectLockEnabled:
              description: Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
              type: boolean
            OwnershipControls:
              description: Configuration that defines how Amazon S3 handles Object Ownership rules.
              $ref: '#/components/schemas/OwnershipControls'
            PublicAccessBlockConfiguration:
              $ref: '#/components/schemas/PublicAccessBlockConfiguration'
              description: Configuration that defines how Amazon S3 handles public access.
            ReplicationConfiguration:
              $ref: '#/components/schemas/ReplicationConfiguration'
              description: |-
                Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the ``VersioningConfiguration`` property.
                 Amazon S3 can store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket or buckets must already exist.
            Tags:
              description: An arbitrary set of tags (key-value pairs) for this S3 bucket.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
              type: array
            VersioningConfiguration:
              $ref: '#/components/schemas/VersioningConfiguration'
              description: |-
                Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.
                  When you enable versioning on a bucket for the first time, it might take a short amount of time for the change to be fully propagated. We recommend that you wait for 15 minutes after enabling versioning before issuing write operations (``PUT`` or ``DELETE``) on objects in the bucket.
            WebsiteConfiguration:
              $ref: '#/components/schemas/WebsiteConfiguration'
              description: Information used to configure the bucket as a static website. For more information, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).
            Arn:
              $ref: '#/components/schemas/Arn'
              description: ''
              x-examples:
                - arn:aws:s3:::mybucket
            DomainName:
              description: ''
              x-examples:
                - mystack-mybucket-kdwwxmddtr2g.s3.amazonaws.com
              type: string
            DualStackDomainName:
              description: ''
              x-examples:
                - mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com
              type: string
            RegionalDomainName:
              description: ''
              x-examples:
                - mystack-mybucket-kdwwxmddtr2g.s3.us-east-2.amazonaws.com
              type: string
            WebsiteURL:
              description: ''
              x-examples:
                - 'Example (IPv4): http://mystack-mybucket-kdwwxmddtr2g.s3-website-us-east-2.amazonaws.com/'
                - 'Example (IPv6): http://mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com/'
              format: uri
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateBucketRequest
      type: object
      required: []
    CreateBucketPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Bucket:
              description: The name of the Amazon S3 bucket to which the policy applies.
              type: string
            PolicyDocument:
              description: >-
                A policy document containing permissions to add to the specified bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM. For more information, see the AWS::IAM::Policy [PolicyDocument](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policydocument) resource
                description in this guide and [Access Policy Language Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-policy-language-overview.html) in the *Amazon S3 User Guide*.
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateBucketPolicyRequest
      type: object
      required: []
    CreateMultiRegionAccessPointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: The name you want to assign to this Multi Region Access Point.
              type: string
              pattern: ^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$
              minLength: 3
              maxLength: 50
            Alias:
              description: The alias is a unique identifier to, and is part of the public DNS name for this Multi Region Access Point
              type: string
            CreatedAt:
              description: The timestamp of the when the Multi Region Access Point is created
              type: string
            PublicAccessBlockConfiguration:
              description: The PublicAccessBlock configuration that you want to apply to this Multi Region Access Point. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status 'The Meaning of Public' in the Amazon Simple Storage Service Developer Guide.
              $ref: '#/components/schemas/PublicAccessBlockConfiguration'
            Regions:
              description: The list of buckets that you want to associate this Multi Region Access Point with.
              type: array
              uniqueItems: true
              minItems: 1
              items:
                description: The name of the bucket that represents of the region belonging to this Multi Region Access Point.
                $ref: '#/components/schemas/Region'
          x-stackQL-stringOnly: true
      x-title: CreateMultiRegionAccessPointRequest
      type: object
      required: []
    CreateMultiRegionAccessPointPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            MrapName:
              description: The name of the Multi Region Access Point to apply policy
              type: string
              pattern: ^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$
              minLength: 3
              maxLength: 50
            Policy:
              description: Policy document to apply to a Multi Region Access Point
              type: object
            PolicyStatus:
              description: The Policy Status associated with this Multi Region Access Point
              type: object
              properties:
                IsPublic:
                  type: string
                  description: Specifies whether the policy is public or not.
                  enum:
                    - 'true'
                    - 'false'
              additionalProperties: false
              required:
                - IsPublic
          x-stackQL-stringOnly: true
      x-title: CreateMultiRegionAccessPointPolicyRequest
      type: object
      required: []
    CreateStorageLensRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            StorageLensConfiguration:
              $ref: '#/components/schemas/StorageLensConfiguration'
            Tags:
              description: A set of tags (key-value pairs) for this Amazon S3 Storage Lens configuration.
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 50
          x-stackQL-stringOnly: true
      x-title: CreateStorageLensRequest
      type: object
      required: []
    CreateStorageLensGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              $ref: '#/components/schemas/Name'
            Filter:
              $ref: '#/components/schemas/Filter'
            StorageLensGroupArn:
              description: The ARN for the Amazon S3 Storage Lens Group.
              type: string
            Tags:
              description: A set of tags (key-value pairs) for this Amazon S3 Storage Lens Group.
              type: array
              x-insertionOrder: true
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateStorageLensGroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    access_grants:
      name: access_grants
      id: aws.s3.access_grants
      x-cfn-schema-name: AccessGrant
      x-cfn-type-name: AWS::S3::AccessGrant
      x-identifiers:
        - AccessGrantId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessGrant&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrant"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrant"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrant"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_grants/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_grants/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_grants/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessGrantId') as access_grant_id,
              JSON_EXTRACT(Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Permission') as permission,
              JSON_EXTRACT(Properties, '$.ApplicationArn') as application_arn,
              JSON_EXTRACT(Properties, '$.S3PrefixType') as s3_prefix_type,
              JSON_EXTRACT(Properties, '$.GrantScope') as grant_scope,
              JSON_EXTRACT(Properties, '$.AccessGrantArn') as access_grant_arn,
              JSON_EXTRACT(Properties, '$.Grantee') as grantee,
              JSON_EXTRACT(Properties, '$.AccessGrantsLocationConfiguration') as access_grants_location_configuration
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrant'
              AND data__Identifier = '<AccessGrantId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantId') as access_grant_id,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Permission') as permission,
                JSON_EXTRACT(detail.Properties, '$.ApplicationArn') as application_arn,
                JSON_EXTRACT(detail.Properties, '$.S3PrefixType') as s3_prefix_type,
                JSON_EXTRACT(detail.Properties, '$.GrantScope') as grant_scope,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantArn') as access_grant_arn,
                JSON_EXTRACT(detail.Properties, '$.Grantee') as grantee,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationConfiguration') as access_grants_location_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrant'
                AND detail.data__TypeName = 'AWS::S3::AccessGrant'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessGrantId') as access_grant_id,
                  json_extract_path_text(Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Permission') as permission,
                  json_extract_path_text(Properties, 'ApplicationArn') as application_arn,
                  json_extract_path_text(Properties, 'S3PrefixType') as s3_prefix_type,
                  json_extract_path_text(Properties, 'GrantScope') as grant_scope,
                  json_extract_path_text(Properties, 'AccessGrantArn') as access_grant_arn,
                  json_extract_path_text(Properties, 'Grantee') as grantee,
                  json_extract_path_text(Properties, 'AccessGrantsLocationConfiguration') as access_grants_location_configuration
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrant'
                  AND data__Identifier = '<AccessGrantId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessGrantId') as access_grant_id,
                    json_extract_path_text(detail.Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Permission') as permission,
                    json_extract_path_text(detail.Properties, 'ApplicationArn') as application_arn,
                    json_extract_path_text(detail.Properties, 'S3PrefixType') as s3_prefix_type,
                    json_extract_path_text(detail.Properties, 'GrantScope') as grant_scope,
                    json_extract_path_text(detail.Properties, 'AccessGrantArn') as access_grant_arn,
                    json_extract_path_text(detail.Properties, 'Grantee') as grantee,
                    json_extract_path_text(detail.Properties, 'AccessGrantsLocationConfiguration') as access_grants_location_configuration
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::AccessGrant'
                    AND detail.data__TypeName = 'AWS::S3::AccessGrant'
                    AND listing.region = 'us-east-1'
    access_grants_list_only:
      name: access_grants_list_only
      id: aws.s3.access_grants_list_only
      x-cfn-schema-name: AccessGrant
      x-cfn-type-name: AWS::S3::AccessGrant
      x-identifiers:
        - AccessGrantId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessGrantId') as access_grant_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrant'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessGrantId') as access_grant_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrant'
                AND region = 'us-east-1'
    access_grant_tags:
      name: access_grant_tags
      id: aws.s3.access_grant_tags
      x-cfn-schema-name: AccessGrant
      x-cfn-type-name: AWS::S3::AccessGrant
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantId') as access_grant_id,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
              JSON_EXTRACT(detail.Properties, '$.Permission') as permission,
              JSON_EXTRACT(detail.Properties, '$.ApplicationArn') as application_arn,
              JSON_EXTRACT(detail.Properties, '$.S3PrefixType') as s3_prefix_type,
              JSON_EXTRACT(detail.Properties, '$.GrantScope') as grant_scope,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantArn') as access_grant_arn,
              JSON_EXTRACT(detail.Properties, '$.Grantee') as grantee,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationConfiguration') as access_grants_location_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::AccessGrant'
              AND detail.data__TypeName = 'AWS::S3::AccessGrant'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessGrantId') as access_grant_id,
                json_extract_path_text(detail.Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                json_extract_path_text(detail.Properties, 'Permission') as permission,
                json_extract_path_text(detail.Properties, 'ApplicationArn') as application_arn,
                json_extract_path_text(detail.Properties, 'S3PrefixType') as s3_prefix_type,
                json_extract_path_text(detail.Properties, 'GrantScope') as grant_scope,
                json_extract_path_text(detail.Properties, 'AccessGrantArn') as access_grant_arn,
                json_extract_path_text(detail.Properties, 'Grantee') as grantee,
                json_extract_path_text(detail.Properties, 'AccessGrantsLocationConfiguration') as access_grants_location_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrant'
                AND detail.data__TypeName = 'AWS::S3::AccessGrant'
                AND listing.region = 'us-east-1'
    access_grants_instances:
      name: access_grants_instances
      id: aws.s3.access_grants_instances
      x-cfn-schema-name: AccessGrantsInstance
      x-cfn-type-name: AWS::S3::AccessGrantsInstance
      x-identifiers:
        - AccessGrantsInstanceArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessGrantsInstance&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsInstance"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_grants_instances/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_grants_instances/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_grants_instances/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessGrantsInstanceArn') as access_grants_instance_arn,
              JSON_EXTRACT(Properties, '$.IdentityCenterArn') as identity_center_arn,
              JSON_EXTRACT(Properties, '$.AccessGrantsInstanceId') as access_grants_instance_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrantsInstance'
              AND data__Identifier = '<AccessGrantsInstanceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsInstanceArn') as access_grants_instance_arn,
                JSON_EXTRACT(detail.Properties, '$.IdentityCenterArn') as identity_center_arn,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsInstanceId') as access_grants_instance_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                AND detail.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessGrantsInstanceArn') as access_grants_instance_arn,
                  json_extract_path_text(Properties, 'IdentityCenterArn') as identity_center_arn,
                  json_extract_path_text(Properties, 'AccessGrantsInstanceId') as access_grants_instance_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrantsInstance'
                  AND data__Identifier = '<AccessGrantsInstanceArn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessGrantsInstanceArn') as access_grants_instance_arn,
                    json_extract_path_text(detail.Properties, 'IdentityCenterArn') as identity_center_arn,
                    json_extract_path_text(detail.Properties, 'AccessGrantsInstanceId') as access_grants_instance_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                    AND detail.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                    AND listing.region = 'us-east-1'
    access_grants_instances_list_only:
      name: access_grants_instances_list_only
      id: aws.s3.access_grants_instances_list_only
      x-cfn-schema-name: AccessGrantsInstance
      x-cfn-type-name: AWS::S3::AccessGrantsInstance
      x-identifiers:
        - AccessGrantsInstanceArn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessGrantsInstanceArn') as access_grants_instance_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrantsInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessGrantsInstanceArn') as access_grants_instance_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrantsInstance'
                AND region = 'us-east-1'
    access_grants_instance_tags:
      name: access_grants_instance_tags
      id: aws.s3.access_grants_instance_tags
      x-cfn-schema-name: AccessGrantsInstance
      x-cfn-type-name: AWS::S3::AccessGrantsInstance
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsInstanceArn') as access_grants_instance_arn,
              JSON_EXTRACT(detail.Properties, '$.IdentityCenterArn') as identity_center_arn,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsInstanceId') as access_grants_instance_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsInstance'
              AND detail.data__TypeName = 'AWS::S3::AccessGrantsInstance'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessGrantsInstanceArn') as access_grants_instance_arn,
                json_extract_path_text(detail.Properties, 'IdentityCenterArn') as identity_center_arn,
                json_extract_path_text(detail.Properties, 'AccessGrantsInstanceId') as access_grants_instance_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                AND detail.data__TypeName = 'AWS::S3::AccessGrantsInstance'
                AND listing.region = 'us-east-1'
    access_grants_locations:
      name: access_grants_locations
      id: aws.s3.access_grants_locations
      x-cfn-schema-name: AccessGrantsLocation
      x-cfn-type-name: AWS::S3::AccessGrantsLocation
      x-identifiers:
        - AccessGrantsLocationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessGrantsLocation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessGrantsLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_grants_locations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_grants_locations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_grants_locations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessGrantsLocationArn') as access_grants_location_arn,
              JSON_EXTRACT(Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
              JSON_EXTRACT(Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(Properties, '$.LocationScope') as location_scope,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrantsLocation'
              AND data__Identifier = '<AccessGrantsLocationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationArn') as access_grants_location_arn,
                JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
                JSON_EXTRACT(detail.Properties, '$.IamRoleArn') as iam_role_arn,
                JSON_EXTRACT(detail.Properties, '$.LocationScope') as location_scope,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                AND detail.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessGrantsLocationArn') as access_grants_location_arn,
                  json_extract_path_text(Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                  json_extract_path_text(Properties, 'IamRoleArn') as iam_role_arn,
                  json_extract_path_text(Properties, 'LocationScope') as location_scope,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessGrantsLocation'
                  AND data__Identifier = '<AccessGrantsLocationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessGrantsLocationArn') as access_grants_location_arn,
                    json_extract_path_text(detail.Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                    json_extract_path_text(detail.Properties, 'IamRoleArn') as iam_role_arn,
                    json_extract_path_text(detail.Properties, 'LocationScope') as location_scope,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                    AND detail.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                    AND listing.region = 'us-east-1'
    access_grants_locations_list_only:
      name: access_grants_locations_list_only
      id: aws.s3.access_grants_locations_list_only
      x-cfn-schema-name: AccessGrantsLocation
      x-cfn-type-name: AWS::S3::AccessGrantsLocation
      x-identifiers:
        - AccessGrantsLocationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessGrantsLocationId') as access_grants_location_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrantsLocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessGrantsLocationId') as access_grants_location_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessGrantsLocation'
                AND region = 'us-east-1'
    access_grants_location_tags:
      name: access_grants_location_tags
      id: aws.s3.access_grants_location_tags
      x-cfn-schema-name: AccessGrantsLocation
      x-cfn-type-name: AWS::S3::AccessGrantsLocation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationArn') as access_grants_location_arn,
              JSON_EXTRACT(detail.Properties, '$.AccessGrantsLocationId') as access_grants_location_id,
              JSON_EXTRACT(detail.Properties, '$.IamRoleArn') as iam_role_arn,
              JSON_EXTRACT(detail.Properties, '$.LocationScope') as location_scope
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsLocation'
              AND detail.data__TypeName = 'AWS::S3::AccessGrantsLocation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessGrantsLocationArn') as access_grants_location_arn,
                json_extract_path_text(detail.Properties, 'AccessGrantsLocationId') as access_grants_location_id,
                json_extract_path_text(detail.Properties, 'IamRoleArn') as iam_role_arn,
                json_extract_path_text(detail.Properties, 'LocationScope') as location_scope
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                AND detail.data__TypeName = 'AWS::S3::AccessGrantsLocation'
                AND listing.region = 'us-east-1'
    access_points:
      name: access_points
      id: aws.s3.access_points
      x-cfn-schema-name: AccessPoint
      x-cfn-type-name: AWS::S3::AccessPoint
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessPoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessPoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessPoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::AccessPoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_points/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_points/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_points/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Alias') as alias,
              JSON_EXTRACT(Properties, '$.Bucket') as bucket,
              JSON_EXTRACT(Properties, '$.BucketAccountId') as bucket_account_id,
              JSON_EXTRACT(Properties, '$.VpcConfiguration') as vpc_configuration,
              JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.NetworkOrigin') as network_origin,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessPoint'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Alias') as alias,
                JSON_EXTRACT(detail.Properties, '$.Bucket') as bucket,
                JSON_EXTRACT(detail.Properties, '$.BucketAccountId') as bucket_account_id,
                JSON_EXTRACT(detail.Properties, '$.VpcConfiguration') as vpc_configuration,
                JSON_EXTRACT(detail.Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.NetworkOrigin') as network_origin,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::AccessPoint'
                AND detail.data__TypeName = 'AWS::S3::AccessPoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Alias') as alias,
                  json_extract_path_text(Properties, 'Bucket') as bucket,
                  json_extract_path_text(Properties, 'BucketAccountId') as bucket_account_id,
                  json_extract_path_text(Properties, 'VpcConfiguration') as vpc_configuration,
                  json_extract_path_text(Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'NetworkOrigin') as network_origin,
                  json_extract_path_text(Properties, 'Arn') as arn
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::AccessPoint'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Alias') as alias,
                    json_extract_path_text(detail.Properties, 'Bucket') as bucket,
                    json_extract_path_text(detail.Properties, 'BucketAccountId') as bucket_account_id,
                    json_extract_path_text(detail.Properties, 'VpcConfiguration') as vpc_configuration,
                    json_extract_path_text(detail.Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'NetworkOrigin') as network_origin,
                    json_extract_path_text(detail.Properties, 'Arn') as arn
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::AccessPoint'
                    AND detail.data__TypeName = 'AWS::S3::AccessPoint'
                    AND listing.region = 'us-east-1'
    access_points_list_only:
      name: access_points_list_only
      id: aws.s3.access_points_list_only
      x-cfn-schema-name: AccessPoint
      x-cfn-type-name: AWS::S3::AccessPoint
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessPoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::AccessPoint'
                AND region = 'us-east-1'
    buckets:
      name: buckets
      id: aws.s3.buckets
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::S3::Bucket
      x-identifiers:
        - BucketName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Bucket&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::Bucket"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/buckets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccelerateConfiguration') as accelerate_configuration,
              JSON_EXTRACT(Properties, '$.AccessControl') as access_control,
              JSON_EXTRACT(Properties, '$.AnalyticsConfigurations') as analytics_configurations,
              JSON_EXTRACT(Properties, '$.BucketEncryption') as bucket_encryption,
              JSON_EXTRACT(Properties, '$.BucketName') as bucket_name,
              JSON_EXTRACT(Properties, '$.CorsConfiguration') as cors_configuration,
              JSON_EXTRACT(Properties, '$.IntelligentTieringConfigurations') as intelligent_tiering_configurations,
              JSON_EXTRACT(Properties, '$.InventoryConfigurations') as inventory_configurations,
              JSON_EXTRACT(Properties, '$.LifecycleConfiguration') as lifecycle_configuration,
              JSON_EXTRACT(Properties, '$.LoggingConfiguration') as logging_configuration,
              JSON_EXTRACT(Properties, '$.MetricsConfigurations') as metrics_configurations,
              JSON_EXTRACT(Properties, '$.NotificationConfiguration') as notification_configuration,
              JSON_EXTRACT(Properties, '$.ObjectLockConfiguration') as object_lock_configuration,
              JSON_EXTRACT(Properties, '$.ObjectLockEnabled') as object_lock_enabled,
              JSON_EXTRACT(Properties, '$.OwnershipControls') as ownership_controls,
              JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VersioningConfiguration') as versioning_configuration,
              JSON_EXTRACT(Properties, '$.WebsiteConfiguration') as website_configuration,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DualStackDomainName') as dual_stack_domain_name,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.WebsiteURL') as website_url
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::Bucket'
              AND data__Identifier = '<BucketName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccelerateConfiguration') as accelerate_configuration,
                JSON_EXTRACT(detail.Properties, '$.AccessControl') as access_control,
                JSON_EXTRACT(detail.Properties, '$.AnalyticsConfigurations') as analytics_configurations,
                JSON_EXTRACT(detail.Properties, '$.BucketEncryption') as bucket_encryption,
                JSON_EXTRACT(detail.Properties, '$.BucketName') as bucket_name,
                JSON_EXTRACT(detail.Properties, '$.CorsConfiguration') as cors_configuration,
                JSON_EXTRACT(detail.Properties, '$.IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                JSON_EXTRACT(detail.Properties, '$.InventoryConfigurations') as inventory_configurations,
                JSON_EXTRACT(detail.Properties, '$.LifecycleConfiguration') as lifecycle_configuration,
                JSON_EXTRACT(detail.Properties, '$.LoggingConfiguration') as logging_configuration,
                JSON_EXTRACT(detail.Properties, '$.MetricsConfigurations') as metrics_configurations,
                JSON_EXTRACT(detail.Properties, '$.NotificationConfiguration') as notification_configuration,
                JSON_EXTRACT(detail.Properties, '$.ObjectLockConfiguration') as object_lock_configuration,
                JSON_EXTRACT(detail.Properties, '$.ObjectLockEnabled') as object_lock_enabled,
                JSON_EXTRACT(detail.Properties, '$.OwnershipControls') as ownership_controls,
                JSON_EXTRACT(detail.Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
                JSON_EXTRACT(detail.Properties, '$.ReplicationConfiguration') as replication_configuration,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.VersioningConfiguration') as versioning_configuration,
                JSON_EXTRACT(detail.Properties, '$.WebsiteConfiguration') as website_configuration,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.DualStackDomainName') as dual_stack_domain_name,
                JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
                JSON_EXTRACT(detail.Properties, '$.WebsiteURL') as website_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::Bucket'
                AND detail.data__TypeName = 'AWS::S3::Bucket'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccelerateConfiguration') as accelerate_configuration,
                  json_extract_path_text(Properties, 'AccessControl') as access_control,
                  json_extract_path_text(Properties, 'AnalyticsConfigurations') as analytics_configurations,
                  json_extract_path_text(Properties, 'BucketEncryption') as bucket_encryption,
                  json_extract_path_text(Properties, 'BucketName') as bucket_name,
                  json_extract_path_text(Properties, 'CorsConfiguration') as cors_configuration,
                  json_extract_path_text(Properties, 'IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                  json_extract_path_text(Properties, 'InventoryConfigurations') as inventory_configurations,
                  json_extract_path_text(Properties, 'LifecycleConfiguration') as lifecycle_configuration,
                  json_extract_path_text(Properties, 'LoggingConfiguration') as logging_configuration,
                  json_extract_path_text(Properties, 'MetricsConfigurations') as metrics_configurations,
                  json_extract_path_text(Properties, 'NotificationConfiguration') as notification_configuration,
                  json_extract_path_text(Properties, 'ObjectLockConfiguration') as object_lock_configuration,
                  json_extract_path_text(Properties, 'ObjectLockEnabled') as object_lock_enabled,
                  json_extract_path_text(Properties, 'OwnershipControls') as ownership_controls,
                  json_extract_path_text(Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                  json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'VersioningConfiguration') as versioning_configuration,
                  json_extract_path_text(Properties, 'WebsiteConfiguration') as website_configuration,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'DualStackDomainName') as dual_stack_domain_name,
                  json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                  json_extract_path_text(Properties, 'WebsiteURL') as website_url
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::Bucket'
                  AND data__Identifier = '<BucketName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccelerateConfiguration') as accelerate_configuration,
                    json_extract_path_text(detail.Properties, 'AccessControl') as access_control,
                    json_extract_path_text(detail.Properties, 'AnalyticsConfigurations') as analytics_configurations,
                    json_extract_path_text(detail.Properties, 'BucketEncryption') as bucket_encryption,
                    json_extract_path_text(detail.Properties, 'BucketName') as bucket_name,
                    json_extract_path_text(detail.Properties, 'CorsConfiguration') as cors_configuration,
                    json_extract_path_text(detail.Properties, 'IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                    json_extract_path_text(detail.Properties, 'InventoryConfigurations') as inventory_configurations,
                    json_extract_path_text(detail.Properties, 'LifecycleConfiguration') as lifecycle_configuration,
                    json_extract_path_text(detail.Properties, 'LoggingConfiguration') as logging_configuration,
                    json_extract_path_text(detail.Properties, 'MetricsConfigurations') as metrics_configurations,
                    json_extract_path_text(detail.Properties, 'NotificationConfiguration') as notification_configuration,
                    json_extract_path_text(detail.Properties, 'ObjectLockConfiguration') as object_lock_configuration,
                    json_extract_path_text(detail.Properties, 'ObjectLockEnabled') as object_lock_enabled,
                    json_extract_path_text(detail.Properties, 'OwnershipControls') as ownership_controls,
                    json_extract_path_text(detail.Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                    json_extract_path_text(detail.Properties, 'ReplicationConfiguration') as replication_configuration,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'VersioningConfiguration') as versioning_configuration,
                    json_extract_path_text(detail.Properties, 'WebsiteConfiguration') as website_configuration,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'DualStackDomainName') as dual_stack_domain_name,
                    json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                    json_extract_path_text(detail.Properties, 'WebsiteURL') as website_url
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::Bucket'
                    AND detail.data__TypeName = 'AWS::S3::Bucket'
                    AND listing.region = 'us-east-1'
    buckets_list_only:
      name: buckets_list_only
      id: aws.s3.buckets_list_only
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::S3::Bucket
      x-identifiers:
        - BucketName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BucketName') as bucket_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::Bucket'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BucketName') as bucket_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::Bucket'
                AND region = 'us-east-1'
    bucket_tags:
      name: bucket_tags
      id: aws.s3.bucket_tags
      x-cfn-schema-name: Bucket
      x-cfn-type-name: AWS::S3::Bucket
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccelerateConfiguration') as accelerate_configuration,
              JSON_EXTRACT(detail.Properties, '$.AccessControl') as access_control,
              JSON_EXTRACT(detail.Properties, '$.AnalyticsConfigurations') as analytics_configurations,
              JSON_EXTRACT(detail.Properties, '$.BucketEncryption') as bucket_encryption,
              JSON_EXTRACT(detail.Properties, '$.BucketName') as bucket_name,
              JSON_EXTRACT(detail.Properties, '$.CorsConfiguration') as cors_configuration,
              JSON_EXTRACT(detail.Properties, '$.IntelligentTieringConfigurations') as intelligent_tiering_configurations,
              JSON_EXTRACT(detail.Properties, '$.InventoryConfigurations') as inventory_configurations,
              JSON_EXTRACT(detail.Properties, '$.LifecycleConfiguration') as lifecycle_configuration,
              JSON_EXTRACT(detail.Properties, '$.LoggingConfiguration') as logging_configuration,
              JSON_EXTRACT(detail.Properties, '$.MetricsConfigurations') as metrics_configurations,
              JSON_EXTRACT(detail.Properties, '$.NotificationConfiguration') as notification_configuration,
              JSON_EXTRACT(detail.Properties, '$.ObjectLockConfiguration') as object_lock_configuration,
              JSON_EXTRACT(detail.Properties, '$.ObjectLockEnabled') as object_lock_enabled,
              JSON_EXTRACT(detail.Properties, '$.OwnershipControls') as ownership_controls,
              JSON_EXTRACT(detail.Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
              JSON_EXTRACT(detail.Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(detail.Properties, '$.VersioningConfiguration') as versioning_configuration,
              JSON_EXTRACT(detail.Properties, '$.WebsiteConfiguration') as website_configuration,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.DualStackDomainName') as dual_stack_domain_name,
              JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(detail.Properties, '$.WebsiteURL') as website_url
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::Bucket'
              AND detail.data__TypeName = 'AWS::S3::Bucket'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccelerateConfiguration') as accelerate_configuration,
                json_extract_path_text(detail.Properties, 'AccessControl') as access_control,
                json_extract_path_text(detail.Properties, 'AnalyticsConfigurations') as analytics_configurations,
                json_extract_path_text(detail.Properties, 'BucketEncryption') as bucket_encryption,
                json_extract_path_text(detail.Properties, 'BucketName') as bucket_name,
                json_extract_path_text(detail.Properties, 'CorsConfiguration') as cors_configuration,
                json_extract_path_text(detail.Properties, 'IntelligentTieringConfigurations') as intelligent_tiering_configurations,
                json_extract_path_text(detail.Properties, 'InventoryConfigurations') as inventory_configurations,
                json_extract_path_text(detail.Properties, 'LifecycleConfiguration') as lifecycle_configuration,
                json_extract_path_text(detail.Properties, 'LoggingConfiguration') as logging_configuration,
                json_extract_path_text(detail.Properties, 'MetricsConfigurations') as metrics_configurations,
                json_extract_path_text(detail.Properties, 'NotificationConfiguration') as notification_configuration,
                json_extract_path_text(detail.Properties, 'ObjectLockConfiguration') as object_lock_configuration,
                json_extract_path_text(detail.Properties, 'ObjectLockEnabled') as object_lock_enabled,
                json_extract_path_text(detail.Properties, 'OwnershipControls') as ownership_controls,
                json_extract_path_text(detail.Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                json_extract_path_text(detail.Properties, 'ReplicationConfiguration') as replication_configuration,
                json_extract_path_text(detail.Properties, 'VersioningConfiguration') as versioning_configuration,
                json_extract_path_text(detail.Properties, 'WebsiteConfiguration') as website_configuration,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'DualStackDomainName') as dual_stack_domain_name,
                json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                json_extract_path_text(detail.Properties, 'WebsiteURL') as website_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::Bucket'
                AND detail.data__TypeName = 'AWS::S3::Bucket'
                AND listing.region = 'us-east-1'
    bucket_policies:
      name: bucket_policies
      id: aws.s3.bucket_policies
      x-cfn-schema-name: BucketPolicy
      x-cfn-type-name: AWS::S3::BucketPolicy
      x-identifiers:
        - Bucket
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__BucketPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::BucketPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::BucketPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::BucketPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/bucket_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/bucket_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/bucket_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Bucket') as bucket,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::BucketPolicy'
              AND data__Identifier = '<Bucket>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Bucket') as bucket,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::BucketPolicy'
                AND detail.data__TypeName = 'AWS::S3::BucketPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Bucket') as bucket,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::BucketPolicy'
                  AND data__Identifier = '<Bucket>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Bucket') as bucket,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::BucketPolicy'
                    AND detail.data__TypeName = 'AWS::S3::BucketPolicy'
                    AND listing.region = 'us-east-1'
    bucket_policies_list_only:
      name: bucket_policies_list_only
      id: aws.s3.bucket_policies_list_only
      x-cfn-schema-name: BucketPolicy
      x-cfn-type-name: AWS::S3::BucketPolicy
      x-identifiers:
        - Bucket
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Bucket') as bucket
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::BucketPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Bucket') as bucket
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::BucketPolicy'
                AND region = 'us-east-1'
    multi_region_access_points:
      name: multi_region_access_points
      id: aws.s3.multi_region_access_points
      x-cfn-schema-name: MultiRegionAccessPoint
      x-cfn-type-name: AWS::S3::MultiRegionAccessPoint
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__MultiRegionAccessPoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::MultiRegionAccessPoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::MultiRegionAccessPoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multi_region_access_points/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multi_region_access_points/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Alias') as alias,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
              JSON_EXTRACT(Properties, '$.Regions') as regions
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Alias') as alias,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.PublicAccessBlockConfiguration') as public_access_block_configuration,
                JSON_EXTRACT(detail.Properties, '$.Regions') as regions
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                AND detail.data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Alias') as alias,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                  json_extract_path_text(Properties, 'Regions') as regions
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Alias') as alias,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'PublicAccessBlockConfiguration') as public_access_block_configuration,
                    json_extract_path_text(detail.Properties, 'Regions') as regions
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                    AND detail.data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                    AND listing.region = 'us-east-1'
    multi_region_access_points_list_only:
      name: multi_region_access_points_list_only
      id: aws.s3.multi_region_access_points_list_only
      x-cfn-schema-name: MultiRegionAccessPoint
      x-cfn-type-name: AWS::S3::MultiRegionAccessPoint
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPoint'
                AND region = 'us-east-1'
    multi_region_access_point_policies:
      name: multi_region_access_point_policies
      id: aws.s3.multi_region_access_point_policies
      x-cfn-schema-name: MultiRegionAccessPointPolicy
      x-cfn-type-name: AWS::S3::MultiRegionAccessPointPolicy
      x-identifiers:
        - MrapName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__MultiRegionAccessPointPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::MultiRegionAccessPointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::MultiRegionAccessPointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::MultiRegionAccessPointPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/multi_region_access_point_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/multi_region_access_point_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/multi_region_access_point_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MrapName') as mrap_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.PolicyStatus') as policy_status
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPointPolicy'
              AND data__Identifier = '<MrapName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MrapName') as mrap_name,
                json_extract_path_text(Properties, 'Policy') as policy,
                json_extract_path_text(Properties, 'PolicyStatus') as policy_status
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::MultiRegionAccessPointPolicy'
                AND data__Identifier = '<MrapName>'
                AND region = 'us-east-1'
    storage_lens:
      name: storage_lens
      id: aws.s3.storage_lens
      x-cfn-schema-name: StorageLens
      x-cfn-type-name: AWS::S3::StorageLens
      x-identifiers:
        - StorageLensConfiguration/Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__StorageLens&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLens"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLens"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLens"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/storage_lens/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/storage_lens/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/storage_lens/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.StorageLensConfiguration') as storage_lens_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::StorageLens'
              AND data__Identifier = '<StorageLensConfiguration/Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.StorageLensConfiguration') as storage_lens_configuration,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::StorageLens'
                AND detail.data__TypeName = 'AWS::S3::StorageLens'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'StorageLensConfiguration') as storage_lens_configuration,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::StorageLens'
                  AND data__Identifier = '<StorageLensConfiguration/Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'StorageLensConfiguration') as storage_lens_configuration,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::StorageLens'
                    AND detail.data__TypeName = 'AWS::S3::StorageLens'
                    AND listing.region = 'us-east-1'
    storage_lens_list_only:
      name: storage_lens_list_only
      id: aws.s3.storage_lens_list_only
      x-cfn-schema-name: StorageLens
      x-cfn-type-name: AWS::S3::StorageLens
      x-identifiers:
        - StorageLensConfiguration/Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StorageLensConfiguration.Id') as storage_lens_configuration__id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::StorageLens'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StorageLensConfiguration', 'Id') as storage_lens_configuration__id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::StorageLens'
                AND region = 'us-east-1'
    storage_lens_tags:
      name: storage_lens_tags
      id: aws.s3.storage_lens_tags
      x-cfn-schema-name: StorageLens
      x-cfn-type-name: AWS::S3::StorageLens
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.StorageLensConfiguration') as storage_lens_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::StorageLens'
              AND detail.data__TypeName = 'AWS::S3::StorageLens'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'StorageLensConfiguration') as storage_lens_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::StorageLens'
                AND detail.data__TypeName = 'AWS::S3::StorageLens'
                AND listing.region = 'us-east-1'
    storage_lens_groups:
      name: storage_lens_groups
      id: aws.s3.storage_lens_groups
      x-cfn-schema-name: StorageLensGroup
      x-cfn-type-name: AWS::S3::StorageLensGroup
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__StorageLensGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLensGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLensGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::S3::StorageLensGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/storage_lens_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/storage_lens_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/storage_lens_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Filter') as filter,
              JSON_EXTRACT(Properties, '$.StorageLensGroupArn') as storage_lens_group_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::StorageLensGroup'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Filter') as filter,
                JSON_EXTRACT(detail.Properties, '$.StorageLensGroupArn') as storage_lens_group_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::S3::StorageLensGroup'
                AND detail.data__TypeName = 'AWS::S3::StorageLensGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Filter') as filter,
                  json_extract_path_text(Properties, 'StorageLensGroupArn') as storage_lens_group_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::S3::StorageLensGroup'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Filter') as filter,
                    json_extract_path_text(detail.Properties, 'StorageLensGroupArn') as storage_lens_group_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::S3::StorageLensGroup'
                    AND detail.data__TypeName = 'AWS::S3::StorageLensGroup'
                    AND listing.region = 'us-east-1'
    storage_lens_groups_list_only:
      name: storage_lens_groups_list_only
      id: aws.s3.storage_lens_groups_list_only
      x-cfn-schema-name: StorageLensGroup
      x-cfn-type-name: AWS::S3::StorageLensGroup
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::StorageLensGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::S3::StorageLensGroup'
                AND region = 'us-east-1'
    storage_lens_group_tags:
      name: storage_lens_group_tags
      id: aws.s3.storage_lens_group_tags
      x-cfn-schema-name: StorageLensGroup
      x-cfn-type-name: AWS::S3::StorageLensGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Filter') as filter,
              JSON_EXTRACT(detail.Properties, '$.StorageLensGroupArn') as storage_lens_group_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::S3::StorageLensGroup'
              AND detail.data__TypeName = 'AWS::S3::StorageLensGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Filter') as filter,
                json_extract_path_text(detail.Properties, 'StorageLensGroupArn') as storage_lens_group_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::S3::StorageLensGroup'
                AND detail.data__TypeName = 'AWS::S3::StorageLensGroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessGrant&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessGrant
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessGrantRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessGrantsInstance&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessGrantsInstance
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessGrantsInstanceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessGrantsLocation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessGrantsLocation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessGrantsLocationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessPoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessPoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessPointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Bucket&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBucket
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBucketRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__BucketPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateBucketPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateBucketPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__MultiRegionAccessPoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiRegionAccessPoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiRegionAccessPointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__MultiRegionAccessPointPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateMultiRegionAccessPointPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateMultiRegionAccessPointPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__StorageLens&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStorageLens
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStorageLensRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__StorageLensGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStorageLensGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStorageLensGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
