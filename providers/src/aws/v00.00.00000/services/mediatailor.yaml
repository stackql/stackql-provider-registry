openapi: 3.0.0
info:
  title: MediaTailor
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    DashPlaylistSettings:
      type: object
      description: <p>Dash manifest configuration parameters.</p>
      properties:
        ManifestWindowSeconds:
          type: number
          description: '<p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>'
        MinBufferTimeSeconds:
          type: number
          description: '<p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>'
        MinUpdatePeriodSeconds:
          type: number
          description: '<p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>'
        SuggestedPresentationDelaySeconds:
          type: number
          description: '<p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>'
      additionalProperties: false
    HlsPlaylistSettings:
      type: object
      description: <p>HLS playlist configuration parameters.</p>
      properties:
        ManifestWindowSeconds:
          type: number
          description: '<p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>'
        AdMarkupType:
          type: array
          items:
            $ref: '#/components/schemas/AdMarkupType'
          description: <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
      additionalProperties: false
    LogConfigurationForChannel:
      type: object
      description: <p>The log configuration for the channel.</p>
      properties:
        LogTypes:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LogType'
          description: <p>The log types.</p>
      additionalProperties: false
    LogType:
      type: string
      enum:
        - AS_RUN
    PlaybackMode:
      type: string
      enum:
        - LOOP
        - LINEAR
    AdMarkupType:
      type: string
      enum:
        - DATERANGE
        - SCTE35_ENHANCED
    RequestOutputItem:
      type: object
      description: <p>The output configuration for this channel.</p>
      properties:
        DashPlaylistSettings:
          $ref: '#/components/schemas/DashPlaylistSettings'
        HlsPlaylistSettings:
          $ref: '#/components/schemas/HlsPlaylistSettings'
        ManifestName:
          type: string
          description: <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
        SourceGroup:
          type: string
          description: <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
      required:
        - ManifestName
        - SourceGroup
      additionalProperties: false
    SlateSource:
      type: object
      description: <p>Slate VOD source configuration.</p>
      properties:
        SourceLocationName:
          type: string
          description: <p>The name of the source location where the slate VOD source is stored.</p>
        VodSourceName:
          type: string
          description: <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
      additionalProperties: false
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    Tier:
      type: string
      enum:
        - BASIC
        - STANDARD
    TimeShiftConfiguration:
      type: object
      description: <p>The configuration for time-shifted viewing.</p>
      properties:
        MaxTimeDelaySeconds:
          type: number
          description: <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
      required:
        - MaxTimeDelaySeconds
      additionalProperties: false
    Channel:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The ARN of the channel.</p>
        Audiences:
          type: array
          items:
            type: string
          description: <p>The list of audiences defined in channel.</p>
        ChannelName:
          type: string
        FillerSlate:
          $ref: '#/components/schemas/SlateSource'
        LogConfiguration:
          $ref: '#/components/schemas/LogConfigurationForChannel'
        Outputs:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RequestOutputItem'
          description: <p>The channel's output properties.</p>
        PlaybackMode:
          $ref: '#/components/schemas/PlaybackMode'
        Tags:
          description: The tags to assign to the channel.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Tier:
          $ref: '#/components/schemas/Tier'
        TimeShiftConfiguration:
          $ref: '#/components/schemas/TimeShiftConfiguration'
      required:
        - ChannelName
        - Outputs
        - PlaybackMode
      x-stackql-resource-name: channel
      description: Definition of AWS::MediaTailor::Channel Resource Type
      x-type-name: AWS::MediaTailor::Channel
      x-stackql-primary-identifier:
        - ChannelName
      x-create-only-properties:
        - ChannelName
        - Tier
      x-write-only-properties:
        - Outputs
      x-read-only-properties:
        - Arn
      x-required-properties:
        - ChannelName
        - Outputs
        - PlaybackMode
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediatailor:CreateChannel
          - mediatailor:TagResource
          - mediatailor:ConfigureLogsForChannel
          - iam:CreateServiceLinkedRole
          - mediatailor:DescribeChannel
        read:
          - mediatailor:DescribeChannel
        update:
          - mediatailor:UpdateChannel
          - mediatailor:TagResource
          - mediatailor:UntagResource
          - iam:CreateServiceLinkedRole
          - mediatailor:ConfigureLogsForChannel
          - mediatailor:DescribeChannel
        delete:
          - mediatailor:DeleteChannel
          - mediatailor:DescribeChannel
        list:
          - mediatailor:ListChannels
    ChannelPolicy:
      type: object
      properties:
        ChannelName:
          type: string
        Policy:
          type: object
          description: <p>The IAM policy for the channel. IAM policies are used to control access to your channel.</p>
      required:
        - ChannelName
        - Policy
      x-stackql-resource-name: channel_policy
      description: Definition of AWS::MediaTailor::ChannelPolicy Resource Type
      x-type-name: AWS::MediaTailor::ChannelPolicy
      x-stackql-primary-identifier:
        - ChannelName
      x-create-only-properties:
        - ChannelName
      x-required-properties:
        - ChannelName
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - mediatailor:PutChannelPolicy
          - mediatailor:GetChannelPolicy
        read:
          - mediatailor:GetChannelPolicy
        update:
          - mediatailor:PutChannelPolicy
          - mediatailor:GetChannelPolicy
        delete:
          - mediatailor:DeleteChannelPolicy
          - mediatailor:GetChannelPolicy
    HttpPackageConfiguration:
      type: object
      description: <p>The HTTP package configuration properties for the requested VOD source.</p>
      properties:
        Path:
          type: string
          description: <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
        SourceGroup:
          type: string
          description: <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
        Type:
          $ref: '#/components/schemas/Type'
      required:
        - Path
        - SourceGroup
        - Type
      additionalProperties: false
    Type:
      type: string
      enum:
        - DASH
        - HLS
    LiveSource:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The ARN of the live source.</p>
        HttpPackageConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/HttpPackageConfiguration'
          description: <p>A list of HTTP package configuration parameters for this live source.</p>
        LiveSourceName:
          type: string
        SourceLocationName:
          type: string
        Tags:
          description: The tags to assign to the live source.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - HttpPackageConfigurations
        - LiveSourceName
        - SourceLocationName
      x-stackql-resource-name: live_source
      description: Definition of AWS::MediaTailor::LiveSource Resource Type
      x-type-name: AWS::MediaTailor::LiveSource
      x-stackql-primary-identifier:
        - LiveSourceName
        - SourceLocationName
      x-create-only-properties:
        - LiveSourceName
        - SourceLocationName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - HttpPackageConfigurations
        - LiveSourceName
        - SourceLocationName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediatailor:CreateLiveSource
          - mediatailor:DescribeLiveSource
          - mediatailor:TagResource
        read:
          - mediatailor:DescribeLiveSource
        update:
          - mediatailor:UpdateLiveSource
          - mediatailor:DescribeLiveSource
          - mediatailor:TagResource
          - mediatailor:UntagResource
        delete:
          - mediatailor:DeleteLiveSource
          - mediatailor:DescribeLiveSource
        list:
          - mediatailor:ListLiveSources
    AvailSuppression:
      description: The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
      type: object
      additionalProperties: false
      properties:
        Mode:
          description: Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window. When Mode is set to AFTER_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks that are within the live edge plus the avail suppression value.
          type: string
          enum:
            - 'OFF'
            - BEHIND_LIVE_EDGE
            - AFTER_LIVE_EDGE
        Value:
          description: >-
            A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the
            live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
          type: string
        FillPolicy:
          description: Defines the policy to apply to the avail suppression mode. BEHIND_LIVE_EDGE will always use the full avail suppression policy. AFTER_LIVE_EDGE mode can be used to invoke partial ad break fills when a session starts mid-break. Valid values are FULL_AVAIL_ONLY and PARTIAL_AVAIL
          type: string
          enum:
            - PARTIAL_AVAIL
            - FULL_AVAIL_ONLY
    Bumper:
      description: The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
      type: object
      additionalProperties: false
      properties:
        StartUrl:
          description: The URL for the start bumper asset.
          type: string
        EndUrl:
          description: The URL for the end bumper asset.
          type: string
    CdnConfiguration:
      description: The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
      type: object
      additionalProperties: false
      properties:
        AdSegmentUrlPrefix:
          description: A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
          type: string
        ContentSegmentUrlPrefix:
          description: A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
          type: string
    ConfigurationAliases:
      description: The predefined aliases for dynamic variables.
      additionalProperties: false
      x-patternProperties:
        player_params\.\w+\Z:
          type: object
    DashConfiguration:
      description: The configuration for DASH PUT operations.
      type: object
      additionalProperties: false
      properties:
        MpdLocation:
          description: >-
            The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables
            the inclusion of the tag and is the default value.
          type: string
        OriginManifestType:
          description: The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
          type: string
          enum:
            - SINGLE_PERIOD
            - MULTI_PERIOD
        ManifestEndpointPrefix:
          description: The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
          type: string
    LivePreRollConfiguration:
      description: The configuration for pre-roll ad insertion.
      type: object
      additionalProperties: false
      properties:
        AdDecisionServerUrl:
          description: The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
          type: string
        MaxDurationSeconds:
          description: The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
          type: integer
    ManifestProcessingRules:
      description: The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
      type: object
      additionalProperties: false
      properties:
        AdMarkerPassthrough:
          description: For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
          $ref: '#/components/schemas/AdMarkerPassthrough'
    AdMarkerPassthrough:
      description: For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
      type: object
      additionalProperties: false
      properties:
        Enabled:
          description: Enables ad marker passthrough for your configuration.
          type: boolean
    HlsConfiguration:
      type: object
      additionalProperties: false
      properties:
        ManifestEndpointPrefix:
          description: The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
          type: string
    PlaybackConfiguration:
      type: object
      properties:
        AdDecisionServerUrl:
          description: The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
          type: string
        AvailSuppression:
          description: The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
          $ref: '#/components/schemas/AvailSuppression'
        Bumper:
          description: The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
          $ref: '#/components/schemas/Bumper'
        CdnConfiguration:
          description: The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
          $ref: '#/components/schemas/CdnConfiguration'
        ConfigurationAliases:
          description: 'The player parameters and aliases used as dynamic variables during session initialization. For more information, see Domain Variables. '
          $ref: '#/components/schemas/ConfigurationAliases'
        DashConfiguration:
          description: The configuration for DASH content.
          $ref: '#/components/schemas/DashConfiguration'
        LivePreRollConfiguration:
          description: The configuration for pre-roll ad insertion.
          $ref: '#/components/schemas/LivePreRollConfiguration'
        ManifestProcessingRules:
          description: The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
          $ref: '#/components/schemas/ManifestProcessingRules'
        Name:
          description: The identifier for the playback configuration.
          type: string
          pattern: ^[a-zA-Z0-9_-]+$
          maxLength: 64
          minLength: 1
        PersonalizationThresholdSeconds:
          description: >-
            Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to ad replacement in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see
            Ad Behavior in AWS Elemental MediaTailor (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
          type: integer
        SessionInitializationEndpointPrefix:
          description: The URL that the player uses to initialize a session that uses client-side reporting.
          type: string
        HlsConfiguration:
          description: The configuration for HLS content.
          $ref: '#/components/schemas/HlsConfiguration'
        PlaybackConfigurationArn:
          description: The Amazon Resource Name (ARN) for the playback configuration.
          type: string
        PlaybackEndpointPrefix:
          description: The URL that the player accesses to get a manifest from MediaTailor. This session will use server-side reporting.
          type: string
        SlateAdUrl:
          description: The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
          type: string
        Tags:
          description: The tags to assign to the playback configuration.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TranscodeProfileName:
          description: The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
          type: string
        VideoContentSourceUrl:
          description: The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
          type: string
      required:
        - Name
        - VideoContentSourceUrl
        - AdDecisionServerUrl
      x-stackql-resource-name: playback_configuration
      description: Resource schema for AWS::MediaTailor::PlaybackConfiguration
      x-type-name: AWS::MediaTailor::PlaybackConfiguration
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - SessionInitializationEndpointPrefix
        - HlsConfiguration/ManifestEndpointPrefix
        - DashConfiguration/ManifestEndpointPrefix
        - PlaybackConfigurationArn
        - PlaybackEndpointPrefix
      x-required-properties:
        - Name
        - VideoContentSourceUrl
        - AdDecisionServerUrl
      x-tagging:
        taggable: true
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - mediatailor:PutPlaybackConfiguration
          - mediatailor:ConfigureLogsForPlaybackConfiguration
          - iam:CreateServiceLinkedRole
          - mediatailor:UntagResource
          - mediatailor:TagResource
        read:
          - mediatailor:GetPlaybackConfiguration
        update:
          - mediatailor:PutPlaybackConfiguration
          - mediatailor:ConfigureLogsForPlaybackConfiguration
          - iam:CreateServiceLinkedRole
          - mediatailor:UntagResource
          - mediatailor:TagResource
        delete:
          - mediatailor:DeletePlaybackConfiguration
        list:
          - mediatailor:ListPlaybackConfigurations
    AccessConfiguration:
      type: object
      description: <p>Access configuration parameters.</p>
      properties:
        AccessType:
          $ref: '#/components/schemas/AccessType'
        SecretsManagerAccessTokenConfiguration:
          $ref: '#/components/schemas/SecretsManagerAccessTokenConfiguration'
      additionalProperties: false
    AccessType:
      type: string
      enum:
        - S3_SIGV4
        - SECRETS_MANAGER_ACCESS_TOKEN
        - AUTODETECT_SIGV4
    DefaultSegmentDeliveryConfiguration:
      type: object
      description: <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
      properties:
        BaseUrl:
          type: string
          description: <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
      additionalProperties: false
    HttpConfiguration:
      type: object
      description: <p>The HTTP configuration for the source location.</p>
      properties:
        BaseUrl:
          type: string
          description: <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
      required:
        - BaseUrl
      additionalProperties: false
    SecretsManagerAccessTokenConfiguration:
      type: object
      description: <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
      properties:
        HeaderName:
          type: string
          description: <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
        SecretArn:
          type: string
          description: <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
        SecretStringKey:
          type: string
          description: <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
      additionalProperties: false
    SegmentDeliveryConfiguration:
      type: object
      description: <p>The segment delivery configuration settings.</p>
      properties:
        BaseUrl:
          type: string
          description: <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
        Name:
          type: string
          description: <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
      additionalProperties: false
    SourceLocation:
      type: object
      properties:
        AccessConfiguration:
          $ref: '#/components/schemas/AccessConfiguration'
        Arn:
          type: string
          description: <p>The ARN of the source location.</p>
        DefaultSegmentDeliveryConfiguration:
          $ref: '#/components/schemas/DefaultSegmentDeliveryConfiguration'
        HttpConfiguration:
          $ref: '#/components/schemas/HttpConfiguration'
        SegmentDeliveryConfigurations:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SegmentDeliveryConfiguration'
          description: <p>A list of the segment delivery configurations associated with this resource.</p>
        SourceLocationName:
          type: string
        Tags:
          description: The tags to assign to the source location.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - HttpConfiguration
        - SourceLocationName
      x-stackql-resource-name: source_location
      description: Definition of AWS::MediaTailor::SourceLocation Resource Type
      x-type-name: AWS::MediaTailor::SourceLocation
      x-stackql-primary-identifier:
        - SourceLocationName
      x-create-only-properties:
        - SourceLocationName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - HttpConfiguration
        - SourceLocationName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediatailor:CreateSourceLocation
          - mediatailor:DescribeSourceLocation
          - mediatailor:TagResource
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          - kms:CreateGrant
        read:
          - mediatailor:DescribeSourceLocation
        update:
          - mediatailor:DescribeSourceLocation
          - mediatailor:TagResource
          - mediatailor:UntagResource
          - mediatailor:UpdateSourceLocation
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          - kms:CreateGrant
        delete:
          - mediatailor:DeleteSourceLocation
          - mediatailor:DescribeSourceLocation
        list:
          - mediatailor:ListSourceLocations
    VodSource:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The ARN of the VOD source.</p>
        HttpPackageConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/HttpPackageConfiguration'
          description: <p>A list of HTTP package configuration parameters for this VOD source.</p>
        SourceLocationName:
          type: string
        Tags:
          description: The tags to assign to the VOD source.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        VodSourceName:
          type: string
      required:
        - HttpPackageConfigurations
        - SourceLocationName
        - VodSourceName
      x-stackql-resource-name: vod_source
      description: Definition of AWS::MediaTailor::VodSource Resource Type
      x-type-name: AWS::MediaTailor::VodSource
      x-stackql-primary-identifier:
        - SourceLocationName
        - VodSourceName
      x-create-only-properties:
        - SourceLocationName
        - VodSourceName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - HttpPackageConfigurations
        - SourceLocationName
        - VodSourceName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - mediatailor:CreateVodSource
          - mediatailor:DescribeVodSource
          - mediatailor:TagResource
        read:
          - mediatailor:DescribeVodSource
        update:
          - mediatailor:DescribeVodSource
          - mediatailor:TagResource
          - mediatailor:UntagResource
          - mediatailor:UpdateVodSource
        delete:
          - mediatailor:DeleteVodSource
          - mediatailor:DescribeVodSource
        list:
          - mediatailor:ListVodSources
    CreateChannelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The ARN of the channel.</p>
            Audiences:
              type: array
              items:
                type: string
              description: <p>The list of audiences defined in channel.</p>
            ChannelName:
              type: string
            FillerSlate:
              $ref: '#/components/schemas/SlateSource'
            LogConfiguration:
              $ref: '#/components/schemas/LogConfigurationForChannel'
            Outputs:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/RequestOutputItem'
              description: <p>The channel's output properties.</p>
            PlaybackMode:
              $ref: '#/components/schemas/PlaybackMode'
            Tags:
              description: The tags to assign to the channel.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            Tier:
              $ref: '#/components/schemas/Tier'
            TimeShiftConfiguration:
              $ref: '#/components/schemas/TimeShiftConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreateChannelRequest
      type: object
      required: []
    CreateChannelPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ChannelName:
              type: string
            Policy:
              type: object
              description: <p>The IAM policy for the channel. IAM policies are used to control access to your channel.</p>
          x-stackQL-stringOnly: true
      x-title: CreateChannelPolicyRequest
      type: object
      required: []
    CreateLiveSourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The ARN of the live source.</p>
            HttpPackageConfigurations:
              type: array
              items:
                $ref: '#/components/schemas/HttpPackageConfiguration'
              description: <p>A list of HTTP package configuration parameters for this live source.</p>
            LiveSourceName:
              type: string
            SourceLocationName:
              type: string
            Tags:
              description: The tags to assign to the live source.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateLiveSourceRequest
      type: object
      required: []
    CreatePlaybackConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AdDecisionServerUrl:
              description: The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.
              type: string
            AvailSuppression:
              description: The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
              $ref: '#/components/schemas/AvailSuppression'
            Bumper:
              description: The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
              $ref: '#/components/schemas/Bumper'
            CdnConfiguration:
              description: The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
              $ref: '#/components/schemas/CdnConfiguration'
            ConfigurationAliases:
              description: 'The player parameters and aliases used as dynamic variables during session initialization. For more information, see Domain Variables. '
              $ref: '#/components/schemas/ConfigurationAliases'
            DashConfiguration:
              description: The configuration for DASH content.
              $ref: '#/components/schemas/DashConfiguration'
            LivePreRollConfiguration:
              description: The configuration for pre-roll ad insertion.
              $ref: '#/components/schemas/LivePreRollConfiguration'
            ManifestProcessingRules:
              description: The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
              $ref: '#/components/schemas/ManifestProcessingRules'
            Name:
              description: The identifier for the playback configuration.
              type: string
              pattern: ^[a-zA-Z0-9_-]+$
              maxLength: 64
              minLength: 1
            PersonalizationThresholdSeconds:
              description: >-
                Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to ad replacement in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion,
                see Ad Behavior in AWS Elemental MediaTailor (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
              type: integer
            SessionInitializationEndpointPrefix:
              description: The URL that the player uses to initialize a session that uses client-side reporting.
              type: string
            HlsConfiguration:
              description: The configuration for HLS content.
              $ref: '#/components/schemas/HlsConfiguration'
            PlaybackConfigurationArn:
              description: The Amazon Resource Name (ARN) for the playback configuration.
              type: string
            PlaybackEndpointPrefix:
              description: The URL that the player accesses to get a manifest from MediaTailor. This session will use server-side reporting.
              type: string
            SlateAdUrl:
              description: The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.
              type: string
            Tags:
              description: The tags to assign to the playback configuration.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            TranscodeProfileName:
              description: The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.
              type: string
            VideoContentSourceUrl:
              description: The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreatePlaybackConfigurationRequest
      type: object
      required: []
    CreateSourceLocationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessConfiguration:
              $ref: '#/components/schemas/AccessConfiguration'
            Arn:
              type: string
              description: <p>The ARN of the source location.</p>
            DefaultSegmentDeliveryConfiguration:
              $ref: '#/components/schemas/DefaultSegmentDeliveryConfiguration'
            HttpConfiguration:
              $ref: '#/components/schemas/HttpConfiguration'
            SegmentDeliveryConfigurations:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SegmentDeliveryConfiguration'
              description: <p>A list of the segment delivery configurations associated with this resource.</p>
            SourceLocationName:
              type: string
            Tags:
              description: The tags to assign to the source location.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateSourceLocationRequest
      type: object
      required: []
    CreateVodSourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: <p>The ARN of the VOD source.</p>
            HttpPackageConfigurations:
              type: array
              items:
                $ref: '#/components/schemas/HttpPackageConfiguration'
              description: <p>A list of HTTP package configuration parameters for this VOD source.</p>
            SourceLocationName:
              type: string
            Tags:
              description: The tags to assign to the VOD source.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
            VodSourceName:
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateVodSourceRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    channels:
      name: channels
      id: aws.mediatailor.channels
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaTailor::Channel
      x-identifiers:
        - ChannelName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::Channel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channels/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channels/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channels/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Audiences') as audiences,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.FillerSlate') as filler_slate,
              JSON_EXTRACT(Properties, '$.LogConfiguration') as log_configuration,
              JSON_EXTRACT(Properties, '$.Outputs') as outputs,
              JSON_EXTRACT(Properties, '$.PlaybackMode') as playback_mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Tier') as tier,
              JSON_EXTRACT(Properties, '$.TimeShiftConfiguration') as time_shift_configuration
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::Channel'
              AND data__Identifier = '<ChannelName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Audiences') as audiences,
                JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
                JSON_EXTRACT(detail.Properties, '$.FillerSlate') as filler_slate,
                JSON_EXTRACT(detail.Properties, '$.LogConfiguration') as log_configuration,
                JSON_EXTRACT(detail.Properties, '$.Outputs') as outputs,
                JSON_EXTRACT(detail.Properties, '$.PlaybackMode') as playback_mode,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
                JSON_EXTRACT(detail.Properties, '$.TimeShiftConfiguration') as time_shift_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaTailor::Channel'
                AND detail.data__TypeName = 'AWS::MediaTailor::Channel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Audiences') as audiences,
                  json_extract_path_text(Properties, 'ChannelName') as channel_name,
                  json_extract_path_text(Properties, 'FillerSlate') as filler_slate,
                  json_extract_path_text(Properties, 'LogConfiguration') as log_configuration,
                  json_extract_path_text(Properties, 'Outputs') as outputs,
                  json_extract_path_text(Properties, 'PlaybackMode') as playback_mode,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Tier') as tier,
                  json_extract_path_text(Properties, 'TimeShiftConfiguration') as time_shift_configuration
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::Channel'
                  AND data__Identifier = '<ChannelName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Audiences') as audiences,
                    json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                    json_extract_path_text(detail.Properties, 'FillerSlate') as filler_slate,
                    json_extract_path_text(detail.Properties, 'LogConfiguration') as log_configuration,
                    json_extract_path_text(detail.Properties, 'Outputs') as outputs,
                    json_extract_path_text(detail.Properties, 'PlaybackMode') as playback_mode,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Tier') as tier,
                    json_extract_path_text(detail.Properties, 'TimeShiftConfiguration') as time_shift_configuration
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaTailor::Channel'
                    AND detail.data__TypeName = 'AWS::MediaTailor::Channel'
                    AND listing.region = 'us-east-1'
    channels_list_only:
      name: channels_list_only
      id: aws.mediatailor.channels_list_only
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaTailor::Channel
      x-identifiers:
        - ChannelName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::Channel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelName') as channel_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::Channel'
                AND region = 'us-east-1'
    channel_tags:
      name: channel_tags
      id: aws.mediatailor.channel_tags
      x-cfn-schema-name: Channel
      x-cfn-type-name: AWS::MediaTailor::Channel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Audiences') as audiences,
              JSON_EXTRACT(detail.Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(detail.Properties, '$.FillerSlate') as filler_slate,
              JSON_EXTRACT(detail.Properties, '$.LogConfiguration') as log_configuration,
              JSON_EXTRACT(detail.Properties, '$.Outputs') as outputs,
              JSON_EXTRACT(detail.Properties, '$.PlaybackMode') as playback_mode,
              JSON_EXTRACT(detail.Properties, '$.Tier') as tier,
              JSON_EXTRACT(detail.Properties, '$.TimeShiftConfiguration') as time_shift_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaTailor::Channel'
              AND detail.data__TypeName = 'AWS::MediaTailor::Channel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Audiences') as audiences,
                json_extract_path_text(detail.Properties, 'ChannelName') as channel_name,
                json_extract_path_text(detail.Properties, 'FillerSlate') as filler_slate,
                json_extract_path_text(detail.Properties, 'LogConfiguration') as log_configuration,
                json_extract_path_text(detail.Properties, 'Outputs') as outputs,
                json_extract_path_text(detail.Properties, 'PlaybackMode') as playback_mode,
                json_extract_path_text(detail.Properties, 'Tier') as tier,
                json_extract_path_text(detail.Properties, 'TimeShiftConfiguration') as time_shift_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaTailor::Channel'
                AND detail.data__TypeName = 'AWS::MediaTailor::Channel'
                AND listing.region = 'us-east-1'
    channel_policies:
      name: channel_policies
      id: aws.mediatailor.channel_policies
      x-cfn-schema-name: ChannelPolicy
      x-cfn-type-name: AWS::MediaTailor::ChannelPolicy
      x-identifiers:
        - ChannelName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ChannelPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::ChannelPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/channel_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::ChannelPolicy'
              AND data__Identifier = '<ChannelName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::ChannelPolicy'
                AND data__Identifier = '<ChannelName>'
                AND region = 'us-east-1'
    live_sources:
      name: live_sources
      id: aws.mediatailor.live_sources
      x-cfn-schema-name: LiveSource
      x-cfn-type-name: AWS::MediaTailor::LiveSource
      x-identifiers:
        - LiveSourceName
        - SourceLocationName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LiveSource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::LiveSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::LiveSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::LiveSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/live_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/live_sources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/live_sources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.HttpPackageConfigurations') as http_package_configurations,
              JSON_EXTRACT(Properties, '$.LiveSourceName') as live_source_name,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::LiveSource'
              AND data__Identifier = '<LiveSourceName>|<SourceLocationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.HttpPackageConfigurations') as http_package_configurations,
                JSON_EXTRACT(detail.Properties, '$.LiveSourceName') as live_source_name,
                JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaTailor::LiveSource'
                AND detail.data__TypeName = 'AWS::MediaTailor::LiveSource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'HttpPackageConfigurations') as http_package_configurations,
                  json_extract_path_text(Properties, 'LiveSourceName') as live_source_name,
                  json_extract_path_text(Properties, 'SourceLocationName') as source_location_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::LiveSource'
                  AND data__Identifier = '<LiveSourceName>|<SourceLocationName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'HttpPackageConfigurations') as http_package_configurations,
                    json_extract_path_text(detail.Properties, 'LiveSourceName') as live_source_name,
                    json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaTailor::LiveSource'
                    AND detail.data__TypeName = 'AWS::MediaTailor::LiveSource'
                    AND listing.region = 'us-east-1'
    live_sources_list_only:
      name: live_sources_list_only
      id: aws.mediatailor.live_sources_list_only
      x-cfn-schema-name: LiveSource
      x-cfn-type-name: AWS::MediaTailor::LiveSource
      x-identifiers:
        - LiveSourceName
        - SourceLocationName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LiveSourceName') as live_source_name,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::LiveSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LiveSourceName') as live_source_name,
                json_extract_path_text(Properties, 'SourceLocationName') as source_location_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::LiveSource'
                AND region = 'us-east-1'
    live_source_tags:
      name: live_source_tags
      id: aws.mediatailor.live_source_tags
      x-cfn-schema-name: LiveSource
      x-cfn-type-name: AWS::MediaTailor::LiveSource
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.HttpPackageConfigurations') as http_package_configurations,
              JSON_EXTRACT(detail.Properties, '$.LiveSourceName') as live_source_name,
              JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaTailor::LiveSource'
              AND detail.data__TypeName = 'AWS::MediaTailor::LiveSource'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'HttpPackageConfigurations') as http_package_configurations,
                json_extract_path_text(detail.Properties, 'LiveSourceName') as live_source_name,
                json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaTailor::LiveSource'
                AND detail.data__TypeName = 'AWS::MediaTailor::LiveSource'
                AND listing.region = 'us-east-1'
    playback_configurations:
      name: playback_configurations
      id: aws.mediatailor.playback_configurations
      x-cfn-schema-name: PlaybackConfiguration
      x-cfn-type-name: AWS::MediaTailor::PlaybackConfiguration
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PlaybackConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::PlaybackConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::PlaybackConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::PlaybackConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/playback_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/playback_configurations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/playback_configurations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AdDecisionServerUrl') as ad_decision_server_url,
              JSON_EXTRACT(Properties, '$.AvailSuppression') as avail_suppression,
              JSON_EXTRACT(Properties, '$.Bumper') as bumper,
              JSON_EXTRACT(Properties, '$.CdnConfiguration') as cdn_configuration,
              JSON_EXTRACT(Properties, '$.ConfigurationAliases') as configuration_aliases,
              JSON_EXTRACT(Properties, '$.DashConfiguration') as dash_configuration,
              JSON_EXTRACT(Properties, '$.LivePreRollConfiguration') as live_pre_roll_configuration,
              JSON_EXTRACT(Properties, '$.ManifestProcessingRules') as manifest_processing_rules,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PersonalizationThresholdSeconds') as personalization_threshold_seconds,
              JSON_EXTRACT(Properties, '$.SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
              JSON_EXTRACT(Properties, '$.HlsConfiguration') as hls_configuration,
              JSON_EXTRACT(Properties, '$.PlaybackConfigurationArn') as playback_configuration_arn,
              JSON_EXTRACT(Properties, '$.PlaybackEndpointPrefix') as playback_endpoint_prefix,
              JSON_EXTRACT(Properties, '$.SlateAdUrl') as slate_ad_url,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TranscodeProfileName') as transcode_profile_name,
              JSON_EXTRACT(Properties, '$.VideoContentSourceUrl') as video_content_source_url
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AdDecisionServerUrl') as ad_decision_server_url,
                JSON_EXTRACT(detail.Properties, '$.AvailSuppression') as avail_suppression,
                JSON_EXTRACT(detail.Properties, '$.Bumper') as bumper,
                JSON_EXTRACT(detail.Properties, '$.CdnConfiguration') as cdn_configuration,
                JSON_EXTRACT(detail.Properties, '$.ConfigurationAliases') as configuration_aliases,
                JSON_EXTRACT(detail.Properties, '$.DashConfiguration') as dash_configuration,
                JSON_EXTRACT(detail.Properties, '$.LivePreRollConfiguration') as live_pre_roll_configuration,
                JSON_EXTRACT(detail.Properties, '$.ManifestProcessingRules') as manifest_processing_rules,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.PersonalizationThresholdSeconds') as personalization_threshold_seconds,
                JSON_EXTRACT(detail.Properties, '$.SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
                JSON_EXTRACT(detail.Properties, '$.HlsConfiguration') as hls_configuration,
                JSON_EXTRACT(detail.Properties, '$.PlaybackConfigurationArn') as playback_configuration_arn,
                JSON_EXTRACT(detail.Properties, '$.PlaybackEndpointPrefix') as playback_endpoint_prefix,
                JSON_EXTRACT(detail.Properties, '$.SlateAdUrl') as slate_ad_url,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.TranscodeProfileName') as transcode_profile_name,
                JSON_EXTRACT(detail.Properties, '$.VideoContentSourceUrl') as video_content_source_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                AND detail.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AdDecisionServerUrl') as ad_decision_server_url,
                  json_extract_path_text(Properties, 'AvailSuppression') as avail_suppression,
                  json_extract_path_text(Properties, 'Bumper') as bumper,
                  json_extract_path_text(Properties, 'CdnConfiguration') as cdn_configuration,
                  json_extract_path_text(Properties, 'ConfigurationAliases') as configuration_aliases,
                  json_extract_path_text(Properties, 'DashConfiguration') as dash_configuration,
                  json_extract_path_text(Properties, 'LivePreRollConfiguration') as live_pre_roll_configuration,
                  json_extract_path_text(Properties, 'ManifestProcessingRules') as manifest_processing_rules,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'PersonalizationThresholdSeconds') as personalization_threshold_seconds,
                  json_extract_path_text(Properties, 'SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
                  json_extract_path_text(Properties, 'HlsConfiguration') as hls_configuration,
                  json_extract_path_text(Properties, 'PlaybackConfigurationArn') as playback_configuration_arn,
                  json_extract_path_text(Properties, 'PlaybackEndpointPrefix') as playback_endpoint_prefix,
                  json_extract_path_text(Properties, 'SlateAdUrl') as slate_ad_url,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'TranscodeProfileName') as transcode_profile_name,
                  json_extract_path_text(Properties, 'VideoContentSourceUrl') as video_content_source_url
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AdDecisionServerUrl') as ad_decision_server_url,
                    json_extract_path_text(detail.Properties, 'AvailSuppression') as avail_suppression,
                    json_extract_path_text(detail.Properties, 'Bumper') as bumper,
                    json_extract_path_text(detail.Properties, 'CdnConfiguration') as cdn_configuration,
                    json_extract_path_text(detail.Properties, 'ConfigurationAliases') as configuration_aliases,
                    json_extract_path_text(detail.Properties, 'DashConfiguration') as dash_configuration,
                    json_extract_path_text(detail.Properties, 'LivePreRollConfiguration') as live_pre_roll_configuration,
                    json_extract_path_text(detail.Properties, 'ManifestProcessingRules') as manifest_processing_rules,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'PersonalizationThresholdSeconds') as personalization_threshold_seconds,
                    json_extract_path_text(detail.Properties, 'SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
                    json_extract_path_text(detail.Properties, 'HlsConfiguration') as hls_configuration,
                    json_extract_path_text(detail.Properties, 'PlaybackConfigurationArn') as playback_configuration_arn,
                    json_extract_path_text(detail.Properties, 'PlaybackEndpointPrefix') as playback_endpoint_prefix,
                    json_extract_path_text(detail.Properties, 'SlateAdUrl') as slate_ad_url,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'TranscodeProfileName') as transcode_profile_name,
                    json_extract_path_text(detail.Properties, 'VideoContentSourceUrl') as video_content_source_url
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                    AND detail.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                    AND listing.region = 'us-east-1'
    playback_configurations_list_only:
      name: playback_configurations_list_only
      id: aws.mediatailor.playback_configurations_list_only
      x-cfn-schema-name: PlaybackConfiguration
      x-cfn-type-name: AWS::MediaTailor::PlaybackConfiguration
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                AND region = 'us-east-1'
    playback_configuration_tags:
      name: playback_configuration_tags
      id: aws.mediatailor.playback_configuration_tags
      x-cfn-schema-name: PlaybackConfiguration
      x-cfn-type-name: AWS::MediaTailor::PlaybackConfiguration
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AdDecisionServerUrl') as ad_decision_server_url,
              JSON_EXTRACT(detail.Properties, '$.AvailSuppression') as avail_suppression,
              JSON_EXTRACT(detail.Properties, '$.Bumper') as bumper,
              JSON_EXTRACT(detail.Properties, '$.CdnConfiguration') as cdn_configuration,
              JSON_EXTRACT(detail.Properties, '$.ConfigurationAliases') as configuration_aliases,
              JSON_EXTRACT(detail.Properties, '$.DashConfiguration') as dash_configuration,
              JSON_EXTRACT(detail.Properties, '$.LivePreRollConfiguration') as live_pre_roll_configuration,
              JSON_EXTRACT(detail.Properties, '$.ManifestProcessingRules') as manifest_processing_rules,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.PersonalizationThresholdSeconds') as personalization_threshold_seconds,
              JSON_EXTRACT(detail.Properties, '$.SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
              JSON_EXTRACT(detail.Properties, '$.HlsConfiguration') as hls_configuration,
              JSON_EXTRACT(detail.Properties, '$.PlaybackConfigurationArn') as playback_configuration_arn,
              JSON_EXTRACT(detail.Properties, '$.PlaybackEndpointPrefix') as playback_endpoint_prefix,
              JSON_EXTRACT(detail.Properties, '$.SlateAdUrl') as slate_ad_url,
              JSON_EXTRACT(detail.Properties, '$.TranscodeProfileName') as transcode_profile_name,
              JSON_EXTRACT(detail.Properties, '$.VideoContentSourceUrl') as video_content_source_url
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
              AND detail.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AdDecisionServerUrl') as ad_decision_server_url,
                json_extract_path_text(detail.Properties, 'AvailSuppression') as avail_suppression,
                json_extract_path_text(detail.Properties, 'Bumper') as bumper,
                json_extract_path_text(detail.Properties, 'CdnConfiguration') as cdn_configuration,
                json_extract_path_text(detail.Properties, 'ConfigurationAliases') as configuration_aliases,
                json_extract_path_text(detail.Properties, 'DashConfiguration') as dash_configuration,
                json_extract_path_text(detail.Properties, 'LivePreRollConfiguration') as live_pre_roll_configuration,
                json_extract_path_text(detail.Properties, 'ManifestProcessingRules') as manifest_processing_rules,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'PersonalizationThresholdSeconds') as personalization_threshold_seconds,
                json_extract_path_text(detail.Properties, 'SessionInitializationEndpointPrefix') as session_initialization_endpoint_prefix,
                json_extract_path_text(detail.Properties, 'HlsConfiguration') as hls_configuration,
                json_extract_path_text(detail.Properties, 'PlaybackConfigurationArn') as playback_configuration_arn,
                json_extract_path_text(detail.Properties, 'PlaybackEndpointPrefix') as playback_endpoint_prefix,
                json_extract_path_text(detail.Properties, 'SlateAdUrl') as slate_ad_url,
                json_extract_path_text(detail.Properties, 'TranscodeProfileName') as transcode_profile_name,
                json_extract_path_text(detail.Properties, 'VideoContentSourceUrl') as video_content_source_url
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                AND detail.data__TypeName = 'AWS::MediaTailor::PlaybackConfiguration'
                AND listing.region = 'us-east-1'
    source_locations:
      name: source_locations
      id: aws.mediatailor.source_locations
      x-cfn-schema-name: SourceLocation
      x-cfn-type-name: AWS::MediaTailor::SourceLocation
      x-identifiers:
        - SourceLocationName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SourceLocation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::SourceLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::SourceLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::SourceLocation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/source_locations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/source_locations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/source_locations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessConfiguration') as access_configuration,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
              JSON_EXTRACT(Properties, '$.HttpConfiguration') as http_configuration,
              JSON_EXTRACT(Properties, '$.SegmentDeliveryConfigurations') as segment_delivery_configurations,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::SourceLocation'
              AND data__Identifier = '<SourceLocationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessConfiguration') as access_configuration,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
                JSON_EXTRACT(detail.Properties, '$.HttpConfiguration') as http_configuration,
                JSON_EXTRACT(detail.Properties, '$.SegmentDeliveryConfigurations') as segment_delivery_configurations,
                JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                AND detail.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessConfiguration') as access_configuration,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
                  json_extract_path_text(Properties, 'HttpConfiguration') as http_configuration,
                  json_extract_path_text(Properties, 'SegmentDeliveryConfigurations') as segment_delivery_configurations,
                  json_extract_path_text(Properties, 'SourceLocationName') as source_location_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::SourceLocation'
                  AND data__Identifier = '<SourceLocationName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessConfiguration') as access_configuration,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
                    json_extract_path_text(detail.Properties, 'HttpConfiguration') as http_configuration,
                    json_extract_path_text(detail.Properties, 'SegmentDeliveryConfigurations') as segment_delivery_configurations,
                    json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                    AND detail.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                    AND listing.region = 'us-east-1'
    source_locations_list_only:
      name: source_locations_list_only
      id: aws.mediatailor.source_locations_list_only
      x-cfn-schema-name: SourceLocation
      x-cfn-type-name: AWS::MediaTailor::SourceLocation
      x-identifiers:
        - SourceLocationName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::SourceLocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SourceLocationName') as source_location_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::SourceLocation'
                AND region = 'us-east-1'
    source_location_tags:
      name: source_location_tags
      id: aws.mediatailor.source_location_tags
      x-cfn-schema-name: SourceLocation
      x-cfn-type-name: AWS::MediaTailor::SourceLocation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AccessConfiguration') as access_configuration,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
              JSON_EXTRACT(detail.Properties, '$.HttpConfiguration') as http_configuration,
              JSON_EXTRACT(detail.Properties, '$.SegmentDeliveryConfigurations') as segment_delivery_configurations,
              JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaTailor::SourceLocation'
              AND detail.data__TypeName = 'AWS::MediaTailor::SourceLocation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AccessConfiguration') as access_configuration,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DefaultSegmentDeliveryConfiguration') as default_segment_delivery_configuration,
                json_extract_path_text(detail.Properties, 'HttpConfiguration') as http_configuration,
                json_extract_path_text(detail.Properties, 'SegmentDeliveryConfigurations') as segment_delivery_configurations,
                json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                AND detail.data__TypeName = 'AWS::MediaTailor::SourceLocation'
                AND listing.region = 'us-east-1'
    vod_sources:
      name: vod_sources
      id: aws.mediatailor.vod_sources
      x-cfn-schema-name: VodSource
      x-cfn-type-name: AWS::MediaTailor::VodSource
      x-identifiers:
        - SourceLocationName
        - VodSourceName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VodSource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::VodSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::VodSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::MediaTailor::VodSource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vod_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vod_sources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vod_sources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.HttpPackageConfigurations') as http_package_configurations,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VodSourceName') as vod_source_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::VodSource'
              AND data__Identifier = '<SourceLocationName>|<VodSourceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.HttpPackageConfigurations') as http_package_configurations,
                JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.VodSourceName') as vod_source_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::MediaTailor::VodSource'
                AND detail.data__TypeName = 'AWS::MediaTailor::VodSource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'HttpPackageConfigurations') as http_package_configurations,
                  json_extract_path_text(Properties, 'SourceLocationName') as source_location_name,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'VodSourceName') as vod_source_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::MediaTailor::VodSource'
                  AND data__Identifier = '<SourceLocationName>|<VodSourceName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'HttpPackageConfigurations') as http_package_configurations,
                    json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'VodSourceName') as vod_source_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::MediaTailor::VodSource'
                    AND detail.data__TypeName = 'AWS::MediaTailor::VodSource'
                    AND listing.region = 'us-east-1'
    vod_sources_list_only:
      name: vod_sources_list_only
      id: aws.mediatailor.vod_sources_list_only
      x-cfn-schema-name: VodSource
      x-cfn-type-name: AWS::MediaTailor::VodSource
      x-identifiers:
        - SourceLocationName
        - VodSourceName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SourceLocationName') as source_location_name,
              JSON_EXTRACT(Properties, '$.VodSourceName') as vod_source_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::VodSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SourceLocationName') as source_location_name,
                json_extract_path_text(Properties, 'VodSourceName') as vod_source_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::MediaTailor::VodSource'
                AND region = 'us-east-1'
    vod_source_tags:
      name: vod_source_tags
      id: aws.mediatailor.vod_source_tags
      x-cfn-schema-name: VodSource
      x-cfn-type-name: AWS::MediaTailor::VodSource
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.HttpPackageConfigurations') as http_package_configurations,
              JSON_EXTRACT(detail.Properties, '$.SourceLocationName') as source_location_name,
              JSON_EXTRACT(detail.Properties, '$.VodSourceName') as vod_source_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::MediaTailor::VodSource'
              AND detail.data__TypeName = 'AWS::MediaTailor::VodSource'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'HttpPackageConfigurations') as http_package_configurations,
                json_extract_path_text(detail.Properties, 'SourceLocationName') as source_location_name,
                json_extract_path_text(detail.Properties, 'VodSourceName') as vod_source_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::MediaTailor::VodSource'
                AND detail.data__TypeName = 'AWS::MediaTailor::VodSource'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Channel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ChannelPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateChannelPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateChannelPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LiveSource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLiveSource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLiveSourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PlaybackConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePlaybackConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePlaybackConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SourceLocation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSourceLocation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSourceLocationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VodSource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVodSource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVodSourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
