openapi: 3.0.0
info:
  title: Omics
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    AnnotationType:
      type: string
      enum:
        - GENERIC
        - CHR_POS
        - CHR_POS_REF_ALT
        - CHR_START_END_ONE_BASE
        - CHR_START_END_REF_ALT_ONE_BASE
        - CHR_START_END_ZERO_BASE
        - CHR_START_END_REF_ALT_ZERO_BASE
    EncryptionType:
      type: string
      enum:
        - KMS
    FormatToHeader:
      type: object
      x-patternProperties:
        .+:
          type: string
          maxLength: 1000
          minLength: 0
      additionalProperties: false
    FormatToHeaderKey:
      type: string
      enum:
        - CHR
        - START
        - END
        - REF
        - ALT
        - POS
    ReferenceItem:
      type: object
      properties:
        ReferenceArn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
      required:
        - ReferenceArn
      additionalProperties: false
    SchemaItem:
      type: object
      maxProperties: 1
      minProperties: 1
      x-patternProperties:
        ^[a-z0-9_]{1,255}$:
          $ref: '#/components/schemas/SchemaValueType'
      additionalProperties: false
    SchemaValueType:
      type: string
      enum:
        - LONG
        - INT
        - STRING
        - FLOAT
        - DOUBLE
        - BOOLEAN
    SseConfig:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/EncryptionType'
        KeyArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)
      required:
        - Type
      additionalProperties: false
    StoreFormat:
      type: string
      enum:
        - GFF
        - TSV
        - VCF
    StoreOptions:
      oneOf:
        - type: object
          title: TsvStoreOptions
          properties:
            TsvStoreOptions:
              $ref: '#/components/schemas/TsvStoreOptions'
          required:
            - TsvStoreOptions
          additionalProperties: false
    StoreStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
        - FAILED
    TagMap:
      type: object
      description: A map of resource tags
      x-patternProperties:
        .+:
          type: string
          maxLength: 256
          minLength: 0
          description: Resource tag value
      additionalProperties: false
    TsvStoreOptions:
      type: object
      properties:
        AnnotationType:
          $ref: '#/components/schemas/AnnotationType'
        FormatToHeader:
          $ref: '#/components/schemas/FormatToHeader'
        Schema:
          type: array
          items:
            $ref: '#/components/schemas/SchemaItem'
          maxItems: 5000
          minItems: 1
          x-insertionOrder: false
      additionalProperties: false
    AnnotationStore:
      type: object
      properties:
        CreationTime:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 500
          minLength: 0
        Id:
          type: string
          pattern: ^[a-f0-9]{12}$
        Name:
          type: string
          pattern: ^([a-z]){1}([a-z0-9_]){2,254}
        Reference:
          $ref: '#/components/schemas/ReferenceItem'
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Status:
          $ref: '#/components/schemas/StoreStatus'
        StatusMessage:
          type: string
          maxLength: 1000
          minLength: 0
        StoreArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            ^arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)$
        StoreFormat:
          $ref: '#/components/schemas/StoreFormat'
        StoreOptions:
          $ref: '#/components/schemas/StoreOptions'
        StoreSizeBytes:
          type: number
        Tags:
          $ref: '#/components/schemas/TagMap'
        UpdateTime:
          type: string
          format: date-time
      required:
        - Name
        - StoreFormat
      x-stackql-resource-name: annotation_store
      description: Definition of AWS::Omics::AnnotationStore Resource Type
      x-type-name: AWS::Omics::AnnotationStore
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Reference
        - SseConfig
        - StoreFormat
        - StoreOptions
        - Tags
      x-read-only-properties:
        - CreationTime
        - Id
        - Status
        - StatusMessage
        - StoreArn
        - StoreSizeBytes
        - UpdateTime
      x-required-properties:
        - Name
        - StoreFormat
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:UntagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateAnnotationStore
          - omics:TagResource
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:CreateGrant
          - ram:AcceptResourceShareInvitation
          - ram:GetResourceShareInvitations
          - omics:GetAnnotationStore
        read:
          - omics:GetAnnotationStore
        update:
          - omics:UpdateAnnotationStore
          - omics:TagResource
          - omics:UntagResource
          - omics:GetAnnotationStore
          - omics:ListTagsForResource
        delete:
          - omics:DeleteAnnotationStore
          - omics:ListAnnotationStores
        list:
          - omics:ListAnnotationStores
    ReferenceStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
          description: The store's ARN.
        CreationTime:
          type: string
          description: When the store was created.
          format: date-time
        Description:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A description for the store.
        Name:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A name for the store.
        ReferenceStoreId:
          type: string
          maxLength: 36
          minLength: 10
          pattern: ^[0-9]+$
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: reference_store
      description: Definition of AWS::Omics::ReferenceStore Resource Type
      x-type-name: AWS::Omics::ReferenceStore
      x-stackql-primary-identifier:
        - ReferenceStoreId
      x-create-only-properties:
        - Description
        - Name
        - SseConfig
        - Tags
      x-write-only-properties:
        - Tags
      x-read-only-properties:
        - Arn
        - CreationTime
        - ReferenceStoreId
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateReferenceStore
          - omics:TagResource
          - kms:DescribeKey
        read:
          - omics:GetReferenceStore
          - omics:ListTagsForResource
        delete:
          - omics:DeleteReferenceStore
        list:
          - omics:ListReferenceStores
    RunGroup:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^arn:.+$
        CreationTime:
          type: string
          format: date-time
        Id:
          type: string
          maxLength: 18
          minLength: 1
          pattern: ^[0-9]+$
        MaxCpus:
          type: number
          maximum: 100000
          minimum: 1
        MaxGpus:
          type: number
          maximum: 100000
          minimum: 1
        MaxDuration:
          type: number
          maximum: 100000
          minimum: 1
        MaxRuns:
          type: number
          maximum: 100000
          minimum: 1
        Name:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Tags:
          $ref: '#/components/schemas/TagMap'
      x-stackql-resource-name: run_group
      description: Definition of AWS::Omics::RunGroup Resource Type
      x-type-name: AWS::Omics::RunGroup
      x-stackql-primary-identifier:
        - Id
      x-read-only-properties:
        - Arn
        - CreationTime
        - Id
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:UntagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateRunGroup
          - omics:TagResource
        read:
          - omics:GetRunGroup
        update:
          - omics:UpdateRunGroup
          - omics:TagResource
          - omics:GetRunGroup
          - omics:ListTagsForResource
          - omics:UntagResource
        delete:
          - omics:DeleteRunGroup
          - omics:GetRunGroup
        list:
          - omics:ListRunGroups
    SequenceStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
          description: The store's ARN.
        CreationTime:
          type: string
          description: When the store was created.
          format: date-time
        Description:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A description for the store.
        Name:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A name for the store.
        FallbackLocation:
          type: string
          minLength: 1
          pattern: ^s3:\/\/([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])\/?((.{1,1024})\/)?$
          description: An S3 URI representing the bucket and folder to store failed read set uploads.
        SequenceStoreId:
          type: string
          maxLength: 36
          minLength: 10
          pattern: ^[0-9]+$
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: sequence_store
      description: Definition of AWS::Omics::SequenceStore Resource Type
      x-type-name: AWS::Omics::SequenceStore
      x-stackql-primary-identifier:
        - SequenceStoreId
      x-create-only-properties:
        - Description
        - Name
        - FallbackLocation
        - SseConfig
        - Tags
      x-write-only-properties:
        - Tags
      x-read-only-properties:
        - Arn
        - CreationTime
        - SequenceStoreId
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateSequenceStore
          - omics:TagResource
          - kms:DescribeKey
        read:
          - omics:GetSequenceStore
          - omics:ListTagsForResource
        delete:
          - omics:DeleteSequenceStore
        list:
          - omics:ListSequenceStores
    VariantStore:
      type: object
      properties:
        CreationTime:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 500
          minLength: 0
        Id:
          type: string
          pattern: ^[a-f0-9]{12}$
        Name:
          type: string
          pattern: ^([a-z]){1}([a-z0-9_]){2,254}
        Reference:
          $ref: '#/components/schemas/ReferenceItem'
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Status:
          $ref: '#/components/schemas/StoreStatus'
        StatusMessage:
          type: string
          maxLength: 1000
          minLength: 0
        StoreArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            ^arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)$
        StoreSizeBytes:
          type: number
        Tags:
          $ref: '#/components/schemas/TagMap'
        UpdateTime:
          type: string
          format: date-time
      required:
        - Name
        - Reference
      x-stackql-resource-name: variant_store
      description: Definition of AWS::Omics::VariantStore Resource Type
      x-type-name: AWS::Omics::VariantStore
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Reference
        - SseConfig
        - Tags
      x-read-only-properties:
        - CreationTime
        - Id
        - Status
        - StatusMessage
        - StoreArn
        - StoreSizeBytes
        - UpdateTime
      x-required-properties:
        - Name
        - Reference
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:UntagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateVariantStore
          - omics:TagResource
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:CreateGrant
          - ram:AcceptResourceShareInvitation
          - ram:GetResourceShareInvitations
          - omics:GetVariantStore
        read:
          - omics:GetVariantStore
        update:
          - omics:UpdateVariantStore
          - omics:TagResource
          - omics:UntagResource
          - omics:ListTagsForResource
          - omics:GetVariantStore
        delete:
          - omics:DeleteVariantStore
          - omics:ListVariantStores
        list:
          - omics:ListVariantStores
    WorkflowEngine:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - WDL
        - NEXTFLOW
        - CWL
    Accelerators:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - GPU
    WorkflowParameter:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Optional:
          type: boolean
      additionalProperties: false
    WorkflowParameterTemplate:
      type: object
      maxProperties: 1000
      minProperties: 1
      x-patternProperties:
        ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$:
          $ref: '#/components/schemas/WorkflowParameter'
      additionalProperties: false
    WorkflowStatus:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - CREATING
        - ACTIVE
        - UPDATING
        - DELETED
        - FAILED
    WorkflowType:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - PRIVATE
    Workflow:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^arn:.+$
        CreationTime:
          type: string
          format: date-time
        DefinitionUri:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Engine:
          $ref: '#/components/schemas/WorkflowEngine'
        Id:
          type: string
          maxLength: 18
          minLength: 1
          pattern: ^[0-9]+$
        Main:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Name:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        ParameterTemplate:
          $ref: '#/components/schemas/WorkflowParameterTemplate'
        Status:
          $ref: '#/components/schemas/WorkflowStatus'
        Accelerators:
          $ref: '#/components/schemas/Accelerators'
        StorageCapacity:
          type: number
          maximum: 100000
          minimum: 0
        Tags:
          $ref: '#/components/schemas/TagMap'
        Type:
          $ref: '#/components/schemas/WorkflowType'
      x-stackql-resource-name: workflow
      description: Definition of AWS::Omics::Workflow Resource Type
      x-type-name: AWS::Omics::Workflow
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - DefinitionUri
        - Engine
        - Main
        - ParameterTemplate
        - StorageCapacity
        - Accelerators
      x-write-only-properties:
        - DefinitionUri
      x-read-only-properties:
        - Arn
        - CreationTime
        - Id
        - Status
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - omics:TagResource
          - omics:UntagResource
          - omics:ListTagsForResource
      x-required-permissions:
        create:
          - omics:CreateWorkflow
          - omics:GetWorkflow
          - omics:TagResource
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectAttributes
          - s3:HeadObject
          - s3:GetEncryptionConfiguration
          - kms:Decrypt
          - kms:GenerateDataKey
          - kms:GenerateDataKeyPair
          - kms:GenerateDataKeyPairWithoutPlaintext
          - kms:GenerateDataKeyWithoutPlaintext
        read:
          - omics:GetWorkflow
        update:
          - omics:UpdateWorkflow
          - omics:GetWorkflow
          - omics:TagResource
          - omics:ListTagsForResource
          - omics:UntagResource
        delete:
          - omics:DeleteWorkflow
          - omics:GetWorkflow
        list:
          - omics:ListWorkflows
    CreateAnnotationStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreationTime:
              type: string
              format: date-time
            Description:
              type: string
              maxLength: 500
              minLength: 0
            Id:
              type: string
              pattern: ^[a-f0-9]{12}$
            Name:
              type: string
              pattern: ^([a-z]){1}([a-z0-9_]){2,254}
            Reference:
              $ref: '#/components/schemas/ReferenceItem'
            SseConfig:
              $ref: '#/components/schemas/SseConfig'
            Status:
              $ref: '#/components/schemas/StoreStatus'
            StatusMessage:
              type: string
              maxLength: 1000
              minLength: 0
            StoreArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: |-
                ^arn:([^:
                ]*):([^:
                ]*):([^:
                ]*):([0-9]{12}):([^:
                ]*)$
            StoreFormat:
              $ref: '#/components/schemas/StoreFormat'
            StoreOptions:
              $ref: '#/components/schemas/StoreOptions'
            StoreSizeBytes:
              type: number
            Tags:
              $ref: '#/components/schemas/TagMap'
            UpdateTime:
              type: string
              format: date-time
          x-stackQL-stringOnly: true
      x-title: CreateAnnotationStoreRequest
      type: object
      required: []
    CreateReferenceStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 127
              minLength: 1
              pattern: ^arn:.+$
              description: The store's ARN.
            CreationTime:
              type: string
              description: When the store was created.
              format: date-time
            Description:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
              description: A description for the store.
            Name:
              type: string
              maxLength: 127
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
              description: A name for the store.
            ReferenceStoreId:
              type: string
              maxLength: 36
              minLength: 10
              pattern: ^[0-9]+$
            SseConfig:
              $ref: '#/components/schemas/SseConfig'
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateReferenceStoreRequest
      type: object
      required: []
    CreateRunGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^arn:.+$
            CreationTime:
              type: string
              format: date-time
            Id:
              type: string
              maxLength: 18
              minLength: 1
              pattern: ^[0-9]+$
            MaxCpus:
              type: number
              maximum: 100000
              minimum: 1
            MaxGpus:
              type: number
              maximum: 100000
              minimum: 1
            MaxDuration:
              type: number
              maximum: 100000
              minimum: 1
            MaxRuns:
              type: number
              maximum: 100000
              minimum: 1
            Name:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateRunGroupRequest
      type: object
      required: []
    CreateSequenceStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 127
              minLength: 1
              pattern: ^arn:.+$
              description: The store's ARN.
            CreationTime:
              type: string
              description: When the store was created.
              format: date-time
            Description:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
              description: A description for the store.
            Name:
              type: string
              maxLength: 127
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
              description: A name for the store.
            FallbackLocation:
              type: string
              minLength: 1
              pattern: ^s3:\/\/([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])\/?((.{1,1024})\/)?$
              description: An S3 URI representing the bucket and folder to store failed read set uploads.
            SequenceStoreId:
              type: string
              maxLength: 36
              minLength: 10
              pattern: ^[0-9]+$
            SseConfig:
              $ref: '#/components/schemas/SseConfig'
            Tags:
              $ref: '#/components/schemas/TagMap'
          x-stackQL-stringOnly: true
      x-title: CreateSequenceStoreRequest
      type: object
      required: []
    CreateVariantStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            CreationTime:
              type: string
              format: date-time
            Description:
              type: string
              maxLength: 500
              minLength: 0
            Id:
              type: string
              pattern: ^[a-f0-9]{12}$
            Name:
              type: string
              pattern: ^([a-z]){1}([a-z0-9_]){2,254}
            Reference:
              $ref: '#/components/schemas/ReferenceItem'
            SseConfig:
              $ref: '#/components/schemas/SseConfig'
            Status:
              $ref: '#/components/schemas/StoreStatus'
            StatusMessage:
              type: string
              maxLength: 1000
              minLength: 0
            StoreArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: |-
                ^arn:([^:
                ]*):([^:
                ]*):([^:
                ]*):([0-9]{12}):([^:
                ]*)$
            StoreSizeBytes:
              type: number
            Tags:
              $ref: '#/components/schemas/TagMap'
            UpdateTime:
              type: string
              format: date-time
          x-stackQL-stringOnly: true
      x-title: CreateVariantStoreRequest
      type: object
      required: []
    CreateWorkflowRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^arn:.+$
            CreationTime:
              type: string
              format: date-time
            DefinitionUri:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
            Description:
              type: string
              maxLength: 256
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
            Engine:
              $ref: '#/components/schemas/WorkflowEngine'
            Id:
              type: string
              maxLength: 18
              minLength: 1
              pattern: ^[0-9]+$
            Main:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
            Name:
              type: string
              maxLength: 128
              minLength: 1
              pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
            ParameterTemplate:
              $ref: '#/components/schemas/WorkflowParameterTemplate'
            Status:
              $ref: '#/components/schemas/WorkflowStatus'
            Accelerators:
              $ref: '#/components/schemas/Accelerators'
            StorageCapacity:
              type: number
              maximum: 100000
              minimum: 0
            Tags:
              $ref: '#/components/schemas/TagMap'
            Type:
              $ref: '#/components/schemas/WorkflowType'
          x-stackQL-stringOnly: true
      x-title: CreateWorkflowRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    annotation_stores:
      name: annotation_stores
      id: aws.omics.annotation_stores
      x-cfn-schema-name: AnnotationStore
      x-cfn-type-name: AWS::Omics::AnnotationStore
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AnnotationStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::AnnotationStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::AnnotationStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::AnnotationStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/annotation_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/annotation_stores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/annotation_stores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Reference') as reference,
              JSON_EXTRACT(Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(Properties, '$.StoreFormat') as store_format,
              JSON_EXTRACT(Properties, '$.StoreOptions') as store_options,
              JSON_EXTRACT(Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Reference') as reference,
                JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.StoreArn') as store_arn,
                JSON_EXTRACT(detail.Properties, '$.StoreFormat') as store_format,
                JSON_EXTRACT(detail.Properties, '$.StoreOptions') as store_options,
                JSON_EXTRACT(detail.Properties, '$.StoreSizeBytes') as store_size_bytes,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::AnnotationStore'
                AND detail.data__TypeName = 'AWS::Omics::AnnotationStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Reference') as reference,
                  json_extract_path_text(Properties, 'SseConfig') as sse_config,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'StoreArn') as store_arn,
                  json_extract_path_text(Properties, 'StoreFormat') as store_format,
                  json_extract_path_text(Properties, 'StoreOptions') as store_options,
                  json_extract_path_text(Properties, 'StoreSizeBytes') as store_size_bytes,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Reference') as reference,
                    json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'StoreArn') as store_arn,
                    json_extract_path_text(detail.Properties, 'StoreFormat') as store_format,
                    json_extract_path_text(detail.Properties, 'StoreOptions') as store_options,
                    json_extract_path_text(detail.Properties, 'StoreSizeBytes') as store_size_bytes,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::AnnotationStore'
                    AND detail.data__TypeName = 'AWS::Omics::AnnotationStore'
                    AND listing.region = 'us-east-1'
    annotation_stores_list_only:
      name: annotation_stores_list_only
      id: aws.omics.annotation_stores_list_only
      x-cfn-schema-name: AnnotationStore
      x-cfn-type-name: AWS::Omics::AnnotationStore
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
                AND region = 'us-east-1'
    annotation_store_tags:
      name: annotation_store_tags
      id: aws.omics.annotation_store_tags
      x-cfn-schema-name: AnnotationStore
      x-cfn-type-name: AWS::Omics::AnnotationStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Reference') as reference,
              JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(detail.Properties, '$.StoreFormat') as store_format,
              JSON_EXTRACT(detail.Properties, '$.StoreOptions') as store_options,
              JSON_EXTRACT(detail.Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::AnnotationStore'
              AND detail.data__TypeName = 'AWS::Omics::AnnotationStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Reference') as reference,
                json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'StoreArn') as store_arn,
                json_extract_path_text(detail.Properties, 'StoreFormat') as store_format,
                json_extract_path_text(detail.Properties, 'StoreOptions') as store_options,
                json_extract_path_text(detail.Properties, 'StoreSizeBytes') as store_size_bytes,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::AnnotationStore'
                AND detail.data__TypeName = 'AWS::Omics::AnnotationStore'
                AND listing.region = 'us-east-1'
    reference_stores:
      name: reference_stores
      id: aws.omics.reference_stores
      x-cfn-schema-name: ReferenceStore
      x-cfn-type-name: AWS::Omics::ReferenceStore
      x-identifiers:
        - ReferenceStoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ReferenceStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::ReferenceStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::ReferenceStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/reference_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/reference_stores/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ReferenceStoreId') as reference_store_id,
              JSON_EXTRACT(Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
              AND data__Identifier = '<ReferenceStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ReferenceStoreId') as reference_store_id,
                JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::ReferenceStore'
                AND detail.data__TypeName = 'AWS::Omics::ReferenceStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ReferenceStoreId') as reference_store_id,
                  json_extract_path_text(Properties, 'SseConfig') as sse_config,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
                  AND data__Identifier = '<ReferenceStoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ReferenceStoreId') as reference_store_id,
                    json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::ReferenceStore'
                    AND detail.data__TypeName = 'AWS::Omics::ReferenceStore'
                    AND listing.region = 'us-east-1'
    reference_stores_list_only:
      name: reference_stores_list_only
      id: aws.omics.reference_stores_list_only
      x-cfn-schema-name: ReferenceStore
      x-cfn-type-name: AWS::Omics::ReferenceStore
      x-identifiers:
        - ReferenceStoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReferenceStoreId') as reference_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ReferenceStoreId') as reference_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
                AND region = 'us-east-1'
    reference_store_tags:
      name: reference_store_tags
      id: aws.omics.reference_store_tags
      x-cfn-schema-name: ReferenceStore
      x-cfn-type-name: AWS::Omics::ReferenceStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ReferenceStoreId') as reference_store_id,
              JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::ReferenceStore'
              AND detail.data__TypeName = 'AWS::Omics::ReferenceStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ReferenceStoreId') as reference_store_id,
                json_extract_path_text(detail.Properties, 'SseConfig') as sse_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::ReferenceStore'
                AND detail.data__TypeName = 'AWS::Omics::ReferenceStore'
                AND listing.region = 'us-east-1'
    run_groups:
      name: run_groups
      id: aws.omics.run_groups
      x-cfn-schema-name: RunGroup
      x-cfn-type-name: AWS::Omics::RunGroup
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RunGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::RunGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::RunGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::RunGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/run_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/run_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/run_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.MaxCpus') as max_cpus,
              JSON_EXTRACT(Properties, '$.MaxGpus') as max_gpus,
              JSON_EXTRACT(Properties, '$.MaxDuration') as max_duration,
              JSON_EXTRACT(Properties, '$.MaxRuns') as max_runs,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::RunGroup'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.MaxCpus') as max_cpus,
                JSON_EXTRACT(detail.Properties, '$.MaxGpus') as max_gpus,
                JSON_EXTRACT(detail.Properties, '$.MaxDuration') as max_duration,
                JSON_EXTRACT(detail.Properties, '$.MaxRuns') as max_runs,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::RunGroup'
                AND detail.data__TypeName = 'AWS::Omics::RunGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'MaxCpus') as max_cpus,
                  json_extract_path_text(Properties, 'MaxGpus') as max_gpus,
                  json_extract_path_text(Properties, 'MaxDuration') as max_duration,
                  json_extract_path_text(Properties, 'MaxRuns') as max_runs,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::RunGroup'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'MaxCpus') as max_cpus,
                    json_extract_path_text(detail.Properties, 'MaxGpus') as max_gpus,
                    json_extract_path_text(detail.Properties, 'MaxDuration') as max_duration,
                    json_extract_path_text(detail.Properties, 'MaxRuns') as max_runs,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::RunGroup'
                    AND detail.data__TypeName = 'AWS::Omics::RunGroup'
                    AND listing.region = 'us-east-1'
    run_groups_list_only:
      name: run_groups_list_only
      id: aws.omics.run_groups_list_only
      x-cfn-schema-name: RunGroup
      x-cfn-type-name: AWS::Omics::RunGroup
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::RunGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::RunGroup'
                AND region = 'us-east-1'
    run_group_tags:
      name: run_group_tags
      id: aws.omics.run_group_tags
      x-cfn-schema-name: RunGroup
      x-cfn-type-name: AWS::Omics::RunGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.MaxCpus') as max_cpus,
              JSON_EXTRACT(detail.Properties, '$.MaxGpus') as max_gpus,
              JSON_EXTRACT(detail.Properties, '$.MaxDuration') as max_duration,
              JSON_EXTRACT(detail.Properties, '$.MaxRuns') as max_runs,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::RunGroup'
              AND detail.data__TypeName = 'AWS::Omics::RunGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'MaxCpus') as max_cpus,
                json_extract_path_text(detail.Properties, 'MaxGpus') as max_gpus,
                json_extract_path_text(detail.Properties, 'MaxDuration') as max_duration,
                json_extract_path_text(detail.Properties, 'MaxRuns') as max_runs,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::RunGroup'
                AND detail.data__TypeName = 'AWS::Omics::RunGroup'
                AND listing.region = 'us-east-1'
    sequence_stores:
      name: sequence_stores
      id: aws.omics.sequence_stores
      x-cfn-schema-name: SequenceStore
      x-cfn-type-name: AWS::Omics::SequenceStore
      x-identifiers:
        - SequenceStoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SequenceStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::SequenceStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::SequenceStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/sequence_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/sequence_stores/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.FallbackLocation') as fallback_location,
              JSON_EXTRACT(Properties, '$.SequenceStoreId') as sequence_store_id,
              JSON_EXTRACT(Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::SequenceStore'
              AND data__Identifier = '<SequenceStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.FallbackLocation') as fallback_location,
                JSON_EXTRACT(detail.Properties, '$.SequenceStoreId') as sequence_store_id,
                JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::SequenceStore'
                AND detail.data__TypeName = 'AWS::Omics::SequenceStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'FallbackLocation') as fallback_location,
                  json_extract_path_text(Properties, 'SequenceStoreId') as sequence_store_id,
                  json_extract_path_text(Properties, 'SseConfig') as sse_config,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::SequenceStore'
                  AND data__Identifier = '<SequenceStoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'FallbackLocation') as fallback_location,
                    json_extract_path_text(detail.Properties, 'SequenceStoreId') as sequence_store_id,
                    json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::SequenceStore'
                    AND detail.data__TypeName = 'AWS::Omics::SequenceStore'
                    AND listing.region = 'us-east-1'
    sequence_stores_list_only:
      name: sequence_stores_list_only
      id: aws.omics.sequence_stores_list_only
      x-cfn-schema-name: SequenceStore
      x-cfn-type-name: AWS::Omics::SequenceStore
      x-identifiers:
        - SequenceStoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SequenceStoreId') as sequence_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::SequenceStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SequenceStoreId') as sequence_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::SequenceStore'
                AND region = 'us-east-1'
    sequence_store_tags:
      name: sequence_store_tags
      id: aws.omics.sequence_store_tags
      x-cfn-schema-name: SequenceStore
      x-cfn-type-name: AWS::Omics::SequenceStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.FallbackLocation') as fallback_location,
              JSON_EXTRACT(detail.Properties, '$.SequenceStoreId') as sequence_store_id,
              JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::SequenceStore'
              AND detail.data__TypeName = 'AWS::Omics::SequenceStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'FallbackLocation') as fallback_location,
                json_extract_path_text(detail.Properties, 'SequenceStoreId') as sequence_store_id,
                json_extract_path_text(detail.Properties, 'SseConfig') as sse_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::SequenceStore'
                AND detail.data__TypeName = 'AWS::Omics::SequenceStore'
                AND listing.region = 'us-east-1'
    variant_stores:
      name: variant_stores
      id: aws.omics.variant_stores
      x-cfn-schema-name: VariantStore
      x-cfn-type-name: AWS::Omics::VariantStore
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VariantStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::VariantStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::VariantStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::VariantStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/variant_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/variant_stores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/variant_stores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Reference') as reference,
              JSON_EXTRACT(Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::VariantStore'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Reference') as reference,
                JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.StoreArn') as store_arn,
                JSON_EXTRACT(detail.Properties, '$.StoreSizeBytes') as store_size_bytes,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::VariantStore'
                AND detail.data__TypeName = 'AWS::Omics::VariantStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Reference') as reference,
                  json_extract_path_text(Properties, 'SseConfig') as sse_config,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'StoreArn') as store_arn,
                  json_extract_path_text(Properties, 'StoreSizeBytes') as store_size_bytes,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'UpdateTime') as update_time
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::VariantStore'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Reference') as reference,
                    json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'StoreArn') as store_arn,
                    json_extract_path_text(detail.Properties, 'StoreSizeBytes') as store_size_bytes,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'UpdateTime') as update_time
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::VariantStore'
                    AND detail.data__TypeName = 'AWS::Omics::VariantStore'
                    AND listing.region = 'us-east-1'
    variant_stores_list_only:
      name: variant_stores_list_only
      id: aws.omics.variant_stores_list_only
      x-cfn-schema-name: VariantStore
      x-cfn-type-name: AWS::Omics::VariantStore
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::VariantStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::VariantStore'
                AND region = 'us-east-1'
    variant_store_tags:
      name: variant_store_tags
      id: aws.omics.variant_store_tags
      x-cfn-schema-name: VariantStore
      x-cfn-type-name: AWS::Omics::VariantStore
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Reference') as reference,
              JSON_EXTRACT(detail.Properties, '$.SseConfig') as sse_config,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(detail.Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(detail.Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(detail.Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::VariantStore'
              AND detail.data__TypeName = 'AWS::Omics::VariantStore'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Reference') as reference,
                json_extract_path_text(detail.Properties, 'SseConfig') as sse_config,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                json_extract_path_text(detail.Properties, 'StoreArn') as store_arn,
                json_extract_path_text(detail.Properties, 'StoreSizeBytes') as store_size_bytes,
                json_extract_path_text(detail.Properties, 'UpdateTime') as update_time
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::VariantStore'
                AND detail.data__TypeName = 'AWS::Omics::VariantStore'
                AND listing.region = 'us-east-1'
    workflows:
      name: workflows
      id: aws.omics.workflows
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Omics::Workflow
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Omics::Workflow"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/workflows/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.DefinitionUri') as definition_uri,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Main') as main,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ParameterTemplate') as parameter_template,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Accelerators') as accelerators,
              JSON_EXTRACT(Properties, '$.StorageCapacity') as storage_capacity,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::Workflow'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
                JSON_EXTRACT(detail.Properties, '$.DefinitionUri') as definition_uri,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Main') as main,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.ParameterTemplate') as parameter_template,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Accelerators') as accelerators,
                JSON_EXTRACT(detail.Properties, '$.StorageCapacity') as storage_capacity,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Omics::Workflow'
                AND detail.data__TypeName = 'AWS::Omics::Workflow'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreationTime') as creation_time,
                  json_extract_path_text(Properties, 'DefinitionUri') as definition_uri,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Engine') as engine,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Main') as main,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'ParameterTemplate') as parameter_template,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Accelerators') as accelerators,
                  json_extract_path_text(Properties, 'StorageCapacity') as storage_capacity,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::Workflow'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                    json_extract_path_text(detail.Properties, 'DefinitionUri') as definition_uri,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Engine') as engine,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Main') as main,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'ParameterTemplate') as parameter_template,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Accelerators') as accelerators,
                    json_extract_path_text(detail.Properties, 'StorageCapacity') as storage_capacity,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Omics::Workflow'
                    AND detail.data__TypeName = 'AWS::Omics::Workflow'
                    AND listing.region = 'us-east-1'
    workflows_list_only:
      name: workflows_list_only
      id: aws.omics.workflows_list_only
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Omics::Workflow
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::Workflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::Workflow'
                AND region = 'us-east-1'
    workflow_tags:
      name: workflow_tags
      id: aws.omics.workflow_tags
      x-cfn-schema-name: Workflow
      x-cfn-type-name: AWS::Omics::Workflow
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(detail.Properties, '$.DefinitionUri') as definition_uri,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Engine') as engine,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Main') as main,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.ParameterTemplate') as parameter_template,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.Accelerators') as accelerators,
              JSON_EXTRACT(detail.Properties, '$.StorageCapacity') as storage_capacity,
              JSON_EXTRACT(detail.Properties, '$.Type') as type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Omics::Workflow'
              AND detail.data__TypeName = 'AWS::Omics::Workflow'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreationTime') as creation_time,
                json_extract_path_text(detail.Properties, 'DefinitionUri') as definition_uri,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Engine') as engine,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Main') as main,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'ParameterTemplate') as parameter_template,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'Accelerators') as accelerators,
                json_extract_path_text(detail.Properties, 'StorageCapacity') as storage_capacity,
                json_extract_path_text(detail.Properties, 'Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Omics::Workflow'
                AND detail.data__TypeName = 'AWS::Omics::Workflow'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AnnotationStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAnnotationStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAnnotationStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ReferenceStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateReferenceStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateReferenceStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RunGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRunGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRunGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SequenceStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSequenceStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSequenceStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VariantStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVariantStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVariantStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Workflow&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateWorkflow
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
