openapi: 3.0.0
info:
  title: Omics
  version: 1.0.0
paths: {}
components:
  schemas:
    AnnotationType:
      type: string
      enum:
        - GENERIC
        - CHR_POS
        - CHR_POS_REF_ALT
        - CHR_START_END_ONE_BASE
        - CHR_START_END_REF_ALT_ONE_BASE
        - CHR_START_END_ZERO_BASE
        - CHR_START_END_REF_ALT_ZERO_BASE
    EncryptionType:
      type: string
      enum:
        - KMS
    FormatToHeader:
      type: object
      x-patternProperties:
        .+:
          type: string
          maxLength: 1000
          minLength: 0
      additionalProperties: false
    FormatToHeaderKey:
      type: string
      enum:
        - CHR
        - START
        - END
        - REF
        - ALT
        - POS
    ReferenceItem:
      type: object
      properties:
        ReferenceArn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
      required:
        - ReferenceArn
      additionalProperties: false
    SchemaItem:
      type: object
      maxProperties: 1
      minProperties: 1
      x-patternProperties:
        ^[a-z0-9_]{1,255}$:
          $ref: '#/components/schemas/SchemaValueType'
      additionalProperties: false
    SchemaValueType:
      type: string
      enum:
        - LONG
        - INT
        - STRING
        - FLOAT
        - DOUBLE
        - BOOLEAN
    SseConfig:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/EncryptionType'
        KeyArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)
      required:
        - Type
      additionalProperties: false
    StoreFormat:
      type: string
      enum:
        - GFF
        - TSV
        - VCF
    StoreOptions:
      oneOf:
        - type: object
          title: TsvStoreOptions
          properties:
            TsvStoreOptions:
              $ref: '#/components/schemas/TsvStoreOptions'
          required:
            - TsvStoreOptions
          additionalProperties: false
    StoreStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
        - FAILED
    TagMap:
      type: object
      description: A map of resource tags
      x-patternProperties:
        .+:
          type: string
          maxLength: 256
          minLength: 0
          description: Resource tag value
      additionalProperties: false
    TsvStoreOptions:
      type: object
      properties:
        AnnotationType:
          $ref: '#/components/schemas/AnnotationType'
        FormatToHeader:
          $ref: '#/components/schemas/FormatToHeader'
        Schema:
          type: array
          items:
            $ref: '#/components/schemas/SchemaItem'
          maxItems: 5000
          minItems: 1
          x-insertionOrder: false
      additionalProperties: false
    AnnotationStore:
      type: object
      properties:
        CreationTime:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 500
          minLength: 0
        Id:
          type: string
          pattern: ^[a-f0-9]{12}$
        Name:
          type: string
          pattern: ^([a-z]){1}([a-z0-9_]){2,254}
        Reference:
          $ref: '#/components/schemas/ReferenceItem'
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Status:
          $ref: '#/components/schemas/StoreStatus'
        StatusMessage:
          type: string
          maxLength: 1000
          minLength: 0
        StoreArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            ^arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)$
        StoreFormat:
          $ref: '#/components/schemas/StoreFormat'
        StoreOptions:
          $ref: '#/components/schemas/StoreOptions'
        StoreSizeBytes:
          type: number
        Tags:
          $ref: '#/components/schemas/TagMap'
        UpdateTime:
          type: string
          format: date-time
      required:
        - Name
        - StoreFormat
      x-stackql-resource-name: annotation_store
      x-stackql-primaryIdentifier:
        - Name
    ReferenceStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
          description: The store's ARN.
        CreationTime:
          type: string
          description: When the store was created.
          format: date-time
        Description:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A description for the store.
        Name:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A name for the store.
        ReferenceStoreId:
          type: string
          maxLength: 36
          minLength: 10
          pattern: ^[0-9]+$
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: reference_store
      x-stackql-primaryIdentifier:
        - ReferenceStoreId
    RunGroup:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^arn:.+$
        CreationTime:
          type: string
          format: date-time
        Id:
          type: string
          maxLength: 18
          minLength: 1
          pattern: ^[0-9]+$
        MaxCpus:
          type: number
          maximum: 100000
          minimum: 1
        MaxDuration:
          type: number
          maximum: 100000
          minimum: 1
        MaxRuns:
          type: number
          maximum: 100000
          minimum: 1
        Name:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Tags:
          $ref: '#/components/schemas/TagMap'
      x-stackql-resource-name: run_group
      x-stackql-primaryIdentifier:
        - Id
    SequenceStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^arn:.+$
          description: The store's ARN.
        CreationTime:
          type: string
          description: When the store was created.
          format: date-time
        Description:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A description for the store.
        Name:
          type: string
          maxLength: 127
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
          description: A name for the store.
        SequenceStoreId:
          type: string
          maxLength: 36
          minLength: 10
          pattern: ^[0-9]+$
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Name
      x-stackql-resource-name: sequence_store
      x-stackql-primaryIdentifier:
        - SequenceStoreId
    VariantStore:
      type: object
      properties:
        CreationTime:
          type: string
          format: date-time
        Description:
          type: string
          maxLength: 500
          minLength: 0
        Id:
          type: string
          pattern: ^[a-f0-9]{12}$
        Name:
          type: string
          pattern: ^([a-z]){1}([a-z0-9_]){2,254}
        Reference:
          $ref: '#/components/schemas/ReferenceItem'
        SseConfig:
          $ref: '#/components/schemas/SseConfig'
        Status:
          $ref: '#/components/schemas/StoreStatus'
        StatusMessage:
          type: string
          maxLength: 1000
          minLength: 0
        StoreArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: |-
            ^arn:([^:
            ]*):([^:
            ]*):([^:
            ]*):([0-9]{12}):([^:
            ]*)$
        StoreSizeBytes:
          type: number
        Tags:
          $ref: '#/components/schemas/TagMap'
        UpdateTime:
          type: string
          format: date-time
      required:
        - Name
        - Reference
      x-stackql-resource-name: variant_store
      x-stackql-primaryIdentifier:
        - Name
    WorkflowEngine:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - WDL
        - NEXTFLOW
    WorkflowParameter:
      type: object
      properties:
        Description:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Optional:
          type: boolean
      additionalProperties: false
    WorkflowParameterTemplate:
      type: object
      maxProperties: 1000
      minProperties: 1
      x-patternProperties:
        ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$:
          $ref: '#/components/schemas/WorkflowParameter'
      additionalProperties: false
    WorkflowStatus:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - CREATING
        - ACTIVE
        - UPDATING
        - DELETED
        - FAILED
    WorkflowType:
      type: string
      maxLength: 64
      minLength: 1
      enum:
        - PRIVATE
    Workflow:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^arn:.+$
        CreationTime:
          type: string
          format: date-time
        DefinitionUri:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Description:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Engine:
          $ref: '#/components/schemas/WorkflowEngine'
        Id:
          type: string
          maxLength: 18
          minLength: 1
          pattern: ^[0-9]+$
        Main:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        Name:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
        ParameterTemplate:
          $ref: '#/components/schemas/WorkflowParameterTemplate'
        Status:
          $ref: '#/components/schemas/WorkflowStatus'
        StorageCapacity:
          type: number
          maximum: 100000
          minimum: 0
        Tags:
          $ref: '#/components/schemas/TagMap'
        Type:
          $ref: '#/components/schemas/WorkflowType'
      x-stackql-resource-name: workflow
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    annotation_stores:
      name: annotation_stores
      id: aws.omics.annotation_stores
      x-cfn-schema-name: AnnotationStore
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
    annotation_store:
      name: annotation_store
      id: aws.omics.annotation_store
      x-cfn-schema-name: AnnotationStore
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Reference.ReferenceArn') as reference_reference_arn,
              JSON_EXTRACT(Properties, '$.SseConfig.Type') as sse_config_type,
              JSON_EXTRACT(Properties, '$.SseConfig.KeyArn') as sse_config_key_arn,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::AnnotationStore'
    reference_stores:
      name: reference_stores
      id: aws.omics.reference_stores
      x-cfn-schema-name: ReferenceStore
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReferenceStoreId') as reference_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
    reference_store:
      name: reference_store
      id: aws.omics.reference_store
      x-cfn-schema-name: ReferenceStore
      x-type: get
      x-identifiers:
        - ReferenceStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ReferenceStoreId') as reference_store_id,
              JSON_EXTRACT(Properties, '$.SseConfig.Type') as sse_config_type,
              JSON_EXTRACT(Properties, '$.SseConfig.KeyArn') as sse_config_key_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::ReferenceStore'
    run_groups:
      name: run_groups
      id: aws.omics.run_groups
      x-cfn-schema-name: RunGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::RunGroup'
    run_group:
      name: run_group
      id: aws.omics.run_group
      x-cfn-schema-name: RunGroup
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.MaxCpus') as max_cpus,
              JSON_EXTRACT(Properties, '$.MaxDuration') as max_duration,
              JSON_EXTRACT(Properties, '$.MaxRuns') as max_runs,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::RunGroup'
    sequence_stores:
      name: sequence_stores
      id: aws.omics.sequence_stores
      x-cfn-schema-name: SequenceStore
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SequenceStoreId') as sequence_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::SequenceStore'
    sequence_store:
      name: sequence_store
      id: aws.omics.sequence_store
      x-cfn-schema-name: SequenceStore
      x-type: get
      x-identifiers:
        - SequenceStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SequenceStoreId') as sequence_store_id,
              JSON_EXTRACT(Properties, '$.SseConfig.Type') as sse_config_type,
              JSON_EXTRACT(Properties, '$.SseConfig.KeyArn') as sse_config_key_arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::SequenceStore'
    variant_stores:
      name: variant_stores
      id: aws.omics.variant_stores
      x-cfn-schema-name: VariantStore
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::VariantStore'
    variant_store:
      name: variant_store
      id: aws.omics.variant_store
      x-cfn-schema-name: VariantStore
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Reference.ReferenceArn') as reference_reference_arn,
              JSON_EXTRACT(Properties, '$.SseConfig.Type') as sse_config_type,
              JSON_EXTRACT(Properties, '$.SseConfig.KeyArn') as sse_config_key_arn,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StoreArn') as store_arn,
              JSON_EXTRACT(Properties, '$.StoreSizeBytes') as store_size_bytes,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::VariantStore'
    workflows:
      name: workflows
      id: aws.omics.workflows
      x-cfn-schema-name: Workflow
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Omics::Workflow'
    workflow:
      name: workflow
      id: aws.omics.workflow
      x-cfn-schema-name: Workflow
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.DefinitionUri') as definition_uri,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Main') as main,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StorageCapacity') as storage_capacity
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Omics::Workflow'
