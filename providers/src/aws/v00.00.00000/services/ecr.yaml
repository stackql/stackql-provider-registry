openapi: 3.0.0
info:
  title: ECR
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    RegistryId:
      type: string
      description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed. '
      minLength: 12
      maxLength: 12
      pattern: ^[0-9]{12}$
    RepositoryDescription:
      type: string
      description: The description of the public repository.
      maxLength: 1024
    OperatingSystemList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the operating systems that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/OperatingSystem'
    OperatingSystem:
      type: string
      description: The name of the operating system.
      maxLength: 50
      minLength: 1
    ArchitectureList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the system architectures that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/Architecture'
    Architecture:
      type: string
      description: The name of the architecture.
      maxLength: 50
      minLength: 1
    UsageText:
      type: string
      description: Provide detailed information about how to use the images in the repository. This provides context, support information, and additional usage details for users of the repository.
      maxLength: 10240
    AboutText:
      type: string
      description: Provide a detailed description of the repository. Identify what is included in the repository, any licensing details, or other relevant information.
      maxLength: 10240
    Tag:
      description: An array of key-value pairs to apply to this resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    PublicRepository:
      type: object
      properties:
        RepositoryName:
          type: string
          description: The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: 'The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. '
        Arn:
          type: string
        RepositoryCatalogData:
          type: object
          description: The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see <link>
          properties:
            RepositoryDescription:
              $ref: '#/components/schemas/RepositoryDescription'
            Architectures:
              $ref: '#/components/schemas/ArchitectureList'
            OperatingSystems:
              $ref: '#/components/schemas/OperatingSystemList'
            AboutText:
              $ref: '#/components/schemas/AboutText'
            UsageText:
              $ref: '#/components/schemas/UsageText'
          additionalProperties: false
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: public_repository
      description: The AWS::ECR::PublicRepository resource specifies an Amazon Elastic Container Public Registry (Amazon Public ECR) repository, where users can push and pull Docker images. For more information, see https://docs.aws.amazon.com/AmazonECR
      x-type-name: AWS::ECR::PublicRepository
      x-stackql-primary-identifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - ecr-public:CreateRepository
          - ecr-public:SetRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
        read:
          - ecr-public:DescribeRepositories
          - ecr-public:GetRepositoryPolicy
          - ecr-public:GetRepositoryCatalogData
          - ecr-public:ListTagsForResource
        update:
          - ecr-public:SetRepositoryPolicy
          - ecr-public:DeleteRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
          - ecr-public:UntagResource
        delete:
          - ecr-public:DeleteRepository
        list:
          - ecr-public:DescribeRepositories
    PullThroughCacheRule:
      type: object
      properties:
        EcrRepositoryPrefix:
          type: string
          description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
          minLength: 2
          maxLength: 30
          pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
        UpstreamRegistryUrl:
          type: string
          description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
        CredentialArn:
          type: string
          description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
          minLength: 50
          maxLength: 612
          pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
        UpstreamRegistry:
          type: string
          description: The name of the upstream registry.
      x-stackql-resource-name: pull_through_cache_rule
      description: The AWS::ECR::PullThroughCacheRule resource configures the upstream registry configuration details for an Amazon Elastic Container Registry (Amazon Private ECR) pull-through cache.
      x-type-name: AWS::ECR::PullThroughCacheRule
      x-stackql-primary-identifier:
        - EcrRepositoryPrefix
      x-create-only-properties:
        - EcrRepositoryPrefix
        - UpstreamRegistryUrl
        - CredentialArn
        - UpstreamRegistry
      x-write-only-properties:
        - CredentialArn
        - UpstreamRegistry
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        read:
          - ecr:DescribePullThroughCacheRules
        update:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        delete:
          - ecr:DescribePullThroughCacheRules
          - ecr:DeletePullThroughCacheRule
        list:
          - ecr:DescribePullThroughCacheRules
    EcrRepositoryPrefix:
      type: string
      description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
      minLength: 2
      maxLength: 30
      pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    UpstreamRegistryUrl:
      type: string
      description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
    CredentialArn:
      type: string
      description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
      minLength: 50
      maxLength: 612
      pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
    UpstreamRegistry:
      type: string
      description: The name of the upstream registry.
    RegistryPolicy:
      type: object
      properties:
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
          description: ''
        PolicyText:
          type: object
          description: The JSON policy text for your registry.
      required:
        - PolicyText
      x-stackql-resource-name: registry_policy
      description: |-
        The ``AWS::ECR::RegistryPolicy`` resource creates or updates the permissions policy for a private registry.
         A private registry policy is used to specify permissions for another AWS-account and is used when configuring cross-account replication. For more information, see [Registry permissions](https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html) in the *Amazon Elastic Container Registry User Guide*.
      x-type-name: AWS::ECR::RegistryPolicy
      x-stackql-primary-identifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-properties:
        - PolicyText
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        read:
          - ecr:GetRegistryPolicy
        list:
          - ecr:GetRegistryPolicy
        update:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        delete:
          - ecr:DeleteRegistryPolicy
    ReplicationConfiguration:
      type: object
      properties:
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
        RegistryId:
          type: string
          description: The RegistryId associated with the aws account.
      required:
        - ReplicationConfiguration
      x-stackql-resource-name: replication_configuration
      description: The AWS::ECR::ReplicationConfiguration resource configures the replication destinations for an Amazon Elastic Container Registry (Amazon Private ECR). For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/replication.html
      x-type-name: AWS::ECR::ReplicationConfiguration
      x-stackql-primary-identifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-properties:
        - ReplicationConfiguration
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        read:
          - ecr:DescribeRegistry
        update:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        delete:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        list:
          - ecr:DescribeRegistry
    ReplicationRule:
      type: object
      properties:
        RepositoryFilters:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/RepositoryFilter'
          description: An array of objects representing the details of a repository filter.
        Destinations:
          type: array
          minItems: 1
          maxItems: 25
          items:
            $ref: '#/components/schemas/ReplicationDestination'
          description: An array of objects representing the details of a replication destination.
      description: An array of objects representing the details of a replication destination.
      required:
        - Destinations
      additionalProperties: false
    RepositoryFilter:
      type: object
      properties:
        Filter:
          $ref: '#/components/schemas/Filter'
        FilterType:
          $ref: '#/components/schemas/FilterType'
      description: An array of objects representing the details of a repository filter.
      required:
        - Filter
        - FilterType
      additionalProperties: false
    Filter:
      type: string
      description: The repository filter to be applied for replication.
      pattern: ^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$
    FilterType:
      description: Type of repository filter
      type: string
      enum:
        - PREFIX_MATCH
    ReplicationDestination:
      type: object
      properties:
        Region:
          $ref: '#/components/schemas/Region'
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
      description: An array of objects representing the details of a replication destination.
      required:
        - Region
        - RegistryId
      additionalProperties: false
    Region:
      description: A Region to replicate to.
      type: string
      pattern: '[0-9a-z-]{2,25}'
    LifecyclePolicy:
      type: object
      description: The ``LifecyclePolicy`` property type specifies a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html) in the *Amazon ECR User Guide*.
      properties:
        LifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON repository policy text to apply to the repository.
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
          description: "The AWS account ID associated with the registry that contains the repository. If you do\L not specify a registry, the default registry is assumed."
      additionalProperties: false
    LifecyclePolicyText:
      type: string
      description: The JSON repository policy text to apply to the repository.
      minLength: 100
      maxLength: 30720
    ImageScanningConfiguration:
      type: object
      description: The image scanning configuration for a repository.
      properties:
        ScanOnPush:
          $ref: '#/components/schemas/ScanOnPush'
          description: The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started.
      additionalProperties: false
    ScanOnPush:
      type: boolean
      description: The setting that determines whether images are scanned after being pushed to a repository.
    EncryptionConfiguration:
      type: object
      description: |-
        The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.

        For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
      properties:
        EncryptionType:
          $ref: '#/components/schemas/EncryptionType'
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - EncryptionType
      additionalProperties: false
    EncryptionType:
      type: string
      description: The encryption type to use.
      enum:
        - AES256
        - KMS
        - KMS_DSSE
    KmsKey:
      type: string
      description: If you use the KMS or KMS_DSSE encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.
      minLength: 1
      maxLength: 2048
    EmptyOnDelete:
      type: boolean
      description: If true, deleting the repository force deletes the contents of the repository. Without a force delete, you can only delete empty repositories.
    Repository:
      type: object
      properties:
        EmptyOnDelete:
          $ref: '#/components/schemas/EmptyOnDelete'
          description: If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty before attempting to delete it.
        LifecyclePolicy:
          $ref: '#/components/schemas/LifecyclePolicy'
          description: Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
        RepositoryName:
          type: string
          description: |-
            The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
             The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic Container Registry User Guide*.
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          type: string
          description: ''
        RepositoryUri:
          type: string
          description: ''
        ImageTagMutability:
          type: string
          description: The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
          enum:
            - MUTABLE
            - IMMUTABLE
        ImageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
          description: The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          description: The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
      x-stackql-resource-name: repository
      description: The ``AWS::ECR::Repository`` resource specifies an Amazon Elastic Container Registry (Amazon ECR) repository, where users can push and pull Docker images, Open Container Initiative (OCI) images, and OCI compatible artifacts. For more information, see [Amazon ECR private repositories](https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html) in the *Amazon ECR User Guide*.
      x-type-name: AWS::ECR::Repository
      x-stackql-primary-identifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
        - EncryptionConfiguration
        - EncryptionConfiguration/EncryptionType
        - EncryptionConfiguration/KmsKey
      x-write-only-properties:
        - EmptyOnDelete
      x-read-only-properties:
        - Arn
        - RepositoryUri
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - ecr:TagResource
          - ecr:UntagResource
      x-required-permissions:
        create:
          - ecr:CreateRepository
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:TagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        read:
          - ecr:DescribeRepositories
          - ecr:GetLifecyclePolicy
          - ecr:GetRepositoryPolicy
          - ecr:ListTagsForResource
        update:
          - ecr:DescribeRepositories
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:ListTagsForResource
          - ecr:TagResource
          - ecr:UntagResource
          - ecr:DeleteLifecyclePolicy
          - ecr:DeleteRepositoryPolicy
          - ecr:PutImageScanningConfiguration
          - ecr:PutImageTagMutability
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        delete:
          - ecr:DeleteRepository
          - kms:RetireGrant
        list:
          - ecr:DescribeRepositories
    AppliedForItem:
      type: string
      description: Enumerable Strings representing the repository creation scenarios that the template will apply towards.
      enum:
        - REPLICATION
        - PULL_THROUGH_CACHE
    RepositoryCreationTemplate:
      type: object
      properties:
        Prefix:
          description: The prefix use to match the repository name and apply the template.
          type: string
          pattern: ^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$
          minLength: 1
          maxLength: 256
        Description:
          description: The description of the template.
          type: string
          minLength: 0
          maxLength: 256
        ImageTagMutability:
          type: string
          description: The image tag mutability setting for the repository.
          enum:
            - MUTABLE
            - IMMUTABLE
        RepositoryPolicy:
          type: string
          description: The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
        LifecyclePolicy:
          type: string
          description: The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
          minLength: 100
          maxLength: 30720
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        ResourceTags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        AppliedFor:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
          items:
            $ref: '#/components/schemas/AppliedForItem'
        CustomRoleArn:
          type: string
          description: The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are configuring.
          maxLength: 2048
          pattern: ^arn:aws[-a-z0-9]*:iam::[0-9]{12}:role/[A-Za-z0-9+=,-.@_]*$
        CreatedAt:
          description: Create timestamp of the template.
          type: string
        UpdatedAt:
          description: Update timestamp of the template.
          type: string
      required:
        - Prefix
        - AppliedFor
      x-stackql-resource-name: repository_creation_template
      description: AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
      x-type-name: AWS::ECR::RepositoryCreationTemplate
      x-stackql-primary-identifier:
        - Prefix
      x-create-only-properties:
        - Prefix
      x-read-only-properties:
        - CreatedAt
        - UpdatedAt
      x-required-properties:
        - Prefix
        - AppliedFor
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:CreateRepositoryCreationTemplate
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:CreateRepository
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        read:
          - ecr:DescribeRepositoryCreationTemplates
        update:
          - ecr:DescribeRepositoryCreationTemplates
          - ecr:UpdateRepositoryCreationTemplate
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:CreateRepository
          - iam:CreateServiceLinkedRole
          - iam:PassRole
        delete:
          - ecr:DeleteRepositoryCreationTemplate
        list:
          - ecr:DescribeRepositoryCreationTemplates
    CreatePublicRepositoryRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RepositoryName:
              type: string
              description: The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
              minLength: 2
              maxLength: 256
              pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
            RepositoryPolicyText:
              type: object
              description: 'The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. '
            Arn:
              type: string
            RepositoryCatalogData:
              type: object
              description: The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see <link>
              properties:
                RepositoryDescription:
                  $ref: '#/components/schemas/RepositoryDescription'
                Architectures:
                  $ref: '#/components/schemas/ArchitectureList'
                OperatingSystems:
                  $ref: '#/components/schemas/OperatingSystemList'
                AboutText:
                  $ref: '#/components/schemas/AboutText'
                UsageText:
                  $ref: '#/components/schemas/UsageText'
              additionalProperties: false
            Tags:
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              description: An array of key-value pairs to apply to this resource.
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreatePublicRepositoryRequest
      type: object
      required: []
    CreatePullThroughCacheRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            EcrRepositoryPrefix:
              type: string
              description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
              minLength: 2
              maxLength: 30
              pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
            UpstreamRegistryUrl:
              type: string
              description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
            CredentialArn:
              type: string
              description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
              minLength: 50
              maxLength: 612
              pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
            UpstreamRegistry:
              type: string
              description: The name of the upstream registry.
          x-stackQL-stringOnly: true
      x-title: CreatePullThroughCacheRuleRequest
      type: object
      required: []
    CreateRegistryPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RegistryId:
              $ref: '#/components/schemas/RegistryId'
              description: ''
            PolicyText:
              type: object
              description: The JSON policy text for your registry.
          x-stackQL-stringOnly: true
      x-title: CreateRegistryPolicyRequest
      type: object
      required: []
    CreateReplicationConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ReplicationConfiguration:
              $ref: '#/components/schemas/ReplicationConfiguration'
            RegistryId:
              type: string
              description: The RegistryId associated with the aws account.
          x-stackQL-stringOnly: true
      x-title: CreateReplicationConfigurationRequest
      type: object
      required: []
    CreateRepositoryRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            EmptyOnDelete:
              $ref: '#/components/schemas/EmptyOnDelete'
              description: If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty before attempting to delete it.
            LifecyclePolicy:
              $ref: '#/components/schemas/LifecyclePolicy'
              description: Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
            RepositoryName:
              type: string
              description: |-
                The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
                 The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
                  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
              minLength: 2
              maxLength: 256
              pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
            RepositoryPolicyText:
              type: object
              description: The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic Container Registry User Guide*.
            Tags:
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              description: An array of key-value pairs to apply to this resource.
              items:
                $ref: '#/components/schemas/Tag'
            Arn:
              type: string
              description: ''
            RepositoryUri:
              type: string
              description: ''
            ImageTagMutability:
              type: string
              description: The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
              enum:
                - MUTABLE
                - IMMUTABLE
            ImageScanningConfiguration:
              $ref: '#/components/schemas/ImageScanningConfiguration'
              description: The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.
            EncryptionConfiguration:
              $ref: '#/components/schemas/EncryptionConfiguration'
              description: The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
          x-stackQL-stringOnly: true
      x-title: CreateRepositoryRequest
      type: object
      required: []
    CreateRepositoryCreationTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Prefix:
              description: The prefix use to match the repository name and apply the template.
              type: string
              pattern: ^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$
              minLength: 1
              maxLength: 256
            Description:
              description: The description of the template.
              type: string
              minLength: 0
              maxLength: 256
            ImageTagMutability:
              type: string
              description: The image tag mutability setting for the repository.
              enum:
                - MUTABLE
                - IMMUTABLE
            RepositoryPolicy:
              type: string
              description: The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
            LifecyclePolicy:
              type: string
              description: The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
              minLength: 100
              maxLength: 30720
            EncryptionConfiguration:
              $ref: '#/components/schemas/EncryptionConfiguration'
            ResourceTags:
              type: array
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              description: An array of key-value pairs to apply to this resource.
              items:
                $ref: '#/components/schemas/Tag'
            AppliedFor:
              type: array
              uniqueItems: true
              x-insertionOrder: false
              description: A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
              items:
                $ref: '#/components/schemas/AppliedForItem'
            CustomRoleArn:
              type: string
              description: The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are configuring.
              maxLength: 2048
              pattern: ^arn:aws[-a-z0-9]*:iam::[0-9]{12}:role/[A-Za-z0-9+=,-.@_]*$
            CreatedAt:
              description: Create timestamp of the template.
              type: string
            UpdatedAt:
              description: Update timestamp of the template.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateRepositoryCreationTemplateRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    public_repositories:
      name: public_repositories
      id: aws.ecr.public_repositories
      x-cfn-schema-name: PublicRepository
      x-cfn-type-name: AWS::ECR::PublicRepository
      x-identifiers:
        - RepositoryName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PublicRepository&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PublicRepository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PublicRepository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PublicRepository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/public_repositories/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/public_repositories/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/public_repositories/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryCatalogData') as repository_catalog_data,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RepositoryName') as repository_name,
                JSON_EXTRACT(detail.Properties, '$.RepositoryPolicyText') as repository_policy_text,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.RepositoryCatalogData') as repository_catalog_data,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::PublicRepository'
                AND detail.data__TypeName = 'AWS::ECR::PublicRepository'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                  json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'RepositoryCatalogData') as repository_catalog_data,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                  AND data__Identifier = '<RepositoryName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RepositoryName') as repository_name,
                    json_extract_path_text(detail.Properties, 'RepositoryPolicyText') as repository_policy_text,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'RepositoryCatalogData') as repository_catalog_data,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::PublicRepository'
                    AND detail.data__TypeName = 'AWS::ECR::PublicRepository'
                    AND listing.region = 'us-east-1'
    public_repositories_list_only:
      name: public_repositories_list_only
      id: aws.ecr.public_repositories_list_only
      x-cfn-schema-name: PublicRepository
      x-cfn-type-name: AWS::ECR::PublicRepository
      x-identifiers:
        - RepositoryName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                AND region = 'us-east-1'
    public_repository_tags:
      name: public_repository_tags
      id: aws.ecr.public_repository_tags
      x-cfn-schema-name: PublicRepository
      x-cfn-type-name: AWS::ECR::PublicRepository
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(detail.Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.RepositoryCatalogData') as repository_catalog_data
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ECR::PublicRepository'
              AND detail.data__TypeName = 'AWS::ECR::PublicRepository'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(detail.Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'RepositoryCatalogData') as repository_catalog_data
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ECR::PublicRepository'
                AND detail.data__TypeName = 'AWS::ECR::PublicRepository'
                AND listing.region = 'us-east-1'
    pull_through_cache_rules:
      name: pull_through_cache_rules
      id: aws.ecr.pull_through_cache_rules
      x-cfn-schema-name: PullThroughCacheRule
      x-cfn-type-name: AWS::ECR::PullThroughCacheRule
      x-identifiers:
        - EcrRepositoryPrefix
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PullThroughCacheRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PullThroughCacheRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PullThroughCacheRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::PullThroughCacheRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/pull_through_cache_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/pull_through_cache_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/pull_through_cache_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix,
              JSON_EXTRACT(Properties, '$.UpstreamRegistryUrl') as upstream_registry_url,
              JSON_EXTRACT(Properties, '$.CredentialArn') as credential_arn,
              JSON_EXTRACT(Properties, '$.UpstreamRegistry') as upstream_registry
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND data__Identifier = '<EcrRepositoryPrefix>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix,
                JSON_EXTRACT(detail.Properties, '$.UpstreamRegistryUrl') as upstream_registry_url,
                JSON_EXTRACT(detail.Properties, '$.CredentialArn') as credential_arn,
                JSON_EXTRACT(detail.Properties, '$.UpstreamRegistry') as upstream_registry
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND detail.data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix,
                  json_extract_path_text(Properties, 'UpstreamRegistryUrl') as upstream_registry_url,
                  json_extract_path_text(Properties, 'CredentialArn') as credential_arn,
                  json_extract_path_text(Properties, 'UpstreamRegistry') as upstream_registry
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                  AND data__Identifier = '<EcrRepositoryPrefix>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix,
                    json_extract_path_text(detail.Properties, 'UpstreamRegistryUrl') as upstream_registry_url,
                    json_extract_path_text(detail.Properties, 'CredentialArn') as credential_arn,
                    json_extract_path_text(detail.Properties, 'UpstreamRegistry') as upstream_registry
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                    AND detail.data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                    AND listing.region = 'us-east-1'
    pull_through_cache_rules_list_only:
      name: pull_through_cache_rules_list_only
      id: aws.ecr.pull_through_cache_rules_list_only
      x-cfn-schema-name: PullThroughCacheRule
      x-cfn-type-name: AWS::ECR::PullThroughCacheRule
      x-identifiers:
        - EcrRepositoryPrefix
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND region = 'us-east-1'
    registry_policies:
      name: registry_policies
      id: aws.ecr.registry_policies
      x-cfn-schema-name: RegistryPolicy
      x-cfn-type-name: AWS::ECR::RegistryPolicy
      x-identifiers:
        - RegistryId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RegistryPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RegistryPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RegistryPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RegistryPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/registry_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/registry_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/registry_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id,
              JSON_EXTRACT(Properties, '$.PolicyText') as policy_text
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RegistryId') as registry_id,
                JSON_EXTRACT(detail.Properties, '$.PolicyText') as policy_text
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND detail.data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RegistryId') as registry_id,
                  json_extract_path_text(Properties, 'PolicyText') as policy_text
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                  AND data__Identifier = '<RegistryId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RegistryId') as registry_id,
                    json_extract_path_text(detail.Properties, 'PolicyText') as policy_text
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::RegistryPolicy'
                    AND detail.data__TypeName = 'AWS::ECR::RegistryPolicy'
                    AND listing.region = 'us-east-1'
    registry_policies_list_only:
      name: registry_policies_list_only
      id: aws.ecr.registry_policies_list_only
      x-cfn-schema-name: RegistryPolicy
      x-cfn-type-name: AWS::ECR::RegistryPolicy
      x-identifiers:
        - RegistryId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND region = 'us-east-1'
    replication_configurations:
      name: replication_configurations
      id: aws.ecr.replication_configurations
      x-cfn-schema-name: ReplicationConfiguration
      x-cfn-type-name: AWS::ECR::ReplicationConfiguration
      x-identifiers:
        - RegistryId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ReplicationConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::ReplicationConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::ReplicationConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::ReplicationConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/replication_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/replication_configurations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/replication_configurations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ReplicationConfiguration') as replication_configuration,
                JSON_EXTRACT(detail.Properties, '$.RegistryId') as registry_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND detail.data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                  json_extract_path_text(Properties, 'RegistryId') as registry_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                  AND data__Identifier = '<RegistryId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ReplicationConfiguration') as replication_configuration,
                    json_extract_path_text(detail.Properties, 'RegistryId') as registry_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                    AND detail.data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                    AND listing.region = 'us-east-1'
    replication_configurations_list_only:
      name: replication_configurations_list_only
      id: aws.ecr.replication_configurations_list_only
      x-cfn-schema-name: ReplicationConfiguration
      x-cfn-type-name: AWS::ECR::ReplicationConfiguration
      x-identifiers:
        - RegistryId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND region = 'us-east-1'
    repositories:
      name: repositories
      id: aws.ecr.repositories
      x-cfn-schema-name: Repository
      x-cfn-type-name: AWS::ECR::Repository
      x-identifiers:
        - RepositoryName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Repository&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::Repository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::Repository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::Repository"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EmptyOnDelete') as empty_on_delete,
              JSON_EXTRACT(Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryUri') as repository_uri,
              JSON_EXTRACT(Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(Properties, '$.ImageScanningConfiguration') as image_scanning_configuration,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.EmptyOnDelete') as empty_on_delete,
                JSON_EXTRACT(detail.Properties, '$.LifecyclePolicy') as lifecycle_policy,
                JSON_EXTRACT(detail.Properties, '$.RepositoryName') as repository_name,
                JSON_EXTRACT(detail.Properties, '$.RepositoryPolicyText') as repository_policy_text,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.RepositoryUri') as repository_uri,
                JSON_EXTRACT(detail.Properties, '$.ImageTagMutability') as image_tag_mutability,
                JSON_EXTRACT(detail.Properties, '$.ImageScanningConfiguration') as image_scanning_configuration,
                JSON_EXTRACT(detail.Properties, '$.EncryptionConfiguration') as encryption_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::Repository'
                AND detail.data__TypeName = 'AWS::ECR::Repository'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'EmptyOnDelete') as empty_on_delete,
                  json_extract_path_text(Properties, 'LifecyclePolicy') as lifecycle_policy,
                  json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                  json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'RepositoryUri') as repository_uri,
                  json_extract_path_text(Properties, 'ImageTagMutability') as image_tag_mutability,
                  json_extract_path_text(Properties, 'ImageScanningConfiguration') as image_scanning_configuration,
                  json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
                  AND data__Identifier = '<RepositoryName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'EmptyOnDelete') as empty_on_delete,
                    json_extract_path_text(detail.Properties, 'LifecyclePolicy') as lifecycle_policy,
                    json_extract_path_text(detail.Properties, 'RepositoryName') as repository_name,
                    json_extract_path_text(detail.Properties, 'RepositoryPolicyText') as repository_policy_text,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'RepositoryUri') as repository_uri,
                    json_extract_path_text(detail.Properties, 'ImageTagMutability') as image_tag_mutability,
                    json_extract_path_text(detail.Properties, 'ImageScanningConfiguration') as image_scanning_configuration,
                    json_extract_path_text(detail.Properties, 'EncryptionConfiguration') as encryption_configuration
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::Repository'
                    AND detail.data__TypeName = 'AWS::ECR::Repository'
                    AND listing.region = 'us-east-1'
    repositories_list_only:
      name: repositories_list_only
      id: aws.ecr.repositories_list_only
      x-cfn-schema-name: Repository
      x-cfn-type-name: AWS::ECR::Repository
      x-identifiers:
        - RepositoryName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
                AND region = 'us-east-1'
    repository_tags:
      name: repository_tags
      id: aws.ecr.repository_tags
      x-cfn-schema-name: Repository
      x-cfn-type-name: AWS::ECR::Repository
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.EmptyOnDelete') as empty_on_delete,
              JSON_EXTRACT(detail.Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(detail.Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(detail.Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.RepositoryUri') as repository_uri,
              JSON_EXTRACT(detail.Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(detail.Properties, '$.ImageScanningConfiguration') as image_scanning_configuration,
              JSON_EXTRACT(detail.Properties, '$.EncryptionConfiguration') as encryption_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ECR::Repository'
              AND detail.data__TypeName = 'AWS::ECR::Repository'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'EmptyOnDelete') as empty_on_delete,
                json_extract_path_text(detail.Properties, 'LifecyclePolicy') as lifecycle_policy,
                json_extract_path_text(detail.Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(detail.Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'RepositoryUri') as repository_uri,
                json_extract_path_text(detail.Properties, 'ImageTagMutability') as image_tag_mutability,
                json_extract_path_text(detail.Properties, 'ImageScanningConfiguration') as image_scanning_configuration,
                json_extract_path_text(detail.Properties, 'EncryptionConfiguration') as encryption_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ECR::Repository'
                AND detail.data__TypeName = 'AWS::ECR::Repository'
                AND listing.region = 'us-east-1'
    repository_creation_templates:
      name: repository_creation_templates
      id: aws.ecr.repository_creation_templates
      x-cfn-schema-name: RepositoryCreationTemplate
      x-cfn-type-name: AWS::ECR::RepositoryCreationTemplate
      x-identifiers:
        - Prefix
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RepositoryCreationTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RepositoryCreationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RepositoryCreationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ECR::RepositoryCreationTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/repository_creation_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/repository_creation_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/repository_creation_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Prefix') as prefix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(Properties, '$.RepositoryPolicy') as repository_policy,
              JSON_EXTRACT(Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration,
              JSON_EXTRACT(Properties, '$.ResourceTags') as resource_tags,
              JSON_EXTRACT(Properties, '$.AppliedFor') as applied_for,
              JSON_EXTRACT(Properties, '$.CustomRoleArn') as custom_role_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
              AND data__Identifier = '<Prefix>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Prefix') as prefix,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ImageTagMutability') as image_tag_mutability,
                JSON_EXTRACT(detail.Properties, '$.RepositoryPolicy') as repository_policy,
                JSON_EXTRACT(detail.Properties, '$.LifecyclePolicy') as lifecycle_policy,
                JSON_EXTRACT(detail.Properties, '$.EncryptionConfiguration') as encryption_configuration,
                JSON_EXTRACT(detail.Properties, '$.ResourceTags') as resource_tags,
                JSON_EXTRACT(detail.Properties, '$.AppliedFor') as applied_for,
                JSON_EXTRACT(detail.Properties, '$.CustomRoleArn') as custom_role_arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.UpdatedAt') as updated_at
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                AND detail.data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Prefix') as prefix,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ImageTagMutability') as image_tag_mutability,
                  json_extract_path_text(Properties, 'RepositoryPolicy') as repository_policy,
                  json_extract_path_text(Properties, 'LifecyclePolicy') as lifecycle_policy,
                  json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration,
                  json_extract_path_text(Properties, 'ResourceTags') as resource_tags,
                  json_extract_path_text(Properties, 'AppliedFor') as applied_for,
                  json_extract_path_text(Properties, 'CustomRoleArn') as custom_role_arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                  AND data__Identifier = '<Prefix>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Prefix') as prefix,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ImageTagMutability') as image_tag_mutability,
                    json_extract_path_text(detail.Properties, 'RepositoryPolicy') as repository_policy,
                    json_extract_path_text(detail.Properties, 'LifecyclePolicy') as lifecycle_policy,
                    json_extract_path_text(detail.Properties, 'EncryptionConfiguration') as encryption_configuration,
                    json_extract_path_text(detail.Properties, 'ResourceTags') as resource_tags,
                    json_extract_path_text(detail.Properties, 'AppliedFor') as applied_for,
                    json_extract_path_text(detail.Properties, 'CustomRoleArn') as custom_role_arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'UpdatedAt') as updated_at
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                    AND detail.data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                    AND listing.region = 'us-east-1'
    repository_creation_templates_list_only:
      name: repository_creation_templates_list_only
      id: aws.ecr.repository_creation_templates_list_only
      x-cfn-schema-name: RepositoryCreationTemplate
      x-cfn-type-name: AWS::ECR::RepositoryCreationTemplate
      x-identifiers:
        - Prefix
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Prefix') as prefix
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Prefix') as prefix
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PublicRepository&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePublicRepository
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePublicRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PullThroughCacheRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePullThroughCacheRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePullThroughCacheRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RegistryPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRegistryPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRegistryPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ReplicationConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateReplicationConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateReplicationConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Repository&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRepository
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RepositoryCreationTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRepositoryCreationTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRepositoryCreationTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
