openapi: 3.0.0
info:
  title: ECR
  version: 1.0.0
paths: {}
components:
  schemas:
    RegistryId:
      type: string
      description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed. '
      minLength: 12
      maxLength: 12
      pattern: ^[0-9]{12}$
    RepositoryDescription:
      type: string
      description: The description of the public repository.
      maxLength: 1024
    OperatingSystemList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the operating systems that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/OperatingSystem'
    OperatingSystem:
      type: string
      description: The name of the operating system.
      maxLength: 50
      minLength: 1
    ArchitectureList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the system architectures that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/Architecture'
    Architecture:
      type: string
      description: The name of the architecture.
      maxLength: 50
      minLength: 1
    UsageText:
      type: string
      description: Provide detailed information about how to use the images in the repository. This provides context, support information, and additional usage details for users of the repository.
      maxLength: 10240
    AboutText:
      type: string
      description: Provide a detailed description of the repository. Identify what is included in the repository, any licensing details, or other relevant information.
      maxLength: 10240
    Tag:
      description: An array of key-value pairs to apply to this resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    PublicRepository:
      type: object
      properties:
        RepositoryName:
          type: string
          description: The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: 'The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. '
        Arn:
          type: string
        RepositoryCatalogData:
          type: object
          description: The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see <link>
          properties:
            RepositoryDescription:
              $ref: '#/components/schemas/RepositoryDescription'
            Architectures:
              $ref: '#/components/schemas/ArchitectureList'
            OperatingSystems:
              $ref: '#/components/schemas/OperatingSystemList'
            AboutText:
              $ref: '#/components/schemas/AboutText'
            UsageText:
              $ref: '#/components/schemas/UsageText'
          additionalProperties: false
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: public_repository
      description: The AWS::ECR::PublicRepository resource specifies an Amazon Elastic Container Public Registry (Amazon Public ECR) repository, where users can push and pull Docker images. For more information, see https://docs.aws.amazon.com/AmazonECR
      x-type-name: AWS::ECR::PublicRepository
      x-stackql-primary-identifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - ecr-public:CreateRepository
          - ecr-public:SetRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
        read:
          - ecr-public:DescribeRepositories
          - ecr-public:GetRepositoryPolicy
          - ecr-public:GetRepositoryCatalogData
          - ecr-public:ListTagsForResource
        update:
          - ecr-public:SetRepositoryPolicy
          - ecr-public:DeleteRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
          - ecr-public:UntagResource
        delete:
          - ecr-public:DeleteRepository
        list:
          - ecr-public:DescribeRepositories
    PullThroughCacheRule:
      type: object
      properties:
        EcrRepositoryPrefix:
          type: string
          description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
          minLength: 2
          maxLength: 30
          pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
        UpstreamRegistryUrl:
          type: string
          description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
        CredentialArn:
          type: string
          description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
          minLength: 50
          maxLength: 612
          pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
        UpstreamRegistry:
          type: string
          description: The name of the upstream registry.
      x-stackql-resource-name: pull_through_cache_rule
      description: The AWS::ECR::PullThroughCacheRule resource configures the upstream registry configuration details for an Amazon Elastic Container Registry (Amazon Private ECR) pull-through cache.
      x-type-name: AWS::ECR::PullThroughCacheRule
      x-stackql-primary-identifier:
        - EcrRepositoryPrefix
      x-create-only-properties:
        - EcrRepositoryPrefix
        - UpstreamRegistryUrl
        - CredentialArn
        - UpstreamRegistry
      x-write-only-properties:
        - CredentialArn
        - UpstreamRegistry
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        read:
          - ecr:DescribePullThroughCacheRules
        update:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        delete:
          - ecr:DescribePullThroughCacheRules
          - ecr:DeletePullThroughCacheRule
        list:
          - ecr:DescribePullThroughCacheRules
    EcrRepositoryPrefix:
      type: string
      description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
      minLength: 2
      maxLength: 30
      pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    UpstreamRegistryUrl:
      type: string
      description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
    CredentialArn:
      type: string
      description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
      minLength: 50
      maxLength: 612
      pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
    UpstreamRegistry:
      type: string
      description: The name of the upstream registry.
    RegistryPolicy:
      type: object
      properties:
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
          description: ''
        PolicyText:
          type: object
          description: The JSON policy text for your registry.
      required:
        - PolicyText
      x-stackql-resource-name: registry_policy
      description: |-
        The ``AWS::ECR::RegistryPolicy`` resource creates or updates the permissions policy for a private registry.
         A private registry policy is used to specify permissions for another AWS-account and is used when configuring cross-account replication. For more information, see [Registry permissions](https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html) in the *Amazon Elastic Container Registry User Guide*.
      x-type-name: AWS::ECR::RegistryPolicy
      x-stackql-primary-identifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-properties:
        - PolicyText
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        read:
          - ecr:GetRegistryPolicy
        list:
          - ecr:GetRegistryPolicy
        update:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        delete:
          - ecr:DeleteRegistryPolicy
    ReplicationConfiguration:
      type: object
      properties:
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
        RegistryId:
          type: string
          description: The RegistryId associated with the aws account.
      required:
        - ReplicationConfiguration
      x-stackql-resource-name: replication_configuration
      description: The AWS::ECR::ReplicationConfiguration resource configures the replication destinations for an Amazon Elastic Container Registry (Amazon Private ECR). For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/replication.html
      x-type-name: AWS::ECR::ReplicationConfiguration
      x-stackql-primary-identifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-properties:
        - ReplicationConfiguration
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        read:
          - ecr:DescribeRegistry
        update:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        delete:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        list:
          - ecr:DescribeRegistry
    ReplicationRule:
      type: object
      properties:
        RepositoryFilters:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/RepositoryFilter'
          description: An array of objects representing the details of a repository filter.
        Destinations:
          type: array
          minItems: 1
          maxItems: 25
          items:
            $ref: '#/components/schemas/ReplicationDestination'
          description: An array of objects representing the details of a replication destination.
      description: An array of objects representing the details of a replication destination.
      required:
        - Destinations
      additionalProperties: false
    RepositoryFilter:
      type: object
      properties:
        Filter:
          $ref: '#/components/schemas/Filter'
        FilterType:
          $ref: '#/components/schemas/FilterType'
      description: An array of objects representing the details of a repository filter.
      required:
        - Filter
        - FilterType
      additionalProperties: false
    Filter:
      type: string
      description: The repository filter to be applied for replication.
      pattern: ^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$
    FilterType:
      description: Type of repository filter
      type: string
      enum:
        - PREFIX_MATCH
    ReplicationDestination:
      type: object
      properties:
        Region:
          $ref: '#/components/schemas/Region'
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
      description: An array of objects representing the details of a replication destination.
      required:
        - Region
        - RegistryId
      additionalProperties: false
    Region:
      description: A Region to replicate to.
      type: string
      pattern: '[0-9a-z-]{2,25}'
    LifecyclePolicy:
      type: object
      description: The ``LifecyclePolicy`` property type specifies a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html) in the *Amazon ECR User Guide*.
      properties:
        LifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
          description: The JSON repository policy text to apply to the repository.
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
          description: "The AWS account ID associated with the registry that contains the repository. If you do\L not specify a registry, the default registry is assumed."
      additionalProperties: false
    LifecyclePolicyText:
      type: string
      description: The JSON repository policy text to apply to the repository.
      minLength: 100
      maxLength: 30720
    ImageScanningConfiguration:
      type: object
      description: The image scanning configuration for a repository.
      properties:
        ScanOnPush:
          $ref: '#/components/schemas/ScanOnPush'
          description: The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started.
      additionalProperties: false
    ScanOnPush:
      type: boolean
      description: The setting that determines whether images are scanned after being pushed to a repository.
    EncryptionConfiguration:
      type: object
      description: |-
        The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.

        For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
      properties:
        EncryptionType:
          $ref: '#/components/schemas/EncryptionType'
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - EncryptionType
      additionalProperties: false
    EncryptionType:
      type: string
      description: The encryption type to use.
      enum:
        - AES256
        - KMS
    KmsKey:
      type: string
      description: If you use the KMS encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.
      minLength: 1
      maxLength: 2048
    EmptyOnDelete:
      type: boolean
      description: If true, deleting the repository force deletes the contents of the repository. Without a force delete, you can only delete empty repositories.
    Repository:
      type: object
      properties:
        EmptyOnDelete:
          $ref: '#/components/schemas/EmptyOnDelete'
          description: If true, deleting the repository force deletes the contents of the repository. If false, the repository must be empty before attempting to delete it.
        LifecyclePolicy:
          $ref: '#/components/schemas/LifecyclePolicy'
          description: Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html).
        RepositoryName:
          type: string
          description: |-
            The name to use for the repository. The repository name may be specified on its own (such as ``nginx-web-app``) or it can be prepended with a namespace to group the repository into a category (such as ``project-a/nginx-web-app``). If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the repository name. For more information, see [Name type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
             The repository name must start with a letter and can only contain lowercase letters, numbers, hyphens, underscores, and forward slashes.
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: The JSON repository policy text to apply to the repository. For more information, see [Amazon ECR repository policies](https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html) in the *Amazon Elastic Container Registry User Guide*.
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          type: string
          description: ''
        RepositoryUri:
          type: string
          description: ''
        ImageTagMutability:
          type: string
          description: The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
          enum:
            - MUTABLE
            - IMMUTABLE
        ImageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
          description: The image scanning configuration for the repository. This determines whether images are scanned for known vulnerabilities after being pushed to the repository.
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
          description: The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
      x-stackql-resource-name: repository
      description: The ``AWS::ECR::Repository`` resource specifies an Amazon Elastic Container Registry (Amazon ECR) repository, where users can push and pull Docker images, Open Container Initiative (OCI) images, and OCI compatible artifacts. For more information, see [Amazon ECR private repositories](https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html) in the *Amazon ECR User Guide*.
      x-type-name: AWS::ECR::Repository
      x-stackql-primary-identifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
        - EncryptionConfiguration
        - EncryptionConfiguration/EncryptionType
        - EncryptionConfiguration/KmsKey
      x-write-only-properties:
        - EmptyOnDelete
      x-read-only-properties:
        - Arn
        - RepositoryUri
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - ecr:CreateRepository
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:TagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        read:
          - ecr:DescribeRepositories
          - ecr:GetLifecyclePolicy
          - ecr:GetRepositoryPolicy
          - ecr:ListTagsForResource
        update:
          - ecr:DescribeRepositories
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:ListTagsForResource
          - ecr:TagResource
          - ecr:UntagResource
          - ecr:DeleteLifecyclePolicy
          - ecr:DeleteRepositoryPolicy
          - ecr:PutImageScanningConfiguration
          - ecr:PutImageTagMutability
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        delete:
          - ecr:DeleteRepository
          - kms:RetireGrant
        list:
          - ecr:DescribeRepositories
    AppliedForItem:
      type: string
      description: Enumerable Strings representing the repository creation scenarios that the template will apply towards.
      enum:
        - REPLICATION
        - PULL_THROUGH_CACHE
    RepositoryCreationTemplate:
      type: object
      properties:
        Prefix:
          description: The prefix use to match the repository name and apply the template.
          type: string
          pattern: ^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$
          minLength: 1
          maxLength: 256
        Description:
          description: The description of the template.
          type: string
          minLength: 0
          maxLength: 256
        ImageTagMutability:
          type: string
          description: The image tag mutability setting for the repository.
          enum:
            - MUTABLE
            - IMMUTABLE
        RepositoryPolicy:
          type: string
          description: The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
        LifecyclePolicy:
          type: string
          description: The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
          minLength: 100
          maxLength: 30720
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
        ResourceTags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        AppliedFor:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          description: A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
          items:
            $ref: '#/components/schemas/AppliedForItem'
        CreatedAt:
          description: Create timestamp of the template.
          type: string
        UpdatedAt:
          description: Update timestamp of the template.
          type: string
      required:
        - Prefix
        - AppliedFor
      x-stackql-resource-name: repository_creation_template
      description: AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
      x-type-name: AWS::ECR::RepositoryCreationTemplate
      x-stackql-primary-identifier:
        - Prefix
      x-create-only-properties:
        - Prefix
      x-read-only-properties:
        - CreatedAt
        - UpdatedAt
      x-required-properties:
        - Prefix
        - AppliedFor
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - ecr:CreateRepositoryCreationTemplate
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
        read:
          - ecr:DescribeRepositoryCreationTemplates
        update:
          - ecr:DescribeRepositoryCreationTemplates
          - ecr:UpdateRepositoryCreationTemplate
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
        delete:
          - ecr:DeleteRepositoryCreationTemplate
        list:
          - ecr:DescribeRepositoryCreationTemplates
  x-stackQL-resources:
    public_repositories:
      name: public_repositories
      id: aws.ecr.public_repositories
      x-cfn-schema-name: PublicRepository
      x-type: list
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                AND region = 'us-east-1'
    public_repository:
      name: public_repository
      id: aws.ecr.public_repository
      x-cfn-schema-name: PublicRepository
      x-type: get
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryCatalogData') as repository_catalog_data,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'RepositoryCatalogData') as repository_catalog_data,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                AND data__Identifier = '<RepositoryName>'
                AND region = 'us-east-1'
    pull_through_cache_rules:
      name: pull_through_cache_rules
      id: aws.ecr.pull_through_cache_rules
      x-cfn-schema-name: PullThroughCacheRule
      x-type: list
      x-identifiers:
        - EcrRepositoryPrefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND region = 'us-east-1'
    pull_through_cache_rule:
      name: pull_through_cache_rule
      id: aws.ecr.pull_through_cache_rule
      x-cfn-schema-name: PullThroughCacheRule
      x-type: get
      x-identifiers:
        - EcrRepositoryPrefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix,
              JSON_EXTRACT(Properties, '$.UpstreamRegistryUrl') as upstream_registry_url,
              JSON_EXTRACT(Properties, '$.CredentialArn') as credential_arn,
              JSON_EXTRACT(Properties, '$.UpstreamRegistry') as upstream_registry
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND data__Identifier = '<EcrRepositoryPrefix>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix,
                json_extract_path_text(Properties, 'UpstreamRegistryUrl') as upstream_registry_url,
                json_extract_path_text(Properties, 'CredentialArn') as credential_arn,
                json_extract_path_text(Properties, 'UpstreamRegistry') as upstream_registry
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND data__Identifier = '<EcrRepositoryPrefix>'
                AND region = 'us-east-1'
    registry_policies:
      name: registry_policies
      id: aws.ecr.registry_policies
      x-cfn-schema-name: RegistryPolicy
      x-type: list
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND region = 'us-east-1'
    registry_policy:
      name: registry_policy
      id: aws.ecr.registry_policy
      x-cfn-schema-name: RegistryPolicy
      x-type: get
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id,
              JSON_EXTRACT(Properties, '$.PolicyText') as policy_text
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RegistryId') as registry_id,
                json_extract_path_text(Properties, 'PolicyText') as policy_text
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND data__Identifier = '<RegistryId>'
                AND region = 'us-east-1'
    replication_configurations:
      name: replication_configurations
      id: aws.ecr.replication_configurations
      x-cfn-schema-name: ReplicationConfiguration
      x-type: list
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND region = 'us-east-1'
    replication_configuration:
      name: replication_configuration
      id: aws.ecr.replication_configuration
      x-cfn-schema-name: ReplicationConfiguration
      x-type: get
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND data__Identifier = '<RegistryId>'
                AND region = 'us-east-1'
    repositories:
      name: repositories
      id: aws.ecr.repositories
      x-cfn-schema-name: Repository
      x-type: list
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
                AND region = 'us-east-1'
    repository:
      name: repository
      id: aws.ecr.repository
      x-cfn-schema-name: Repository
      x-type: get
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.EmptyOnDelete') as empty_on_delete,
              JSON_EXTRACT(Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryUri') as repository_uri,
              JSON_EXTRACT(Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(Properties, '$.ImageScanningConfiguration') as image_scanning_configuration,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'EmptyOnDelete') as empty_on_delete,
                json_extract_path_text(Properties, 'LifecyclePolicy') as lifecycle_policy,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'RepositoryUri') as repository_uri,
                json_extract_path_text(Properties, 'ImageTagMutability') as image_tag_mutability,
                json_extract_path_text(Properties, 'ImageScanningConfiguration') as image_scanning_configuration,
                json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
                AND data__Identifier = '<RepositoryName>'
                AND region = 'us-east-1'
    repository_creation_templates:
      name: repository_creation_templates
      id: aws.ecr.repository_creation_templates
      x-cfn-schema-name: RepositoryCreationTemplate
      x-type: list
      x-identifiers:
        - Prefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Prefix') as prefix
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Prefix') as prefix
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                AND region = 'us-east-1'
    repository_creation_template:
      name: repository_creation_template
      id: aws.ecr.repository_creation_template
      x-cfn-schema-name: RepositoryCreationTemplate
      x-type: get
      x-identifiers:
        - Prefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Prefix') as prefix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(Properties, '$.RepositoryPolicy') as repository_policy,
              JSON_EXTRACT(Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration,
              JSON_EXTRACT(Properties, '$.ResourceTags') as resource_tags,
              JSON_EXTRACT(Properties, '$.AppliedFor') as applied_for,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
              AND data__Identifier = '<Prefix>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Prefix') as prefix,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ImageTagMutability') as image_tag_mutability,
                json_extract_path_text(Properties, 'RepositoryPolicy') as repository_policy,
                json_extract_path_text(Properties, 'LifecyclePolicy') as lifecycle_policy,
                json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration,
                json_extract_path_text(Properties, 'ResourceTags') as resource_tags,
                json_extract_path_text(Properties, 'AppliedFor') as applied_for,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RepositoryCreationTemplate'
                AND data__Identifier = '<Prefix>'
                AND region = 'us-east-1'
