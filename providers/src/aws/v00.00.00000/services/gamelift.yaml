openapi: 3.0.0
info:
  title: GameLift
  version: 1.0.0
paths: {}
components:
  schemas:
    RoutingStrategy:
      type: object
      properties:
        Message:
          description: The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
          type: string
        FleetId:
          description: A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
          type: string
          pattern: ^fleet-\S+
        Type:
          description: Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
          type: string
          enum:
            - SIMPLE
            - TERMINAL
      additionalProperties: false
      required:
        - Type
      anyOf:
        - required:
            - FleetId
        - required:
            - Message
    Alias:
      type: object
      properties:
        Description:
          description: A human-readable description of the alias.
          type: string
          minLength: 1
          maxLength: 1024
        Name:
          description: A descriptive label that is associated with an alias. Alias names do not need to be unique.
          type: string
          minLength: 1
          maxLength: 1024
          pattern: .*\S.*
        RoutingStrategy:
          description: A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.
          $ref: '#/components/schemas/RoutingStrategy'
        AliasId:
          description: Unique alias ID
          type: string
      required:
        - Name
        - RoutingStrategy
      x-stackql-resource-name: alias
      x-stackql-primaryIdentifier:
        - AliasId
    StorageLocation:
      x-$comment: Contains object details present in the S3 Bucket
      type: object
      additionalProperties: false
      properties:
        Bucket:
          description: An Amazon S3 bucket identifier. This is the name of the S3 bucket.
          type: string
        Key:
          description: The name of the zip file that contains the build files or script files.
          type: string
        ObjectVersion:
          description: The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from your S3 bucket. To retrieve a specific version of the file, provide an object version. To retrieve the latest version of the file, do not set this parameter.
          type: string
        RoleArn:
          description: The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
          type: string
      required:
        - Bucket
        - Key
        - RoleArn
    Build:
      type: object
      properties:
        BuildId:
          description: A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
          type: string
        Name:
          description: A descriptive label that is associated with a build. Build names do not need to be unique.
          type: string
        OperatingSystem:
          description: The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
          type: string
          enum:
            - AMAZON_LINUX
            - AMAZON_LINUX_2
            - WINDOWS_2012
            - WINDOWS_2016
        StorageLocation:
          description: Information indicating where your game build files are stored. Use this parameter only when creating a build with files stored in an Amazon S3 bucket that you own. The storage location must specify an Amazon S3 bucket name and key. The location must also specify a role ARN that you set up to allow Amazon GameLift to access your Amazon S3 bucket. The S3 bucket and your new build must be in the same Region.
          $ref: '#/components/schemas/StorageLocation'
        Version:
          description: Version information that is associated with this build. Version strings do not need to be unique.
          type: string
      required: []
      x-stackql-resource-name: build
      x-stackql-primaryIdentifier:
        - BuildId
    AnywhereConfiguration:
      description: Configuration for Anywhere fleet.
      properties:
        Cost:
          description: Cost of compute can be specified on Anywhere Fleets to prioritize placement across Queue destinations based on Cost.
          type: string
          pattern: ^\d{1,5}(?:\.\d{1,5})?$
          minLength: 1
          maxLength: 11
      additionalProperties: false
      required:
        - Cost
    CertificateConfiguration:
      description: Information about the use of a TLS/SSL certificate for a fleet. TLS certificate generation is enabled at the fleet level, with one certificate generated for the fleet. When this feature is enabled, the certificate can be retrieved using the GameLift Server SDK call GetInstanceCertificate. All instances in a fleet share the same certificate.
      type: object
      properties:
        CertificateType:
          type: string
          enum:
            - DISABLED
            - GENERATED
      additionalProperties: false
      required:
        - CertificateType
    IpPermission:
      description: >-
        A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift hosting resource. New game sessions that are started on the fleet are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. For fleets created with a custom game server, the ranges reflect the server's game session assignments. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP
        messaging and one for UDP, for use by the Realtime servers.
      type: object
      properties:
        FromPort:
          description: A starting value for a range of allowed port numbers.
          type: integer
          minimum: 1
          maximum: 60000
        IpRange:
          description: 'A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".'
          type: string
          pattern: (^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$)
        Protocol:
          description: The network communication protocol used by the fleet.
          type: string
          enum:
            - TCP
            - UDP
        ToPort:
          description: An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
          type: integer
          minimum: 1
          maximum: 60000
      additionalProperties: false
      required:
        - FromPort
        - IpRange
        - Protocol
        - ToPort
    Location:
      type: object
      properties:
        LocationName:
          type: string
          minLength: 8
          maxLength: 64
          pattern: ^custom-[A-Za-z0-9\-]+
        LocationArn:
          type: string
          pattern: ^arn:.*:location/custom-\S+
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - LocationName
      x-stackql-resource-name: location
      x-stackql-primaryIdentifier:
        - LocationName
    LocationCapacity:
      description: Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region.
      type: object
      properties:
        DesiredEC2Instances:
          description: The number of EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.
          type: integer
          minimum: 0
        MinSize:
          description: The minimum value allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.
          type: integer
          minimum: 0
        MaxSize:
          description: The maximum value that is allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.
          type: integer
          minimum: 0
      additionalProperties: false
      required:
        - DesiredEC2Instances
        - MinSize
        - MaxSize
    LocationConfiguration:
      description: A remote location where a multi-location fleet can deploy EC2 instances for game hosting.
      type: object
      properties:
        Location:
          $ref: '#/components/schemas/Location'
        LocationCapacity:
          $ref: '#/components/schemas/LocationCapacity'
      additionalProperties: false
      required:
        - Location
    ResourceCreationLimitPolicy:
      description: |-
        A policy that limits the number of game sessions a player can create on the same fleet. This optional policy gives game owners control over how players can consume available game server resources. A resource creation policy makes the following statement: "An individual player can create a maximum number of new game sessions within a specified time period".

        The policy is evaluated when a player tries to create a new game session. For example, assume you have a policy of 10 new game sessions and a time period of 60 minutes. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than 10 game sessions in the past 60 minutes.
      type: object
      properties:
        NewGameSessionsPerCreator:
          description: The maximum number of game sessions that an individual can create during the policy period.
          type: integer
          minimum: 0
        PolicyPeriodInMinutes:
          description: The time span used in evaluating the resource creation limit policy.
          type: integer
          minimum: 0
      additionalProperties: false
    RuntimeConfiguration:
      description: >-
        A collection of server process configurations that describe the processes to run on each instance in a fleet. All fleets must have a runtime configuration. Each instance in the fleet maintains server processes as specified in the runtime configuration, launching new ones as existing processes end. Each instance regularly checks for an updated runtime configuration makes adjustments as called for.


        The runtime configuration enables the instances in a fleet to run multiple processes simultaneously. Potential scenarios are as follows: (1) Run multiple processes of a single game server executable to maximize usage of your hosting resources. (2) Run one or more processes of different executables, such as your game server and a metrics tracking program. (3) Run multiple processes of a single game server but with different launch parameters, for example to run one process on each
        instance in debug mode.


        An Amazon GameLift instance is limited to 50 processes running simultaneously. A runtime configuration must specify fewer than this limit. To calculate the total number of processes specified in a runtime configuration, add the values of the ConcurrentExecutions parameter for each ServerProcess object in the runtime configuration.
      type: object
      properties:
        GameSessionActivationTimeoutSeconds:
          description: The maximum amount of time (in seconds) that a game session can remain in status ACTIVATING. If the game session is not active before the timeout, activation is terminated and the game session status is changed to TERMINATED.
          type: integer
          minimum: 1
          maximum: 600
        MaxConcurrentGameSessionActivations:
          description: The maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
          type: integer
          minimum: 1
          maximum: 2147483647
        ServerProcesses:
          description: A collection of server process configurations that describe which server processes to run on each instance in a fleet.
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/ServerProcess'
          x-insertionOrder: false
      additionalProperties: false
    ServerProcess:
      description: A set of instructions for launching server processes on each instance in a fleet. Each instruction set identifies the location of the server executable, optional launch parameters, and the number of server processes with this configuration to maintain concurrently on the instance. Server process configurations make up a fleet's RuntimeConfiguration.
      type: object
      properties:
        ConcurrentExecutions:
          description: The number of server processes that use this configuration to run concurrently on an instance.
          type: integer
          minimum: 1
        LaunchPath:
          description: |-
            The location of the server executable in a custom game build or the name of the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:

            Windows (for custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"

            Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
          type: string
          minLength: 1
          maxLength: 1024
          pattern: ^([Cc]:\\game\S+|/local/game/\S+)
        Parameters:
          description: An optional list of parameters to pass to the server executable or Realtime script on launch.
          type: string
          minLength: 1
          maxLength: 1024
      additionalProperties: false
      required:
        - ConcurrentExecutions
        - LaunchPath
    Fleet:
      type: object
      properties:
        AnywhereConfiguration:
          description: Configuration for Anywhere fleet.
          $ref: '#/components/schemas/AnywhereConfiguration'
        CertificateConfiguration:
          description: Indicates whether to generate a TLS/SSL certificate for the new fleet. TLS certificates are used for encrypting traffic between game clients and game servers running on GameLift. If this parameter is not set, certificate generation is disabled. This fleet setting cannot be changed once the fleet is created.
          $ref: '#/components/schemas/CertificateConfiguration'
        ComputeType:
          description: ComputeType to differentiate EC2 hardware managed by GameLift and Anywhere hardware managed by the customer.
          type: string
          enum:
            - EC2
            - ANYWHERE
        Description:
          description: A human-readable description of a fleet.
          type: string
          minLength: 1
          maxLength: 1024
        DesiredEC2Instances:
          description: '[DEPRECATED] The number of EC2 instances that you want this fleet to host. When creating a new fleet, GameLift automatically sets this value to "1" and initiates a single instance. Once the fleet is active, update this value to trigger GameLift to add or remove instances from the fleet.'
          type: integer
          minimum: 0
        EC2InboundPermissions:
          description: A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift server.
          type: array
          maxItems: 50
          items:
            $ref: '#/components/schemas/IpPermission'
          x-insertionOrder: false
        EC2InstanceType:
          description: The name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
          type: string
          pattern: ^.*..*$
        FleetType:
          description: Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
          type: string
          enum:
            - ON_DEMAND
            - SPOT
        InstanceRoleARN:
          description: A unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN from the IAM dashboard in the AWS Management Console.
          type: string
          minLength: 1
          pattern: ^arn:aws(-.*)?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        Locations:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: '#/components/schemas/LocationConfiguration'
          x-insertionOrder: false
        LogPaths:
          description: This parameter is no longer used. When hosting a custom game build, specify where Amazon GameLift should store log files using the Amazon GameLift server API call ProcessReady()
          type: array
          items:
            type: string
          x-insertionOrder: false
        MaxSize:
          description: '[DEPRECATED] The maximum value that is allowed for the fleet''s instance count. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.'
          type: integer
          minimum: 0
        MetricGroups:
          description: The name of an Amazon CloudWatch metric group. A metric group aggregates the metrics for all fleets in the group. Specify a string containing the metric group name. You can use an existing name or use a new name to create a new metric group. Currently, this parameter can have only one string.
          type: array
          maxItems: 1
          items:
            type: string
          x-insertionOrder: false
        MinSize:
          description: '[DEPRECATED] The minimum value allowed for the fleet''s instance count. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.'
          type: integer
          minimum: 0
        Name:
          description: A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
          type: string
          minLength: 1
          maxLength: 1024
        NewGameSessionProtectionPolicy:
          description: A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
          type: string
          enum:
            - FullProtection
            - NoProtection
        PeerVpcAwsAccountId:
          description: A unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your account ID in the AWS Management Console under account settings.
          type: string
          minLength: 1
          maxLength: 1024
          pattern: ^[0-9]{12}$
        PeerVpcId:
          description: A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the VPC Dashboard in the AWS Management Console.
          type: string
          minLength: 1
          maxLength: 1024
          pattern: ^vpc-\S+
        ResourceCreationLimitPolicy:
          description: A policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
          $ref: '#/components/schemas/ResourceCreationLimitPolicy'
        FleetId:
          description: Unique fleet ID
          type: string
          pattern: ^fleet-\S+
        BuildId:
          description: A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
          type: string
          pattern: ^build-\S+|^arn:.*:build/build-\S+
        ScriptId:
          description: |-
            A unique identifier for a Realtime script to be deployed on a new Realtime Servers fleet. The script must have been successfully uploaded to Amazon GameLift. This fleet setting cannot be changed once the fleet is created.

            Note: It is not currently possible to use the !Ref command to reference a script created with a CloudFormation template for the fleet property ScriptId. Instead, use Fn::GetAtt Script.Arn or Fn::GetAtt Script.Id to retrieve either of these properties as input for ScriptId. Alternatively, enter a ScriptId string manually.
          type: string
          pattern: ^script-\S+|^arn:.*:script/script-\S+
        RuntimeConfiguration:
          description: |-
            Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime script. The runtime configuration defines the server executables or launch script file, launch parameters, and the number of processes to run concurrently on each instance. When creating a fleet, the runtime configuration must have at least one server process configuration; otherwise the request fails with an invalid request exception.

            This parameter is required unless the parameters ServerLaunchPath and ServerLaunchParameters are defined. Runtime configuration has replaced these parameters, but fleets that use them will continue to work.
          $ref: '#/components/schemas/RuntimeConfiguration'
        ServerLaunchParameters:
          description: This parameter is no longer used but is retained for backward compatibility. Instead, specify server launch parameters in the RuntimeConfiguration parameter. A request must specify either a runtime configuration or values for both ServerLaunchParameters and ServerLaunchPath.
          type: string
          minLength: 1
          maxLength: 1024
        ServerLaunchPath:
          description: This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.
          type: string
          minLength: 1
          maxLength: 1024
      required:
        - Name
      x-stackql-resource-name: fleet
      x-stackql-primaryIdentifier:
        - FleetId
    AutoScalingPolicy:
      type: object
      description: Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
      properties:
        EstimatedInstanceWarmup:
          $ref: '#/components/schemas/EstimatedInstanceWarmup'
        TargetTrackingConfiguration:
          $ref: '#/components/schemas/TargetTrackingConfiguration'
      required:
        - TargetTrackingConfiguration
      additionalProperties: false
    EstimatedInstanceWarmup:
      type: number
      description: Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ.
    TargetTrackingConfiguration:
      type: object
      description: Settings for a target-based scaling policy applied to Auto Scaling group.
      properties:
        TargetValue:
          $ref: '#/components/schemas/TargetValue'
      required:
        - TargetValue
      additionalProperties: false
    TargetValue:
      type: number
      description: Desired value to use with a game server group target-based scaling policy.
    BalancingStrategy:
      type: string
      description: The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
      enum:
        - SPOT_ONLY
        - SPOT_PREFERRED
        - ON_DEMAND_ONLY
    DeleteOption:
      description: The type of delete to perform.
      type: string
      enum:
        - SAFE_DELETE
        - FORCE_DELETE
        - RETAIN
    GameServerGroupName:
      type: string
      description: An identifier for the new game server group.
      pattern: '[a-zA-Z0-9-\.]+'
      minLength: 1
      maxLength: 128
    GameServerProtectionPolicy:
      type: string
      description: A flag that indicates whether instances in the game server group are protected from early termination.
      enum:
        - NO_PROTECTION
        - FULL_PROTECTION
    GameServerGroupArn:
      description: A generated unique ID for the game server group.
      type: string
      pattern: ^arn:.*:gameservergroup\/[a-zA-Z0-9-\.]*
      minLength: 1
      maxLength: 256
    InstanceDefinitions:
      type: array
      description: A set of EC2 instance types to use when creating instances in the group.
      items:
        $ref: '#/components/schemas/InstanceDefinition'
      maxItems: 20
      minItems: 2
      x-insertionOrder: false
    InstanceDefinition:
      type: object
      description: An allowed instance type for your game server group.
      properties:
        InstanceType:
          $ref: '#/components/schemas/InstanceType'
        WeightedCapacity:
          $ref: '#/components/schemas/WeightedCapacity'
      required:
        - InstanceType
      additionalProperties: false
    InstanceType:
      type: string
      description: An EC2 instance type designation.
    WeightedCapacity:
      type: string
      description: Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group.
      pattern: ^[\u0031-\u0039][\u0030-\u0039]{0,2}$
    LaunchTemplate:
      type: object
      description: The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
      properties:
        LaunchTemplateId:
          $ref: '#/components/schemas/LaunchTemplateId'
        LaunchTemplateName:
          $ref: '#/components/schemas/LaunchTemplateName'
        Version:
          $ref: '#/components/schemas/Version'
      additionalProperties: false
    LaunchTemplateId:
      type: string
      description: A unique identifier for an existing EC2 launch template.
    LaunchTemplateName:
      type: string
      description: A readable identifier for an existing EC2 launch template.
    Version:
      type: string
      description: The version of the EC2 launch template to use.
    MaxSize:
      type: number
      description: The maximum number of instances allowed in the EC2 Auto Scaling group.
      minimum: 1
    MinSize:
      type: number
      description: The minimum number of instances allowed in the EC2 Auto Scaling group.
      minimum: 0
    RoleArn:
      type: string
      description: The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
      pattern: ^arn:.*:role\/[\w+=,.@-]+
      minLength: 1
      maxLength: 256
    Tags:
      type: array
      description: A list of labels to assign to the new game server group resource.
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 0
      maxItems: 200
      x-insertionOrder: false
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    VpcSubnets:
      type: array
      description: A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
      items:
        type: string
        pattern: ^subnet-[0-9a-z]+$
        minLength: 15
        maxLength: 24
      minItems: 1
      maxItems: 20
      x-insertionOrder: false
    GameServerGroup:
      type: object
      properties:
        AutoScalingGroupArn:
          description: A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
          $ref: '#/components/schemas/AutoScalingGroupArn'
        AutoScalingPolicy:
          description: Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
          $ref: '#/components/schemas/AutoScalingPolicy'
        BalancingStrategy:
          description: The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
          $ref: '#/components/schemas/BalancingStrategy'
        DeleteOption:
          description: The type of delete to perform.
          $ref: '#/components/schemas/DeleteOption'
        GameServerGroupArn:
          description: A generated unique ID for the game server group.
          $ref: '#/components/schemas/GameServerGroupArn'
        GameServerGroupName:
          description: An identifier for the new game server group.
          $ref: '#/components/schemas/GameServerGroupName'
        GameServerProtectionPolicy:
          description: A flag that indicates whether instances in the game server group are protected from early termination.
          $ref: '#/components/schemas/GameServerProtectionPolicy'
        InstanceDefinitions:
          description: A set of EC2 instance types to use when creating instances in the group.
          $ref: '#/components/schemas/InstanceDefinitions'
        LaunchTemplate:
          description: The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
          $ref: '#/components/schemas/LaunchTemplate'
        MaxSize:
          description: The maximum number of instances allowed in the EC2 Auto Scaling group.
          $ref: '#/components/schemas/MaxSize'
        MinSize:
          description: The minimum number of instances allowed in the EC2 Auto Scaling group.
          $ref: '#/components/schemas/MinSize'
        RoleArn:
          description: The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
          $ref: '#/components/schemas/RoleArn'
        Tags:
          description: A list of labels to assign to the new game server group resource.
          $ref: '#/components/schemas/Tags'
        VpcSubnets:
          description: A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
          $ref: '#/components/schemas/VpcSubnets'
      required:
        - GameServerGroupName
        - InstanceDefinitions
        - RoleArn
      x-stackql-resource-name: game_server_group
      x-stackql-primaryIdentifier:
        - GameServerGroupArn
    AutoScalingGroupArn:
      type: string
      description: A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
      minLength: 0
      maxLength: 256
      pattern: "[ -퟿-�𐀀-􏿿\r\n\t]*"
    CreationTime:
      type: string
      description: A timestamp that indicates when this data object was created.
    LastUpdatedTime:
      type: string
      description: A timestamp that indicates when this game server group was last updated.
    Status:
      type: string
      description: The current status of the game server group.
      enum:
        - NEW
        - ACTIVATING
        - ACTIVE
        - DELETE_SCHEDULED
        - DELETING
        - DELETED
        - ERROR
    StatusReason:
      type: string
      description: Additional information about the current game server group status.
      minLength: 1
      maxLength: 1024
    SuspendedActions:
      type: array
      items:
        type: string
        enum:
          - REPLACE_INSTANCE_TYPES
    PlayerLatencyPolicy:
      type: object
      additionalProperties: false
      properties:
        PolicyDurationSeconds:
          type: integer
        MaximumIndividualPlayerLatencyMilliseconds:
          type: integer
    Destination:
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          type: string
    FilterConfiguration:
      type: object
      additionalProperties: false
      properties:
        AllowedLocations:
          type: array
          uniqueItems: false
          items:
            type: string
    PriorityConfiguration:
      type: object
      additionalProperties: false
      properties:
        PriorityOrder:
          type: array
          uniqueItems: false
          items:
            type: string
        LocationOrder:
          type: array
          uniqueItems: false
          items:
            type: string
    GameSessionQueue:
      type: object
      properties:
        TimeoutInSeconds:
          type: integer
        PlayerLatencyPolicies:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/PlayerLatencyPolicy'
        Destinations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Destination'
        NotificationTarget:
          type: string
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
        Id:
          type: string
        Arn:
          type: string
        CustomEventData:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
        PriorityConfiguration:
          $ref: '#/components/schemas/PriorityConfiguration'
      required:
        - Name
      x-stackql-resource-name: game_session_queue
      x-stackql-primaryIdentifier:
        - Id
    GameProperty:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    MatchmakingConfiguration:
      type: object
      properties:
        GameProperties:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/GameProperty'
        GameSessionData:
          type: string
        Description:
          type: string
        AcceptanceTimeoutSeconds:
          type: integer
        NotificationTarget:
          type: string
        CustomEventData:
          type: string
        Name:
          type: string
        AdditionalPlayerCount:
          type: integer
        BackfillMode:
          type: string
        RequestTimeoutSeconds:
          type: integer
        AcceptanceRequired:
          type: boolean
        FlexMatchMode:
          type: string
        Id:
          type: string
        Arn:
          type: string
        RuleSetName:
          type: string
        GameSessionQueueArns:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RequestTimeoutSeconds
        - AcceptanceRequired
        - RuleSetName
        - Name
      x-stackql-resource-name: matchmaking_configuration
      x-stackql-primaryIdentifier:
        - Id
    MatchmakingRuleSet:
      type: object
      properties:
        RuleSetBody:
          type: string
        Id:
          type: string
        Arn:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - RuleSetBody
        - Name
      x-stackql-resource-name: matchmaking_rule_set
      x-stackql-primaryIdentifier:
        - Id
    S3Location:
      type: object
      additionalProperties: false
      properties:
        ObjectVersion:
          type: string
        Bucket:
          type: string
        Key:
          type: string
        RoleArn:
          type: string
      required:
        - Bucket
        - Key
        - RoleArn
    Script:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        StorageLocation:
          $ref: '#/components/schemas/S3Location'
        Version:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - StorageLocation
      x-stackql-resource-name: script
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    aliases:
      name: aliases
      id: aws.gamelift.aliases
      x-cfn-schema-name: Alias
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AliasId') as alias_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::Alias'
    alias:
      name: alias
      id: aws.gamelift.alias
      x-cfn-schema-name: Alias
      x-type: get
      x-identifiers:
        - AliasId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RoutingStrategy.Message') as routing_strategy_message,
              JSON_EXTRACT(Properties, '$.RoutingStrategy.FleetId') as routing_strategy_fleet_id,
              JSON_EXTRACT(Properties, '$.RoutingStrategy.Type') as routing_strategy_type,
              JSON_EXTRACT(Properties, '$.AliasId') as alias_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::Alias'
    builds:
      name: builds
      id: aws.gamelift.builds
      x-cfn-schema-name: Build
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BuildId') as build_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::Build'
    build:
      name: build
      id: aws.gamelift.build
      x-cfn-schema-name: Build
      x-type: get
      x-identifiers:
        - BuildId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BuildId') as build_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.OperatingSystem') as operating_system,
              JSON_EXTRACT(Properties, '$.StorageLocation.Bucket') as storage_location_bucket,
              JSON_EXTRACT(Properties, '$.StorageLocation.Key') as storage_location_key,
              JSON_EXTRACT(Properties, '$.StorageLocation.ObjectVersion') as storage_location_object_version,
              JSON_EXTRACT(Properties, '$.StorageLocation.RoleArn') as storage_location_role_arn,
              JSON_EXTRACT(Properties, '$.Version') as version
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::Build'
    locations:
      name: locations
      id: aws.gamelift.locations
      x-cfn-schema-name: Location
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocationName') as location_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::Location'
    location:
      name: location
      id: aws.gamelift.location
      x-cfn-schema-name: Location
      x-type: get
      x-identifiers:
        - LocationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocationName') as location_name,
              JSON_EXTRACT(Properties, '$.LocationArn') as location_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::Location'
    fleets:
      name: fleets
      id: aws.gamelift.fleets
      x-cfn-schema-name: Fleet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::Fleet'
    fleet:
      name: fleet
      id: aws.gamelift.fleet
      x-cfn-schema-name: Fleet
      x-type: get
      x-identifiers:
        - FleetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AnywhereConfiguration.Cost') as anywhere_configuration_cost,
              JSON_EXTRACT(Properties, '$.CertificateConfiguration.CertificateType') as certificate_configuration_certificate_type,
              JSON_EXTRACT(Properties, '$.ComputeType') as compute_type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DesiredEC2Instances') as desired_ec2_instances,
              JSON_EXTRACT(Properties, '$.EC2InboundPermissions') as e_c2_inbound_permissions,
              JSON_EXTRACT(Properties, '$.EC2InstanceType') as e_c2_instance_type,
              JSON_EXTRACT(Properties, '$.FleetType') as fleet_type,
              JSON_EXTRACT(Properties, '$.InstanceRoleARN') as instance_role_ar_n,
              JSON_EXTRACT(Properties, '$.Locations') as locations,
              JSON_EXTRACT(Properties, '$.LogPaths') as log_paths,
              JSON_EXTRACT(Properties, '$.MaxSize') as max_size,
              JSON_EXTRACT(Properties, '$.MetricGroups') as metric_groups,
              JSON_EXTRACT(Properties, '$.MinSize') as min_size,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NewGameSessionProtectionPolicy') as new_game_session_protection_policy,
              JSON_EXTRACT(Properties, '$.PeerVpcAwsAccountId') as peer_vpc_aws_account_id,
              JSON_EXTRACT(Properties, '$.PeerVpcId') as peer_vpc_id,
              JSON_EXTRACT(Properties, '$.ResourceCreationLimitPolicy.NewGameSessionsPerCreator') as resource_creation_limit_policy_new_game_sessions_per_creator,
              JSON_EXTRACT(Properties, '$.ResourceCreationLimitPolicy.PolicyPeriodInMinutes') as resource_creation_limit_policy_policy_period_in_minutes,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.BuildId') as build_id,
              JSON_EXTRACT(Properties, '$.ScriptId') as script_id,
              JSON_EXTRACT(Properties, '$.RuntimeConfiguration.GameSessionActivationTimeoutSeconds') as runtime_configuration_game_session_activation_timeout_seconds,
              JSON_EXTRACT(Properties, '$.RuntimeConfiguration.MaxConcurrentGameSessionActivations') as runtime_configuration_max_concurrent_game_session_activations,
              JSON_EXTRACT(Properties, '$.RuntimeConfiguration.ServerProcesses') as runtime_configuration_server_processes,
              JSON_EXTRACT(Properties, '$.ServerLaunchParameters') as server_launch_parameters,
              JSON_EXTRACT(Properties, '$.ServerLaunchPath') as server_launch_path
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::Fleet'
    game_server_groups:
      name: game_server_groups
      id: aws.gamelift.game_server_groups
      x-cfn-schema-name: GameServerGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GameServerGroupArn') as game_server_group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::GameServerGroup'
    game_server_group:
      name: game_server_group
      id: aws.gamelift.game_server_group
      x-cfn-schema-name: GameServerGroup
      x-type: get
      x-identifiers:
        - GameServerGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AutoScalingPolicy.EstimatedInstanceWarmup') as auto_scaling_policy_estimated_instance_warmup,
              JSON_EXTRACT(Properties, '$.AutoScalingPolicy.TargetTrackingConfiguration') as auto_scaling_policy_target_tracking_configuration,
              JSON_EXTRACT(Properties, '$.LaunchTemplate.LaunchTemplateId') as launch_template_launch_template_id,
              JSON_EXTRACT(Properties, '$.LaunchTemplate.LaunchTemplateName') as launch_template_launch_template_name,
              JSON_EXTRACT(Properties, '$.LaunchTemplate.Version') as launch_template_version
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::GameServerGroup'
    game_session_queues:
      name: game_session_queues
      id: aws.gamelift.game_session_queues
      x-cfn-schema-name: GameSessionQueue
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::GameSessionQueue'
    game_session_queue:
      name: game_session_queue
      id: aws.gamelift.game_session_queue
      x-cfn-schema-name: GameSessionQueue
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TimeoutInSeconds') as timeout_in_seconds,
              JSON_EXTRACT(Properties, '$.PlayerLatencyPolicies') as player_latency_policies,
              JSON_EXTRACT(Properties, '$.Destinations') as destinations,
              JSON_EXTRACT(Properties, '$.NotificationTarget') as notification_target,
              JSON_EXTRACT(Properties, '$.FilterConfiguration.AllowedLocations') as filter_configuration_allowed_locations,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CustomEventData') as custom_event_data,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PriorityConfiguration.PriorityOrder') as priority_configuration_priority_order,
              JSON_EXTRACT(Properties, '$.PriorityConfiguration.LocationOrder') as priority_configuration_location_order
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::GameSessionQueue'
    matchmaking_configurations:
      name: matchmaking_configurations
      id: aws.gamelift.matchmaking_configurations
      x-cfn-schema-name: MatchmakingConfiguration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::MatchmakingConfiguration'
    matchmaking_configuration:
      name: matchmaking_configuration
      id: aws.gamelift.matchmaking_configuration
      x-cfn-schema-name: MatchmakingConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GameProperties') as game_properties,
              JSON_EXTRACT(Properties, '$.GameSessionData') as game_session_data,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AcceptanceTimeoutSeconds') as acceptance_timeout_seconds,
              JSON_EXTRACT(Properties, '$.NotificationTarget') as notification_target,
              JSON_EXTRACT(Properties, '$.CustomEventData') as custom_event_data,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AdditionalPlayerCount') as additional_player_count,
              JSON_EXTRACT(Properties, '$.BackfillMode') as backfill_mode,
              JSON_EXTRACT(Properties, '$.RequestTimeoutSeconds') as request_timeout_seconds,
              JSON_EXTRACT(Properties, '$.AcceptanceRequired') as acceptance_required,
              JSON_EXTRACT(Properties, '$.FlexMatchMode') as flex_match_mode,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RuleSetName') as rule_set_name,
              JSON_EXTRACT(Properties, '$.GameSessionQueueArns') as game_session_queue_arns,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::MatchmakingConfiguration'
    matchmaking_rule_sets:
      name: matchmaking_rule_sets
      id: aws.gamelift.matchmaking_rule_sets
      x-cfn-schema-name: MatchmakingRuleSet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::MatchmakingRuleSet'
    matchmaking_rule_set:
      name: matchmaking_rule_set
      id: aws.gamelift.matchmaking_rule_set
      x-cfn-schema-name: MatchmakingRuleSet
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleSetBody') as rule_set_body,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::MatchmakingRuleSet'
    scripts:
      name: scripts
      id: aws.gamelift.scripts
      x-cfn-schema-name: Script
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GameLift::Script'
    script:
      name: script
      id: aws.gamelift.script
      x-cfn-schema-name: Script
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StorageLocation.ObjectVersion') as storage_location_object_version,
              JSON_EXTRACT(Properties, '$.StorageLocation.Bucket') as storage_location_bucket,
              JSON_EXTRACT(Properties, '$.StorageLocation.Key') as storage_location_key,
              JSON_EXTRACT(Properties, '$.StorageLocation.RoleArn') as storage_location_role_arn,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GameLift::Script'
