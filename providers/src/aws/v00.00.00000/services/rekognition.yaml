openapi: 3.0.0
info:
  title: Rekognition
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Arn:
      description: The ARN of the stream processor
      type: string
      maxLength: 2048
    CollectionId:
      description: The name of the collection
      type: string
      maxLength: 255
      pattern: \A[a-zA-Z0-9_\.\-]+$
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
          pattern: \A(?!aws:)[a-zA-Z0-9+\-=\._\:\/@]+$
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
          pattern: \A[a-zA-Z0-9+\-=\._\:\/@]+$
      required:
        - Key
        - Value
      additionalProperties: false
    Collection:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        CollectionId:
          $ref: '#/components/schemas/CollectionId'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - CollectionId
      x-stackql-resource-name: collection
      description: The AWS::Rekognition::Collection type creates an Amazon Rekognition Collection. A collection is a logical grouping of information about detected faces which can later be referenced for searches on the group
      x-type-name: AWS::Rekognition::Collection
      x-stackql-primary-identifier:
        - CollectionId
      x-create-only-properties:
        - CollectionId
      x-read-only-properties:
        - Arn
      x-required-properties:
        - CollectionId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - rekognition:ListTagsForResource
          - rekognition:TagResource
          - rekognition:UntagResource
      x-required-permissions:
        create:
          - rekognition:CreateCollection
          - rekognition:DescribeCollection
          - rekognition:ListTagsForResource
          - rekognition:TagResource
        read:
          - rekognition:DescribeCollection
          - rekognition:ListTagsForResource
        update:
          - rekognition:TagResource
          - rekognition:UntagResource
          - rekognition:DescribeCollection
          - rekognition:ListTagsForResource
        delete:
          - rekognition:DeleteCollection
        list:
          - rekognition:ListCollections
    ProjectName:
      description: The name of the project
      type: string
      minLength: 1
      maxLength: 255
      pattern: '[a-zA-Z0-9][a-zA-Z0-9_\-]*'
    Project:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        ProjectName:
          $ref: '#/components/schemas/ProjectName'
      required:
        - ProjectName
      x-stackql-resource-name: project
      description: The AWS::Rekognition::Project type creates an Amazon Rekognition CustomLabels Project. A project is a grouping of the resources needed to create and manage Dataset and ProjectVersions.
      x-type-name: AWS::Rekognition::Project
      x-stackql-primary-identifier:
        - ProjectName
      x-create-only-properties:
        - ProjectName
      x-read-only-properties:
        - Arn
      x-required-properties:
        - ProjectName
      x-required-permissions:
        create:
          - rekognition:CreateProject
        read:
          - rekognition:DescribeProjects
        update: []
        delete:
          - rekognition:DescribeProjects
          - rekognition:DeleteProject
        list:
          - rekognition:DescribeProjects
    KinesisVideoStream:
      description: The Kinesis Video Stream that streams the source video.
      type: object
      properties:
        Arn:
          description: ARN of the Kinesis Video Stream that streams the source video.
          type: string
          maxLength: 2048
          pattern: (^arn:([a-z\d-]+):kinesisvideo:([a-z\d-]+):\d{12}:.+$)
      required:
        - Arn
      additionalProperties: false
    S3Destination:
      description: The S3 location in customer's account where inference output & artifacts are stored, as part of connected home feature.
      type: object
      properties:
        BucketName:
          description: Name of the S3 bucket.
          type: string
          maxLength: 63
        ObjectKeyPrefix:
          description: The object key prefix path where the results will be stored. Default is no prefix path
          type: string
          maxLength: 256
      required:
        - BucketName
      additionalProperties: false
    KinesisDataStream:
      description: The Amazon Kinesis Data Stream stream to which the Amazon Rekognition stream processor streams the analysis results, as part of face search feature.
      type: object
      properties:
        Arn:
          description: ARN of the Kinesis Data Stream stream.
          type: string
          maxLength: 2048
          pattern: (^arn:([a-z\d-]+):kinesis:([a-z\d-]+):\d{12}:.+$)
      required:
        - Arn
      additionalProperties: false
    Labels:
      description: List of labels that need to be detected in the video stream. Current supported values are PERSON, PET, PACKAGE, ALL.
      type: array
      uniqueItems: true
      x-insertionOrder: false
      minItems: 1
      items:
        type: string
        minLength: 1
        maxLength: 128
    ConnectedHomeSettings:
      description: Connected home settings to use on a streaming video. Note that either ConnectedHomeSettings or FaceSearchSettings should be set. Not both
      type: object
      properties:
        Labels:
          $ref: '#/components/schemas/Labels'
        MinConfidence:
          description: Minimum object class match confidence score that must be met to return a result for a recognized object.
          type: number
          minimum: 0
          maximum: 100
      required:
        - Labels
      additionalProperties: false
    FaceSearchSettings:
      description: Face search settings to use on a streaming video. Note that either FaceSearchSettings or ConnectedHomeSettings should be set. Not both
      type: object
      properties:
        CollectionId:
          description: The ID of a collection that contains faces that you want to search for.
          type: string
          maxLength: 255
          pattern: \A[a-zA-Z0-9_\.\-]+$
        FaceMatchThreshold:
          description: Minimum face match confidence score percentage that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted.
          type: number
          minimum: 0
          maximum: 100
      required:
        - CollectionId
      additionalProperties: false
    NotificationChannel:
      description: The ARN of the SNS notification channel where events of interests are published, as part of connected home feature.
      type: object
      properties:
        Arn:
          description: ARN of the SNS topic.
          type: string
          maxLength: 2048
      required:
        - Arn
      additionalProperties: false
    Point:
      description: An (X, Y) cartesian coordinate denoting a point on the frame
      type: object
      properties:
        X:
          description: The X coordinate of the point.
          type: number
        'Y':
          description: The Y coordinate of the point.
          type: number
      required:
        - X
        - 'Y'
      additionalProperties: false
    Polygon:
      description: A polygon showing a region of interest. Note that the ordering of the Point entries matter in defining the polygon
      type: array
      uniqueItems: true
      x-insertionOrder: true
      minItems: 3
      items:
        $ref: '#/components/schemas/Point'
    BoundingBox:
      description: A bounding box denoting a region of interest in the frame to be analyzed.
      type: object
      properties:
        Height:
          type: number
          minimum: 0
          maximum: 100
        Width:
          type: number
          minimum: 0
          maximum: 100
        Left:
          type: number
          minimum: 0
          maximum: 100
        Top:
          type: number
          minimum: 0
          maximum: 100
      required:
        - Height
        - Width
        - Left
        - Top
      additionalProperties: false
    DataSharingPreference:
      description: Indicates whether Rekognition is allowed to store the video stream data for model-training.
      properties:
        OptIn:
          description: Flag to enable data-sharing
          type: boolean
      required:
        - OptIn
      type: object
      additionalProperties: false
    StreamProcessor:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
        Name:
          description: Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
          type: string
          minLength: 1
          maxLength: 128
          pattern: '[a-zA-Z0-9_.\-]+'
        KmsKeyId:
          description: The KMS key that is used by Rekognition to encrypt any intermediate customer metadata and store in the customer's S3 bucket.
          type: string
        RoleArn:
          description: ARN of the IAM role that allows access to the stream processor, and provides Rekognition read permissions for KVS stream and write permissions to S3 bucket and SNS topic.
          type: string
          maxLength: 2048
          pattern: arn:aws(-[\w]+)*:iam::[0-9]{12}:role/.*
        KinesisVideoStream:
          $ref: '#/components/schemas/KinesisVideoStream'
        FaceSearchSettings:
          $ref: '#/components/schemas/FaceSearchSettings'
        ConnectedHomeSettings:
          $ref: '#/components/schemas/ConnectedHomeSettings'
        KinesisDataStream:
          $ref: '#/components/schemas/KinesisDataStream'
        S3Destination:
          $ref: '#/components/schemas/S3Destination'
        NotificationChannel:
          $ref: '#/components/schemas/NotificationChannel'
        DataSharingPreference:
          $ref: '#/components/schemas/DataSharingPreference'
        PolygonRegionsOfInterest:
          description: The PolygonRegionsOfInterest specifies a set of polygon areas of interest in the video frames to analyze, as part of connected home feature. Each polygon is in turn, an ordered list of Point
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          items:
            $ref: '#/components/schemas/Polygon'
        BoundingBoxRegionsOfInterest:
          description: The BoundingBoxRegionsOfInterest specifies an array of bounding boxes of interest in the video frames to analyze, as part of connected home feature. If an object is partially in a region of interest, Rekognition will tag it as detected if the overlap of the object with the region-of-interest is greater than 20%.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          items:
            $ref: '#/components/schemas/BoundingBox'
        Status:
          description: Current status of the stream processor.
          type: string
        StatusMessage:
          description: Detailed status message about the stream processor.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RoleArn
        - KinesisVideoStream
      x-stackql-resource-name: stream_processor
      description: |+
        The AWS::Rekognition::StreamProcessor type is used to create an Amazon Rekognition StreamProcessor that you can use to analyze streaming videos.

      x-type-name: AWS::Rekognition::StreamProcessor
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - KmsKeyId
        - RoleArn
        - KinesisVideoStream
        - ConnectedHomeSettings
        - FaceSearchSettings
        - KinesisDataStream
        - S3Destination
        - NotificationChannel
        - BoundingBoxRegionsOfInterest
        - PolygonRegionsOfInterest
        - DataSharingPreference
      x-read-only-properties:
        - Arn
        - Status
        - StatusMessage
      x-required-properties:
        - RoleArn
        - KinesisVideoStream
      x-replacement-strategy: delete_then_create
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
        permissions:
          - rekognition:TagResource
          - rekognition:UntagResource
          - rekognition:ListTagsForResource
      x-required-permissions:
        create:
          - rekognition:CreateStreamProcessor
          - iam:PassRole
          - rekognition:DescribeStreamProcessor
          - rekognition:ListTagsForResource
          - rekognition:TagResource
        read:
          - rekognition:DescribeStreamProcessor
          - rekognition:ListTagsForResource
        update:
          - rekognition:TagResource
          - rekognition:UntagResource
          - rekognition:ListTagsForResource
          - rekognition:DescribeStreamProcessor
        delete:
          - rekognition:DeleteStreamProcessor
        list:
          - rekognition:ListStreamProcessors
    CreateCollectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              $ref: '#/components/schemas/Arn'
            CollectionId:
              $ref: '#/components/schemas/CollectionId'
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateCollectionRequest
      type: object
      required: []
    CreateProjectRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              $ref: '#/components/schemas/Arn'
            ProjectName:
              $ref: '#/components/schemas/ProjectName'
          x-stackQL-stringOnly: true
      x-title: CreateProjectRequest
      type: object
      required: []
    CreateStreamProcessorRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              $ref: '#/components/schemas/Arn'
            Name:
              description: Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
              type: string
              minLength: 1
              maxLength: 128
              pattern: '[a-zA-Z0-9_.\-]+'
            KmsKeyId:
              description: The KMS key that is used by Rekognition to encrypt any intermediate customer metadata and store in the customer's S3 bucket.
              type: string
            RoleArn:
              description: ARN of the IAM role that allows access to the stream processor, and provides Rekognition read permissions for KVS stream and write permissions to S3 bucket and SNS topic.
              type: string
              maxLength: 2048
              pattern: arn:aws(-[\w]+)*:iam::[0-9]{12}:role/.*
            KinesisVideoStream:
              $ref: '#/components/schemas/KinesisVideoStream'
            FaceSearchSettings:
              $ref: '#/components/schemas/FaceSearchSettings'
            ConnectedHomeSettings:
              $ref: '#/components/schemas/ConnectedHomeSettings'
            KinesisDataStream:
              $ref: '#/components/schemas/KinesisDataStream'
            S3Destination:
              $ref: '#/components/schemas/S3Destination'
            NotificationChannel:
              $ref: '#/components/schemas/NotificationChannel'
            DataSharingPreference:
              $ref: '#/components/schemas/DataSharingPreference'
            PolygonRegionsOfInterest:
              description: The PolygonRegionsOfInterest specifies a set of polygon areas of interest in the video frames to analyze, as part of connected home feature. Each polygon is in turn, an ordered list of Point
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              items:
                $ref: '#/components/schemas/Polygon'
            BoundingBoxRegionsOfInterest:
              description: The BoundingBoxRegionsOfInterest specifies an array of bounding boxes of interest in the video frames to analyze, as part of connected home feature. If an object is partially in a region of interest, Rekognition will tag it as detected if the overlap of the object with the region-of-interest is greater than 20%.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              items:
                $ref: '#/components/schemas/BoundingBox'
            Status:
              description: Current status of the stream processor.
              type: string
            StatusMessage:
              description: Detailed status message about the stream processor.
              type: string
            Tags:
              description: An array of key-value pairs to apply to this resource.
              type: array
              uniqueItems: true
              x-insertionOrder: false
              minItems: 0
              maxItems: 200
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateStreamProcessorRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    collections:
      name: collections
      id: aws.rekognition.collections
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::Rekognition::Collection
      x-identifiers:
        - CollectionId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Collection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/collections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/collections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/collections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CollectionId') as collection_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::Collection'
              AND data__Identifier = '<CollectionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CollectionId') as collection_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Rekognition::Collection'
                AND detail.data__TypeName = 'AWS::Rekognition::Collection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CollectionId') as collection_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::Collection'
                  AND data__Identifier = '<CollectionId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CollectionId') as collection_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Rekognition::Collection'
                    AND detail.data__TypeName = 'AWS::Rekognition::Collection'
                    AND listing.region = 'us-east-1'
    collections_list_only:
      name: collections_list_only
      id: aws.rekognition.collections_list_only
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::Rekognition::Collection
      x-identifiers:
        - CollectionId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionId') as collection_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::Collection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CollectionId') as collection_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::Collection'
                AND region = 'us-east-1'
    collection_tags:
      name: collection_tags
      id: aws.rekognition.collection_tags
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::Rekognition::Collection
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CollectionId') as collection_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Rekognition::Collection'
              AND detail.data__TypeName = 'AWS::Rekognition::Collection'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CollectionId') as collection_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Rekognition::Collection'
                AND detail.data__TypeName = 'AWS::Rekognition::Collection'
                AND listing.region = 'us-east-1'
    projects:
      name: projects
      id: aws.rekognition.projects
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::Rekognition::Project
      x-identifiers:
        - ProjectName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/delete_resource'
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ProjectName') as project_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::Project'
              AND data__Identifier = '<ProjectName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ProjectName') as project_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Rekognition::Project'
                AND detail.data__TypeName = 'AWS::Rekognition::Project'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ProjectName') as project_name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::Project'
                  AND data__Identifier = '<ProjectName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ProjectName') as project_name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Rekognition::Project'
                    AND detail.data__TypeName = 'AWS::Rekognition::Project'
                    AND listing.region = 'us-east-1'
    projects_list_only:
      name: projects_list_only
      id: aws.rekognition.projects_list_only
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::Rekognition::Project
      x-identifiers:
        - ProjectName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProjectName') as project_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::Project'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProjectName') as project_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::Project'
                AND region = 'us-east-1'
    stream_processors:
      name: stream_processors
      id: aws.rekognition.stream_processors
      x-cfn-schema-name: StreamProcessor
      x-cfn-type-name: AWS::Rekognition::StreamProcessor
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__StreamProcessor&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::StreamProcessor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::StreamProcessor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::Rekognition::StreamProcessor"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/stream_processors/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/stream_processors/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/stream_processors/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.KinesisVideoStream') as kinesis_video_stream,
              JSON_EXTRACT(Properties, '$.FaceSearchSettings') as face_search_settings,
              JSON_EXTRACT(Properties, '$.ConnectedHomeSettings') as connected_home_settings,
              JSON_EXTRACT(Properties, '$.KinesisDataStream') as kinesis_data_stream,
              JSON_EXTRACT(Properties, '$.S3Destination') as s3_destination,
              JSON_EXTRACT(Properties, '$.NotificationChannel') as notification_channel,
              JSON_EXTRACT(Properties, '$.DataSharingPreference') as data_sharing_preference,
              JSON_EXTRACT(Properties, '$.PolygonRegionsOfInterest') as polygon_regions_of_interest,
              JSON_EXTRACT(Properties, '$.BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::StreamProcessor'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.KinesisVideoStream') as kinesis_video_stream,
                JSON_EXTRACT(detail.Properties, '$.FaceSearchSettings') as face_search_settings,
                JSON_EXTRACT(detail.Properties, '$.ConnectedHomeSettings') as connected_home_settings,
                JSON_EXTRACT(detail.Properties, '$.KinesisDataStream') as kinesis_data_stream,
                JSON_EXTRACT(detail.Properties, '$.S3Destination') as s3_destination,
                JSON_EXTRACT(detail.Properties, '$.NotificationChannel') as notification_channel,
                JSON_EXTRACT(detail.Properties, '$.DataSharingPreference') as data_sharing_preference,
                JSON_EXTRACT(detail.Properties, '$.PolygonRegionsOfInterest') as polygon_regions_of_interest,
                JSON_EXTRACT(detail.Properties, '$.BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                AND detail.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'KinesisVideoStream') as kinesis_video_stream,
                  json_extract_path_text(Properties, 'FaceSearchSettings') as face_search_settings,
                  json_extract_path_text(Properties, 'ConnectedHomeSettings') as connected_home_settings,
                  json_extract_path_text(Properties, 'KinesisDataStream') as kinesis_data_stream,
                  json_extract_path_text(Properties, 'S3Destination') as s3_destination,
                  json_extract_path_text(Properties, 'NotificationChannel') as notification_channel,
                  json_extract_path_text(Properties, 'DataSharingPreference') as data_sharing_preference,
                  json_extract_path_text(Properties, 'PolygonRegionsOfInterest') as polygon_regions_of_interest,
                  json_extract_path_text(Properties, 'BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'StatusMessage') as status_message,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::Rekognition::StreamProcessor'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'KinesisVideoStream') as kinesis_video_stream,
                    json_extract_path_text(detail.Properties, 'FaceSearchSettings') as face_search_settings,
                    json_extract_path_text(detail.Properties, 'ConnectedHomeSettings') as connected_home_settings,
                    json_extract_path_text(detail.Properties, 'KinesisDataStream') as kinesis_data_stream,
                    json_extract_path_text(detail.Properties, 'S3Destination') as s3_destination,
                    json_extract_path_text(detail.Properties, 'NotificationChannel') as notification_channel,
                    json_extract_path_text(detail.Properties, 'DataSharingPreference') as data_sharing_preference,
                    json_extract_path_text(detail.Properties, 'PolygonRegionsOfInterest') as polygon_regions_of_interest,
                    json_extract_path_text(detail.Properties, 'BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'StatusMessage') as status_message,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                    AND detail.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                    AND listing.region = 'us-east-1'
    stream_processors_list_only:
      name: stream_processors_list_only
      id: aws.rekognition.stream_processors_list_only
      x-cfn-schema-name: StreamProcessor
      x-cfn-type-name: AWS::Rekognition::StreamProcessor
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::StreamProcessor'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::Rekognition::StreamProcessor'
                AND region = 'us-east-1'
    stream_processor_tags:
      name: stream_processor_tags
      id: aws.rekognition.stream_processor_tags
      x-cfn-schema-name: StreamProcessor
      x-cfn-type-name: AWS::Rekognition::StreamProcessor
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.KinesisVideoStream') as kinesis_video_stream,
              JSON_EXTRACT(detail.Properties, '$.FaceSearchSettings') as face_search_settings,
              JSON_EXTRACT(detail.Properties, '$.ConnectedHomeSettings') as connected_home_settings,
              JSON_EXTRACT(detail.Properties, '$.KinesisDataStream') as kinesis_data_stream,
              JSON_EXTRACT(detail.Properties, '$.S3Destination') as s3_destination,
              JSON_EXTRACT(detail.Properties, '$.NotificationChannel') as notification_channel,
              JSON_EXTRACT(detail.Properties, '$.DataSharingPreference') as data_sharing_preference,
              JSON_EXTRACT(detail.Properties, '$.PolygonRegionsOfInterest') as polygon_regions_of_interest,
              JSON_EXTRACT(detail.Properties, '$.BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.StatusMessage') as status_message
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::Rekognition::StreamProcessor'
              AND detail.data__TypeName = 'AWS::Rekognition::StreamProcessor'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'KinesisVideoStream') as kinesis_video_stream,
                json_extract_path_text(detail.Properties, 'FaceSearchSettings') as face_search_settings,
                json_extract_path_text(detail.Properties, 'ConnectedHomeSettings') as connected_home_settings,
                json_extract_path_text(detail.Properties, 'KinesisDataStream') as kinesis_data_stream,
                json_extract_path_text(detail.Properties, 'S3Destination') as s3_destination,
                json_extract_path_text(detail.Properties, 'NotificationChannel') as notification_channel,
                json_extract_path_text(detail.Properties, 'DataSharingPreference') as data_sharing_preference,
                json_extract_path_text(detail.Properties, 'PolygonRegionsOfInterest') as polygon_regions_of_interest,
                json_extract_path_text(detail.Properties, 'BoundingBoxRegionsOfInterest') as bounding_box_regions_of_interest,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'StatusMessage') as status_message
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                AND detail.data__TypeName = 'AWS::Rekognition::StreamProcessor'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Collection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCollection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProject
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__StreamProcessor&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateStreamProcessor
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateStreamProcessorRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
