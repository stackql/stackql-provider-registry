openapi: 3.0.0
info:
  title: VerifiedPermissions
  version: 1.0.0
paths: {}
components:
  schemas:
    CognitoGroupConfiguration:
      type: object
      properties:
        GroupEntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*$
      required:
        - GroupEntityType
      additionalProperties: false
    CognitoUserPoolConfiguration:
      type: object
      properties:
        UserPoolArn:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$
        ClientIds:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
            pattern: ^.*$
          maxItems: 1000
          minItems: 0
          x-insertionOrder: false
        GroupConfiguration:
          $ref: '#/components/schemas/CognitoGroupConfiguration'
      required:
        - UserPoolArn
      additionalProperties: false
    IdentitySourceConfiguration:
      type: object
      x-title: CognitoUserPoolConfiguration
      properties:
        CognitoUserPoolConfiguration:
          $ref: '#/components/schemas/CognitoUserPoolConfiguration'
      required:
        - CognitoUserPoolConfiguration
      additionalProperties: false
    IdentitySourceDetails:
      type: object
      properties:
        ClientIds:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
            pattern: ^.*$
          maxItems: 1000
          minItems: 0
          x-insertionOrder: false
        UserPoolArn:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$
        DiscoveryUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https://.*$
        OpenIdIssuer:
          $ref: '#/components/schemas/OpenIdIssuer'
      additionalProperties: false
    OpenIdIssuer:
      type: string
      enum:
        - COGNITO
    IdentitySource:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/IdentitySourceConfiguration'
        Details:
          $ref: '#/components/schemas/IdentitySourceDetails'
        IdentitySourceId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PrincipalEntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
      required:
        - Configuration
        - PolicyStoreId
      x-stackql-resource-name: identity_source
      description: Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
      x-type-name: AWS::VerifiedPermissions::IdentitySource
      x-stackql-primary-identifier:
        - IdentitySourceId
        - PolicyStoreId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - Details
        - IdentitySourceId
      x-required-properties:
        - Configuration
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreateIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        read:
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        update:
          - verifiedpermissions:UpdateIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        delete:
          - verifiedpermissions:DeleteIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        list:
          - verifiedpermissions:ListIdentitySources
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
    EntityIdentifier:
      type: object
      properties:
        EntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
        EntityId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
      required:
        - EntityId
        - EntityType
      additionalProperties: false
    PolicyDefinition:
      oneOf:
        - type: object
          title: Static
          properties:
            Static:
              $ref: '#/components/schemas/StaticPolicyDefinition'
          required:
            - Static
          additionalProperties: false
        - type: object
          title: TemplateLinked
          properties:
            TemplateLinked:
              $ref: '#/components/schemas/TemplateLinkedPolicyDefinition'
          required:
            - TemplateLinked
          additionalProperties: false
    PolicyType:
      type: string
      enum:
        - STATIC
        - TEMPLATE_LINKED
    StaticPolicyDefinition:
      type: object
      properties:
        Description:
          type: string
          maxLength: 150
          minLength: 0
        Statement:
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - Statement
      additionalProperties: false
    TemplateLinkedPolicyDefinition:
      type: object
      properties:
        PolicyTemplateId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        Principal:
          $ref: '#/components/schemas/EntityIdentifier'
        Resource:
          $ref: '#/components/schemas/EntityIdentifier'
      required:
        - PolicyTemplateId
      additionalProperties: false
    Policy:
      type: object
      properties:
        Definition:
          $ref: '#/components/schemas/PolicyDefinition'
        PolicyId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyType:
          $ref: '#/components/schemas/PolicyType'
      required:
        - Definition
        - PolicyStoreId
      x-stackql-resource-name: policy
      description: Definition of AWS::VerifiedPermissions::Policy Resource Type
      x-type-name: AWS::VerifiedPermissions::Policy
      x-stackql-primary-identifier:
        - PolicyId
        - PolicyStoreId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - PolicyId
        - PolicyType
      x-required-properties:
        - Definition
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicy
          - verifiedpermissions:GetPolicy
        read:
          - verifiedpermissions:GetPolicy
        update:
          - verifiedpermissions:UpdatePolicy
          - verifiedpermissions:GetPolicy
        delete:
          - verifiedpermissions:DeletePolicy
          - verifiedpermissions:GetPolicy
        list:
          - verifiedpermissions:ListPolicies
          - verifiedpermissions:GetPolicy
    ValidationMode:
      type: string
      enum:
        - 'OFF'
        - STRICT
    ValidationSettings:
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/ValidationMode'
      required:
        - Mode
      additionalProperties: false
    SchemaJson:
      type: string
    SchemaDefinition:
      type: object
      properties:
        CedarJson:
          $ref: '#/components/schemas/SchemaJson'
      additionalProperties: false
    PolicyStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2500
          minLength: 1
          pattern: ^arn:[^:]*:[^:]*:[^:]*:[^:]*:.*$
        Description:
          type: string
          maxLength: 150
          minLength: 0
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        ValidationSettings:
          $ref: '#/components/schemas/ValidationSettings'
        Schema:
          $ref: '#/components/schemas/SchemaDefinition'
      required:
        - ValidationSettings
      x-stackql-resource-name: policy_store
      description: Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
      x-type-name: AWS::VerifiedPermissions::PolicyStore
      x-stackql-primary-identifier:
        - PolicyStoreId
      x-read-only-properties:
        - Arn
        - PolicyStoreId
      x-required-properties:
        - ValidationSettings
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicyStore
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:PutSchema
        read:
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
        update:
          - verifiedpermissions:UpdatePolicyStore
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
          - verifiedpermissions:PutSchema
        delete:
          - verifiedpermissions:DeletePolicyStore
          - verifiedpermissions:GetPolicyStore
        list:
          - verifiedpermissions:ListPolicyStores
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
    PolicyTemplate:
      type: object
      properties:
        Description:
          type: string
          maxLength: 150
          minLength: 0
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyTemplateId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        Statement:
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - Statement
        - PolicyStoreId
      x-stackql-resource-name: policy_template
      description: Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
      x-type-name: AWS::VerifiedPermissions::PolicyTemplate
      x-stackql-primary-identifier:
        - PolicyStoreId
        - PolicyTemplateId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - PolicyTemplateId
      x-required-properties:
        - Statement
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        read:
          - verifiedpermissions:GetPolicyTemplate
        update:
          - verifiedpermissions:UpdatePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        delete:
          - verifiedpermissions:DeletePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        list:
          - verifiedpermissions:ListPolicyTemplates
          - verifiedpermissions:GetPolicyTemplate
  x-stackQL-resources:
    identity_sources:
      name: identity_sources
      id: aws.verifiedpermissions.identity_sources
      x-cfn-schema-name: IdentitySource
      x-type: list
      x-identifiers:
        - IdentitySourceId
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentitySourceId') as identity_source_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentitySourceId') as identity_source_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                AND region = 'us-east-1'
    identity_source:
      name: identity_source
      id: aws.verifiedpermissions.identity_source
      x-cfn-schema-name: IdentitySource
      x-type: get
      x-identifiers:
        - IdentitySourceId
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.Details') as details,
              JSON_EXTRACT(Properties, '$.IdentitySourceId') as identity_source_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PrincipalEntityType') as principal_entity_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
              AND data__Identifier = '<IdentitySourceId>|<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Configuration') as configuration,
                json_extract_path_text(Properties, 'Details') as details,
                json_extract_path_text(Properties, 'IdentitySourceId') as identity_source_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'PrincipalEntityType') as principal_entity_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                AND data__Identifier = '<IdentitySourceId>|<PolicyStoreId>'
                AND region = 'us-east-1'
    policies:
      name: policies
      id: aws.verifiedpermissions.policies
      x-cfn-schema-name: Policy
      x-type: list
      x-identifiers:
        - PolicyId
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyId') as policy_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
                AND region = 'us-east-1'
    policy:
      name: policy
      id: aws.verifiedpermissions.policy
      x-cfn-schema-name: Policy
      x-type: get
      x-identifiers:
        - PolicyId
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
              AND data__Identifier = '<PolicyId>|<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Definition') as definition,
                json_extract_path_text(Properties, 'PolicyId') as policy_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'PolicyType') as policy_type
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
                AND data__Identifier = '<PolicyId>|<PolicyStoreId>'
                AND region = 'us-east-1'
    policy_stores:
      name: policy_stores
      id: aws.verifiedpermissions.policy_stores
      x-cfn-schema-name: PolicyStore
      x-type: list
      x-identifiers:
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                AND region = 'us-east-1'
    policy_store:
      name: policy_store
      id: aws.verifiedpermissions.policy_store
      x-cfn-schema-name: PolicyStore
      x-type: get
      x-identifiers:
        - PolicyStoreId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.ValidationSettings') as validation_settings,
              JSON_EXTRACT(Properties, '$.Schema') as _schema
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
              AND data__Identifier = '<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'ValidationSettings') as validation_settings,
                json_extract_path_text(Properties, 'Schema') as _schema
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                AND data__Identifier = '<PolicyStoreId>'
                AND region = 'us-east-1'
    policy_templates:
      name: policy_templates
      id: aws.verifiedpermissions.policy_templates
      x-cfn-schema-name: PolicyTemplate
      x-type: list
      x-identifiers:
        - PolicyStoreId
        - PolicyTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyTemplateId') as policy_template_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'PolicyTemplateId') as policy_template_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                AND region = 'us-east-1'
    policy_template:
      name: policy_template
      id: aws.verifiedpermissions.policy_template
      x-cfn-schema-name: PolicyTemplate
      x-type: get
      x-identifiers:
        - PolicyStoreId
        - PolicyTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyTemplateId') as policy_template_id,
              JSON_EXTRACT(Properties, '$.Statement') as statement
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
              AND data__Identifier = '<PolicyStoreId>|<PolicyTemplateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'PolicyTemplateId') as policy_template_id,
                json_extract_path_text(Properties, 'Statement') as statement
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                AND data__Identifier = '<PolicyStoreId>|<PolicyTemplateId>'
                AND region = 'us-east-1'
