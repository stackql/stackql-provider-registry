openapi: 3.0.0
info:
  title: VerifiedPermissions
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    CognitoGroupConfiguration:
      type: object
      properties:
        GroupEntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*$
      required:
        - GroupEntityType
      additionalProperties: false
    CognitoUserPoolConfiguration:
      type: object
      properties:
        UserPoolArn:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$
        ClientIds:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
            pattern: ^.*$
          maxItems: 1000
          minItems: 0
          x-insertionOrder: false
        GroupConfiguration:
          $ref: '#/components/schemas/CognitoGroupConfiguration'
      required:
        - UserPoolArn
      additionalProperties: false
    IdentitySourceConfiguration:
      oneOf:
        - type: object
          title: CognitoUserPoolConfiguration
          properties:
            CognitoUserPoolConfiguration:
              $ref: '#/components/schemas/CognitoUserPoolConfiguration'
          required:
            - CognitoUserPoolConfiguration
          additionalProperties: false
        - type: object
          title: OpenIdConnectConfiguration
          properties:
            OpenIdConnectConfiguration:
              $ref: '#/components/schemas/OpenIdConnectConfiguration'
          required:
            - OpenIdConnectConfiguration
          additionalProperties: false
    IdentitySourceDetails:
      type: object
      properties:
        ClientIds:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
            pattern: ^.*$
          maxItems: 1000
          minItems: 0
          x-insertionOrder: false
        UserPoolArn:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^arn:[a-zA-Z0-9-]+:cognito-idp:(([a-zA-Z0-9-]+:\d{12}:userpool/[\w-]+_[0-9a-zA-Z]+))$
        DiscoveryUrl:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https://.*$
        OpenIdIssuer:
          $ref: '#/components/schemas/OpenIdIssuer'
      additionalProperties: false
    OpenIdConnectAccessTokenConfiguration:
      type: object
      properties:
        PrincipalIdClaim:
          type: string
          default: sub
          minLength: 1
        Audiences:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
          maxItems: 255
          minItems: 1
          x-insertionOrder: false
      additionalProperties: false
    OpenIdConnectConfiguration:
      type: object
      properties:
        Issuer:
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^https://.*$
        EntityIdPrefix:
          type: string
          maxLength: 100
          minLength: 1
        GroupConfiguration:
          $ref: '#/components/schemas/OpenIdConnectGroupConfiguration'
        TokenSelection:
          $ref: '#/components/schemas/OpenIdConnectTokenSelection'
      required:
        - Issuer
        - TokenSelection
      additionalProperties: false
    OpenIdConnectGroupConfiguration:
      type: object
      properties:
        GroupClaim:
          type: string
          minLength: 1
        GroupEntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^([_a-zA-Z][_a-zA-Z0-9]*::)*[_a-zA-Z][_a-zA-Z0-9]*$
      required:
        - GroupClaim
        - GroupEntityType
      additionalProperties: false
    OpenIdConnectIdentityTokenConfiguration:
      type: object
      properties:
        PrincipalIdClaim:
          type: string
          default: sub
          minLength: 1
        ClientIds:
          type: array
          items:
            type: string
            maxLength: 255
            minLength: 1
            pattern: ^.*$
          maxItems: 1000
          minItems: 0
          x-insertionOrder: false
      additionalProperties: false
    OpenIdConnectTokenSelection:
      oneOf:
        - type: object
          title: AccessTokenOnly
          properties:
            AccessTokenOnly:
              $ref: '#/components/schemas/OpenIdConnectAccessTokenConfiguration'
          required:
            - AccessTokenOnly
          additionalProperties: false
        - type: object
          title: IdentityTokenOnly
          properties:
            IdentityTokenOnly:
              $ref: '#/components/schemas/OpenIdConnectIdentityTokenConfiguration'
          required:
            - IdentityTokenOnly
          additionalProperties: false
    OpenIdIssuer:
      type: string
      enum:
        - COGNITO
    IdentitySource:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/IdentitySourceConfiguration'
        Details:
          $ref: '#/components/schemas/IdentitySourceDetails'
        IdentitySourceId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PrincipalEntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
      required:
        - Configuration
        - PolicyStoreId
      x-stackql-resource-name: identity_source
      description: Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
      x-type-name: AWS::VerifiedPermissions::IdentitySource
      x-stackql-primary-identifier:
        - IdentitySourceId
        - PolicyStoreId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - Details
        - IdentitySourceId
      x-required-properties:
        - Configuration
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreateIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        read:
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        update:
          - verifiedpermissions:UpdateIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        delete:
          - verifiedpermissions:DeleteIdentitySource
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
        list:
          - verifiedpermissions:ListIdentitySources
          - verifiedpermissions:GetIdentitySource
          - cognito-idp:DescribeUserPool
          - cognito-idp:ListUserPoolClients
    EntityIdentifier:
      type: object
      properties:
        EntityType:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
        EntityId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^.*$
      required:
        - EntityId
        - EntityType
      additionalProperties: false
    PolicyDefinition:
      oneOf:
        - type: object
          title: Static
          properties:
            Static:
              $ref: '#/components/schemas/StaticPolicyDefinition'
          required:
            - Static
          additionalProperties: false
        - type: object
          title: TemplateLinked
          properties:
            TemplateLinked:
              $ref: '#/components/schemas/TemplateLinkedPolicyDefinition'
          required:
            - TemplateLinked
          additionalProperties: false
    PolicyType:
      type: string
      enum:
        - STATIC
        - TEMPLATE_LINKED
    StaticPolicyDefinition:
      type: object
      properties:
        Description:
          type: string
          maxLength: 150
          minLength: 0
        Statement:
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - Statement
      additionalProperties: false
    TemplateLinkedPolicyDefinition:
      type: object
      properties:
        PolicyTemplateId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        Principal:
          $ref: '#/components/schemas/EntityIdentifier'
        Resource:
          $ref: '#/components/schemas/EntityIdentifier'
      required:
        - PolicyTemplateId
      additionalProperties: false
    Policy:
      type: object
      properties:
        Definition:
          $ref: '#/components/schemas/PolicyDefinition'
        PolicyId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyType:
          $ref: '#/components/schemas/PolicyType'
      required:
        - Definition
        - PolicyStoreId
      x-stackql-resource-name: policy
      description: Definition of AWS::VerifiedPermissions::Policy Resource Type
      x-type-name: AWS::VerifiedPermissions::Policy
      x-stackql-primary-identifier:
        - PolicyId
        - PolicyStoreId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - PolicyId
        - PolicyType
      x-required-properties:
        - Definition
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicy
          - verifiedpermissions:GetPolicy
        read:
          - verifiedpermissions:GetPolicy
        update:
          - verifiedpermissions:UpdatePolicy
          - verifiedpermissions:GetPolicy
        delete:
          - verifiedpermissions:DeletePolicy
          - verifiedpermissions:GetPolicy
        list:
          - verifiedpermissions:ListPolicies
          - verifiedpermissions:GetPolicy
    ValidationMode:
      type: string
      enum:
        - 'OFF'
        - STRICT
    ValidationSettings:
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/ValidationMode'
      required:
        - Mode
      additionalProperties: false
    SchemaJson:
      type: string
    SchemaDefinition:
      type: object
      properties:
        CedarJson:
          $ref: '#/components/schemas/SchemaJson'
      additionalProperties: false
    PolicyStore:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2500
          minLength: 1
          pattern: ^arn:[^:]*:[^:]*:[^:]*:[^:]*:.*$
        Description:
          type: string
          maxLength: 150
          minLength: 0
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        ValidationSettings:
          $ref: '#/components/schemas/ValidationSettings'
        Schema:
          $ref: '#/components/schemas/SchemaDefinition'
      required:
        - ValidationSettings
      x-stackql-resource-name: policy_store
      description: Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
      x-type-name: AWS::VerifiedPermissions::PolicyStore
      x-stackql-primary-identifier:
        - PolicyStoreId
      x-read-only-properties:
        - Arn
        - PolicyStoreId
      x-required-properties:
        - ValidationSettings
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicyStore
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:PutSchema
        read:
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
        update:
          - verifiedpermissions:UpdatePolicyStore
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
          - verifiedpermissions:PutSchema
        delete:
          - verifiedpermissions:DeletePolicyStore
          - verifiedpermissions:GetPolicyStore
        list:
          - verifiedpermissions:ListPolicyStores
          - verifiedpermissions:GetPolicyStore
          - verifiedpermissions:GetSchema
    PolicyTemplate:
      type: object
      properties:
        Description:
          type: string
          maxLength: 150
          minLength: 0
        PolicyStoreId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        PolicyTemplateId:
          type: string
          maxLength: 200
          minLength: 1
          pattern: ^[a-zA-Z0-9-]*$
        Statement:
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - Statement
        - PolicyStoreId
      x-stackql-resource-name: policy_template
      description: Definition of AWS::VerifiedPermissions::PolicyTemplate Resource Type
      x-type-name: AWS::VerifiedPermissions::PolicyTemplate
      x-stackql-primary-identifier:
        - PolicyStoreId
        - PolicyTemplateId
      x-create-only-properties:
        - PolicyStoreId
      x-read-only-properties:
        - PolicyTemplateId
      x-required-properties:
        - Statement
        - PolicyStoreId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - verifiedpermissions:CreatePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        read:
          - verifiedpermissions:GetPolicyTemplate
        update:
          - verifiedpermissions:UpdatePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        delete:
          - verifiedpermissions:DeletePolicyTemplate
          - verifiedpermissions:GetPolicyTemplate
        list:
          - verifiedpermissions:ListPolicyTemplates
          - verifiedpermissions:GetPolicyTemplate
    CreateIdentitySourceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Configuration:
              $ref: '#/components/schemas/IdentitySourceConfiguration'
            Details:
              $ref: '#/components/schemas/IdentitySourceDetails'
            IdentitySourceId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            PolicyStoreId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            PrincipalEntityType:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^.*$
          x-stackQL-stringOnly: true
      x-title: CreateIdentitySourceRequest
      type: object
      required: []
    CreatePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Definition:
              $ref: '#/components/schemas/PolicyDefinition'
            PolicyId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            PolicyStoreId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            PolicyType:
              $ref: '#/components/schemas/PolicyType'
          x-stackQL-stringOnly: true
      x-title: CreatePolicyRequest
      type: object
      required: []
    CreatePolicyStoreRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2500
              minLength: 1
              pattern: ^arn:[^:]*:[^:]*:[^:]*:[^:]*:.*$
            Description:
              type: string
              maxLength: 150
              minLength: 0
            PolicyStoreId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            ValidationSettings:
              $ref: '#/components/schemas/ValidationSettings'
            Schema:
              $ref: '#/components/schemas/SchemaDefinition'
          x-stackQL-stringOnly: true
      x-title: CreatePolicyStoreRequest
      type: object
      required: []
    CreatePolicyTemplateRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              maxLength: 150
              minLength: 0
            PolicyStoreId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            PolicyTemplateId:
              type: string
              maxLength: 200
              minLength: 1
              pattern: ^[a-zA-Z0-9-]*$
            Statement:
              type: string
              maxLength: 10000
              minLength: 1
          x-stackQL-stringOnly: true
      x-title: CreatePolicyTemplateRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    identity_sources:
      name: identity_sources
      id: aws.verifiedpermissions.identity_sources
      x-cfn-schema-name: IdentitySource
      x-cfn-type-name: AWS::VerifiedPermissions::IdentitySource
      x-identifiers:
        - IdentitySourceId
        - PolicyStoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IdentitySource&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::IdentitySource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::IdentitySource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::IdentitySource"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/identity_sources/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/identity_sources/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/identity_sources/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.Details') as details,
              JSON_EXTRACT(Properties, '$.IdentitySourceId') as identity_source_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PrincipalEntityType') as principal_entity_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
              AND data__Identifier = '<IdentitySourceId>|<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Configuration') as configuration,
                JSON_EXTRACT(detail.Properties, '$.Details') as details,
                JSON_EXTRACT(detail.Properties, '$.IdentitySourceId') as identity_source_id,
                JSON_EXTRACT(detail.Properties, '$.PolicyStoreId') as policy_store_id,
                JSON_EXTRACT(detail.Properties, '$.PrincipalEntityType') as principal_entity_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                AND detail.data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Configuration') as configuration,
                  json_extract_path_text(Properties, 'Details') as details,
                  json_extract_path_text(Properties, 'IdentitySourceId') as identity_source_id,
                  json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                  json_extract_path_text(Properties, 'PrincipalEntityType') as principal_entity_type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                  AND data__Identifier = '<IdentitySourceId>|<PolicyStoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Configuration') as configuration,
                    json_extract_path_text(detail.Properties, 'Details') as details,
                    json_extract_path_text(detail.Properties, 'IdentitySourceId') as identity_source_id,
                    json_extract_path_text(detail.Properties, 'PolicyStoreId') as policy_store_id,
                    json_extract_path_text(detail.Properties, 'PrincipalEntityType') as principal_entity_type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                    AND detail.data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                    AND listing.region = 'us-east-1'
    identity_sources_list_only:
      name: identity_sources_list_only
      id: aws.verifiedpermissions.identity_sources_list_only
      x-cfn-schema-name: IdentitySource
      x-cfn-type-name: AWS::VerifiedPermissions::IdentitySource
      x-identifiers:
        - IdentitySourceId
        - PolicyStoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentitySourceId') as identity_source_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentitySourceId') as identity_source_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::IdentitySource'
                AND region = 'us-east-1'
    policies:
      name: policies
      id: aws.verifiedpermissions.policies
      x-cfn-schema-name: Policy
      x-cfn-type-name: AWS::VerifiedPermissions::Policy
      x-identifiers:
        - PolicyId
        - PolicyStoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Policy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::Policy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
              AND data__Identifier = '<PolicyId>|<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Definition') as definition,
                JSON_EXTRACT(detail.Properties, '$.PolicyId') as policy_id,
                JSON_EXTRACT(detail.Properties, '$.PolicyStoreId') as policy_store_id,
                JSON_EXTRACT(detail.Properties, '$.PolicyType') as policy_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::Policy'
                AND detail.data__TypeName = 'AWS::VerifiedPermissions::Policy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Definition') as definition,
                  json_extract_path_text(Properties, 'PolicyId') as policy_id,
                  json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                  json_extract_path_text(Properties, 'PolicyType') as policy_type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
                  AND data__Identifier = '<PolicyId>|<PolicyStoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Definition') as definition,
                    json_extract_path_text(detail.Properties, 'PolicyId') as policy_id,
                    json_extract_path_text(detail.Properties, 'PolicyStoreId') as policy_store_id,
                    json_extract_path_text(detail.Properties, 'PolicyType') as policy_type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::Policy'
                    AND detail.data__TypeName = 'AWS::VerifiedPermissions::Policy'
                    AND listing.region = 'us-east-1'
    policies_list_only:
      name: policies_list_only
      id: aws.verifiedpermissions.policies_list_only
      x-cfn-schema-name: Policy
      x-cfn-type-name: AWS::VerifiedPermissions::Policy
      x-identifiers:
        - PolicyId
        - PolicyStoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyId') as policy_id,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::Policy'
                AND region = 'us-east-1'
    policy_stores:
      name: policy_stores
      id: aws.verifiedpermissions.policy_stores
      x-cfn-schema-name: PolicyStore
      x-cfn-type-name: AWS::VerifiedPermissions::PolicyStore
      x-identifiers:
        - PolicyStoreId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PolicyStore&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyStore"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/policy_stores/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/policy_stores/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/policy_stores/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.ValidationSettings') as validation_settings,
              JSON_EXTRACT(Properties, '$.Schema') as _schema
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
              AND data__Identifier = '<PolicyStoreId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PolicyStoreId') as policy_store_id,
                JSON_EXTRACT(detail.Properties, '$.ValidationSettings') as validation_settings,
                JSON_EXTRACT(detail.Properties, '$.Schema') as _schema
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                AND detail.data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                  json_extract_path_text(Properties, 'ValidationSettings') as validation_settings,
                  json_extract_path_text(Properties, 'Schema') as _schema
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                  AND data__Identifier = '<PolicyStoreId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PolicyStoreId') as policy_store_id,
                    json_extract_path_text(detail.Properties, 'ValidationSettings') as validation_settings,
                    json_extract_path_text(detail.Properties, 'Schema') as _schema
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                    AND detail.data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                    AND listing.region = 'us-east-1'
    policy_stores_list_only:
      name: policy_stores_list_only
      id: aws.verifiedpermissions.policy_stores_list_only
      x-cfn-schema-name: PolicyStore
      x-cfn-type-name: AWS::VerifiedPermissions::PolicyStore
      x-identifiers:
        - PolicyStoreId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyStore'
                AND region = 'us-east-1'
    policy_templates:
      name: policy_templates
      id: aws.verifiedpermissions.policy_templates
      x-cfn-schema-name: PolicyTemplate
      x-cfn-type-name: AWS::VerifiedPermissions::PolicyTemplate
      x-identifiers:
        - PolicyStoreId
        - PolicyTemplateId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__PolicyTemplate&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VerifiedPermissions::PolicyTemplate"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/policy_templates/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/policy_templates/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/policy_templates/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyTemplateId') as policy_template_id,
              JSON_EXTRACT(Properties, '$.Statement') as statement
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
              AND data__Identifier = '<PolicyStoreId>|<PolicyTemplateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.PolicyStoreId') as policy_store_id,
                JSON_EXTRACT(detail.Properties, '$.PolicyTemplateId') as policy_template_id,
                JSON_EXTRACT(detail.Properties, '$.Statement') as statement
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                AND detail.data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                  json_extract_path_text(Properties, 'PolicyTemplateId') as policy_template_id,
                  json_extract_path_text(Properties, 'Statement') as statement
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                  AND data__Identifier = '<PolicyStoreId>|<PolicyTemplateId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'PolicyStoreId') as policy_store_id,
                    json_extract_path_text(detail.Properties, 'PolicyTemplateId') as policy_template_id,
                    json_extract_path_text(detail.Properties, 'Statement') as statement
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                    AND detail.data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                    AND listing.region = 'us-east-1'
    policy_templates_list_only:
      name: policy_templates_list_only
      id: aws.verifiedpermissions.policy_templates_list_only
      x-cfn-schema-name: PolicyTemplate
      x-cfn-type-name: AWS::VerifiedPermissions::PolicyTemplate
      x-identifiers:
        - PolicyStoreId
        - PolicyTemplateId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyStoreId') as policy_store_id,
              JSON_EXTRACT(Properties, '$.PolicyTemplateId') as policy_template_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyStoreId') as policy_store_id,
                json_extract_path_text(Properties, 'PolicyTemplateId') as policy_template_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VerifiedPermissions::PolicyTemplate'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IdentitySource&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIdentitySource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIdentitySourceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Policy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PolicyStore&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePolicyStore
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePolicyStoreRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__PolicyTemplate&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePolicyTemplate
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePolicyTemplateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
