openapi: 3.0.0
info:
  title: XRay
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    InsightsConfiguration:
      type: object
      additionalProperties: false
      properties:
        InsightsEnabled:
          description: Set the InsightsEnabled value to true to enable insights or false to disable insights.
          type: boolean
        NotificationsEnabled:
          description: Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
          type: boolean
    Tag:
      type: object
      properties:
        Key:
          type: string
          description: The key name of the tag.
        Value:
          type: string
          description: The value for the tag.
      required:
        - Key
        - Value
      additionalProperties: false
    Tags:
      type: array
      x-insertionOrder: false
      description: An array of key-value pairs to apply to this resource.
      items:
        $ref: '#/components/schemas/Tag'
    Group:
      type: object
      properties:
        FilterExpression:
          description: The filter expression defining criteria by which to group traces.
          type: string
        GroupName:
          description: The case-sensitive name of the new group. Names must be unique.
          type: string
          minLength: 1
          maxLength: 32
        GroupARN:
          description: The ARN of the group that was generated on creation.
          type: string
          minLength: 1
          maxLength: 400
        InsightsConfiguration:
          $ref: '#/components/schemas/InsightsConfiguration'
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - GroupName
      x-stackql-resource-name: group
      description: This schema provides construct and validation rules for AWS-XRay Group resource parameters.
      x-type-name: AWS::XRay::Group
      x-stackql-primary-identifier:
        - GroupARN
      x-read-only-properties:
        - GroupARN
      x-required-properties:
        - GroupName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - xray:TagResource
          - xray:UntagResource
      x-required-permissions:
        create:
          - xray:CreateGroup
          - xray:TagResource
        read:
          - xray:GetGroup
          - xray:ListTagsForResource
        update:
          - xray:UpdateGroup
          - xray:TagResource
          - xray:UntagResource
          - xray:ListTagsForResource
        delete:
          - xray:DeleteGroup
        list:
          - xray:GetGroups
          - xray:ListTagsForResource
    ResourcePolicy:
      type: object
      properties:
        PolicyName:
          description: The name of the resource policy. Must be unique within a specific AWS account.
          type: string
          pattern: '[\w+=,.@-]+'
          minLength: 1
          maxLength: 128
        PolicyDocument:
          description: The resource policy document, which can be up to 5kb in size.
          type: string
          minLength: 1
          maxLength: 5120
        BypassPolicyLockoutCheck:
          description: A flag to indicate whether to bypass the resource policy lockout safety check
          type: boolean
      required:
        - PolicyName
        - PolicyDocument
      x-stackql-resource-name: resource_policy
      description: This schema provides construct and validation rules for AWS-XRay Resource Policy resource parameters.
      x-type-name: AWS::XRay::ResourcePolicy
      x-stackql-primary-identifier:
        - PolicyName
      x-create-only-properties:
        - PolicyName
      x-write-only-properties:
        - BypassPolicyLockoutCheck
      x-required-properties:
        - PolicyName
        - PolicyDocument
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - xray:PutResourcePolicy
          - xray:ListResourcePolicies
        read:
          - xray:ListResourcePolicies
        update:
          - xray:PutResourcePolicy
          - xray:ListResourcePolicies
        delete:
          - xray:DeleteResourcePolicy
        list:
          - xray:ListResourcePolicies
    SamplingRule:
      type: object
      properties:
        SamplingRule:
          $ref: '#/components/schemas/SamplingRule'
        SamplingRuleRecord:
          $ref: '#/components/schemas/SamplingRuleRecord'
        SamplingRuleUpdate:
          $ref: '#/components/schemas/SamplingRuleUpdate'
        RuleARN:
          $ref: '#/components/schemas/RuleARN'
        RuleName:
          $ref: '#/components/schemas/RuleName'
        Tags:
          $ref: '#/components/schemas/Tags'
      x-stackql-resource-name: sampling_rule
      description: This schema provides construct and validation rules for AWS-XRay SamplingRule resource parameters.
      x-type-name: AWS::XRay::SamplingRule
      x-stackql-primary-identifier:
        - RuleARN
      x-create-only-properties:
        - SamplingRule/Version
      x-read-only-properties:
        - RuleARN
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - xray:TagResource
          - xray:UntagResource
      x-required-permissions:
        create:
          - xray:CreateSamplingRule
          - xray:TagResource
        read:
          - xray:GetSamplingRules
          - xray:ListTagsForResource
        update:
          - xray:UpdateSamplingRule
          - xray:TagResource
          - xray:UntagResource
          - xray:ListTagsForResource
        delete:
          - xray:DeleteSamplingRule
        list:
          - xray:GetSamplingRules
          - xray:ListTagsForResource
    SamplingRuleRecord:
      type: object
      additionalProperties: false
      properties:
        CreatedAt:
          description: When the rule was created, in Unix time seconds.
          type: string
        ModifiedAt:
          description: When the rule was modified, in Unix time seconds.
          type: string
        SamplingRule:
          $ref: '#/components/schemas/SamplingRule'
    SamplingRuleUpdate:
      type: object
      additionalProperties: false
      properties:
        Attributes:
          x-$comment: String to string map
          description: Matches attributes derived from the request.
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          additionalProperties: false
        FixedRate:
          description: The percentage of matching requests to instrument, after the reservoir is exhausted.
          type: number
          minimum: 0
          maximum: 1
        Host:
          description: Matches the hostname from a request URL.
          type: string
          maxLength: 64
        HTTPMethod:
          description: Matches the HTTP method from a request URL.
          type: string
          maxLength: 10
        Priority:
          description: The priority of the sampling rule.
          type: integer
          minimum: 1
          maximum: 9999
        ReservoirSize:
          description: A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
          type: integer
          minimum: 0
        ResourceARN:
          description: Matches the ARN of the AWS resource on which the service runs.
          type: string
          maxLength: 500
        RuleARN:
          $ref: '#/components/schemas/RuleARN'
        RuleName:
          $ref: '#/components/schemas/RuleName'
        ServiceName:
          description: Matches the name that the service uses to identify itself in segments.
          type: string
          maxLength: 64
        ServiceType:
          description: Matches the origin that the service uses to identify its type in segments.
          type: string
          maxLength: 64
        URLPath:
          description: Matches the path from a request URL.
          type: string
          maxLength: 128
    RuleName:
      description: The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
      type: string
      minLength: 1
      maxLength: 32
    RuleARN:
      description: The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
      type: string
    CreateGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            FilterExpression:
              description: The filter expression defining criteria by which to group traces.
              type: string
            GroupName:
              description: The case-sensitive name of the new group. Names must be unique.
              type: string
              minLength: 1
              maxLength: 32
            GroupARN:
              description: The ARN of the group that was generated on creation.
              type: string
              minLength: 1
              maxLength: 400
            InsightsConfiguration:
              $ref: '#/components/schemas/InsightsConfiguration'
            Tags:
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateGroupRequest
      type: object
      required: []
    CreateResourcePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PolicyName:
              description: The name of the resource policy. Must be unique within a specific AWS account.
              type: string
              pattern: '[\w+=,.@-]+'
              minLength: 1
              maxLength: 128
            PolicyDocument:
              description: The resource policy document, which can be up to 5kb in size.
              type: string
              minLength: 1
              maxLength: 5120
            BypassPolicyLockoutCheck:
              description: A flag to indicate whether to bypass the resource policy lockout safety check
              type: boolean
          x-stackQL-stringOnly: true
      x-title: CreateResourcePolicyRequest
      type: object
      required: []
    CreateSamplingRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            SamplingRule:
              $ref: '#/components/schemas/SamplingRule'
            SamplingRuleRecord:
              $ref: '#/components/schemas/SamplingRuleRecord'
            SamplingRuleUpdate:
              $ref: '#/components/schemas/SamplingRuleUpdate'
            RuleARN:
              $ref: '#/components/schemas/RuleARN'
            RuleName:
              $ref: '#/components/schemas/RuleName'
            Tags:
              $ref: '#/components/schemas/Tags'
          x-stackQL-stringOnly: true
      x-title: CreateSamplingRuleRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    groups:
      name: groups
      id: aws.xray.groups
      x-cfn-schema-name: Group
      x-cfn-type-name: AWS::XRay::Group
      x-identifiers:
        - GroupARN
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Group&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::Group"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FilterExpression') as filter_expression,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.GroupARN') as group_arn,
              JSON_EXTRACT(Properties, '$.InsightsConfiguration') as insights_configuration,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::Group'
              AND data__Identifier = '<GroupARN>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.FilterExpression') as filter_expression,
                JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
                JSON_EXTRACT(detail.Properties, '$.GroupARN') as group_arn,
                JSON_EXTRACT(detail.Properties, '$.InsightsConfiguration') as insights_configuration,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::XRay::Group'
                AND detail.data__TypeName = 'AWS::XRay::Group'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'FilterExpression') as filter_expression,
                  json_extract_path_text(Properties, 'GroupName') as group_name,
                  json_extract_path_text(Properties, 'GroupARN') as group_arn,
                  json_extract_path_text(Properties, 'InsightsConfiguration') as insights_configuration,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::Group'
                  AND data__Identifier = '<GroupARN>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'FilterExpression') as filter_expression,
                    json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                    json_extract_path_text(detail.Properties, 'GroupARN') as group_arn,
                    json_extract_path_text(detail.Properties, 'InsightsConfiguration') as insights_configuration,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::XRay::Group'
                    AND detail.data__TypeName = 'AWS::XRay::Group'
                    AND listing.region = 'us-east-1'
    groups_list_only:
      name: groups_list_only
      id: aws.xray.groups_list_only
      x-cfn-schema-name: Group
      x-cfn-type-name: AWS::XRay::Group
      x-identifiers:
        - GroupARN
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupARN') as group_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::Group'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupARN') as group_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::Group'
                AND region = 'us-east-1'
    group_tags:
      name: group_tags
      id: aws.xray.group_tags
      x-cfn-schema-name: Group
      x-cfn-type-name: AWS::XRay::Group
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.FilterExpression') as filter_expression,
              JSON_EXTRACT(detail.Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(detail.Properties, '$.GroupARN') as group_arn,
              JSON_EXTRACT(detail.Properties, '$.InsightsConfiguration') as insights_configuration
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::XRay::Group'
              AND detail.data__TypeName = 'AWS::XRay::Group'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'FilterExpression') as filter_expression,
                json_extract_path_text(detail.Properties, 'GroupName') as group_name,
                json_extract_path_text(detail.Properties, 'GroupARN') as group_arn,
                json_extract_path_text(detail.Properties, 'InsightsConfiguration') as insights_configuration
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::XRay::Group'
                AND detail.data__TypeName = 'AWS::XRay::Group'
                AND listing.region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.xray.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::XRay::ResourcePolicy
      x-identifiers:
        - PolicyName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.BypassPolicyLockoutCheck') as bypass_policy_lockout_check
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::ResourcePolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PolicyName') as policy_name,
                JSON_EXTRACT(detail.Properties, '$.PolicyDocument') as policy_document,
                JSON_EXTRACT(detail.Properties, '$.BypassPolicyLockoutCheck') as bypass_policy_lockout_check
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::XRay::ResourcePolicy'
                AND detail.data__TypeName = 'AWS::XRay::ResourcePolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PolicyName') as policy_name,
                  json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                  json_extract_path_text(Properties, 'BypassPolicyLockoutCheck') as bypass_policy_lockout_check
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::ResourcePolicy'
                  AND data__Identifier = '<PolicyName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PolicyName') as policy_name,
                    json_extract_path_text(detail.Properties, 'PolicyDocument') as policy_document,
                    json_extract_path_text(detail.Properties, 'BypassPolicyLockoutCheck') as bypass_policy_lockout_check
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::XRay::ResourcePolicy'
                    AND detail.data__TypeName = 'AWS::XRay::ResourcePolicy'
                    AND listing.region = 'us-east-1'
    resource_policies_list_only:
      name: resource_policies_list_only
      id: aws.xray.resource_policies_list_only
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::XRay::ResourcePolicy
      x-identifiers:
        - PolicyName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::ResourcePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::ResourcePolicy'
                AND region = 'us-east-1'
    sampling_rules:
      name: sampling_rules
      id: aws.xray.sampling_rules
      x-cfn-schema-name: SamplingRule
      x-cfn-type-name: AWS::XRay::SamplingRule
      x-identifiers:
        - RuleARN
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SamplingRule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::SamplingRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::SamplingRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::XRay::SamplingRule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/sampling_rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/sampling_rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/sampling_rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SamplingRule') as sampling_rule,
              JSON_EXTRACT(Properties, '$.SamplingRuleRecord') as sampling_rule_record,
              JSON_EXTRACT(Properties, '$.SamplingRuleUpdate') as sampling_rule_update,
              JSON_EXTRACT(Properties, '$.RuleARN') as rule_arn,
              JSON_EXTRACT(Properties, '$.RuleName') as rule_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::SamplingRule'
              AND data__Identifier = '<RuleARN>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.SamplingRule') as sampling_rule,
                JSON_EXTRACT(detail.Properties, '$.SamplingRuleRecord') as sampling_rule_record,
                JSON_EXTRACT(detail.Properties, '$.SamplingRuleUpdate') as sampling_rule_update,
                JSON_EXTRACT(detail.Properties, '$.RuleARN') as rule_arn,
                JSON_EXTRACT(detail.Properties, '$.RuleName') as rule_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::XRay::SamplingRule'
                AND detail.data__TypeName = 'AWS::XRay::SamplingRule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'SamplingRule') as sampling_rule,
                  json_extract_path_text(Properties, 'SamplingRuleRecord') as sampling_rule_record,
                  json_extract_path_text(Properties, 'SamplingRuleUpdate') as sampling_rule_update,
                  json_extract_path_text(Properties, 'RuleARN') as rule_arn,
                  json_extract_path_text(Properties, 'RuleName') as rule_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::XRay::SamplingRule'
                  AND data__Identifier = '<RuleARN>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'SamplingRule') as sampling_rule,
                    json_extract_path_text(detail.Properties, 'SamplingRuleRecord') as sampling_rule_record,
                    json_extract_path_text(detail.Properties, 'SamplingRuleUpdate') as sampling_rule_update,
                    json_extract_path_text(detail.Properties, 'RuleARN') as rule_arn,
                    json_extract_path_text(detail.Properties, 'RuleName') as rule_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::XRay::SamplingRule'
                    AND detail.data__TypeName = 'AWS::XRay::SamplingRule'
                    AND listing.region = 'us-east-1'
    sampling_rules_list_only:
      name: sampling_rules_list_only
      id: aws.xray.sampling_rules_list_only
      x-cfn-schema-name: SamplingRule
      x-cfn-type-name: AWS::XRay::SamplingRule
      x-identifiers:
        - RuleARN
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleARN') as rule_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::SamplingRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RuleARN') as rule_arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::XRay::SamplingRule'
                AND region = 'us-east-1'
    sampling_rule_tags:
      name: sampling_rule_tags
      id: aws.xray.sampling_rule_tags
      x-cfn-schema-name: SamplingRule
      x-cfn-type-name: AWS::XRay::SamplingRule
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.SamplingRule') as sampling_rule,
              JSON_EXTRACT(detail.Properties, '$.SamplingRuleRecord') as sampling_rule_record,
              JSON_EXTRACT(detail.Properties, '$.SamplingRuleUpdate') as sampling_rule_update,
              JSON_EXTRACT(detail.Properties, '$.RuleARN') as rule_arn,
              JSON_EXTRACT(detail.Properties, '$.RuleName') as rule_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::XRay::SamplingRule'
              AND detail.data__TypeName = 'AWS::XRay::SamplingRule'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'SamplingRule') as sampling_rule,
                json_extract_path_text(detail.Properties, 'SamplingRuleRecord') as sampling_rule_record,
                json_extract_path_text(detail.Properties, 'SamplingRuleUpdate') as sampling_rule_update,
                json_extract_path_text(detail.Properties, 'RuleARN') as rule_arn,
                json_extract_path_text(detail.Properties, 'RuleName') as rule_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::XRay::SamplingRule'
                AND detail.data__TypeName = 'AWS::XRay::SamplingRule'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Group&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourcePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SamplingRule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSamplingRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSamplingRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
