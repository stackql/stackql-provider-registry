openapi: 3.0.0
info:
  title: ApiGatewayV2
  version: 1.0.0
paths: {}
components:
  schemas:
    BodyS3Location:
      type: object
      additionalProperties: false
      properties:
        Etag:
          type: string
        Bucket:
          type: string
        Version:
          type: string
        Key:
          type: string
    Cors:
      type: object
      additionalProperties: false
      properties:
        AllowOrigins:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowCredentials:
          type: boolean
        ExposeHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        AllowHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
        MaxAge:
          type: integer
        AllowMethods:
          type: array
          uniqueItems: false
          items:
            type: string
    Api:
      type: object
      properties:
        RouteSelectionExpression:
          type: string
        BodyS3Location:
          $ref: '#/components/schemas/BodyS3Location'
        Description:
          type: string
        ApiEndpoint:
          type: string
        BasePath:
          type: string
        FailOnWarnings:
          type: boolean
        DisableExecuteApiEndpoint:
          type: boolean
        DisableSchemaValidation:
          type: boolean
        Name:
          type: string
        Target:
          type: string
        CredentialsArn:
          type: string
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
        Version:
          type: string
        ProtocolType:
          type: string
        RouteKey:
          type: string
        ApiId:
          type: string
        Body:
          type: object
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        ApiKeySelectionExpression:
          type: string
      x-stackql-resource-name: api
      x-stackql-primaryIdentifier:
        - ApiId
    AccessLogSettings:
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          type: string
        Format:
          type: string
    RouteSettings:
      type: object
      additionalProperties: false
      properties:
        DetailedMetricsEnabled:
          type: boolean
        LoggingLevel:
          type: string
        DataTraceEnabled:
          type: boolean
        ThrottlingBurstLimit:
          type: integer
        ThrottlingRateLimit:
          type: number
    StageOverrides:
      type: object
      additionalProperties: false
      properties:
        Description:
          type: string
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
        AutoDeploy:
          type: boolean
        RouteSettings:
          type: object
        StageVariables:
          type: object
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
    RouteOverrides:
      type: object
      additionalProperties: false
      properties:
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
        Target:
          type: string
        AuthorizationType:
          type: string
        AuthorizerId:
          type: string
        OperationName:
          type: string
    IntegrationOverrides:
      type: object
      additionalProperties: false
      properties:
        TimeoutInMillis:
          type: integer
        Description:
          type: string
        PayloadFormatVersion:
          type: string
        IntegrationMethod:
          type: string
    ApiGatewayManagedOverrides:
      type: object
      properties:
        Stage:
          $ref: '#/components/schemas/StageOverrides'
        Integration:
          $ref: '#/components/schemas/IntegrationOverrides'
        Id:
          type: string
        ApiId:
          type: string
        Route:
          $ref: '#/components/schemas/RouteOverrides'
      required:
        - ApiId
      x-stackql-resource-name: api_gateway_managed_overrides
      x-stackql-primaryIdentifier:
        - Id
    ApiMapping:
      type: object
      properties:
        Stage:
          type: string
        Id:
          type: string
        ApiMappingKey:
          type: string
        DomainName:
          type: string
        ApiId:
          type: string
      required:
        - DomainName
        - Stage
        - ApiId
      x-stackql-resource-name: api_mapping
      x-stackql-primaryIdentifier:
        - Id
    JWTConfiguration:
      type: object
      additionalProperties: false
      properties:
        Issuer:
          type: string
        Audience:
          type: array
          uniqueItems: false
          items:
            type: string
    Authorizer:
      type: object
      properties:
        IdentityValidationExpression:
          type: string
        AuthorizerUri:
          type: string
        AuthorizerCredentialsArn:
          type: string
        AuthorizerType:
          type: string
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
        AuthorizerResultTtlInSeconds:
          type: integer
        IdentitySource:
          type: array
          uniqueItems: false
          items:
            type: string
        AuthorizerPayloadFormatVersion:
          type: string
        ApiId:
          type: string
        EnableSimpleResponses:
          type: boolean
        AuthorizerId:
          type: string
        Name:
          type: string
      required:
        - AuthorizerType
        - ApiId
        - Name
      x-stackql-resource-name: authorizer
      x-stackql-primaryIdentifier:
        - AuthorizerId
        - ApiId
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
        Description:
          type: string
        StageName:
          type: string
        ApiId:
          type: string
      required:
        - ApiId
      x-stackql-resource-name: deployment
      x-stackql-primaryIdentifier:
        - ApiId
        - DeploymentId
    MutualTlsAuthentication:
      type: object
      additionalProperties: false
      properties:
        TruststoreVersion:
          type: string
        TruststoreUri:
          type: string
    DomainNameConfiguration:
      type: object
      additionalProperties: false
      properties:
        OwnershipVerificationCertificateArn:
          type: string
        EndpointType:
          type: string
        CertificateName:
          type: string
        SecurityPolicy:
          type: string
        CertificateArn:
          type: string
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalHostedZoneId:
          type: string
        RegionalDomainName:
          type: string
        DomainName:
          type: string
        DomainNameConfigurations:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
        Id:
          type: string
        Tags:
          type: object
      required:
        - DomainName
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - Id
    TlsConfig:
      type: object
      additionalProperties: false
      properties:
        ServerNameToVerify:
          type: string
    Integration:
      type: object
      properties:
        Description:
          type: string
        TemplateSelectionExpression:
          type: string
        ConnectionType:
          type: string
        ResponseParameters:
          type: object
        IntegrationMethod:
          type: string
        PassthroughBehavior:
          type: string
        RequestParameters:
          type: object
        ConnectionId:
          type: string
        IntegrationUri:
          type: string
        PayloadFormatVersion:
          type: string
        CredentialsArn:
          type: string
        RequestTemplates:
          type: object
        TimeoutInMillis:
          type: integer
        TlsConfig:
          $ref: '#/components/schemas/TlsConfig'
        ContentHandlingStrategy:
          type: string
        Id:
          type: string
        IntegrationSubtype:
          type: string
        ApiId:
          type: string
        IntegrationType:
          type: string
      required:
        - ApiId
        - IntegrationType
      x-stackql-resource-name: integration
      x-stackql-primaryIdentifier:
        - Id
    IntegrationResponse:
      type: object
      properties:
        Id:
          type: string
        ResponseTemplates:
          type: object
        TemplateSelectionExpression:
          type: string
        ResponseParameters:
          type: object
        ContentHandlingStrategy:
          type: string
        IntegrationId:
          type: string
        IntegrationResponseKey:
          type: string
        ApiId:
          type: string
      required:
        - IntegrationId
        - IntegrationResponseKey
        - ApiId
      x-stackql-resource-name: integration_response
      x-stackql-primaryIdentifier:
        - Id
    Model:
      type: object
      properties:
        ModelId:
          type: string
        Description:
          type: string
        ContentType:
          type: string
        Schema:
          type: object
        ApiId:
          type: string
        Name:
          type: string
      required:
        - ApiId
        - Schema
        - Name
      x-stackql-resource-name: model
      x-stackql-primaryIdentifier:
        - ApiId
        - ModelId
    ParameterConstraints:
      type: object
      additionalProperties: false
      properties:
        Required:
          type: boolean
    Route:
      type: object
      properties:
        RouteId:
          type: string
        RouteResponseSelectionExpression:
          type: string
        RequestModels:
          type: object
        OperationName:
          type: string
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
        ApiKeyRequired:
          type: boolean
        RouteKey:
          type: string
        AuthorizationType:
          type: string
        ModelSelectionExpression:
          type: string
        ApiId:
          type: string
        RequestParameters:
          type: object
          items:
            $ref: '#/components/schemas/ParameterConstraints'
        Target:
          type: string
        AuthorizerId:
          type: string
      required:
        - RouteKey
        - ApiId
      x-stackql-resource-name: route
      x-stackql-primaryIdentifier:
        - ApiId
        - RouteId
    RouteResponse:
      type: object
      properties:
        RouteResponseKey:
          type: string
        ResponseParameters:
          type: object
        RouteId:
          type: string
        Id:
          type: string
        ModelSelectionExpression:
          type: string
        ApiId:
          type: string
        ResponseModels:
          type: object
      required:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-stackql-resource-name: route_response
      x-stackql-primaryIdentifier:
        - Id
    Stage:
      type: object
      properties:
        DeploymentId:
          type: string
        Description:
          type: string
        AutoDeploy:
          type: boolean
        RouteSettings:
          type: object
        StageName:
          type: string
        StageVariables:
          type: object
        AccessPolicyId:
          type: string
        ClientCertificateId:
          type: string
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
        Id:
          type: string
        ApiId:
          type: string
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
        Tags:
          type: object
      required:
        - StageName
        - ApiId
      x-stackql-resource-name: stage
      x-stackql-primaryIdentifier:
        - Id
    VpcLink:
      type: object
      properties:
        VpcLinkId:
          type: string
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: object
          description: This resource type use map for Tags, suggest to use List of Tag
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        Name:
          type: string
      required:
        - SubnetIds
        - Name
      x-stackql-resource-name: vpc_link
      x-stackql-primaryIdentifier:
        - VpcLinkId
  x-stackQL-resources:
    apis:
      name: apis
      id: aws.apigatewayv2.apis
      x-cfn-schema-name: Api
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
    api:
      name: api
      id: aws.apigatewayv2.api
      x-cfn-schema-name: Api
      x-type: get
      x-identifiers:
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteSelectionExpression') as route_selection_expression,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Etag') as body_s3_location_etag,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Bucket') as body_s3_location_bucket,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Version') as body_s3_location_version,
              JSON_EXTRACT(Properties, '$.BodyS3Location.Key') as body_s3_location_key,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApiEndpoint') as api_endpoint,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.DisableSchemaValidation') as disable_schema_validation,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowOrigins') as cors_configuration_allow_origins,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowCredentials') as cors_configuration_allow_credentials,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.ExposeHeaders') as cors_configuration_expose_headers,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowHeaders') as cors_configuration_allow_headers,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.MaxAge') as cors_configuration_max_age,
              JSON_EXTRACT(Properties, '$.CorsConfiguration.AllowMethods') as cors_configuration_allow_methods,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
    api_gateway_managed_overrides:
      name: api_gateway_managed_overrides
      id: aws.apigatewayv2.api_gateway_managed_overrides
      x-cfn-schema-name: ApiGatewayManagedOverrides
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Stage.Description') as stage_description,
              JSON_EXTRACT(Properties, '$.Stage.AccessLogSettings') as stage_access_log_settings,
              JSON_EXTRACT(Properties, '$.Stage.AutoDeploy') as stage_auto_deploy,
              JSON_EXTRACT(Properties, '$.Stage.RouteSettings') as stage_route_settings,
              JSON_EXTRACT(Properties, '$.Stage.StageVariables') as stage_stage_variables,
              JSON_EXTRACT(Properties, '$.Stage.DefaultRouteSettings') as stage_default_route_settings,
              JSON_EXTRACT(Properties, '$.Integration.TimeoutInMillis') as integration_timeout_in_millis,
              JSON_EXTRACT(Properties, '$.Integration.Description') as integration_description,
              JSON_EXTRACT(Properties, '$.Integration.PayloadFormatVersion') as integration_payload_format_version,
              JSON_EXTRACT(Properties, '$.Integration.IntegrationMethod') as integration_integration_method,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Route.AuthorizationScopes') as route_authorization_scopes,
              JSON_EXTRACT(Properties, '$.Route.Target') as route_target,
              JSON_EXTRACT(Properties, '$.Route.AuthorizationType') as route_authorization_type,
              JSON_EXTRACT(Properties, '$.Route.AuthorizerId') as route_authorizer_id,
              JSON_EXTRACT(Properties, '$.Route.OperationName') as route_operation_name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiGatewayManagedOverrides'
    api_mappings:
      name: api_mappings
      id: aws.apigatewayv2.api_mappings
      x-cfn-schema-name: ApiMapping
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
    api_mapping:
      name: api_mapping
      id: aws.apigatewayv2.api_mapping
      x-cfn-schema-name: ApiMapping
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Stage') as stage,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiMappingKey') as api_mapping_key,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
    authorizers:
      name: authorizers
      id: aws.apigatewayv2.authorizers
      x-cfn-schema-name: Authorizer
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
    authorizer:
      name: authorizer
      id: aws.apigatewayv2.authorizer
      x-cfn-schema-name: Authorizer
      x-type: get
      x-identifiers:
        - AuthorizerId
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentialsArn') as authorizer_credentials_arn,
              JSON_EXTRACT(Properties, '$.AuthorizerType') as authorizer_type,
              JSON_EXTRACT(Properties, '$.JwtConfiguration.Issuer') as jwt_configuration_issuer,
              JSON_EXTRACT(Properties, '$.JwtConfiguration.Audience') as jwt_configuration_audience,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.EnableSimpleResponses') as enable_simple_responses,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
    deployments:
      name: deployments
      id: aws.apigatewayv2.deployments
      x-cfn-schema-name: Deployment
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
    deployment:
      name: deployment
      id: aws.apigatewayv2.deployment
      x-cfn-schema-name: Deployment
      x-type: get
      x-identifiers:
        - ApiId
        - DeploymentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
    domain_names:
      name: domain_names
      id: aws.apigatewayv2.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
    domain_name:
      name: domain_name
      id: aws.apigatewayv2.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreVersion') as mutual_tls_authentication_truststore_version,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication.TruststoreUri') as mutual_tls_authentication_truststore_uri,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DomainNameConfigurations') as domain_name_configurations,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
    integrations:
      name: integrations
      id: aws.apigatewayv2.integrations
      x-cfn-schema-name: Integration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
    integration:
      name: integration
      id: aws.apigatewayv2.integration
      x-cfn-schema-name: Integration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ConnectionType') as connection_type,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.IntegrationMethod') as integration_method,
              JSON_EXTRACT(Properties, '$.PassthroughBehavior') as passthrough_behavior,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.ConnectionId') as connection_id,
              JSON_EXTRACT(Properties, '$.IntegrationUri') as integration_uri,
              JSON_EXTRACT(Properties, '$.PayloadFormatVersion') as payload_format_version,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.RequestTemplates') as request_templates,
              JSON_EXTRACT(Properties, '$.TimeoutInMillis') as timeout_in_millis,
              JSON_EXTRACT(Properties, '$.TlsConfig.ServerNameToVerify') as tls_config_server_name_to_verify,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.IntegrationSubtype') as integration_subtype,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.IntegrationType') as integration_type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
    integration_responses:
      name: integration_responses
      id: aws.apigatewayv2.integration_responses
      x-cfn-schema-name: IntegrationResponse
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
    integration_response:
      name: integration_response
      id: aws.apigatewayv2.integration_response
      x-cfn-schema-name: IntegrationResponse
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseKey') as integration_response_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
    models:
      name: models
      id: aws.apigatewayv2.models
      x-cfn-schema-name: Model
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
    model:
      name: model
      id: aws.apigatewayv2.model
      x-cfn-schema-name: Model
      x-type: get
      x-identifiers:
        - ApiId
        - ModelId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Schema') as schema,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
    routes:
      name: routes
      id: aws.apigatewayv2.routes
      x-cfn-schema-name: Route
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
    route:
      name: route
      id: aws.apigatewayv2.route
      x-cfn-schema-name: Route
      x-type: get
      x-identifiers:
        - ApiId
        - RouteId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseSelectionExpression') as route_response_selection_expression,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
    route_responses:
      name: route_responses
      id: aws.apigatewayv2.route_responses
      x-cfn-schema-name: RouteResponse
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
    route_response:
      name: route_response
      id: aws.apigatewayv2.route_response
      x-cfn-schema-name: RouteResponse
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteResponseKey') as route_response_key,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ResponseModels') as response_models
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
    stages:
      name: stages
      id: aws.apigatewayv2.stages
      x-cfn-schema-name: Stage
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Stage'
    stage:
      name: stage
      id: aws.apigatewayv2.stage
      x-cfn-schema-name: Stage
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AutoDeploy') as auto_deploy,
              JSON_EXTRACT(Properties, '$.RouteSettings') as route_settings,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.StageVariables') as stage_variables,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.AccessLogSettings.DestinationArn') as access_log_settings_destination_arn,
              JSON_EXTRACT(Properties, '$.AccessLogSettings.Format') as access_log_settings_format,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.DetailedMetricsEnabled') as default_route_settings_detailed_metrics_enabled,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.LoggingLevel') as default_route_settings_logging_level,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.DataTraceEnabled') as default_route_settings_data_trace_enabled,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.ThrottlingBurstLimit') as default_route_settings_throttling_burst_limit,
              JSON_EXTRACT(Properties, '$.DefaultRouteSettings.ThrottlingRateLimit') as default_route_settings_throttling_rate_limit,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Stage'
    vpc_links:
      name: vpc_links
      id: aws.apigatewayv2.vpc_links
      x-cfn-schema-name: VpcLink
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
    vpc_link:
      name: vpc_link
      id: aws.apigatewayv2.vpc_link
      x-cfn-schema-name: VpcLink
      x-type: get
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
