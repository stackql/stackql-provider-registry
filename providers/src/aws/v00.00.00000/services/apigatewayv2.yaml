openapi: 3.0.0
info:
  title: ApiGatewayV2
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    BodyS3Location:
      type: object
      additionalProperties: false
      properties:
        Etag:
          type: string
          description: The Etag of the S3 object.
        Bucket:
          type: string
          description: The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
        Version:
          type: string
          description: The version of the S3 object.
        Key:
          type: string
          description: The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
      description: The ``BodyS3Location`` property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
    Cors:
      type: object
      additionalProperties: false
      properties:
        AllowOrigins:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed origins. Supported only for HTTP APIs.
        AllowCredentials:
          type: boolean
          description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
        ExposeHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of exposed headers. Supported only for HTTP APIs.
        AllowHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed headers. Supported only for HTTP APIs.
        MaxAge:
          type: integer
          description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
        AllowMethods:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
      description: The ``Cors`` property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
    Api:
      type: object
      properties:
        RouteSelectionExpression:
          type: string
          description: The route selection expression for the API. For HTTP APIs, the ``routeSelectionExpression`` must be ``${request.method} ${request.path}``. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
        BodyS3Location:
          $ref: '#/components/schemas/BodyS3Location'
          description: The S3 location of an OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
        Description:
          type: string
          description: The description of the API.
        ApiEndpoint:
          type: string
          description: ''
        BasePath:
          type: string
          description: Specifies how to interpret the base path of the API during import. Valid values are ``ignore``, ``prepend``, and ``split``. The default value is ``ignore``. To learn more, see [Set the OpenAPI basePath Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html). Supported only for HTTP APIs.
        FailOnWarnings:
          type: boolean
          description: Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
        DisableExecuteApiEndpoint:
          type: boolean
          description: Specifies whether clients can invoke your API by using the default ``execute-api`` endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
        DisableSchemaValidation:
          type: boolean
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        Name:
          type: string
          description: The name of the API. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
        Target:
          type: string
          description: This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.
        CredentialsArn:
          type: string
          description: >-
            This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify ``arn:aws:iam::*:user/*``. To use resource-based permissions on supported AWS services, specify ``null``. Currently, this property is not used for HTTP
            integrations. Supported only for HTTP APIs.
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
        Version:
          type: string
          description: A version identifier for the API.
        ProtocolType:
          type: string
          description: The API protocol. Valid values are ``WEBSOCKET`` or ``HTTP``. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
        RouteKey:
          type: string
          description: This property is part of quick create. If you don't specify a ``routeKey``, a default route of ``$default`` is created. The ``$default`` route acts as a catch-all for any request made to your API, for a particular stage. The ``$default`` route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.
        ApiId:
          type: string
          description: ''
        Body:
          type: object
          description: The OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
        Tags:
          type: object
          description: The collection of tags. Each tag element is associated with a given resource.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        ApiKeySelectionExpression:
          type: string
          description: An API key selection expression. Supported only for WebSocket APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
      x-stackql-resource-name: api
      description: The ``AWS::ApiGatewayV2::Api`` resource creates an API. WebSocket APIs and HTTP APIs are supported. For more information about WebSocket APIs, see [About WebSocket APIs in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-overview.html) in the *API Gateway Developer Guide*. For more information about HTTP APIs, see [HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide.*
      x-type-name: AWS::ApiGatewayV2::Api
      x-stackql-primary-identifier:
        - ApiId
      x-create-only-properties:
        - ProtocolType
      x-write-only-properties:
        - BasePath
        - Body
        - BodyS3Location
        - BodyS3Location/Etag
        - BodyS3Location/Bucket
        - BodyS3Location/Version
        - BodyS3Location/Key
        - CredentialsArn
        - FailOnWarnings
        - RouteKey
        - Target
        - DisableSchemaValidation
      x-read-only-properties:
        - ApiId
        - ApiEndpoint
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PUT
          - s3:getObject
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - apigateway:POST
          - s3:getObject
        read:
          - apigateway:GET
          - s3:getObject
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - s3:getObject
        list:
          - apigateway:GET
          - s3:getObject
    ApiMapping:
      type: object
      properties:
        ApiMappingId:
          description: ''
          type: string
        DomainName:
          description: The domain name.
          type: string
        Stage:
          description: The API stage.
          type: string
        ApiMappingKey:
          description: The API mapping key.
          type: string
        ApiId:
          description: The identifier of the API.
          type: string
      required:
        - DomainName
        - Stage
        - ApiId
      x-stackql-resource-name: api_mapping
      description: >-
        The ``AWS::ApiGatewayV2::ApiMapping`` resource contains an API mapping. An API mapping relates a path of your custom domain name to a stage of your API. A custom domain name can have multiple API mappings, but the paths can't overlap. A custom domain can map only to APIs of the same protocol type. For more information, see [CreateApiMapping](https://docs.aws.amazon.com/apigatewayv2/latest/api-reference/domainnames-domainname-apimappings.html#CreateApiMapping) in the *Amazon API Gateway
        V2 API Reference*.
      x-type-name: AWS::ApiGatewayV2::ApiMapping
      x-stackql-primary-identifier:
        - ApiMappingId
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - ApiMappingId
      x-required-properties:
        - DomainName
        - Stage
        - ApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    JWTConfiguration:
      type: object
      additionalProperties: false
      properties:
        Issuer:
          type: string
          description: 'The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: ``https://cognito-idp.{region}.amazonaws.com/{userPoolId}``. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.'
        Audience:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of the intended recipients of the JWT. A valid JWT must provide an ``aud`` that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
      description: The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
    Authorizer:
      type: object
      properties:
        IdentityValidationExpression:
          type: string
          description: This parameter is not used.
        AuthorizerUri:
          type: string
          description: >-
            The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda function URI, for example, ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``. In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the same as the region hosting the Lambda function, path indicates that the
            remaining substring in the URI should be treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form ``/2015-03-31/functions/[FunctionARN]/invocations``.
        AuthorizerCredentialsArn:
          type: string
          description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for ``REQUEST`` authorizers.
        AuthorizerType:
          type: string
          description: The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use JSON Web Tokens (supported only for HTTP APIs).
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
        AuthorizerResultTtlInSeconds:
          type: integer
          description: The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
        IdentitySource:
          type: array
          uniqueItems: false
          items:
            type: string
          description: |-
            The identity source for which authorization is requested.
             For a ``REQUEST`` authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``, ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
             For ``JWT``, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example ``$request.header.Authorization``.
        AuthorizerPayloadFormatVersion:
          type: string
          description: Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        ApiId:
          type: string
          description: The API identifier.
        EnableSimpleResponses:
          type: boolean
          description: Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerId:
          type: string
          description: ''
        Name:
          type: string
          description: The name of the authorizer.
      required:
        - AuthorizerType
        - ApiId
        - Name
      x-stackql-resource-name: authorizer
      description: >-
        The ``AWS::ApiGatewayV2::Authorizer`` resource creates an authorizer for a WebSocket API or an HTTP API. To learn more, see [Controlling and managing access to a WebSocket API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-control-access.html) and [Controlling and managing access to an HTTP API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html) in the *API Gateway Developer
        Guide*.
      x-type-name: AWS::ApiGatewayV2::Authorizer
      x-stackql-primary-identifier:
        - AuthorizerId
        - ApiId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - AuthorizerId
      x-required-properties:
        - AuthorizerType
        - ApiId
        - Name
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
          - iam:PassRole
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - iam:PassRole
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
          description: ''
        Description:
          type: string
          description: The description for the deployment resource.
        StageName:
          type: string
          description: The name of an existing stage to associate with the deployment.
        ApiId:
          type: string
          description: The API identifier.
      required:
        - ApiId
      x-stackql-resource-name: deployment
      description: The ``AWS::ApiGatewayV2::Deployment`` resource creates a deployment for an API.
      x-type-name: AWS::ApiGatewayV2::Deployment
      x-stackql-primary-identifier:
        - ApiId
        - DeploymentId
      x-create-only-properties:
        - ApiId
      x-write-only-properties:
        - StageName
      x-read-only-properties:
        - DeploymentId
      x-required-properties:
        - ApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    MutualTlsAuthentication:
      type: object
      additionalProperties: false
      properties:
        TruststoreVersion:
          type: string
          description: The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
        TruststoreUri:
          type: string
          description: An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
      description: If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
    DomainNameConfiguration:
      type: object
      additionalProperties: false
      properties:
        OwnershipVerificationCertificateArn:
          type: string
          description: The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
        EndpointType:
          type: string
          description: The endpoint type.
        CertificateName:
          type: string
          description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
        SecurityPolicy:
          type: string
          description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
        CertificateArn:
          type: string
          description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
      description: |-
        The ``DomainNameConfiguration`` property type specifies the configuration for an API's domain name.
          ``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          description: The mutual TLS authentication configuration for a custom domain name.
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalHostedZoneId:
          description: ''
          type: string
        RegionalDomainName:
          description: ''
          type: string
        DomainName:
          description: The custom domain name for your API in Amazon API Gateway. Uppercase letters and the underscore (``_``) character are not supported.
          type: string
        DomainNameConfigurations:
          description: The domain name configurations.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
        Tags:
          type: object
          description: The collection of tags associated with a domain name.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
      required:
        - DomainName
      x-stackql-resource-name: domain_name
      description: |-
        The ``AWS::ApiGatewayV2::DomainName`` resource specifies a custom domain name for your API in Amazon API Gateway (API Gateway). 
         You can use a custom domain name to provide a URL that's more intuitive and easier to recall. For more information about using custom domain names, see [Set up Custom Domain Name for an API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGatewayV2::DomainName
      x-stackql-primary-identifier:
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - RegionalDomainName
        - RegionalHostedZoneId
      x-required-properties:
        - DomainName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    ResponseParameter:
      description: response parameter
      type: object
      additionalProperties: false
      properties:
        Destination:
          type: string
        Source:
          type: string
    ResponseParameterList:
      description: list of response parameters
      type: array
      items:
        $ref: '#/components/schemas/ResponseParameter'
    ResponseParameterMap:
      description: map of response parameter lists
      type: object
      additionalProperties: false
      properties:
        ResponseParameters:
          $ref: '#/components/schemas/ResponseParameterList'
    TlsConfig:
      description: The TlsConfig property specifies the TLS configuration for a private integration. Supported only for HTTP APIs.
      type: object
      additionalProperties: false
      properties:
        ServerNameToVerify:
          type: string
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    Integration:
      type: object
      properties:
        ApiId:
          description: The API identifier.
          type: string
        ConnectionId:
          description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
          type: string
        ConnectionType:
          description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
          type: string
        ContentHandlingStrategy:
          description: Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT.
          type: string
        CredentialsArn:
          description: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter.
          type: string
        Description:
          description: The description of the integration.
          type: string
        IntegrationMethod:
          description: Specifies the integration's HTTP method type.
          type: string
        IntegrationSubtype:
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke.
          type: string
        IntegrationId:
          description: The integration ID.
          type: string
        IntegrationType:
          description: The integration type of an integration.
          type: string
        IntegrationUri:
          description: For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
          type: string
        PassthroughBehavior:
          description: 'Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.'
          type: string
        PayloadFormatVersion:
          description: Specifies the format of the payload sent to an integration. Required for HTTP APIs. For HTTP APIs, supported values for Lambda proxy integrations are 1.0 and 2.0 For all other integrations, 1.0 is the only supported value.
          type: string
        RequestParameters:
          description: A key-value map specifying parameters.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestTemplates:
          description: A map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseParameters:
          description: Parameters that transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              $ref: '#/components/schemas/ResponseParameterMap'
        TemplateSelectionExpression:
          description: The template selection expression for the integration. Supported only for WebSocket APIs.
          type: string
        TimeoutInMillis:
          description: Custom timeout between 50 and 29000 milliseconds for WebSocket APIs and between 50 and 30000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
          type: integer
        TlsConfig:
          description: The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
          $ref: '#/components/schemas/TlsConfig'
      required:
        - ApiId
        - IntegrationType
      x-stackql-resource-name: integration
      description: An example resource schema demonstrating some basic constructs and validation rules.
      x-type-name: AWS::ApiGatewayV2::Integration
      x-stackql-primary-identifier:
        - ApiId
        - IntegrationId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - IntegrationId
      x-required-properties:
        - ApiId
        - IntegrationType
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    IntegrationResponse:
      type: object
      properties:
        IntegrationResponseId:
          description: ''
          type: string
        ResponseTemplates:
          description: The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
          type: object
        TemplateSelectionExpression:
          description: The template selection expression for the integration response. Supported only for WebSocket APIs.
          type: string
        ResponseParameters:
          description: >-
            A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped non-static value must
            match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
          type: object
        ContentHandlingStrategy:
          description: |-
            Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
              ``CONVERT_TO_BINARY``: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
              ``CONVERT_TO_TEXT``: Converts a response payload from a binary blob to a Base64-encoded string.
             If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
          type: string
        IntegrationId:
          description: The integration ID.
          type: string
        IntegrationResponseKey:
          description: The integration response key.
          type: string
        ApiId:
          description: The API identifier.
          type: string
      required:
        - ApiId
        - IntegrationId
        - IntegrationResponseKey
      x-stackql-resource-name: integration_response
      description: The ``AWS::ApiGatewayV2::IntegrationResponse`` resource updates an integration response for an WebSocket API. For more information, see [Set up WebSocket API Integration Responses in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-integration-responses.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGatewayV2::IntegrationResponse
      x-stackql-primary-identifier:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      x-create-only-properties:
        - ApiId
        - IntegrationId
      x-read-only-properties:
        - IntegrationResponseId
      x-required-properties:
        - ApiId
        - IntegrationId
        - IntegrationResponseKey
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Model:
      type: object
      properties:
        ModelId:
          type: string
          description: ''
        Description:
          type: string
          description: The description of the model.
        ContentType:
          type: string
          description: The content-type for the model, for example, "application/json".
        Schema:
          type: object
          description: The schema for the model. For application/json models, this should be JSON schema draft 4 model.
        ApiId:
          type: string
          description: The API identifier.
        Name:
          type: string
          description: The name of the model.
      required:
        - ApiId
        - Schema
        - Name
      x-stackql-resource-name: model
      description: The ``AWS::ApiGatewayV2::Model`` resource updates data model for a WebSocket API. For more information, see [Model Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGatewayV2::Model
      x-stackql-primary-identifier:
        - ApiId
        - ModelId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - ModelId
      x-required-properties:
        - ApiId
        - Schema
        - Name
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    ParameterConstraints:
      type: object
      properties:
        Required:
          type: boolean
          description: Specifies whether the parameter is required.
      required:
        - Required
      additionalProperties: false
      description: Specifies whether the parameter is required.
    Route:
      type: object
      properties:
        RouteId:
          type: string
          description: ''
        RouteResponseSelectionExpression:
          type: string
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        RequestModels:
          type: object
          description: The request models for the route. Supported only for WebSocket APIs.
        OperationName:
          type: string
          description: The operation name for the route.
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
          description: The authorization scopes supported by this route.
        ApiKeyRequired:
          type: boolean
          description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        RouteKey:
          type: string
          description: The route key for the route. For HTTP APIs, the route key can be either ``$default``, or a combination of an HTTP method and resource path, for example, ``GET /pets``.
        AuthorizationType:
          type: string
          description: The authorization type for the route. For WebSocket APIs, valid values are ``NONE`` for open access, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer. For HTTP APIs, valid values are ``NONE`` for open access, ``JWT`` for using JSON Web Tokens, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer.
        ModelSelectionExpression:
          type: string
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        ApiId:
          type: string
          description: The API identifier.
        RequestParameters:
          type: object
          items:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        Target:
          type: string
          description: The target for the route.
        AuthorizerId:
          type: string
          description: The identifier of the ``Authorizer`` resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      required:
        - RouteKey
        - ApiId
      x-stackql-resource-name: route
      description: The ``AWS::ApiGatewayV2::Route`` resource creates a route for an API.
      x-type-name: AWS::ApiGatewayV2::Route
      x-stackql-primary-identifier:
        - ApiId
        - RouteId
      x-create-only-properties:
        - ApiId
      x-write-only-properties:
        - AuthorizerId
        - RequestParameters
      x-read-only-properties:
        - RouteId
      x-required-properties:
        - RouteKey
        - ApiId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    RouteParameters:
      x-patternProperties:
        ^.+$:
          $ref: '#/components/schemas/ParameterConstraints'
      additionalProperties: false
    RouteResponse:
      type: object
      properties:
        RouteResponseKey:
          type: string
          description: The route response key.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteId:
          type: string
          description: The route ID.
        ModelSelectionExpression:
          type: string
          description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ApiId:
          type: string
          description: The API identifier.
        ResponseModels:
          type: object
          description: The response models for the route response.
        RouteResponseId:
          type: string
          description: ''
      required:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-stackql-resource-name: route_response
      description: The ``AWS::ApiGatewayV2::RouteResponse`` resource creates a route response for a WebSocket API. For more information, see [Set up Route Responses for a WebSocket API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-route-response.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGatewayV2::RouteResponse
      x-stackql-primary-identifier:
        - ApiId
        - RouteId
        - RouteResponseId
      x-create-only-properties:
        - ApiId
        - RouteId
      x-read-only-properties:
        - RouteResponseId
      x-required-properties:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    VpcLink:
      type: object
      properties:
        VpcLinkId:
          type: string
          description: ''
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of subnet IDs to include in the VPC link.
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of security group IDs for the VPC link.
        Tags:
          type: object
          description: The collection of tags. Each tag element is associated with a given resource.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        Name:
          type: string
          description: The name of the VPC link.
      required:
        - SubnetIds
        - Name
      x-stackql-resource-name: vpc_link
      description: The ``AWS::ApiGatewayV2::VpcLink`` resource creates a VPC link. Supported only for HTTP APIs. The VPC link status must transition from ``PENDING`` to ``AVAILABLE`` to successfully create a VPC link, which can take up to 10 minutes. To learn more, see [Working with VPC Links for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vpc-links.html) in the *API Gateway Developer Guide*.
      x-type-name: AWS::ApiGatewayV2::VpcLink
      x-stackql-primary-identifier:
        - VpcLinkId
      x-create-only-properties:
        - SecurityGroupIds
        - SubnetIds
      x-read-only-properties:
        - VpcLinkId
      x-required-properties:
        - SubnetIds
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:TagResource
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:TagResource
          - apigateway:unTagResource
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        read:
          - apigateway:GET
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        list:
          - apigateway:GET
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
    CreateApiRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteSelectionExpression:
              type: string
              description: The route selection expression for the API. For HTTP APIs, the ``routeSelectionExpression`` must be ``${request.method} ${request.path}``. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
            BodyS3Location:
              $ref: '#/components/schemas/BodyS3Location'
              description: The S3 location of an OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
            Description:
              type: string
              description: The description of the API.
            ApiEndpoint:
              type: string
              description: ''
            BasePath:
              type: string
              description: Specifies how to interpret the base path of the API during import. Valid values are ``ignore``, ``prepend``, and ``split``. The default value is ``ignore``. To learn more, see [Set the OpenAPI basePath Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html). Supported only for HTTP APIs.
            FailOnWarnings:
              type: boolean
              description: Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
            DisableExecuteApiEndpoint:
              type: boolean
              description: Specifies whether clients can invoke your API by using the default ``execute-api`` endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
            DisableSchemaValidation:
              type: boolean
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
            Name:
              type: string
              description: The name of the API. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
            Target:
              type: string
              description: This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.
            CredentialsArn:
              type: string
              description: >-
                This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify ``arn:aws:iam::*:user/*``. To use resource-based permissions on supported AWS services, specify ``null``. Currently, this property is not used for
                HTTP integrations. Supported only for HTTP APIs.
            CorsConfiguration:
              $ref: '#/components/schemas/Cors'
              description: A CORS configuration. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
            Version:
              type: string
              description: A version identifier for the API.
            ProtocolType:
              type: string
              description: The API protocol. Valid values are ``WEBSOCKET`` or ``HTTP``. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
            RouteKey:
              type: string
              description: This property is part of quick create. If you don't specify a ``routeKey``, a default route of ``$default`` is created. The ``$default`` route acts as a catch-all for any request made to your API, for a particular stage. The ``$default`` route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.
            ApiId:
              type: string
              description: ''
            Body:
              type: object
              description: The OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
            Tags:
              type: object
              description: The collection of tags. Each tag element is associated with a given resource.
              additionalProperties: false
              x-patternProperties:
                .*:
                  type: string
            ApiKeySelectionExpression:
              type: string
              description: An API key selection expression. Supported only for WebSocket APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
          x-stackQL-stringOnly: true
      x-title: CreateApiRequest
      type: object
      required: []
    CreateApiMappingRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiMappingId:
              description: ''
              type: string
            DomainName:
              description: The domain name.
              type: string
            Stage:
              description: The API stage.
              type: string
            ApiMappingKey:
              description: The API mapping key.
              type: string
            ApiId:
              description: The identifier of the API.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateApiMappingRequest
      type: object
      required: []
    CreateAuthorizerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IdentityValidationExpression:
              type: string
              description: This parameter is not used.
            AuthorizerUri:
              type: string
              description: >-
                The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda function URI, for example, ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``. In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the same as the region hosting the Lambda function, path indicates that the
                remaining substring in the URI should be treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form ``/2015-03-31/functions/[FunctionARN]/invocations``.
            AuthorizerCredentialsArn:
              type: string
              description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for ``REQUEST`` authorizers.
            AuthorizerType:
              type: string
              description: The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use JSON Web Tokens (supported only for HTTP APIs).
            JwtConfiguration:
              $ref: '#/components/schemas/JWTConfiguration'
              description: The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
            AuthorizerResultTtlInSeconds:
              type: integer
              description: The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
            IdentitySource:
              type: array
              uniqueItems: false
              items:
                type: string
              description: |-
                The identity source for which authorization is requested.
                 For a ``REQUEST`` authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``, ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
                 For ``JWT``, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example ``$request.header.Authorization``.
            AuthorizerPayloadFormatVersion:
              type: string
              description: Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
            ApiId:
              type: string
              description: The API identifier.
            EnableSimpleResponses:
              type: boolean
              description: Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
            AuthorizerId:
              type: string
              description: ''
            Name:
              type: string
              description: The name of the authorizer.
          x-stackQL-stringOnly: true
      x-title: CreateAuthorizerRequest
      type: object
      required: []
    CreateDeploymentRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DeploymentId:
              type: string
              description: ''
            Description:
              type: string
              description: The description for the deployment resource.
            StageName:
              type: string
              description: The name of an existing stage to associate with the deployment.
            ApiId:
              type: string
              description: The API identifier.
          x-stackQL-stringOnly: true
      x-title: CreateDeploymentRequest
      type: object
      required: []
    CreateDomainNameRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            MutualTlsAuthentication:
              description: The mutual TLS authentication configuration for a custom domain name.
              $ref: '#/components/schemas/MutualTlsAuthentication'
            RegionalHostedZoneId:
              description: ''
              type: string
            RegionalDomainName:
              description: ''
              type: string
            DomainName:
              description: The custom domain name for your API in Amazon API Gateway. Uppercase letters and the underscore (``_``) character are not supported.
              type: string
            DomainNameConfigurations:
              description: The domain name configurations.
              type: array
              uniqueItems: false
              items:
                $ref: '#/components/schemas/DomainNameConfiguration'
            Tags:
              type: object
              description: The collection of tags associated with a domain name.
              additionalProperties: false
              x-patternProperties:
                .*:
                  type: string
          x-stackQL-stringOnly: true
      x-title: CreateDomainNameRequest
      type: object
      required: []
    CreateIntegrationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ApiId:
              description: The API identifier.
              type: string
            ConnectionId:
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
              type: string
            ConnectionType:
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
              type: string
            ContentHandlingStrategy:
              description: Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT.
              type: string
            CredentialsArn:
              description: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter.
              type: string
            Description:
              description: The description of the integration.
              type: string
            IntegrationMethod:
              description: Specifies the integration's HTTP method type.
              type: string
            IntegrationSubtype:
              description: Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke.
              type: string
            IntegrationId:
              description: The integration ID.
              type: string
            IntegrationType:
              description: The integration type of an integration.
              type: string
            IntegrationUri:
              description: For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
              type: string
            PassthroughBehavior:
              description: 'Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.'
              type: string
            PayloadFormatVersion:
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs. For HTTP APIs, supported values for Lambda proxy integrations are 1.0 and 2.0 For all other integrations, 1.0 is the only supported value.
              type: string
            RequestParameters:
              description: A key-value map specifying parameters.
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
            RequestTemplates:
              description: A map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client.
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  type: string
            ResponseParameters:
              description: Parameters that transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
              type: object
              additionalProperties: false
              x-patternProperties:
                '[a-zA-Z0-9]+':
                  $ref: '#/components/schemas/ResponseParameterMap'
            TemplateSelectionExpression:
              description: The template selection expression for the integration. Supported only for WebSocket APIs.
              type: string
            TimeoutInMillis:
              description: Custom timeout between 50 and 29000 milliseconds for WebSocket APIs and between 50 and 30000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
              type: integer
            TlsConfig:
              description: The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
              $ref: '#/components/schemas/TlsConfig'
          x-stackQL-stringOnly: true
      x-title: CreateIntegrationRequest
      type: object
      required: []
    CreateIntegrationResponseRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IntegrationResponseId:
              description: ''
              type: string
            ResponseTemplates:
              description: The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
              type: object
            TemplateSelectionExpression:
              description: The template selection expression for the integration response. Supported only for WebSocket APIs.
              type: string
            ResponseParameters:
              description: >-
                A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped non-static value
                must match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
              type: object
            ContentHandlingStrategy:
              description: |-
                Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
                  ``CONVERT_TO_BINARY``: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
                  ``CONVERT_TO_TEXT``: Converts a response payload from a binary blob to a Base64-encoded string.
                 If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
              type: string
            IntegrationId:
              description: The integration ID.
              type: string
            IntegrationResponseKey:
              description: The integration response key.
              type: string
            ApiId:
              description: The API identifier.
              type: string
          x-stackQL-stringOnly: true
      x-title: CreateIntegrationResponseRequest
      type: object
      required: []
    CreateModelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ModelId:
              type: string
              description: ''
            Description:
              type: string
              description: The description of the model.
            ContentType:
              type: string
              description: The content-type for the model, for example, "application/json".
            Schema:
              type: object
              description: The schema for the model. For application/json models, this should be JSON schema draft 4 model.
            ApiId:
              type: string
              description: The API identifier.
            Name:
              type: string
              description: The name of the model.
          x-stackQL-stringOnly: true
      x-title: CreateModelRequest
      type: object
      required: []
    CreateRouteRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteId:
              type: string
              description: ''
            RouteResponseSelectionExpression:
              type: string
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
            RequestModels:
              type: object
              description: The request models for the route. Supported only for WebSocket APIs.
            OperationName:
              type: string
              description: The operation name for the route.
            AuthorizationScopes:
              type: array
              uniqueItems: false
              items:
                type: string
              description: The authorization scopes supported by this route.
            ApiKeyRequired:
              type: boolean
              description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
            RouteKey:
              type: string
              description: The route key for the route. For HTTP APIs, the route key can be either ``$default``, or a combination of an HTTP method and resource path, for example, ``GET /pets``.
            AuthorizationType:
              type: string
              description: The authorization type for the route. For WebSocket APIs, valid values are ``NONE`` for open access, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer. For HTTP APIs, valid values are ``NONE`` for open access, ``JWT`` for using JSON Web Tokens, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer.
            ModelSelectionExpression:
              type: string
              description: The model selection expression for the route. Supported only for WebSocket APIs.
            ApiId:
              type: string
              description: The API identifier.
            RequestParameters:
              type: object
              items:
                $ref: '#/components/schemas/ParameterConstraints'
              description: The request parameters for the route. Supported only for WebSocket APIs.
            Target:
              type: string
              description: The target for the route.
            AuthorizerId:
              type: string
              description: The identifier of the ``Authorizer`` resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
          x-stackQL-stringOnly: true
      x-title: CreateRouteRequest
      type: object
      required: []
    CreateRouteResponseRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            RouteResponseKey:
              type: string
              description: The route response key.
            ResponseParameters:
              $ref: '#/components/schemas/RouteParameters'
              description: The route response parameters.
            RouteId:
              type: string
              description: The route ID.
            ModelSelectionExpression:
              type: string
              description: The model selection expression for the route response. Supported only for WebSocket APIs.
            ApiId:
              type: string
              description: The API identifier.
            ResponseModels:
              type: object
              description: The response models for the route response.
            RouteResponseId:
              type: string
              description: ''
          x-stackQL-stringOnly: true
      x-title: CreateRouteResponseRequest
      type: object
      required: []
    CreateVpcLinkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            VpcLinkId:
              type: string
              description: ''
            SubnetIds:
              type: array
              uniqueItems: false
              items:
                type: string
              description: A list of subnet IDs to include in the VPC link.
            SecurityGroupIds:
              type: array
              uniqueItems: false
              items:
                type: string
              description: A list of security group IDs for the VPC link.
            Tags:
              type: object
              description: The collection of tags. Each tag element is associated with a given resource.
              additionalProperties: false
              x-patternProperties:
                .*:
                  type: string
            Name:
              type: string
              description: The name of the VPC link.
          x-stackQL-stringOnly: true
      x-title: CreateVpcLinkRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    apis:
      name: apis
      id: aws.apigatewayv2.apis
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::ApiGatewayV2::Api
      x-identifiers:
        - ApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Api&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Api"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/apis/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/apis/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/apis/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteSelectionExpression') as route_selection_expression,
              JSON_EXTRACT(Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApiEndpoint') as api_endpoint,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.DisableSchemaValidation') as disable_schema_validation,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.CorsConfiguration') as cors_configuration,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RouteSelectionExpression') as route_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.BodyS3Location') as body_s3_location,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ApiEndpoint') as api_endpoint,
                JSON_EXTRACT(detail.Properties, '$.BasePath') as base_path,
                JSON_EXTRACT(detail.Properties, '$.FailOnWarnings') as fail_on_warnings,
                JSON_EXTRACT(detail.Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                JSON_EXTRACT(detail.Properties, '$.DisableSchemaValidation') as disable_schema_validation,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Target') as target,
                JSON_EXTRACT(detail.Properties, '$.CredentialsArn') as credentials_arn,
                JSON_EXTRACT(detail.Properties, '$.CorsConfiguration') as cors_configuration,
                JSON_EXTRACT(detail.Properties, '$.Version') as version,
                JSON_EXTRACT(detail.Properties, '$.ProtocolType') as protocol_type,
                JSON_EXTRACT(detail.Properties, '$.RouteKey') as route_key,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.Body') as body,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RouteSelectionExpression') as route_selection_expression,
                  json_extract_path_text(Properties, 'BodyS3Location') as body_s3_location,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ApiEndpoint') as api_endpoint,
                  json_extract_path_text(Properties, 'BasePath') as base_path,
                  json_extract_path_text(Properties, 'FailOnWarnings') as fail_on_warnings,
                  json_extract_path_text(Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                  json_extract_path_text(Properties, 'DisableSchemaValidation') as disable_schema_validation,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Target') as target,
                  json_extract_path_text(Properties, 'CredentialsArn') as credentials_arn,
                  json_extract_path_text(Properties, 'CorsConfiguration') as cors_configuration,
                  json_extract_path_text(Properties, 'Version') as version,
                  json_extract_path_text(Properties, 'ProtocolType') as protocol_type,
                  json_extract_path_text(Properties, 'RouteKey') as route_key,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'Body') as body,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'ApiKeySelectionExpression') as api_key_selection_expression
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
                  AND data__Identifier = '<ApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RouteSelectionExpression') as route_selection_expression,
                    json_extract_path_text(detail.Properties, 'BodyS3Location') as body_s3_location,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ApiEndpoint') as api_endpoint,
                    json_extract_path_text(detail.Properties, 'BasePath') as base_path,
                    json_extract_path_text(detail.Properties, 'FailOnWarnings') as fail_on_warnings,
                    json_extract_path_text(detail.Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                    json_extract_path_text(detail.Properties, 'DisableSchemaValidation') as disable_schema_validation,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Target') as target,
                    json_extract_path_text(detail.Properties, 'CredentialsArn') as credentials_arn,
                    json_extract_path_text(detail.Properties, 'CorsConfiguration') as cors_configuration,
                    json_extract_path_text(detail.Properties, 'Version') as version,
                    json_extract_path_text(detail.Properties, 'ProtocolType') as protocol_type,
                    json_extract_path_text(detail.Properties, 'RouteKey') as route_key,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'Body') as body,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'ApiKeySelectionExpression') as api_key_selection_expression
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Api'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Api'
                    AND listing.region = 'us-east-1'
    apis_list_only:
      name: apis_list_only
      id: aws.apigatewayv2.apis_list_only
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::ApiGatewayV2::Api
      x-identifiers:
        - ApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND region = 'us-east-1'
    api_tags:
      name: api_tags
      id: aws.apigatewayv2.api_tags
      x-cfn-schema-name: Api
      x-cfn-type-name: AWS::ApiGatewayV2::Api
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.RouteSelectionExpression') as route_selection_expression,
              JSON_EXTRACT(detail.Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.ApiEndpoint') as api_endpoint,
              JSON_EXTRACT(detail.Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(detail.Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(detail.Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(detail.Properties, '$.DisableSchemaValidation') as disable_schema_validation,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Target') as target,
              JSON_EXTRACT(detail.Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(detail.Properties, '$.CorsConfiguration') as cors_configuration,
              JSON_EXTRACT(detail.Properties, '$.Version') as version,
              JSON_EXTRACT(detail.Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(detail.Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(detail.Properties, '$.Body') as body,
              JSON_EXTRACT(detail.Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND detail.data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'RouteSelectionExpression') as route_selection_expression,
                json_extract_path_text(detail.Properties, 'BodyS3Location') as body_s3_location,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'ApiEndpoint') as api_endpoint,
                json_extract_path_text(detail.Properties, 'BasePath') as base_path,
                json_extract_path_text(detail.Properties, 'FailOnWarnings') as fail_on_warnings,
                json_extract_path_text(detail.Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                json_extract_path_text(detail.Properties, 'DisableSchemaValidation') as disable_schema_validation,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Target') as target,
                json_extract_path_text(detail.Properties, 'CredentialsArn') as credentials_arn,
                json_extract_path_text(detail.Properties, 'CorsConfiguration') as cors_configuration,
                json_extract_path_text(detail.Properties, 'Version') as version,
                json_extract_path_text(detail.Properties, 'ProtocolType') as protocol_type,
                json_extract_path_text(detail.Properties, 'RouteKey') as route_key,
                json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                json_extract_path_text(detail.Properties, 'Body') as body,
                json_extract_path_text(detail.Properties, 'ApiKeySelectionExpression') as api_key_selection_expression
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND listing.region = 'us-east-1'
    api_mappings:
      name: api_mappings
      id: aws.apigatewayv2.api_mappings
      x-cfn-schema-name: ApiMapping
      x-cfn-type-name: AWS::ApiGatewayV2::ApiMapping
      x-identifiers:
        - ApiMappingId
        - DomainName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ApiMapping&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::ApiMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::ApiMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::ApiMapping"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/api_mappings/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/api_mappings/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/api_mappings/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiMappingId') as api_mapping_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Stage') as stage,
              JSON_EXTRACT(Properties, '$.ApiMappingKey') as api_mapping_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
              AND data__Identifier = '<ApiMappingId>|<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiMappingId') as api_mapping_id,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.Stage') as stage,
                JSON_EXTRACT(detail.Properties, '$.ApiMappingKey') as api_mapping_key,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiMappingId') as api_mapping_id,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'Stage') as stage,
                  json_extract_path_text(Properties, 'ApiMappingKey') as api_mapping_key,
                  json_extract_path_text(Properties, 'ApiId') as api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                  AND data__Identifier = '<ApiMappingId>|<DomainName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiMappingId') as api_mapping_id,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'Stage') as stage,
                    json_extract_path_text(detail.Properties, 'ApiMappingKey') as api_mapping_key,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                    AND listing.region = 'us-east-1'
    api_mappings_list_only:
      name: api_mappings_list_only
      id: aws.apigatewayv2.api_mappings_list_only
      x-cfn-schema-name: ApiMapping
      x-cfn-type-name: AWS::ApiGatewayV2::ApiMapping
      x-identifiers:
        - ApiMappingId
        - DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiMappingId') as api_mapping_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiMappingId') as api_mapping_id,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                AND region = 'us-east-1'
    authorizers:
      name: authorizers
      id: aws.apigatewayv2.authorizers
      x-cfn-schema-name: Authorizer
      x-cfn-type-name: AWS::ApiGatewayV2::Authorizer
      x-identifiers:
        - AuthorizerId
        - ApiId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Authorizer&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Authorizer"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/authorizers/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentialsArn') as authorizer_credentials_arn,
              JSON_EXTRACT(Properties, '$.AuthorizerType') as authorizer_type,
              JSON_EXTRACT(Properties, '$.JwtConfiguration') as jwt_configuration,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.EnableSimpleResponses') as enable_simple_responses,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
              AND data__Identifier = '<AuthorizerId>|<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IdentityValidationExpression') as identity_validation_expression,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerUri') as authorizer_uri,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerCredentialsArn') as authorizer_credentials_arn,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerType') as authorizer_type,
                JSON_EXTRACT(detail.Properties, '$.JwtConfiguration') as jwt_configuration,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                JSON_EXTRACT(detail.Properties, '$.IdentitySource') as identity_source,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.EnableSimpleResponses') as enable_simple_responses,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerId') as authorizer_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IdentityValidationExpression') as identity_validation_expression,
                  json_extract_path_text(Properties, 'AuthorizerUri') as authorizer_uri,
                  json_extract_path_text(Properties, 'AuthorizerCredentialsArn') as authorizer_credentials_arn,
                  json_extract_path_text(Properties, 'AuthorizerType') as authorizer_type,
                  json_extract_path_text(Properties, 'JwtConfiguration') as jwt_configuration,
                  json_extract_path_text(Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                  json_extract_path_text(Properties, 'IdentitySource') as identity_source,
                  json_extract_path_text(Properties, 'AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'EnableSimpleResponses') as enable_simple_responses,
                  json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                  AND data__Identifier = '<AuthorizerId>|<ApiId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IdentityValidationExpression') as identity_validation_expression,
                    json_extract_path_text(detail.Properties, 'AuthorizerUri') as authorizer_uri,
                    json_extract_path_text(detail.Properties, 'AuthorizerCredentialsArn') as authorizer_credentials_arn,
                    json_extract_path_text(detail.Properties, 'AuthorizerType') as authorizer_type,
                    json_extract_path_text(detail.Properties, 'JwtConfiguration') as jwt_configuration,
                    json_extract_path_text(detail.Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                    json_extract_path_text(detail.Properties, 'IdentitySource') as identity_source,
                    json_extract_path_text(detail.Properties, 'AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'EnableSimpleResponses') as enable_simple_responses,
                    json_extract_path_text(detail.Properties, 'AuthorizerId') as authorizer_id,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                    AND listing.region = 'us-east-1'
    authorizers_list_only:
      name: authorizers_list_only
      id: aws.apigatewayv2.authorizers_list_only
      x-cfn-schema-name: Authorizer
      x-cfn-type-name: AWS::ApiGatewayV2::Authorizer
      x-identifiers:
        - AuthorizerId
        - ApiId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                AND region = 'us-east-1'
    deployments:
      name: deployments
      id: aws.apigatewayv2.deployments
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::ApiGatewayV2::Deployment
      x-identifiers:
        - ApiId
        - DeploymentId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Deployment"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/deployments/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
              AND data__Identifier = '<ApiId>|<DeploymentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DeploymentId') as deployment_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.StageName') as stage_name,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'StageName') as stage_name,
                  json_extract_path_text(Properties, 'ApiId') as api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                  AND data__Identifier = '<ApiId>|<DeploymentId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DeploymentId') as deployment_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'StageName') as stage_name,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                    AND listing.region = 'us-east-1'
    deployments_list_only:
      name: deployments_list_only
      id: aws.apigatewayv2.deployments_list_only
      x-cfn-schema-name: Deployment
      x-cfn-type-name: AWS::ApiGatewayV2::Deployment
      x-identifiers:
        - ApiId
        - DeploymentId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                AND region = 'us-east-1'
    domain_names:
      name: domain_names
      id: aws.apigatewayv2.domain_names
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGatewayV2::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::DomainName"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/domain_names/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DomainNameConfigurations') as domain_name_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
                JSON_EXTRACT(detail.Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
                JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
                JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
                JSON_EXTRACT(detail.Properties, '$.DomainNameConfigurations') as domain_name_configurations,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                  json_extract_path_text(Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                  json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                  json_extract_path_text(Properties, 'DomainName') as domain_name,
                  json_extract_path_text(Properties, 'DomainNameConfigurations') as domain_name_configurations,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                  AND data__Identifier = '<DomainName>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                    json_extract_path_text(detail.Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                    json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                    json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                    json_extract_path_text(detail.Properties, 'DomainNameConfigurations') as domain_name_configurations,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                    AND listing.region = 'us-east-1'
    domain_names_list_only:
      name: domain_names_list_only
      id: aws.apigatewayv2.domain_names_list_only
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGatewayV2::DomainName
      x-identifiers:
        - DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND region = 'us-east-1'
    domain_name_tags:
      name: domain_name_tags
      id: aws.apigatewayv2.domain_name_tags
      x-cfn-schema-name: DomainName
      x-cfn-type-name: AWS::ApiGatewayV2::DomainName
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(detail.Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(detail.Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(detail.Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(detail.Properties, '$.DomainNameConfigurations') as domain_name_configurations
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND detail.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                json_extract_path_text(detail.Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                json_extract_path_text(detail.Properties, 'RegionalDomainName') as regional_domain_name,
                json_extract_path_text(detail.Properties, 'DomainName') as domain_name,
                json_extract_path_text(detail.Properties, 'DomainNameConfigurations') as domain_name_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND listing.region = 'us-east-1'
    integrations:
      name: integrations
      id: aws.apigatewayv2.integrations
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::ApiGatewayV2::Integration
      x-identifiers:
        - ApiId
        - IntegrationId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Integration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Integration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/integrations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ConnectionId') as connection_id,
              JSON_EXTRACT(Properties, '$.ConnectionType') as connection_type,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IntegrationMethod') as integration_method,
              JSON_EXTRACT(Properties, '$.IntegrationSubtype') as integration_subtype,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationType') as integration_type,
              JSON_EXTRACT(Properties, '$.IntegrationUri') as integration_uri,
              JSON_EXTRACT(Properties, '$.PassthroughBehavior') as passthrough_behavior,
              JSON_EXTRACT(Properties, '$.PayloadFormatVersion') as payload_format_version,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.RequestTemplates') as request_templates,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.TimeoutInMillis') as timeout_in_millis,
              JSON_EXTRACT(Properties, '$.TlsConfig') as tls_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
              AND data__Identifier = '<ApiId>|<IntegrationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.ConnectionId') as connection_id,
                JSON_EXTRACT(detail.Properties, '$.ConnectionType') as connection_type,
                JSON_EXTRACT(detail.Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
                JSON_EXTRACT(detail.Properties, '$.CredentialsArn') as credentials_arn,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.IntegrationMethod') as integration_method,
                JSON_EXTRACT(detail.Properties, '$.IntegrationSubtype') as integration_subtype,
                JSON_EXTRACT(detail.Properties, '$.IntegrationId') as integration_id,
                JSON_EXTRACT(detail.Properties, '$.IntegrationType') as integration_type,
                JSON_EXTRACT(detail.Properties, '$.IntegrationUri') as integration_uri,
                JSON_EXTRACT(detail.Properties, '$.PassthroughBehavior') as passthrough_behavior,
                JSON_EXTRACT(detail.Properties, '$.PayloadFormatVersion') as payload_format_version,
                JSON_EXTRACT(detail.Properties, '$.RequestParameters') as request_parameters,
                JSON_EXTRACT(detail.Properties, '$.RequestTemplates') as request_templates,
                JSON_EXTRACT(detail.Properties, '$.ResponseParameters') as response_parameters,
                JSON_EXTRACT(detail.Properties, '$.TemplateSelectionExpression') as template_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.TimeoutInMillis') as timeout_in_millis,
                JSON_EXTRACT(detail.Properties, '$.TlsConfig') as tls_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Integration'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Integration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'ConnectionId') as connection_id,
                  json_extract_path_text(Properties, 'ConnectionType') as connection_type,
                  json_extract_path_text(Properties, 'ContentHandlingStrategy') as content_handling_strategy,
                  json_extract_path_text(Properties, 'CredentialsArn') as credentials_arn,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'IntegrationMethod') as integration_method,
                  json_extract_path_text(Properties, 'IntegrationSubtype') as integration_subtype,
                  json_extract_path_text(Properties, 'IntegrationId') as integration_id,
                  json_extract_path_text(Properties, 'IntegrationType') as integration_type,
                  json_extract_path_text(Properties, 'IntegrationUri') as integration_uri,
                  json_extract_path_text(Properties, 'PassthroughBehavior') as passthrough_behavior,
                  json_extract_path_text(Properties, 'PayloadFormatVersion') as payload_format_version,
                  json_extract_path_text(Properties, 'RequestParameters') as request_parameters,
                  json_extract_path_text(Properties, 'RequestTemplates') as request_templates,
                  json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                  json_extract_path_text(Properties, 'TemplateSelectionExpression') as template_selection_expression,
                  json_extract_path_text(Properties, 'TimeoutInMillis') as timeout_in_millis,
                  json_extract_path_text(Properties, 'TlsConfig') as tls_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
                  AND data__Identifier = '<ApiId>|<IntegrationId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'ConnectionId') as connection_id,
                    json_extract_path_text(detail.Properties, 'ConnectionType') as connection_type,
                    json_extract_path_text(detail.Properties, 'ContentHandlingStrategy') as content_handling_strategy,
                    json_extract_path_text(detail.Properties, 'CredentialsArn') as credentials_arn,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'IntegrationMethod') as integration_method,
                    json_extract_path_text(detail.Properties, 'IntegrationSubtype') as integration_subtype,
                    json_extract_path_text(detail.Properties, 'IntegrationId') as integration_id,
                    json_extract_path_text(detail.Properties, 'IntegrationType') as integration_type,
                    json_extract_path_text(detail.Properties, 'IntegrationUri') as integration_uri,
                    json_extract_path_text(detail.Properties, 'PassthroughBehavior') as passthrough_behavior,
                    json_extract_path_text(detail.Properties, 'PayloadFormatVersion') as payload_format_version,
                    json_extract_path_text(detail.Properties, 'RequestParameters') as request_parameters,
                    json_extract_path_text(detail.Properties, 'RequestTemplates') as request_templates,
                    json_extract_path_text(detail.Properties, 'ResponseParameters') as response_parameters,
                    json_extract_path_text(detail.Properties, 'TemplateSelectionExpression') as template_selection_expression,
                    json_extract_path_text(detail.Properties, 'TimeoutInMillis') as timeout_in_millis,
                    json_extract_path_text(detail.Properties, 'TlsConfig') as tls_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Integration'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Integration'
                    AND listing.region = 'us-east-1'
    integrations_list_only:
      name: integrations_list_only
      id: aws.apigatewayv2.integrations_list_only
      x-cfn-schema-name: Integration
      x-cfn-type-name: AWS::ApiGatewayV2::Integration
      x-identifiers:
        - ApiId
        - IntegrationId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'IntegrationId') as integration_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Integration'
                AND region = 'us-east-1'
    integration_responses:
      name: integration_responses
      id: aws.apigatewayv2.integration_responses
      x-cfn-schema-name: IntegrationResponse
      x-cfn-type-name: AWS::ApiGatewayV2::IntegrationResponse
      x-identifiers:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__IntegrationResponse&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::IntegrationResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::IntegrationResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::IntegrationResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/integration_responses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/integration_responses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/integration_responses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IntegrationResponseId') as integration_response_id,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseKey') as integration_response_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
              AND data__Identifier = '<ApiId>|<IntegrationId>|<IntegrationResponseId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IntegrationResponseId') as integration_response_id,
                JSON_EXTRACT(detail.Properties, '$.ResponseTemplates') as response_templates,
                JSON_EXTRACT(detail.Properties, '$.TemplateSelectionExpression') as template_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.ResponseParameters') as response_parameters,
                JSON_EXTRACT(detail.Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
                JSON_EXTRACT(detail.Properties, '$.IntegrationId') as integration_id,
                JSON_EXTRACT(detail.Properties, '$.IntegrationResponseKey') as integration_response_key,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IntegrationResponseId') as integration_response_id,
                  json_extract_path_text(Properties, 'ResponseTemplates') as response_templates,
                  json_extract_path_text(Properties, 'TemplateSelectionExpression') as template_selection_expression,
                  json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                  json_extract_path_text(Properties, 'ContentHandlingStrategy') as content_handling_strategy,
                  json_extract_path_text(Properties, 'IntegrationId') as integration_id,
                  json_extract_path_text(Properties, 'IntegrationResponseKey') as integration_response_key,
                  json_extract_path_text(Properties, 'ApiId') as api_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                  AND data__Identifier = '<ApiId>|<IntegrationId>|<IntegrationResponseId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IntegrationResponseId') as integration_response_id,
                    json_extract_path_text(detail.Properties, 'ResponseTemplates') as response_templates,
                    json_extract_path_text(detail.Properties, 'TemplateSelectionExpression') as template_selection_expression,
                    json_extract_path_text(detail.Properties, 'ResponseParameters') as response_parameters,
                    json_extract_path_text(detail.Properties, 'ContentHandlingStrategy') as content_handling_strategy,
                    json_extract_path_text(detail.Properties, 'IntegrationId') as integration_id,
                    json_extract_path_text(detail.Properties, 'IntegrationResponseKey') as integration_response_key,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                    AND listing.region = 'us-east-1'
    integration_responses_list_only:
      name: integration_responses_list_only
      id: aws.apigatewayv2.integration_responses_list_only
      x-cfn-schema-name: IntegrationResponse
      x-cfn-type-name: AWS::ApiGatewayV2::IntegrationResponse
      x-identifiers:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseId') as integration_response_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'IntegrationId') as integration_id,
                json_extract_path_text(Properties, 'IntegrationResponseId') as integration_response_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                AND region = 'us-east-1'
    models:
      name: models
      id: aws.apigatewayv2.models
      x-cfn-schema-name: Model
      x-cfn-type-name: AWS::ApiGatewayV2::Model
      x-identifiers:
        - ApiId
        - ModelId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Model&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Model"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/models/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/models/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/models/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
              AND data__Identifier = '<ApiId>|<ModelId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ModelId') as model_id,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.ContentType') as content_type,
                JSON_EXTRACT(detail.Properties, '$.Schema') as _schema,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Model'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Model'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ModelId') as model_id,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'ContentType') as content_type,
                  json_extract_path_text(Properties, 'Schema') as _schema,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
                  AND data__Identifier = '<ApiId>|<ModelId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ModelId') as model_id,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'ContentType') as content_type,
                    json_extract_path_text(detail.Properties, 'Schema') as _schema,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Model'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Model'
                    AND listing.region = 'us-east-1'
    models_list_only:
      name: models_list_only
      id: aws.apigatewayv2.models_list_only
      x-cfn-schema-name: Model
      x-cfn-type-name: AWS::ApiGatewayV2::Model
      x-identifiers:
        - ApiId
        - ModelId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ModelId') as model_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
                AND region = 'us-east-1'
    routes:
      name: routes
      id: aws.apigatewayv2.routes
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::ApiGatewayV2::Route
      x-identifiers:
        - ApiId
        - RouteId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::Route"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/routes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseSelectionExpression') as route_response_selection_expression,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
              AND data__Identifier = '<ApiId>|<RouteId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RouteId') as route_id,
                JSON_EXTRACT(detail.Properties, '$.RouteResponseSelectionExpression') as route_response_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.RequestModels') as request_models,
                JSON_EXTRACT(detail.Properties, '$.OperationName') as operation_name,
                JSON_EXTRACT(detail.Properties, '$.AuthorizationScopes') as authorization_scopes,
                JSON_EXTRACT(detail.Properties, '$.ApiKeyRequired') as api_key_required,
                JSON_EXTRACT(detail.Properties, '$.RouteKey') as route_key,
                JSON_EXTRACT(detail.Properties, '$.AuthorizationType') as authorization_type,
                JSON_EXTRACT(detail.Properties, '$.ModelSelectionExpression') as model_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.RequestParameters') as request_parameters,
                JSON_EXTRACT(detail.Properties, '$.Target') as target,
                JSON_EXTRACT(detail.Properties, '$.AuthorizerId') as authorizer_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Route'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::Route'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RouteId') as route_id,
                  json_extract_path_text(Properties, 'RouteResponseSelectionExpression') as route_response_selection_expression,
                  json_extract_path_text(Properties, 'RequestModels') as request_models,
                  json_extract_path_text(Properties, 'OperationName') as operation_name,
                  json_extract_path_text(Properties, 'AuthorizationScopes') as authorization_scopes,
                  json_extract_path_text(Properties, 'ApiKeyRequired') as api_key_required,
                  json_extract_path_text(Properties, 'RouteKey') as route_key,
                  json_extract_path_text(Properties, 'AuthorizationType') as authorization_type,
                  json_extract_path_text(Properties, 'ModelSelectionExpression') as model_selection_expression,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'RequestParameters') as request_parameters,
                  json_extract_path_text(Properties, 'Target') as target,
                  json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
                  AND data__Identifier = '<ApiId>|<RouteId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RouteId') as route_id,
                    json_extract_path_text(detail.Properties, 'RouteResponseSelectionExpression') as route_response_selection_expression,
                    json_extract_path_text(detail.Properties, 'RequestModels') as request_models,
                    json_extract_path_text(detail.Properties, 'OperationName') as operation_name,
                    json_extract_path_text(detail.Properties, 'AuthorizationScopes') as authorization_scopes,
                    json_extract_path_text(detail.Properties, 'ApiKeyRequired') as api_key_required,
                    json_extract_path_text(detail.Properties, 'RouteKey') as route_key,
                    json_extract_path_text(detail.Properties, 'AuthorizationType') as authorization_type,
                    json_extract_path_text(detail.Properties, 'ModelSelectionExpression') as model_selection_expression,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'RequestParameters') as request_parameters,
                    json_extract_path_text(detail.Properties, 'Target') as target,
                    json_extract_path_text(detail.Properties, 'AuthorizerId') as authorizer_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::Route'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::Route'
                    AND listing.region = 'us-east-1'
    routes_list_only:
      name: routes_list_only
      id: aws.apigatewayv2.routes_list_only
      x-cfn-schema-name: Route
      x-cfn-type-name: AWS::ApiGatewayV2::Route
      x-identifiers:
        - ApiId
        - RouteId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'RouteId') as route_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
                AND region = 'us-east-1'
    route_responses:
      name: route_responses
      id: aws.apigatewayv2.route_responses
      x-cfn-schema-name: RouteResponse
      x-cfn-type-name: AWS::ApiGatewayV2::RouteResponse
      x-identifiers:
        - ApiId
        - RouteId
        - RouteResponseId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__RouteResponse&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::RouteResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::RouteResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::RouteResponse"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/route_responses/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/route_responses/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/route_responses/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteResponseKey') as route_response_key,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ResponseModels') as response_models,
              JSON_EXTRACT(Properties, '$.RouteResponseId') as route_response_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
              AND data__Identifier = '<ApiId>|<RouteId>|<RouteResponseId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.RouteResponseKey') as route_response_key,
                JSON_EXTRACT(detail.Properties, '$.ResponseParameters') as response_parameters,
                JSON_EXTRACT(detail.Properties, '$.RouteId') as route_id,
                JSON_EXTRACT(detail.Properties, '$.ModelSelectionExpression') as model_selection_expression,
                JSON_EXTRACT(detail.Properties, '$.ApiId') as api_id,
                JSON_EXTRACT(detail.Properties, '$.ResponseModels') as response_models,
                JSON_EXTRACT(detail.Properties, '$.RouteResponseId') as route_response_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'RouteResponseKey') as route_response_key,
                  json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                  json_extract_path_text(Properties, 'RouteId') as route_id,
                  json_extract_path_text(Properties, 'ModelSelectionExpression') as model_selection_expression,
                  json_extract_path_text(Properties, 'ApiId') as api_id,
                  json_extract_path_text(Properties, 'ResponseModels') as response_models,
                  json_extract_path_text(Properties, 'RouteResponseId') as route_response_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                  AND data__Identifier = '<ApiId>|<RouteId>|<RouteResponseId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'RouteResponseKey') as route_response_key,
                    json_extract_path_text(detail.Properties, 'ResponseParameters') as response_parameters,
                    json_extract_path_text(detail.Properties, 'RouteId') as route_id,
                    json_extract_path_text(detail.Properties, 'ModelSelectionExpression') as model_selection_expression,
                    json_extract_path_text(detail.Properties, 'ApiId') as api_id,
                    json_extract_path_text(detail.Properties, 'ResponseModels') as response_models,
                    json_extract_path_text(detail.Properties, 'RouteResponseId') as route_response_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                    AND listing.region = 'us-east-1'
    route_responses_list_only:
      name: route_responses_list_only
      id: aws.apigatewayv2.route_responses_list_only
      x-cfn-schema-name: RouteResponse
      x-cfn-type-name: AWS::ApiGatewayV2::RouteResponse
      x-identifiers:
        - ApiId
        - RouteId
        - RouteResponseId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseId') as route_response_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'RouteId') as route_id,
                json_extract_path_text(Properties, 'RouteResponseId') as route_response_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                AND region = 'us-east-1'
    vpc_links:
      name: vpc_links
      id: aws.apigatewayv2.vpc_links
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGatewayV2::VpcLink
      x-identifiers:
        - VpcLinkId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VpcLink&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::ApiGatewayV2::VpcLink"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_links/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND data__Identifier = '<VpcLinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                  AND data__Identifier = '<VpcLinkId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                    AND detail.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                    AND listing.region = 'us-east-1'
    vpc_links_list_only:
      name: vpc_links_list_only
      id: aws.apigatewayv2.vpc_links_list_only
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGatewayV2::VpcLink
      x-identifiers:
        - VpcLinkId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND region = 'us-east-1'
    vpc_link_tags:
      name: vpc_link_tags
      id: aws.apigatewayv2.vpc_link_tags
      x-cfn-schema-name: VpcLink
      x-cfn-type-name: AWS::ApiGatewayV2::VpcLink
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND detail.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'VpcLinkId') as vpc_link_id,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND detail.data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Api&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApi
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApiRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ApiMapping&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateApiMapping
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateApiMappingRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Authorizer&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAuthorizer
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAuthorizerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Deployment&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDeployment
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__DomainName&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDomainName
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDomainNameRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Integration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIntegration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__IntegrationResponse&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateIntegrationResponse
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateIntegrationResponseRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Model&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateModel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateModelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Route&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRoute
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__RouteResponse&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRouteResponse
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRouteResponseRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VpcLink&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVpcLink
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVpcLinkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
