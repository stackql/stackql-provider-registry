openapi: 3.0.0
info:
  title: IoTSiteWise
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    User:
      description: Contains information for a user identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        id:
          description: The AWS SSO ID of the user.
          type: string
    IamUser:
      description: Contains information for an IAM user identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        arn:
          description: The ARN of the IAM user.
          type: string
    IamRole:
      description: Contains information for an IAM role identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        arn:
          description: The ARN of the IAM role.
          type: string
    Portal:
      type: object
      properties:
        PortalAuthMode:
          description: The service to use to authenticate users to the portal. Choose from SSO or IAM. You can't change this value after you create a portal.
          type: string
        PortalArn:
          description: The ARN of the portal, which has the following format.
          type: string
        PortalClientId:
          description: The AWS SSO application generated client ID (used with AWS SSO APIs).
          type: string
        PortalContactEmail:
          description: The AWS administrator's contact email address.
          type: string
        PortalDescription:
          description: A description for the portal.
          type: string
        PortalId:
          description: The ID of the portal.
          type: string
        PortalName:
          description: A friendly name for the portal.
          type: string
        PortalStartUrl:
          description: The public root URL for the AWS IoT AWS IoT SiteWise Monitor application portal.
          type: string
        PortalType:
          description: The type of portal
          type: string
          enum:
            - SITEWISE_PORTAL_V1
            - SITEWISE_PORTAL_V2
        PortalTypeConfiguration:
          $ref: '#/components/schemas/PortalTypeConfiguration'
        RoleArn:
          description: The ARN of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf.
          type: string
        NotificationSenderEmail:
          description: The email address that sends alarm notifications.
          type: string
        Alarms:
          type: object
          description: Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range.
          additionalProperties: false
          properties:
            AlarmRoleArn:
              type: string
              description: The ARN of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events.
            NotificationLambdaArn:
              type: string
              description: The ARN of the AWS Lambda function that manages alarm notifications. For more information, see Managing alarm notifications in the AWS IoT Events Developer Guide.
        Tags:
          description: A list of key-value pairs that contain metadata for the portal.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PortalContactEmail
        - PortalName
        - RoleArn
      x-stackql-resource-name: portal
      description: Resource schema for AWS::IoTSiteWise::Portal
      x-type-name: AWS::IoTSiteWise::Portal
      x-stackql-primary-identifier:
        - PortalId
      x-stackql-additional-identifiers:
        - - PortalArn
      x-create-only-properties:
        - PortalAuthMode
        - PortalType
      x-read-only-properties:
        - PortalArn
        - PortalClientId
        - PortalId
        - PortalStartUrl
      x-required-properties:
        - PortalContactEmail
        - PortalName
        - RoleArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
      x-required-permissions:
        create:
          - iotsitewise:CreatePortal
          - iotsitewise:DescribePortal
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iam:PassRole
          - sso:CreateManagedApplicationInstance
          - sso:DescribeRegisteredRegions
        read:
          - iotsitewise:DescribePortal
          - iotsitewise:ListTagsForResource
        update:
          - iotsitewise:DescribePortal
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:UpdatePortal
          - iotsitewise:UntagResource
          - iam:PassRole
          - sso:GetManagedApplicationInstance
          - sso:UpdateApplicationInstanceDisplayData
        delete:
          - iotsitewise:DescribePortal
          - iotsitewise:DeletePortal
          - sso:DeleteManagedApplicationInstance
        list:
          - iotsitewise:ListPortals
          - iotsitewise:ListTagsForResource
    Project:
      type: object
      properties:
        PortalId:
          description: The ID of the portal in which to create the project.
          type: string
        ProjectId:
          description: The ID of the project.
          type: string
        ProjectName:
          description: A friendly name for the project.
          type: string
        ProjectDescription:
          description: A description for the project.
          type: string
        ProjectArn:
          description: The ARN of the project.
          type: string
        AssetIds:
          description: The IDs of the assets to be associated to the project.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssetId'
        Tags:
          description: A list of key-value pairs that contain metadata for the project.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PortalId
        - ProjectName
      x-stackql-resource-name: project
      description: Resource schema for AWS::IoTSiteWise::Project
      x-type-name: AWS::IoTSiteWise::Project
      x-stackql-primary-identifier:
        - ProjectId
      x-create-only-properties:
        - PortalId
      x-read-only-properties:
        - ProjectId
        - ProjectArn
      x-required-properties:
        - PortalId
        - ProjectName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
      x-required-permissions:
        create:
          - iotsitewise:CreateProject
          - iotsitewise:DescribeProject
          - iotsitewise:ListProjectAssets
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:BatchAssociateProjectAssets
        read:
          - iotsitewise:DescribeProject
          - iotsitewise:ListTagsForResource
          - iotsitewise:ListProjectAssets
        update:
          - iotsitewise:DescribeProject
          - iotsitewise:UpdateProject
          - iotsitewise:BatchAssociateProjectAssets
          - iotsitewise:BatchDisAssociateProjectAssets
          - iotsitewise:ListProjectAssets
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
        delete:
          - iotsitewise:DescribeProject
          - iotsitewise:DeleteProject
        list:
          - iotsitewise:ListProjects
          - iotsitewise:ListTagsForResource
    AccessPolicyIdentity:
      description: The identity for this access policy. Choose either an SSO user or group or an IAM user or role.
      type: object
      additionalProperties: false
      properties:
        User:
          $ref: '#/components/schemas/User'
        IamUser:
          $ref: '#/components/schemas/IamUser'
        IamRole:
          $ref: '#/components/schemas/IamRole'
    AccessPolicyResource:
      description: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
      type: object
      additionalProperties: false
      properties:
        Portal:
          $ref: '#/components/schemas/Portal'
        Project:
          $ref: '#/components/schemas/Project'
    AccessPolicy:
      type: object
      properties:
        AccessPolicyId:
          description: The ID of the access policy.
          type: string
        AccessPolicyArn:
          description: The ARN of the access policy.
          type: string
        AccessPolicyIdentity:
          description: The identity for this access policy. Choose either a user or a group but not both.
          $ref: '#/components/schemas/AccessPolicyIdentity'
        AccessPolicyPermission:
          description: The permission level for this access policy. Valid values are ADMINISTRATOR or VIEWER.
          type: string
        AccessPolicyResource:
          description: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
          $ref: '#/components/schemas/AccessPolicyResource'
      required:
        - AccessPolicyIdentity
        - AccessPolicyPermission
        - AccessPolicyResource
      x-stackql-resource-name: access_policy
      description: Resource schema for AWS::IoTSiteWise::AccessPolicy
      x-type-name: AWS::IoTSiteWise::AccessPolicy
      x-stackql-primary-identifier:
        - AccessPolicyId
      x-read-only-properties:
        - AccessPolicyArn
        - AccessPolicyId
      x-required-properties:
        - AccessPolicyIdentity
        - AccessPolicyPermission
        - AccessPolicyResource
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - iotsitewise:CreateAccessPolicy
        read:
          - iotsitewise:DescribeAccessPolicy
        update:
          - iotsitewise:DescribeAccessPolicy
          - iotsitewise:UpdateAccessPolicy
        delete:
          - iotsitewise:DescribeAccessPolicy
          - iotsitewise:DeleteAccessPolicy
        list:
          - iotsitewise:ListAccessPolicies
          - iotsitewise:ListProjects
          - iotsitewise:ListPortals
    AssetProperty:
      description: The asset property's definition, alias, unit, and notification state.
      type: object
      additionalProperties: false
      properties:
        Id:
          description: Customer provided actual UUID for property
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        ExternalId:
          description: String-friendly customer provided external ID
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        LogicalId:
          description: Customer provided ID for property.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Alias:
          description: The property alias that identifies the property.
          type: string
        NotificationState:
          description: The MQTT notification state (ENABLED or DISABLED) for this asset property.
          type: string
          enum:
            - ENABLED
            - DISABLED
        Unit:
          description: The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the assetModelProperty in the asset model.
          type: string
    AssetHierarchy:
      description: A hierarchy specifies allowed parent/child asset relationships.
      type: object
      additionalProperties: false
      required:
        - ChildAssetId
      properties:
        Id:
          description: Customer provided actual UUID for property
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        ExternalId:
          description: String-friendly customer provided external ID
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        LogicalId:
          description: The LogicalID of a hierarchy in the parent asset's model.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        ChildAssetId:
          description: The ID of the child asset to be associated.
          type: string
    Tag:
      description: To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Key
        - Value
    Asset:
      type: object
      properties:
        AssetId:
          description: The ID of the asset
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        AssetExternalId:
          description: The External ID of the asset
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        AssetModelId:
          description: The ID of the asset model from which to create the asset.
          type: string
        AssetArn:
          description: The ARN of the asset
          type: string
        AssetName:
          description: A unique, friendly name for the asset.
          type: string
        AssetDescription:
          description: A description for the asset
          type: string
        AssetProperties:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetProperty'
        AssetHierarchies:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetHierarchy'
        Tags:
          description: A list of key-value pairs that contain metadata for the asset.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssetName
        - AssetModelId
      x-stackql-resource-name: asset
      description: Resource schema for AWS::IoTSiteWise::Asset
      x-type-name: AWS::IoTSiteWise::Asset
      x-stackql-primary-identifier:
        - AssetId
      x-read-only-properties:
        - AssetArn
        - AssetId
        - AssetProperties/*/Id
        - AssetHierarchies/*/Id
      x-required-properties:
        - AssetName
        - AssetModelId
      x-taggable: true
      x-required-permissions:
        create:
          - iotsitewise:AssociateAssets
          - iotsitewise:CreateAsset
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssociatedAssets
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetProperties
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:UpdateAssetProperty
        read:
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssociatedAssets
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:ListAssetProperties
          - iotsitewise:ListTagsForResource
        update:
          - iotsitewise:AssociateAssets
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:DisassociateAssets
          - iotsitewise:ListAssociatedAssets
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:UpdateAsset
          - iotsitewise:UpdateAssetProperty
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetProperties
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:UntagResource
        delete:
          - iotsitewise:DeleteAsset
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:DisassociateAssets
          - iotsitewise:ListAssociatedAssets
          - iotsitewise:ListAssetProperties
          - iotsitewise:ListTagsForResource
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetProperties
        list:
          - iotsitewise:ListAssetModels
          - iotsitewise:ListAssets
    AssetModelCompositeModel:
      description: Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.
      type: object
      additionalProperties: false
      required:
        - Name
        - Type
      properties:
        Id:
          description: The Actual ID of the composite model
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        ExternalId:
          description: The External ID of the composite model
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        ComposedAssetModelId:
          description: The component model ID for which the composite model is composed of
          type: string
        ParentAssetModelCompositeModelExternalId:
          description: The parent composite model External ID
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        Path:
          description: The path of the composite model. This is only for derived composite models
          type: array
          x-insertionOrder: true
          items:
            type: string
        Description:
          description: A description for the asset composite model.
          type: string
        Name:
          description: A unique, friendly name for the asset composite model.
          type: string
        Type:
          description: The type of the composite model. For alarm composite models, this type is AWS/ALARM
          type: string
        CompositeModelProperties:
          description: The property definitions of the asset model. You can specify up to 200 properties per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelProperty'
    PropertyPathDefinition:
      description: The definition for property path which is used to reference properties in transforms/metrics
      type: object
      additionalProperties: false
      required:
        - Name
      properties:
        Name:
          description: The name of the property
          type: string
    AssetModelProperty:
      description: Contains information about an asset model property.
      type: object
      additionalProperties: false
      required:
        - Name
        - DataType
        - Type
      properties:
        LogicalId:
          description: Customer provided Logical ID for property.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Id:
          description: The ID of the Asset Model Property
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        ExternalId:
          description: The External ID of the Asset Model Property
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        Name:
          description: The name of the asset model property.
          type: string
        DataType:
          description: The data type of the asset model property.
          $ref: '#/components/schemas/DataType'
        DataTypeSpec:
          description: The data type of the structure for this property.
          $ref: '#/components/schemas/DataTypeSpec'
        Unit:
          description: The unit of the asset model property, such as Newtons or RPM.
          type: string
        Type:
          description: The property type
          $ref: '#/components/schemas/PropertyType'
    DataType:
      type: string
      enum:
        - STRING
        - INTEGER
        - DOUBLE
        - BOOLEAN
        - STRUCT
    DataTypeSpec:
      type: string
      enum:
        - AWS/ALARM_STATE
    PropertyType:
      description: Contains a property type, which can be one of attribute, measurement, metric, or transform.
      type: object
      additionalProperties: false
      required:
        - TypeName
      properties:
        TypeName:
          $ref: '#/components/schemas/TypeName'
        Attribute:
          $ref: '#/components/schemas/Attribute'
        Transform:
          $ref: '#/components/schemas/Transform'
        Metric:
          $ref: '#/components/schemas/Metric'
    TypeName:
      type: string
      enum:
        - Measurement
        - Attribute
        - Transform
        - Metric
    Attribute:
      type: object
      additionalProperties: false
      properties:
        DefaultValue:
          type: string
    Transform:
      type: object
      additionalProperties: false
      properties:
        Expression:
          description: The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
          type: string
        Variables:
          description: The list of variables used in the expression.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ExpressionVariable'
      required:
        - Expression
        - Variables
    Metric:
      type: object
      additionalProperties: false
      properties:
        Expression:
          description: The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.
          type: string
        Variables:
          description: The list of variables used in the expression.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ExpressionVariable'
        Window:
          description: The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression
          $ref: '#/components/schemas/MetricWindow'
      required:
        - Expression
        - Variables
        - Window
    MetricWindow:
      description: Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).
      type: object
      additionalProperties: false
      properties:
        Tumbling:
          $ref: '#/components/schemas/TumblingWindow'
    TumblingWindow:
      description: Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.
      type: object
      additionalProperties: false
      properties:
        Interval:
          $ref: '#/components/schemas/Interval'
        Offset:
          $ref: '#/components/schemas/Offset'
      required:
        - Interval
    Interval:
      description: The time interval for the tumbling window.
      type: string
    Offset:
      description: The shift or reference point on timeline for the contiguous time intervals.
      type: string
    ExpressionVariable:
      type: object
      additionalProperties: false
      properties:
        Name:
          description: The friendly name of the variable to be used in the expression.
          type: string
        Value:
          description: The variable that identifies an asset property from which to use values.
          $ref: '#/components/schemas/VariableValue'
      required:
        - Name
        - Value
    VariableValue:
      type: object
      additionalProperties: false
      properties:
        PropertyLogicalId:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        PropertyId:
          description: The ID of the property that is trying to be referenced
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        PropertyExternalId:
          description: The External ID of the property that is trying to be referenced
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        PropertyPath:
          description: The path of the property that is trying to be referenced
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/PropertyPathDefinition'
        HierarchyLogicalId:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        HierarchyId:
          description: The ID of the hierarchy that is trying to be referenced
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        HierarchyExternalId:
          description: The External ID of the hierarchy that is trying to be referenced
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
    AssetModelHierarchy:
      description: Contains information about an asset model hierarchy.
      type: object
      additionalProperties: false
      required:
        - Name
        - ChildAssetModelId
      properties:
        Id:
          description: Customer provided actual ID for hierarchy
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        ExternalId:
          description: Customer provided external ID for hierarchy
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        LogicalId:
          description: Customer provided logical ID for hierarchy.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Name:
          description: The name of the asset model hierarchy.
          type: string
        ChildAssetModelId:
          description: The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.
          type: string
    AssetModel:
      type: object
      properties:
        AssetModelId:
          description: The ID of the asset model.
          type: string
          minLength: 36
          maxLength: 36
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
        AssetModelType:
          description: The type of the asset model (ASSET_MODEL OR COMPONENT_MODEL)
          type: string
        AssetModelExternalId:
          description: The external ID of the asset model.
          type: string
          minLength: 2
          maxLength: 128
          pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
        AssetModelArn:
          description: The ARN of the asset model, which has the following format.
          type: string
        AssetModelName:
          description: A unique, friendly name for the asset model.
          type: string
        AssetModelDescription:
          description: A description for the asset model.
          type: string
        AssetModelProperties:
          description: The property definitions of the asset model. You can specify up to 200 properties per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelProperty'
        AssetModelCompositeModels:
          description: The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelCompositeModel'
        AssetModelHierarchies:
          description: The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelHierarchy'
        Tags:
          description: A list of key-value pairs that contain metadata for the asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssetModelName
      x-stackql-resource-name: asset_model
      description: Resource schema for AWS::IoTSiteWise::AssetModel
      x-type-name: AWS::IoTSiteWise::AssetModel
      x-stackql-primary-identifier:
        - AssetModelId
      x-create-only-properties:
        - AssetModelType
      x-write-only-properties:
        - AssetModelProperties/*/DataTypeSpec
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/HierarchyLogicalId
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/HierarchyId
        - AssetModelProperties/*/Type/Metric/Variables/*/Value/HierarchyId
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/HierarchyExternalId
        - AssetModelProperties/*/Type/Metric/Variables/*/Value/PropertyPath/*/Name
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/PropertyPath/*/Name
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/HierarchyExternalId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Transform/Variables/*/Value/HierarchyId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Metric/Variables/*/Value/HierarchyId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Transform/Variables/*/Value/HierarchyLogicalId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Transform/Variables/*/Value/HierarchyExternalId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Transform/Variables/*/Value/PropertyPath/*/Name
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Metric/Variables/*/Value/PropertyPath/*/Name
        - AssetModelCompositeModels/*/CompositeModelProperties/*/DataTypeSpec
      x-read-only-properties:
        - AssetModelArn
        - AssetModelId
        - AssetModelProperties/*/Id
        - AssetModelProperties/*/Type/Transform/Variables/*/Value/PropertyId
        - AssetModelProperties/*/Type/Metric/Variables/*/Value/PropertyId
        - AssetModelHierarchies/*/Id
        - AssetModelCompositeModels/*/Id
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Id
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Transform/Variables/*/Value/PropertyId
        - AssetModelCompositeModels/*/CompositeModelProperties/*/Type/Metric/Variables/*/Value/PropertyId
      x-required-properties:
        - AssetModelName
      x-taggable: true
      x-required-permissions:
        create:
          - iotsitewise:CreateAssetModel
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:DescribeAssetModel
          - iotsitewise:UpdateAssetModel
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:UpdateAssetModelCompositeModel
          - iotsitewise:DescribeAssetModelCompositeModel
          - iotsitewise:CreateAssetModelCompositeModel
        read:
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:DescribeAssetModelCompositeModel
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:ListTagsForResource
        update:
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
          - iotsitewise:CreateAssetModelCompositeModel
          - iotsitewise:UpdateAssetModelCompositeModel
          - iotsitewise:DeleteAssetModelCompositeModel
          - iotsitewise:DescribeAssetModelCompositeModel
          - iotsitewise:UpdateAssetModel
        delete:
          - iotsitewise:DescribeAssetModel
          - iotsitewise:DeleteAssetModel
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
        list:
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssetModels
          - iotsitewise:ListTagsForResource
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
    Dashboard:
      type: object
      properties:
        ProjectId:
          description: The ID of the project in which to create the dashboard.
          type: string
        DashboardId:
          description: The ID of the dashboard.
          type: string
        DashboardName:
          description: A friendly name for the dashboard.
          type: string
        DashboardDescription:
          description: A description for the dashboard.
          type: string
        DashboardDefinition:
          description: The dashboard definition specified in a JSON literal.
          type: string
        DashboardArn:
          description: The ARN of the dashboard.
          type: string
        Tags:
          description: A list of key-value pairs that contain metadata for the dashboard.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DashboardDefinition
        - DashboardDescription
        - DashboardName
      x-stackql-resource-name: dashboard
      description: Resource schema for AWS::IoTSiteWise::Dashboard
      x-type-name: AWS::IoTSiteWise::Dashboard
      x-stackql-primary-identifier:
        - DashboardId
      x-stackql-additional-identifiers:
        - - DashboardArn
      x-create-only-properties:
        - ProjectId
      x-read-only-properties:
        - DashboardArn
        - DashboardId
      x-required-properties:
        - DashboardDefinition
        - DashboardDescription
        - DashboardName
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
      x-required-permissions:
        create:
          - iotsitewise:CreateDashboard
          - iotsitewise:DescribeDashboard
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
        read:
          - iotsitewise:DescribeDashboard
          - iotsitewise:ListTagsForResource
        update:
          - iotsitewise:DescribeDashboard
          - iotsitewise:UpdateDashboard
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
          - iotsitewise:DescribeAsset
          - iotsitewise:DescribeAssetModel
          - iotsitewise:ListAssetModelProperties
          - iotsitewise:ListAssetModelCompositeModels
        delete:
          - iotsitewise:DescribeDashboard
          - iotsitewise:DeleteDashboard
        list:
          - iotsitewise:ListDashboards
          - iotsitewise:ListTagsForResource
    GatewayCapabilitySummary:
      description: Contains a summary of a gateway capability configuration.
      additionalProperties: false
      type: object
      properties:
        CapabilityNamespace:
          $ref: '#/components/schemas/CapabilityNamespace'
        CapabilityConfiguration:
          $ref: '#/components/schemas/CapabilityConfiguration'
      required:
        - CapabilityNamespace
    GreengrassV2:
      description: Contains the CoreDeviceThingName of AWS IoT Greengrass Group V2 that the gateway runs on.
      additionalProperties: false
      type: object
      properties:
        CoreDeviceThingName:
          description: The name of the CoreDevice in GreenGrass V2.
          type: string
      required:
        - CoreDeviceThingName
    CapabilityNamespace:
      description: The namespace of the capability configuration.
      type: string
    Greengrass:
      description: Contains the ARN of AWS IoT Greengrass Group V1 that the gateway runs on.
      additionalProperties: false
      type: object
      properties:
        GroupArn:
          description: The ARN of the Greengrass group.
          type: string
      required:
        - GroupArn
    CapabilityConfiguration:
      description: The JSON document that defines the gateway capability's configuration.
      type: string
    GatewayPlatform:
      oneOf:
        - required:
            - Greengrass
        - required:
            - GreengrassV2
        - required:
            - SiemensIE
      description: Contains a gateway's platform information.
      additionalProperties: false
      type: object
      properties:
        GreengrassV2:
          description: A gateway that runs on AWS IoT Greengrass V2.
          $ref: '#/components/schemas/GreengrassV2'
        Greengrass:
          description: A gateway that runs on AWS IoT Greengrass V1.
          $ref: '#/components/schemas/Greengrass'
        SiemensIE:
          description: A gateway that runs on Siemens Industrial Edge.
          $ref: '#/components/schemas/SiemensIE'
    SiemensIE:
      description: Contains the IotCoreThingName of AWS IoT Thing that the gateway runs on.
      additionalProperties: false
      type: object
      properties:
        IotCoreThingName:
          description: The name of the IoT Core Thing.
          type: string
      required:
        - IotCoreThingName
    Gateway:
      type: object
      properties:
        GatewayCapabilitySummaries:
          uniqueItems: true
          description: A list of gateway capability summaries that each contain a namespace and status.
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayCapabilitySummary'
        GatewayName:
          description: A unique, friendly name for the gateway.
          type: string
        GatewayPlatform:
          description: The gateway's platform. You can only specify one platform in a gateway.
          $ref: '#/components/schemas/GatewayPlatform'
        GatewayId:
          description: The ID of the gateway device.
          type: string
        Tags:
          uniqueItems: false
          description: A list of key-value pairs that contain metadata for the gateway.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - GatewayName
        - GatewayPlatform
      x-stackql-resource-name: gateway
      description: Resource schema for AWS::IoTSiteWise::Gateway
      x-type-name: AWS::IoTSiteWise::Gateway
      x-stackql-primary-identifier:
        - GatewayId
      x-create-only-properties:
        - GatewayPlatform
      x-read-only-properties:
        - GatewayId
      x-required-properties:
        - GatewayName
        - GatewayPlatform
      x-tagging:
        permissions:
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - iotsitewise:DescribeGateway
          - iotsitewise:DescribeGatewayCapabilityConfiguration
          - iotsitewise:ListTagsForResource
        create:
          - iotsitewise:CreateGateway
          - iotsitewise:DescribeGateway
          - iotsitewise:DescribeGatewayCapabilityConfiguration
          - iotsitewise:UpdateGatewayCapabilityConfiguration
          - iam:PassRole
          - iam:GetRole
          - greengrass:GetCoreDevice
          - iotsitewise:ListTagsForResource
          - iotsitewise:TagResource
          - iot:DescribeThing
        update:
          - iotsitewise:UpdateGateway
          - iotsitewise:UpdateGatewayCapabilityConfiguration
          - iotsitewise:TagResource
          - iotsitewise:UntagResource
          - iotsitewise:DescribeGateway
          - iotsitewise:DescribeGatewayCapabilityConfiguration
          - iotsitewise:ListTagsForResource
        list:
          - iotsitewise:ListGateways
          - iotsitewise:ListTagsForResource
        delete:
          - iotsitewise:DescribeGateway
          - iotsitewise:DescribeGatewayCapabilityConfiguration
          - iotsitewise:DeleteGateway
    PortalTypeEntry:
      description: Container associated a certain PortalType.
      type: object
      additionalProperties: false
      properties:
        PortalTools:
          $ref: '#/components/schemas/PortalTools'
      required:
        - PortalTools
    PortalTools:
      description: List of enabled Tools for a certain portal.
      type: array
      items:
        type: string
    PortalTypeConfiguration:
      description: Map to associate detail of configuration related with a PortalType.
      type: object
      additionalProperties: false
      x-patternProperties:
        ^[a-z][a-zA-Z0-9_]*$:
          $ref: '#/components/schemas/PortalTypeEntry'
    AssetId:
      description: The ID of the asset
      type: string
    CreatePortalRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PortalAuthMode:
              description: The service to use to authenticate users to the portal. Choose from SSO or IAM. You can't change this value after you create a portal.
              type: string
            PortalArn:
              description: The ARN of the portal, which has the following format.
              type: string
            PortalClientId:
              description: The AWS SSO application generated client ID (used with AWS SSO APIs).
              type: string
            PortalContactEmail:
              description: The AWS administrator's contact email address.
              type: string
            PortalDescription:
              description: A description for the portal.
              type: string
            PortalId:
              description: The ID of the portal.
              type: string
            PortalName:
              description: A friendly name for the portal.
              type: string
            PortalStartUrl:
              description: The public root URL for the AWS IoT AWS IoT SiteWise Monitor application portal.
              type: string
            PortalType:
              description: The type of portal
              type: string
              enum:
                - SITEWISE_PORTAL_V1
                - SITEWISE_PORTAL_V2
            PortalTypeConfiguration:
              $ref: '#/components/schemas/PortalTypeConfiguration'
            RoleArn:
              description: The ARN of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf.
              type: string
            NotificationSenderEmail:
              description: The email address that sends alarm notifications.
              type: string
            Alarms:
              type: object
              description: Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range.
              additionalProperties: false
              properties:
                AlarmRoleArn:
                  type: string
                  description: The ARN of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events.
                NotificationLambdaArn:
                  type: string
                  description: The ARN of the AWS Lambda function that manages alarm notifications. For more information, see Managing alarm notifications in the AWS IoT Events Developer Guide.
            Tags:
              description: A list of key-value pairs that contain metadata for the portal.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreatePortalRequest
      type: object
      required: []
    CreateProjectRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            PortalId:
              description: The ID of the portal in which to create the project.
              type: string
            ProjectId:
              description: The ID of the project.
              type: string
            ProjectName:
              description: A friendly name for the project.
              type: string
            ProjectDescription:
              description: A description for the project.
              type: string
            ProjectArn:
              description: The ARN of the project.
              type: string
            AssetIds:
              description: The IDs of the assets to be associated to the project.
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/AssetId'
            Tags:
              description: A list of key-value pairs that contain metadata for the project.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateProjectRequest
      type: object
      required: []
    CreateAccessPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AccessPolicyId:
              description: The ID of the access policy.
              type: string
            AccessPolicyArn:
              description: The ARN of the access policy.
              type: string
            AccessPolicyIdentity:
              description: The identity for this access policy. Choose either a user or a group but not both.
              $ref: '#/components/schemas/AccessPolicyIdentity'
            AccessPolicyPermission:
              description: The permission level for this access policy. Valid values are ADMINISTRATOR or VIEWER.
              type: string
            AccessPolicyResource:
              description: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
              $ref: '#/components/schemas/AccessPolicyResource'
          x-stackQL-stringOnly: true
      x-title: CreateAccessPolicyRequest
      type: object
      required: []
    CreateAssetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AssetId:
              description: The ID of the asset
              type: string
              minLength: 36
              maxLength: 36
              pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
            AssetExternalId:
              description: The External ID of the asset
              type: string
              minLength: 2
              maxLength: 128
              pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
            AssetModelId:
              description: The ID of the asset model from which to create the asset.
              type: string
            AssetArn:
              description: The ARN of the asset
              type: string
            AssetName:
              description: A unique, friendly name for the asset.
              type: string
            AssetDescription:
              description: A description for the asset
              type: string
            AssetProperties:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AssetProperty'
            AssetHierarchies:
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AssetHierarchy'
            Tags:
              description: A list of key-value pairs that contain metadata for the asset.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAssetRequest
      type: object
      required: []
    CreateAssetModelRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AssetModelId:
              description: The ID of the asset model.
              type: string
              minLength: 36
              maxLength: 36
              pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
            AssetModelType:
              description: The type of the asset model (ASSET_MODEL OR COMPONENT_MODEL)
              type: string
            AssetModelExternalId:
              description: The external ID of the asset model.
              type: string
              minLength: 2
              maxLength: 128
              pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
            AssetModelArn:
              description: The ARN of the asset model, which has the following format.
              type: string
            AssetModelName:
              description: A unique, friendly name for the asset model.
              type: string
            AssetModelDescription:
              description: A description for the asset model.
              type: string
            AssetModelProperties:
              description: The property definitions of the asset model. You can specify up to 200 properties per asset model.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AssetModelProperty'
            AssetModelCompositeModels:
              description: The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AssetModelCompositeModel'
            AssetModelHierarchies:
              description: The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/AssetModelHierarchy'
            Tags:
              description: A list of key-value pairs that contain metadata for the asset model.
              type: array
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAssetModelRequest
      type: object
      required: []
    CreateDashboardRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ProjectId:
              description: The ID of the project in which to create the dashboard.
              type: string
            DashboardId:
              description: The ID of the dashboard.
              type: string
            DashboardName:
              description: A friendly name for the dashboard.
              type: string
            DashboardDescription:
              description: A description for the dashboard.
              type: string
            DashboardDefinition:
              description: The dashboard definition specified in a JSON literal.
              type: string
            DashboardArn:
              description: The ARN of the dashboard.
              type: string
            Tags:
              description: A list of key-value pairs that contain metadata for the dashboard.
              type: array
              uniqueItems: false
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDashboardRequest
      type: object
      required: []
    CreateGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            GatewayCapabilitySummaries:
              uniqueItems: true
              description: A list of gateway capability summaries that each contain a namespace and status.
              x-insertionOrder: true
              type: array
              items:
                $ref: '#/components/schemas/GatewayCapabilitySummary'
            GatewayName:
              description: A unique, friendly name for the gateway.
              type: string
            GatewayPlatform:
              description: The gateway's platform. You can only specify one platform in a gateway.
              $ref: '#/components/schemas/GatewayPlatform'
            GatewayId:
              description: The ID of the gateway device.
              type: string
            Tags:
              uniqueItems: false
              description: A list of key-value pairs that contain metadata for the gateway.
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateGatewayRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    portals:
      name: portals
      id: aws.iotsitewise.portals
      x-cfn-schema-name: Portal
      x-cfn-type-name: AWS::IoTSiteWise::Portal
      x-identifiers:
        - PortalId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Portal&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Portal"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Portal"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Portal"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/portals/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/portals/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/portals/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PortalAuthMode') as portal_auth_mode,
              JSON_EXTRACT(Properties, '$.PortalArn') as portal_arn,
              JSON_EXTRACT(Properties, '$.PortalClientId') as portal_client_id,
              JSON_EXTRACT(Properties, '$.PortalContactEmail') as portal_contact_email,
              JSON_EXTRACT(Properties, '$.PortalDescription') as portal_description,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(Properties, '$.PortalName') as portal_name,
              JSON_EXTRACT(Properties, '$.PortalStartUrl') as portal_start_url,
              JSON_EXTRACT(Properties, '$.PortalType') as portal_type,
              JSON_EXTRACT(Properties, '$.PortalTypeConfiguration') as portal_type_configuration,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.NotificationSenderEmail') as notification_sender_email,
              JSON_EXTRACT(Properties, '$.Alarms') as alarms,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
              AND data__Identifier = '<PortalId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PortalAuthMode') as portal_auth_mode,
                JSON_EXTRACT(detail.Properties, '$.PortalArn') as portal_arn,
                JSON_EXTRACT(detail.Properties, '$.PortalClientId') as portal_client_id,
                JSON_EXTRACT(detail.Properties, '$.PortalContactEmail') as portal_contact_email,
                JSON_EXTRACT(detail.Properties, '$.PortalDescription') as portal_description,
                JSON_EXTRACT(detail.Properties, '$.PortalId') as portal_id,
                JSON_EXTRACT(detail.Properties, '$.PortalName') as portal_name,
                JSON_EXTRACT(detail.Properties, '$.PortalStartUrl') as portal_start_url,
                JSON_EXTRACT(detail.Properties, '$.PortalType') as portal_type,
                JSON_EXTRACT(detail.Properties, '$.PortalTypeConfiguration') as portal_type_configuration,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.NotificationSenderEmail') as notification_sender_email,
                JSON_EXTRACT(detail.Properties, '$.Alarms') as alarms,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Portal'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Portal'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PortalAuthMode') as portal_auth_mode,
                  json_extract_path_text(Properties, 'PortalArn') as portal_arn,
                  json_extract_path_text(Properties, 'PortalClientId') as portal_client_id,
                  json_extract_path_text(Properties, 'PortalContactEmail') as portal_contact_email,
                  json_extract_path_text(Properties, 'PortalDescription') as portal_description,
                  json_extract_path_text(Properties, 'PortalId') as portal_id,
                  json_extract_path_text(Properties, 'PortalName') as portal_name,
                  json_extract_path_text(Properties, 'PortalStartUrl') as portal_start_url,
                  json_extract_path_text(Properties, 'PortalType') as portal_type,
                  json_extract_path_text(Properties, 'PortalTypeConfiguration') as portal_type_configuration,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'NotificationSenderEmail') as notification_sender_email,
                  json_extract_path_text(Properties, 'Alarms') as alarms,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
                  AND data__Identifier = '<PortalId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PortalAuthMode') as portal_auth_mode,
                    json_extract_path_text(detail.Properties, 'PortalArn') as portal_arn,
                    json_extract_path_text(detail.Properties, 'PortalClientId') as portal_client_id,
                    json_extract_path_text(detail.Properties, 'PortalContactEmail') as portal_contact_email,
                    json_extract_path_text(detail.Properties, 'PortalDescription') as portal_description,
                    json_extract_path_text(detail.Properties, 'PortalId') as portal_id,
                    json_extract_path_text(detail.Properties, 'PortalName') as portal_name,
                    json_extract_path_text(detail.Properties, 'PortalStartUrl') as portal_start_url,
                    json_extract_path_text(detail.Properties, 'PortalType') as portal_type,
                    json_extract_path_text(detail.Properties, 'PortalTypeConfiguration') as portal_type_configuration,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'NotificationSenderEmail') as notification_sender_email,
                    json_extract_path_text(detail.Properties, 'Alarms') as alarms,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Portal'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::Portal'
                    AND listing.region = 'us-east-1'
    portals_list_only:
      name: portals_list_only
      id: aws.iotsitewise.portals_list_only
      x-cfn-schema-name: Portal
      x-cfn-type-name: AWS::IoTSiteWise::Portal
      x-identifiers:
        - PortalId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PortalId') as portal_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
                AND region = 'us-east-1'
    portal_tags:
      name: portal_tags
      id: aws.iotsitewise.portal_tags
      x-cfn-schema-name: Portal
      x-cfn-type-name: AWS::IoTSiteWise::Portal
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PortalAuthMode') as portal_auth_mode,
              JSON_EXTRACT(detail.Properties, '$.PortalArn') as portal_arn,
              JSON_EXTRACT(detail.Properties, '$.PortalClientId') as portal_client_id,
              JSON_EXTRACT(detail.Properties, '$.PortalContactEmail') as portal_contact_email,
              JSON_EXTRACT(detail.Properties, '$.PortalDescription') as portal_description,
              JSON_EXTRACT(detail.Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(detail.Properties, '$.PortalName') as portal_name,
              JSON_EXTRACT(detail.Properties, '$.PortalStartUrl') as portal_start_url,
              JSON_EXTRACT(detail.Properties, '$.PortalType') as portal_type,
              JSON_EXTRACT(detail.Properties, '$.PortalTypeConfiguration') as portal_type_configuration,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.NotificationSenderEmail') as notification_sender_email,
              JSON_EXTRACT(detail.Properties, '$.Alarms') as alarms
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Portal'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::Portal'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PortalAuthMode') as portal_auth_mode,
                json_extract_path_text(detail.Properties, 'PortalArn') as portal_arn,
                json_extract_path_text(detail.Properties, 'PortalClientId') as portal_client_id,
                json_extract_path_text(detail.Properties, 'PortalContactEmail') as portal_contact_email,
                json_extract_path_text(detail.Properties, 'PortalDescription') as portal_description,
                json_extract_path_text(detail.Properties, 'PortalId') as portal_id,
                json_extract_path_text(detail.Properties, 'PortalName') as portal_name,
                json_extract_path_text(detail.Properties, 'PortalStartUrl') as portal_start_url,
                json_extract_path_text(detail.Properties, 'PortalType') as portal_type,
                json_extract_path_text(detail.Properties, 'PortalTypeConfiguration') as portal_type_configuration,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'NotificationSenderEmail') as notification_sender_email,
                json_extract_path_text(detail.Properties, 'Alarms') as alarms
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Portal'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Portal'
                AND listing.region = 'us-east-1'
    projects:
      name: projects
      id: aws.iotsitewise.projects
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::IoTSiteWise::Project
      x-identifiers:
        - ProjectId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/projects/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.ProjectName') as project_name,
              JSON_EXTRACT(Properties, '$.ProjectDescription') as project_description,
              JSON_EXTRACT(Properties, '$.ProjectArn') as project_arn,
              JSON_EXTRACT(Properties, '$.AssetIds') as asset_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
              AND data__Identifier = '<ProjectId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.PortalId') as portal_id,
                JSON_EXTRACT(detail.Properties, '$.ProjectId') as project_id,
                JSON_EXTRACT(detail.Properties, '$.ProjectName') as project_name,
                JSON_EXTRACT(detail.Properties, '$.ProjectDescription') as project_description,
                JSON_EXTRACT(detail.Properties, '$.ProjectArn') as project_arn,
                JSON_EXTRACT(detail.Properties, '$.AssetIds') as asset_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Project'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Project'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'PortalId') as portal_id,
                  json_extract_path_text(Properties, 'ProjectId') as project_id,
                  json_extract_path_text(Properties, 'ProjectName') as project_name,
                  json_extract_path_text(Properties, 'ProjectDescription') as project_description,
                  json_extract_path_text(Properties, 'ProjectArn') as project_arn,
                  json_extract_path_text(Properties, 'AssetIds') as asset_ids,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
                  AND data__Identifier = '<ProjectId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'PortalId') as portal_id,
                    json_extract_path_text(detail.Properties, 'ProjectId') as project_id,
                    json_extract_path_text(detail.Properties, 'ProjectName') as project_name,
                    json_extract_path_text(detail.Properties, 'ProjectDescription') as project_description,
                    json_extract_path_text(detail.Properties, 'ProjectArn') as project_arn,
                    json_extract_path_text(detail.Properties, 'AssetIds') as asset_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Project'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::Project'
                    AND listing.region = 'us-east-1'
    projects_list_only:
      name: projects_list_only
      id: aws.iotsitewise.projects_list_only
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::IoTSiteWise::Project
      x-identifiers:
        - ProjectId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProjectId') as project_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
                AND region = 'us-east-1'
    project_tags:
      name: project_tags
      id: aws.iotsitewise.project_tags
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::IoTSiteWise::Project
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(detail.Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(detail.Properties, '$.ProjectName') as project_name,
              JSON_EXTRACT(detail.Properties, '$.ProjectDescription') as project_description,
              JSON_EXTRACT(detail.Properties, '$.ProjectArn') as project_arn,
              JSON_EXTRACT(detail.Properties, '$.AssetIds') as asset_ids
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Project'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::Project'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'PortalId') as portal_id,
                json_extract_path_text(detail.Properties, 'ProjectId') as project_id,
                json_extract_path_text(detail.Properties, 'ProjectName') as project_name,
                json_extract_path_text(detail.Properties, 'ProjectDescription') as project_description,
                json_extract_path_text(detail.Properties, 'ProjectArn') as project_arn,
                json_extract_path_text(detail.Properties, 'AssetIds') as asset_ids
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Project'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Project'
                AND listing.region = 'us-east-1'
    access_policies:
      name: access_policies
      id: aws.iotsitewise.access_policies
      x-cfn-schema-name: AccessPolicy
      x-cfn-type-name: AWS::IoTSiteWise::AccessPolicy
      x-identifiers:
        - AccessPolicyId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id,
              JSON_EXTRACT(Properties, '$.AccessPolicyArn') as access_policy_arn,
              JSON_EXTRACT(Properties, '$.AccessPolicyIdentity') as access_policy_identity,
              JSON_EXTRACT(Properties, '$.AccessPolicyPermission') as access_policy_permission,
              JSON_EXTRACT(Properties, '$.AccessPolicyResource') as access_policy_resource
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
              AND data__Identifier = '<AccessPolicyId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicyId') as access_policy_id,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicyArn') as access_policy_arn,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicyIdentity') as access_policy_identity,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicyPermission') as access_policy_permission,
                JSON_EXTRACT(detail.Properties, '$.AccessPolicyResource') as access_policy_resource
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AccessPolicyId') as access_policy_id,
                  json_extract_path_text(Properties, 'AccessPolicyArn') as access_policy_arn,
                  json_extract_path_text(Properties, 'AccessPolicyIdentity') as access_policy_identity,
                  json_extract_path_text(Properties, 'AccessPolicyPermission') as access_policy_permission,
                  json_extract_path_text(Properties, 'AccessPolicyResource') as access_policy_resource
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                  AND data__Identifier = '<AccessPolicyId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AccessPolicyId') as access_policy_id,
                    json_extract_path_text(detail.Properties, 'AccessPolicyArn') as access_policy_arn,
                    json_extract_path_text(detail.Properties, 'AccessPolicyIdentity') as access_policy_identity,
                    json_extract_path_text(detail.Properties, 'AccessPolicyPermission') as access_policy_permission,
                    json_extract_path_text(detail.Properties, 'AccessPolicyResource') as access_policy_resource
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                    AND listing.region = 'us-east-1'
    access_policies_list_only:
      name: access_policies_list_only
      id: aws.iotsitewise.access_policies_list_only
      x-cfn-schema-name: AccessPolicy
      x-cfn-type-name: AWS::IoTSiteWise::AccessPolicy
      x-identifiers:
        - AccessPolicyId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessPolicyId') as access_policy_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
                AND region = 'us-east-1'
    assets:
      name: assets
      id: aws.iotsitewise.assets
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::IoTSiteWise::Asset
      x-identifiers:
        - AssetId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Asset&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Asset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Asset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Asset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/assets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/assets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/assets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id,
              JSON_EXTRACT(Properties, '$.AssetExternalId') as asset_external_id,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(Properties, '$.AssetArn') as asset_arn,
              JSON_EXTRACT(Properties, '$.AssetName') as asset_name,
              JSON_EXTRACT(Properties, '$.AssetDescription') as asset_description,
              JSON_EXTRACT(Properties, '$.AssetProperties') as asset_properties,
              JSON_EXTRACT(Properties, '$.AssetHierarchies') as asset_hierarchies,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
              AND data__Identifier = '<AssetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AssetId') as asset_id,
                JSON_EXTRACT(detail.Properties, '$.AssetExternalId') as asset_external_id,
                JSON_EXTRACT(detail.Properties, '$.AssetModelId') as asset_model_id,
                JSON_EXTRACT(detail.Properties, '$.AssetArn') as asset_arn,
                JSON_EXTRACT(detail.Properties, '$.AssetName') as asset_name,
                JSON_EXTRACT(detail.Properties, '$.AssetDescription') as asset_description,
                JSON_EXTRACT(detail.Properties, '$.AssetProperties') as asset_properties,
                JSON_EXTRACT(detail.Properties, '$.AssetHierarchies') as asset_hierarchies,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Asset'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Asset'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AssetId') as asset_id,
                  json_extract_path_text(Properties, 'AssetExternalId') as asset_external_id,
                  json_extract_path_text(Properties, 'AssetModelId') as asset_model_id,
                  json_extract_path_text(Properties, 'AssetArn') as asset_arn,
                  json_extract_path_text(Properties, 'AssetName') as asset_name,
                  json_extract_path_text(Properties, 'AssetDescription') as asset_description,
                  json_extract_path_text(Properties, 'AssetProperties') as asset_properties,
                  json_extract_path_text(Properties, 'AssetHierarchies') as asset_hierarchies,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
                  AND data__Identifier = '<AssetId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AssetId') as asset_id,
                    json_extract_path_text(detail.Properties, 'AssetExternalId') as asset_external_id,
                    json_extract_path_text(detail.Properties, 'AssetModelId') as asset_model_id,
                    json_extract_path_text(detail.Properties, 'AssetArn') as asset_arn,
                    json_extract_path_text(detail.Properties, 'AssetName') as asset_name,
                    json_extract_path_text(detail.Properties, 'AssetDescription') as asset_description,
                    json_extract_path_text(detail.Properties, 'AssetProperties') as asset_properties,
                    json_extract_path_text(detail.Properties, 'AssetHierarchies') as asset_hierarchies,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Asset'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::Asset'
                    AND listing.region = 'us-east-1'
    assets_list_only:
      name: assets_list_only
      id: aws.iotsitewise.assets_list_only
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::IoTSiteWise::Asset
      x-identifiers:
        - AssetId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssetId') as asset_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
                AND region = 'us-east-1'
    asset_tags:
      name: asset_tags
      id: aws.iotsitewise.asset_tags
      x-cfn-schema-name: Asset
      x-cfn-type-name: AWS::IoTSiteWise::Asset
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AssetId') as asset_id,
              JSON_EXTRACT(detail.Properties, '$.AssetExternalId') as asset_external_id,
              JSON_EXTRACT(detail.Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(detail.Properties, '$.AssetArn') as asset_arn,
              JSON_EXTRACT(detail.Properties, '$.AssetName') as asset_name,
              JSON_EXTRACT(detail.Properties, '$.AssetDescription') as asset_description,
              JSON_EXTRACT(detail.Properties, '$.AssetProperties') as asset_properties,
              JSON_EXTRACT(detail.Properties, '$.AssetHierarchies') as asset_hierarchies
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Asset'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::Asset'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AssetId') as asset_id,
                json_extract_path_text(detail.Properties, 'AssetExternalId') as asset_external_id,
                json_extract_path_text(detail.Properties, 'AssetModelId') as asset_model_id,
                json_extract_path_text(detail.Properties, 'AssetArn') as asset_arn,
                json_extract_path_text(detail.Properties, 'AssetName') as asset_name,
                json_extract_path_text(detail.Properties, 'AssetDescription') as asset_description,
                json_extract_path_text(detail.Properties, 'AssetProperties') as asset_properties,
                json_extract_path_text(detail.Properties, 'AssetHierarchies') as asset_hierarchies
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Asset'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Asset'
                AND listing.region = 'us-east-1'
    asset_models:
      name: asset_models
      id: aws.iotsitewise.asset_models
      x-cfn-schema-name: AssetModel
      x-cfn-type-name: AWS::IoTSiteWise::AssetModel
      x-identifiers:
        - AssetModelId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AssetModel&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AssetModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AssetModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::AssetModel"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/asset_models/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/asset_models/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/asset_models/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(Properties, '$.AssetModelType') as asset_model_type,
              JSON_EXTRACT(Properties, '$.AssetModelExternalId') as asset_model_external_id,
              JSON_EXTRACT(Properties, '$.AssetModelArn') as asset_model_arn,
              JSON_EXTRACT(Properties, '$.AssetModelName') as asset_model_name,
              JSON_EXTRACT(Properties, '$.AssetModelDescription') as asset_model_description,
              JSON_EXTRACT(Properties, '$.AssetModelProperties') as asset_model_properties,
              JSON_EXTRACT(Properties, '$.AssetModelCompositeModels') as asset_model_composite_models,
              JSON_EXTRACT(Properties, '$.AssetModelHierarchies') as asset_model_hierarchies,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
              AND data__Identifier = '<AssetModelId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AssetModelId') as asset_model_id,
                JSON_EXTRACT(detail.Properties, '$.AssetModelType') as asset_model_type,
                JSON_EXTRACT(detail.Properties, '$.AssetModelExternalId') as asset_model_external_id,
                JSON_EXTRACT(detail.Properties, '$.AssetModelArn') as asset_model_arn,
                JSON_EXTRACT(detail.Properties, '$.AssetModelName') as asset_model_name,
                JSON_EXTRACT(detail.Properties, '$.AssetModelDescription') as asset_model_description,
                JSON_EXTRACT(detail.Properties, '$.AssetModelProperties') as asset_model_properties,
                JSON_EXTRACT(detail.Properties, '$.AssetModelCompositeModels') as asset_model_composite_models,
                JSON_EXTRACT(detail.Properties, '$.AssetModelHierarchies') as asset_model_hierarchies,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AssetModelId') as asset_model_id,
                  json_extract_path_text(Properties, 'AssetModelType') as asset_model_type,
                  json_extract_path_text(Properties, 'AssetModelExternalId') as asset_model_external_id,
                  json_extract_path_text(Properties, 'AssetModelArn') as asset_model_arn,
                  json_extract_path_text(Properties, 'AssetModelName') as asset_model_name,
                  json_extract_path_text(Properties, 'AssetModelDescription') as asset_model_description,
                  json_extract_path_text(Properties, 'AssetModelProperties') as asset_model_properties,
                  json_extract_path_text(Properties, 'AssetModelCompositeModels') as asset_model_composite_models,
                  json_extract_path_text(Properties, 'AssetModelHierarchies') as asset_model_hierarchies,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                  AND data__Identifier = '<AssetModelId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AssetModelId') as asset_model_id,
                    json_extract_path_text(detail.Properties, 'AssetModelType') as asset_model_type,
                    json_extract_path_text(detail.Properties, 'AssetModelExternalId') as asset_model_external_id,
                    json_extract_path_text(detail.Properties, 'AssetModelArn') as asset_model_arn,
                    json_extract_path_text(detail.Properties, 'AssetModelName') as asset_model_name,
                    json_extract_path_text(detail.Properties, 'AssetModelDescription') as asset_model_description,
                    json_extract_path_text(detail.Properties, 'AssetModelProperties') as asset_model_properties,
                    json_extract_path_text(detail.Properties, 'AssetModelCompositeModels') as asset_model_composite_models,
                    json_extract_path_text(detail.Properties, 'AssetModelHierarchies') as asset_model_hierarchies,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                    AND listing.region = 'us-east-1'
    asset_models_list_only:
      name: asset_models_list_only
      id: aws.iotsitewise.asset_models_list_only
      x-cfn-schema-name: AssetModel
      x-cfn-type-name: AWS::IoTSiteWise::AssetModel
      x-identifiers:
        - AssetModelId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssetModelId') as asset_model_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                AND region = 'us-east-1'
    asset_model_tags:
      name: asset_model_tags
      id: aws.iotsitewise.asset_model_tags
      x-cfn-schema-name: AssetModel
      x-cfn-type-name: AWS::IoTSiteWise::AssetModel
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(detail.Properties, '$.AssetModelType') as asset_model_type,
              JSON_EXTRACT(detail.Properties, '$.AssetModelExternalId') as asset_model_external_id,
              JSON_EXTRACT(detail.Properties, '$.AssetModelArn') as asset_model_arn,
              JSON_EXTRACT(detail.Properties, '$.AssetModelName') as asset_model_name,
              JSON_EXTRACT(detail.Properties, '$.AssetModelDescription') as asset_model_description,
              JSON_EXTRACT(detail.Properties, '$.AssetModelProperties') as asset_model_properties,
              JSON_EXTRACT(detail.Properties, '$.AssetModelCompositeModels') as asset_model_composite_models,
              JSON_EXTRACT(detail.Properties, '$.AssetModelHierarchies') as asset_model_hierarchies
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AssetModelId') as asset_model_id,
                json_extract_path_text(detail.Properties, 'AssetModelType') as asset_model_type,
                json_extract_path_text(detail.Properties, 'AssetModelExternalId') as asset_model_external_id,
                json_extract_path_text(detail.Properties, 'AssetModelArn') as asset_model_arn,
                json_extract_path_text(detail.Properties, 'AssetModelName') as asset_model_name,
                json_extract_path_text(detail.Properties, 'AssetModelDescription') as asset_model_description,
                json_extract_path_text(detail.Properties, 'AssetModelProperties') as asset_model_properties,
                json_extract_path_text(detail.Properties, 'AssetModelCompositeModels') as asset_model_composite_models,
                json_extract_path_text(detail.Properties, 'AssetModelHierarchies') as asset_model_hierarchies
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::AssetModel'
                AND listing.region = 'us-east-1'
    dashboards:
      name: dashboards
      id: aws.iotsitewise.dashboards
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::IoTSiteWise::Dashboard
      x-identifiers:
        - DashboardId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Dashboard&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Dashboard"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/dashboards/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.DashboardId') as dashboard_id,
              JSON_EXTRACT(Properties, '$.DashboardName') as dashboard_name,
              JSON_EXTRACT(Properties, '$.DashboardDescription') as dashboard_description,
              JSON_EXTRACT(Properties, '$.DashboardDefinition') as dashboard_definition,
              JSON_EXTRACT(Properties, '$.DashboardArn') as dashboard_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
              AND data__Identifier = '<DashboardId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.ProjectId') as project_id,
                JSON_EXTRACT(detail.Properties, '$.DashboardId') as dashboard_id,
                JSON_EXTRACT(detail.Properties, '$.DashboardName') as dashboard_name,
                JSON_EXTRACT(detail.Properties, '$.DashboardDescription') as dashboard_description,
                JSON_EXTRACT(detail.Properties, '$.DashboardDefinition') as dashboard_definition,
                JSON_EXTRACT(detail.Properties, '$.DashboardArn') as dashboard_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'ProjectId') as project_id,
                  json_extract_path_text(Properties, 'DashboardId') as dashboard_id,
                  json_extract_path_text(Properties, 'DashboardName') as dashboard_name,
                  json_extract_path_text(Properties, 'DashboardDescription') as dashboard_description,
                  json_extract_path_text(Properties, 'DashboardDefinition') as dashboard_definition,
                  json_extract_path_text(Properties, 'DashboardArn') as dashboard_arn,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                  AND data__Identifier = '<DashboardId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'ProjectId') as project_id,
                    json_extract_path_text(detail.Properties, 'DashboardId') as dashboard_id,
                    json_extract_path_text(detail.Properties, 'DashboardName') as dashboard_name,
                    json_extract_path_text(detail.Properties, 'DashboardDescription') as dashboard_description,
                    json_extract_path_text(detail.Properties, 'DashboardDefinition') as dashboard_definition,
                    json_extract_path_text(detail.Properties, 'DashboardArn') as dashboard_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                    AND listing.region = 'us-east-1'
    dashboards_list_only:
      name: dashboards_list_only
      id: aws.iotsitewise.dashboards_list_only
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::IoTSiteWise::Dashboard
      x-identifiers:
        - DashboardId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DashboardId') as dashboard_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DashboardId') as dashboard_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                AND region = 'us-east-1'
    dashboard_tags:
      name: dashboard_tags
      id: aws.iotsitewise.dashboard_tags
      x-cfn-schema-name: Dashboard
      x-cfn-type-name: AWS::IoTSiteWise::Dashboard
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(detail.Properties, '$.DashboardId') as dashboard_id,
              JSON_EXTRACT(detail.Properties, '$.DashboardName') as dashboard_name,
              JSON_EXTRACT(detail.Properties, '$.DashboardDescription') as dashboard_description,
              JSON_EXTRACT(detail.Properties, '$.DashboardDefinition') as dashboard_definition,
              JSON_EXTRACT(detail.Properties, '$.DashboardArn') as dashboard_arn
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'ProjectId') as project_id,
                json_extract_path_text(detail.Properties, 'DashboardId') as dashboard_id,
                json_extract_path_text(detail.Properties, 'DashboardName') as dashboard_name,
                json_extract_path_text(detail.Properties, 'DashboardDescription') as dashboard_description,
                json_extract_path_text(detail.Properties, 'DashboardDefinition') as dashboard_definition,
                json_extract_path_text(detail.Properties, 'DashboardArn') as dashboard_arn
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Dashboard'
                AND listing.region = 'us-east-1'
    gateways:
      name: gateways
      id: aws.iotsitewise.gateways
      x-cfn-schema-name: Gateway
      x-cfn-type-name: AWS::IoTSiteWise::Gateway
      x-identifiers:
        - GatewayId
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Gateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Gateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Gateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::IoTSiteWise::Gateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GatewayCapabilitySummaries') as gateway_capability_summaries,
              JSON_EXTRACT(Properties, '$.GatewayName') as gateway_name,
              JSON_EXTRACT(Properties, '$.GatewayPlatform') as gateway_platform,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
              AND data__Identifier = '<GatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.GatewayCapabilitySummaries') as gateway_capability_summaries,
                JSON_EXTRACT(detail.Properties, '$.GatewayName') as gateway_name,
                JSON_EXTRACT(detail.Properties, '$.GatewayPlatform') as gateway_platform,
                JSON_EXTRACT(detail.Properties, '$.GatewayId') as gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'GatewayCapabilitySummaries') as gateway_capability_summaries,
                  json_extract_path_text(Properties, 'GatewayName') as gateway_name,
                  json_extract_path_text(Properties, 'GatewayPlatform') as gateway_platform,
                  json_extract_path_text(Properties, 'GatewayId') as gateway_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
                  AND data__Identifier = '<GatewayId>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'GatewayCapabilitySummaries') as gateway_capability_summaries,
                    json_extract_path_text(detail.Properties, 'GatewayName') as gateway_name,
                    json_extract_path_text(detail.Properties, 'GatewayPlatform') as gateway_platform,
                    json_extract_path_text(detail.Properties, 'GatewayId') as gateway_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                    AND detail.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                    AND listing.region = 'us-east-1'
    gateways_list_only:
      name: gateways_list_only
      id: aws.iotsitewise.gateways_list_only
      x-cfn-schema-name: Gateway
      x-cfn-type-name: AWS::IoTSiteWise::Gateway
      x-identifiers:
        - GatewayId
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GatewayId') as gateway_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
                AND region = 'us-east-1'
    gateway_tags:
      name: gateway_tags
      id: aws.iotsitewise.gateway_tags
      x-cfn-schema-name: Gateway
      x-cfn-type-name: AWS::IoTSiteWise::Gateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.GatewayCapabilitySummaries') as gateway_capability_summaries,
              JSON_EXTRACT(detail.Properties, '$.GatewayName') as gateway_name,
              JSON_EXTRACT(detail.Properties, '$.GatewayPlatform') as gateway_platform,
              JSON_EXTRACT(detail.Properties, '$.GatewayId') as gateway_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Gateway'
              AND detail.data__TypeName = 'AWS::IoTSiteWise::Gateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'GatewayCapabilitySummaries') as gateway_capability_summaries,
                json_extract_path_text(detail.Properties, 'GatewayName') as gateway_name,
                json_extract_path_text(detail.Properties, 'GatewayPlatform') as gateway_platform,
                json_extract_path_text(detail.Properties, 'GatewayId') as gateway_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                AND detail.data__TypeName = 'AWS::IoTSiteWise::Gateway'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Portal&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreatePortal
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreatePortalRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProject
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Asset&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAsset
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AssetModel&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAssetModel
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAssetModelRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Dashboard&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDashboard
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDashboardRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Gateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
