openapi: 3.0.0
info:
  title: IoTSiteWise
  version: 1.0.0
paths: {}
components:
  schemas:
    User:
      description: Contains information for a user identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        id:
          description: The AWS SSO ID of the user.
          type: string
    IamUser:
      description: Contains information for an IAM user identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        arn:
          description: The ARN of the IAM user.
          type: string
    IamRole:
      description: Contains information for an IAM role identity in an access policy.
      type: object
      additionalProperties: false
      properties:
        arn:
          description: The ARN of the IAM role.
          type: string
    Portal:
      type: object
      properties:
        PortalAuthMode:
          description: The service to use to authenticate users to the portal. Choose from SSO or IAM. You can't change this value after you create a portal.
          type: string
        PortalArn:
          description: The ARN of the portal, which has the following format.
          type: string
        PortalClientId:
          description: The AWS SSO application generated client ID (used with AWS SSO APIs).
          type: string
        PortalContactEmail:
          description: The AWS administrator's contact email address.
          type: string
        PortalDescription:
          description: A description for the portal.
          type: string
        PortalId:
          description: The ID of the portal.
          type: string
        PortalName:
          description: A friendly name for the portal.
          type: string
        PortalStartUrl:
          description: The public root URL for the AWS IoT AWS IoT SiteWise Monitor application portal.
          type: string
        RoleArn:
          description: The ARN of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf.
          type: string
        NotificationSenderEmail:
          description: The email address that sends alarm notifications.
          type: string
        Alarms:
          type: object
          description: Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range.
          additionalProperties: false
          properties:
            AlarmRoleArn:
              type: string
              description: The ARN of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events.
            NotificationLambdaArn:
              type: string
              description: The ARN of the AWS Lambda function that manages alarm notifications. For more information, see Managing alarm notifications in the AWS IoT Events Developer Guide.
        Tags:
          description: A list of key-value pairs that contain metadata for the portal.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PortalContactEmail
        - PortalName
        - RoleArn
      x-stackql-resource-name: portal
      x-stackql-primaryIdentifier:
        - PortalId
    Project:
      type: object
      properties:
        PortalId:
          description: The ID of the portal in which to create the project.
          type: string
        ProjectId:
          description: The ID of the project.
          type: string
        ProjectName:
          description: A friendly name for the project.
          type: string
        ProjectDescription:
          description: A description for the project.
          type: string
        ProjectArn:
          description: The ARN of the project.
          type: string
        AssetIds:
          description: The IDs of the assets to be associated to the project.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssetId'
        Tags:
          description: A list of key-value pairs that contain metadata for the project.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PortalId
        - ProjectName
      x-stackql-resource-name: project
      x-stackql-primaryIdentifier:
        - ProjectId
    AccessPolicyIdentity:
      description: The identity for this access policy. Choose either an SSO user or group or an IAM user or role.
      type: object
      additionalProperties: false
      properties:
        User:
          $ref: '#/components/schemas/User'
        IamUser:
          $ref: '#/components/schemas/IamUser'
        IamRole:
          $ref: '#/components/schemas/IamRole'
    AccessPolicyResource:
      description: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
      type: object
      additionalProperties: false
      properties:
        Portal:
          $ref: '#/components/schemas/Portal'
        Project:
          $ref: '#/components/schemas/Project'
    AccessPolicy:
      type: object
      properties:
        AccessPolicyId:
          description: The ID of the access policy.
          type: string
        AccessPolicyArn:
          description: The ARN of the access policy.
          type: string
        AccessPolicyIdentity:
          description: The identity for this access policy. Choose either a user or a group but not both.
          $ref: '#/components/schemas/AccessPolicyIdentity'
        AccessPolicyPermission:
          description: The permission level for this access policy. Valid values are ADMINISTRATOR or VIEWER.
          type: string
        AccessPolicyResource:
          description: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
          $ref: '#/components/schemas/AccessPolicyResource'
      required:
        - AccessPolicyIdentity
        - AccessPolicyPermission
        - AccessPolicyResource
      x-stackql-resource-name: access_policy
      x-stackql-primaryIdentifier:
        - AccessPolicyId
    AssetProperty:
      description: The asset property's definition, alias, unit, and notification state.
      type: object
      additionalProperties: false
      required:
        - LogicalId
      properties:
        LogicalId:
          description: Customer provided ID for property.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Alias:
          description: The property alias that identifies the property.
          type: string
        NotificationState:
          description: The MQTT notification state (ENABLED or DISABLED) for this asset property.
          type: string
          enum:
            - ENABLED
            - DISABLED
        Unit:
          description: The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the assetModelProperty in the asset model.
          type: string
    AssetHierarchy:
      description: A hierarchy specifies allowed parent/child asset relationships.
      type: object
      additionalProperties: false
      required:
        - LogicalId
        - ChildAssetId
      properties:
        LogicalId:
          description: The LogicalID of a hierarchy in the parent asset's model.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        ChildAssetId:
          description: The ID of the child asset to be associated.
          type: string
    Tag:
      description: To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Key
        - Value
    Asset:
      type: object
      properties:
        AssetId:
          description: The ID of the asset
          type: string
        AssetModelId:
          description: The ID of the asset model from which to create the asset.
          type: string
        AssetArn:
          description: The ARN of the asset
          type: string
        AssetName:
          description: A unique, friendly name for the asset.
          type: string
        AssetDescription:
          description: A description for the asset
          type: string
        AssetProperties:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetProperty'
        AssetHierarchies:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetHierarchy'
        Tags:
          description: A list of key-value pairs that contain metadata for the asset.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssetName
        - AssetModelId
      x-stackql-resource-name: asset
      x-stackql-primaryIdentifier:
        - AssetId
    AssetModelCompositeModel:
      description: Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.
      type: object
      additionalProperties: false
      required:
        - Name
        - Type
      properties:
        Description:
          description: A description for the asset composite model.
          type: string
        Name:
          description: A unique, friendly name for the asset composite model.
          type: string
        Type:
          description: The type of the composite model. For alarm composite models, this type is AWS/ALARM
          type: string
        CompositeModelProperties:
          description: The property definitions of the asset model. You can specify up to 200 properties per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelProperty'
    AssetModelProperty:
      description: Contains information about an asset model property.
      type: object
      additionalProperties: false
      required:
        - LogicalId
        - Name
        - DataType
        - Type
      properties:
        LogicalId:
          description: Customer provided ID for property.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Name:
          description: The name of the asset model property.
          type: string
        DataType:
          description: The data type of the asset model property.
          $ref: '#/components/schemas/DataType'
        DataTypeSpec:
          description: The data type of the structure for this property.
          $ref: '#/components/schemas/DataTypeSpec'
        Unit:
          description: The unit of the asset model property, such as Newtons or RPM.
          type: string
        Type:
          description: The property type
          $ref: '#/components/schemas/PropertyType'
    DataType:
      type: string
      enum:
        - STRING
        - INTEGER
        - DOUBLE
        - BOOLEAN
        - STRUCT
    DataTypeSpec:
      type: string
      enum:
        - AWS/ALARM_STATE
    PropertyType:
      description: Contains a property type, which can be one of attribute, measurement, metric, or transform.
      type: object
      additionalProperties: false
      required:
        - TypeName
      properties:
        TypeName:
          $ref: '#/components/schemas/TypeName'
        Attribute:
          $ref: '#/components/schemas/Attribute'
        Transform:
          $ref: '#/components/schemas/Transform'
        Metric:
          $ref: '#/components/schemas/Metric'
    TypeName:
      type: string
      enum:
        - Measurement
        - Attribute
        - Transform
        - Metric
    Attribute:
      type: object
      additionalProperties: false
      properties:
        DefaultValue:
          type: string
    Transform:
      type: object
      additionalProperties: false
      properties:
        Expression:
          description: The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
          type: string
        Variables:
          description: The list of variables used in the expression.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ExpressionVariable'
      required:
        - Expression
        - Variables
    Metric:
      type: object
      additionalProperties: false
      properties:
        Expression:
          description: The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.
          type: string
        Variables:
          description: The list of variables used in the expression.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ExpressionVariable'
        Window:
          description: The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression
          $ref: '#/components/schemas/MetricWindow'
      required:
        - Expression
        - Variables
        - Window
    MetricWindow:
      description: Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).
      type: object
      additionalProperties: false
      properties:
        Tumbling:
          $ref: '#/components/schemas/TumblingWindow'
    TumblingWindow:
      description: Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.
      type: object
      additionalProperties: false
      properties:
        Interval:
          $ref: '#/components/schemas/Interval'
        Offset:
          $ref: '#/components/schemas/Offset'
      required:
        - Interval
    Interval:
      description: The time interval for the tumbling window.
      type: string
    Offset:
      description: The shift or reference point on timeline for the contiguous time intervals.
      type: string
    ExpressionVariable:
      type: object
      additionalProperties: false
      properties:
        Name:
          description: The friendly name of the variable to be used in the expression.
          type: string
        Value:
          description: The variable that identifies an asset property from which to use values.
          $ref: '#/components/schemas/VariableValue'
      required:
        - Name
        - Value
    VariableValue:
      type: object
      additionalProperties: false
      properties:
        PropertyLogicalId:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        HierarchyLogicalId:
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
      required:
        - PropertyLogicalId
    AssetModelHierarchy:
      description: Contains information about an asset model hierarchy.
      type: object
      additionalProperties: false
      required:
        - LogicalId
        - Name
        - ChildAssetModelId
      properties:
        LogicalId:
          description: Customer provided ID for hierarchy.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[^\u0000-\u001F\u007F]+'
        Name:
          description: The name of the asset model hierarchy.
          type: string
        ChildAssetModelId:
          description: The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.
          type: string
    AssetModel:
      type: object
      properties:
        AssetModelId:
          description: The ID of the asset model.
          type: string
        AssetModelArn:
          description: The ARN of the asset model, which has the following format.
          type: string
        AssetModelName:
          description: A unique, friendly name for the asset model.
          type: string
        AssetModelDescription:
          description: A description for the asset model.
          type: string
        AssetModelProperties:
          description: The property definitions of the asset model. You can specify up to 200 properties per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelProperty'
        AssetModelCompositeModels:
          description: The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelCompositeModel'
        AssetModelHierarchies:
          description: The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/AssetModelHierarchy'
        Tags:
          description: A list of key-value pairs that contain metadata for the asset model.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssetModelName
      x-stackql-resource-name: asset_model
      x-stackql-primaryIdentifier:
        - AssetModelId
    Dashboard:
      type: object
      properties:
        ProjectId:
          description: The ID of the project in which to create the dashboard.
          type: string
        DashboardId:
          description: The ID of the dashboard.
          type: string
        DashboardName:
          description: A friendly name for the dashboard.
          type: string
        DashboardDescription:
          description: A description for the dashboard.
          type: string
        DashboardDefinition:
          description: The dashboard definition specified in a JSON literal.
          type: string
        DashboardArn:
          description: The ARN of the dashboard.
          type: string
        Tags:
          description: A list of key-value pairs that contain metadata for the dashboard.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DashboardDefinition
        - DashboardDescription
        - DashboardName
      x-stackql-resource-name: dashboard
      x-stackql-primaryIdentifier:
        - DashboardId
    GatewayPlatform:
      description: Contains a gateway's platform information.
      type: object
      additionalProperties: false
      properties:
        Greengrass:
          description: A gateway that runs on AWS IoT Greengrass V1.
          $ref: '#/components/schemas/Greengrass'
        GreengrassV2:
          description: A gateway that runs on AWS IoT Greengrass V2.
          $ref: '#/components/schemas/GreengrassV2'
      oneOf:
        - required:
            - Greengrass
        - required:
            - GreengrassV2
    Greengrass:
      description: Contains the ARN of AWS IoT Greengrass Group V1 that the gateway runs on.
      type: object
      additionalProperties: false
      properties:
        GroupArn:
          description: The ARN of the Greengrass group.
          type: string
      required:
        - GroupArn
    GreengrassV2:
      description: Contains the CoreDeviceThingName of AWS IoT Greengrass Group V2 that the gateway runs on.
      type: object
      additionalProperties: false
      properties:
        CoreDeviceThingName:
          description: The name of the CoreDevice in GreenGrass V2.
          type: string
      required:
        - CoreDeviceThingName
    CapabilityNamespace:
      description: The namespace of the capability configuration.
      type: string
    CapabilityConfiguration:
      description: The JSON document that defines the gateway capability's configuration.
      type: string
    GatewayCapabilitySummary:
      description: Contains a summary of a gateway capability configuration.
      type: object
      additionalProperties: false
      properties:
        CapabilityNamespace:
          $ref: '#/components/schemas/CapabilityNamespace'
        CapabilityConfiguration:
          $ref: '#/components/schemas/CapabilityConfiguration'
      required:
        - CapabilityNamespace
    Gateway:
      type: object
      properties:
        GatewayName:
          description: A unique, friendly name for the gateway.
          type: string
        GatewayPlatform:
          description: The gateway's platform. You can only specify one platform in a gateway.
          $ref: '#/components/schemas/GatewayPlatform'
        Tags:
          description: A list of key-value pairs that contain metadata for the gateway.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        GatewayId:
          description: The ID of the gateway device.
          type: string
        GatewayCapabilitySummaries:
          description: A list of gateway capability summaries that each contain a namespace and status.
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/GatewayCapabilitySummary'
      required:
        - GatewayName
        - GatewayPlatform
      x-stackql-resource-name: gateway
      x-stackql-primaryIdentifier:
        - GatewayId
    AssetId:
      description: The ID of the asset
      type: string
  x-stackQL-resources:
    portals:
      name: portals
      id: aws.iotsitewise.portals
      x-cfn-schema-name: Portal
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
    portal:
      name: portal
      id: aws.iotsitewise.portal
      x-cfn-schema-name: Portal
      x-type: get
      x-identifiers:
        - PortalId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PortalAuthMode') as portal_auth_mode,
              JSON_EXTRACT(Properties, '$.PortalArn') as portal_arn,
              JSON_EXTRACT(Properties, '$.PortalClientId') as portal_client_id,
              JSON_EXTRACT(Properties, '$.PortalContactEmail') as portal_contact_email,
              JSON_EXTRACT(Properties, '$.PortalDescription') as portal_description,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(Properties, '$.PortalName') as portal_name,
              JSON_EXTRACT(Properties, '$.PortalStartUrl') as portal_start_url,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.NotificationSenderEmail') as notification_sender_email,
              JSON_EXTRACT(Properties, '$.Alarms') as alarms,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Portal'
    projects:
      name: projects
      id: aws.iotsitewise.projects
      x-cfn-schema-name: Project
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
    project:
      name: project
      id: aws.iotsitewise.project
      x-cfn-schema-name: Project
      x-type: get
      x-identifiers:
        - ProjectId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PortalId') as portal_id,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.ProjectName') as project_name,
              JSON_EXTRACT(Properties, '$.ProjectDescription') as project_description,
              JSON_EXTRACT(Properties, '$.ProjectArn') as project_arn,
              JSON_EXTRACT(Properties, '$.AssetIds') as asset_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Project'
    access_policies:
      name: access_policies
      id: aws.iotsitewise.access_policies
      x-cfn-schema-name: AccessPolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
    access_policy:
      name: access_policy
      id: aws.iotsitewise.access_policy
      x-cfn-schema-name: AccessPolicy
      x-type: get
      x-identifiers:
        - AccessPolicyId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessPolicyId') as access_policy_id,
              JSON_EXTRACT(Properties, '$.AccessPolicyArn') as access_policy_arn,
              JSON_EXTRACT(Properties, '$.AccessPolicyIdentity.User') as access_policy_identity_user,
              JSON_EXTRACT(Properties, '$.AccessPolicyIdentity.IamUser') as access_policy_identity_iam_user,
              JSON_EXTRACT(Properties, '$.AccessPolicyIdentity.IamRole') as access_policy_identity_iam_role,
              JSON_EXTRACT(Properties, '$.AccessPolicyPermission') as access_policy_permission,
              JSON_EXTRACT(Properties, '$.AccessPolicyResource.Portal') as access_policy_resource_portal,
              JSON_EXTRACT(Properties, '$.AccessPolicyResource.Project') as access_policy_resource_project
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AccessPolicy'
    assets:
      name: assets
      id: aws.iotsitewise.assets
      x-cfn-schema-name: Asset
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
    asset:
      name: asset
      id: aws.iotsitewise.asset
      x-cfn-schema-name: Asset
      x-type: get
      x-identifiers:
        - AssetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(Properties, '$.AssetArn') as asset_arn,
              JSON_EXTRACT(Properties, '$.AssetName') as asset_name,
              JSON_EXTRACT(Properties, '$.AssetDescription') as asset_description,
              JSON_EXTRACT(Properties, '$.AssetProperties') as asset_properties,
              JSON_EXTRACT(Properties, '$.AssetHierarchies') as asset_hierarchies,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Asset'
    asset_models:
      name: asset_models
      id: aws.iotsitewise.asset_models
      x-cfn-schema-name: AssetModel
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
    asset_model:
      name: asset_model
      id: aws.iotsitewise.asset_model
      x-cfn-schema-name: AssetModel
      x-type: get
      x-identifiers:
        - AssetModelId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetModelId') as asset_model_id,
              JSON_EXTRACT(Properties, '$.AssetModelArn') as asset_model_arn,
              JSON_EXTRACT(Properties, '$.AssetModelName') as asset_model_name,
              JSON_EXTRACT(Properties, '$.AssetModelDescription') as asset_model_description,
              JSON_EXTRACT(Properties, '$.AssetModelProperties') as asset_model_properties,
              JSON_EXTRACT(Properties, '$.AssetModelCompositeModels') as asset_model_composite_models,
              JSON_EXTRACT(Properties, '$.AssetModelHierarchies') as asset_model_hierarchies,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::AssetModel'
    dashboards:
      name: dashboards
      id: aws.iotsitewise.dashboards
      x-cfn-schema-name: Dashboard
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DashboardId') as dashboard_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
    dashboard:
      name: dashboard
      id: aws.iotsitewise.dashboard
      x-cfn-schema-name: Dashboard
      x-type: get
      x-identifiers:
        - DashboardId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.DashboardId') as dashboard_id,
              JSON_EXTRACT(Properties, '$.DashboardName') as dashboard_name,
              JSON_EXTRACT(Properties, '$.DashboardDescription') as dashboard_description,
              JSON_EXTRACT(Properties, '$.DashboardDefinition') as dashboard_definition,
              JSON_EXTRACT(Properties, '$.DashboardArn') as dashboard_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Dashboard'
    gateways:
      name: gateways
      id: aws.iotsitewise.gateways
      x-cfn-schema-name: Gateway
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
    gateway:
      name: gateway
      id: aws.iotsitewise.gateway
      x-cfn-schema-name: Gateway
      x-type: get
      x-identifiers:
        - GatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GatewayName') as gateway_name,
              JSON_EXTRACT(Properties, '$.GatewayPlatform.Greengrass') as gateway_platform_greengrass,
              JSON_EXTRACT(Properties, '$.GatewayPlatform.GreengrassV2') as gateway_platform_greengrass_v2,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.GatewayCapabilitySummaries') as gateway_capability_summaries
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::IoTSiteWise::Gateway'
