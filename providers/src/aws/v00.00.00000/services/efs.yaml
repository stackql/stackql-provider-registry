openapi: 3.0.0
info:
  title: EFS
  version: 1.0.0
paths: {}
components:
  schemas:
    AccessPointTag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
          description: The tag key (String). The key can't start with ``aws:``.
        Value:
          type: string
          minLength: 1
          maxLength: 256
          description: The value of the tag key.
      additionalProperties: false
      description: 'A tag is a key-value pair attached to a file system. Allowed characters in the ``Key`` and ``Value`` properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters:``+ - = . _ : /``'
    CreationInfo:
      type: object
      properties:
        OwnerUid:
          type: string
          description: Specifies the POSIX user ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
        OwnerGid:
          type: string
          description: Specifies the POSIX group ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
        Permissions:
          type: string
          description: Specifies the POSIX permissions to apply to the ``RootDirectory``, in the format of an octal number representing the file's mode bits.
          pattern: ^[0-7]{3,4}$
      required:
        - OwnerUid
        - OwnerGid
        - Permissions
      additionalProperties: false
      description: |-
        Required if the ``RootDirectory`` > ``Path`` specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory`` > ``Path``. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying ``CreationInfo``, you must include values for all properties. 
         Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.
          If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` does not exist, attempts to mount the file system using the access point will fail.
    RootDirectory:
      type: object
      properties:
        Path:
          type: string
          description: Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the ``CreationInfo``.
          minLength: 1
          maxLength: 100
        CreationInfo:
          description: |-
            (Optional) Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory``. If the ``RootDirectory`` > ``Path`` specified does not exist, EFS creates the root directory using the ``CreationInfo`` settings when a client connects to an access point. When specifying the ``CreationInfo``, you must provide values for all properties. 
              If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
          $ref: '#/components/schemas/CreationInfo'
      additionalProperties: false
      description: Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's ``RootDirectory`` and its subdirectories.
    PosixUser:
      type: object
      properties:
        Uid:
          type: string
          description: The POSIX user ID used for all file system operations using this access point.
        Gid:
          type: string
          description: The POSIX group ID used for all file system operations using this access point.
        SecondaryGids:
          type: array
          description: Secondary POSIX group IDs used for all file system operations using this access point.
          items:
            type: string
      required:
        - Uid
        - Gid
      additionalProperties: false
      description: The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
    AccessPoint:
      type: object
      properties:
        AccessPointId:
          type: string
          description: ''
        Arn:
          type: string
          description: ''
        ClientToken:
          description: The opaque string specified in the request to ensure idempotent creation.
          type: string
        AccessPointTags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AccessPointTag'
          description: |-
            An array of key-value pairs to apply to this resource.
             For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
        FileSystemId:
          description: The ID of the EFS file system that the access point applies to. Accepts only the ID format for input when specifying a file system, for example ``fs-0123456789abcedf2``.
          type: string
        PosixUser:
          description: The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point that is used for all file operations by NFS clients using the access point.
          $ref: '#/components/schemas/PosixUser'
        RootDirectory:
          description: The directory on the EFS file system that the access point exposes as the root directory to NFS clients using the access point.
          $ref: '#/components/schemas/RootDirectory'
      required:
        - FileSystemId
      x-stackql-resource-name: access_point
      description: >-
        The ``AWS::EFS::AccessPoint`` resource creates an EFS access point. An access point is an application-specific view into an EFS file system that applies an operating system user and group, and a file system path, to any file system request made through the access point. The operating system user and group override any identity information provided by the NFS client. The file system path is exposed as the access point's root directory. Applications using the access point can only access
        data in its own directory and below. To learn more, see [Mounting a file system using EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html).
         This operation requires permissions for the ``elasticfilesystem:CreateAccessPoint`` action.
      x-type-name: AWS::EFS::AccessPoint
      x-stackql-primary-identifier:
        - AccessPointId
      x-create-only-properties:
        - FileSystemId
        - ClientToken
        - CreationInfo
        - CreationInfo/OwnerUid
        - CreationInfo/OwnerGid
        - CreationInfo/Permissions
        - PosixUser
        - PosixUser/Uid
        - PosixUser/Gid
        - PosixUser/SecondaryGids
        - RootDirectory
        - RootDirectory/Path
        - RootDirectory/CreationInfo
      x-read-only-properties:
        - AccessPointId
        - Arn
      x-required-properties:
        - FileSystemId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/AccessPointTags
      x-required-permissions:
        create:
          - elasticfilesystem:CreateAccessPoint
          - elasticfilesystem:TagResource
          - elasticfilesystem:DescribeAccessPoints
        read:
          - elasticfilesystem:DescribeAccessPoints
        delete:
          - elasticfilesystem:DeleteAccessPoint
          - elasticfilesystem:DescribeAccessPoints
        list:
          - elasticfilesystem:DescribeAccessPoints
        update:
          - elasticfilesystem:DescribeAccessPoints
          - elasticfilesystem:ListTagsForResource
          - elasticfilesystem:TagResource
          - elasticfilesystem:UntagResource
    Arn:
      type: string
    ElasticFileSystemTag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The tag key (String). The key can't start with ``aws:``.
        Value:
          type: string
          description: The value of the tag key.
      required:
        - Value
        - Key
      description: 'A tag is a key-value pair attached to a file system. Allowed characters in the ``Key`` and ``Value`` properties are letters, white space, and numbers that can be represented in UTF-8, and the following characters:``+ - = . _ : /``'
    LifecyclePolicy:
      type: object
      additionalProperties: false
      properties:
        TransitionToIA:
          type: string
          description: The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
        TransitionToPrimaryStorageClass:
          type: string
          description: Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
        TransitionToArchive:
          type: string
          description: The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
      description: |-
        Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
          + Each ``LifecyclePolicy`` object can have only a single transition. This means that in a request body, ``LifecyclePolicies`` must be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive``, ``TransitionToPrimaryStorageClass``.
         + See the AWS::EFS::FileSystem examples for the correct ``LifecyclePolicy`` structure. Do not use the syntax shown on this page.
    BackupPolicy:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
          enum:
            - DISABLED
            - ENABLED
          description: |-
            Set the backup policy status for the file system.
              +   *ENABLED* - Turns automatic backups on for the file system. 
              +   *DISABLED* - Turns automatic backups off for the file system.
      required:
        - Status
      description: The backup policy turns automatic backups for the file system on or off.
    FileSystemProtection:
      type: object
      additionalProperties: false
      properties:
        ReplicationOverwriteProtection:
          type: string
          enum:
            - DISABLED
            - ENABLED
          description: |-
            The status of the file system's replication overwrite protection.
              +   ``ENABLED`` – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default. 
              +   ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
              +   ``REPLICATING`` – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
              
             If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
      description: Describes the protection on the file system.
    ReplicationDestination:
      type: object
      additionalProperties: false
      properties:
        FileSystemId:
          type: string
          description: The ID of the destination Amazon EFS file system.
        Region:
          type: string
          description: |-
            The AWS-Region in which the destination file system is located.
              For One Zone file systems, the replication configuration must specify the AWS-Region in which the destination file system is located.
        AvailabilityZoneName:
          type: string
          description: |-
            The AWS For One Zone file systems, the replication configuration must specify the Availability Zone in which the destination file system is located. 
             Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide*.
              One Zone file system type is not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
        KmsKeyId:
          type: string
          description: The ID of an kms-key-long used to protect the encrypted file system.
      description: Describes the destination file system in the replication configuration.
    ReplicationConfiguration:
      type: object
      additionalProperties: false
      properties:
        Destinations:
          type: array
          uniqueItems: true
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/ReplicationDestination'
          description: An array of destination objects. Only one destination object is supported.
      description: Describes the replication configuration for a specific file system.
    FileSystem:
      type: object
      properties:
        FileSystemId:
          type: string
          description: ''
        Arn:
          $ref: '#/components/schemas/Arn'
          description: ''
        Encrypted:
          type: boolean
          description: A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a KmsKeyId for an existing kms-key-long. If you don't specify a kms-key, then the default kms-key for EFS, ``/aws/elasticfilesystem``, is used to protect the encrypted file system.
        FileSystemTags:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ElasticFileSystemTag'
          description: Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a ``"Key":"Name","Value":"{value}"`` key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
        KmsKeyId:
          type: string
          description: |-
            The ID of the kms-key-long to be used to protect the encrypted file system. This parameter is only required if you want to use a nondefault kms-key. If this parameter is not specified, the default kms-key for EFS is used. This ID can be in one of the following formats:
              +  Key ID - A unique identifier of the key, for example ``1234abcd-12ab-34cd-56ef-1234567890ab``.
              +  ARN - An Amazon Resource Name (ARN) for the key, for example ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab``.
              +  Key alias - A previously created display name for a key, for example ``alias/projectKey1``.
              +  Key alias ARN - An ARN for a key alias, for example ``arn:aws:kms:us-west-2:444455556666:alias/projectKey1``.
              
             If ``KmsKeyId`` is specified, the ``Encrypted`` parameter must be set to true.
        LifecyclePolicies:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LifecyclePolicy'
          description: |-
            An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the following:
              +  When to move files in the file system from primary storage to IA storage.
              + When to move files in the file system from primary storage or IA storage to Archive storage.
             +  When to move files that are in IA or Archive storage to primary storage.
              
              EFS requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
        FileSystemProtection:
          $ref: '#/components/schemas/FileSystemProtection'
          description: Describes the protection on the file system.
        PerformanceMode:
          type: string
          description: |-
            The Performance mode of the file system. We recommend ``generalPurpose`` performance mode for all file systems. File systems using the ``maxIO`` performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can't be changed after the file system has been created. The ``maxIO`` mode is not supported on One Zone file systems.
              Due to the higher per-operation latencies with Max I/O, we recommend using General Purpose performance mode for all file systems.
              Default is ``generalPurpose``.
        ProvisionedThroughputInMibps:
          type: number
          description: The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
        ThroughputMode:
          type: string
          description: >-
            Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned
            mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*. 
             Default is ``bursting``.
        FileSystemPolicy:
          type: object
          description: The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
        BypassPolicyLockoutSafetyCheck:
          description: >-
            (Optional) A boolean that specifies whether or not to bypass the ``FileSystemPolicy`` lockout safety check. The lockout safety check determines whether the policy in the request will lock out, or prevent, the IAM principal that is making the request from making future ``PutFileSystemPolicy`` requests on this file system. Set ``BypassPolicyLockoutSafetyCheck`` to ``True`` only when you intend to prevent the IAM principal that is making the request from making subsequent
            ``PutFileSystemPolicy`` requests on this file system. The default value is ``False``.
          type: boolean
        BackupPolicy:
          $ref: '#/components/schemas/BackupPolicy'
          description: Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
        AvailabilityZoneName:
          type: string
          description: |-
            For One Zone file systems, specify the AWS Availability Zone in which to create the file system. Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/availability-durability.html#file-system-type) in the *Amazon EFS User Guide*.
              One Zone file systems are not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
          description: Describes the replication configuration for a specific file system.
      x-stackql-resource-name: file_system
      description: The ``AWS::EFS::FileSystem`` resource creates a new, empty file system in EFSlong (EFS). You must create a mount target ([AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)) to mount your EFS file system on an EC2 or other AWS cloud compute resource.
      x-type-name: AWS::EFS::FileSystem
      x-stackql-primary-identifier:
        - FileSystemId
      x-create-only-properties:
        - AvailabilityZoneName
        - Encrypted
        - KmsKeyId
        - PerformanceMode
      x-write-only-properties:
        - BypassPolicyLockoutSafetyCheck
        - ReplicationConfiguration/Destinations/0/AvailabilityZoneName
        - ReplicationConfiguration/Destinations/0/KmsKeyId
      x-read-only-properties:
        - Arn
        - FileSystemId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/FileSystemTags
      x-required-permissions:
        create:
          - elasticfilesystem:CreateFileSystem
          - elasticfilesystem:DescribeReplicationConfigurations
          - elasticfilesystem:TagResource
          - elasticfilesystem:CreateReplicationConfiguration
          - elasticfilesystem:DescribeFileSystems
          - elasticfilesystem:PutBackupPolicy
          - elasticfilesystem:PutFileSystemPolicy
          - elasticfilesystem:PutLifecycleConfiguration
          - elasticfilesystem:UpdateFileSystemProtection
          - kms:DescribeKey
          - kms:GenerateDataKeyWithoutPlaintext
          - kms:CreateGrant
        read:
          - elasticfilesystem:DescribeBackupPolicy
          - elasticfilesystem:DescribeFileSystemPolicy
          - elasticfilesystem:DescribeFileSystems
          - elasticfilesystem:DescribeLifecycleConfiguration
          - elasticfilesystem:DescribeReplicationConfigurations
        update:
          - elasticfilesystem:CreateReplicationConfiguration
          - elasticfilesystem:DeleteFileSystemPolicy
          - elasticfilesystem:DescribeBackupPolicy
          - elasticfilesystem:DescribeFileSystemPolicy
          - elasticfilesystem:DescribeFileSystems
          - elasticfilesystem:DescribeLifecycleConfiguration
          - elasticfilesystem:DescribeReplicationConfigurations
          - elasticfilesystem:DeleteTags
          - elasticfilesystem:DeleteReplicationConfiguration
          - elasticfilesystem:ListTagsForResource
          - elasticfilesystem:PutBackupPolicy
          - elasticfilesystem:PutFileSystemPolicy
          - elasticfilesystem:PutLifecycleConfiguration
          - elasticfilesystem:TagResource
          - elasticfilesystem:UntagResource
          - elasticfilesystem:UpdateFileSystem
          - elasticfilesystem:UpdateFileSystemProtection
          - kms:DescribeKey
          - kms:GenerateDataKeyWithoutPlaintext
          - kms:CreateGrant
        delete:
          - elasticfilesystem:DescribeFileSystems
          - elasticfilesystem:DeleteFileSystem
          - elasticfilesystem:DeleteReplicationConfiguration
          - elasticfilesystem:DescribeReplicationConfigurations
        list:
          - elasticfilesystem:DescribeBackupPolicy
          - elasticfilesystem:DescribeFileSystemPolicy
          - elasticfilesystem:DescribeFileSystems
          - elasticfilesystem:DescribeLifecycleConfiguration
          - elasticfilesystem:DescribeReplicationConfigurations
    MountTarget:
      type: object
      properties:
        Id:
          type: string
          description: ''
        IpAddress:
          type: string
          description: Valid IPv4 address within the address range of the specified subnet.
        FileSystemId:
          type: string
          description: The ID of the file system for which to create the mount target.
        SecurityGroups:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
          description: Up to five VPC security group IDs, of the form ``sg-xxxxxxxx``. These must be for the same VPC as subnet specified.
        SubnetId:
          type: string
          description: The ID of the subnet to add the mount target in. For One Zone file systems, use the subnet that is associated with the file system's Availability Zone.
      required:
        - FileSystemId
        - SecurityGroups
        - SubnetId
      x-stackql-resource-name: mount_target
      description: The ``AWS::EFS::MountTarget`` resource is an Amazon EFS resource that creates a mount target for an EFS file system. You can then mount the file system on Amazon EC2 instances or other resources by using the mount target.
      x-type-name: AWS::EFS::MountTarget
      x-stackql-primary-identifier:
        - Id
      x-create-only-properties:
        - IpAddress
        - SubnetId
        - FileSystemId
      x-read-only-properties:
        - Id
      x-required-properties:
        - FileSystemId
        - SecurityGroups
        - SubnetId
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - elasticfilesystem:CreateMountTarget
          - elasticfilesystem:DescribeMountTargets
        read:
          - elasticfilesystem:DescribeMountTargets
          - elasticfilesystem:DescribeMountTargetSecurityGroups
        update:
          - elasticfilesystem:DescribeMountTargets
          - elasticfilesystem:DescribeMountTargetSecurityGroups
          - elasticfilesystem:ModifyMountTargetSecurityGroups
        delete:
          - elasticfilesystem:DescribeMountTargets
          - elasticfilesystem:DeleteMountTarget
        list:
          - elasticfilesystem:DescribeMountTargets
          - elasticfilesystem:DescribeMountTargetSecurityGroups
  x-stackQL-resources:
    access_points:
      name: access_points
      id: aws.efs.access_points
      x-cfn-schema-name: AccessPoint
      x-type: list
      x-identifiers:
        - AccessPointId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessPointId') as access_point_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::AccessPoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessPointId') as access_point_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::AccessPoint'
                AND region = 'us-east-1'
    access_point:
      name: access_point
      id: aws.efs.access_point
      x-cfn-schema-name: AccessPoint
      x-type: get
      x-identifiers:
        - AccessPointId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessPointId') as access_point_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(Properties, '$.AccessPointTags') as access_point_tags,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,
              JSON_EXTRACT(Properties, '$.PosixUser') as posix_user,
              JSON_EXTRACT(Properties, '$.RootDirectory') as root_directory
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::AccessPoint'
              AND data__Identifier = '<AccessPointId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccessPointId') as access_point_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ClientToken') as client_token,
                json_extract_path_text(Properties, 'AccessPointTags') as access_point_tags,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id,
                json_extract_path_text(Properties, 'PosixUser') as posix_user,
                json_extract_path_text(Properties, 'RootDirectory') as root_directory
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::AccessPoint'
                AND data__Identifier = '<AccessPointId>'
                AND region = 'us-east-1'
    file_systems:
      name: file_systems
      id: aws.efs.file_systems
      x-cfn-schema-name: FileSystem
      x-type: list
      x-identifiers:
        - FileSystemId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::FileSystem'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::FileSystem'
                AND region = 'us-east-1'
    file_system:
      name: file_system
      id: aws.efs.file_system
      x-cfn-schema-name: FileSystem
      x-type: get
      x-identifiers:
        - FileSystemId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(Properties, '$.FileSystemTags') as file_system_tags,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.LifecyclePolicies') as lifecycle_policies,
              JSON_EXTRACT(Properties, '$.FileSystemProtection') as file_system_protection,
              JSON_EXTRACT(Properties, '$.PerformanceMode') as performance_mode,
              JSON_EXTRACT(Properties, '$.ProvisionedThroughputInMibps') as provisioned_throughput_in_mibps,
              JSON_EXTRACT(Properties, '$.ThroughputMode') as throughput_mode,
              JSON_EXTRACT(Properties, '$.FileSystemPolicy') as file_system_policy,
              JSON_EXTRACT(Properties, '$.BypassPolicyLockoutSafetyCheck') as bypass_policy_lockout_safety_check,
              JSON_EXTRACT(Properties, '$.BackupPolicy') as backup_policy,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneName') as availability_zone_name,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::FileSystem'
              AND data__Identifier = '<FileSystemId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Encrypted') as encrypted,
                json_extract_path_text(Properties, 'FileSystemTags') as file_system_tags,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'LifecyclePolicies') as lifecycle_policies,
                json_extract_path_text(Properties, 'FileSystemProtection') as file_system_protection,
                json_extract_path_text(Properties, 'PerformanceMode') as performance_mode,
                json_extract_path_text(Properties, 'ProvisionedThroughputInMibps') as provisioned_throughput_in_mibps,
                json_extract_path_text(Properties, 'ThroughputMode') as throughput_mode,
                json_extract_path_text(Properties, 'FileSystemPolicy') as file_system_policy,
                json_extract_path_text(Properties, 'BypassPolicyLockoutSafetyCheck') as bypass_policy_lockout_safety_check,
                json_extract_path_text(Properties, 'BackupPolicy') as backup_policy,
                json_extract_path_text(Properties, 'AvailabilityZoneName') as availability_zone_name,
                json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::FileSystem'
                AND data__Identifier = '<FileSystemId>'
                AND region = 'us-east-1'
    mount_targets:
      name: mount_targets
      id: aws.efs.mount_targets
      x-cfn-schema-name: MountTarget
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::MountTarget'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::EFS::MountTarget'
                AND region = 'us-east-1'
    mount_target:
      name: mount_target
      id: aws.efs.mount_target
      x-cfn-schema-name: MountTarget
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.IpAddress') as ip_address,
              JSON_EXTRACT(Properties, '$.FileSystemId') as file_system_id,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::MountTarget'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'IpAddress') as ip_address,
                json_extract_path_text(Properties, 'FileSystemId') as file_system_id,
                json_extract_path_text(Properties, 'SecurityGroups') as security_groups,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::EFS::MountTarget'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
