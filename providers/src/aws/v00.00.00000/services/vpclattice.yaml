openapi: 3.0.0
info:
  title: VpcLattice
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Key
        - Value
    AccessLogSubscription:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}$
        DestinationArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^als-[0-9a-z]{17}$
        ResourceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
        ResourceId:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn)|(svc))-[0-9a-z]{17}$
        ResourceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DestinationArn
      x-stackql-resource-name: access_log_subscription
      description: Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner will only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network.
      x-type-name: AWS::VpcLattice::AccessLogSubscription
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ResourceIdentifier
      x-create-only-properties:
        - ResourceIdentifier
      x-write-only-properties:
        - ResourceIdentifier
      x-read-only-properties:
        - Arn
        - Id
        - ResourceArn
        - ResourceId
      x-required-properties:
        - DestinationArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateAccessLogSubscription
          - vpc-lattice:TagResource
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:ListTagsForResource
          - logs:CreateLogDelivery
          - logs:CreateLogStream
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          - logs:GetLogDelivery
          - s3:PutBucketLogging
          - s3:GetBucketLogging
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - firehose:TagDeliveryStream
          - firehose:CreateDeliveryStream
          - firehose:DescribeDeliveryStream
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:ListTagsForResource
          - logs:GetLogDelivery
        update:
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:UpdateAccessLogSubscription
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - logs:UpdateLogDelivery
          - firehose:UpdateDestination
          - logs:CreateLogDelivery
          - logs:CreateLogStream
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          - logs:GetLogDelivery
          - s3:PutBucketLogging
          - s3:GetBucketLogging
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - firehose:TagDeliveryStream
          - firehose:CreateDeliveryStream
          - firehose:DescribeDeliveryStream
        delete:
          - vpc-lattice:DeleteAccessLogSubscription
          - vpc-lattice:UntagResource
          - logs:DeleteLogDelivery
          - logs:DeleteLogStream
          - logs:GetLogDelivery
          - logs:DeleteDestination
          - s3:PutBucketLogging
          - iam:GetServiceLinkedRoleDeletionStatus
          - iam:DeleteServiceLinkedRole
          - firehose:DeleteDeliveryStream
          - firehose:UntagDeliveryStream
        list:
          - vpc-lattice:ListAccessLogSubscriptions
    AuthPolicy:
      type: object
      properties:
        ResourceIdentifier:
          type: string
          pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
          maxLength: 200
          minLength: 21
        Policy:
          type: object
        State:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
      required:
        - ResourceIdentifier
        - Policy
      x-stackql-resource-name: auth_policy
      description: Creates or updates the auth policy.
      x-type-name: AWS::VpcLattice::AuthPolicy
      x-stackql-primary-identifier:
        - ResourceIdentifier
      x-create-only-properties:
        - ResourceIdentifier
      x-read-only-properties:
        - State
      x-required-properties:
        - ResourceIdentifier
        - Policy
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:PutAuthPolicy
        read:
          - vpc-lattice:GetAuthPolicy
        update:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:PutAuthPolicy
        delete:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:DeleteAuthPolicy
    Forward:
      type: object
      properties:
        TargetGroups:
          type: array
          items:
            $ref: '#/components/schemas/WeightedTargetGroup'
          maxItems: 2
          minItems: 1
          x-insertionOrder: false
      required:
        - TargetGroups
      additionalProperties: false
    FixedResponse:
      type: object
      additionalProperties: false
      properties:
        StatusCode:
          type: integer
          maximum: 599
          minimum: 100
      required:
        - StatusCode
    DefaultAction:
      type: object
      additionalProperties: false
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
    WeightedTargetGroup:
      type: object
      properties:
        TargetGroupIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((tg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}))$
        Weight:
          type: integer
          maximum: 999
          minimum: 1
      required:
        - TargetGroupIdentifier
      additionalProperties: false
    Listener:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$
        DefaultAction:
          $ref: '#/components/schemas/DefaultAction'
        Id:
          type: string
          maxLength: 26
          minLength: 26
          pattern: ^listener-[0-9a-z]{17}$
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DefaultAction
        - Protocol
      x-stackql-resource-name: listener
      description: Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services.
      x-type-name: AWS::VpcLattice::Listener
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServiceIdentifier
          - Name
          - Port
      x-create-only-properties:
        - ServiceIdentifier
        - Name
        - Port
        - Protocol
      x-write-only-properties:
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - Id
        - ServiceArn
        - ServiceId
      x-required-properties:
        - DefaultAction
        - Protocol
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateListener
          - vpc-lattice:TagResource
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        read:
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateListener
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteListener
        list:
          - vpc-lattice:ListListeners
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          type: string
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
          minLength: 20
          maxLength: 200
        Policy:
          type: object
      required:
        - ResourceArn
        - Policy
      x-stackql-resource-name: resource_policy
      description: Retrieves information about the resource policy. The resource policy is an IAM policy created by AWS RAM on behalf of the resource owner when they share a resource.
      x-type-name: AWS::VpcLattice::ResourcePolicy
      x-stackql-primary-identifier:
        - ResourceArn
      x-create-only-properties:
        - ResourceArn
      x-required-properties:
        - ResourceArn
        - Policy
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:PutResourcePolicy
        read:
          - vpc-lattice:GetResourcePolicy
        update:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:PutResourcePolicy
        delete:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:DeleteResourcePolicy
    HeaderMatch:
      type: object
      properties:
        Name:
          type: string
          maxLength: 40
          minLength: 1
        Match:
          $ref: '#/components/schemas/HeaderMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
        - Name
      additionalProperties: false
    HeaderMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
        Contains:
          type: string
          maxLength: 128
          minLength: 1
    HttpMatch:
      type: object
      properties:
        Method:
          type: string
          enum:
            - CONNECT
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - POST
            - PUT
            - TRACE
        PathMatch:
          $ref: '#/components/schemas/PathMatch'
        HeaderMatches:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/HeaderMatch'
          x-insertionOrder: false
      additionalProperties: false
    PathMatch:
      type: object
      additionalProperties: false
      properties:
        Match:
          $ref: '#/components/schemas/PathMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
    PathMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
    Action:
      type: object
      x-title: Forward
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
      additionalProperties: false
    Match:
      type: object
      x-title: HttpMatch
      properties:
        HttpMatch:
          $ref: '#/components/schemas/HttpMatch'
      required:
        - HttpMatch
      additionalProperties: false
    Rule:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/Action'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/((rule-[0-9a-z]{17})|(default))$
        Id:
          type: string
          maxLength: 22
          minLength: 7
          pattern: ^((rule-[0-9a-z]{17})|(default))$
        ListenerIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((listener-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}))$
        Match:
          $ref: '#/components/schemas/Match'
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Priority:
          type: integer
          maximum: 100
          minimum: 1
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Action
        - Match
        - Priority
      x-stackql-resource-name: rule
      description: Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions.
      x-type-name: AWS::VpcLattice::Rule
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServiceIdentifier
          - ListenerIdentifier
          - Name
      x-create-only-properties:
        - ListenerIdentifier
        - ServiceIdentifier
        - Name
      x-write-only-properties:
        - ListenerIdentifier
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - Id
      x-required-properties:
        - Action
        - Match
        - Priority
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateRule
          - vpc-lattice:GetRule
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
        read:
          - vpc-lattice:GetRule
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateRule
          - vpc-lattice:GetRule
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
        delete:
          - vpc-lattice:DeleteRule
        list:
          - vpc-lattice:ListRules
    DnsEntry:
      type: object
      additionalProperties: false
      properties:
        DomainName:
          type: string
        HostedZoneId:
          type: string
    Service:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - ACTIVE
            - CREATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        CertificateArn:
          type: string
          maxLength: 2048
          pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
        CustomDomainName:
          type: string
          maxLength: 255
          minLength: 3
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service
      description: A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).
      x-type-name: AWS::VpcLattice::Service
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
        - CustomDomainName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - DnsEntry/DomainName
        - DnsEntry/HostedZoneId
        - Id
        - LastUpdatedAt
        - Status
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateService
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
          - acm:DescribeCertificate
          - acm:ListCertificates
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateService
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteService
          - vpc-lattice:GetService
        list:
          - vpc-lattice:ListServices
    ServiceNetwork:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network
      description: A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetwork
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - LastUpdatedAt
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:CreateServiceNetwork
          - vpc-lattice:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:UpdateServiceNetwork
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
        delete:
          - vpc-lattice:DeleteServiceNetwork
        list:
          - vpc-lattice:ListServiceNetworks
    ServiceNetworkServiceAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}$
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 2048
          minLength: 17
          pattern: ^snsa-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        ServiceName:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_service_association
      description: Associates a service with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetworkServiceAssociation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ServiceNetworkIdentifier
          - ServiceIdentifier
      x-create-only-properties:
        - ServiceNetworkIdentifier
        - ServiceIdentifier
      x-write-only-properties:
        - ServiceNetworkIdentifier
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - DnsEntry/DomainName
        - DnsEntry/HostedZoneId
        - Id
        - ServiceNetworkArn
        - ServiceNetworkId
        - ServiceNetworkName
        - ServiceArn
        - ServiceId
        - ServiceName
        - Status
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateServiceNetworkServiceAssociation
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        read:
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetworkServiceAssociation
          - vpc-lattice:GetServiceNetworkServiceAssociation
        list:
          - vpc-lattice:ListServiceNetworkServiceAssociations
    ServiceNetworkVpcAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}$
        CreatedAt:
          type: string
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            maxLength: 200
            minLength: 0
            pattern: ^sg-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Id:
          type: string
          maxLength: 22
          minLength: 22
          pattern: ^snva-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - UPDATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        VpcId:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_vpc_association
      description: Associates a VPC with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetworkVpcAssociation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ServiceNetworkIdentifier
          - VpcIdentifier
      x-create-only-properties:
        - ServiceNetworkIdentifier
        - VpcIdentifier
      x-write-only-properties:
        - ServiceNetworkIdentifier
        - VpcIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - ServiceNetworkArn
        - ServiceNetworkId
        - ServiceNetworkName
        - Status
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateServiceNetworkVpcAssociation
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:ListServiceNetworkVpcAssociations
          - vpc-lattice:ListTagsForResource
          - ec2:DescribeSecurityGroups
          - ec2:DescribeVpcs
          - vpc-lattice:TagResource
        read:
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:UpdateServiceNetworkVpcAssociation
          - ec2:DescribeSecurityGroups
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetworkVpcAssociation
          - vpc-lattice:GetServiceNetworkVpcAssociation
        list:
          - vpc-lattice:ListServiceNetworkVpcAssociations
    HealthCheckConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ProtocolVersion:
          type: string
          enum:
            - HTTP1
            - HTTP2
            - GRPC
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Path:
          type: string
          maxLength: 2048
          minLength: 0
          pattern: (^/[a-zA-Z0-9@:%_+.~#?&/=-]*$|(^$))
        HealthCheckIntervalSeconds:
          type: integer
          maximum: 300
          minimum: 5
        HealthCheckTimeoutSeconds:
          type: integer
          maximum: 120
          minimum: 1
        HealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        UnhealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        Matcher:
          $ref: '#/components/schemas/Matcher'
    Matcher:
      type: object
      additionalProperties: false
      properties:
        HttpCode:
          type: string
          minLength: 3
          maxLength: 2000
          pattern: ^[0-9-,]+$
      required:
        - HttpCode
    TargetGroupConfig:
      type: object
      additionalProperties: false
      properties:
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ProtocolVersion:
          type: string
          default: HTTP1
          enum:
            - HTTP1
            - HTTP2
            - GRPC
        IpAddressType:
          type: string
          default: IPV4
          enum:
            - IPV4
            - IPV6
        LambdaEventStructureVersion:
          type: string
          enum:
            - V1
            - V2
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        HealthCheck:
          $ref: '#/components/schemas/HealthCheckConfig'
      required: []
    Target:
      type: object
      additionalProperties: false
      properties:
        Id:
          type: string
        Port:
          type: integer
          maximum: 65535
          minimum: 1
      required:
        - Id
    TargetGroup:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}$
        Config:
          $ref: '#/components/schemas/TargetGroupConfig'
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^tg-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 128
          minLength: 3
          pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Type:
          type: string
          enum:
            - IP
            - LAMBDA
            - INSTANCE
            - ALB
        Targets:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 100
          default: []
          items:
            $ref: '#/components/schemas/Target'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Type
      x-stackql-resource-name: target_group
      description: A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.
      x-type-name: AWS::VpcLattice::TargetGroup
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
        - Type
        - Config/Port
        - Config/IpAddressType
        - Config/Protocol
        - Config/ProtocolVersion
        - Config/VpcIdentifier
        - Config/LambdaEventStructureVersion
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - LastUpdatedAt
        - Status
      x-required-properties:
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - vpc-lattice:CreateTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:RegisterTargets
          - vpc-lattice:ListTargets
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - ec2:DescribeVpcs
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeAvailabilityZoneMappings
          - lambda:Invoke
          - lambda:AddPermission
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:ListTargets
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:ListTargets
          - vpc-lattice:RegisterTargets
          - vpc-lattice:DeregisterTargets
          - ec2:DescribeVpcs
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeAvailabilityZoneMappings
          - elasticloadbalancing:DescribeLoadBalancers
          - lambda:Invoke
          - lambda:RemovePermission
          - lambda:AddPermission
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:DeregisterTargets
          - vpc-lattice:ListTargets
          - lambda:RemovePermission
        list:
          - vpc-lattice:ListTargetGroups
  x-stackQL-resources:
    access_log_subscriptions:
      name: access_log_subscriptions
      id: aws.vpclattice.access_log_subscriptions
      x-cfn-schema-name: AccessLogSubscription
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND region = 'us-east-1'
    access_log_subscription:
      name: access_log_subscription
      id: aws.vpclattice.access_log_subscription
      x-cfn-schema-name: AccessLogSubscription
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    auth_policy:
      name: auth_policy
      id: aws.vpclattice.auth_policy
      x-cfn-schema-name: AuthPolicy
      x-type: get
      x-identifiers:
        - ResourceIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
              AND data__Identifier = '<ResourceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'Policy') as policy,
                json_extract_path_text(Properties, 'State') as state
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
                AND data__Identifier = '<ResourceIdentifier>'
                AND region = 'us-east-1'
    listeners:
      name: listeners
      id: aws.vpclattice.listeners
      x-cfn-schema-name: Listener
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Listener'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Listener'
                AND region = 'us-east-1'
    listener:
      name: listener
      id: aws.vpclattice.listener
      x-cfn-schema-name: Listener
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultAction') as default_action,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Listener'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DefaultAction') as default_action,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'ServiceArn') as service_arn,
                json_extract_path_text(Properties, 'ServiceId') as service_id,
                json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Listener'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    resource_policy:
      name: resource_policy
      id: aws.vpclattice.resource_policy
      x-cfn-schema-name: ResourcePolicy
      x-type: get
      x-identifiers:
        - ResourceArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
              AND data__Identifier = '<ResourceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
                AND data__Identifier = '<ResourceArn>'
                AND region = 'us-east-1'
    rules:
      name: rules
      id: aws.vpclattice.rules
      x-cfn-schema-name: Rule
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Rule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Rule'
                AND region = 'us-east-1'
    rule:
      name: rule
      id: aws.vpclattice.rule
      x-cfn-schema-name: Rule
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ListenerIdentifier') as listener_identifier,
              JSON_EXTRACT(Properties, '$.Match') as _match,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Rule'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Action') as action,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ListenerIdentifier') as listener_identifier,
                json_extract_path_text(Properties, 'Match') as _match,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Priority') as priority,
                json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Rule'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    services:
      name: services
      id: aws.vpclattice.services
      x-cfn-schema-name: Service
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Service'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Service'
                AND region = 'us-east-1'
    service:
      name: service
      id: aws.vpclattice.service
      x-cfn-schema-name: Service
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.CustomDomainName') as custom_domain_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Service'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AuthType') as auth_type,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'DnsEntry') as dns_entry,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'CustomDomainName') as custom_domain_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Service'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    service_networks:
      name: service_networks
      id: aws.vpclattice.service_networks
      x-cfn-schema-name: ServiceNetwork
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND region = 'us-east-1'
    service_network:
      name: service_network
      id: aws.vpclattice.service_network
      x-cfn-schema-name: ServiceNetwork
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'AuthType') as auth_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    service_network_service_associations:
      name: service_network_service_associations
      id: aws.vpclattice.service_network_service_associations
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND region = 'us-east-1'
    service_network_service_association:
      name: service_network_service_association
      id: aws.vpclattice.service_network_service_association
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'DnsEntry') as dns_entry,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ServiceNetworkArn') as service_network_arn,
                json_extract_path_text(Properties, 'ServiceNetworkId') as service_network_id,
                json_extract_path_text(Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                json_extract_path_text(Properties, 'ServiceNetworkName') as service_network_name,
                json_extract_path_text(Properties, 'ServiceArn') as service_arn,
                json_extract_path_text(Properties, 'ServiceId') as service_id,
                json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(Properties, 'ServiceName') as service_name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    service_network_vpc_associations:
      name: service_network_vpc_associations
      id: aws.vpclattice.service_network_vpc_associations
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND region = 'us-east-1'
    service_network_vpc_association:
      name: service_network_vpc_association
      id: aws.vpclattice.service_network_vpc_association
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcIdentifier') as vpc_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ServiceNetworkArn') as service_network_arn,
                json_extract_path_text(Properties, 'ServiceNetworkId') as service_network_id,
                json_extract_path_text(Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                json_extract_path_text(Properties, 'ServiceNetworkName') as service_network_name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'VpcIdentifier') as vpc_identifier,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    target_groups:
      name: target_groups
      id: aws.vpclattice.target_groups
      x-cfn-schema-name: TargetGroup
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND region = 'us-east-1'
    target_group:
      name: target_group
      id: aws.vpclattice.target_group
      x-cfn-schema-name: TargetGroup
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Config') as config,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Config') as config,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Targets') as targets,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
