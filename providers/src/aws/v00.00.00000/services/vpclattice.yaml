openapi: 3.0.0
info:
  title: VpcLattice
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Key
        - Value
    AccessLogSubscription:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}$
        DestinationArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^als-[0-9a-z]{17}$
        ResourceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
        ResourceId:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn)|(svc))-[0-9a-z]{17}$
        ResourceIdentifier:
          type: string
          maxLength: 2048
          minLength: 17
          pattern: ^((((sn)|(svc)|(rcfg))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(resourceconfiguration/rcfg)|(service/svc))-[0-9a-z]{17}))$
        ServiceNetworkLogType:
          type: string
          enum:
            - SERVICE
            - RESOURCE
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DestinationArn
      x-stackql-resource-name: access_log_subscription
      description: Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner will only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network.
      x-type-name: AWS::VpcLattice::AccessLogSubscription
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ResourceIdentifier
          - DestinationArn
          - ServiceNetworkLogType
      x-create-only-properties:
        - ResourceIdentifier
      x-write-only-properties:
        - ResourceIdentifier
      x-read-only-properties:
        - Arn
        - Id
        - ResourceArn
        - ResourceId
      x-required-properties:
        - DestinationArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateAccessLogSubscription
          - vpc-lattice:TagResource
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:ListTagsForResource
          - logs:CreateLogDelivery
          - logs:CreateLogStream
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          - logs:GetLogDelivery
          - s3:PutBucketLogging
          - s3:GetBucketLogging
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - firehose:TagDeliveryStream
          - firehose:CreateDeliveryStream
          - firehose:DescribeDeliveryStream
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:ListTagsForResource
          - logs:GetLogDelivery
        update:
          - vpc-lattice:GetAccessLogSubscription
          - vpc-lattice:UpdateAccessLogSubscription
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - logs:UpdateLogDelivery
          - firehose:UpdateDestination
          - logs:CreateLogDelivery
          - logs:CreateLogStream
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
          - logs:GetLogDelivery
          - s3:PutBucketLogging
          - s3:GetBucketLogging
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - firehose:TagDeliveryStream
          - firehose:CreateDeliveryStream
          - firehose:DescribeDeliveryStream
        delete:
          - vpc-lattice:DeleteAccessLogSubscription
          - vpc-lattice:UntagResource
          - logs:DeleteLogDelivery
          - logs:DeleteLogStream
          - logs:GetLogDelivery
          - logs:DeleteDestination
          - s3:PutBucketLogging
          - iam:GetServiceLinkedRoleDeletionStatus
          - iam:DeleteServiceLinkedRole
          - firehose:DeleteDeliveryStream
          - firehose:UntagDeliveryStream
        list:
          - vpc-lattice:ListAccessLogSubscriptions
    AuthPolicy:
      type: object
      properties:
        ResourceIdentifier:
          type: string
          pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
          maxLength: 200
          minLength: 17
        Policy:
          type: object
        State:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
      required:
        - ResourceIdentifier
        - Policy
      x-stackql-resource-name: auth_policy
      description: Creates or updates the auth policy.
      x-type-name: AWS::VpcLattice::AuthPolicy
      x-stackql-primary-identifier:
        - ResourceIdentifier
      x-create-only-properties:
        - ResourceIdentifier
      x-read-only-properties:
        - State
      x-required-properties:
        - ResourceIdentifier
        - Policy
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:PutAuthPolicy
        read:
          - vpc-lattice:GetAuthPolicy
        update:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:PutAuthPolicy
        delete:
          - vpc-lattice:GetAuthPolicy
          - vpc-lattice:DeleteAuthPolicy
    Forward:
      type: object
      properties:
        TargetGroups:
          type: array
          items:
            $ref: '#/components/schemas/WeightedTargetGroup'
          maxItems: 10
          minItems: 1
          x-insertionOrder: false
      required:
        - TargetGroups
      additionalProperties: false
    FixedResponse:
      type: object
      additionalProperties: false
      properties:
        StatusCode:
          type: integer
          maximum: 599
          minimum: 100
      required:
        - StatusCode
    DefaultAction:
      type: object
      additionalProperties: false
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
    WeightedTargetGroup:
      type: object
      properties:
        TargetGroupIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((tg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}))$
        Weight:
          type: integer
          maximum: 999
          minimum: 1
      required:
        - TargetGroupIdentifier
      additionalProperties: false
    Listener:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$
        DefaultAction:
          $ref: '#/components/schemas/DefaultAction'
        Id:
          type: string
          maxLength: 26
          minLength: 26
          pattern: ^listener-[0-9a-z]{17}$
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
            - TLS_PASSTHROUGH
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DefaultAction
        - Protocol
      x-stackql-resource-name: listener
      description: Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services.
      x-type-name: AWS::VpcLattice::Listener
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServiceIdentifier
          - Name
          - Port
      x-create-only-properties:
        - ServiceIdentifier
        - Name
        - Port
        - Protocol
      x-write-only-properties:
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - Id
        - ServiceArn
        - ServiceId
      x-required-properties:
        - DefaultAction
        - Protocol
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateListener
          - vpc-lattice:TagResource
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        read:
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateListener
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetListener
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteListener
        list:
          - vpc-lattice:ListListeners
    IpResource:
      minLength: 4
      type: string
      maxLength: 39
    PortRange:
      minLength: 1
      pattern: ^((\d{1,5}\-\d{1,5})|(\d+))$
      type: string
      maxLength: 11
    DnsResource:
      additionalProperties: false
      type: object
      properties:
        IpAddressType:
          type: string
          enum:
            - IPV4
            - IPV6
            - DUALSTACK
        DomainName:
          minLength: 3
          type: string
          maxLength: 255
      required:
        - DomainName
        - IpAddressType
    ArnResource:
      pattern: ^arn.*
      type: string
      maxLength: 1224
    Id:
      minLength: 22
      pattern: ^rcfg-[0-9a-z]{17}$
      type: string
      maxLength: 22
    ResourceConfiguration:
      type: object
      properties:
        AllowAssociationToSharableServiceNetwork:
          type: boolean
        ProtocolType:
          type: string
          enum:
            - TCP
        ResourceConfigurationType:
          type: string
          enum:
            - GROUP
            - CHILD
            - SINGLE
            - ARN
        PortRanges:
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        ResourceConfigurationDefinition:
          oneOf:
            - additionalProperties: false
              type: object
              title: IpResource
              properties:
                IpResource:
                  $ref: '#/components/schemas/IpResource'
              required:
                - IpResource
            - additionalProperties: false
              type: object
              title: ArnResource
              properties:
                ArnResource:
                  $ref: '#/components/schemas/ArnResource'
              required:
                - ArnResource
            - additionalProperties: false
              type: object
              title: DnsResource
              properties:
                DnsResource:
                  $ref: '#/components/schemas/DnsResource'
              required:
                - DnsResource
          type: object
        Id:
          $ref: '#/components/schemas/Id'
        ResourceGatewayId:
          type: string
        Arn:
          minLength: 20
          pattern: ^arn:[a-z0-9f\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceconfiguration/rcfg-[0-9a-z]{17}$
          type: string
          maxLength: 2048
        ResourceConfigurationAuthType:
          type: string
          enum:
            - NONE
            - AWS_IAM
        ResourceConfigurationGroupId:
          $ref: '#/components/schemas/Id'
        Tags:
          minItems: 0
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          minLength: 3
          pattern: ^(?!rcfg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
          type: string
          maxLength: 40
      required: []
      x-stackql-resource-name: resource_configuration
      description: VpcLattice ResourceConfiguration CFN resource
      x-type-name: AWS::VpcLattice::ResourceConfiguration
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
      x-create-only-properties:
        - ResourceGatewayId
        - ResourceConfigurationType
        - ProtocolType
        - ResourceConfigurationAuthType
      x-write-only-properties:
        - ResourceConfigurationAuthType
        - ResourceConfigurationGroupId
      x-read-only-properties:
        - Id
        - Arn
      x-required-properties: []
      x-tagging:
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: true
      x-required-permissions:
        read:
          - vpc-lattice:GetResourceConfiguration
          - vpc-lattice:ListTagsForResource
        create:
          - ec2:DescribeSubnets
          - vpc-lattice:CreateResourceConfiguration
          - vpc-lattice:GetResourceConfiguration
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        update:
          - ec2:DescribeSubnets
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:UpdateResourceConfiguration
          - vpc-lattice:GetResourceConfiguration
        list:
          - vpc-lattice:ListResourceConfigurations
        delete:
          - vpc-lattice:DeleteResourceConfiguration
          - vpc-lattice:GetResourceConfiguration
          - vpc-lattice:UntagResource
    ResourceGateway:
      type: object
      properties:
        IpAddressType:
          type: string
          enum:
            - IPV4
            - IPV6
            - DUALSTACK
        VpcIdentifier:
          minLength: 5
          type: string
          maxLength: 50
        Id:
          minLength: 17
          pattern: ^((rgw-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}))$
          type: string
          maxLength: 2048
        Arn:
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}$
          type: string
          maxLength: 2048
        SubnetIds:
          uniqueItems: true
          description: The ID of one or more subnets in which to create an endpoint network interface.
          x-insertionOrder: false
          type: array
          items:
            relationshipRef:
              typeName: AWS::EC2::Subnet
              propertyPath: /properties/SubnetId
            type: string
        SecurityGroupIds:
          uniqueItems: true
          description: The ID of one or more security groups to associate with the endpoint network interface.
          x-insertionOrder: false
          type: array
          items:
            anyOf:
              - relationshipRef:
                  typeName: AWS::EC2::SecurityGroup
                  propertyPath: /properties/GroupId
              - relationshipRef:
                  typeName: AWS::EC2::SecurityGroup
                  propertyPath: /properties/Id
              - relationshipRef:
                  typeName: AWS::EC2::VPC
                  propertyPath: /properties/DefaultSecurityGroup
            type: string
        Tags:
          minItems: 0
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          minLength: 3
          pattern: ^(?!rgw-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
          type: string
          maxLength: 40
      x-stackql-resource-name: resource_gateway
      description: 'Creates a resource gateway for a service. '
      x-type-name: AWS::VpcLattice::ResourceGateway
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
      x-create-only-properties:
        - VpcIdentifier
        - SubnetIds
        - IpAddressType
        - Name
      x-read-only-properties:
        - Id
        - Arn
      x-tagging:
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        tagProperty: /properties/Tags
        cloudFormationSystemTags: false
      x-required-permissions:
        read:
          - vpc-lattice:GetResourceGateway
          - vpc-lattice:ListTagsForResource
        create:
          - vpc-lattice:CreateResourceGateway
          - vpc-lattice:GetResourceGateway
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
        update:
          - vpc-lattice:UpdateResourceGateway
          - vpc-lattice:GetResourceGateway
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
        list:
          - vpc-lattice:ListResourceGateways
        delete:
          - vpc-lattice:DeleteResourceGateway
          - vpc-lattice:GetResourceGateway
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          type: string
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
          minLength: 20
          maxLength: 200
        Policy:
          type: object
      required:
        - ResourceArn
        - Policy
      x-stackql-resource-name: resource_policy
      description: Retrieves information about the resource policy. The resource policy is an IAM policy created by AWS RAM on behalf of the resource owner when they share a resource.
      x-type-name: AWS::VpcLattice::ResourcePolicy
      x-stackql-primary-identifier:
        - ResourceArn
      x-create-only-properties:
        - ResourceArn
      x-required-properties:
        - ResourceArn
        - Policy
      x-tagging:
        taggable: false
      x-required-permissions:
        create:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:PutResourcePolicy
        read:
          - vpc-lattice:GetResourcePolicy
        update:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:PutResourcePolicy
        delete:
          - vpc-lattice:GetResourcePolicy
          - vpc-lattice:DeleteResourcePolicy
    HeaderMatch:
      type: object
      properties:
        Name:
          type: string
          maxLength: 40
          minLength: 1
        Match:
          $ref: '#/components/schemas/HeaderMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
        - Name
      additionalProperties: false
    HeaderMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
        Contains:
          type: string
          maxLength: 128
          minLength: 1
    HttpMatch:
      type: object
      properties:
        Method:
          type: string
          enum:
            - CONNECT
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - POST
            - PUT
            - TRACE
        PathMatch:
          $ref: '#/components/schemas/PathMatch'
        HeaderMatches:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/HeaderMatch'
          x-insertionOrder: false
      additionalProperties: false
    PathMatch:
      type: object
      additionalProperties: false
      properties:
        Match:
          $ref: '#/components/schemas/PathMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
    PathMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
    Action:
      type: object
      x-title: Forward
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
      additionalProperties: false
    Match:
      type: object
      x-title: HttpMatch
      properties:
        HttpMatch:
          $ref: '#/components/schemas/HttpMatch'
      required:
        - HttpMatch
      additionalProperties: false
    Rule:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/Action'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/((rule-[0-9a-z]{17})|(default))$
        Id:
          type: string
          maxLength: 22
          minLength: 7
          pattern: ^((rule-[0-9a-z]{17})|(default))$
        ListenerIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((listener-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}))$
        Match:
          $ref: '#/components/schemas/Match'
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Priority:
          type: integer
          maximum: 100
          minimum: 1
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Action
        - Match
        - Priority
      x-stackql-resource-name: rule
      description: Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions.
      x-type-name: AWS::VpcLattice::Rule
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - ServiceIdentifier
          - ListenerIdentifier
          - Name
      x-create-only-properties:
        - ListenerIdentifier
        - ServiceIdentifier
        - Name
      x-write-only-properties:
        - ListenerIdentifier
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - Id
      x-required-properties:
        - Action
        - Match
        - Priority
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateRule
          - vpc-lattice:GetRule
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
        read:
          - vpc-lattice:GetRule
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateRule
          - vpc-lattice:GetRule
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteRule
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListRules
    DnsEntry:
      type: object
      additionalProperties: false
      properties:
        DomainName:
          type: string
        HostedZoneId:
          type: string
    Service:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - ACTIVE
            - CREATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        CertificateArn:
          type: string
          maxLength: 2048
          pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
        CustomDomainName:
          type: string
          maxLength: 255
          minLength: 3
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service
      description: A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).
      x-type-name: AWS::VpcLattice::Service
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
        - CustomDomainName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - DnsEntry/DomainName
        - DnsEntry/HostedZoneId
        - Id
        - LastUpdatedAt
        - Status
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateService
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
          - acm:DescribeCertificate
          - acm:ListCertificates
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateService
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetService
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteService
          - vpc-lattice:GetService
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListServices
    SharingConfig:
      type: object
      additionalProperties: false
      properties:
        enabled:
          type: boolean
      required:
        - enabled
    ServiceNetwork:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
        SharingConfig:
          $ref: '#/components/schemas/SharingConfig'
      x-stackql-resource-name: service_network
      description: A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetwork
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - LastUpdatedAt
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: false
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:CreateServiceNetwork
          - vpc-lattice:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:GetServiceNetwork
          - vpc-lattice:UpdateServiceNetwork
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetwork
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListServiceNetworks
    ServiceNetworkResourceAssociation:
      type: object
      properties:
        Id:
          type: string
          minLength: 22
          maxLength: 22
          pattern: ^snra-[0-9a-f]{17}$
        Arn:
          type: string
          minLength: 22
          maxLength: 2048
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkresourceassociation/snra-[0-9a-f]{17}$
        ResourceConfigurationId:
          type: string
          minLength: 17
          maxLength: 2048
          pattern: ^rcfg-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_resource_association
      description: VpcLattice ServiceNetworkResourceAssociation CFN resource
      x-type-name: AWS::VpcLattice::ServiceNetworkResourceAssociation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
      x-create-only-properties:
        - ResourceConfigurationId
        - ServiceNetworkId
      x-read-only-properties:
        - Id
        - Arn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateServiceNetworkResourceAssociation
          - vpc-lattice:GetServiceNetworkResourceAssociation
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        read:
          - vpc-lattice:GetServiceNetworkResourceAssociation
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetServiceNetworkResourceAssociation
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetworkResourceAssociation
          - vpc-lattice:GetServiceNetworkResourceAssociation
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListServiceNetworkResourceAssociations
    ServiceNetworkServiceAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}$
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 2048
          minLength: 17
          pattern: ^snsa-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        ServiceName:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_service_association
      description: Associates a service with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetworkServiceAssociation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ServiceNetworkIdentifier
          - ServiceIdentifier
      x-create-only-properties:
        - ServiceNetworkIdentifier
        - ServiceIdentifier
      x-write-only-properties:
        - ServiceNetworkIdentifier
        - ServiceIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - DnsEntry/DomainName
        - DnsEntry/HostedZoneId
        - Id
        - ServiceNetworkArn
        - ServiceNetworkId
        - ServiceNetworkName
        - ServiceArn
        - ServiceId
        - ServiceName
        - Status
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateServiceNetworkServiceAssociation
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
        read:
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetworkServiceAssociation
          - vpc-lattice:GetServiceNetworkServiceAssociation
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListServiceNetworkServiceAssociations
    ServiceNetworkVpcAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}$
        CreatedAt:
          type: string
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            maxLength: 200
            minLength: 0
            pattern: ^sg-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Id:
          type: string
          maxLength: 22
          minLength: 22
          pattern: ^snva-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - UPDATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        VpcId:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_vpc_association
      description: Associates a VPC with a service network.
      x-type-name: AWS::VpcLattice::ServiceNetworkVpcAssociation
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - ServiceNetworkIdentifier
          - VpcIdentifier
      x-create-only-properties:
        - ServiceNetworkIdentifier
        - VpcIdentifier
      x-write-only-properties:
        - ServiceNetworkIdentifier
        - VpcIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - ServiceNetworkArn
        - ServiceNetworkId
        - ServiceNetworkName
        - Status
        - VpcId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateServiceNetworkVpcAssociation
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:ListServiceNetworkVpcAssociations
          - vpc-lattice:ListTagsForResource
          - ec2:DescribeSecurityGroups
          - ec2:DescribeVpcs
          - vpc-lattice:TagResource
        read:
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:UpdateServiceNetworkVpcAssociation
          - ec2:DescribeSecurityGroups
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteServiceNetworkVpcAssociation
          - vpc-lattice:GetServiceNetworkVpcAssociation
          - vpc-lattice:UntagResource
        list:
          - vpc-lattice:ListServiceNetworkVpcAssociations
    HealthCheckConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ProtocolVersion:
          type: string
          enum:
            - HTTP1
            - HTTP2
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Path:
          type: string
          maxLength: 2048
          minLength: 0
          pattern: (^/[a-zA-Z0-9@:%_+.~#?&/=-]*$|(^$))
        HealthCheckIntervalSeconds:
          type: integer
          maximum: 300
          minimum: 5
        HealthCheckTimeoutSeconds:
          type: integer
          maximum: 120
          minimum: 1
        HealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        UnhealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        Matcher:
          $ref: '#/components/schemas/Matcher'
    Matcher:
      type: object
      additionalProperties: false
      properties:
        HttpCode:
          type: string
          minLength: 3
          maxLength: 2000
          pattern: ^[0-9-,]+$
      required:
        - HttpCode
    TargetGroupConfig:
      type: object
      additionalProperties: false
      properties:
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
            - TCP
        ProtocolVersion:
          type: string
          default: HTTP1
          enum:
            - HTTP1
            - HTTP2
            - GRPC
        IpAddressType:
          type: string
          default: IPV4
          enum:
            - IPV4
            - IPV6
        LambdaEventStructureVersion:
          type: string
          enum:
            - V1
            - V2
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        HealthCheck:
          $ref: '#/components/schemas/HealthCheckConfig'
      required: []
    Target:
      type: object
      additionalProperties: false
      properties:
        Id:
          type: string
        Port:
          type: integer
          maximum: 65535
          minimum: 1
      required:
        - Id
    TargetGroup:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}$
        Config:
          $ref: '#/components/schemas/TargetGroupConfig'
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^tg-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 128
          minLength: 3
          pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Type:
          type: string
          enum:
            - IP
            - LAMBDA
            - INSTANCE
            - ALB
        Targets:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 100
          default: []
          items:
            $ref: '#/components/schemas/Target'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Type
      x-stackql-resource-name: target_group
      description: A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.
      x-type-name: AWS::VpcLattice::TargetGroup
      x-stackql-primary-identifier:
        - Arn
      x-stackql-additional-identifiers:
        - - Id
        - - Name
      x-create-only-properties:
        - Name
        - Type
        - Config/Port
        - Config/IpAddressType
        - Config/Protocol
        - Config/ProtocolVersion
        - Config/VpcIdentifier
        - Config/LambdaEventStructureVersion
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - LastUpdatedAt
        - Status
      x-required-properties:
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - vpc-lattice:UntagResource
          - vpc-lattice:TagResource
          - vpc-lattice:ListTagsForResource
      x-required-permissions:
        create:
          - vpc-lattice:CreateTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:RegisterTargets
          - vpc-lattice:ListTargets
          - vpc-lattice:ListTagsForResource
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - ec2:DescribeVpcs
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeAvailabilityZoneMappings
          - lambda:Invoke
          - lambda:AddPermission
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
        read:
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:ListTargets
          - vpc-lattice:ListTagsForResource
        update:
          - vpc-lattice:UpdateTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:ListTargets
          - vpc-lattice:RegisterTargets
          - vpc-lattice:DeregisterTargets
          - ec2:DescribeVpcs
          - ec2:DescribeInstances
          - ec2:DescribeSubnets
          - ec2:DescribeAvailabilityZoneMappings
          - elasticloadbalancing:DescribeLoadBalancers
          - lambda:Invoke
          - lambda:RemovePermission
          - lambda:AddPermission
          - vpc-lattice:TagResource
          - vpc-lattice:UntagResource
          - vpc-lattice:ListTagsForResource
        delete:
          - vpc-lattice:DeleteTargetGroup
          - vpc-lattice:GetTargetGroup
          - vpc-lattice:DeregisterTargets
          - vpc-lattice:ListTargets
          - lambda:RemovePermission
        list:
          - vpc-lattice:ListTargetGroups
    CreateAccessLogSubscriptionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}$
            DestinationArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
            Id:
              type: string
              maxLength: 21
              minLength: 21
              pattern: ^als-[0-9a-z]{17}$
            ResourceArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
            ResourceId:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((sn)|(svc))-[0-9a-z]{17}$
            ResourceIdentifier:
              type: string
              maxLength: 2048
              minLength: 17
              pattern: ^((((sn)|(svc)|(rcfg))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(resourceconfiguration/rcfg)|(service/svc))-[0-9a-z]{17}))$
            ServiceNetworkLogType:
              type: string
              enum:
                - SERVICE
                - RESOURCE
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateAccessLogSubscriptionRequest
      type: object
      required: []
    CreateAuthPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ResourceIdentifier:
              type: string
              pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
              maxLength: 200
              minLength: 17
            Policy:
              type: object
            State:
              type: string
              enum:
                - ACTIVE
                - INACTIVE
          x-stackQL-stringOnly: true
      x-title: CreateAuthPolicyRequest
      type: object
      required: []
    CreateListenerRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$
            DefaultAction:
              $ref: '#/components/schemas/DefaultAction'
            Id:
              type: string
              maxLength: 26
              minLength: 26
              pattern: ^listener-[0-9a-z]{17}$
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Port:
              type: integer
              maximum: 65535
              minimum: 1
            Protocol:
              type: string
              enum:
                - HTTP
                - HTTPS
                - TLS_PASSTHROUGH
            ServiceArn:
              type: string
              maxLength: 2048
              minLength: 21
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
            ServiceId:
              type: string
              maxLength: 21
              minLength: 21
              pattern: ^svc-[0-9a-z]{17}$
            ServiceIdentifier:
              type: string
              maxLength: 2048
              minLength: 21
              pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateListenerRequest
      type: object
      required: []
    CreateResourceConfigurationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AllowAssociationToSharableServiceNetwork:
              type: boolean
            ProtocolType:
              type: string
              enum:
                - TCP
            ResourceConfigurationType:
              type: string
              enum:
                - GROUP
                - CHILD
                - SINGLE
                - ARN
            PortRanges:
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/PortRange'
            ResourceConfigurationDefinition:
              oneOf:
                - additionalProperties: false
                  type: object
                  title: IpResource
                  properties:
                    IpResource:
                      $ref: '#/components/schemas/IpResource'
                  required:
                    - IpResource
                - additionalProperties: false
                  type: object
                  title: ArnResource
                  properties:
                    ArnResource:
                      $ref: '#/components/schemas/ArnResource'
                  required:
                    - ArnResource
                - additionalProperties: false
                  type: object
                  title: DnsResource
                  properties:
                    DnsResource:
                      $ref: '#/components/schemas/DnsResource'
                  required:
                    - DnsResource
              type: object
            Id:
              $ref: '#/components/schemas/Id'
            ResourceGatewayId:
              type: string
            Arn:
              minLength: 20
              pattern: ^arn:[a-z0-9f\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourceconfiguration/rcfg-[0-9a-z]{17}$
              type: string
              maxLength: 2048
            ResourceConfigurationAuthType:
              type: string
              enum:
                - NONE
                - AWS_IAM
            ResourceConfigurationGroupId:
              $ref: '#/components/schemas/Id'
            Tags:
              minItems: 0
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Name:
              minLength: 3
              pattern: ^(?!rcfg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
              type: string
              maxLength: 40
          x-stackQL-stringOnly: true
      x-title: CreateResourceConfigurationRequest
      type: object
      required: []
    CreateResourceGatewayRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            IpAddressType:
              type: string
              enum:
                - IPV4
                - IPV6
                - DUALSTACK
            VpcIdentifier:
              minLength: 5
              type: string
              maxLength: 50
            Id:
              minLength: 17
              pattern: ^((rgw-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}))$
              type: string
              maxLength: 2048
            Arn:
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:resourcegateway/rgw-[0-9a-z]{17}$
              type: string
              maxLength: 2048
            SubnetIds:
              uniqueItems: true
              description: The ID of one or more subnets in which to create an endpoint network interface.
              x-insertionOrder: false
              type: array
              items:
                relationshipRef:
                  typeName: AWS::EC2::Subnet
                  propertyPath: /properties/SubnetId
                type: string
            SecurityGroupIds:
              uniqueItems: true
              description: The ID of one or more security groups to associate with the endpoint network interface.
              x-insertionOrder: false
              type: array
              items:
                anyOf:
                  - relationshipRef:
                      typeName: AWS::EC2::SecurityGroup
                      propertyPath: /properties/GroupId
                  - relationshipRef:
                      typeName: AWS::EC2::SecurityGroup
                      propertyPath: /properties/Id
                  - relationshipRef:
                      typeName: AWS::EC2::VPC
                      propertyPath: /properties/DefaultSecurityGroup
                type: string
            Tags:
              minItems: 0
              maxItems: 50
              uniqueItems: true
              x-insertionOrder: false
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            Name:
              minLength: 3
              pattern: ^(?!rgw-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
              type: string
              maxLength: 40
          x-stackQL-stringOnly: true
      x-title: CreateResourceGatewayRequest
      type: object
      required: []
    CreateResourcePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            ResourceArn:
              type: string
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
              minLength: 20
              maxLength: 200
            Policy:
              type: object
          x-stackQL-stringOnly: true
      x-title: CreateResourcePolicyRequest
      type: object
      required: []
    CreateRuleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Action:
              $ref: '#/components/schemas/Action'
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/((rule-[0-9a-z]{17})|(default))$
            Id:
              type: string
              maxLength: 22
              minLength: 7
              pattern: ^((rule-[0-9a-z]{17})|(default))$
            ListenerIdentifier:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((listener-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}))$
            Match:
              $ref: '#/components/schemas/Match'
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Priority:
              type: integer
              maximum: 100
              minimum: 1
            ServiceIdentifier:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((svc-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}))$
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRuleRequest
      type: object
      required: []
    CreateServiceRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
            AuthType:
              type: string
              default: NONE
              enum:
                - NONE
                - AWS_IAM
            CreatedAt:
              type: string
            DnsEntry:
              $ref: '#/components/schemas/DnsEntry'
            Id:
              type: string
              maxLength: 21
              minLength: 21
              pattern: ^svc-[0-9a-z]{17}$
            LastUpdatedAt:
              type: string
            Name:
              type: string
              maxLength: 40
              minLength: 3
              pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Status:
              type: string
              enum:
                - ACTIVE
                - CREATE_IN_PROGRESS
                - DELETE_IN_PROGRESS
                - CREATE_FAILED
                - DELETE_FAILED
            CertificateArn:
              type: string
              maxLength: 2048
              pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
            CustomDomainName:
              type: string
              maxLength: 255
              minLength: 3
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateServiceRequest
      type: object
      required: []
    CreateServiceNetworkRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
            CreatedAt:
              type: string
            Id:
              type: string
              maxLength: 20
              minLength: 20
              pattern: ^sn-[0-9a-z]{17}$
            LastUpdatedAt:
              type: string
            Name:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            AuthType:
              type: string
              default: NONE
              enum:
                - NONE
                - AWS_IAM
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
            SharingConfig:
              $ref: '#/components/schemas/SharingConfig'
          x-stackQL-stringOnly: true
      x-title: CreateServiceNetworkRequest
      type: object
      required: []
    CreateServiceNetworkResourceAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
              minLength: 22
              maxLength: 22
              pattern: ^snra-[0-9a-f]{17}$
            Arn:
              type: string
              minLength: 22
              maxLength: 2048
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkresourceassociation/snra-[0-9a-f]{17}$
            ResourceConfigurationId:
              type: string
              minLength: 17
              maxLength: 2048
              pattern: ^rcfg-[0-9a-z]{17}$
            ServiceNetworkId:
              type: string
              minLength: 3
              maxLength: 2048
              pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateServiceNetworkResourceAssociationRequest
      type: object
      required: []
    CreateServiceNetworkServiceAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}$
            CreatedAt:
              type: string
            DnsEntry:
              $ref: '#/components/schemas/DnsEntry'
            Id:
              type: string
              maxLength: 2048
              minLength: 17
              pattern: ^snsa-[0-9a-z]{17}$
            ServiceNetworkArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
            ServiceNetworkId:
              type: string
              maxLength: 20
              minLength: 20
              pattern: ^sn-[0-9a-z]{17}$
            ServiceNetworkIdentifier:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
            ServiceNetworkName:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            ServiceArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
            ServiceId:
              type: string
              maxLength: 21
              minLength: 21
              pattern: ^svc-[0-9a-z]{17}$
            ServiceIdentifier:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
            ServiceName:
              type: string
              maxLength: 40
              minLength: 3
              pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Status:
              type: string
              enum:
                - CREATE_IN_PROGRESS
                - ACTIVE
                - DELETE_IN_PROGRESS
                - CREATE_FAILED
                - DELETE_FAILED
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateServiceNetworkServiceAssociationRequest
      type: object
      required: []
    CreateServiceNetworkVpcAssociationRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}$
            CreatedAt:
              type: string
            SecurityGroupIds:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              items:
                type: string
                maxLength: 200
                minLength: 0
                pattern: ^sg-(([0-9a-z]{8})|([0-9a-z]{17}))$
            Id:
              type: string
              maxLength: 22
              minLength: 22
              pattern: ^snva-[0-9a-z]{17}$
            ServiceNetworkArn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
            ServiceNetworkId:
              type: string
              maxLength: 20
              minLength: 20
              pattern: ^sn-[0-9a-z]{17}$
            ServiceNetworkIdentifier:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
            ServiceNetworkName:
              type: string
              maxLength: 63
              minLength: 3
              pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Status:
              type: string
              enum:
                - CREATE_IN_PROGRESS
                - ACTIVE
                - UPDATE_IN_PROGRESS
                - DELETE_IN_PROGRESS
                - CREATE_FAILED
                - DELETE_FAILED
            VpcId:
              type: string
              maxLength: 2048
              minLength: 5
              pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
            VpcIdentifier:
              type: string
              maxLength: 2048
              minLength: 5
              pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateServiceNetworkVpcAssociationRequest
      type: object
      required: []
    CreateTargetGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              maxLength: 2048
              minLength: 20
              pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}$
            Config:
              $ref: '#/components/schemas/TargetGroupConfig'
            CreatedAt:
              type: string
            Id:
              type: string
              maxLength: 20
              minLength: 20
              pattern: ^tg-[0-9a-z]{17}$
            LastUpdatedAt:
              type: string
            Name:
              type: string
              maxLength: 128
              minLength: 3
              pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
            Status:
              type: string
              enum:
                - CREATE_IN_PROGRESS
                - ACTIVE
                - DELETE_IN_PROGRESS
                - CREATE_FAILED
                - DELETE_FAILED
            Type:
              type: string
              enum:
                - IP
                - LAMBDA
                - INSTANCE
                - ALB
            Targets:
              type: array
              x-insertionOrder: false
              minItems: 0
              maxItems: 100
              default: []
              items:
                $ref: '#/components/schemas/Target'
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: true
              minItems: 0
              maxItems: 50
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateTargetGroupRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    access_log_subscriptions:
      name: access_log_subscriptions
      id: aws.vpclattice.access_log_subscriptions
      x-cfn-schema-name: AccessLogSubscription
      x-cfn-type-name: AWS::VpcLattice::AccessLogSubscription
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessLogSubscription&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AccessLogSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AccessLogSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AccessLogSubscription"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_log_subscriptions/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_log_subscriptions/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_log_subscriptions/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkLogType') as service_network_log_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DestinationArn') as destination_arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
                JSON_EXTRACT(detail.Properties, '$.ResourceIdentifier') as resource_identifier,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkLogType') as service_network_log_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND detail.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                  json_extract_path_text(Properties, 'ResourceId') as resource_id,
                  json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                  json_extract_path_text(Properties, 'ServiceNetworkLogType') as service_network_log_type,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DestinationArn') as destination_arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                    json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                    json_extract_path_text(detail.Properties, 'ResourceIdentifier') as resource_identifier,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkLogType') as service_network_log_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                    AND detail.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                    AND listing.region = 'us-east-1'
    access_log_subscriptions_list_only:
      name: access_log_subscriptions_list_only
      id: aws.vpclattice.access_log_subscriptions_list_only
      x-cfn-schema-name: AccessLogSubscription
      x-cfn-type-name: AWS::VpcLattice::AccessLogSubscription
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND region = 'us-east-1'
    access_log_subscription_tags:
      name: access_log_subscription_tags
      id: aws.vpclattice.access_log_subscription_tags
      x-cfn-schema-name: AccessLogSubscription
      x-cfn-type-name: AWS::VpcLattice::AccessLogSubscription
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(detail.Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkLogType') as service_network_log_type
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND detail.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(detail.Properties, 'ResourceId') as resource_id,
                json_extract_path_text(detail.Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(detail.Properties, 'ServiceNetworkLogType') as service_network_log_type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND detail.data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
                AND listing.region = 'us-east-1'
    auth_policies:
      name: auth_policies
      id: aws.vpclattice.auth_policies
      x-cfn-schema-name: AuthPolicy
      x-cfn-type-name: AWS::VpcLattice::AuthPolicy
      x-identifiers:
        - ResourceIdentifier
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AuthPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AuthPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AuthPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::AuthPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/auth_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/auth_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/auth_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
              AND data__Identifier = '<ResourceIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ResourceIdentifier') as resource_identifier,
                json_extract_path_text(Properties, 'Policy') as policy,
                json_extract_path_text(Properties, 'State') as state
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
                AND data__Identifier = '<ResourceIdentifier>'
                AND region = 'us-east-1'
    listeners:
      name: listeners
      id: aws.vpclattice.listeners
      x-cfn-schema-name: Listener
      x-cfn-type-name: AWS::VpcLattice::Listener
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Listener&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Listener"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/listeners/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultAction') as default_action,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Listener'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.DefaultAction') as default_action,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Port') as port,
                JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
                JSON_EXTRACT(detail.Properties, '$.ServiceArn') as service_arn,
                JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
                JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Listener'
                AND detail.data__TypeName = 'AWS::VpcLattice::Listener'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'DefaultAction') as default_action,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Port') as port,
                  json_extract_path_text(Properties, 'Protocol') as protocol,
                  json_extract_path_text(Properties, 'ServiceArn') as service_arn,
                  json_extract_path_text(Properties, 'ServiceId') as service_id,
                  json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Listener'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'DefaultAction') as default_action,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Port') as port,
                    json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                    json_extract_path_text(detail.Properties, 'ServiceArn') as service_arn,
                    json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                    json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::Listener'
                    AND detail.data__TypeName = 'AWS::VpcLattice::Listener'
                    AND listing.region = 'us-east-1'
    listeners_list_only:
      name: listeners_list_only
      id: aws.vpclattice.listeners_list_only
      x-cfn-schema-name: Listener
      x-cfn-type-name: AWS::VpcLattice::Listener
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Listener'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Listener'
                AND region = 'us-east-1'
    listener_tags:
      name: listener_tags
      id: aws.vpclattice.listener_tags
      x-cfn-schema-name: Listener
      x-cfn-type-name: AWS::VpcLattice::Listener
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.DefaultAction') as default_action,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Port') as port,
              JSON_EXTRACT(detail.Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(detail.Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::Listener'
              AND detail.data__TypeName = 'AWS::VpcLattice::Listener'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'DefaultAction') as default_action,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Port') as port,
                json_extract_path_text(detail.Properties, 'Protocol') as protocol,
                json_extract_path_text(detail.Properties, 'ServiceArn') as service_arn,
                json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Listener'
                AND detail.data__TypeName = 'AWS::VpcLattice::Listener'
                AND listing.region = 'us-east-1'
    resource_configurations:
      name: resource_configurations
      id: aws.vpclattice.resource_configurations
      x-cfn-schema-name: ResourceConfiguration
      x-cfn-type-name: AWS::VpcLattice::ResourceConfiguration
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourceConfiguration&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceConfiguration"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_configurations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_configurations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_configurations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationType') as resource_configuration_type,
              JSON_EXTRACT(Properties, '$.PortRanges') as port_ranges,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationDefinition') as resource_configuration_definition,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResourceGatewayId') as resource_gateway_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationAuthType') as resource_configuration_auth_type,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationGroupId') as resource_configuration_group_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
                JSON_EXTRACT(detail.Properties, '$.ProtocolType') as protocol_type,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationType') as resource_configuration_type,
                JSON_EXTRACT(detail.Properties, '$.PortRanges') as port_ranges,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationDefinition') as resource_configuration_definition,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ResourceGatewayId') as resource_gateway_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationAuthType') as resource_configuration_auth_type,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationGroupId') as resource_configuration_group_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                AND detail.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
                  json_extract_path_text(Properties, 'ProtocolType') as protocol_type,
                  json_extract_path_text(Properties, 'ResourceConfigurationType') as resource_configuration_type,
                  json_extract_path_text(Properties, 'PortRanges') as port_ranges,
                  json_extract_path_text(Properties, 'ResourceConfigurationDefinition') as resource_configuration_definition,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ResourceGatewayId') as resource_gateway_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ResourceConfigurationAuthType') as resource_configuration_auth_type,
                  json_extract_path_text(Properties, 'ResourceConfigurationGroupId') as resource_configuration_group_id,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
                    json_extract_path_text(detail.Properties, 'ProtocolType') as protocol_type,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationType') as resource_configuration_type,
                    json_extract_path_text(detail.Properties, 'PortRanges') as port_ranges,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationDefinition') as resource_configuration_definition,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ResourceGatewayId') as resource_gateway_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationAuthType') as resource_configuration_auth_type,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationGroupId') as resource_configuration_group_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                    AND listing.region = 'us-east-1'
    resource_configurations_list_only:
      name: resource_configurations_list_only
      id: aws.vpclattice.resource_configurations_list_only
      x-cfn-schema-name: ResourceConfiguration
      x-cfn-type-name: AWS::VpcLattice::ResourceConfiguration
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                AND region = 'us-east-1'
    resource_configuration_tags:
      name: resource_configuration_tags
      id: aws.vpclattice.resource_configuration_tags
      x-cfn-schema-name: ResourceConfiguration
      x-cfn-type-name: AWS::VpcLattice::ResourceConfiguration
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
              JSON_EXTRACT(detail.Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationType') as resource_configuration_type,
              JSON_EXTRACT(detail.Properties, '$.PortRanges') as port_ranges,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationDefinition') as resource_configuration_definition,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ResourceGatewayId') as resource_gateway_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationAuthType') as resource_configuration_auth_type,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationGroupId') as resource_configuration_group_id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
              AND detail.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AllowAssociationToSharableServiceNetwork') as allow_association_to_sharable_service_network,
                json_extract_path_text(detail.Properties, 'ProtocolType') as protocol_type,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationType') as resource_configuration_type,
                json_extract_path_text(detail.Properties, 'PortRanges') as port_ranges,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationDefinition') as resource_configuration_definition,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ResourceGatewayId') as resource_gateway_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationAuthType') as resource_configuration_auth_type,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationGroupId') as resource_configuration_group_id,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                AND detail.data__TypeName = 'AWS::VpcLattice::ResourceConfiguration'
                AND listing.region = 'us-east-1'
    resource_gateways:
      name: resource_gateways
      id: aws.vpclattice.resource_gateways
      x-cfn-schema-name: ResourceGateway
      x-cfn-type-name: AWS::VpcLattice::ResourceGateway
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourceGateway&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourceGateway"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_gateways/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_gateways/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_gateways/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.VpcIdentifier') as vpc_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourceGateway'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
                JSON_EXTRACT(detail.Properties, '$.VpcIdentifier') as vpc_identifier,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                AND detail.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                  json_extract_path_text(Properties, 'VpcIdentifier') as vpc_identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Name') as name
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                    json_extract_path_text(detail.Properties, 'VpcIdentifier') as vpc_identifier,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Name') as name
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                    AND listing.region = 'us-east-1'
    resource_gateways_list_only:
      name: resource_gateways_list_only
      id: aws.vpclattice.resource_gateways_list_only
      x-cfn-schema-name: ResourceGateway
      x-cfn-type-name: AWS::VpcLattice::ResourceGateway
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ResourceGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                AND region = 'us-east-1'
    resource_gateway_tags:
      name: resource_gateway_tags
      id: aws.vpclattice.resource_gateway_tags
      x-cfn-schema-name: ResourceGateway
      x-cfn-type-name: AWS::VpcLattice::ResourceGateway
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(detail.Properties, '$.VpcIdentifier') as vpc_identifier,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
              AND detail.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(detail.Properties, 'VpcIdentifier') as vpc_identifier,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                AND detail.data__TypeName = 'AWS::VpcLattice::ResourceGateway'
                AND listing.region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: aws.vpclattice.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-cfn-type-name: AWS::VpcLattice::ResourcePolicy
      x-identifiers:
        - ResourceArn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ResourcePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/resource_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
              AND data__Identifier = '<ResourceArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
                AND data__Identifier = '<ResourceArn>'
                AND region = 'us-east-1'
    rules:
      name: rules
      id: aws.vpclattice.rules
      x-cfn-schema-name: Rule
      x-cfn-type-name: AWS::VpcLattice::Rule
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Rule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Rule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Rule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Rule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/rules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/rules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/rules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ListenerIdentifier') as listener_identifier,
              JSON_EXTRACT(Properties, '$.Match') as _match,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Rule'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Action') as action,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ListenerIdentifier') as listener_identifier,
                JSON_EXTRACT(detail.Properties, '$.Match') as _match,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Priority') as priority,
                JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Rule'
                AND detail.data__TypeName = 'AWS::VpcLattice::Rule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Action') as action,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ListenerIdentifier') as listener_identifier,
                  json_extract_path_text(Properties, 'Match') as _match,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Priority') as priority,
                  json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Rule'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Action') as action,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ListenerIdentifier') as listener_identifier,
                    json_extract_path_text(detail.Properties, 'Match') as _match,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Priority') as priority,
                    json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::Rule'
                    AND detail.data__TypeName = 'AWS::VpcLattice::Rule'
                    AND listing.region = 'us-east-1'
    rules_list_only:
      name: rules_list_only
      id: aws.vpclattice.rules_list_only
      x-cfn-schema-name: Rule
      x-cfn-type-name: AWS::VpcLattice::Rule
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Rule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Rule'
                AND region = 'us-east-1'
    rule_tags:
      name: rule_tags
      id: aws.vpclattice.rule_tags
      x-cfn-schema-name: Rule
      x-cfn-type-name: AWS::VpcLattice::Rule
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Action') as action,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ListenerIdentifier') as listener_identifier,
              JSON_EXTRACT(detail.Properties, '$.Match') as _match,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Priority') as priority,
              JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::Rule'
              AND detail.data__TypeName = 'AWS::VpcLattice::Rule'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Action') as action,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ListenerIdentifier') as listener_identifier,
                json_extract_path_text(detail.Properties, 'Match') as _match,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Priority') as priority,
                json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Rule'
                AND detail.data__TypeName = 'AWS::VpcLattice::Rule'
                AND listing.region = 'us-east-1'
    services:
      name: services
      id: aws.vpclattice.services
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::VpcLattice::Service
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Service&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Service"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Service"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::Service"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/services/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.CustomDomainName') as custom_domain_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Service'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.DnsEntry') as dns_entry,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
                JSON_EXTRACT(detail.Properties, '$.CustomDomainName') as custom_domain_name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Service'
                AND detail.data__TypeName = 'AWS::VpcLattice::Service'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'AuthType') as auth_type,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'DnsEntry') as dns_entry,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                  json_extract_path_text(Properties, 'CustomDomainName') as custom_domain_name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Service'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'DnsEntry') as dns_entry,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                    json_extract_path_text(detail.Properties, 'CustomDomainName') as custom_domain_name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::Service'
                    AND detail.data__TypeName = 'AWS::VpcLattice::Service'
                    AND listing.region = 'us-east-1'
    services_list_only:
      name: services_list_only
      id: aws.vpclattice.services_list_only
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::VpcLattice::Service
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Service'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Service'
                AND region = 'us-east-1'
    service_tags:
      name: service_tags
      id: aws.vpclattice.service_tags
      x-cfn-schema-name: Service
      x-cfn-type-name: AWS::VpcLattice::Service
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(detail.Properties, '$.CustomDomainName') as custom_domain_name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::Service'
              AND detail.data__TypeName = 'AWS::VpcLattice::Service'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'DnsEntry') as dns_entry,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(detail.Properties, 'CustomDomainName') as custom_domain_name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::Service'
                AND detail.data__TypeName = 'AWS::VpcLattice::Service'
                AND listing.region = 'us-east-1'
    service_networks:
      name: service_networks
      id: aws.vpclattice.service_networks
      x-cfn-schema-name: ServiceNetwork
      x-cfn-type-name: AWS::VpcLattice::ServiceNetwork
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceNetwork&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetwork"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_networks/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_networks/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_networks/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SharingConfig') as sharing_config
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.SharingConfig') as sharing_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'AuthType') as auth_type,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'SharingConfig') as sharing_config
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'SharingConfig') as sharing_config
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                    AND listing.region = 'us-east-1'
    service_networks_list_only:
      name: service_networks_list_only
      id: aws.vpclattice.service_networks_list_only
      x-cfn-schema-name: ServiceNetwork
      x-cfn-type-name: AWS::VpcLattice::ServiceNetwork
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND region = 'us-east-1'
    service_network_tags:
      name: service_network_tags
      id: aws.vpclattice.service_network_tags
      x-cfn-schema-name: ServiceNetwork
      x-cfn-type-name: AWS::VpcLattice::ServiceNetwork
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(detail.Properties, '$.SharingConfig') as sharing_config
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'AuthType') as auth_type,
                json_extract_path_text(detail.Properties, 'SharingConfig') as sharing_config
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
                AND listing.region = 'us-east-1'
    service_network_resource_associations:
      name: service_network_resource_associations
      id: aws.vpclattice.service_network_resource_associations
      x-cfn-schema-name: ServiceNetworkResourceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkResourceAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceNetworkResourceAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkResourceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkResourceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkResourceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_network_resource_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_network_resource_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_network_resource_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ResourceConfigurationId') as resource_configuration_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationId') as resource_configuration_id,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ResourceConfigurationId') as resource_configuration_id,
                  json_extract_path_text(Properties, 'ServiceNetworkId') as service_network_id,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ResourceConfigurationId') as resource_configuration_id,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                    AND listing.region = 'us-east-1'
    service_network_resource_associations_list_only:
      name: service_network_resource_associations_list_only
      id: aws.vpclattice.service_network_resource_associations_list_only
      x-cfn-schema-name: ServiceNetworkResourceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkResourceAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                AND region = 'us-east-1'
    service_network_resource_association_tags:
      name: service_network_resource_association_tags
      id: aws.vpclattice.service_network_resource_association_tags
      x-cfn-schema-name: ServiceNetworkResourceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkResourceAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ResourceConfigurationId') as resource_configuration_id,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
              AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ResourceConfigurationId') as resource_configuration_id,
                json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkResourceAssociation'
                AND listing.region = 'us-east-1'
    service_network_service_associations:
      name: service_network_service_associations
      id: aws.vpclattice.service_network_service_associations
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkServiceAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceNetworkServiceAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkServiceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkServiceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkServiceAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_network_service_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_network_service_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_network_service_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.DnsEntry') as dns_entry,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkName') as service_network_name,
                JSON_EXTRACT(detail.Properties, '$.ServiceArn') as service_arn,
                JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
                JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
                JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'DnsEntry') as dns_entry,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ServiceNetworkArn') as service_network_arn,
                  json_extract_path_text(Properties, 'ServiceNetworkId') as service_network_id,
                  json_extract_path_text(Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                  json_extract_path_text(Properties, 'ServiceNetworkName') as service_network_name,
                  json_extract_path_text(Properties, 'ServiceArn') as service_arn,
                  json_extract_path_text(Properties, 'ServiceId') as service_id,
                  json_extract_path_text(Properties, 'ServiceIdentifier') as service_identifier,
                  json_extract_path_text(Properties, 'ServiceName') as service_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'DnsEntry') as dns_entry,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkName') as service_network_name,
                    json_extract_path_text(detail.Properties, 'ServiceArn') as service_arn,
                    json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                    json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                    json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                    AND listing.region = 'us-east-1'
    service_network_service_associations_list_only:
      name: service_network_service_associations_list_only
      id: aws.vpclattice.service_network_service_associations_list_only
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkServiceAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND region = 'us-east-1'
    service_network_service_association_tags:
      name: service_network_service_association_tags
      id: aws.vpclattice.service_network_service_association_tags
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkServiceAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.DnsEntry') as dns_entry,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(detail.Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(detail.Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(detail.Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(detail.Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'DnsEntry') as dns_entry,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id,
                json_extract_path_text(detail.Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                json_extract_path_text(detail.Properties, 'ServiceNetworkName') as service_network_name,
                json_extract_path_text(detail.Properties, 'ServiceArn') as service_arn,
                json_extract_path_text(detail.Properties, 'ServiceId') as service_id,
                json_extract_path_text(detail.Properties, 'ServiceIdentifier') as service_identifier,
                json_extract_path_text(detail.Properties, 'ServiceName') as service_name,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
                AND listing.region = 'us-east-1'
    service_network_vpc_associations:
      name: service_network_vpc_associations
      id: aws.vpclattice.service_network_vpc_associations
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkVpcAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ServiceNetworkVpcAssociation&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkVpcAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkVpcAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::ServiceNetworkVpcAssociation"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/service_network_vpc_associations/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/service_network_vpc_associations/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/service_network_vpc_associations/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcIdentifier') as vpc_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
                JSON_EXTRACT(detail.Properties, '$.ServiceNetworkName') as service_network_name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
                JSON_EXTRACT(detail.Properties, '$.VpcIdentifier') as vpc_identifier,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'ServiceNetworkArn') as service_network_arn,
                  json_extract_path_text(Properties, 'ServiceNetworkId') as service_network_id,
                  json_extract_path_text(Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                  json_extract_path_text(Properties, 'ServiceNetworkName') as service_network_name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id,
                  json_extract_path_text(Properties, 'VpcIdentifier') as vpc_identifier,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                    json_extract_path_text(detail.Properties, 'ServiceNetworkName') as service_network_name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                    json_extract_path_text(detail.Properties, 'VpcIdentifier') as vpc_identifier,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                    AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                    AND listing.region = 'us-east-1'
    service_network_vpc_associations_list_only:
      name: service_network_vpc_associations_list_only
      id: aws.vpclattice.service_network_vpc_associations_list_only
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkVpcAssociation
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND region = 'us-east-1'
    service_network_vpc_association_tags:
      name: service_network_vpc_association_tags
      id: aws.vpclattice.service_network_vpc_association_tags
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-cfn-type-name: AWS::VpcLattice::ServiceNetworkVpcAssociation
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(detail.Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(detail.Properties, '$.VpcIdentifier') as vpc_identifier
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'ServiceNetworkArn') as service_network_arn,
                json_extract_path_text(detail.Properties, 'ServiceNetworkId') as service_network_id,
                json_extract_path_text(detail.Properties, 'ServiceNetworkIdentifier') as service_network_identifier,
                json_extract_path_text(detail.Properties, 'ServiceNetworkName') as service_network_name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'VpcId') as vpc_id,
                json_extract_path_text(detail.Properties, 'VpcIdentifier') as vpc_identifier
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND detail.data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
                AND listing.region = 'us-east-1'
    target_groups:
      name: target_groups
      id: aws.vpclattice.target_groups
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::VpcLattice::TargetGroup
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__TargetGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::VpcLattice::TargetGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/target_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Config') as config,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Config') as config,
                JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Targets') as targets,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND detail.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Config') as config,
                  json_extract_path_text(Properties, 'CreatedAt') as created_at,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Targets') as targets,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Config') as config,
                    json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Targets') as targets,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                    AND detail.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                    AND listing.region = 'us-east-1'
    target_groups_list_only:
      name: target_groups_list_only
      id: aws.vpclattice.target_groups_list_only
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::VpcLattice::TargetGroup
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND region = 'us-east-1'
    target_group_tags:
      name: target_group_tags
      id: aws.vpclattice.target_group_tags
      x-cfn-schema-name: TargetGroup
      x-cfn-type-name: AWS::VpcLattice::TargetGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Config') as config,
              JSON_EXTRACT(detail.Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.Targets') as targets
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND detail.data__TypeName = 'AWS::VpcLattice::TargetGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Config') as config,
                json_extract_path_text(detail.Properties, 'CreatedAt') as created_at,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'Targets') as targets
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND detail.data__TypeName = 'AWS::VpcLattice::TargetGroup'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessLogSubscription&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessLogSubscription
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessLogSubscriptionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AuthPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAuthPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAuthPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Listener&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateListener
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateListenerRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourceConfiguration&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourceConfiguration
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourceConfigurationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourceGateway&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourceGateway
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourceGatewayRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ResourcePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResourcePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateResourcePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Rule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRuleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Service&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateService
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceNetwork&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceNetwork
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceNetworkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceNetworkResourceAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceNetworkResourceAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceNetworkResourceAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceNetworkServiceAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceNetworkServiceAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceNetworkServiceAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ServiceNetworkVpcAssociation&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateServiceNetworkVpcAssociation
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateServiceNetworkVpcAssociationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__TargetGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateTargetGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateTargetGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
