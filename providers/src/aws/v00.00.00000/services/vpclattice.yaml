openapi: 3.0.0
info:
  title: VpcLattice
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 1
          maxLength: 256
      required:
        - Key
        - Value
    AccessLogSubscription:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:accesslogsubscription/als-[0-9a-z]{17}$
        DestinationArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^als-[0-9a-z]{17}$
        ResourceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
        ResourceId:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn)|(svc))-[0-9a-z]{17}$
        ResourceIdentifier:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DestinationArn
      x-stackql-resource-name: access_log_subscription
      x-stackql-primaryIdentifier:
        - Arn
    AuthPolicy:
      type: object
      properties:
        ResourceIdentifier:
          type: string
          pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
          maxLength: 200
          minLength: 21
        Policy:
          type: object
        State:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
      required:
        - ResourceIdentifier
        - Policy
      x-stackql-resource-name: auth_policy
      x-stackql-primaryIdentifier:
        - ResourceIdentifier
    Forward:
      type: object
      properties:
        TargetGroups:
          type: array
          items:
            $ref: '#/components/schemas/WeightedTargetGroup'
          maxItems: 2
          minItems: 1
          x-insertionOrder: false
      required:
        - TargetGroups
      additionalProperties: false
    FixedResponse:
      type: object
      additionalProperties: false
      properties:
        StatusCode:
          type: integer
          maximum: 599
          minimum: 100
      required:
        - StatusCode
    DefaultAction:
      type: object
      additionalProperties: false
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
    WeightedTargetGroup:
      type: object
      properties:
        TargetGroupIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((tg-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}))$
        Weight:
          type: integer
          maximum: 999
          minimum: 1
      required:
        - TargetGroupIdentifier
      additionalProperties: false
    Listener:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}$
        DefaultAction:
          $ref: '#/components/schemas/DefaultAction'
        Id:
          type: string
          maxLength: 26
          minLength: 26
          pattern: ^listener-[0-9a-z]{17}$
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 21
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DefaultAction
        - Protocol
      x-stackql-resource-name: listener
      x-stackql-primaryIdentifier:
        - Arn
    ResourcePolicy:
      type: object
      properties:
        ResourceArn:
          type: string
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}$
          minLength: 20
          maxLength: 200
        Policy:
          type: object
      required:
        - ResourceArn
        - Policy
      x-stackql-resource-name: resource_policy
      x-stackql-primaryIdentifier:
        - ResourceArn
    HeaderMatch:
      type: object
      properties:
        Name:
          type: string
          maxLength: 40
          minLength: 1
        Match:
          $ref: '#/components/schemas/HeaderMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
        - Name
      additionalProperties: false
    HeaderMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
        Contains:
          type: string
          maxLength: 128
          minLength: 1
    HttpMatch:
      type: object
      properties:
        Method:
          type: string
          enum:
            - CONNECT
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - POST
            - PUT
            - TRACE
        PathMatch:
          $ref: '#/components/schemas/PathMatch'
        HeaderMatches:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/HeaderMatch'
          x-insertionOrder: false
      additionalProperties: false
    PathMatch:
      type: object
      additionalProperties: false
      properties:
        Match:
          $ref: '#/components/schemas/PathMatchType'
        CaseSensitive:
          type: boolean
          default: false
      required:
        - Match
    PathMatchType:
      type: object
      additionalProperties: false
      properties:
        Exact:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
        Prefix:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^\/[a-zA-Z0-9@:%_+.~#?&\/=-]*$
    Action:
      type: object
      x-title: Forward
      properties:
        Forward:
          $ref: '#/components/schemas/Forward'
        FixedResponse:
          $ref: '#/components/schemas/FixedResponse'
      required: []
      additionalProperties: false
    Match:
      type: object
      x-title: HttpMatch
      properties:
        HttpMatch:
          $ref: '#/components/schemas/HttpMatch'
      required:
        - HttpMatch
      additionalProperties: false
    Rule:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/Action'
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}/rule/((rule-[0-9a-z]{17})|(default))$
        Id:
          type: string
          maxLength: 22
          minLength: 7
          pattern: ^((rule-[0-9a-z]{17})|(default))$
        ListenerIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((listener-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}/listener/listener-[0-9a-z]{17}))$
        Match:
          $ref: '#/components/schemas/Match'
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Priority:
          type: integer
          maximum: 100
          minimum: 1
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:service/svc-[0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Action
        - Match
        - Priority
      x-stackql-resource-name: rule
      x-stackql-primaryIdentifier:
        - Arn
    DnsEntry:
      type: object
      additionalProperties: false
      properties:
        DomainName:
          type: string
        HostedZoneId:
          type: string
    Service:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - ACTIVE
            - CREATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        CertificateArn:
          type: string
          maxLength: 2048
          pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
        CustomDomainName:
          type: string
          maxLength: 255
          minLength: 3
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service
      x-stackql-primaryIdentifier:
        - Arn
    ServiceNetwork:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        AuthType:
          type: string
          default: NONE
          enum:
            - NONE
            - AWS_IAM
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network
      x-stackql-primaryIdentifier:
        - Arn
    ServiceNetworkServiceAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkserviceassociation/snsa-[0-9a-z]{17}$
        CreatedAt:
          type: string
        DnsEntry:
          $ref: '#/components/schemas/DnsEntry'
        Id:
          type: string
          maxLength: 2048
          minLength: 17
          pattern: ^snsa-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        ServiceArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}$
        ServiceId:
          type: string
          maxLength: 21
          minLength: 21
          pattern: ^svc-[0-9a-z]{17}$
        ServiceIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
        ServiceName:
          type: string
          maxLength: 40
          minLength: 3
          pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_service_association
      x-stackql-primaryIdentifier:
        - Arn
    ServiceNetworkVpcAssociation:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetworkvpcassociation/snva-[0-9a-z]{17}$
        CreatedAt:
          type: string
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          items:
            type: string
            maxLength: 200
            minLength: 0
            pattern: ^sg-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Id:
          type: string
          maxLength: 22
          minLength: 22
          pattern: ^snva-[0-9a-z]{17}$
        ServiceNetworkArn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}$
        ServiceNetworkId:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^sn-[0-9a-z]{17}$
        ServiceNetworkIdentifier:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
        ServiceNetworkName:
          type: string
          maxLength: 63
          minLength: 3
          pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - UPDATE_IN_PROGRESS
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        VpcId:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: service_network_vpc_association
      x-stackql-primaryIdentifier:
        - Arn
    HealthCheckConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ProtocolVersion:
          type: string
          enum:
            - HTTP1
            - HTTP2
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Path:
          type: string
          maxLength: 2048
          minLength: 0
          pattern: (^/[a-zA-Z0-9@:%_+.~#?&/=-]*$|(^$))
        HealthCheckIntervalSeconds:
          type: integer
          maximum: 300
          minimum: 5
        HealthCheckTimeoutSeconds:
          type: integer
          maximum: 120
          minimum: 1
        HealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        UnhealthyThresholdCount:
          type: integer
          maximum: 10
          minimum: 2
        Matcher:
          $ref: '#/components/schemas/Matcher'
    Matcher:
      type: object
      additionalProperties: false
      properties:
        HttpCode:
          type: string
          minLength: 3
          maxLength: 2000
          pattern: ^[0-9-,]+$
      required:
        - HttpCode
    TargetGroupConfig:
      type: object
      additionalProperties: false
      properties:
        Port:
          type: integer
          maximum: 65535
          minimum: 1
        Protocol:
          type: string
          enum:
            - HTTP
            - HTTPS
        ProtocolVersion:
          type: string
          default: HTTP1
          enum:
            - HTTP1
            - HTTP2
            - GRPC
        IpAddressType:
          type: string
          default: IPV4
          enum:
            - IPV4
            - IPV6
        VpcIdentifier:
          type: string
          maxLength: 2048
          minLength: 5
          pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
        HealthCheck:
          $ref: '#/components/schemas/HealthCheckConfig'
      required:
        - Port
        - Protocol
        - VpcIdentifier
    Target:
      type: object
      additionalProperties: false
      properties:
        Id:
          type: string
        Port:
          type: integer
          maximum: 65535
          minimum: 1
      required:
        - Id
    TargetGroup:
      type: object
      properties:
        Arn:
          type: string
          maxLength: 2048
          minLength: 20
          pattern: ^arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:targetgroup/tg-[0-9a-z]{17}$
        Config:
          $ref: '#/components/schemas/TargetGroupConfig'
        CreatedAt:
          type: string
        Id:
          type: string
          maxLength: 20
          minLength: 20
          pattern: ^tg-[0-9a-z]{17}$
        LastUpdatedAt:
          type: string
        Name:
          type: string
          maxLength: 128
          minLength: 3
          pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
        Status:
          type: string
          enum:
            - CREATE_IN_PROGRESS
            - ACTIVE
            - DELETE_IN_PROGRESS
            - CREATE_FAILED
            - DELETE_FAILED
        Type:
          type: string
          enum:
            - IP
            - LAMBDA
            - INSTANCE
            - ALB
        Targets:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 100
          default: []
          items:
            $ref: '#/components/schemas/Target'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          minItems: 0
          maxItems: 50
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Type
      x-stackql-resource-name: target_group
      x-stackql-primaryIdentifier:
        - Arn
  x-stackQL-resources:
    access_log_subscriptions:
      name: access_log_subscriptions
      id: aws.vpclattice.access_log_subscriptions
      x-cfn-schema-name: AccessLogSubscription
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
    access_log_subscription:
      name: access_log_subscription
      id: aws.vpclattice.access_log_subscription
      x-cfn-schema-name: AccessLogSubscription
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AccessLogSubscription'
    auth_policies:
      name: auth_policies
      id: aws.vpclattice.auth_policies
      x-cfn-schema-name: AuthPolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
    auth_policy:
      name: auth_policy
      id: aws.vpclattice.auth_policy
      x-cfn-schema-name: AuthPolicy
      x-type: get
      x-identifiers:
        - ResourceIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceIdentifier') as resource_identifier,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::AuthPolicy'
    listeners:
      name: listeners
      id: aws.vpclattice.listeners
      x-cfn-schema-name: Listener
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Listener'
    listener:
      name: listener
      id: aws.vpclattice.listener
      x-cfn-schema-name: Listener
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultAction.Forward') as default_action_forward,
              JSON_EXTRACT(Properties, '$.DefaultAction.FixedResponse') as default_action_fixed_response,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Listener'
    resource_policies:
      name: resource_policies
      id: aws.vpclattice.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
    resource_policy:
      name: resource_policy
      id: aws.vpclattice.resource_policy
      x-cfn-schema-name: ResourcePolicy
      x-type: get
      x-identifiers:
        - ResourceArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ResourcePolicy'
    rules:
      name: rules
      id: aws.vpclattice.rules
      x-cfn-schema-name: Rule
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Rule'
    rule:
      name: rule
      id: aws.vpclattice.rule
      x-cfn-schema-name: Rule
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Action.Forward') as action_forward,
              JSON_EXTRACT(Properties, '$.Action.FixedResponse') as action_fixed_response,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ListenerIdentifier') as listener_identifier,
              JSON_EXTRACT(Properties, '$.Match.HttpMatch') as match_http_match,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Rule'
    services:
      name: services
      id: aws.vpclattice.services
      x-cfn-schema-name: Service
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::Service'
    service:
      name: service
      id: aws.vpclattice.service
      x-cfn-schema-name: Service
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry.DomainName') as dns_entry_domain_name,
              JSON_EXTRACT(Properties, '$.DnsEntry.HostedZoneId') as dns_entry_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.CustomDomainName') as custom_domain_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::Service'
    service_networks:
      name: service_networks
      id: aws.vpclattice.service_networks
      x-cfn-schema-name: ServiceNetwork
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
    service_network:
      name: service_network
      id: aws.vpclattice.service_network
      x-cfn-schema-name: ServiceNetwork
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetwork'
    service_network_service_associations:
      name: service_network_service_associations
      id: aws.vpclattice.service_network_service_associations
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
    service_network_service_association:
      name: service_network_service_association
      id: aws.vpclattice.service_network_service_association
      x-cfn-schema-name: ServiceNetworkServiceAssociation
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.DnsEntry.DomainName') as dns_entry_domain_name,
              JSON_EXTRACT(Properties, '$.DnsEntry.HostedZoneId') as dns_entry_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.ServiceArn') as service_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.ServiceIdentifier') as service_identifier,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkServiceAssociation'
    service_network_vpc_associations:
      name: service_network_vpc_associations
      id: aws.vpclattice.service_network_vpc_associations
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
    service_network_vpc_association:
      name: service_network_vpc_association
      id: aws.vpclattice.service_network_vpc_association
      x-cfn-schema-name: ServiceNetworkVpcAssociation
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkArn') as service_network_arn,
              JSON_EXTRACT(Properties, '$.ServiceNetworkId') as service_network_id,
              JSON_EXTRACT(Properties, '$.ServiceNetworkIdentifier') as service_network_identifier,
              JSON_EXTRACT(Properties, '$.ServiceNetworkName') as service_network_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpcIdentifier') as vpc_identifier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::ServiceNetworkVpcAssociation'
    target_groups:
      name: target_groups
      id: aws.vpclattice.target_groups
      x-cfn-schema-name: TargetGroup
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
    target_group:
      name: target_group
      id: aws.vpclattice.target_group
      x-cfn-schema-name: TargetGroup
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Config.Port') as config_port,
              JSON_EXTRACT(Properties, '$.Config.Protocol') as config_protocol,
              JSON_EXTRACT(Properties, '$.Config.ProtocolVersion') as config_protocol_version,
              JSON_EXTRACT(Properties, '$.Config.IpAddressType') as config_ip_address_type,
              JSON_EXTRACT(Properties, '$.Config.VpcIdentifier') as config_vpc_identifier,
              JSON_EXTRACT(Properties, '$.Config.HealthCheck') as config_health_check,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::VpcLattice::TargetGroup'
