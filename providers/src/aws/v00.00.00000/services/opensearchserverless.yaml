openapi: 3.0.0
info:
  title: OpenSearchServerless
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    AccessPolicyType:
      type: string
      description: The possible types for the access policy
      enum:
        - data
    AccessPolicy:
      type: object
      properties:
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the policy
        Type:
          $ref: '#/components/schemas/AccessPolicyType'
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: The description of the policy
        Policy:
          type: string
          minLength: 1
          maxLength: 20480
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
          description: The JSON policy document that is the content for the policy
      required:
        - Type
        - Name
        - Policy
      x-stackql-resource-name: access_policy
      description: Amazon OpenSearchServerless access policy resource
      x-type-name: AWS::OpenSearchServerless::AccessPolicy
      x-stackql-primary-identifier:
        - Type
        - Name
      x-create-only-properties:
        - Type
        - Name
      x-required-properties:
        - Type
        - Name
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - aoss:CreateAccessPolicy
          - aoss:GetAccessPolicy
        read:
          - aoss:GetAccessPolicy
        update:
          - aoss:UpdateAccessPolicy
          - aoss:GetAccessPolicy
        delete:
          - aoss:DeleteAccessPolicy
          - aoss:GetAccessPolicy
        list:
          - aoss:ListAccessPolicies
    Tag:
      type: object
      description: A key-value pair metadata associated with resource
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
          description: The key in the key-value pair
        Value:
          type: string
          maxLength: 256
          minLength: 0
          description: The value in the key-value pair
      required:
        - Key
        - Value
      additionalProperties: false
    CollectionType:
      type: string
      description: The possible types for the collection
      enum:
        - SEARCH
        - TIMESERIES
        - VECTORSEARCH
    StandbyReplicas:
      type: string
      description: The possible standby replicas for the collection
      enum:
        - ENABLED
        - DISABLED
    Collection:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          description: The description of the collection
        Id:
          type: string
          maxLength: 40
          minLength: 3
          description: The identifier of the collection
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: |
            The name of the collection.

            The name must meet the following criteria:
            Unique to your account and AWS Region
            Starts with a lowercase letter
            Contains only lowercase letters a-z, the numbers 0-9 and the hyphen (-)
            Contains between 3 and 32 characters
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 50
          minItems: 0
          x-insertionOrder: false
          description: List of tags to be added to the resource
        Arn:
          description: The Amazon Resource Name (ARN) of the collection.
          type: string
        CollectionEndpoint:
          description: The endpoint for the collection.
          type: string
        DashboardEndpoint:
          description: The OpenSearch Dashboards endpoint for the collection.
          type: string
        Type:
          $ref: '#/components/schemas/CollectionType'
        StandbyReplicas:
          $ref: '#/components/schemas/StandbyReplicas'
      required:
        - Name
      x-stackql-resource-name: collection
      description: Amazon OpenSearchServerless collection resource
      x-type-name: AWS::OpenSearchServerless::Collection
      x-stackql-primary-identifier:
        - Id
      x-stackql-additional-identifiers:
        - - Name
        - - Arn
      x-create-only-properties:
        - Name
        - Tags
        - Type
      x-write-only-properties:
        - Tags
      x-read-only-properties:
        - Id
        - Arn
        - CollectionEndpoint
        - DashboardEndpoint
      x-required-properties:
        - Name
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
      x-required-permissions:
        create:
          - aoss:CreateCollection
          - aoss:BatchGetCollection
          - iam:CreateServiceLinkedRole
        delete:
          - aoss:DeleteCollection
          - aoss:BatchGetCollection
        list:
          - aoss:ListCollections
        read:
          - aoss:BatchGetCollection
        update:
          - aoss:UpdateCollection
          - aoss:BatchGetCollection
    LifecyclePolicyType:
      type: string
      description: The type of lifecycle policy
      enum:
        - retention
    LifecyclePolicy:
      type: object
      properties:
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]+$
          description: The name of the policy
        Type:
          $ref: '#/components/schemas/LifecyclePolicyType'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
          description: The description of the policy
        Policy:
          type: string
          minLength: 1
          maxLength: 20480
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
          description: The JSON policy document that is the content for the policy
      required:
        - Type
        - Name
        - Policy
      x-stackql-resource-name: lifecycle_policy
      description: Amazon OpenSearchServerless lifecycle policy resource
      x-type-name: AWS::OpenSearchServerless::LifecyclePolicy
      x-stackql-primary-identifier:
        - Type
        - Name
      x-create-only-properties:
        - Type
        - Name
      x-required-properties:
        - Type
        - Name
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - aoss:CreateLifecyclePolicy
        read:
          - aoss:BatchGetLifecyclePolicy
        update:
          - aoss:UpdateLifecyclePolicy
          - aoss:BatchGetLifecyclePolicy
        delete:
          - aoss:DeleteLifecyclePolicy
        list:
          - aoss:ListLifecyclePolicies
    SamlConfigOptions:
      type: object
      description: Describes saml options in form of key value map
      properties:
        Metadata:
          type: string
          description: The XML saml provider metadata document that you want to use
          maxLength: 51200
          minLength: 1
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
        UserAttribute:
          type: string
          description: Custom attribute for this saml integration
          maxLength: 2048
          minLength: 1
          pattern: '[\w+=,.@-]+'
        GroupAttribute:
          type: string
          description: Group attribute for this saml integration
          maxLength: 2048
          minLength: 1
          pattern: '[\w+=,.@-]+'
        SessionTimeout:
          type: integer
          description: Defines the session timeout in minutes
      required:
        - Metadata
      additionalProperties: false
    SecurityConfigType:
      type: string
      description: Config type for security config
      enum:
        - saml
        - iamidentitycenter
    IamIdentityCenterInstanceArn:
      type: string
      description: The ARN of the IAM Identity Center instance used to integrate with OpenSearch Serverless
    IamIdentityCenterApplicationArn:
      type: string
      description: The ARN of the IAM Identity Center application used to integrate with OpenSearch Serverless
    IamIdentityCenterUserAttribute:
      type: string
      description: User attribute for this IAM Identity Center integration
    IamIdentityCenterGroupAttribute:
      type: string
      description: Group attribute for this IAM Identity Center integration
    IamIdentityCenterConfigOptions:
      type: object
      description: Describes IAM Identity Center options for an OpenSearch Serverless security configuration in the form of a key-value map
      properties:
        InstanceArn:
          $ref: '#/components/schemas/IamIdentityCenterInstanceArn'
        ApplicationArn:
          $ref: '#/components/schemas/IamIdentityCenterApplicationArn'
        ApplicationName:
          type: string
          description: The name of the IAM Identity Center application used to integrate with OpenSearch Serverless
        ApplicationDescription:
          type: string
          description: The description of the IAM Identity Center application used to integrate with OpenSearch Serverless
        UserAttribute:
          $ref: '#/components/schemas/IamIdentityCenterUserAttribute'
        GroupAttribute:
          $ref: '#/components/schemas/IamIdentityCenterGroupAttribute'
      required:
        - InstanceArn
      additionalProperties: false
    SecurityConfig:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: Security config description
        Id:
          type: string
          maxLength: 100
          minLength: 1
          description: The identifier of the security config
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The friendly name of the security config
        SamlOptions:
          $ref: '#/components/schemas/SamlConfigOptions'
        IamIdentityCenterOptions:
          $ref: '#/components/schemas/IamIdentityCenterConfigOptions'
        Type:
          $ref: '#/components/schemas/SecurityConfigType'
      x-stackql-resource-name: security_config
      description: Amazon OpenSearchServerless security config resource
      x-type-name: AWS::OpenSearchServerless::SecurityConfig
      x-stackql-primary-identifier:
        - Id
      x-stackql-additional-identifiers:
        - - Name
      x-create-only-properties:
        - Type
        - Name
        - IamIdentityCenterOptions/InstanceArn
      x-write-only-properties:
        - Name
      x-read-only-properties:
        - Id
        - IamIdentityCenterOptions/ApplicationArn
        - IamIdentityCenterOptions/ApplicationName
        - IamIdentityCenterOptions/ApplicationDescription
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - aoss:CreateSecurityConfig
          - sso:CreateApplication
          - sso:ListApplications
          - sso:DeleteApplication
          - sso:PutApplicationAssignmentConfiguration
          - sso:PutApplicationAuthenticationMethod
          - sso:PutApplicationGrant
        read:
          - aoss:GetSecurityConfig
        update:
          - aoss:GetSecurityConfig
          - aoss:UpdateSecurityConfig
        delete:
          - aoss:DeleteSecurityConfig
          - sso:ListApplicationAssignments
          - sso:DeleteApplicationAssignment
          - sso:DeleteApplication
        list:
          - aoss:ListSecurityConfigs
    SecurityPolicyType:
      type: string
      description: The possible types for the network policy
      enum:
        - encryption
        - network
    SecurityPolicy:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: The description of the policy
        Policy:
          type: string
          maxLength: 20480
          minLength: 1
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
          description: The JSON policy document that is the content for the policy
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the policy
        Type:
          $ref: '#/components/schemas/SecurityPolicyType'
      required:
        - Type
        - Name
        - Policy
      x-stackql-resource-name: security_policy
      description: Amazon OpenSearchServerless security policy resource
      x-type-name: AWS::OpenSearchServerless::SecurityPolicy
      x-stackql-primary-identifier:
        - Type
        - Name
      x-create-only-properties:
        - Type
        - Name
      x-required-properties:
        - Type
        - Name
        - Policy
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - aoss:GetSecurityPolicy
          - aoss:CreateSecurityPolicy
          - kms:DescribeKey
          - kms:CreateGrant
        update:
          - aoss:GetSecurityPolicy
          - aoss:UpdateSecurityPolicy
          - kms:DescribeKey
          - kms:CreateGrant
        delete:
          - aoss:GetSecurityPolicy
          - aoss:DeleteSecurityPolicy
        list:
          - aoss:ListSecurityPolicies
        read:
          - aoss:GetSecurityPolicy
          - kms:DescribeKey
    VpcEndpoint:
      type: object
      properties:
        Id:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^vpce-[0-9a-z]*$
          description: The identifier of the VPC Endpoint
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the VPC Endpoint
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 128
            minLength: 1
            pattern: ^[\w+\-]+$
          maxItems: 5
          minItems: 1
          description: The ID of one or more security groups to associate with the endpoint network interface
        SubnetIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 32
            minLength: 1
            pattern: ^subnet-([0-9a-f]{8}|[0-9a-f]{17})$
          maxItems: 6
          minItems: 1
          description: The ID of one or more subnets in which to create an endpoint network interface
        VpcId:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^vpc-[0-9a-z]*$
          description: The ID of the VPC in which the endpoint will be used.
      required:
        - Name
        - VpcId
        - SubnetIds
      x-stackql-resource-name: vpc_endpoint
      description: Amazon OpenSearchServerless vpc endpoint resource
      x-type-name: AWS::OpenSearchServerless::VpcEndpoint
      x-stackql-primary-identifier:
        - Id
      x-stackql-additional-identifiers:
        - - Name
      x-create-only-properties:
        - Name
        - VpcId
      x-read-only-properties:
        - Id
      x-required-properties:
        - Name
        - VpcId
        - SubnetIds
      x-tagging:
        taggable: false
        tagOnCreate: false
        tagUpdatable: false
        cloudFormationSystemTags: false
      x-required-permissions:
        create:
          - aoss:BatchGetVpcEndpoint
          - aoss:CreateVpcEndpoint
          - ec2:CreateVpcEndpoint
          - ec2:DeleteVpcEndPoints
          - ec2:DescribeVpcEndpoints
          - ec2:ModifyVpcEndPoint
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:CreateTags
          - route53:ChangeResourceRecordSets
          - route53:GetChange
          - route53:GetHostedZone
          - route53:ListResourceRecordSets
          - route53:ListHostedZonesByName
          - route53:CreateHostedZone
          - route53:ListHostedZonesByVPC
          - route53:AssociateVPCWithHostedZone
        read:
          - aoss:BatchGetVpcEndpoint
          - ec2:DescribeVpcEndpoints
        update:
          - aoss:BatchGetVpcEndpoint
          - aoss:UpdateVpcEndpoint
          - ec2:CreateVpcEndpoint
          - ec2:DeleteVpcEndPoints
          - ec2:DescribeVpcEndpoints
          - ec2:ModifyVpcEndPoint
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:CreateTags
          - route53:ChangeResourceRecordSets
          - route53:GetChange
          - route53:GetHostedZone
          - route53:ListResourceRecordSets
          - route53:ListHostedZonesByName
          - route53:CreateHostedZone
          - route53:ListHostedZonesByVPC
          - route53:AssociateVPCWithHostedZone
        delete:
          - aoss:BatchGetVpcEndpoint
          - aoss:DeleteVpcEndpoint
          - ec2:DeleteVpcEndPoints
          - ec2:DescribeVpcEndpoints
          - ec2:ModifyVpcEndPoint
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:CreateTags
          - route53:ChangeResourceRecordSets
          - route53:DeleteHostedZone
          - route53:GetChange
          - route53:GetHostedZone
          - route53:ListResourceRecordSets
          - route53:ListHostedZonesByName
          - route53:ListHostedZonesByVPC
          - route53:AssociateVPCWithHostedZone
        list:
          - aoss:ListVpcEndpoints
          - ec2:DescribeVpcEndpoints
    CreateAccessPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]{2,31}$
              description: The name of the policy
            Type:
              $ref: '#/components/schemas/AccessPolicyType'
            Description:
              type: string
              maxLength: 1000
              minLength: 1
              description: The description of the policy
            Policy:
              type: string
              minLength: 1
              maxLength: 20480
              pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
              description: The JSON policy document that is the content for the policy
          x-stackQL-stringOnly: true
      x-title: CreateAccessPolicyRequest
      type: object
      required: []
    CreateCollectionRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              maxLength: 1000
              description: The description of the collection
            Id:
              type: string
              maxLength: 40
              minLength: 3
              description: The identifier of the collection
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]{2,31}$
              description: |
                The name of the collection.

                The name must meet the following criteria:
                Unique to your account and AWS Region
                Starts with a lowercase letter
                Contains only lowercase letters a-z, the numbers 0-9 and the hyphen (-)
                Contains between 3 and 32 characters
            Tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              maxItems: 50
              minItems: 0
              x-insertionOrder: false
              description: List of tags to be added to the resource
            Arn:
              description: The Amazon Resource Name (ARN) of the collection.
              type: string
            CollectionEndpoint:
              description: The endpoint for the collection.
              type: string
            DashboardEndpoint:
              description: The OpenSearch Dashboards endpoint for the collection.
              type: string
            Type:
              $ref: '#/components/schemas/CollectionType'
            StandbyReplicas:
              $ref: '#/components/schemas/StandbyReplicas'
          x-stackQL-stringOnly: true
      x-title: CreateCollectionRequest
      type: object
      required: []
    CreateLifecyclePolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]+$
              description: The name of the policy
            Type:
              $ref: '#/components/schemas/LifecyclePolicyType'
            Description:
              type: string
              maxLength: 1000
              minLength: 0
              description: The description of the policy
            Policy:
              type: string
              minLength: 1
              maxLength: 20480
              pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
              description: The JSON policy document that is the content for the policy
          x-stackQL-stringOnly: true
      x-title: CreateLifecyclePolicyRequest
      type: object
      required: []
    CreateSecurityConfigRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              maxLength: 1000
              minLength: 1
              description: Security config description
            Id:
              type: string
              maxLength: 100
              minLength: 1
              description: The identifier of the security config
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]{2,31}$
              description: The friendly name of the security config
            SamlOptions:
              $ref: '#/components/schemas/SamlConfigOptions'
            IamIdentityCenterOptions:
              $ref: '#/components/schemas/IamIdentityCenterConfigOptions'
            Type:
              $ref: '#/components/schemas/SecurityConfigType'
          x-stackQL-stringOnly: true
      x-title: CreateSecurityConfigRequest
      type: object
      required: []
    CreateSecurityPolicyRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              type: string
              maxLength: 1000
              minLength: 1
              description: The description of the policy
            Policy:
              type: string
              maxLength: 20480
              minLength: 1
              pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
              description: The JSON policy document that is the content for the policy
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]{2,31}$
              description: The name of the policy
            Type:
              $ref: '#/components/schemas/SecurityPolicyType'
          x-stackQL-stringOnly: true
      x-title: CreateSecurityPolicyRequest
      type: object
      required: []
    CreateVpcEndpointRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Id:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^vpce-[0-9a-z]*$
              description: The identifier of the VPC Endpoint
            Name:
              type: string
              maxLength: 32
              minLength: 3
              pattern: ^[a-z][a-z0-9-]{2,31}$
              description: The name of the VPC Endpoint
            SecurityGroupIds:
              type: array
              x-insertionOrder: false
              items:
                type: string
                maxLength: 128
                minLength: 1
                pattern: ^[\w+\-]+$
              maxItems: 5
              minItems: 1
              description: The ID of one or more security groups to associate with the endpoint network interface
            SubnetIds:
              type: array
              x-insertionOrder: false
              items:
                type: string
                maxLength: 32
                minLength: 1
                pattern: ^subnet-([0-9a-f]{8}|[0-9a-f]{17})$
              maxItems: 6
              minItems: 1
              description: The ID of one or more subnets in which to create an endpoint network interface
            VpcId:
              type: string
              maxLength: 255
              minLength: 1
              pattern: ^vpc-[0-9a-z]*$
              description: The ID of the VPC in which the endpoint will be used.
          x-stackQL-stringOnly: true
      x-title: CreateVpcEndpointRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    access_policies:
      name: access_policies
      id: aws.opensearchserverless.access_policies
      x-cfn-schema-name: AccessPolicy
      x-cfn-type-name: AWS::OpenSearchServerless::AccessPolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__AccessPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::AccessPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/access_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
              AND data__Identifier = '<Type>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Policy') as policy
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                  AND data__Identifier = '<Type>|<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Policy') as policy
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                    AND listing.region = 'us-east-1'
    access_policies_list_only:
      name: access_policies_list_only
      id: aws.opensearchserverless.access_policies_list_only
      x-cfn-schema-name: AccessPolicy
      x-cfn-type-name: AWS::OpenSearchServerless::AccessPolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
                AND region = 'us-east-1'
    collections:
      name: collections
      id: aws.opensearchserverless.collections
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::OpenSearchServerless::Collection
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Collection&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::Collection"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/collections/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/collections/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/collections/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CollectionEndpoint') as collection_endpoint,
              JSON_EXTRACT(Properties, '$.DashboardEndpoint') as dashboard_endpoint,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.StandbyReplicas') as standby_replicas
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.CollectionEndpoint') as collection_endpoint,
                JSON_EXTRACT(detail.Properties, '$.DashboardEndpoint') as dashboard_endpoint,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.StandbyReplicas') as standby_replicas
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'CollectionEndpoint') as collection_endpoint,
                  json_extract_path_text(Properties, 'DashboardEndpoint') as dashboard_endpoint,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'StandbyReplicas') as standby_replicas
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'CollectionEndpoint') as collection_endpoint,
                    json_extract_path_text(detail.Properties, 'DashboardEndpoint') as dashboard_endpoint,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'StandbyReplicas') as standby_replicas
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                    AND listing.region = 'us-east-1'
    collections_list_only:
      name: collections_list_only
      id: aws.opensearchserverless.collections_list_only
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::OpenSearchServerless::Collection
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
                AND region = 'us-east-1'
    collection_tags:
      name: collection_tags
      id: aws.opensearchserverless.collection_tags
      x-cfn-schema-name: Collection
      x-cfn-type-name: AWS::OpenSearchServerless::Collection
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.CollectionEndpoint') as collection_endpoint,
              JSON_EXTRACT(detail.Properties, '$.DashboardEndpoint') as dashboard_endpoint,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.StandbyReplicas') as standby_replicas
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::Collection'
              AND detail.data__TypeName = 'AWS::OpenSearchServerless::Collection'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'CollectionEndpoint') as collection_endpoint,
                json_extract_path_text(detail.Properties, 'DashboardEndpoint') as dashboard_endpoint,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'StandbyReplicas') as standby_replicas
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::Collection'
                AND listing.region = 'us-east-1'
    lifecycle_policies:
      name: lifecycle_policies
      id: aws.opensearchserverless.lifecycle_policies
      x-cfn-schema-name: LifecyclePolicy
      x-cfn-type-name: AWS::OpenSearchServerless::LifecyclePolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__LifecyclePolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::LifecyclePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::LifecyclePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::LifecyclePolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/lifecycle_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/lifecycle_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/lifecycle_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
              AND data__Identifier = '<Type>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Policy') as policy
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                  AND data__Identifier = '<Type>|<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Policy') as policy
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                    AND listing.region = 'us-east-1'
    lifecycle_policies_list_only:
      name: lifecycle_policies_list_only
      id: aws.opensearchserverless.lifecycle_policies_list_only
      x-cfn-schema-name: LifecyclePolicy
      x-cfn-type-name: AWS::OpenSearchServerless::LifecyclePolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::LifecyclePolicy'
                AND region = 'us-east-1'
    security_configs:
      name: security_configs
      id: aws.opensearchserverless.security_configs
      x-cfn-schema-name: SecurityConfig
      x-cfn-type-name: AWS::OpenSearchServerless::SecurityConfig
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityConfig&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityConfig"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_configs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_configs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/security_configs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SamlOptions') as saml_options,
              JSON_EXTRACT(Properties, '$.IamIdentityCenterOptions') as iam_identity_center_options,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.SamlOptions') as saml_options,
                JSON_EXTRACT(detail.Properties, '$.IamIdentityCenterOptions') as iam_identity_center_options,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'SamlOptions') as saml_options,
                  json_extract_path_text(Properties, 'IamIdentityCenterOptions') as iam_identity_center_options,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'SamlOptions') as saml_options,
                    json_extract_path_text(detail.Properties, 'IamIdentityCenterOptions') as iam_identity_center_options,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                    AND listing.region = 'us-east-1'
    security_configs_list_only:
      name: security_configs_list_only
      id: aws.opensearchserverless.security_configs_list_only
      x-cfn-schema-name: SecurityConfig
      x-cfn-type-name: AWS::OpenSearchServerless::SecurityConfig
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
                AND region = 'us-east-1'
    security_policies:
      name: security_policies
      id: aws.opensearchserverless.security_policies
      x-cfn-schema-name: SecurityPolicy
      x-cfn-type-name: AWS::OpenSearchServerless::SecurityPolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__SecurityPolicy&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::SecurityPolicy"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/security_policies/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/security_policies/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/security_policies/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
              AND data__Identifier = '<Type>|<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Policy') as policy,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Type') as type
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Policy') as policy,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Type') as type
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                  AND data__Identifier = '<Type>|<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Policy') as policy,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Type') as type
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                    AND listing.region = 'us-east-1'
    security_policies_list_only:
      name: security_policies_list_only
      id: aws.opensearchserverless.security_policies_list_only
      x-cfn-schema-name: SecurityPolicy
      x-cfn-type-name: AWS::OpenSearchServerless::SecurityPolicy
      x-identifiers:
        - Type
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
                AND region = 'us-east-1'
    vpc_endpoints:
      name: vpc_endpoints
      id: aws.opensearchserverless.vpc_endpoints
      x-cfn-schema-name: VpcEndpoint
      x-cfn-type-name: AWS::OpenSearchServerless::VpcEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__VpcEndpoint&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::VpcEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::VpcEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::OpenSearchServerless::VpcEndpoint"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/vpc_endpoints/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.SecurityGroupIds') as security_group_ids,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.VpcId') as vpc_id
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                AND detail.data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'VpcId') as vpc_id
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                  AND data__Identifier = '<Id>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'SecurityGroupIds') as security_group_ids,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'VpcId') as vpc_id
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                    AND detail.data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                    AND listing.region = 'us-east-1'
    vpc_endpoints_list_only:
      name: vpc_endpoints_list_only
      id: aws.opensearchserverless.vpc_endpoints_list_only
      x-cfn-schema-name: VpcEndpoint
      x-cfn-type-name: AWS::OpenSearchServerless::VpcEndpoint
      x-identifiers:
        - Id
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
                AND region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__AccessPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateAccessPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateAccessPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Collection&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCollection
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__LifecyclePolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateLifecyclePolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateLifecyclePolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityConfig&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityConfig
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityConfigRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__SecurityPolicy&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSecurityPolicy
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateSecurityPolicyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__VpcEndpoint&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateVpcEndpoint
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateVpcEndpointRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
