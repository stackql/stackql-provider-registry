openapi: 3.0.0
info:
  title: OpenSearchServerless
  version: 1.0.0
paths: {}
components:
  schemas:
    AccessPolicyType:
      type: string
      description: The possible types for the access policy
      enum:
        - data
    AccessPolicy:
      type: object
      properties:
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the policy
        Type:
          $ref: '#/components/schemas/AccessPolicyType'
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: The description of the policy
        Policy:
          type: string
          minLength: 1
          maxLength: 20480
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
          description: The JSON policy document that is the content for the policy
      required:
        - Type
        - Name
        - Policy
      x-stackql-resource-name: access_policy
      x-stackql-primaryIdentifier:
        - Type
        - Name
    Tag:
      type: object
      description: A key-value pair metadata associated with resource
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
          description: The key in the key-value pair
        Value:
          type: string
          maxLength: 256
          minLength: 0
          description: The value in the key-value pair
      required:
        - Key
        - Value
      additionalProperties: false
    CollectionType:
      type: string
      description: The possible types for the collection
      enum:
        - SEARCH
        - TIMESERIES
    Collection:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          description: The description of the collection
        Id:
          type: string
          maxLength: 40
          minLength: 3
          description: The identifier of the collection
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: |
            The name of the collection.

            The name must meet the following criteria:
            Unique to your account and AWS Region
            Starts with a lowercase letter
            Contains only lowercase letters a-z, the numbers 0-9 and the hyphen (-)
            Contains between 3 and 32 characters
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 50
          minItems: 0
          x-insertionOrder: false
          description: List of tags to be added to the resource
        Arn:
          description: The Amazon Resource Name (ARN) of the collection.
          type: string
        CollectionEndpoint:
          description: The endpoint for the collection.
          type: string
        DashboardEndpoint:
          description: The OpenSearch Dashboards endpoint for the collection.
          type: string
        Type:
          $ref: '#/components/schemas/CollectionType'
      required:
        - Name
      x-stackql-resource-name: collection
      x-stackql-primaryIdentifier:
        - Id
    SamlConfigOptions:
      type: object
      description: Describes saml options in form of key value map
      properties:
        Metadata:
          type: string
          description: The XML saml provider metadata document that you want to use
          maxLength: 20480
          minLength: 1
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
        UserAttribute:
          type: string
          description: Custom attribute for this saml integration
          maxLength: 2048
          minLength: 1
          pattern: '[\w+=,.@-]+'
        GroupAttribute:
          type: string
          description: Group attribute for this saml integration
          maxLength: 2048
          minLength: 1
          pattern: '[\w+=,.@-]+'
        SessionTimeout:
          type: integer
          description: Defines the session timeout in minutes
      required:
        - Metadata
      additionalProperties: false
    SecurityConfigType:
      type: string
      description: Config type for security config
      enum:
        - saml
    SecurityConfig:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: Security config description
        Id:
          type: string
          maxLength: 100
          minLength: 1
          description: The identifier of the security config
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The friendly name of the security config
        SamlOptions:
          $ref: '#/components/schemas/SamlConfigOptions'
        Type:
          $ref: '#/components/schemas/SecurityConfigType'
      x-stackql-resource-name: security_config
      x-stackql-primaryIdentifier:
        - Id
    SecurityPolicyType:
      type: string
      description: The possible types for the network policy
      enum:
        - encryption
        - network
    SecurityPolicy:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1000
          minLength: 1
          description: The description of the policy
        Policy:
          type: string
          maxLength: 20480
          minLength: 1
          pattern: '[\u0009\u000A\u000D\u0020-\u007E\u00A1-\u00FF]+'
          description: The JSON policy document that is the content for the policy
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the policy
        Type:
          $ref: '#/components/schemas/SecurityPolicyType'
      required:
        - Type
        - Name
        - Policy
      x-stackql-resource-name: security_policy
      x-stackql-primaryIdentifier:
        - Type
        - Name
    VpcEndpoint:
      type: object
      properties:
        Id:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^vpce-[0-9a-z]*$
          description: The identifier of the VPC Endpoint
        Name:
          type: string
          maxLength: 32
          minLength: 3
          pattern: ^[a-z][a-z0-9-]{2,31}$
          description: The name of the VPC Endpoint
        SecurityGroupIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 128
            minLength: 1
            pattern: ^[\w+\-]+$
          maxItems: 5
          minItems: 1
          description: The ID of one or more security groups to associate with the endpoint network interface
        SubnetIds:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 32
            minLength: 1
            pattern: ^subnet-([0-9a-f]{8}|[0-9a-f]{17})$
          maxItems: 6
          minItems: 1
          description: The ID of one or more subnets in which to create an endpoint network interface
        VpcId:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^vpc-[0-9a-z]*$
          description: The ID of the VPC in which the endpoint will be used.
      required:
        - Name
        - VpcId
        - SubnetIds
      x-stackql-resource-name: vpc_endpoint
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    access_policies:
      name: access_policies
      id: aws.opensearchserverless.access_policies
      x-cfn-schema-name: AccessPolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
    access_policy:
      name: access_policy
      id: aws.opensearchserverless.access_policy
      x-cfn-schema-name: AccessPolicy
      x-type: get
      x-identifiers:
        - Type
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::AccessPolicy'
    collections:
      name: collections
      id: aws.opensearchserverless.collections
      x-cfn-schema-name: Collection
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
    collection:
      name: collection
      id: aws.opensearchserverless.collection
      x-cfn-schema-name: Collection
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CollectionEndpoint') as collection_endpoint,
              JSON_EXTRACT(Properties, '$.DashboardEndpoint') as dashboard_endpoint
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::Collection'
    security_configs:
      name: security_configs
      id: aws.opensearchserverless.security_configs
      x-cfn-schema-name: SecurityConfig
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
    security_config:
      name: security_config
      id: aws.opensearchserverless.security_config
      x-cfn-schema-name: SecurityConfig
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SamlOptions.Metadata') as saml_options_metadata,
              JSON_EXTRACT(Properties, '$.SamlOptions.UserAttribute') as saml_options_user_attribute,
              JSON_EXTRACT(Properties, '$.SamlOptions.GroupAttribute') as saml_options_group_attribute,
              JSON_EXTRACT(Properties, '$.SamlOptions.SessionTimeout') as saml_options_session_timeout
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityConfig'
    security_policies:
      name: security_policies
      id: aws.opensearchserverless.security_policies
      x-cfn-schema-name: SecurityPolicy
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
    security_policy:
      name: security_policy
      id: aws.opensearchserverless.security_policy
      x-cfn-schema-name: SecurityPolicy
      x-type: get
      x-identifiers:
        - Type
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::SecurityPolicy'
    vpc_endpoints:
      name: vpc_endpoints
      id: aws.opensearchserverless.vpc_endpoints
      x-cfn-schema-name: VpcEndpoint
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
    vpc_endpoint:
      name: vpc_endpoint
      id: aws.opensearchserverless.vpc_endpoint
      x-cfn-schema-name: VpcEndpoint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::OpenSearchServerless::VpcEndpoint'
