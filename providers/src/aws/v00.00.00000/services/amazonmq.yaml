openapi: 3.0.0
info:
  title: AmazonMQ
  version: 1.0.0
paths: {}
components:
  schemas:
    LogList:
      type: object
      additionalProperties: false
      properties:
        Audit:
          type: boolean
        General:
          type: boolean
    LdapServerMetadata:
      type: object
      additionalProperties: false
      properties:
        Hosts:
          type: array
          uniqueItems: false
          items:
            type: string
        UserRoleName:
          type: string
        UserSearchMatching:
          type: string
        RoleName:
          type: string
        UserBase:
          type: string
        UserSearchSubtree:
          type: boolean
        RoleSearchMatching:
          type: string
        ServiceAccountUsername:
          type: string
        RoleBase:
          type: string
        ServiceAccountPassword:
          type: string
        RoleSearchSubtree:
          type: boolean
      required:
        - Hosts
        - UserSearchMatching
        - UserBase
        - RoleSearchMatching
        - ServiceAccountUsername
        - RoleBase
        - ServiceAccountPassword
    User:
      type: object
      additionalProperties: false
      properties:
        ConsoleAccess:
          type: boolean
        Username:
          type: string
        Groups:
          type: array
          uniqueItems: false
          items:
            type: string
        Password:
          type: string
      required:
        - Username
        - Password
    MaintenanceWindow:
      type: object
      additionalProperties: false
      properties:
        DayOfWeek:
          type: string
        TimeOfDay:
          type: string
        TimeZone:
          type: string
      required:
        - DayOfWeek
        - TimeOfDay
        - TimeZone
    TagsEntry:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    EncryptionOptions:
      type: object
      additionalProperties: false
      properties:
        KmsKeyId:
          type: string
        UseAwsOwnedKey:
          type: boolean
      required:
        - UseAwsOwnedKey
    ConfigurationId:
      type: object
      additionalProperties: false
      properties:
        Revision:
          type: integer
        Id:
          type: string
      required:
        - Revision
        - Id
    Broker:
      type: object
      properties:
        SecurityGroups:
          type: array
          uniqueItems: false
          items:
            type: string
        Configuration:
          $ref: '#/components/schemas/ConfigurationId'
        AuthenticationStrategy:
          type: string
        Users:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/User'
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
        StompEndpoints:
          type: array
          uniqueItems: false
          items:
            type: string
        MqttEndpoints:
          type: array
          uniqueItems: false
          items:
            type: string
        AmqpEndpoints:
          type: array
          uniqueItems: false
          items:
            type: string
        DeploymentMode:
          type: string
        EngineType:
          type: string
        EncryptionOptions:
          $ref: '#/components/schemas/EncryptionOptions'
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagsEntry'
        ConfigurationRevision:
          type: integer
        StorageType:
          type: string
        EngineVersion:
          type: string
        MaintenanceWindowStartTime:
          $ref: '#/components/schemas/MaintenanceWindow'
        HostInstanceType:
          type: string
        AutoMinorVersionUpgrade:
          type: boolean
        Logs:
          $ref: '#/components/schemas/LogList'
        ConfigurationId:
          type: string
        BrokerName:
          type: string
        WssEndpoints:
          type: array
          uniqueItems: false
          items:
            type: string
        IpAddresses:
          type: array
          uniqueItems: false
          items:
            type: string
        OpenWireEndpoints:
          type: array
          uniqueItems: false
          items:
            type: string
        LdapServerMetadata:
          $ref: '#/components/schemas/LdapServerMetadata'
        PubliclyAccessible:
          type: boolean
        Id:
          type: string
        Arn:
          type: string
      required:
        - EngineVersion
        - DeploymentMode
        - HostInstanceType
        - EngineType
        - AutoMinorVersionUpgrade
        - Users
        - PubliclyAccessible
        - BrokerName
      x-stackql-resource-name: broker
      x-stackql-primaryIdentifier:
        - Id
    Configuration:
      type: object
      properties:
        EngineVersion:
          type: string
        Description:
          type: string
        Revision:
          type: integer
        AuthenticationStrategy:
          type: string
        EngineType:
          type: string
        Data:
          type: string
        Id:
          type: string
        Arn:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagsEntry'
        Name:
          type: string
      required:
        - EngineVersion
        - EngineType
        - Data
        - Name
      x-stackql-resource-name: configuration
      x-stackql-primaryIdentifier:
        - Id
    ConfigurationAssociation:
      type: object
      properties:
        Id:
          type: string
        Broker:
          type: string
        Configuration:
          $ref: '#/components/schemas/ConfigurationId'
      required:
        - Configuration
        - Broker
      x-stackql-resource-name: configuration_association
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    brokers:
      name: brokers
      id: aws.amazonmq.brokers
      x-cfn-schema-name: Broker
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AmazonMQ::Broker'
    broker:
      name: broker
      id: aws.amazonmq.broker
      x-cfn-schema-name: Broker
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.Configuration.Revision') as configuration_revision,
              JSON_EXTRACT(Properties, '$.Configuration.Id') as configuration_id,
              JSON_EXTRACT(Properties, '$.AuthenticationStrategy') as authentication_strategy,
              JSON_EXTRACT(Properties, '$.Users') as users,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.StompEndpoints') as stomp_endpoints,
              JSON_EXTRACT(Properties, '$.MqttEndpoints') as mqtt_endpoints,
              JSON_EXTRACT(Properties, '$.AmqpEndpoints') as amqp_endpoints,
              JSON_EXTRACT(Properties, '$.DeploymentMode') as deployment_mode,
              JSON_EXTRACT(Properties, '$.EngineType') as engine_type,
              JSON_EXTRACT(Properties, '$.EncryptionOptions.KmsKeyId') as encryption_options_kms_key_id,
              JSON_EXTRACT(Properties, '$.EncryptionOptions.UseAwsOwnedKey') as encryption_options_use_aws_owned_key,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ConfigurationRevision') as configuration_revision,
              JSON_EXTRACT(Properties, '$.StorageType') as storage_type,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.MaintenanceWindowStartTime.DayOfWeek') as maintenance_window_start_time_day_of_week,
              JSON_EXTRACT(Properties, '$.MaintenanceWindowStartTime.TimeOfDay') as maintenance_window_start_time_time_of_day,
              JSON_EXTRACT(Properties, '$.MaintenanceWindowStartTime.TimeZone') as maintenance_window_start_time_time_zone,
              JSON_EXTRACT(Properties, '$.HostInstanceType') as host_instance_type,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.Logs.Audit') as logs_audit,
              JSON_EXTRACT(Properties, '$.Logs.General') as logs_general,
              JSON_EXTRACT(Properties, '$.ConfigurationId') as configuration_id,
              JSON_EXTRACT(Properties, '$.BrokerName') as broker_name,
              JSON_EXTRACT(Properties, '$.WssEndpoints') as wss_endpoints,
              JSON_EXTRACT(Properties, '$.IpAddresses') as ip_addresses,
              JSON_EXTRACT(Properties, '$.OpenWireEndpoints') as open_wire_endpoints,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.Hosts') as ldap_server_metadata_hosts,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.UserRoleName') as ldap_server_metadata_user_role_name,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.UserSearchMatching') as ldap_server_metadata_user_search_matching,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.RoleName') as ldap_server_metadata_role_name,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.UserBase') as ldap_server_metadata_user_base,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.UserSearchSubtree') as ldap_server_metadata_user_search_subtree,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.RoleSearchMatching') as ldap_server_metadata_role_search_matching,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.ServiceAccountUsername') as ldap_server_metadata_service_account_username,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.RoleBase') as ldap_server_metadata_role_base,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.ServiceAccountPassword') as ldap_server_metadata_service_account_password,
              JSON_EXTRACT(Properties, '$.LdapServerMetadata.RoleSearchSubtree') as ldap_server_metadata_role_search_subtree,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AmazonMQ::Broker'
    configurations:
      name: configurations
      id: aws.amazonmq.configurations
      x-cfn-schema-name: Configuration
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AmazonMQ::Configuration'
    configuration:
      name: configuration
      id: aws.amazonmq.configuration
      x-cfn-schema-name: Configuration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Revision') as revision,
              JSON_EXTRACT(Properties, '$.AuthenticationStrategy') as authentication_strategy,
              JSON_EXTRACT(Properties, '$.EngineType') as engine_type,
              JSON_EXTRACT(Properties, '$.Data') as data,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AmazonMQ::Configuration'
    configuration_associations:
      name: configuration_associations
      id: aws.amazonmq.configuration_associations
      x-cfn-schema-name: ConfigurationAssociation
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::AmazonMQ::ConfigurationAssociation'
    configuration_association:
      name: configuration_association
      id: aws.amazonmq.configuration_association
      x-cfn-schema-name: ConfigurationAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Broker') as broker,
              JSON_EXTRACT(Properties, '$.Configuration.Revision') as configuration_revision,
              JSON_EXTRACT(Properties, '$.Configuration.Id') as configuration_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::AmazonMQ::ConfigurationAssociation'
