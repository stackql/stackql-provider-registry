openapi: 3.0.0
info:
  title: GuardDuty
  version: 1.0.0
paths: {}
components:
  schemas:
    FeatureAdditionalConfiguration:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        Name:
          type: string
    FeatureConfigurations:
      type: object
      additionalProperties: false
      properties:
        Status:
          type: string
        AdditionalConfiguration:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/FeatureAdditionalConfiguration'
        Name:
          type: string
    CFNMalwareProtectionConfiguration:
      type: object
      additionalProperties: false
      properties:
        ScanEc2InstanceWithFindings:
          $ref: '#/components/schemas/CFNScanEc2InstanceWithFindingsConfiguration'
    CFNS3LogsConfiguration:
      type: object
      additionalProperties: false
      properties:
        Enable:
          type: boolean
    CFNScanEc2InstanceWithFindingsConfiguration:
      type: object
      additionalProperties: false
      properties:
        EbsVolumes:
          type: boolean
    CFNKubernetesAuditLogsConfiguration:
      type: object
      additionalProperties: false
      properties:
        Enable:
          type: boolean
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    CFNKubernetesConfiguration:
      type: object
      additionalProperties: false
      properties:
        AuditLogs:
          $ref: '#/components/schemas/CFNKubernetesAuditLogsConfiguration'
    CFNDataSourceConfigurations:
      type: object
      additionalProperties: false
      properties:
        MalwareProtection:
          $ref: '#/components/schemas/CFNMalwareProtectionConfiguration'
        S3Logs:
          $ref: '#/components/schemas/CFNS3LogsConfiguration'
        Kubernetes:
          $ref: '#/components/schemas/CFNKubernetesConfiguration'
    Detector:
      type: object
      properties:
        FindingPublishingFrequency:
          type: string
        Enable:
          type: boolean
        DataSources:
          $ref: '#/components/schemas/CFNDataSourceConfigurations'
        Features:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/FeatureConfigurations'
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Enable
      x-stackql-resource-name: detector
      x-stackql-primaryIdentifier:
        - Id
    Condition:
      type: object
      additionalProperties: false
      properties:
        LessThanOrEqual:
          type: integer
        Lt:
          type: integer
        GreaterThanOrEqual:
          type: integer
        Eq:
          type: array
          uniqueItems: false
          items:
            type: string
        Gt:
          type: integer
        NotEquals:
          type: array
          uniqueItems: false
          items:
            type: string
        Equals:
          type: array
          uniqueItems: false
          items:
            type: string
        LessThan:
          type: integer
        GreaterThan:
          type: integer
        Gte:
          type: integer
        Neq:
          type: array
          uniqueItems: false
          items:
            type: string
        Lte:
          type: integer
    FindingCriteria:
      type: object
      additionalProperties: false
      properties:
        Criterion:
          type: object
        ItemType:
          $ref: '#/components/schemas/Condition'
    Filter:
      type: object
      properties:
        Action:
          type: string
        Description:
          type: string
        DetectorId:
          type: string
        FindingCriteria:
          $ref: '#/components/schemas/FindingCriteria'
        Rank:
          type: integer
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
      required:
        - Action
        - Description
        - DetectorId
        - FindingCriteria
        - Rank
        - Name
      x-stackql-resource-name: filter
      x-stackql-primaryIdentifier:
        - Id
    IPSet:
      type: object
      properties:
        Format:
          type: string
        Activate:
          type: boolean
        DetectorId:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
        Location:
          type: string
      required:
        - Format
        - Activate
        - DetectorId
        - Location
      x-stackql-resource-name: ip_set
      x-stackql-primaryIdentifier:
        - Id
    Master:
      type: object
      properties:
        DetectorId:
          type: string
        MasterId:
          type: string
        InvitationId:
          type: string
      required:
        - DetectorId
        - MasterId
      x-stackql-resource-name: master
      x-stackql-primaryIdentifier:
        - MasterId
    Member:
      type: object
      properties:
        Status:
          type: string
        MemberId:
          type: string
        Email:
          type: string
        Message:
          type: string
        DisableEmailNotification:
          type: boolean
        DetectorId:
          type: string
      required:
        - MemberId
        - Email
        - DetectorId
      x-stackql-resource-name: member
      x-stackql-primaryIdentifier:
        - MemberId
    ThreatIntelSet:
      type: object
      properties:
        Format:
          type: string
        Activate:
          type: boolean
        DetectorId:
          type: string
        Id:
          type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Name:
          type: string
        Location:
          type: string
      required:
        - Format
        - Activate
        - DetectorId
        - Location
      x-stackql-resource-name: threat_intel_set
      x-stackql-primaryIdentifier:
        - Id
  x-stackQL-resources:
    detectors:
      name: detectors
      id: aws.guardduty.detectors
      x-cfn-schema-name: Detector
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::Detector'
    detector:
      name: detector
      id: aws.guardduty.detector
      x-cfn-schema-name: Detector
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FindingPublishingFrequency') as finding_publishing_frequency,
              JSON_EXTRACT(Properties, '$.Enable') as enable,
              JSON_EXTRACT(Properties, '$.DataSources.MalwareProtection') as data_sources_malware_protection,
              JSON_EXTRACT(Properties, '$.DataSources.S3Logs') as data_sources_s3_logs,
              JSON_EXTRACT(Properties, '$.DataSources.Kubernetes') as data_sources_kubernetes,
              JSON_EXTRACT(Properties, '$.Features') as features,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::Detector'
    filters:
      name: filters
      id: aws.guardduty.filters
      x-cfn-schema-name: Filter
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::Filter'
    filter:
      name: filter
      id: aws.guardduty.filter
      x-cfn-schema-name: Filter
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DetectorId') as detector_id,
              JSON_EXTRACT(Properties, '$.FindingCriteria.Criterion') as finding_criteria_criterion,
              JSON_EXTRACT(Properties, '$.FindingCriteria.ItemType') as finding_criteria_item_type,
              JSON_EXTRACT(Properties, '$.Rank') as rank,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::Filter'
    ip_sets:
      name: ip_sets
      id: aws.guardduty.ip_sets
      x-cfn-schema-name: IPSet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::IPSet'
    ip_set:
      name: ip_set
      id: aws.guardduty.ip_set
      x-cfn-schema-name: IPSet
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Format') as format,
              JSON_EXTRACT(Properties, '$.Activate') as activate,
              JSON_EXTRACT(Properties, '$.DetectorId') as detector_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Location') as location
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::IPSet'
    masters:
      name: masters
      id: aws.guardduty.masters
      x-cfn-schema-name: Master
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MasterId') as master_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::Master'
    master:
      name: master
      id: aws.guardduty.master
      x-cfn-schema-name: Master
      x-type: get
      x-identifiers:
        - MasterId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DetectorId') as detector_id,
              JSON_EXTRACT(Properties, '$.MasterId') as master_id,
              JSON_EXTRACT(Properties, '$.InvitationId') as invitation_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::Master'
    members:
      name: members
      id: aws.guardduty.members
      x-cfn-schema-name: Member
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MemberId') as member_id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::Member'
    member:
      name: member
      id: aws.guardduty.member
      x-cfn-schema-name: Member
      x-type: get
      x-identifiers:
        - MemberId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.MemberId') as member_id,
              JSON_EXTRACT(Properties, '$.Email') as email,
              JSON_EXTRACT(Properties, '$.Message') as message,
              JSON_EXTRACT(Properties, '$.DisableEmailNotification') as disable_email_notification,
              JSON_EXTRACT(Properties, '$.DetectorId') as detector_id
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::Member'
    threat_intel_sets:
      name: threat_intel_sets
      id: aws.guardduty.threat_intel_sets
      x-cfn-schema-name: ThreatIntelSet
      x-type: list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::GuardDuty::ThreatIntelSet'
    threat_intel_set:
      name: threat_intel_set
      id: aws.guardduty.threat_intel_set
      x-cfn-schema-name: ThreatIntelSet
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Format') as format,
              JSON_EXTRACT(Properties, '$.Activate') as activate,
              JSON_EXTRACT(Properties, '$.DetectorId') as detector_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Location') as location
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::GuardDuty::ThreatIntelSet'
