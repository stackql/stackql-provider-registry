openapi: 3.0.0
info:
  title: PCS
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    AuthKey:
      type: object
      description: The shared Slurm key for authentication, also known as the cluster secret.
      properties:
        SecretArn:
          type: string
          description: The Amazon Resource Name (ARN) of the the shared Slurm key.
        SecretVersion:
          type: string
          description: The version of the shared Slurm key.
      required:
        - SecretArn
        - SecretVersion
      additionalProperties: false
    Endpoint:
      type: object
      description: An endpoint available for interaction with the scheduler.
      properties:
        Port:
          type: string
          description: The endpoint's connection port number.
        PrivateIpAddress:
          type: string
          description: The endpoint's private IP address.
        Type:
          type: string
          description: Indicates the type of endpoint running at the specific IP address.
          enum:
            - SLURMCTLD
            - SLURMDBD
        PublicIpAddress:
          type: string
          description: The endpoint's public IP address.
      required:
        - Port
        - PrivateIpAddress
        - Type
      additionalProperties: false
    ErrorInfo:
      type: object
      description: An error that occurred during resource provisioning.
      properties:
        Code:
          type: string
          description: The short-form error code.
        Message:
          type: string
          description: The detailed error information.
      additionalProperties: false
    SecurityGroupId:
      type: string
      description: A VPC security group ID.
    SlurmCustomSetting:
      type: object
      description: Additional settings that directly map to Slurm settings.
      properties:
        ParameterName:
          type: string
          description: 'AWS PCS supports configuration of the following Slurm parameters for compute node groups: Weight and RealMemory.'
        ParameterValue:
          type: string
          description: The value for the configured Slurm setting.
      additionalProperties: false
      required:
        - ParameterName
        - ParameterValue
    SubnetId:
      type: string
      description: A VPC subnet ID.
    Tag:
      type: object
      description: A key-value pair to associate with a resource.
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Key
    Cluster:
      type: object
      properties:
        Arn:
          type: string
          description: The unique Amazon Resource Name (ARN) of the cluster.
        Endpoints:
          type: array
          description: The list of endpoints available for interaction with the scheduler.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Endpoint'
        ErrorInfo:
          type: array
          description: The list of errors that occurred during cluster provisioning.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ErrorInfo'
        Id:
          type: string
          description: The generated unique ID of the cluster.
          pattern: ^(pcs_[a-zA-Z0-9]+|[A-Za-z][A-Za-z0-9-]{1,40})$
        Name:
          type: string
          description: The name that identifies the cluster.
          pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
        Networking:
          type: object
          description: The networking configuration for the cluster's control plane.
          properties:
            SecurityGroupIds:
              type: array
              description: The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SecurityGroupId'
            SubnetIds:
              type: array
              description: The list of subnet IDs where AWS PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and AWS PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone. AWS PCS currently supports only 1 subnet in this list.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SubnetId'
          additionalProperties: false
        Scheduler:
          type: object
          description: The cluster management and job scheduling software associated with the cluster.
          properties:
            Type:
              type: string
              description: The software AWS PCS uses to manage cluster scaling and job scheduling.
              enum:
                - SLURM
            Version:
              type: string
              description: The version of the specified scheduling software that AWS PCS uses to manage cluster scaling and job scheduling.
          required:
            - Type
            - Version
          additionalProperties: false
        Size:
          type: string
          description: The size of the cluster.
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        SlurmConfiguration:
          type: object
          description: Additional options related to the Slurm scheduler.
          properties:
            AuthKey:
              $ref: '#/components/schemas/AuthKey'
            ScaleDownIdleTimeInSeconds:
              type: integer
              description: The time before an idle node is scaled down.
              minimum: 1
            SlurmCustomSettings:
              type: array
              description: Additional Slurm-specific configuration that directly maps to Slurm settings.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SlurmCustomSetting'
          additionalProperties: false
        Status:
          type: string
          description: The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
          enum:
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - CREATE_FAILED
            - DELETE_FAILED
            - UPDATE_FAILED
        Tags:
          description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
      required:
        - Networking
        - Scheduler
        - Size
      x-stackql-resource-name: cluster
      description: AWS::PCS::Cluster resource creates an AWS PCS cluster.
      x-type-name: AWS::PCS::Cluster
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - Name
        - Networking
        - Scheduler
        - Size
        - SlurmConfiguration
      x-read-only-properties:
        - Arn
        - Endpoints
        - ErrorInfo
        - Id
        - Status
      x-required-properties:
        - Networking
        - Scheduler
        - Size
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - pcs:TagResource
          - pcs:ListTagsForResource
          - pcs:UntagResource
      x-required-permissions:
        create:
          - ec2:CreateNetworkInterface
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:GetSecurityGroupsForVpc
          - iam:CreateServiceLinkedRole
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - pcs:CreateCluster
          - pcs:GetCluster
          - pcs:ListTagsForResource
          - pcs:TagResource
        read:
          - pcs:GetCluster
          - pcs:ListTagsForResource
        update:
          - pcs:GetCluster
          - pcs:ListTagsForResource
          - pcs:TagResource
          - pcs:UntagResource
        delete:
          - pcs:DeleteCluster
          - pcs:GetCluster
        list:
          - pcs:ListClusters
    InstanceConfig:
      type: object
      description: An EC2 instance configuration AWS PCS uses to launch compute nodes.
      properties:
        InstanceType:
          type: string
          description: The EC2 instance type that AWS PCS can provision in the compute node group.
      additionalProperties: false
    ComputeNodeGroup:
      type: object
      properties:
        AmiId:
          type: string
          description: The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
          pattern: ^ami-[a-z0-9]+$
        Arn:
          type: string
          description: The unique Amazon Resource Name (ARN) of the compute node group.
        ClusterId:
          type: string
          description: The ID of the cluster of the compute node group.
        CustomLaunchTemplate:
          type: object
          description: An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
          properties:
            Id:
              type: string
              description: The ID of the EC2 launch template to use to provision instances.
            Version:
              type: string
              description: The version of the EC2 launch template to use to provision instances.
          additionalProperties: false
          required:
            - Id
            - Version
        ErrorInfo:
          type: array
          description: The list of errors that occurred during compute node group provisioning.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ErrorInfo'
        IamInstanceProfileArn:
          type: string
          description: The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
          pattern: ^arn:aws([a-zA-Z-]{0,10})?:iam::[0-9]{12}:instance-profile/.{1,128}$
        Id:
          type: string
          description: The generated unique ID of the compute node group.
        InstanceConfigs:
          type: array
          description: A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/InstanceConfig'
        Name:
          type: string
          description: The name that identifies the compute node group.
          pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
        PurchaseOption:
          type: string
          description: Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
          enum:
            - ONDEMAND
            - SPOT
        ScalingConfiguration:
          type: object
          description: Specifies the boundaries of the compute node group auto scaling.
          properties:
            MaxInstanceCount:
              type: integer
              description: The upper bound of the number of instances allowed in the compute fleet.
              minimum: 0
            MinInstanceCount:
              type: integer
              description: The lower bound of the number of instances allowed in the compute fleet.
              minimum: 0
          additionalProperties: false
          required:
            - MaxInstanceCount
            - MinInstanceCount
        SlurmConfiguration:
          type: object
          description: Additional options related to the Slurm scheduler.
          properties:
            SlurmCustomSettings:
              type: array
              description: Additional Slurm-specific configuration that directly maps to Slurm settings.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SlurmCustomSetting'
          additionalProperties: false
        SpotOptions:
          type: object
          description: Additional configuration when you specify SPOT as the purchase option.
          properties:
            AllocationStrategy:
              type: string
              description: The Amazon EC2 allocation strategy AWS PCS uses to provision EC2 instances. AWS PCS supports lowest price, capacity optimized, and price capacity optimized. If you don't provide this option, it defaults to price capacity optimized.
              enum:
                - lowest-price
                - capacity-optimized
                - price-capacity-optimized
          additionalProperties: false
        Status:
          type: string
          description: The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
          enum:
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - CREATE_FAILED
            - DELETE_FAILED
            - UPDATE_FAILED
        SubnetIds:
          type: array
          description: The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubnetId'
        Tags:
          description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
      required:
        - ClusterId
        - CustomLaunchTemplate
        - IamInstanceProfileArn
        - InstanceConfigs
        - ScalingConfiguration
        - SubnetIds
      x-stackql-resource-name: compute_node_group
      description: AWS::PCS::ComputeNodeGroup resource creates an AWS PCS compute node group.
      x-type-name: AWS::PCS::ComputeNodeGroup
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - Name
        - ClusterId
        - InstanceConfigs
      x-read-only-properties:
        - Arn
        - ErrorInfo
        - Id
        - Status
      x-required-properties:
        - ClusterId
        - CustomLaunchTemplate
        - IamInstanceProfileArn
        - InstanceConfigs
        - ScalingConfiguration
        - SubnetIds
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - pcs:TagResource
          - pcs:ListTagsForResource
          - pcs:UntagResource
      x-required-permissions:
        create:
          - ec2:DescribeImages
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeLaunchTemplates
          - ec2:DescribeLaunchTemplateVersions
          - ec2:DescribeInstanceTypes
          - ec2:DescribeInstanceTypeOfferings
          - ec2:RunInstances
          - ec2:CreateFleet
          - ec2:CreateTags
          - iam:PassRole
          - iam:GetInstanceProfile
          - pcs:CreateComputeNodeGroup
          - pcs:GetComputeNodeGroup
          - pcs:ListTagsForResource
          - pcs:TagResource
        read:
          - pcs:GetComputeNodeGroup
          - pcs:ListTagsForResource
        update:
          - ec2:DescribeImages
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeLaunchTemplates
          - ec2:DescribeLaunchTemplateVersions
          - ec2:DescribeInstanceTypes
          - ec2:DescribeInstanceTypeOfferings
          - ec2:RunInstances
          - ec2:CreateFleet
          - ec2:CreateTags
          - iam:PassRole
          - iam:GetInstanceProfile
          - pcs:GetComputeNodeGroup
          - pcs:UpdateComputeNodeGroup
          - pcs:ListTagsForResource
          - pcs:TagResource
          - pcs:UntagResource
        delete:
          - ec2:DescribeImages
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeLaunchTemplates
          - ec2:DescribeLaunchTemplateVersions
          - ec2:DescribeInstanceTypes
          - ec2:DescribeInstanceTypeOfferings
          - ec2:TerminateInstances
          - ec2:CreateFleet
          - ec2:CreateTags
          - iam:PassRole
          - iam:GetInstanceProfile
          - pcs:GetComputeNodeGroup
          - pcs:DeleteComputeNodeGroup
          - pcs:ListTagsForResource
          - pcs:TagResource
          - pcs:UntagResource
        list:
          - pcs:ListClusters
          - pcs:ListComputeNodeGroups
    ComputeNodeGroupConfiguration:
      type: object
      description: The compute node group configuration for a queue.
      properties:
        ComputeNodeGroupId:
          type: string
          description: The compute node group ID for the compute node group configuration.
      additionalProperties: false
    Queue:
      type: object
      properties:
        Arn:
          type: string
          description: The unique Amazon Resource Name (ARN) of the queue.
          pattern: ^(.*?)
        ClusterId:
          type: string
          description: The ID of the cluster of the queue.
        ComputeNodeGroupConfigurations:
          type: array
          description: The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ComputeNodeGroupConfiguration'
        ErrorInfo:
          type: array
          description: The list of errors that occurred during queue provisioning.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ErrorInfo'
        Id:
          type: string
          description: The generated unique ID of the queue.
        Name:
          type: string
          description: The name that identifies the queue.
          pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
        Status:
          type: string
          description: The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
          enum:
            - CREATING
            - ACTIVE
            - UPDATING
            - DELETING
            - CREATE_FAILED
            - DELETE_FAILED
            - UPDATE_FAILED
        Tags:
          type: object
          description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
      required:
        - ClusterId
      x-stackql-resource-name: queue
      description: AWS::PCS::Queue resource creates an AWS PCS queue.
      x-type-name: AWS::PCS::Queue
      x-stackql-primary-identifier:
        - Arn
      x-create-only-properties:
        - Name
        - ClusterId
      x-read-only-properties:
        - Arn
        - ErrorInfo
        - Id
        - Status
      x-required-properties:
        - ClusterId
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: true
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - pcs:TagResource
          - pcs:ListTagsForResource
          - pcs:UntagResource
      x-required-permissions:
        create:
          - ec2:CreateNetworkInterface
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:GetSecurityGroupsForVpc
          - iam:CreateServiceLinkedRole
          - secretsmanager:CreateSecret
          - secretsmanager:TagResource
          - pcs:CreateQueue
          - pcs:GetQueue
          - pcs:ListTagsForResource
          - pcs:TagResource
        read:
          - pcs:GetQueue
          - pcs:ListTagsForResource
        update:
          - pcs:GetQueue
          - pcs:UpdateQueue
          - pcs:ListTagsForResource
          - pcs:TagResource
          - pcs:UntagResource
        delete:
          - pcs:DeleteQueue
          - pcs:GetQueue
        list:
          - pcs:ListClusters
          - pcs:ListQueues
    CreateClusterRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The unique Amazon Resource Name (ARN) of the cluster.
            Endpoints:
              type: array
              description: The list of endpoints available for interaction with the scheduler.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/Endpoint'
            ErrorInfo:
              type: array
              description: The list of errors that occurred during cluster provisioning.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ErrorInfo'
            Id:
              type: string
              description: The generated unique ID of the cluster.
              pattern: ^(pcs_[a-zA-Z0-9]+|[A-Za-z][A-Za-z0-9-]{1,40})$
            Name:
              type: string
              description: The name that identifies the cluster.
              pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
            Networking:
              type: object
              description: The networking configuration for the cluster's control plane.
              properties:
                SecurityGroupIds:
                  type: array
                  description: The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SecurityGroupId'
                SubnetIds:
                  type: array
                  description: The list of subnet IDs where AWS PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and AWS PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone. AWS PCS currently supports only 1 subnet in this list.
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SubnetId'
              additionalProperties: false
            Scheduler:
              type: object
              description: The cluster management and job scheduling software associated with the cluster.
              properties:
                Type:
                  type: string
                  description: The software AWS PCS uses to manage cluster scaling and job scheduling.
                  enum:
                    - SLURM
                Version:
                  type: string
                  description: The version of the specified scheduling software that AWS PCS uses to manage cluster scaling and job scheduling.
              required:
                - Type
                - Version
              additionalProperties: false
            Size:
              type: string
              description: The size of the cluster.
              enum:
                - SMALL
                - MEDIUM
                - LARGE
            SlurmConfiguration:
              type: object
              description: Additional options related to the Slurm scheduler.
              properties:
                AuthKey:
                  $ref: '#/components/schemas/AuthKey'
                ScaleDownIdleTimeInSeconds:
                  type: integer
                  description: The time before an idle node is scaled down.
                  minimum: 1
                SlurmCustomSettings:
                  type: array
                  description: Additional Slurm-specific configuration that directly maps to Slurm settings.
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SlurmCustomSetting'
              additionalProperties: false
            Status:
              type: string
              description: The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
              enum:
                - CREATING
                - ACTIVE
                - UPDATING
                - DELETING
                - CREATE_FAILED
                - DELETE_FAILED
                - UPDATE_FAILED
            Tags:
              description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
              x-patternProperties:
                ^.+$:
                  type: string
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateClusterRequest
      type: object
      required: []
    CreateComputeNodeGroupRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            AmiId:
              type: string
              description: The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
              pattern: ^ami-[a-z0-9]+$
            Arn:
              type: string
              description: The unique Amazon Resource Name (ARN) of the compute node group.
            ClusterId:
              type: string
              description: The ID of the cluster of the compute node group.
            CustomLaunchTemplate:
              type: object
              description: An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
              properties:
                Id:
                  type: string
                  description: The ID of the EC2 launch template to use to provision instances.
                Version:
                  type: string
                  description: The version of the EC2 launch template to use to provision instances.
              additionalProperties: false
              required:
                - Id
                - Version
            ErrorInfo:
              type: array
              description: The list of errors that occurred during compute node group provisioning.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ErrorInfo'
            IamInstanceProfileArn:
              type: string
              description: The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
              pattern: ^arn:aws([a-zA-Z-]{0,10})?:iam::[0-9]{12}:instance-profile/.{1,128}$
            Id:
              type: string
              description: The generated unique ID of the compute node group.
            InstanceConfigs:
              type: array
              description: A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/InstanceConfig'
            Name:
              type: string
              description: The name that identifies the compute node group.
              pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
            PurchaseOption:
              type: string
              description: Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
              enum:
                - ONDEMAND
                - SPOT
            ScalingConfiguration:
              type: object
              description: Specifies the boundaries of the compute node group auto scaling.
              properties:
                MaxInstanceCount:
                  type: integer
                  description: The upper bound of the number of instances allowed in the compute fleet.
                  minimum: 0
                MinInstanceCount:
                  type: integer
                  description: The lower bound of the number of instances allowed in the compute fleet.
                  minimum: 0
              additionalProperties: false
              required:
                - MaxInstanceCount
                - MinInstanceCount
            SlurmConfiguration:
              type: object
              description: Additional options related to the Slurm scheduler.
              properties:
                SlurmCustomSettings:
                  type: array
                  description: Additional Slurm-specific configuration that directly maps to Slurm settings.
                  x-insertionOrder: false
                  items:
                    $ref: '#/components/schemas/SlurmCustomSetting'
              additionalProperties: false
            SpotOptions:
              type: object
              description: Additional configuration when you specify SPOT as the purchase option.
              properties:
                AllocationStrategy:
                  type: string
                  description: The Amazon EC2 allocation strategy AWS PCS uses to provision EC2 instances. AWS PCS supports lowest price, capacity optimized, and price capacity optimized. If you don't provide this option, it defaults to price capacity optimized.
                  enum:
                    - lowest-price
                    - capacity-optimized
                    - price-capacity-optimized
              additionalProperties: false
            Status:
              type: string
              description: The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
              enum:
                - CREATING
                - ACTIVE
                - UPDATING
                - DELETING
                - CREATE_FAILED
                - DELETE_FAILED
                - UPDATE_FAILED
            SubnetIds:
              type: array
              description: The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/SubnetId'
            Tags:
              description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
              x-patternProperties:
                ^.+$:
                  type: string
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateComputeNodeGroupRequest
      type: object
      required: []
    CreateQueueRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Arn:
              type: string
              description: The unique Amazon Resource Name (ARN) of the queue.
              pattern: ^(.*?)
            ClusterId:
              type: string
              description: The ID of the cluster of the queue.
            ComputeNodeGroupConfigurations:
              type: array
              description: The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ComputeNodeGroupConfiguration'
            ErrorInfo:
              type: array
              description: The list of errors that occurred during queue provisioning.
              x-insertionOrder: false
              items:
                $ref: '#/components/schemas/ErrorInfo'
            Id:
              type: string
              description: The generated unique ID of the queue.
            Name:
              type: string
              description: The name that identifies the queue.
              pattern: ^(?!pcs_)^(?![A-Za-z0-9]{10}$)[A-Za-z][A-Za-z0-9-]+$
            Status:
              type: string
              description: The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
              enum:
                - CREATING
                - ACTIVE
                - UPDATING
                - DELETING
                - CREATE_FAILED
                - DELETE_FAILED
                - UPDATE_FAILED
            Tags:
              type: object
              description: 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
              x-patternProperties:
                ^.+$:
                  type: string
              additionalProperties: false
          x-stackQL-stringOnly: true
      x-title: CreateQueueRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    clusters:
      name: clusters
      id: aws.pcs.clusters
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::PCS::Cluster
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Cluster"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Endpoints') as endpoints,
              JSON_EXTRACT(Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Networking') as networking,
              JSON_EXTRACT(Properties, '$.Scheduler') as scheduler,
              JSON_EXTRACT(Properties, '$.Size') as size,
              JSON_EXTRACT(Properties, '$.SlurmConfiguration') as slurm_configuration,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::Cluster'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.Endpoints') as endpoints,
                JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Networking') as networking,
                JSON_EXTRACT(detail.Properties, '$.Scheduler') as scheduler,
                JSON_EXTRACT(detail.Properties, '$.Size') as size,
                JSON_EXTRACT(detail.Properties, '$.SlurmConfiguration') as slurm_configuration,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::PCS::Cluster'
                AND detail.data__TypeName = 'AWS::PCS::Cluster'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'Endpoints') as endpoints,
                  json_extract_path_text(Properties, 'ErrorInfo') as error_info,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Networking') as networking,
                  json_extract_path_text(Properties, 'Scheduler') as scheduler,
                  json_extract_path_text(Properties, 'Size') as size,
                  json_extract_path_text(Properties, 'SlurmConfiguration') as slurm_configuration,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::Cluster'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'Endpoints') as endpoints,
                    json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Networking') as networking,
                    json_extract_path_text(detail.Properties, 'Scheduler') as scheduler,
                    json_extract_path_text(detail.Properties, 'Size') as size,
                    json_extract_path_text(detail.Properties, 'SlurmConfiguration') as slurm_configuration,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::PCS::Cluster'
                    AND detail.data__TypeName = 'AWS::PCS::Cluster'
                    AND listing.region = 'us-east-1'
    clusters_list_only:
      name: clusters_list_only
      id: aws.pcs.clusters_list_only
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::PCS::Cluster
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::Cluster'
                AND region = 'us-east-1'
    cluster_tags:
      name: cluster_tags
      id: aws.pcs.cluster_tags
      x-cfn-schema-name: Cluster
      x-cfn-type-name: AWS::PCS::Cluster
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.Endpoints') as endpoints,
              JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Networking') as networking,
              JSON_EXTRACT(detail.Properties, '$.Scheduler') as scheduler,
              JSON_EXTRACT(detail.Properties, '$.Size') as size,
              JSON_EXTRACT(detail.Properties, '$.SlurmConfiguration') as slurm_configuration,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::PCS::Cluster'
              AND detail.data__TypeName = 'AWS::PCS::Cluster'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'Endpoints') as endpoints,
                json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Networking') as networking,
                json_extract_path_text(detail.Properties, 'Scheduler') as scheduler,
                json_extract_path_text(detail.Properties, 'Size') as size,
                json_extract_path_text(detail.Properties, 'SlurmConfiguration') as slurm_configuration,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::PCS::Cluster'
                AND detail.data__TypeName = 'AWS::PCS::Cluster'
                AND listing.region = 'us-east-1'
    compute_node_groups:
      name: compute_node_groups
      id: aws.pcs.compute_node_groups
      x-cfn-schema-name: ComputeNodeGroup
      x-cfn-type-name: AWS::PCS::ComputeNodeGroup
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__ComputeNodeGroup&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::ComputeNodeGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::ComputeNodeGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::ComputeNodeGroup"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/compute_node_groups/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/compute_node_groups/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/compute_node_groups/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AmiId') as ami_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(Properties, '$.CustomLaunchTemplate') as custom_launch_template,
              JSON_EXTRACT(Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(Properties, '$.IamInstanceProfileArn') as iam_instance_profile_arn,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InstanceConfigs') as instance_configs,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PurchaseOption') as purchase_option,
              JSON_EXTRACT(Properties, '$.ScalingConfiguration') as scaling_configuration,
              JSON_EXTRACT(Properties, '$.SlurmConfiguration') as slurm_configuration,
              JSON_EXTRACT(Properties, '$.SpotOptions') as spot_options,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::ComputeNodeGroup'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.AmiId') as ami_id,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
                JSON_EXTRACT(detail.Properties, '$.CustomLaunchTemplate') as custom_launch_template,
                JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
                JSON_EXTRACT(detail.Properties, '$.IamInstanceProfileArn') as iam_instance_profile_arn,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.InstanceConfigs') as instance_configs,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.PurchaseOption') as purchase_option,
                JSON_EXTRACT(detail.Properties, '$.ScalingConfiguration') as scaling_configuration,
                JSON_EXTRACT(detail.Properties, '$.SlurmConfiguration') as slurm_configuration,
                JSON_EXTRACT(detail.Properties, '$.SpotOptions') as spot_options,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                AND detail.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'AmiId') as ami_id,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ClusterId') as cluster_id,
                  json_extract_path_text(Properties, 'CustomLaunchTemplate') as custom_launch_template,
                  json_extract_path_text(Properties, 'ErrorInfo') as error_info,
                  json_extract_path_text(Properties, 'IamInstanceProfileArn') as iam_instance_profile_arn,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'InstanceConfigs') as instance_configs,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'PurchaseOption') as purchase_option,
                  json_extract_path_text(Properties, 'ScalingConfiguration') as scaling_configuration,
                  json_extract_path_text(Properties, 'SlurmConfiguration') as slurm_configuration,
                  json_extract_path_text(Properties, 'SpotOptions') as spot_options,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'AmiId') as ami_id,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                    json_extract_path_text(detail.Properties, 'CustomLaunchTemplate') as custom_launch_template,
                    json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                    json_extract_path_text(detail.Properties, 'IamInstanceProfileArn') as iam_instance_profile_arn,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'InstanceConfigs') as instance_configs,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'PurchaseOption') as purchase_option,
                    json_extract_path_text(detail.Properties, 'ScalingConfiguration') as scaling_configuration,
                    json_extract_path_text(detail.Properties, 'SlurmConfiguration') as slurm_configuration,
                    json_extract_path_text(detail.Properties, 'SpotOptions') as spot_options,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                    AND detail.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                    AND listing.region = 'us-east-1'
    compute_node_groups_list_only:
      name: compute_node_groups_list_only
      id: aws.pcs.compute_node_groups_list_only
      x-cfn-schema-name: ComputeNodeGroup
      x-cfn-type-name: AWS::PCS::ComputeNodeGroup
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::ComputeNodeGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                AND region = 'us-east-1'
    compute_node_group_tags:
      name: compute_node_group_tags
      id: aws.pcs.compute_node_group_tags
      x-cfn-schema-name: ComputeNodeGroup
      x-cfn-type-name: AWS::PCS::ComputeNodeGroup
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.AmiId') as ami_id,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(detail.Properties, '$.CustomLaunchTemplate') as custom_launch_template,
              JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(detail.Properties, '$.IamInstanceProfileArn') as iam_instance_profile_arn,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.InstanceConfigs') as instance_configs,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.PurchaseOption') as purchase_option,
              JSON_EXTRACT(detail.Properties, '$.ScalingConfiguration') as scaling_configuration,
              JSON_EXTRACT(detail.Properties, '$.SlurmConfiguration') as slurm_configuration,
              JSON_EXTRACT(detail.Properties, '$.SpotOptions') as spot_options,
              JSON_EXTRACT(detail.Properties, '$.Status') as status,
              JSON_EXTRACT(detail.Properties, '$.SubnetIds') as subnet_ids
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
              AND detail.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'AmiId') as ami_id,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                json_extract_path_text(detail.Properties, 'CustomLaunchTemplate') as custom_launch_template,
                json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                json_extract_path_text(detail.Properties, 'IamInstanceProfileArn') as iam_instance_profile_arn,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'InstanceConfigs') as instance_configs,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'PurchaseOption') as purchase_option,
                json_extract_path_text(detail.Properties, 'ScalingConfiguration') as scaling_configuration,
                json_extract_path_text(detail.Properties, 'SlurmConfiguration') as slurm_configuration,
                json_extract_path_text(detail.Properties, 'SpotOptions') as spot_options,
                json_extract_path_text(detail.Properties, 'Status') as status,
                json_extract_path_text(detail.Properties, 'SubnetIds') as subnet_ids
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                AND detail.data__TypeName = 'AWS::PCS::ComputeNodeGroup'
                AND listing.region = 'us-east-1'
    queues:
      name: queues
      id: aws.pcs.queues
      x-cfn-schema-name: Queue
      x-cfn-type-name: AWS::PCS::Queue
      x-identifiers:
        - Arn
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Queue&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Queue"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Queue"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::PCS::Queue"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/queues/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/queues/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/queues/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(Properties, '$.ComputeNodeGroupConfigurations') as compute_node_group_configurations,
              JSON_EXTRACT(Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::Queue'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
                JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
                JSON_EXTRACT(detail.Properties, '$.ComputeNodeGroupConfigurations') as compute_node_group_configurations,
                JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
                JSON_EXTRACT(detail.Properties, '$.Id') as id,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Status') as status,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::PCS::Queue'
                AND detail.data__TypeName = 'AWS::PCS::Queue'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Arn') as arn,
                  json_extract_path_text(Properties, 'ClusterId') as cluster_id,
                  json_extract_path_text(Properties, 'ComputeNodeGroupConfigurations') as compute_node_group_configurations,
                  json_extract_path_text(Properties, 'ErrorInfo') as error_info,
                  json_extract_path_text(Properties, 'Id') as id,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Status') as status,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::PCS::Queue'
                  AND data__Identifier = '<Arn>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Arn') as arn,
                    json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                    json_extract_path_text(detail.Properties, 'ComputeNodeGroupConfigurations') as compute_node_group_configurations,
                    json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                    json_extract_path_text(detail.Properties, 'Id') as id,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Status') as status,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::PCS::Queue'
                    AND detail.data__TypeName = 'AWS::PCS::Queue'
                    AND listing.region = 'us-east-1'
    queues_list_only:
      name: queues_list_only
      id: aws.pcs.queues_list_only
      x-cfn-schema-name: Queue
      x-cfn-type-name: AWS::PCS::Queue
      x-identifiers:
        - Arn
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::Queue'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::PCS::Queue'
                AND region = 'us-east-1'
    queue_tags:
      name: queue_tags
      id: aws.pcs.queue_tags
      x-cfn-schema-name: Queue
      x-cfn-type-name: AWS::PCS::Queue
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Arn') as arn,
              JSON_EXTRACT(detail.Properties, '$.ClusterId') as cluster_id,
              JSON_EXTRACT(detail.Properties, '$.ComputeNodeGroupConfigurations') as compute_node_group_configurations,
              JSON_EXTRACT(detail.Properties, '$.ErrorInfo') as error_info,
              JSON_EXTRACT(detail.Properties, '$.Id') as id,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Status') as status
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::PCS::Queue'
              AND detail.data__TypeName = 'AWS::PCS::Queue'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Arn') as arn,
                json_extract_path_text(detail.Properties, 'ClusterId') as cluster_id,
                json_extract_path_text(detail.Properties, 'ComputeNodeGroupConfigurations') as compute_node_group_configurations,
                json_extract_path_text(detail.Properties, 'ErrorInfo') as error_info,
                json_extract_path_text(detail.Properties, 'Id') as id,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Status') as status
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::PCS::Queue'
                AND detail.data__TypeName = 'AWS::PCS::Queue'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Cluster&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateCluster
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__ComputeNodeGroup&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateComputeNodeGroup
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateComputeNodeGroupRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Queue&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateQueue
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateQueueRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
