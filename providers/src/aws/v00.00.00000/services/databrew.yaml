openapi: 3.0.0
info:
  title: DataBrew
  version: 2.0.0
  x-serviceName: cloudcontrolapi
servers:
  - url: https://cloudcontrolapi.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The CloudControlApi multi-region endpoint
  - url: https://cloudcontrolapi.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CloudControlApi endpoint for China (Beijing) and China (Ningxia)
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  x-cloud-control-schemas:
    AlreadyExistsException: {}
    CancelResourceRequestInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: CancelResourceRequestInput
      type: object
    CancelResourceRequestOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    ClientToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    ClientTokenConflictException: {}
    ConcurrentModificationException: {}
    ConcurrentOperationException: {}
    CreateResourceInput:
      properties:
        ClientToken:
          type: string
        DesiredState:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/Properties'
            - description: >-
                <p>Structured data format representing the desired state of the resource, consisting of that resource's properties and their desired values.</p> <note> <p>Cloud Control API currently supports JSON as a structured data format.</p> </note> <pre><code> &lt;p&gt;Specify the desired state as one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A JSON blob&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A local path containing the desired state in JSON data format&lt;/p&gt;
                &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html#resource-operations-create-desiredstate&quot;&gt;Composing the desired state of the resource&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Cloud Control API User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about the properties of a specific resource, refer to the related topic for the resource in the
                &lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&quot;&gt;Resource and property types reference&lt;/a&gt; in the &lt;i&gt;CloudFormation Users Guide&lt;/i&gt;.&lt;/p&gt; </code></pre>
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - DesiredState
      title: CreateResourceInput
      type: object
    CreateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    DeleteResourceInput:
      properties:
        ClientToken:
          type: string
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
      required:
        - Identifier
      title: DeleteResourceInput
      type: object
    DeleteResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    GeneralServiceException: {}
    GetResourceInput:
      properties:
        TypeName:
          $ref: '#/components/x-cloud-control-schemas/TypeName'
        Identifier:
          $ref: '#/components/x-cloud-control-schemas/Identifier'
        TypeVersionId:
          $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
        RoleArn:
          $ref: '#/components/x-cloud-control-schemas/RoleArn'
      required:
        - TypeName
        - Identifier
      title: GetResourceInput
      type: object
    GetResourceOutput:
      properties:
        ResourceDescription:
          $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
        TypeName:
          type: string
      type: object
    GetResourceRequestStatusInput:
      properties:
        RequestToken:
          $ref: '#/components/x-cloud-control-schemas/RequestToken'
      required:
        - RequestToken
      title: GetResourceRequestStatusInput
      type: object
    GetResourceRequestStatusOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
    HandlerErrorCode:
      enum:
        - NotUpdatable
        - InvalidRequest
        - AccessDenied
        - InvalidCredentials
        - AlreadyExists
        - NotFound
        - ResourceConflict
        - Throttling
        - ServiceLimitExceeded
        - NotStabilized
        - GeneralServiceException
        - ServiceInternalError
        - ServiceTimeout
        - NetworkFailure
        - InternalFailure
      type: string
    HandlerFailureException: {}
    HandlerInternalFailureException: {}
    HandlerNextToken:
      maxLength: 2048
      minLength: 1
      pattern: .+
      type: string
    Identifier:
      maxLength: 1024
      minLength: 1
      pattern: .+
      type: string
    InvalidCredentialsException: {}
    InvalidRequestException: {}
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NetworkFailureException: {}
    NextToken:
      maxLength: 2048
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    NotStabilizedException: {}
    NotUpdatableException: {}
    Operation:
      enum:
        - CREATE
        - DELETE
        - UPDATE
      type: string
    OperationStatus:
      enum:
        - PENDING
        - IN_PROGRESS
        - SUCCESS
        - FAILED
        - CANCEL_IN_PROGRESS
        - CANCEL_COMPLETE
      type: string
    OperationStatuses:
      items:
        $ref: '#/components/x-cloud-control-schemas/OperationStatus'
      type: array
    Operations:
      items:
        $ref: '#/components/x-cloud-control-schemas/Operation'
      type: array
    PatchDocument:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    PrivateTypeException: {}
    ProgressEvent:
      example:
        ErrorCode: string
        EventTime: number
        Identifier: string
        Operation: string
        OperationStatus: string
        RequestToken: string
        ResourceModel: string
        RetryAfter: number
        StatusMessage: string
        TypeName: string
      properties:
        ErrorCode:
          type: string
        EventTime:
          type: number
        Identifier:
          type: string
        Operation:
          type: string
        OperationStatus:
          type: string
        RequestToken:
          type: string
        ResourceModel:
          type: string
        RetryAfter:
          type: number
        StatusMessage:
          type: string
        TypeName:
          type: string
      type: object
    Properties:
      format: password
      maxLength: 65536
      minLength: 1
      pattern: '[\s\S]*'
      type: string
    RequestToken:
      maxLength: 128
      minLength: 1
      pattern: '[-A-Za-z0-9+/=]+'
      type: string
    RequestTokenNotFoundException: {}
    ResourceConflictException: {}
    ResourceDescription:
      description: Represents information about a provisioned resource.
      properties:
        Identifier:
          type: string
        Properties:
          type: string
      type: object
    ResourceDescriptions:
      items:
        $ref: '#/components/x-cloud-control-schemas/ResourceDescription'
      type: array
    ResourceNotFoundException: {}
    ResourceRequestStatusFilter:
      description: The filter criteria to use in determining the requests returned.
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/OperationStatuses'
            - description: >-
                <p>The operation statuses to include in the filter.</p> <ul> <li> <p> <code>PENDING</code>: The operation has been requested, but not yet initiated.</p> </li> <li> <p> <code>IN_PROGRESS</code>: The operation is in progress.</p> </li> <li> <p> <code>SUCCESS</code>: The operation completed.</p> </li> <li> <p> <code>FAILED</code>: The operation failed.</p> </li> <li> <p> <code>CANCEL_IN_PROGRESS</code>: The operation is in the process of being canceled.</p> </li> <li> <p>
                <code>CANCEL_COMPLETE</code>: The operation has been canceled.</p> </li> </ul>
      type: object
    ResourceRequestStatusSummaries:
      items:
        $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: array
    RoleArn:
      maxLength: 2048
      minLength: 20
      pattern: arn:.+:iam::[0-9]{12}:role/.+
      type: string
    ServiceInternalErrorException: {}
    ServiceLimitExceededException: {}
    StatusMessage:
      maxLength: 1024
      minLength: 0
      pattern: '[\s\S]*'
      type: string
    ThrottlingException: {}
    Timestamp:
      format: date-time
      type: string
    TypeName:
      maxLength: 196
      minLength: 10
      pattern: '[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}::[A-Za-z0-9]{2,64}'
      type: string
    TypeNotFoundException: {}
    TypeVersionId:
      maxLength: 128
      minLength: 1
      pattern: '[A-Za-z0-9-]+'
      type: string
    UnsupportedActionException: {}
    UpdateResourceInput:
      properties:
        undefined:
          allOf:
            - $ref: '#/components/x-cloud-control-schemas/PatchDocument'
      required:
        - Identifier
        - PatchDocument
      title: UpdateResourceInput
      type: object
    UpdateResourceOutput:
      properties:
        ProgressEvent:
          $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
      type: object
  schemas:
    JsonOptions:
      description: Json options
      type: object
      properties:
        MultiLine:
          type: boolean
      additionalProperties: false
    ExcelOptions:
      type: object
      properties:
        SheetNames:
          type: array
          x-insertionOrder: true
          items:
            type: string
          minItems: 1
          maxItems: 1
        SheetIndexes:
          type: array
          x-insertionOrder: true
          items:
            type: integer
          minItems: 1
          maxItems: 1
        HeaderRow:
          type: boolean
      oneOf:
        - required:
            - SheetNames
        - required:
            - SheetIndexes
      additionalProperties: false
    CsvOptions:
      description: Csv options
      type: object
      properties:
        Delimiter:
          type: string
          minLength: 1
          maxLength: 1
        HeaderRow:
          type: boolean
      additionalProperties: false
    FormatOptions:
      description: Format options for dataset
      type: object
      properties:
        Json:
          $ref: '#/components/schemas/JsonOptions'
        Excel:
          $ref: '#/components/schemas/ExcelOptions'
        Csv:
          $ref: '#/components/schemas/CsvOptions'
      additionalProperties: false
    Input:
      description: Input
      type: object
      properties:
        S3InputDefinition:
          $ref: '#/components/schemas/S3Location'
        DataCatalogInputDefinition:
          $ref: '#/components/schemas/DataCatalogInputDefinition'
        DatabaseInputDefinition:
          $ref: '#/components/schemas/DatabaseInputDefinition'
        Metadata:
          $ref: '#/components/schemas/Metadata'
      additionalProperties: false
    S3Location:
      description: Input location
      type: object
      properties:
        Bucket:
          type: string
        Key:
          type: string
      additionalProperties: false
      required:
        - Bucket
    DataCatalogInputDefinition:
      type: object
      properties:
        CatalogId:
          description: Catalog id
          type: string
        DatabaseName:
          description: Database name
          type: string
        TableName:
          description: Table name
          type: string
        TempDirectory:
          $ref: '#/components/schemas/S3Location'
      additionalProperties: false
    DatabaseInputDefinition:
      type: object
      properties:
        GlueConnectionName:
          description: Glue connection name
          type: string
        DatabaseTableName:
          description: Database table name
          type: string
        TempDirectory:
          $ref: '#/components/schemas/S3Location'
        QueryString:
          description: Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.
          type: string
      additionalProperties: false
      required:
        - GlueConnectionName
    Metadata:
      type: object
      properties:
        SourceArn:
          description: 'Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.'
          type: string
      additionalProperties: false
    BucketOwner:
      description: Bucket owner
      type: string
      minLength: 12
      maxLength: 12
    PathOptions:
      description: Path options for dataset
      type: object
      properties:
        FilesLimit:
          $ref: '#/components/schemas/FilesLimit'
        LastModifiedDateCondition:
          $ref: '#/components/schemas/FilterExpression'
        Parameters:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/PathParameter'
      additionalProperties: false
    FilesLimit:
      type: object
      properties:
        MaxFiles:
          description: Maximum number of files
          type: integer
        OrderedBy:
          description: Ordered by
          enum:
            - LAST_MODIFIED_DATE
          type: string
        Order:
          description: Order
          enum:
            - ASCENDING
            - DESCENDING
          type: string
      additionalProperties: false
      required:
        - MaxFiles
    PathParameter:
      description: A key-value pair to associate dataset parameter name with its definition.
      type: object
      properties:
        PathParameterName:
          $ref: '#/components/schemas/PathParameterName'
        DatasetParameter:
          $ref: '#/components/schemas/DatasetParameter'
      additionalProperties: false
      required:
        - PathParameterName
        - DatasetParameter
    PathParameterName:
      description: Parameter name
      type: string
      minLength: 1
      maxLength: 255
    DatasetParameter:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/PathParameterName'
        Type:
          description: Parameter type
          enum:
            - String
            - Number
            - Datetime
          type: string
        DatetimeOptions:
          $ref: '#/components/schemas/DatetimeOptions'
        CreateColumn:
          description: Add the value of this parameter as a column in a dataset.
          type: boolean
        Filter:
          $ref: '#/components/schemas/FilterExpression'
      additionalProperties: false
      required:
        - Name
        - Type
    DatetimeOptions:
      type: object
      properties:
        Format:
          description: Date/time format of a date parameter
          type: string
          minLength: 2
          maxLength: 100
        TimezoneOffset:
          description: Timezone offset
          type: string
          minLength: 1
          maxLength: 6
          pattern: ^(Z|[-+](\d|\d{2}|\d{2}:?\d{2}))$
        LocaleCode:
          description: Locale code for a date parameter
          type: string
          minLength: 2
          maxLength: 100
          pattern: ^[A-Za-z0-9_\.#@\-]+$
      additionalProperties: false
      required:
        - Format
    FilterExpression:
      type: object
      properties:
        Expression:
          description: Filtering expression for a parameter
          type: string
          minLength: 4
          maxLength: 1024
          pattern: ^[><0-9A-Za-z_.,:)(!= ]+$
        ValuesMap:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/FilterValue'
      additionalProperties: false
      required:
        - Expression
        - ValuesMap
    FilterValue:
      description: A key-value pair to associate expression variable names with their values
      type: object
      properties:
        ValueReference:
          description: Variable name
          type: string
          minLength: 2
          maxLength: 128
          pattern: ^:[A-Za-z0-9_]+$
        Value:
          type: string
          minLength: 0
          maxLength: 1024
      additionalProperties: false
      required:
        - ValueReference
        - Value
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Value
        - Key
    Dataset:
      type: object
      properties:
        Name:
          description: Dataset name
          type: string
          minLength: 1
          maxLength: 255
        Format:
          description: Dataset format
          enum:
            - CSV
            - JSON
            - PARQUET
            - EXCEL
            - ORC
          type: string
        FormatOptions:
          description: Format options for dataset
          $ref: '#/components/schemas/FormatOptions'
        Input:
          description: Input
          $ref: '#/components/schemas/Input'
        Source:
          description: Source type of the dataset
          type: string
          enum:
            - S3
            - DATA-CATALOG
            - DATABASE
        PathOptions:
          description: PathOptions
          $ref: '#/components/schemas/PathOptions'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - Input
      x-stackql-resource-name: dataset
      description: Resource schema for AWS::DataBrew::Dataset.
      x-type-name: AWS::DataBrew::Dataset
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Tags
      x-required-properties:
        - Name
        - Input
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateDataset
          - databrew:TagResource
          - databrew:UntagResource
          - glue:GetConnection
          - glue:GetTable
          - iam:PassRole
        read:
          - databrew:DescribeDataset
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateDataset
          - glue:GetConnection
          - glue:GetTable
        delete:
          - databrew:DeleteDataset
        list:
          - databrew:ListDatasets
          - databrew:ListTagsForResource
          - iam:ListRoles
    CsvOutputOptions:
      description: Output Csv options
      type: object
      properties:
        Delimiter:
          type: string
          minLength: 1
          maxLength: 1
      additionalProperties: false
    OutputFormatOptions:
      description: Format options for job Output
      type: object
      properties:
        Csv:
          $ref: '#/components/schemas/CsvOutputOptions'
      additionalProperties: false
    OutputLocation:
      description: Output location
      type: object
      properties:
        Bucket:
          type: string
        Key:
          type: string
        BucketOwner:
          type: string
          minLength: 12
          maxLength: 12
      additionalProperties: false
      required:
        - Bucket
    Output:
      type: object
      properties:
        CompressionFormat:
          enum:
            - GZIP
            - LZ4
            - SNAPPY
            - BZIP2
            - DEFLATE
            - LZO
            - BROTLI
            - ZSTD
            - ZLIB
          type: string
        Format:
          enum:
            - CSV
            - JSON
            - PARQUET
            - GLUEPARQUET
            - AVRO
            - ORC
            - XML
            - TABLEAUHYPER
          type: string
        FormatOptions:
          $ref: '#/components/schemas/OutputFormatOptions'
        PartitionColumns:
          type: array
          x-insertionOrder: true
          uniqueItems: true
          items:
            type: string
        Location:
          $ref: '#/components/schemas/S3Location'
        Overwrite:
          type: boolean
        MaxOutputFiles:
          type: integer
          minimum: 1
          maximum: 999
      additionalProperties: false
      required:
        - Location
    DataCatalogOutput:
      type: object
      properties:
        CatalogId:
          type: string
          minLength: 1
          maxLength: 255
        DatabaseName:
          type: string
          minLength: 1
          maxLength: 255
        TableName:
          type: string
          minLength: 1
          maxLength: 255
        S3Options:
          $ref: '#/components/schemas/S3TableOutputOptions'
        DatabaseOptions:
          $ref: '#/components/schemas/DatabaseTableOutputOptions'
        Overwrite:
          type: boolean
      additionalProperties: false
      required:
        - DatabaseName
        - TableName
    S3TableOutputOptions:
      type: object
      properties:
        Location:
          $ref: '#/components/schemas/S3Location'
      additionalProperties: false
      required:
        - Location
    DatabaseTableOutputOptions:
      type: object
      properties:
        TempDirectory:
          $ref: '#/components/schemas/S3Location'
        TableName:
          type: string
          minLength: 1
          maxLength: 255
      additionalProperties: false
      required:
        - TableName
    DatabaseOutput:
      type: object
      properties:
        GlueConnectionName:
          description: Glue connection name
          type: string
        DatabaseOutputMode:
          description: Database table name
          enum:
            - NEW_TABLE
          type: string
        DatabaseOptions:
          $ref: '#/components/schemas/DatabaseTableOutputOptions'
      additionalProperties: false
      required:
        - GlueConnectionName
        - DatabaseOptions
    Recipe:
      type: object
      properties:
        Description:
          description: Description of the recipe
          minLength: 0
          maxLength: 1024
          type: string
        Name:
          description: Recipe name
          type: string
          minLength: 1
          maxLength: 255
        Steps:
          type: array
          x-insertionOrder: true
          items:
            type: object
            $ref: '#/components/schemas/RecipeStep'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - Steps
      x-stackql-resource-name: recipe
      description: Resource schema for AWS::DataBrew::Recipe.
      x-type-name: AWS::DataBrew::Recipe
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Tags
      x-required-properties:
        - Name
        - Steps
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateRecipe
          - databrew:TagResource
          - databrew:UntagResource
          - iam:PassRole
        read:
          - databrew:DescribeRecipe
          - databrew:ListTagsForResource
          - iam:ListRoles
        delete:
          - databrew:DeleteRecipeVersion
        list:
          - databrew:ListRecipes
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateRecipe
    SampleMode:
      description: Sample configuration mode for profile jobs.
      enum:
        - FULL_DATASET
        - CUSTOM_ROWS
      type: string
    JobSize:
      description: Sample configuration size for profile jobs.
      format: int64
      type: integer
    JobSample:
      description: Job Sample
      type: object
      properties:
        Mode:
          $ref: '#/components/schemas/SampleMode'
        Size:
          $ref: '#/components/schemas/JobSize'
      additionalProperties: false
    ProfileConfiguration:
      type: object
      properties:
        DatasetStatisticsConfiguration:
          $ref: '#/components/schemas/StatisticsConfiguration'
        ProfileColumns:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ColumnSelector'
          minItems: 1
        ColumnStatisticsConfigurations:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ColumnStatisticsConfiguration'
          minItems: 1
        EntityDetectorConfiguration:
          $ref: '#/components/schemas/EntityDetectorConfiguration'
      additionalProperties: false
    EntityDetectorConfiguration:
      type: object
      additionalProperties: false
      required:
        - EntityTypes
      properties:
        EntityTypes:
          type: array
          x-insertionOrder: true
          minItems: 1
          items:
            type: string
            minLength: 1
            maxLength: 128
            pattern: ^[A-Z_][A-Z\\d_]*$
        AllowedStatistics:
          $ref: '#/components/schemas/AllowedStatistics'
    AllowedStatistics:
      type: object
      additionalProperties: false
      required:
        - Statistics
      properties:
        Statistics:
          type: array
          x-insertionOrder: true
          minItems: 1
          items:
            $ref: '#/components/schemas/Statistic'
    ColumnStatisticsConfiguration:
      type: object
      properties:
        Selectors:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ColumnSelector'
          minItems: 1
        Statistics:
          $ref: '#/components/schemas/StatisticsConfiguration'
      required:
        - Statistics
      additionalProperties: false
    StatisticsConfiguration:
      type: object
      properties:
        IncludedStatistics:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Statistic'
          minItems: 1
        Overrides:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/StatisticOverride'
          minItems: 1
      additionalProperties: false
    ColumnSelector:
      description: Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression
      type: object
      properties:
        Regex:
          description: A regular expression for selecting a column from a dataset
          type: string
          minLength: 1
          maxLength: 255
        Name:
          description: The name of a column from a dataset
          type: string
          minLength: 1
          maxLength: 255
      additionalProperties: false
    Statistic:
      type: string
      minLength: 1
      maxLength: 128
      pattern: ^[A-Z\_]+$
    StatisticOverride:
      type: object
      properties:
        Statistic:
          $ref: '#/components/schemas/Statistic'
        Parameters:
          $ref: '#/components/schemas/ParameterMap'
      required:
        - Statistic
        - Parameters
      additionalProperties: false
    ParameterMap:
      type: object
      additionalProperties: false
      x-patternProperties:
        ^[A-Za-z0-9]{1,128}$:
          type: string
    ValidationMode:
      type: string
      enum:
        - CHECK_ALL
    ValidationConfiguration:
      description: Configuration to attach Rulesets to the job
      type: object
      additionalProperties: false
      properties:
        RulesetArn:
          description: Arn of the Ruleset
          type: string
          minLength: 20
          maxLength: 2048
        ValidationMode:
          $ref: '#/components/schemas/ValidationMode'
      required:
        - RulesetArn
    Job:
      type: object
      properties:
        DatasetName:
          description: Dataset name
          type: string
          minLength: 1
          maxLength: 255
        EncryptionKeyArn:
          description: Encryption Key Arn
          type: string
          minLength: 20
          maxLength: 2048
        EncryptionMode:
          description: Encryption mode
          enum:
            - SSE-KMS
            - SSE-S3
          type: string
        Name:
          description: Job name
          type: string
          minLength: 1
          maxLength: 255
        Type:
          description: Job type
          enum:
            - PROFILE
            - RECIPE
          type: string
        LogSubscription:
          description: Log subscription
          enum:
            - ENABLE
            - DISABLE
          type: string
        MaxCapacity:
          description: Max capacity
          type: integer
        MaxRetries:
          description: Max retries
          type: integer
        Outputs:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Output'
        DataCatalogOutputs:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/DataCatalogOutput'
        DatabaseOutputs:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/DatabaseOutput'
        OutputLocation:
          description: Output location
          $ref: '#/components/schemas/OutputLocation'
        ProjectName:
          description: Project name
          type: string
          minLength: 1
          maxLength: 255
        Recipe:
          $ref: '#/components/schemas/Recipe'
        RoleArn:
          description: Role arn
          type: string
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Timeout:
          description: Timeout
          type: integer
        JobSample:
          description: Job Sample
          $ref: '#/components/schemas/JobSample'
        ProfileConfiguration:
          description: Profile Job configuration
          $ref: '#/components/schemas/ProfileConfiguration'
        ValidationConfigurations:
          description: Data quality rules configuration
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ValidationConfiguration'
      required:
        - Name
        - RoleArn
        - Type
      x-stackql-resource-name: job
      description: Resource schema for AWS::DataBrew::Job.
      x-type-name: AWS::DataBrew::Job
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Type
        - Tags
      x-required-properties:
        - Name
        - RoleArn
        - Type
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateProfileJob
          - databrew:CreateRecipeJob
          - databrew:TagResource
          - databrew:UntagResource
          - iam:PassRole
        read:
          - databrew:DescribeJob
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateProfileJob
          - databrew:UpdateRecipeJob
          - iam:PassRole
        delete:
          - databrew:DeleteJob
        list:
          - databrew:ListJobs
          - databrew:ListTagsForResource
          - iam:ListRoles
    Sample:
      type: object
      properties:
        Size:
          description: Sample size
          minimum: 1
          type: integer
        Type:
          description: Sample type
          enum:
            - FIRST_N
            - LAST_N
            - RANDOM
          type: string
      additionalProperties: false
      required:
        - Type
    Project:
      type: object
      properties:
        DatasetName:
          description: Dataset name
          type: string
          minLength: 1
          maxLength: 255
        Name:
          description: Project name
          type: string
          minLength: 1
          maxLength: 255
        RecipeName:
          description: Recipe name
          type: string
          minLength: 1
          maxLength: 255
        RoleArn:
          description: Role arn
          type: string
        Sample:
          description: Sample
          $ref: '#/components/schemas/Sample'
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DatasetName
        - Name
        - RecipeName
        - RoleArn
      x-stackql-resource-name: project
      description: Resource schema for AWS::DataBrew::Project.
      x-type-name: AWS::DataBrew::Project
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Tags
      x-required-properties:
        - DatasetName
        - Name
        - RecipeName
        - RoleArn
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateProject
          - databrew:TagResource
          - databrew:UntagResource
          - iam:PassRole
        read:
          - databrew:DescribeProject
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateProject
          - iam:PassRole
        delete:
          - databrew:DeleteProject
        list:
          - databrew:ListProjects
          - databrew:ListTagsForResource
          - iam:ListRoles
    SecondaryInput:
      description: Secondary input
      type: object
      properties:
        S3InputDefinition:
          $ref: '#/components/schemas/S3Location'
        DataCatalogInputDefinition:
          $ref: '#/components/schemas/DataCatalogInputDefinition'
      oneOf:
        - required:
            - S3InputDefinition
        - required:
            - DataCatalogInputDefinition
      additionalProperties: false
    RecipeStep:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/Action'
        ConditionExpressions:
          description: Condition expressions applied to the step action
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ConditionExpression'
      additionalProperties: false
      required:
        - Action
    Action:
      type: object
      properties:
        Operation:
          description: Step action operation
          type: string
        Parameters:
          anyOf:
            - $ref: '#/components/schemas/RecipeParameters'
            - $ref: '#/components/schemas/ParameterMap'
      additionalProperties: false
      required:
        - Operation
    ConditionExpression:
      description: Condition expressions applied to the step action
      type: object
      properties:
        Condition:
          description: Input condition to be applied to the target column
          type: string
        Value:
          description: Value of the condition
          type: string
        TargetColumn:
          description: Name of the target column
          type: string
      additionalProperties: false
      required:
        - Condition
        - TargetColumn
    RecipeParameters:
      additionalProperties: false
      properties:
        AggregateFunction:
          type: string
        Base:
          type: string
        CaseStatement:
          type: string
        CategoryMap:
          type: string
        CharsToRemove:
          type: string
        CollapseConsecutiveWhitespace:
          type: string
        ColumnDataType:
          type: string
        ColumnRange:
          type: string
        Count:
          type: string
        CustomCharacters:
          type: string
        CustomStopWords:
          type: string
        CustomValue:
          type: string
        DatasetsColumns:
          type: string
        DateAddValue:
          type: string
        DateTimeFormat:
          type: string
        DateTimeParameters:
          type: string
        DeleteOtherRows:
          type: string
        Delimiter:
          type: string
        EndPattern:
          type: string
        EndPosition:
          type: string
        EndValue:
          type: string
        ExpandContractions:
          type: string
        Exponent:
          type: string
        FalseString:
          type: string
        GroupByAggFunctionOptions:
          type: string
        GroupByColumns:
          type: string
        HiddenColumns:
          type: string
        IgnoreCase:
          type: string
        IncludeInSplit:
          type: string
        Interval:
          type: string
        IsText:
          type: string
        JoinKeys:
          type: string
        JoinType:
          type: string
        LeftColumns:
          type: string
        Limit:
          type: string
        LowerBound:
          type: string
        MapType:
          type: string
        ModeType:
          type: string
        MultiLine:
          type: boolean
        NumRows:
          type: string
        NumRowsAfter:
          type: string
        NumRowsBefore:
          type: string
        OrderByColumn:
          type: string
        OrderByColumns:
          type: string
        Other:
          type: string
        Pattern:
          type: string
        PatternOption1:
          type: string
        PatternOption2:
          type: string
        PatternOptions:
          type: string
        Period:
          type: string
        Position:
          type: string
        RemoveAllPunctuation:
          type: string
        RemoveAllQuotes:
          type: string
        RemoveAllWhitespace:
          type: string
        RemoveCustomCharacters:
          type: string
        RemoveCustomValue:
          type: string
        RemoveLeadingAndTrailingPunctuation:
          type: string
        RemoveLeadingAndTrailingQuotes:
          type: string
        RemoveLeadingAndTrailingWhitespace:
          type: string
        RemoveLetters:
          type: string
        RemoveNumbers:
          type: string
        RemoveSourceColumn:
          type: string
        RemoveSpecialCharacters:
          type: string
        RightColumns:
          type: string
        SampleSize:
          type: string
        SampleType:
          type: string
        SecondInput:
          type: string
        SecondaryInputs:
          type: array
          x-insertionOrder: true
          uniqueItems: false
          items:
            $ref: '#/components/schemas/SecondaryInput'
        SourceColumn:
          type: string
        SourceColumn1:
          type: string
        SourceColumn2:
          type: string
        SourceColumns:
          type: string
        StartColumnIndex:
          type: string
        StartPattern:
          type: string
        StartPosition:
          type: string
        StartValue:
          type: string
        StemmingMode:
          type: string
        StepCount:
          type: string
        StepIndex:
          type: string
        StopWordsMode:
          type: string
        Strategy:
          type: string
        SheetNames:
          type: array
          x-insertionOrder: true
          items:
            type: string
          minItems: 1
          maxItems: 1
        SheetIndexes:
          type: array
          x-insertionOrder: true
          items:
            type: integer
          minItems: 1
          maxItems: 1
        TargetColumn:
          type: string
        TargetColumnNames:
          type: string
        TargetDateFormat:
          type: string
        TargetIndex:
          type: string
        TimeZone:
          type: string
        TokenizerPattern:
          type: string
        TrueString:
          type: string
        UdfLang:
          type: string
        Units:
          type: string
        UnpivotColumn:
          type: string
        UpperBound:
          type: string
        UseNewDataFrame:
          type: string
        Value:
          type: string
        Value1:
          type: string
        Value2:
          type: string
        ValueColumn:
          type: string
        ViewFrame:
          type: string
        Input:
          description: Input
          type: object
          properties:
            S3InputDefinition:
              $ref: '#/components/schemas/S3Location'
            DataCatalogInputDefinition:
              $ref: '#/components/schemas/DataCatalogInputDefinition'
          oneOf:
            - required:
                - S3InputDefinition
            - required:
                - DataCatalogInputDefinition
          additionalProperties: false
    Expression:
      description: Expression with rule conditions
      type: string
      minLength: 4
      maxLength: 1024
      pattern: ^[><0-9A-Za-z_.,:)(!= ]+$
    SubstitutionValue:
      description: A key-value pair to associate expression's substitution variable names with their values
      type: object
      properties:
        ValueReference:
          description: Variable name
          type: string
          minLength: 2
          maxLength: 128
          pattern: ^:[A-Za-z0-9_]+$
        Value:
          description: Value or column name
          type: string
          minLength: 0
          maxLength: 1024
      additionalProperties: false
      required:
        - ValueReference
        - Value
    ValuesMap:
      type: array
      x-insertionOrder: true
      items:
        $ref: '#/components/schemas/SubstitutionValue'
    ThresholdValue:
      description: Threshold value for a rule
      type: number
    ThresholdType:
      description: Threshold type for a rule
      enum:
        - GREATER_THAN_OR_EQUAL
        - LESS_THAN_OR_EQUAL
        - GREATER_THAN
        - LESS_THAN
      type: string
    ThresholdUnit:
      description: Threshold unit for a rule
      enum:
        - COUNT
        - PERCENTAGE
      type: string
    Threshold:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/ThresholdValue'
        Type:
          $ref: '#/components/schemas/ThresholdType'
        Unit:
          $ref: '#/components/schemas/ThresholdUnit'
      required:
        - Value
      additionalProperties: false
    Disabled:
      description: Boolean value to disable/enable a rule
      type: boolean
    Rule:
      description: Data quality rule for a target resource (dataset)
      type: object
      properties:
        Name:
          description: Name of the rule
          type: string
          minLength: 1
          maxLength: 128
        Disabled:
          $ref: '#/components/schemas/Disabled'
        CheckExpression:
          $ref: '#/components/schemas/Expression'
        SubstitutionMap:
          $ref: '#/components/schemas/ValuesMap'
        Threshold:
          $ref: '#/components/schemas/Threshold'
        ColumnSelectors:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ColumnSelector'
          minItems: 1
      required:
        - Name
        - CheckExpression
      additionalProperties: false
    Ruleset:
      type: object
      properties:
        Name:
          description: Name of the Ruleset
          type: string
          minLength: 1
          maxLength: 255
        Description:
          description: Description of the Ruleset
          type: string
          maxLength: 1024
        TargetArn:
          description: Arn of the target resource (dataset) to apply the ruleset to
          type: string
          minLength: 20
          maxLength: 2048
        Rules:
          description: List of the data quality rules in the ruleset
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Rule'
          minItems: 1
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - TargetArn
        - Rules
      x-stackql-resource-name: ruleset
      description: Resource schema for AWS::DataBrew::Ruleset.
      x-type-name: AWS::DataBrew::Ruleset
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - TargetArn
        - Tags
      x-required-properties:
        - Name
        - TargetArn
        - Rules
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateRuleset
          - databrew:TagResource
          - databrew:UntagResource
          - iam:PassRole
        read:
          - databrew:DescribeRuleset
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateRuleset
        delete:
          - databrew:DeleteRuleset
        list:
          - databrew:ListRulesets
          - databrew:ListTagsForResource
          - iam:ListRoles
    JobName:
      description: Job name
      type: string
      minLength: 1
      maxLength: 255
    Schedule:
      type: object
      properties:
        JobNames:
          type: array
          x-insertionOrder: true
          uniqueItems: true
          items:
            $ref: '#/components/schemas/JobName'
        CronExpression:
          description: Schedule cron
          type: string
          minLength: 1
          maxLength: 512
        Name:
          description: Schedule Name
          type: string
          minLength: 1
          maxLength: 255
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
        - CronExpression
      x-stackql-resource-name: schedule
      description: Resource schema for AWS::DataBrew::Schedule.
      x-type-name: AWS::DataBrew::Schedule
      x-stackql-primary-identifier:
        - Name
      x-create-only-properties:
        - Name
        - Tags
      x-required-properties:
        - Name
        - CronExpression
      x-tagging:
        taggable: true
        tagOnCreate: true
        tagUpdatable: false
        cloudFormationSystemTags: true
        tagProperty: /properties/Tags
        permissions:
          - databrew:TagResource
          - databrew:UntagResource
          - databrew:ListTagsForResource
      x-required-permissions:
        create:
          - databrew:CreateSchedule
          - databrew:TagResource
          - databrew:UntagResource
          - iam:PassRole
        read:
          - databrew:DescribeSchedule
          - databrew:ListTagsForResource
          - iam:ListRoles
        update:
          - databrew:UpdateSchedule
        delete:
          - databrew:DeleteSchedule
        list:
          - databrew:ListSchedules
          - databrew:ListTagsForResource
          - iam:ListRoles
    CreateDatasetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Dataset name
              type: string
              minLength: 1
              maxLength: 255
            Format:
              description: Dataset format
              enum:
                - CSV
                - JSON
                - PARQUET
                - EXCEL
                - ORC
              type: string
            FormatOptions:
              description: Format options for dataset
              $ref: '#/components/schemas/FormatOptions'
            Input:
              description: Input
              $ref: '#/components/schemas/Input'
            Source:
              description: Source type of the dataset
              type: string
              enum:
                - S3
                - DATA-CATALOG
                - DATABASE
            PathOptions:
              description: PathOptions
              $ref: '#/components/schemas/PathOptions'
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateDatasetRequest
      type: object
      required: []
    CreateRecipeRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Description:
              description: Description of the recipe
              minLength: 0
              maxLength: 1024
              type: string
            Name:
              description: Recipe name
              type: string
              minLength: 1
              maxLength: 255
            Steps:
              type: array
              x-insertionOrder: true
              items:
                type: object
                $ref: '#/components/schemas/RecipeStep'
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRecipeRequest
      type: object
      required: []
    CreateJobRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DatasetName:
              description: Dataset name
              type: string
              minLength: 1
              maxLength: 255
            EncryptionKeyArn:
              description: Encryption Key Arn
              type: string
              minLength: 20
              maxLength: 2048
            EncryptionMode:
              description: Encryption mode
              enum:
                - SSE-KMS
                - SSE-S3
              type: string
            Name:
              description: Job name
              type: string
              minLength: 1
              maxLength: 255
            Type:
              description: Job type
              enum:
                - PROFILE
                - RECIPE
              type: string
            LogSubscription:
              description: Log subscription
              enum:
                - ENABLE
                - DISABLE
              type: string
            MaxCapacity:
              description: Max capacity
              type: integer
            MaxRetries:
              description: Max retries
              type: integer
            Outputs:
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/Output'
            DataCatalogOutputs:
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/DataCatalogOutput'
            DatabaseOutputs:
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/DatabaseOutput'
            OutputLocation:
              description: Output location
              $ref: '#/components/schemas/OutputLocation'
            ProjectName:
              description: Project name
              type: string
              minLength: 1
              maxLength: 255
            Recipe:
              $ref: '#/components/schemas/Recipe'
            RoleArn:
              description: Role arn
              type: string
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
            Timeout:
              description: Timeout
              type: integer
            JobSample:
              description: Job Sample
              $ref: '#/components/schemas/JobSample'
            ProfileConfiguration:
              description: Profile Job configuration
              $ref: '#/components/schemas/ProfileConfiguration'
            ValidationConfigurations:
              description: Data quality rules configuration
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/ValidationConfiguration'
          x-stackQL-stringOnly: true
      x-title: CreateJobRequest
      type: object
      required: []
    CreateProjectRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            DatasetName:
              description: Dataset name
              type: string
              minLength: 1
              maxLength: 255
            Name:
              description: Project name
              type: string
              minLength: 1
              maxLength: 255
            RecipeName:
              description: Recipe name
              type: string
              minLength: 1
              maxLength: 255
            RoleArn:
              description: Role arn
              type: string
            Sample:
              description: Sample
              $ref: '#/components/schemas/Sample'
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateProjectRequest
      type: object
      required: []
    CreateRulesetRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            Name:
              description: Name of the Ruleset
              type: string
              minLength: 1
              maxLength: 255
            Description:
              description: Description of the Ruleset
              type: string
              maxLength: 1024
            TargetArn:
              description: Arn of the target resource (dataset) to apply the ruleset to
              type: string
              minLength: 20
              maxLength: 2048
            Rules:
              description: List of the data quality rules in the ruleset
              type: array
              x-insertionOrder: true
              items:
                $ref: '#/components/schemas/Rule'
              minItems: 1
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateRulesetRequest
      type: object
      required: []
    CreateScheduleRequest:
      properties:
        ClientToken:
          type: string
        RoleArn:
          type: string
        TypeName:
          type: string
        TypeVersionId:
          type: string
        DesiredState:
          type: object
          properties:
            JobNames:
              type: array
              x-insertionOrder: true
              uniqueItems: true
              items:
                $ref: '#/components/schemas/JobName'
            CronExpression:
              description: Schedule cron
              type: string
              minLength: 1
              maxLength: 512
            Name:
              description: Schedule Name
              type: string
              minLength: 1
              maxLength: 255
            Tags:
              type: array
              x-insertionOrder: false
              uniqueItems: false
              items:
                $ref: '#/components/schemas/Tag'
          x-stackQL-stringOnly: true
      x-title: CreateScheduleRequest
      type: object
      required: []
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  x-stackQL-resources:
    datasets:
      name: datasets
      id: aws.databrew.datasets
      x-cfn-schema-name: Dataset
      x-cfn-type-name: AWS::DataBrew::Dataset
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Dataset&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Dataset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Dataset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Dataset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/datasets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Format') as _format,
              JSON_EXTRACT(Properties, '$.FormatOptions') as format_options,
              JSON_EXTRACT(Properties, '$.Input') as input,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.PathOptions') as path_options,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Dataset'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Format') as _format,
                JSON_EXTRACT(detail.Properties, '$.FormatOptions') as format_options,
                JSON_EXTRACT(detail.Properties, '$.Input') as input,
                JSON_EXTRACT(detail.Properties, '$.Source') as source,
                JSON_EXTRACT(detail.Properties, '$.PathOptions') as path_options,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Dataset'
                AND detail.data__TypeName = 'AWS::DataBrew::Dataset'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Format') as _format,
                  json_extract_path_text(Properties, 'FormatOptions') as format_options,
                  json_extract_path_text(Properties, 'Input') as input,
                  json_extract_path_text(Properties, 'Source') as source,
                  json_extract_path_text(Properties, 'PathOptions') as path_options,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Dataset'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Format') as _format,
                    json_extract_path_text(detail.Properties, 'FormatOptions') as format_options,
                    json_extract_path_text(detail.Properties, 'Input') as input,
                    json_extract_path_text(detail.Properties, 'Source') as source,
                    json_extract_path_text(detail.Properties, 'PathOptions') as path_options,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Dataset'
                    AND detail.data__TypeName = 'AWS::DataBrew::Dataset'
                    AND listing.region = 'us-east-1'
    datasets_list_only:
      name: datasets_list_only
      id: aws.databrew.datasets_list_only
      x-cfn-schema-name: Dataset
      x-cfn-type-name: AWS::DataBrew::Dataset
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Dataset'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Dataset'
                AND region = 'us-east-1'
    dataset_tags:
      name: dataset_tags
      id: aws.databrew.dataset_tags
      x-cfn-schema-name: Dataset
      x-cfn-type-name: AWS::DataBrew::Dataset
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Format') as _format,
              JSON_EXTRACT(detail.Properties, '$.FormatOptions') as format_options,
              JSON_EXTRACT(detail.Properties, '$.Input') as input,
              JSON_EXTRACT(detail.Properties, '$.Source') as source,
              JSON_EXTRACT(detail.Properties, '$.PathOptions') as path_options
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Dataset'
              AND detail.data__TypeName = 'AWS::DataBrew::Dataset'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Format') as _format,
                json_extract_path_text(detail.Properties, 'FormatOptions') as format_options,
                json_extract_path_text(detail.Properties, 'Input') as input,
                json_extract_path_text(detail.Properties, 'Source') as source,
                json_extract_path_text(detail.Properties, 'PathOptions') as path_options
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Dataset'
                AND detail.data__TypeName = 'AWS::DataBrew::Dataset'
                AND listing.region = 'us-east-1'
    recipes:
      name: recipes
      id: aws.databrew.recipes
      x-cfn-schema-name: Recipe
      x-cfn-type-name: AWS::DataBrew::Recipe
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Recipe&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Recipe"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Recipe"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Recipe"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/recipes/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/recipes/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/recipes/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Steps') as steps,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Recipe'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Steps') as steps,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Recipe'
                AND detail.data__TypeName = 'AWS::DataBrew::Recipe'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Steps') as steps,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Recipe'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Steps') as steps,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Recipe'
                    AND detail.data__TypeName = 'AWS::DataBrew::Recipe'
                    AND listing.region = 'us-east-1'
    recipes_list_only:
      name: recipes_list_only
      id: aws.databrew.recipes_list_only
      x-cfn-schema-name: Recipe
      x-cfn-type-name: AWS::DataBrew::Recipe
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Recipe'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Recipe'
                AND region = 'us-east-1'
    recipe_tags:
      name: recipe_tags
      id: aws.databrew.recipe_tags
      x-cfn-schema-name: Recipe
      x-cfn-type-name: AWS::DataBrew::Recipe
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Steps') as steps
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Recipe'
              AND detail.data__TypeName = 'AWS::DataBrew::Recipe'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Steps') as steps
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Recipe'
                AND detail.data__TypeName = 'AWS::DataBrew::Recipe'
                AND listing.region = 'us-east-1'
    jobs:
      name: jobs
      id: aws.databrew.jobs
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::DataBrew::Job
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Job&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Job"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DatasetName') as dataset_name,
              JSON_EXTRACT(Properties, '$.EncryptionKeyArn') as encryption_key_arn,
              JSON_EXTRACT(Properties, '$.EncryptionMode') as encryption_mode,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.LogSubscription') as log_subscription,
              JSON_EXTRACT(Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(Properties, '$.Outputs') as outputs,
              JSON_EXTRACT(Properties, '$.DataCatalogOutputs') as data_catalog_outputs,
              JSON_EXTRACT(Properties, '$.DatabaseOutputs') as database_outputs,
              JSON_EXTRACT(Properties, '$.OutputLocation') as output_location,
              JSON_EXTRACT(Properties, '$.ProjectName') as project_name,
              JSON_EXTRACT(Properties, '$.Recipe') as recipe,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.JobSample') as job_sample,
              JSON_EXTRACT(Properties, '$.ProfileConfiguration') as profile_configuration,
              JSON_EXTRACT(Properties, '$.ValidationConfigurations') as validation_configurations
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Job'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DatasetName') as dataset_name,
                JSON_EXTRACT(detail.Properties, '$.EncryptionKeyArn') as encryption_key_arn,
                JSON_EXTRACT(detail.Properties, '$.EncryptionMode') as encryption_mode,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Type') as type,
                JSON_EXTRACT(detail.Properties, '$.LogSubscription') as log_subscription,
                JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
                JSON_EXTRACT(detail.Properties, '$.MaxRetries') as max_retries,
                JSON_EXTRACT(detail.Properties, '$.Outputs') as outputs,
                JSON_EXTRACT(detail.Properties, '$.DataCatalogOutputs') as data_catalog_outputs,
                JSON_EXTRACT(detail.Properties, '$.DatabaseOutputs') as database_outputs,
                JSON_EXTRACT(detail.Properties, '$.OutputLocation') as output_location,
                JSON_EXTRACT(detail.Properties, '$.ProjectName') as project_name,
                JSON_EXTRACT(detail.Properties, '$.Recipe') as recipe,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags,
                JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
                JSON_EXTRACT(detail.Properties, '$.JobSample') as job_sample,
                JSON_EXTRACT(detail.Properties, '$.ProfileConfiguration') as profile_configuration,
                JSON_EXTRACT(detail.Properties, '$.ValidationConfigurations') as validation_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Job'
                AND detail.data__TypeName = 'AWS::DataBrew::Job'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DatasetName') as dataset_name,
                  json_extract_path_text(Properties, 'EncryptionKeyArn') as encryption_key_arn,
                  json_extract_path_text(Properties, 'EncryptionMode') as encryption_mode,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Type') as type,
                  json_extract_path_text(Properties, 'LogSubscription') as log_subscription,
                  json_extract_path_text(Properties, 'MaxCapacity') as max_capacity,
                  json_extract_path_text(Properties, 'MaxRetries') as max_retries,
                  json_extract_path_text(Properties, 'Outputs') as outputs,
                  json_extract_path_text(Properties, 'DataCatalogOutputs') as data_catalog_outputs,
                  json_extract_path_text(Properties, 'DatabaseOutputs') as database_outputs,
                  json_extract_path_text(Properties, 'OutputLocation') as output_location,
                  json_extract_path_text(Properties, 'ProjectName') as project_name,
                  json_extract_path_text(Properties, 'Recipe') as recipe,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Tags') as tags,
                  json_extract_path_text(Properties, 'Timeout') as timeout,
                  json_extract_path_text(Properties, 'JobSample') as job_sample,
                  json_extract_path_text(Properties, 'ProfileConfiguration') as profile_configuration,
                  json_extract_path_text(Properties, 'ValidationConfigurations') as validation_configurations
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Job'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DatasetName') as dataset_name,
                    json_extract_path_text(detail.Properties, 'EncryptionKeyArn') as encryption_key_arn,
                    json_extract_path_text(detail.Properties, 'EncryptionMode') as encryption_mode,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Type') as type,
                    json_extract_path_text(detail.Properties, 'LogSubscription') as log_subscription,
                    json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                    json_extract_path_text(detail.Properties, 'MaxRetries') as max_retries,
                    json_extract_path_text(detail.Properties, 'Outputs') as outputs,
                    json_extract_path_text(detail.Properties, 'DataCatalogOutputs') as data_catalog_outputs,
                    json_extract_path_text(detail.Properties, 'DatabaseOutputs') as database_outputs,
                    json_extract_path_text(detail.Properties, 'OutputLocation') as output_location,
                    json_extract_path_text(detail.Properties, 'ProjectName') as project_name,
                    json_extract_path_text(detail.Properties, 'Recipe') as recipe,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Tags') as tags,
                    json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                    json_extract_path_text(detail.Properties, 'JobSample') as job_sample,
                    json_extract_path_text(detail.Properties, 'ProfileConfiguration') as profile_configuration,
                    json_extract_path_text(detail.Properties, 'ValidationConfigurations') as validation_configurations
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Job'
                    AND detail.data__TypeName = 'AWS::DataBrew::Job'
                    AND listing.region = 'us-east-1'
    jobs_list_only:
      name: jobs_list_only
      id: aws.databrew.jobs_list_only
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::DataBrew::Job
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Job'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Job'
                AND region = 'us-east-1'
    job_tags:
      name: job_tags
      id: aws.databrew.job_tags
      x-cfn-schema-name: Job
      x-cfn-type-name: AWS::DataBrew::Job
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DatasetName') as dataset_name,
              JSON_EXTRACT(detail.Properties, '$.EncryptionKeyArn') as encryption_key_arn,
              JSON_EXTRACT(detail.Properties, '$.EncryptionMode') as encryption_mode,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Type') as type,
              JSON_EXTRACT(detail.Properties, '$.LogSubscription') as log_subscription,
              JSON_EXTRACT(detail.Properties, '$.MaxCapacity') as max_capacity,
              JSON_EXTRACT(detail.Properties, '$.MaxRetries') as max_retries,
              JSON_EXTRACT(detail.Properties, '$.Outputs') as outputs,
              JSON_EXTRACT(detail.Properties, '$.DataCatalogOutputs') as data_catalog_outputs,
              JSON_EXTRACT(detail.Properties, '$.DatabaseOutputs') as database_outputs,
              JSON_EXTRACT(detail.Properties, '$.OutputLocation') as output_location,
              JSON_EXTRACT(detail.Properties, '$.ProjectName') as project_name,
              JSON_EXTRACT(detail.Properties, '$.Recipe') as recipe,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(detail.Properties, '$.JobSample') as job_sample,
              JSON_EXTRACT(detail.Properties, '$.ProfileConfiguration') as profile_configuration,
              JSON_EXTRACT(detail.Properties, '$.ValidationConfigurations') as validation_configurations
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Job'
              AND detail.data__TypeName = 'AWS::DataBrew::Job'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DatasetName') as dataset_name,
                json_extract_path_text(detail.Properties, 'EncryptionKeyArn') as encryption_key_arn,
                json_extract_path_text(detail.Properties, 'EncryptionMode') as encryption_mode,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Type') as type,
                json_extract_path_text(detail.Properties, 'LogSubscription') as log_subscription,
                json_extract_path_text(detail.Properties, 'MaxCapacity') as max_capacity,
                json_extract_path_text(detail.Properties, 'MaxRetries') as max_retries,
                json_extract_path_text(detail.Properties, 'Outputs') as outputs,
                json_extract_path_text(detail.Properties, 'DataCatalogOutputs') as data_catalog_outputs,
                json_extract_path_text(detail.Properties, 'DatabaseOutputs') as database_outputs,
                json_extract_path_text(detail.Properties, 'OutputLocation') as output_location,
                json_extract_path_text(detail.Properties, 'ProjectName') as project_name,
                json_extract_path_text(detail.Properties, 'Recipe') as recipe,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'Timeout') as timeout,
                json_extract_path_text(detail.Properties, 'JobSample') as job_sample,
                json_extract_path_text(detail.Properties, 'ProfileConfiguration') as profile_configuration,
                json_extract_path_text(detail.Properties, 'ValidationConfigurations') as validation_configurations
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Job'
                AND detail.data__TypeName = 'AWS::DataBrew::Job'
                AND listing.region = 'us-east-1'
    projects:
      name: projects
      id: aws.databrew.projects
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::DataBrew::Project
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Project"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/projects/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DatasetName') as dataset_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RecipeName') as recipe_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Sample') as sample,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Project'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.DatasetName') as dataset_name,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.RecipeName') as recipe_name,
                JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
                JSON_EXTRACT(detail.Properties, '$.Sample') as sample,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Project'
                AND detail.data__TypeName = 'AWS::DataBrew::Project'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'DatasetName') as dataset_name,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'RecipeName') as recipe_name,
                  json_extract_path_text(Properties, 'RoleArn') as role_arn,
                  json_extract_path_text(Properties, 'Sample') as sample,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Project'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'DatasetName') as dataset_name,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'RecipeName') as recipe_name,
                    json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                    json_extract_path_text(detail.Properties, 'Sample') as sample,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Project'
                    AND detail.data__TypeName = 'AWS::DataBrew::Project'
                    AND listing.region = 'us-east-1'
    projects_list_only:
      name: projects_list_only
      id: aws.databrew.projects_list_only
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::DataBrew::Project
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Project'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Project'
                AND region = 'us-east-1'
    project_tags:
      name: project_tags
      id: aws.databrew.project_tags
      x-cfn-schema-name: Project
      x-cfn-type-name: AWS::DataBrew::Project
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.DatasetName') as dataset_name,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.RecipeName') as recipe_name,
              JSON_EXTRACT(detail.Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(detail.Properties, '$.Sample') as sample
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Project'
              AND detail.data__TypeName = 'AWS::DataBrew::Project'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'DatasetName') as dataset_name,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'RecipeName') as recipe_name,
                json_extract_path_text(detail.Properties, 'RoleArn') as role_arn,
                json_extract_path_text(detail.Properties, 'Sample') as sample
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Project'
                AND detail.data__TypeName = 'AWS::DataBrew::Project'
                AND listing.region = 'us-east-1'
    rulesets:
      name: rulesets
      id: aws.databrew.rulesets
      x-cfn-schema-name: Ruleset
      x-cfn-type-name: AWS::DataBrew::Ruleset
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Ruleset&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Ruleset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Ruleset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Ruleset"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn,
              JSON_EXTRACT(Properties, '$.Rules') as rules,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Ruleset'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Description') as description,
                JSON_EXTRACT(detail.Properties, '$.TargetArn') as target_arn,
                JSON_EXTRACT(detail.Properties, '$.Rules') as rules,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Ruleset'
                AND detail.data__TypeName = 'AWS::DataBrew::Ruleset'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Description') as description,
                  json_extract_path_text(Properties, 'TargetArn') as target_arn,
                  json_extract_path_text(Properties, 'Rules') as rules,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Ruleset'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Description') as description,
                    json_extract_path_text(detail.Properties, 'TargetArn') as target_arn,
                    json_extract_path_text(detail.Properties, 'Rules') as rules,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Ruleset'
                    AND detail.data__TypeName = 'AWS::DataBrew::Ruleset'
                    AND listing.region = 'us-east-1'
    rulesets_list_only:
      name: rulesets_list_only
      id: aws.databrew.rulesets_list_only
      x-cfn-schema-name: Ruleset
      x-cfn-type-name: AWS::DataBrew::Ruleset
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Ruleset'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Ruleset'
                AND region = 'us-east-1'
    ruleset_tags:
      name: ruleset_tags
      id: aws.databrew.ruleset_tags
      x-cfn-schema-name: Ruleset
      x-cfn-type-name: AWS::DataBrew::Ruleset
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.Name') as name,
              JSON_EXTRACT(detail.Properties, '$.Description') as description,
              JSON_EXTRACT(detail.Properties, '$.TargetArn') as target_arn,
              JSON_EXTRACT(detail.Properties, '$.Rules') as rules
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Ruleset'
              AND detail.data__TypeName = 'AWS::DataBrew::Ruleset'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'Name') as name,
                json_extract_path_text(detail.Properties, 'Description') as description,
                json_extract_path_text(detail.Properties, 'TargetArn') as target_arn,
                json_extract_path_text(detail.Properties, 'Rules') as rules
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Ruleset'
                AND detail.data__TypeName = 'AWS::DataBrew::Ruleset'
                AND listing.region = 'us-east-1'
    schedules:
      name: schedules
      id: aws.databrew.schedules
      x-cfn-schema-name: Schedule
      x-cfn-type-name: AWS::DataBrew::Schedule
      x-identifiers:
        - Name
      x-type: cloud_control
      methods:
        create_resource:
          config:
            requestBodyTranslate:
              algorithm: naive_DesiredState
          operation:
            $ref: '#/paths/~1?Action=CreateResource&Version=2021-09-30&__Schedule&__detailTransformed=true/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Schedule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_resource:
          operation:
            $ref: '#/paths/~1?Action=UpdateResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Schedule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_resource:
          operation:
            $ref: '#/paths/~1?Action=DeleteResource&Version=2021-09-30/post'
          request:
            mediaType: application/x-amz-json-1.0
            base: |-
              {
                "TypeName": "AWS::DataBrew::Schedule"
              }
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        insert:
          - $ref: '#/components/x-stackQL-resources/schedules/methods/create_resource'
        delete:
          - $ref: '#/components/x-stackQL-resources/schedules/methods/delete_resource'
        update:
          - $ref: '#/components/x-stackQL-resources/schedules/methods/update_resource'
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3" && requiredParams == [ data__Identifier ]
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.JobNames') as job_names,
              JSON_EXTRACT(Properties, '$.CronExpression') as cron_expression,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Schedule'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "sqlite3"
              ddl: |-
                SELECT
                detail.region,
                JSON_EXTRACT(detail.Properties, '$.JobNames') as job_names,
                JSON_EXTRACT(detail.Properties, '$.CronExpression') as cron_expression,
                JSON_EXTRACT(detail.Properties, '$.Name') as name,
                JSON_EXTRACT(detail.Properties, '$.Tags') as tags
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                WHERE listing.data__TypeName = 'AWS::DataBrew::Schedule'
                AND detail.data__TypeName = 'AWS::DataBrew::Schedule'
                AND listing.region = 'us-east-1'
              fallback:
                predicate: sqlDialect == "postgres" && requiredParams == [ data__Identifier ]
                ddl: |-
                  SELECT
                  region,
                  data__Identifier,
                  json_extract_path_text(Properties, 'JobNames') as job_names,
                  json_extract_path_text(Properties, 'CronExpression') as cron_expression,
                  json_extract_path_text(Properties, 'Name') as name,
                  json_extract_path_text(Properties, 'Tags') as tags
                  FROM aws.cloud_control.resource WHERE data__TypeName = 'AWS::DataBrew::Schedule'
                  AND data__Identifier = '<Name>'
                  AND region = 'us-east-1'
                fallback:
                  predicate: sqlDialect == "postgres"
                  ddl: |-
                    SELECT
                    detail.region,
                    json_extract_path_text(detail.Properties, 'JobNames') as job_names,
                    json_extract_path_text(detail.Properties, 'CronExpression') as cron_expression,
                    json_extract_path_text(detail.Properties, 'Name') as name,
                    json_extract_path_text(detail.Properties, 'Tags') as tags
                    FROM aws.cloud_control.resources listing
                    INNER JOIN aws.cloud_control.resource detail
                    ON detail.data__Identifier = listing.Identifier
                    AND detail.region = listing.region
                    WHERE listing.data__TypeName = 'AWS::DataBrew::Schedule'
                    AND detail.data__TypeName = 'AWS::DataBrew::Schedule'
                    AND listing.region = 'us-east-1'
    schedules_list_only:
      name: schedules_list_only
      id: aws.databrew.schedules_list_only
      x-cfn-schema-name: Schedule
      x-cfn-type-name: AWS::DataBrew::Schedule
      x-identifiers:
        - Name
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Schedule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM aws.cloud_control.resources WHERE data__TypeName = 'AWS::DataBrew::Schedule'
                AND region = 'us-east-1'
    schedule_tags:
      name: schedule_tags
      id: aws.databrew.schedule_tags
      x-cfn-schema-name: Schedule
      x-cfn-type-name: AWS::DataBrew::Schedule
      x-type: cloud_control_view
      methods: {}
      sqlVerbs:
        insert: []
        delete: []
        update: []
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              detail.region,
              JSON_EXTRACT(json_each.value, '$.Key') as tag_key,
              JSON_EXTRACT(json_each.value, '$.Value') as tag_value,
              JSON_EXTRACT(detail.Properties, '$.JobNames') as job_names,
              JSON_EXTRACT(detail.Properties, '$.CronExpression') as cron_expression,
              JSON_EXTRACT(detail.Properties, '$.Name') as name
              FROM aws.cloud_control.resources listing
              INNER JOIN aws.cloud_control.resource detail
              ON detail.data__Identifier = listing.Identifier
              AND detail.region = listing.region
              ,json_each(JSON_EXTRACT(detail.Properties, '$.Tags'))
              WHERE listing.data__TypeName = 'AWS::DataBrew::Schedule'
              AND detail.data__TypeName = 'AWS::DataBrew::Schedule'
              AND listing.region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                detail.region,
                json_extract_path_text(json_each.value, 'Key') as tag_key,
                json_extract_path_text(json_each.value, 'Value') as tag_value,
                json_extract_path_text(detail.Properties, 'JobNames') as job_names,
                json_extract_path_text(detail.Properties, 'CronExpression') as cron_expression,
                json_extract_path_text(detail.Properties, 'Name') as name
                FROM aws.cloud_control.resources listing
                INNER JOIN aws.cloud_control.resource detail
                ON detail.data__Identifier = listing.Identifier
                AND detail.region = listing.region
                ,json_array_elements_text(json_extract_path_text(detail.Properties, 'Tags'))
                WHERE listing.data__TypeName = 'AWS::DataBrew::Schedule'
                AND detail.data__TypeName = 'AWS::DataBrew::Schedule'
                AND listing.region = 'us-east-1'
paths:
  /?Action=CreateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/CreateResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=DeleteResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: DeleteResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.DeleteResource
            enum:
              - CloudApiService.DeleteResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/x-cloud-control-schemas/DeleteResourceInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/DeleteResourceOutput'
          description: Success
  /?Action=UpdateResource&Version=2021-09-30:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateResource
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.UpdateResource
            enum:
              - CloudApiService.UpdateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              properties:
                ClientName:
                  type: string
                Identifier:
                  $ref: '#/components/x-cloud-control-schemas/Identifier'
                PatchDocument:
                  type: string
                RoleArn:
                  $ref: '#/components/x-cloud-control-schemas/RoleArn'
                TypeName:
                  $ref: '#/components/x-cloud-control-schemas/TypeName'
                TypeVersionId:
                  $ref: '#/components/x-cloud-control-schemas/TypeVersionId'
              required:
                - Identifier
                - PatchDocument
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/UpdateResourceOutput'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Dataset&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateDataset
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Recipe&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRecipe
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Job&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateJob
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Project&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateProject
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Ruleset&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateRuleset
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateRulesetRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
  /?Action=CreateResource&Version=2021-09-30&__Schedule&__detailTransformed=true:
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: CreateSchedule
      parameters:
        - description: Action Header
          in: header
          name: X-Amz-Target
          required: false
          schema:
            default: CloudApiService.CreateResource
            enum:
              - CloudApiService.CreateResource
            type: string
        - in: header
          name: Content-Type
          required: false
          schema:
            default: application/x-amz-json-1.0
            enum:
              - application/x-amz-json-1.0
            type: string
      requestBody:
        content:
          application/x-amz-json-1.0:
            schema:
              $ref: '#/components/schemas/CreateScheduleRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/x-cloud-control-schemas/ProgressEvent'
          description: Success
x-stackQL-config:
  requestTranslate:
    algorithm: drop_double_underscore_params
  pagination:
    requestToken:
      key: NextToken
      location: body
    responseToken:
      key: NextToken
      location: body
